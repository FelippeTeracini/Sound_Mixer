
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009200  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409200  00409200  00019200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e8  20400000  00409208  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000151f8  204009e8  00409bf0  000209e8  2**3
                  ALLOC
  4 .stack        00002000  20415be0  0041ede8  000209e8  2**0
                  ALLOC
  5 .heap         00000200  20417be0  00420de8  000209e8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a16  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001f35e  00000000  00000000  00020a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e15  00000000  00000000  0003fdcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ab0f  00000000  00000000  00043be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012f8  00000000  00000000  0004e6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011d8  00000000  00000000  0004f9e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00021c27  00000000  00000000  00050bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011113  00000000  00000000  000727e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00093358  00000000  00000000  000838fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005e24  00000000  00000000  00116c54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 7b 41 20 19 53 40 00 c9 53 40 00 c9 53 40 00     .{A .S@..S@..S@.
  400010:	c9 53 40 00 c9 53 40 00 c9 53 40 00 00 00 00 00     .S@..S@..S@.....
	...
  40002c:	a9 04 40 00 c9 53 40 00 00 00 00 00 b9 05 40 00     ..@..S@.......@.
  40003c:	0d 06 40 00 c9 53 40 00 c9 53 40 00 c9 53 40 00     ..@..S@..S@..S@.
  40004c:	c9 53 40 00 c9 53 40 00 c9 53 40 00 c9 53 40 00     .S@..S@..S@..S@.
  40005c:	c9 53 40 00 c9 53 40 00 00 00 00 00 8d 4b 40 00     .S@..S@......K@.
  40006c:	a5 4b 40 00 bd 4b 40 00 c9 53 40 00 c9 53 40 00     .K@..K@..S@..S@.
  40007c:	c9 53 40 00 d5 4b 40 00 ed 4b 40 00 c9 53 40 00     .S@..K@..K@..S@.
  40008c:	c9 53 40 00 c9 53 40 00 c9 53 40 00 c9 53 40 00     .S@..S@..S@..S@.
  40009c:	7d 2b 40 00 c9 53 40 00 c9 53 40 00 c9 53 40 00     }+@..S@..S@..S@.
  4000ac:	c9 53 40 00 c9 53 40 00 49 4a 40 00 c9 53 40 00     .S@..S@.IJ@..S@.
  4000bc:	c9 53 40 00 c9 53 40 00 c9 53 40 00 c9 53 40 00     .S@..S@..S@..S@.
  4000cc:	c9 53 40 00 00 00 00 00 c9 53 40 00 00 00 00 00     .S@......S@.....
  4000dc:	c9 53 40 00 61 4a 40 00 c9 53 40 00 c9 53 40 00     .S@.aJ@..S@..S@.
  4000ec:	c9 53 40 00 c9 53 40 00 c9 53 40 00 c9 53 40 00     .S@..S@..S@..S@.
  4000fc:	c9 53 40 00 c9 53 40 00 c9 53 40 00 c9 53 40 00     .S@..S@..S@..S@.
  40010c:	c9 53 40 00 c9 53 40 00 00 00 00 00 00 00 00 00     .S@..S@.........
  40011c:	00 00 00 00 c9 53 40 00 c9 53 40 00 c9 53 40 00     .....S@..S@..S@.
  40012c:	c9 53 40 00 c9 53 40 00 00 00 00 00 c9 53 40 00     .S@..S@......S@.
  40013c:	c9 53 40 00                                         .S@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009e8 	.word	0x204009e8
  40015c:	00000000 	.word	0x00000000
  400160:	00409208 	.word	0x00409208

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00409208 	.word	0x00409208
  4001a0:	204009ec 	.word	0x204009ec
  4001a4:	00409208 	.word	0x00409208
  4001a8:	00000000 	.word	0x00000000

004001ac <dacc_reset>:
 * \brief Reset DACC.
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2201      	movs	r2, #1
  4001b8:	601a      	str	r2, [r3, #0]
}
  4001ba:	bf00      	nop
  4001bc:	370c      	adds	r7, #12
  4001be:	46bd      	mov	sp, r7
  4001c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001c4:	4770      	bx	lr

004001c6 <dacc_get_interrupt_status>:
 * \param p_dacc Pointer to a DACC instance. 
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
  4001c6:	b480      	push	{r7}
  4001c8:	b083      	sub	sp, #12
  4001ca:	af00      	add	r7, sp, #0
  4001cc:	6078      	str	r0, [r7, #4]
	return p_dacc->DACC_ISR;
  4001ce:	687b      	ldr	r3, [r7, #4]
  4001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4001d2:	4618      	mov	r0, r3
  4001d4:	370c      	adds	r7, #12
  4001d6:	46bd      	mov	sp, r7
  4001d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001dc:	4770      	bx	lr

004001de <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value. 
 * \param channel The channel to convert the data ul_data
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data, uint32_t channel)
{
  4001de:	b480      	push	{r7}
  4001e0:	b085      	sub	sp, #20
  4001e2:	af00      	add	r7, sp, #0
  4001e4:	60f8      	str	r0, [r7, #12]
  4001e6:	60b9      	str	r1, [r7, #8]
  4001e8:	607a      	str	r2, [r7, #4]
	p_dacc->DACC_CDR[channel] = ul_data;
  4001ea:	68fa      	ldr	r2, [r7, #12]
  4001ec:	687b      	ldr	r3, [r7, #4]
  4001ee:	3306      	adds	r3, #6
  4001f0:	009b      	lsls	r3, r3, #2
  4001f2:	4413      	add	r3, r2
  4001f4:	68ba      	ldr	r2, [r7, #8]
  4001f6:	605a      	str	r2, [r3, #4]
}
  4001f8:	bf00      	nop
  4001fa:	3714      	adds	r7, #20
  4001fc:	46bd      	mov	sp, r7
  4001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400202:	4770      	bx	lr

00400204 <dacc_enable_channel>:
 * \param ul_channel The output channel to enable.
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
  400204:	b480      	push	{r7}
  400206:	b083      	sub	sp, #12
  400208:	af00      	add	r7, sp, #0
  40020a:	6078      	str	r0, [r7, #4]
  40020c:	6039      	str	r1, [r7, #0]
	if (ul_channel > MAX_CH_NB)
  40020e:	683b      	ldr	r3, [r7, #0]
  400210:	2b01      	cmp	r3, #1
  400212:	d901      	bls.n	400218 <dacc_enable_channel+0x14>
		return DACC_RC_INVALID_PARAM;
  400214:	2301      	movs	r3, #1
  400216:	e005      	b.n	400224 <dacc_enable_channel+0x20>

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400218:	2201      	movs	r2, #1
  40021a:	683b      	ldr	r3, [r7, #0]
  40021c:	409a      	lsls	r2, r3
  40021e:	687b      	ldr	r3, [r7, #4]
  400220:	611a      	str	r2, [r3, #16]
	return DACC_RC_OK;
  400222:	2300      	movs	r3, #0
}
  400224:	4618      	mov	r0, r3
  400226:	370c      	adds	r7, #12
  400228:	46bd      	mov	sp, r7
  40022a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40022e:	4770      	bx	lr

00400230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  400230:	b480      	push	{r7}
  400232:	b083      	sub	sp, #12
  400234:	af00      	add	r7, sp, #0
  400236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  400238:	687b      	ldr	r3, [r7, #4]
  40023a:	f103 0208 	add.w	r2, r3, #8
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400242:	687b      	ldr	r3, [r7, #4]
  400244:	f04f 32ff 	mov.w	r2, #4294967295
  400248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  40024a:	687b      	ldr	r3, [r7, #4]
  40024c:	f103 0208 	add.w	r2, r3, #8
  400250:	687b      	ldr	r3, [r7, #4]
  400252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  400254:	687b      	ldr	r3, [r7, #4]
  400256:	f103 0208 	add.w	r2, r3, #8
  40025a:	687b      	ldr	r3, [r7, #4]
  40025c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  40025e:	687b      	ldr	r3, [r7, #4]
  400260:	2200      	movs	r2, #0
  400262:	601a      	str	r2, [r3, #0]
}
  400264:	bf00      	nop
  400266:	370c      	adds	r7, #12
  400268:	46bd      	mov	sp, r7
  40026a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40026e:	4770      	bx	lr

00400270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  400270:	b480      	push	{r7}
  400272:	b083      	sub	sp, #12
  400274:	af00      	add	r7, sp, #0
  400276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400278:	687b      	ldr	r3, [r7, #4]
  40027a:	2200      	movs	r2, #0
  40027c:	611a      	str	r2, [r3, #16]
}
  40027e:	bf00      	nop
  400280:	370c      	adds	r7, #12
  400282:	46bd      	mov	sp, r7
  400284:	f85d 7b04 	ldr.w	r7, [sp], #4
  400288:	4770      	bx	lr

0040028a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  40028a:	b480      	push	{r7}
  40028c:	b085      	sub	sp, #20
  40028e:	af00      	add	r7, sp, #0
  400290:	6078      	str	r0, [r7, #4]
  400292:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  400294:	687b      	ldr	r3, [r7, #4]
  400296:	685b      	ldr	r3, [r3, #4]
  400298:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  40029a:	68fb      	ldr	r3, [r7, #12]
  40029c:	685a      	ldr	r2, [r3, #4]
  40029e:	683b      	ldr	r3, [r7, #0]
  4002a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  4002a2:	687b      	ldr	r3, [r7, #4]
  4002a4:	685a      	ldr	r2, [r3, #4]
  4002a6:	683b      	ldr	r3, [r7, #0]
  4002a8:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4002aa:	68fb      	ldr	r3, [r7, #12]
  4002ac:	685b      	ldr	r3, [r3, #4]
  4002ae:	683a      	ldr	r2, [r7, #0]
  4002b0:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  4002b2:	68fb      	ldr	r3, [r7, #12]
  4002b4:	683a      	ldr	r2, [r7, #0]
  4002b6:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  4002b8:	687b      	ldr	r3, [r7, #4]
  4002ba:	683a      	ldr	r2, [r7, #0]
  4002bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4002be:	683b      	ldr	r3, [r7, #0]
  4002c0:	687a      	ldr	r2, [r7, #4]
  4002c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4002c4:	687b      	ldr	r3, [r7, #4]
  4002c6:	681b      	ldr	r3, [r3, #0]
  4002c8:	1c5a      	adds	r2, r3, #1
  4002ca:	687b      	ldr	r3, [r7, #4]
  4002cc:	601a      	str	r2, [r3, #0]
}
  4002ce:	bf00      	nop
  4002d0:	3714      	adds	r7, #20
  4002d2:	46bd      	mov	sp, r7
  4002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d8:	4770      	bx	lr

004002da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  4002da:	b480      	push	{r7}
  4002dc:	b085      	sub	sp, #20
  4002de:	af00      	add	r7, sp, #0
  4002e0:	6078      	str	r0, [r7, #4]
  4002e2:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  4002e4:	683b      	ldr	r3, [r7, #0]
  4002e6:	681b      	ldr	r3, [r3, #0]
  4002e8:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4002ea:	68bb      	ldr	r3, [r7, #8]
  4002ec:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002f0:	d103      	bne.n	4002fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  4002f2:	687b      	ldr	r3, [r7, #4]
  4002f4:	691b      	ldr	r3, [r3, #16]
  4002f6:	60fb      	str	r3, [r7, #12]
  4002f8:	e00c      	b.n	400314 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  4002fa:	687b      	ldr	r3, [r7, #4]
  4002fc:	3308      	adds	r3, #8
  4002fe:	60fb      	str	r3, [r7, #12]
  400300:	e002      	b.n	400308 <vListInsert+0x2e>
  400302:	68fb      	ldr	r3, [r7, #12]
  400304:	685b      	ldr	r3, [r3, #4]
  400306:	60fb      	str	r3, [r7, #12]
  400308:	68fb      	ldr	r3, [r7, #12]
  40030a:	685b      	ldr	r3, [r3, #4]
  40030c:	681a      	ldr	r2, [r3, #0]
  40030e:	68bb      	ldr	r3, [r7, #8]
  400310:	429a      	cmp	r2, r3
  400312:	d9f6      	bls.n	400302 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	685a      	ldr	r2, [r3, #4]
  400318:	683b      	ldr	r3, [r7, #0]
  40031a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  40031c:	683b      	ldr	r3, [r7, #0]
  40031e:	685b      	ldr	r3, [r3, #4]
  400320:	683a      	ldr	r2, [r7, #0]
  400322:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400324:	683b      	ldr	r3, [r7, #0]
  400326:	68fa      	ldr	r2, [r7, #12]
  400328:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  40032a:	68fb      	ldr	r3, [r7, #12]
  40032c:	683a      	ldr	r2, [r7, #0]
  40032e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400330:	683b      	ldr	r3, [r7, #0]
  400332:	687a      	ldr	r2, [r7, #4]
  400334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  400336:	687b      	ldr	r3, [r7, #4]
  400338:	681b      	ldr	r3, [r3, #0]
  40033a:	1c5a      	adds	r2, r3, #1
  40033c:	687b      	ldr	r3, [r7, #4]
  40033e:	601a      	str	r2, [r3, #0]
}
  400340:	bf00      	nop
  400342:	3714      	adds	r7, #20
  400344:	46bd      	mov	sp, r7
  400346:	f85d 7b04 	ldr.w	r7, [sp], #4
  40034a:	4770      	bx	lr

0040034c <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  40034c:	b480      	push	{r7}
  40034e:	b085      	sub	sp, #20
  400350:	af00      	add	r7, sp, #0
  400352:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	685b      	ldr	r3, [r3, #4]
  400358:	687a      	ldr	r2, [r7, #4]
  40035a:	6892      	ldr	r2, [r2, #8]
  40035c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40035e:	687b      	ldr	r3, [r7, #4]
  400360:	689b      	ldr	r3, [r3, #8]
  400362:	687a      	ldr	r2, [r7, #4]
  400364:	6852      	ldr	r2, [r2, #4]
  400366:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  400368:	687b      	ldr	r3, [r7, #4]
  40036a:	691b      	ldr	r3, [r3, #16]
  40036c:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40036e:	68fb      	ldr	r3, [r7, #12]
  400370:	685a      	ldr	r2, [r3, #4]
  400372:	687b      	ldr	r3, [r7, #4]
  400374:	429a      	cmp	r2, r3
  400376:	d103      	bne.n	400380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400378:	687b      	ldr	r3, [r7, #4]
  40037a:	689a      	ldr	r2, [r3, #8]
  40037c:	68fb      	ldr	r3, [r7, #12]
  40037e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  400380:	687b      	ldr	r3, [r7, #4]
  400382:	2200      	movs	r2, #0
  400384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  400386:	68fb      	ldr	r3, [r7, #12]
  400388:	681b      	ldr	r3, [r3, #0]
  40038a:	1e5a      	subs	r2, r3, #1
  40038c:	68fb      	ldr	r3, [r7, #12]
  40038e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400390:	68fb      	ldr	r3, [r7, #12]
  400392:	681b      	ldr	r3, [r3, #0]
}
  400394:	4618      	mov	r0, r3
  400396:	3714      	adds	r7, #20
  400398:	46bd      	mov	sp, r7
  40039a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40039e:	4770      	bx	lr

004003a0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4003a0:	b480      	push	{r7}
  4003a2:	b083      	sub	sp, #12
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4003a8:	687b      	ldr	r3, [r7, #4]
  4003aa:	2b07      	cmp	r3, #7
  4003ac:	d825      	bhi.n	4003fa <osc_get_rate+0x5a>
  4003ae:	a201      	add	r2, pc, #4	; (adr r2, 4003b4 <osc_get_rate+0x14>)
  4003b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4003b4:	004003d5 	.word	0x004003d5
  4003b8:	004003db 	.word	0x004003db
  4003bc:	004003e1 	.word	0x004003e1
  4003c0:	004003e7 	.word	0x004003e7
  4003c4:	004003eb 	.word	0x004003eb
  4003c8:	004003ef 	.word	0x004003ef
  4003cc:	004003f3 	.word	0x004003f3
  4003d0:	004003f7 	.word	0x004003f7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4003d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4003d8:	e010      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4003da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003de:	e00d      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4003e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003e4:	e00a      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4003e6:	4b08      	ldr	r3, [pc, #32]	; (400408 <osc_get_rate+0x68>)
  4003e8:	e008      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4003ea:	4b08      	ldr	r3, [pc, #32]	; (40040c <osc_get_rate+0x6c>)
  4003ec:	e006      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4003ee:	4b08      	ldr	r3, [pc, #32]	; (400410 <osc_get_rate+0x70>)
  4003f0:	e004      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4003f2:	4b07      	ldr	r3, [pc, #28]	; (400410 <osc_get_rate+0x70>)
  4003f4:	e002      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4003f6:	4b06      	ldr	r3, [pc, #24]	; (400410 <osc_get_rate+0x70>)
  4003f8:	e000      	b.n	4003fc <osc_get_rate+0x5c>
	}

	return 0;
  4003fa:	2300      	movs	r3, #0
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	370c      	adds	r7, #12
  400400:	46bd      	mov	sp, r7
  400402:	f85d 7b04 	ldr.w	r7, [sp], #4
  400406:	4770      	bx	lr
  400408:	003d0900 	.word	0x003d0900
  40040c:	007a1200 	.word	0x007a1200
  400410:	00b71b00 	.word	0x00b71b00

00400414 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400414:	b580      	push	{r7, lr}
  400416:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400418:	2006      	movs	r0, #6
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <sysclk_get_main_hz+0x1c>)
  40041c:	4798      	blx	r3
  40041e:	4602      	mov	r2, r0
  400420:	4613      	mov	r3, r2
  400422:	009b      	lsls	r3, r3, #2
  400424:	4413      	add	r3, r2
  400426:	009a      	lsls	r2, r3, #2
  400428:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40042a:	4618      	mov	r0, r3
  40042c:	bd80      	pop	{r7, pc}
  40042e:	bf00      	nop
  400430:	004003a1 	.word	0x004003a1

00400434 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400434:	b580      	push	{r7, lr}
  400436:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <sysclk_get_cpu_hz+0x10>)
  40043a:	4798      	blx	r3
  40043c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40043e:	4618      	mov	r0, r3
  400440:	bd80      	pop	{r7, pc}
  400442:	bf00      	nop
  400444:	00400415 	.word	0x00400415

00400448 <pxPortInitialiseStack>:
/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters )
{
  400448:	b480      	push	{r7}
  40044a:	b085      	sub	sp, #20
  40044c:	af00      	add	r7, sp, #0
  40044e:	60f8      	str	r0, [r7, #12]
  400450:	60b9      	str	r1, [r7, #8]
  400452:	607a      	str	r2, [r7, #4]
	* interrupt. */

	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;
  400454:	68fb      	ldr	r3, [r7, #12]
  400456:	3b04      	subs	r3, #4
  400458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  40045a:	68fb      	ldr	r3, [r7, #12]
  40045c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  400462:	68fb      	ldr	r3, [r7, #12]
  400464:	3b04      	subs	r3, #4
  400466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  400468:	68ba      	ldr	r2, [r7, #8]
  40046a:	68fb      	ldr	r3, [r7, #12]
  40046c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40046e:	68fb      	ldr	r3, [r7, #12]
  400470:	3b04      	subs	r3, #4
  400472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;    /* LR */
  400474:	68fb      	ldr	r3, [r7, #12]
  400476:	2200      	movs	r2, #0
  400478:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
  40047a:	68fb      	ldr	r3, [r7, #12]
  40047c:	3b14      	subs	r3, #20
  40047e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  400480:	687a      	ldr	r2, [r7, #4]
  400482:	68fb      	ldr	r3, [r7, #12]
  400484:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
  400486:	68fb      	ldr	r3, [r7, #12]
  400488:	3b04      	subs	r3, #4
  40048a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40048c:	68fb      	ldr	r3, [r7, #12]
  40048e:	f06f 0202 	mvn.w	r2, #2
  400492:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  400494:	68fb      	ldr	r3, [r7, #12]
  400496:	3b20      	subs	r3, #32
  400498:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  40049a:	68fb      	ldr	r3, [r7, #12]
}
  40049c:	4618      	mov	r0, r3
  40049e:	3714      	adds	r7, #20
  4004a0:	46bd      	mov	sp, r7
  4004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004a6:	4770      	bx	lr

004004a8 <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  4004a8:	4b05      	ldr	r3, [pc, #20]	; (4004c0 <pxCurrentTCBConst2>)
  4004aa:	6819      	ldr	r1, [r3, #0]
  4004ac:	6808      	ldr	r0, [r1, #0]
  4004ae:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004b2:	f380 8809 	msr	PSP, r0
  4004b6:	f04f 0000 	mov.w	r0, #0
  4004ba:	f380 8811 	msr	BASEPRI, r0
  4004be:	4770      	bx	lr

004004c0 <pxCurrentTCBConst2>:
  4004c0:	2040aa14 	.word	0x2040aa14
		" bx r14                          \n"
		"                                   \n"
		" .align 2                        \n"
		"pxCurrentTCBConst2: .word pxCurrentTCB \n"
		);
}
  4004c4:	bf00      	nop
  4004c6:	bf00      	nop

004004c8 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  4004c8:	4804      	ldr	r0, [pc, #16]	; (4004dc <prvPortStartFirstTask+0x14>)
  4004ca:	6800      	ldr	r0, [r0, #0]
  4004cc:	6800      	ldr	r0, [r0, #0]
  4004ce:	f380 8808 	msr	MSP, r0
  4004d2:	b662      	cpsie	i
  4004d4:	df00      	svc	0
  4004d6:	bf00      	nop
		" msr msp, r0             \n"                         /* Set the msp back to the start of the stack. */
		" cpsie i                 \n"                         /* Globally enable interrupts. */
		" svc 0                   \n"                         /* System call to start first task. */
		" nop                     \n"
		);
}
  4004d8:	bf00      	nop
  4004da:	0000      	.short	0x0000
  4004dc:	e000ed08 	.word	0xe000ed08

004004e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  4004e0:	b580      	push	{r7, lr}
  4004e2:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4004e4:	4a0e      	ldr	r2, [pc, #56]	; (400520 <xPortStartScheduler+0x40>)
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <xPortStartScheduler+0x40>)
  4004e8:	681b      	ldr	r3, [r3, #0]
  4004ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4004ee:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4004f0:	4a0b      	ldr	r2, [pc, #44]	; (400520 <xPortStartScheduler+0x40>)
  4004f2:	4b0b      	ldr	r3, [pc, #44]	; (400520 <xPortStartScheduler+0x40>)
  4004f4:	681b      	ldr	r3, [r3, #0]
  4004f6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  4004fa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  4004fc:	4b09      	ldr	r3, [pc, #36]	; (400524 <xPortStartScheduler+0x44>)
  4004fe:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400500:	4b09      	ldr	r3, [pc, #36]	; (400528 <xPortStartScheduler+0x48>)
  400502:	2200      	movs	r2, #0
  400504:	601a      	str	r2, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400506:	4b09      	ldr	r3, [pc, #36]	; (40052c <xPortStartScheduler+0x4c>)
  400508:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  40050a:	4a09      	ldr	r2, [pc, #36]	; (400530 <xPortStartScheduler+0x50>)
  40050c:	4b08      	ldr	r3, [pc, #32]	; (400530 <xPortStartScheduler+0x50>)
  40050e:	681b      	ldr	r3, [r3, #0]
  400510:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400514:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400516:	4b07      	ldr	r3, [pc, #28]	; (400534 <xPortStartScheduler+0x54>)
  400518:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  40051a:	2300      	movs	r3, #0
}
  40051c:	4618      	mov	r0, r3
  40051e:	bd80      	pop	{r7, pc}
  400520:	e000ed20 	.word	0xe000ed20
  400524:	0040063d 	.word	0x0040063d
  400528:	20400000 	.word	0x20400000
  40052c:	00400671 	.word	0x00400671
  400530:	e000ef34 	.word	0xe000ef34
  400534:	004004c9 	.word	0x004004c9

00400538 <vPortYieldFromISR>:
}

/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  400538:	b480      	push	{r7}
  40053a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40053c:	4b04      	ldr	r3, [pc, #16]	; (400550 <vPortYieldFromISR+0x18>)
  40053e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400542:	601a      	str	r2, [r3, #0]
}
  400544:	bf00      	nop
  400546:	46bd      	mov	sp, r7
  400548:	f85d 7b04 	ldr.w	r7, [sp], #4
  40054c:	4770      	bx	lr
  40054e:	bf00      	nop
  400550:	e000ed04 	.word	0xe000ed04

00400554 <vPortEnterCritical>:

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400554:	b580      	push	{r7, lr}
  400556:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  400558:	4b04      	ldr	r3, [pc, #16]	; (40056c <vPortEnterCritical+0x18>)
  40055a:	4798      	blx	r3
	uxCriticalNesting++;
  40055c:	4b04      	ldr	r3, [pc, #16]	; (400570 <vPortEnterCritical+0x1c>)
  40055e:	681b      	ldr	r3, [r3, #0]
  400560:	3301      	adds	r3, #1
  400562:	4a03      	ldr	r2, [pc, #12]	; (400570 <vPortEnterCritical+0x1c>)
  400564:	6013      	str	r3, [r2, #0]
}
  400566:	bf00      	nop
  400568:	bd80      	pop	{r7, pc}
  40056a:	bf00      	nop
  40056c:	0040059d 	.word	0x0040059d
  400570:	20400000 	.word	0x20400000

00400574 <vPortExitCritical>:

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  400574:	b580      	push	{r7, lr}
  400576:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  400578:	4b06      	ldr	r3, [pc, #24]	; (400594 <vPortExitCritical+0x20>)
  40057a:	681b      	ldr	r3, [r3, #0]
  40057c:	3b01      	subs	r3, #1
  40057e:	4a05      	ldr	r2, [pc, #20]	; (400594 <vPortExitCritical+0x20>)
  400580:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  400582:	4b04      	ldr	r3, [pc, #16]	; (400594 <vPortExitCritical+0x20>)
  400584:	681b      	ldr	r3, [r3, #0]
  400586:	2b00      	cmp	r3, #0
  400588:	d102      	bne.n	400590 <vPortExitCritical+0x1c>
		portENABLE_INTERRUPTS();
  40058a:	2000      	movs	r0, #0
  40058c:	4b02      	ldr	r3, [pc, #8]	; (400598 <vPortExitCritical+0x24>)
  40058e:	4798      	blx	r3
	}
}
  400590:	bf00      	nop
  400592:	bd80      	pop	{r7, pc}
  400594:	20400000 	.word	0x20400000
  400598:	004005af 	.word	0x004005af

0040059c <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  40059c:	f3ef 8011 	mrs	r0, BASEPRI
  4005a0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  4005a4:	f381 8811 	msr	BASEPRI, r1
  4005a8:	4770      	bx	lr
		:: "i" (configMAX_SYSCALL_INTERRUPT_PRIORITY) : "r0", "r1" \
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
  4005aa:	2300      	movs	r3, #0
}
  4005ac:	4618      	mov	r0, r3

004005ae <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  4005ae:	f380 8811 	msr	BASEPRI, r0
  4005b2:	4770      	bx	lr
	( \
		" msr basepri, r0                            \n" \
		" bx lr                                      \n" \
		::: "r0" \
	);
}
  4005b4:	bf00      	nop
	...

004005b8 <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  4005b8:	f3ef 8009 	mrs	r0, PSP
  4005bc:	4b11      	ldr	r3, [pc, #68]	; (400604 <pxCurrentTCBConst>)
  4005be:	681a      	ldr	r2, [r3, #0]
  4005c0:	f01e 0f10 	tst.w	lr, #16
  4005c4:	bf08      	it	eq
  4005c6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4005ca:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005ce:	6010      	str	r0, [r2, #0]
  4005d0:	e92d 4008 	stmdb	sp!, {r3, lr}
  4005d4:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  4005d8:	f380 8811 	msr	BASEPRI, r0
  4005dc:	f001 f836 	bl	40164c <vTaskSwitchContext>
  4005e0:	f04f 0000 	mov.w	r0, #0
  4005e4:	f380 8811 	msr	BASEPRI, r0
  4005e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4005ec:	6819      	ldr	r1, [r3, #0]
  4005ee:	6808      	ldr	r0, [r1, #0]
  4005f0:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005f4:	f01e 0f10 	tst.w	lr, #16
  4005f8:	bf08      	it	eq
  4005fa:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4005fe:	f380 8809 	msr	PSP, r0
  400602:	4770      	bx	lr

00400604 <pxCurrentTCBConst>:
  400604:	2040aa14 	.word	0x2040aa14
		"                                       \n"
		"   .align 2                            \n"
		"pxCurrentTCBConst: .word pxCurrentTCB    \n"
		::"i" (configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  400608:	bf00      	nop
  40060a:	bf00      	nop

0040060c <SysTick_Handler>:

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  40060c:	b580      	push	{r7, lr}
  40060e:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400610:	4b06      	ldr	r3, [pc, #24]	; (40062c <SysTick_Handler+0x20>)
  400612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400616:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  400618:	4b05      	ldr	r3, [pc, #20]	; (400630 <SysTick_Handler+0x24>)
  40061a:	4798      	blx	r3
	{
		vTaskIncrementTick();
  40061c:	4b05      	ldr	r3, [pc, #20]	; (400634 <SysTick_Handler+0x28>)
  40061e:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  400620:	2000      	movs	r0, #0
  400622:	4b05      	ldr	r3, [pc, #20]	; (400638 <SysTick_Handler+0x2c>)
  400624:	4798      	blx	r3
}
  400626:	bf00      	nop
  400628:	bd80      	pop	{r7, pc}
  40062a:	bf00      	nop
  40062c:	e000ed04 	.word	0xe000ed04
  400630:	0040059d 	.word	0x0040059d
  400634:	00401501 	.word	0x00401501
  400638:	004005af 	.word	0x004005af

0040063c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
  40063c:	b598      	push	{r3, r4, r7, lr}
  40063e:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
  400640:	4c07      	ldr	r4, [pc, #28]	; (400660 <vPortSetupTimerInterrupt+0x24>)
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  400642:	4b08      	ldr	r3, [pc, #32]	; (400664 <vPortSetupTimerInterrupt+0x28>)
  400644:	4798      	blx	r3
  400646:	4602      	mov	r2, r0
  400648:	4b07      	ldr	r3, [pc, #28]	; (400668 <vPortSetupTimerInterrupt+0x2c>)
  40064a:	fba3 2302 	umull	r2, r3, r3, r2
  40064e:	099b      	lsrs	r3, r3, #6
  400650:	3b01      	subs	r3, #1
  400652:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400654:	4b05      	ldr	r3, [pc, #20]	; (40066c <vPortSetupTimerInterrupt+0x30>)
  400656:	2207      	movs	r2, #7
  400658:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
}
  40065a:	bf00      	nop
  40065c:	bd98      	pop	{r3, r4, r7, pc}
  40065e:	bf00      	nop
  400660:	e000e014 	.word	0xe000e014
  400664:	00400435 	.word	0x00400435
  400668:	10624dd3 	.word	0x10624dd3
  40066c:	e000e010 	.word	0xe000e010

00400670 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400670:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400680 <vPortEnableVFP+0x10>
  400674:	6801      	ldr	r1, [r0, #0]
  400676:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40067a:	6001      	str	r1, [r0, #0]
  40067c:	4770      	bx	lr
		"                            \n"
		" orr r1, r1, #( 0xf << 20 ) \n" /* Enable CP10 and CP11 coprocessors, then save back. */
		" str r1, [r0]               \n"
		" bx r14                     "
	);
}
  40067e:	bf00      	nop
  400680:	e000ed88 	.word	0xe000ed88

00400684 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  400684:	b580      	push	{r7, lr}
  400686:	b086      	sub	sp, #24
  400688:	af00      	add	r7, sp, #0
  40068a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  40068c:	2300      	movs	r3, #0
  40068e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  400690:	4b37      	ldr	r3, [pc, #220]	; (400770 <pvPortMalloc+0xec>)
  400692:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  400694:	4b37      	ldr	r3, [pc, #220]	; (400774 <pvPortMalloc+0xf0>)
  400696:	681b      	ldr	r3, [r3, #0]
  400698:	2b00      	cmp	r3, #0
  40069a:	d101      	bne.n	4006a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  40069c:	4b36      	ldr	r3, [pc, #216]	; (400778 <pvPortMalloc+0xf4>)
  40069e:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  4006a0:	687b      	ldr	r3, [r7, #4]
  4006a2:	2b00      	cmp	r3, #0
  4006a4:	d00e      	beq.n	4006c4 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  4006a6:	2310      	movs	r3, #16
  4006a8:	461a      	mov	r2, r3
  4006aa:	687b      	ldr	r3, [r7, #4]
  4006ac:	4413      	add	r3, r2
  4006ae:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4006b0:	687b      	ldr	r3, [r7, #4]
  4006b2:	f003 0307 	and.w	r3, r3, #7
  4006b6:	2b00      	cmp	r3, #0
  4006b8:	d004      	beq.n	4006c4 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4006ba:	687b      	ldr	r3, [r7, #4]
  4006bc:	f023 0307 	bic.w	r3, r3, #7
  4006c0:	3308      	adds	r3, #8
  4006c2:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4006c4:	687b      	ldr	r3, [r7, #4]
  4006c6:	2b00      	cmp	r3, #0
  4006c8:	d045      	beq.n	400756 <pvPortMalloc+0xd2>
  4006ca:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  4006ce:	687b      	ldr	r3, [r7, #4]
  4006d0:	4293      	cmp	r3, r2
  4006d2:	d240      	bcs.n	400756 <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  4006d4:	4b29      	ldr	r3, [pc, #164]	; (40077c <pvPortMalloc+0xf8>)
  4006d6:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  4006d8:	4b28      	ldr	r3, [pc, #160]	; (40077c <pvPortMalloc+0xf8>)
  4006da:	681b      	ldr	r3, [r3, #0]
  4006dc:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4006de:	e004      	b.n	4006ea <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  4006e0:	697b      	ldr	r3, [r7, #20]
  4006e2:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  4006e4:	697b      	ldr	r3, [r7, #20]
  4006e6:	681b      	ldr	r3, [r3, #0]
  4006e8:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4006ea:	697b      	ldr	r3, [r7, #20]
  4006ec:	685a      	ldr	r2, [r3, #4]
  4006ee:	687b      	ldr	r3, [r7, #4]
  4006f0:	429a      	cmp	r2, r3
  4006f2:	d203      	bcs.n	4006fc <pvPortMalloc+0x78>
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	2b00      	cmp	r3, #0
  4006fa:	d1f1      	bne.n	4006e0 <pvPortMalloc+0x5c>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  4006fc:	4b1d      	ldr	r3, [pc, #116]	; (400774 <pvPortMalloc+0xf0>)
  4006fe:	681b      	ldr	r3, [r3, #0]
  400700:	697a      	ldr	r2, [r7, #20]
  400702:	429a      	cmp	r2, r3
  400704:	d027      	beq.n	400756 <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  400706:	693b      	ldr	r3, [r7, #16]
  400708:	681b      	ldr	r3, [r3, #0]
  40070a:	2210      	movs	r2, #16
  40070c:	4413      	add	r3, r2
  40070e:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400710:	697b      	ldr	r3, [r7, #20]
  400712:	681a      	ldr	r2, [r3, #0]
  400714:	693b      	ldr	r3, [r7, #16]
  400716:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400718:	697b      	ldr	r3, [r7, #20]
  40071a:	685a      	ldr	r2, [r3, #4]
  40071c:	687b      	ldr	r3, [r7, #4]
  40071e:	1ad3      	subs	r3, r2, r3
  400720:	2210      	movs	r2, #16
  400722:	0052      	lsls	r2, r2, #1
  400724:	4293      	cmp	r3, r2
  400726:	d90f      	bls.n	400748 <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  400728:	697a      	ldr	r2, [r7, #20]
  40072a:	687b      	ldr	r3, [r7, #4]
  40072c:	4413      	add	r3, r2
  40072e:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400730:	697b      	ldr	r3, [r7, #20]
  400732:	685a      	ldr	r2, [r3, #4]
  400734:	687b      	ldr	r3, [r7, #4]
  400736:	1ad2      	subs	r2, r2, r3
  400738:	68bb      	ldr	r3, [r7, #8]
  40073a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  40073c:	697b      	ldr	r3, [r7, #20]
  40073e:	687a      	ldr	r2, [r7, #4]
  400740:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400742:	68b8      	ldr	r0, [r7, #8]
  400744:	4b0e      	ldr	r3, [pc, #56]	; (400780 <pvPortMalloc+0xfc>)
  400746:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  400748:	4b0e      	ldr	r3, [pc, #56]	; (400784 <pvPortMalloc+0x100>)
  40074a:	681a      	ldr	r2, [r3, #0]
  40074c:	697b      	ldr	r3, [r7, #20]
  40074e:	685b      	ldr	r3, [r3, #4]
  400750:	1ad3      	subs	r3, r2, r3
  400752:	4a0c      	ldr	r2, [pc, #48]	; (400784 <pvPortMalloc+0x100>)
  400754:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  400756:	4b0c      	ldr	r3, [pc, #48]	; (400788 <pvPortMalloc+0x104>)
  400758:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40075a:	68fb      	ldr	r3, [r7, #12]
  40075c:	2b00      	cmp	r3, #0
  40075e:	d101      	bne.n	400764 <pvPortMalloc+0xe0>
		{
			vApplicationMallocFailedHook();
  400760:	4b0a      	ldr	r3, [pc, #40]	; (40078c <pvPortMalloc+0x108>)
  400762:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  400764:	68fb      	ldr	r3, [r7, #12]
}
  400766:	4618      	mov	r0, r3
  400768:	3718      	adds	r7, #24
  40076a:	46bd      	mov	sp, r7
  40076c:	bd80      	pop	{r7, pc}
  40076e:	bf00      	nop
  400770:	00401399 	.word	0x00401399
  400774:	2040aa10 	.word	0x2040aa10
  400778:	004007e5 	.word	0x004007e5
  40077c:	2040aa08 	.word	0x2040aa08
  400780:	00400875 	.word	0x00400875
  400784:	20400004 	.word	0x20400004
  400788:	004013b5 	.word	0x004013b5
  40078c:	00402b6d 	.word	0x00402b6d

00400790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400790:	b580      	push	{r7, lr}
  400792:	b084      	sub	sp, #16
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  400798:	687b      	ldr	r3, [r7, #4]
  40079a:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  40079c:	687b      	ldr	r3, [r7, #4]
  40079e:	2b00      	cmp	r3, #0
  4007a0:	d014      	beq.n	4007cc <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  4007a2:	2310      	movs	r3, #16
  4007a4:	425b      	negs	r3, r3
  4007a6:	68fa      	ldr	r2, [r7, #12]
  4007a8:	4413      	add	r3, r2
  4007aa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  4007ac:	68fb      	ldr	r3, [r7, #12]
  4007ae:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  4007b0:	4b08      	ldr	r3, [pc, #32]	; (4007d4 <vPortFree+0x44>)
  4007b2:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  4007b4:	68bb      	ldr	r3, [r7, #8]
  4007b6:	685a      	ldr	r2, [r3, #4]
  4007b8:	4b07      	ldr	r3, [pc, #28]	; (4007d8 <vPortFree+0x48>)
  4007ba:	681b      	ldr	r3, [r3, #0]
  4007bc:	4413      	add	r3, r2
  4007be:	4a06      	ldr	r2, [pc, #24]	; (4007d8 <vPortFree+0x48>)
  4007c0:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  4007c2:	68b8      	ldr	r0, [r7, #8]
  4007c4:	4b05      	ldr	r3, [pc, #20]	; (4007dc <vPortFree+0x4c>)
  4007c6:	4798      	blx	r3
		}
		xTaskResumeAll();
  4007c8:	4b05      	ldr	r3, [pc, #20]	; (4007e0 <vPortFree+0x50>)
  4007ca:	4798      	blx	r3
	}
}
  4007cc:	bf00      	nop
  4007ce:	3710      	adds	r7, #16
  4007d0:	46bd      	mov	sp, r7
  4007d2:	bd80      	pop	{r7, pc}
  4007d4:	00401399 	.word	0x00401399
  4007d8:	20400004 	.word	0x20400004
  4007dc:	00400875 	.word	0x00400875
  4007e0:	004013b5 	.word	0x004013b5

004007e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  4007e4:	b580      	push	{r7, lr}
  4007e6:	b082      	sub	sp, #8
  4007e8:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  4007ea:	4b1d      	ldr	r3, [pc, #116]	; (400860 <prvHeapInit+0x7c>)
  4007ec:	4a1d      	ldr	r2, [pc, #116]	; (400864 <prvHeapInit+0x80>)
  4007ee:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  4007f0:	4b1b      	ldr	r3, [pc, #108]	; (400860 <prvHeapInit+0x7c>)
  4007f2:	2200      	movs	r2, #0
  4007f4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  4007f6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  4007fa:	4b1a      	ldr	r3, [pc, #104]	; (400864 <prvHeapInit+0x80>)
  4007fc:	4413      	add	r3, r2
  4007fe:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  400800:	2310      	movs	r3, #16
  400802:	425b      	negs	r3, r3
  400804:	687a      	ldr	r2, [r7, #4]
  400806:	4413      	add	r3, r2
  400808:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  40080a:	4a17      	ldr	r2, [pc, #92]	; (400868 <prvHeapInit+0x84>)
  40080c:	687b      	ldr	r3, [r7, #4]
  40080e:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  400810:	4b15      	ldr	r3, [pc, #84]	; (400868 <prvHeapInit+0x84>)
  400812:	681b      	ldr	r3, [r3, #0]
  400814:	f003 0307 	and.w	r3, r3, #7
  400818:	2b00      	cmp	r3, #0
  40081a:	d003      	beq.n	400824 <prvHeapInit+0x40>
  40081c:	4b13      	ldr	r3, [pc, #76]	; (40086c <prvHeapInit+0x88>)
  40081e:	4798      	blx	r3
  400820:	bf00      	nop
  400822:	e7fd      	b.n	400820 <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  400824:	4b10      	ldr	r3, [pc, #64]	; (400868 <prvHeapInit+0x84>)
  400826:	681b      	ldr	r3, [r3, #0]
  400828:	2200      	movs	r2, #0
  40082a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  40082c:	4b0e      	ldr	r3, [pc, #56]	; (400868 <prvHeapInit+0x84>)
  40082e:	681b      	ldr	r3, [r3, #0]
  400830:	2200      	movs	r2, #0
  400832:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  400834:	4b0b      	ldr	r3, [pc, #44]	; (400864 <prvHeapInit+0x80>)
  400836:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  400838:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  40083c:	2210      	movs	r2, #16
  40083e:	1a9a      	subs	r2, r3, r2
  400840:	683b      	ldr	r3, [r7, #0]
  400842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  400844:	4b08      	ldr	r3, [pc, #32]	; (400868 <prvHeapInit+0x84>)
  400846:	681a      	ldr	r2, [r3, #0]
  400848:	683b      	ldr	r3, [r7, #0]
  40084a:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  40084c:	4b08      	ldr	r3, [pc, #32]	; (400870 <prvHeapInit+0x8c>)
  40084e:	681b      	ldr	r3, [r3, #0]
  400850:	2210      	movs	r2, #16
  400852:	1a9b      	subs	r3, r3, r2
  400854:	4a06      	ldr	r2, [pc, #24]	; (400870 <prvHeapInit+0x8c>)
  400856:	6013      	str	r3, [r2, #0]
}
  400858:	bf00      	nop
  40085a:	3708      	adds	r7, #8
  40085c:	46bd      	mov	sp, r7
  40085e:	bd80      	pop	{r7, pc}
  400860:	2040aa08 	.word	0x2040aa08
  400864:	20400a08 	.word	0x20400a08
  400868:	2040aa10 	.word	0x2040aa10
  40086c:	0040059d 	.word	0x0040059d
  400870:	20400004 	.word	0x20400004

00400874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400874:	b480      	push	{r7}
  400876:	b085      	sub	sp, #20
  400878:	af00      	add	r7, sp, #0
  40087a:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40087c:	4b28      	ldr	r3, [pc, #160]	; (400920 <prvInsertBlockIntoFreeList+0xac>)
  40087e:	60fb      	str	r3, [r7, #12]
  400880:	e002      	b.n	400888 <prvInsertBlockIntoFreeList+0x14>
  400882:	68fb      	ldr	r3, [r7, #12]
  400884:	681b      	ldr	r3, [r3, #0]
  400886:	60fb      	str	r3, [r7, #12]
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	681a      	ldr	r2, [r3, #0]
  40088c:	687b      	ldr	r3, [r7, #4]
  40088e:	429a      	cmp	r2, r3
  400890:	d3f7      	bcc.n	400882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  400892:	68fb      	ldr	r3, [r7, #12]
  400894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  400896:	68fb      	ldr	r3, [r7, #12]
  400898:	685b      	ldr	r3, [r3, #4]
  40089a:	68ba      	ldr	r2, [r7, #8]
  40089c:	441a      	add	r2, r3
  40089e:	687b      	ldr	r3, [r7, #4]
  4008a0:	429a      	cmp	r2, r3
  4008a2:	d108      	bne.n	4008b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4008a4:	68fb      	ldr	r3, [r7, #12]
  4008a6:	685a      	ldr	r2, [r3, #4]
  4008a8:	687b      	ldr	r3, [r7, #4]
  4008aa:	685b      	ldr	r3, [r3, #4]
  4008ac:	441a      	add	r2, r3
  4008ae:	68fb      	ldr	r3, [r7, #12]
  4008b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  4008b2:	68fb      	ldr	r3, [r7, #12]
  4008b4:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  4008b6:	687b      	ldr	r3, [r7, #4]
  4008b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  4008ba:	687b      	ldr	r3, [r7, #4]
  4008bc:	685b      	ldr	r3, [r3, #4]
  4008be:	68ba      	ldr	r2, [r7, #8]
  4008c0:	441a      	add	r2, r3
  4008c2:	68fb      	ldr	r3, [r7, #12]
  4008c4:	681b      	ldr	r3, [r3, #0]
  4008c6:	429a      	cmp	r2, r3
  4008c8:	d118      	bne.n	4008fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4008ca:	68fb      	ldr	r3, [r7, #12]
  4008cc:	681a      	ldr	r2, [r3, #0]
  4008ce:	4b15      	ldr	r3, [pc, #84]	; (400924 <prvInsertBlockIntoFreeList+0xb0>)
  4008d0:	681b      	ldr	r3, [r3, #0]
  4008d2:	429a      	cmp	r2, r3
  4008d4:	d00d      	beq.n	4008f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4008d6:	687b      	ldr	r3, [r7, #4]
  4008d8:	685a      	ldr	r2, [r3, #4]
  4008da:	68fb      	ldr	r3, [r7, #12]
  4008dc:	681b      	ldr	r3, [r3, #0]
  4008de:	685b      	ldr	r3, [r3, #4]
  4008e0:	441a      	add	r2, r3
  4008e2:	687b      	ldr	r3, [r7, #4]
  4008e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4008e6:	68fb      	ldr	r3, [r7, #12]
  4008e8:	681b      	ldr	r3, [r3, #0]
  4008ea:	681a      	ldr	r2, [r3, #0]
  4008ec:	687b      	ldr	r3, [r7, #4]
  4008ee:	601a      	str	r2, [r3, #0]
  4008f0:	e008      	b.n	400904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4008f2:	4b0c      	ldr	r3, [pc, #48]	; (400924 <prvInsertBlockIntoFreeList+0xb0>)
  4008f4:	681a      	ldr	r2, [r3, #0]
  4008f6:	687b      	ldr	r3, [r7, #4]
  4008f8:	601a      	str	r2, [r3, #0]
  4008fa:	e003      	b.n	400904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  4008fc:	68fb      	ldr	r3, [r7, #12]
  4008fe:	681a      	ldr	r2, [r3, #0]
  400900:	687b      	ldr	r3, [r7, #4]
  400902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  400904:	68fa      	ldr	r2, [r7, #12]
  400906:	687b      	ldr	r3, [r7, #4]
  400908:	429a      	cmp	r2, r3
  40090a:	d002      	beq.n	400912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  40090c:	68fb      	ldr	r3, [r7, #12]
  40090e:	687a      	ldr	r2, [r7, #4]
  400910:	601a      	str	r2, [r3, #0]
	}
}
  400912:	bf00      	nop
  400914:	3714      	adds	r7, #20
  400916:	46bd      	mov	sp, r7
  400918:	f85d 7b04 	ldr.w	r7, [sp], #4
  40091c:	4770      	bx	lr
  40091e:	bf00      	nop
  400920:	2040aa08 	.word	0x2040aa08
  400924:	2040aa10 	.word	0x2040aa10

00400928 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  400928:	b580      	push	{r7, lr}
  40092a:	b082      	sub	sp, #8
  40092c:	af00      	add	r7, sp, #0
  40092e:	6078      	str	r0, [r7, #4]
  400930:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  400932:	687b      	ldr	r3, [r7, #4]
  400934:	2b00      	cmp	r3, #0
  400936:	d103      	bne.n	400940 <xQueueGenericReset+0x18>
  400938:	4b27      	ldr	r3, [pc, #156]	; (4009d8 <xQueueGenericReset+0xb0>)
  40093a:	4798      	blx	r3
  40093c:	bf00      	nop
  40093e:	e7fd      	b.n	40093c <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  400940:	4b26      	ldr	r3, [pc, #152]	; (4009dc <xQueueGenericReset+0xb4>)
  400942:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400944:	687b      	ldr	r3, [r7, #4]
  400946:	681a      	ldr	r2, [r3, #0]
  400948:	687b      	ldr	r3, [r7, #4]
  40094a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40094c:	6879      	ldr	r1, [r7, #4]
  40094e:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400950:	fb01 f303 	mul.w	r3, r1, r3
  400954:	441a      	add	r2, r3
  400956:	687b      	ldr	r3, [r7, #4]
  400958:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  40095a:	687b      	ldr	r3, [r7, #4]
  40095c:	2200      	movs	r2, #0
  40095e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400960:	687b      	ldr	r3, [r7, #4]
  400962:	681a      	ldr	r2, [r3, #0]
  400964:	687b      	ldr	r3, [r7, #4]
  400966:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  400968:	687b      	ldr	r3, [r7, #4]
  40096a:	681a      	ldr	r2, [r3, #0]
  40096c:	687b      	ldr	r3, [r7, #4]
  40096e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400970:	3b01      	subs	r3, #1
  400972:	6879      	ldr	r1, [r7, #4]
  400974:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400976:	fb01 f303 	mul.w	r3, r1, r3
  40097a:	441a      	add	r2, r3
  40097c:	687b      	ldr	r3, [r7, #4]
  40097e:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400980:	687b      	ldr	r3, [r7, #4]
  400982:	f04f 32ff 	mov.w	r2, #4294967295
  400986:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400988:	687b      	ldr	r3, [r7, #4]
  40098a:	f04f 32ff 	mov.w	r2, #4294967295
  40098e:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  400990:	683b      	ldr	r3, [r7, #0]
  400992:	2b00      	cmp	r3, #0
  400994:	d10e      	bne.n	4009b4 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400996:	687b      	ldr	r3, [r7, #4]
  400998:	691b      	ldr	r3, [r3, #16]
  40099a:	2b00      	cmp	r3, #0
  40099c:	d014      	beq.n	4009c8 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40099e:	687b      	ldr	r3, [r7, #4]
  4009a0:	3310      	adds	r3, #16
  4009a2:	4618      	mov	r0, r3
  4009a4:	4b0e      	ldr	r3, [pc, #56]	; (4009e0 <xQueueGenericReset+0xb8>)
  4009a6:	4798      	blx	r3
  4009a8:	4603      	mov	r3, r0
  4009aa:	2b01      	cmp	r3, #1
  4009ac:	d10c      	bne.n	4009c8 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  4009ae:	4b0d      	ldr	r3, [pc, #52]	; (4009e4 <xQueueGenericReset+0xbc>)
  4009b0:	4798      	blx	r3
  4009b2:	e009      	b.n	4009c8 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4009b4:	687b      	ldr	r3, [r7, #4]
  4009b6:	3310      	adds	r3, #16
  4009b8:	4618      	mov	r0, r3
  4009ba:	4b0b      	ldr	r3, [pc, #44]	; (4009e8 <xQueueGenericReset+0xc0>)
  4009bc:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4009be:	687b      	ldr	r3, [r7, #4]
  4009c0:	3324      	adds	r3, #36	; 0x24
  4009c2:	4618      	mov	r0, r3
  4009c4:	4b08      	ldr	r3, [pc, #32]	; (4009e8 <xQueueGenericReset+0xc0>)
  4009c6:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  4009c8:	4b08      	ldr	r3, [pc, #32]	; (4009ec <xQueueGenericReset+0xc4>)
  4009ca:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  4009cc:	2301      	movs	r3, #1
}
  4009ce:	4618      	mov	r0, r3
  4009d0:	3708      	adds	r7, #8
  4009d2:	46bd      	mov	sp, r7
  4009d4:	bd80      	pop	{r7, pc}
  4009d6:	bf00      	nop
  4009d8:	0040059d 	.word	0x0040059d
  4009dc:	00400555 	.word	0x00400555
  4009e0:	004017d9 	.word	0x004017d9
  4009e4:	00400539 	.word	0x00400539
  4009e8:	00400231 	.word	0x00400231
  4009ec:	00400575 	.word	0x00400575

004009f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  4009f0:	b580      	push	{r7, lr}
  4009f2:	b088      	sub	sp, #32
  4009f4:	af00      	add	r7, sp, #0
  4009f6:	60f8      	str	r0, [r7, #12]
  4009f8:	60b9      	str	r1, [r7, #8]
  4009fa:	4613      	mov	r3, r2
  4009fc:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  4009fe:	2300      	movs	r3, #0
  400a00:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  400a02:	68fb      	ldr	r3, [r7, #12]
  400a04:	2b00      	cmp	r3, #0
  400a06:	d02a      	beq.n	400a5e <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  400a08:	2050      	movs	r0, #80	; 0x50
  400a0a:	4b1b      	ldr	r3, [pc, #108]	; (400a78 <xQueueGenericCreate+0x88>)
  400a0c:	4798      	blx	r3
  400a0e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  400a10:	69bb      	ldr	r3, [r7, #24]
  400a12:	2b00      	cmp	r3, #0
  400a14:	d023      	beq.n	400a5e <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	68ba      	ldr	r2, [r7, #8]
  400a1a:	fb02 f303 	mul.w	r3, r2, r3
  400a1e:	3301      	adds	r3, #1
  400a20:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  400a22:	6978      	ldr	r0, [r7, #20]
  400a24:	4b14      	ldr	r3, [pc, #80]	; (400a78 <xQueueGenericCreate+0x88>)
  400a26:	4798      	blx	r3
  400a28:	4602      	mov	r2, r0
  400a2a:	69bb      	ldr	r3, [r7, #24]
  400a2c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  400a2e:	69bb      	ldr	r3, [r7, #24]
  400a30:	681b      	ldr	r3, [r3, #0]
  400a32:	2b00      	cmp	r3, #0
  400a34:	d010      	beq.n	400a58 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  400a36:	69bb      	ldr	r3, [r7, #24]
  400a38:	68fa      	ldr	r2, [r7, #12]
  400a3a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  400a3c:	69bb      	ldr	r3, [r7, #24]
  400a3e:	68ba      	ldr	r2, [r7, #8]
  400a40:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  400a42:	2101      	movs	r1, #1
  400a44:	69b8      	ldr	r0, [r7, #24]
  400a46:	4b0d      	ldr	r3, [pc, #52]	; (400a7c <xQueueGenericCreate+0x8c>)
  400a48:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  400a4a:	69bb      	ldr	r3, [r7, #24]
  400a4c:	79fa      	ldrb	r2, [r7, #7]
  400a4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  400a52:	69bb      	ldr	r3, [r7, #24]
  400a54:	61fb      	str	r3, [r7, #28]
  400a56:	e002      	b.n	400a5e <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  400a58:	69b8      	ldr	r0, [r7, #24]
  400a5a:	4b09      	ldr	r3, [pc, #36]	; (400a80 <xQueueGenericCreate+0x90>)
  400a5c:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  400a5e:	69fb      	ldr	r3, [r7, #28]
  400a60:	2b00      	cmp	r3, #0
  400a62:	d103      	bne.n	400a6c <xQueueGenericCreate+0x7c>
  400a64:	4b07      	ldr	r3, [pc, #28]	; (400a84 <xQueueGenericCreate+0x94>)
  400a66:	4798      	blx	r3
  400a68:	bf00      	nop
  400a6a:	e7fd      	b.n	400a68 <xQueueGenericCreate+0x78>

	return xReturn;
  400a6c:	69fb      	ldr	r3, [r7, #28]
}
  400a6e:	4618      	mov	r0, r3
  400a70:	3720      	adds	r7, #32
  400a72:	46bd      	mov	sp, r7
  400a74:	bd80      	pop	{r7, pc}
  400a76:	bf00      	nop
  400a78:	00400685 	.word	0x00400685
  400a7c:	00400929 	.word	0x00400929
  400a80:	00400791 	.word	0x00400791
  400a84:	0040059d 	.word	0x0040059d

00400a88 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  400a88:	b580      	push	{r7, lr}
  400a8a:	b088      	sub	sp, #32
  400a8c:	af00      	add	r7, sp, #0
  400a8e:	60f8      	str	r0, [r7, #12]
  400a90:	60b9      	str	r1, [r7, #8]
  400a92:	607a      	str	r2, [r7, #4]
  400a94:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400a96:	2300      	movs	r3, #0
  400a98:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  400a9a:	68fb      	ldr	r3, [r7, #12]
  400a9c:	2b00      	cmp	r3, #0
  400a9e:	d103      	bne.n	400aa8 <xQueueGenericSend+0x20>
  400aa0:	4b46      	ldr	r3, [pc, #280]	; (400bbc <xQueueGenericSend+0x134>)
  400aa2:	4798      	blx	r3
  400aa4:	bf00      	nop
  400aa6:	e7fd      	b.n	400aa4 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400aa8:	68bb      	ldr	r3, [r7, #8]
  400aaa:	2b00      	cmp	r3, #0
  400aac:	d103      	bne.n	400ab6 <xQueueGenericSend+0x2e>
  400aae:	68fb      	ldr	r3, [r7, #12]
  400ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ab2:	2b00      	cmp	r3, #0
  400ab4:	d101      	bne.n	400aba <xQueueGenericSend+0x32>
  400ab6:	2301      	movs	r3, #1
  400ab8:	e000      	b.n	400abc <xQueueGenericSend+0x34>
  400aba:	2300      	movs	r3, #0
  400abc:	2b00      	cmp	r3, #0
  400abe:	d103      	bne.n	400ac8 <xQueueGenericSend+0x40>
  400ac0:	4b3e      	ldr	r3, [pc, #248]	; (400bbc <xQueueGenericSend+0x134>)
  400ac2:	4798      	blx	r3
  400ac4:	bf00      	nop
  400ac6:	e7fd      	b.n	400ac4 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400ac8:	4b3d      	ldr	r3, [pc, #244]	; (400bc0 <xQueueGenericSend+0x138>)
  400aca:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400acc:	68fb      	ldr	r3, [r7, #12]
  400ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400ad0:	68fb      	ldr	r3, [r7, #12]
  400ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400ad4:	429a      	cmp	r2, r3
  400ad6:	d216      	bcs.n	400b06 <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400ad8:	683a      	ldr	r2, [r7, #0]
  400ada:	68b9      	ldr	r1, [r7, #8]
  400adc:	68f8      	ldr	r0, [r7, #12]
  400ade:	4b39      	ldr	r3, [pc, #228]	; (400bc4 <xQueueGenericSend+0x13c>)
  400ae0:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ae2:	68fb      	ldr	r3, [r7, #12]
  400ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400ae6:	2b00      	cmp	r3, #0
  400ae8:	d009      	beq.n	400afe <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400aea:	68fb      	ldr	r3, [r7, #12]
  400aec:	3324      	adds	r3, #36	; 0x24
  400aee:	4618      	mov	r0, r3
  400af0:	4b35      	ldr	r3, [pc, #212]	; (400bc8 <xQueueGenericSend+0x140>)
  400af2:	4798      	blx	r3
  400af4:	4603      	mov	r3, r0
  400af6:	2b01      	cmp	r3, #1
  400af8:	d101      	bne.n	400afe <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  400afa:	4b34      	ldr	r3, [pc, #208]	; (400bcc <xQueueGenericSend+0x144>)
  400afc:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  400afe:	4b34      	ldr	r3, [pc, #208]	; (400bd0 <xQueueGenericSend+0x148>)
  400b00:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  400b02:	2301      	movs	r3, #1
  400b04:	e056      	b.n	400bb4 <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400b06:	687b      	ldr	r3, [r7, #4]
  400b08:	2b00      	cmp	r3, #0
  400b0a:	d103      	bne.n	400b14 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400b0c:	4b30      	ldr	r3, [pc, #192]	; (400bd0 <xQueueGenericSend+0x148>)
  400b0e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400b10:	2300      	movs	r3, #0
  400b12:	e04f      	b.n	400bb4 <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  400b14:	69fb      	ldr	r3, [r7, #28]
  400b16:	2b00      	cmp	r3, #0
  400b18:	d106      	bne.n	400b28 <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400b1a:	f107 0314 	add.w	r3, r7, #20
  400b1e:	4618      	mov	r0, r3
  400b20:	4b2c      	ldr	r3, [pc, #176]	; (400bd4 <xQueueGenericSend+0x14c>)
  400b22:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400b24:	2301      	movs	r3, #1
  400b26:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400b28:	4b29      	ldr	r3, [pc, #164]	; (400bd0 <xQueueGenericSend+0x148>)
  400b2a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400b2c:	4b2a      	ldr	r3, [pc, #168]	; (400bd8 <xQueueGenericSend+0x150>)
  400b2e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400b30:	4b23      	ldr	r3, [pc, #140]	; (400bc0 <xQueueGenericSend+0x138>)
  400b32:	4798      	blx	r3
  400b34:	68fb      	ldr	r3, [r7, #12]
  400b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400b38:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b3c:	d102      	bne.n	400b44 <xQueueGenericSend+0xbc>
  400b3e:	68fb      	ldr	r3, [r7, #12]
  400b40:	2200      	movs	r2, #0
  400b42:	645a      	str	r2, [r3, #68]	; 0x44
  400b44:	68fb      	ldr	r3, [r7, #12]
  400b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400b48:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b4c:	d102      	bne.n	400b54 <xQueueGenericSend+0xcc>
  400b4e:	68fb      	ldr	r3, [r7, #12]
  400b50:	2200      	movs	r2, #0
  400b52:	649a      	str	r2, [r3, #72]	; 0x48
  400b54:	4b1e      	ldr	r3, [pc, #120]	; (400bd0 <xQueueGenericSend+0x148>)
  400b56:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400b58:	1d3a      	adds	r2, r7, #4
  400b5a:	f107 0314 	add.w	r3, r7, #20
  400b5e:	4611      	mov	r1, r2
  400b60:	4618      	mov	r0, r3
  400b62:	4b1e      	ldr	r3, [pc, #120]	; (400bdc <xQueueGenericSend+0x154>)
  400b64:	4798      	blx	r3
  400b66:	4603      	mov	r3, r0
  400b68:	2b00      	cmp	r3, #0
  400b6a:	d11d      	bne.n	400ba8 <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400b6c:	68f8      	ldr	r0, [r7, #12]
  400b6e:	4b1c      	ldr	r3, [pc, #112]	; (400be0 <xQueueGenericSend+0x158>)
  400b70:	4798      	blx	r3
  400b72:	4603      	mov	r3, r0
  400b74:	2b00      	cmp	r3, #0
  400b76:	d011      	beq.n	400b9c <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400b78:	68fb      	ldr	r3, [r7, #12]
  400b7a:	3310      	adds	r3, #16
  400b7c:	687a      	ldr	r2, [r7, #4]
  400b7e:	4611      	mov	r1, r2
  400b80:	4618      	mov	r0, r3
  400b82:	4b18      	ldr	r3, [pc, #96]	; (400be4 <xQueueGenericSend+0x15c>)
  400b84:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400b86:	68f8      	ldr	r0, [r7, #12]
  400b88:	4b17      	ldr	r3, [pc, #92]	; (400be8 <xQueueGenericSend+0x160>)
  400b8a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400b8c:	4b17      	ldr	r3, [pc, #92]	; (400bec <xQueueGenericSend+0x164>)
  400b8e:	4798      	blx	r3
  400b90:	4603      	mov	r3, r0
  400b92:	2b00      	cmp	r3, #0
  400b94:	d198      	bne.n	400ac8 <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  400b96:	4b0d      	ldr	r3, [pc, #52]	; (400bcc <xQueueGenericSend+0x144>)
  400b98:	4798      	blx	r3
  400b9a:	e795      	b.n	400ac8 <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400b9c:	68f8      	ldr	r0, [r7, #12]
  400b9e:	4b12      	ldr	r3, [pc, #72]	; (400be8 <xQueueGenericSend+0x160>)
  400ba0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400ba2:	4b12      	ldr	r3, [pc, #72]	; (400bec <xQueueGenericSend+0x164>)
  400ba4:	4798      	blx	r3
  400ba6:	e78f      	b.n	400ac8 <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400ba8:	68f8      	ldr	r0, [r7, #12]
  400baa:	4b0f      	ldr	r3, [pc, #60]	; (400be8 <xQueueGenericSend+0x160>)
  400bac:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400bae:	4b0f      	ldr	r3, [pc, #60]	; (400bec <xQueueGenericSend+0x164>)
  400bb0:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400bb2:	2300      	movs	r3, #0
		}
	}
}
  400bb4:	4618      	mov	r0, r3
  400bb6:	3720      	adds	r7, #32
  400bb8:	46bd      	mov	sp, r7
  400bba:	bd80      	pop	{r7, pc}
  400bbc:	0040059d 	.word	0x0040059d
  400bc0:	00400555 	.word	0x00400555
  400bc4:	00400e81 	.word	0x00400e81
  400bc8:	004017d9 	.word	0x004017d9
  400bcc:	00400539 	.word	0x00400539
  400bd0:	00400575 	.word	0x00400575
  400bd4:	00401895 	.word	0x00401895
  400bd8:	00401399 	.word	0x00401399
  400bdc:	004018d1 	.word	0x004018d1
  400be0:	0040106d 	.word	0x0040106d
  400be4:	004016f1 	.word	0x004016f1
  400be8:	00400f91 	.word	0x00400f91
  400bec:	004013b5 	.word	0x004013b5

00400bf0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  400bf0:	b580      	push	{r7, lr}
  400bf2:	b086      	sub	sp, #24
  400bf4:	af00      	add	r7, sp, #0
  400bf6:	60f8      	str	r0, [r7, #12]
  400bf8:	60b9      	str	r1, [r7, #8]
  400bfa:	607a      	str	r2, [r7, #4]
  400bfc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  400bfe:	68fb      	ldr	r3, [r7, #12]
  400c00:	2b00      	cmp	r3, #0
  400c02:	d103      	bne.n	400c0c <xQueueGenericSendFromISR+0x1c>
  400c04:	4b25      	ldr	r3, [pc, #148]	; (400c9c <xQueueGenericSendFromISR+0xac>)
  400c06:	4798      	blx	r3
  400c08:	bf00      	nop
  400c0a:	e7fd      	b.n	400c08 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400c0c:	68bb      	ldr	r3, [r7, #8]
  400c0e:	2b00      	cmp	r3, #0
  400c10:	d103      	bne.n	400c1a <xQueueGenericSendFromISR+0x2a>
  400c12:	68fb      	ldr	r3, [r7, #12]
  400c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400c16:	2b00      	cmp	r3, #0
  400c18:	d101      	bne.n	400c1e <xQueueGenericSendFromISR+0x2e>
  400c1a:	2301      	movs	r3, #1
  400c1c:	e000      	b.n	400c20 <xQueueGenericSendFromISR+0x30>
  400c1e:	2300      	movs	r3, #0
  400c20:	2b00      	cmp	r3, #0
  400c22:	d103      	bne.n	400c2c <xQueueGenericSendFromISR+0x3c>
  400c24:	4b1d      	ldr	r3, [pc, #116]	; (400c9c <xQueueGenericSendFromISR+0xac>)
  400c26:	4798      	blx	r3
  400c28:	bf00      	nop
  400c2a:	e7fd      	b.n	400c28 <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  400c2c:	4b1b      	ldr	r3, [pc, #108]	; (400c9c <xQueueGenericSendFromISR+0xac>)
  400c2e:	4798      	blx	r3
  400c30:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400c32:	68fb      	ldr	r3, [r7, #12]
  400c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400c36:	68fb      	ldr	r3, [r7, #12]
  400c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400c3a:	429a      	cmp	r2, r3
  400c3c:	d224      	bcs.n	400c88 <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400c3e:	683a      	ldr	r2, [r7, #0]
  400c40:	68b9      	ldr	r1, [r7, #8]
  400c42:	68f8      	ldr	r0, [r7, #12]
  400c44:	4b16      	ldr	r3, [pc, #88]	; (400ca0 <xQueueGenericSendFromISR+0xb0>)
  400c46:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400c48:	68fb      	ldr	r3, [r7, #12]
  400c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c50:	d112      	bne.n	400c78 <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c52:	68fb      	ldr	r3, [r7, #12]
  400c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400c56:	2b00      	cmp	r3, #0
  400c58:	d013      	beq.n	400c82 <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c5a:	68fb      	ldr	r3, [r7, #12]
  400c5c:	3324      	adds	r3, #36	; 0x24
  400c5e:	4618      	mov	r0, r3
  400c60:	4b10      	ldr	r3, [pc, #64]	; (400ca4 <xQueueGenericSendFromISR+0xb4>)
  400c62:	4798      	blx	r3
  400c64:	4603      	mov	r3, r0
  400c66:	2b00      	cmp	r3, #0
  400c68:	d00b      	beq.n	400c82 <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  400c6a:	687b      	ldr	r3, [r7, #4]
  400c6c:	2b00      	cmp	r3, #0
  400c6e:	d008      	beq.n	400c82 <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  400c70:	687b      	ldr	r3, [r7, #4]
  400c72:	2201      	movs	r2, #1
  400c74:	601a      	str	r2, [r3, #0]
  400c76:	e004      	b.n	400c82 <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400c78:	68fb      	ldr	r3, [r7, #12]
  400c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400c7c:	1c5a      	adds	r2, r3, #1
  400c7e:	68fb      	ldr	r3, [r7, #12]
  400c80:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  400c82:	2301      	movs	r3, #1
  400c84:	617b      	str	r3, [r7, #20]
  400c86:	e001      	b.n	400c8c <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400c88:	2300      	movs	r3, #0
  400c8a:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  400c8c:	6938      	ldr	r0, [r7, #16]
  400c8e:	4b06      	ldr	r3, [pc, #24]	; (400ca8 <xQueueGenericSendFromISR+0xb8>)
  400c90:	4798      	blx	r3

	return xReturn;
  400c92:	697b      	ldr	r3, [r7, #20]
}
  400c94:	4618      	mov	r0, r3
  400c96:	3718      	adds	r7, #24
  400c98:	46bd      	mov	sp, r7
  400c9a:	bd80      	pop	{r7, pc}
  400c9c:	0040059d 	.word	0x0040059d
  400ca0:	00400e81 	.word	0x00400e81
  400ca4:	004017d9 	.word	0x004017d9
  400ca8:	004005af 	.word	0x004005af

00400cac <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  400cac:	b580      	push	{r7, lr}
  400cae:	b088      	sub	sp, #32
  400cb0:	af00      	add	r7, sp, #0
  400cb2:	60f8      	str	r0, [r7, #12]
  400cb4:	60b9      	str	r1, [r7, #8]
  400cb6:	607a      	str	r2, [r7, #4]
  400cb8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400cba:	2300      	movs	r3, #0
  400cbc:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  400cbe:	68fb      	ldr	r3, [r7, #12]
  400cc0:	2b00      	cmp	r3, #0
  400cc2:	d103      	bne.n	400ccc <xQueueGenericReceive+0x20>
  400cc4:	4b5f      	ldr	r3, [pc, #380]	; (400e44 <xQueueGenericReceive+0x198>)
  400cc6:	4798      	blx	r3
  400cc8:	bf00      	nop
  400cca:	e7fd      	b.n	400cc8 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400ccc:	68bb      	ldr	r3, [r7, #8]
  400cce:	2b00      	cmp	r3, #0
  400cd0:	d103      	bne.n	400cda <xQueueGenericReceive+0x2e>
  400cd2:	68fb      	ldr	r3, [r7, #12]
  400cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400cd6:	2b00      	cmp	r3, #0
  400cd8:	d101      	bne.n	400cde <xQueueGenericReceive+0x32>
  400cda:	2301      	movs	r3, #1
  400cdc:	e000      	b.n	400ce0 <xQueueGenericReceive+0x34>
  400cde:	2300      	movs	r3, #0
  400ce0:	2b00      	cmp	r3, #0
  400ce2:	d103      	bne.n	400cec <xQueueGenericReceive+0x40>
  400ce4:	4b57      	ldr	r3, [pc, #348]	; (400e44 <xQueueGenericReceive+0x198>)
  400ce6:	4798      	blx	r3
  400ce8:	bf00      	nop
  400cea:	e7fd      	b.n	400ce8 <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  400cec:	4b56      	ldr	r3, [pc, #344]	; (400e48 <xQueueGenericReceive+0x19c>)
  400cee:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  400cf0:	68fb      	ldr	r3, [r7, #12]
  400cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400cf4:	2b00      	cmp	r3, #0
  400cf6:	d03b      	beq.n	400d70 <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  400cf8:	68fb      	ldr	r3, [r7, #12]
  400cfa:	68db      	ldr	r3, [r3, #12]
  400cfc:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400cfe:	68b9      	ldr	r1, [r7, #8]
  400d00:	68f8      	ldr	r0, [r7, #12]
  400d02:	4b52      	ldr	r3, [pc, #328]	; (400e4c <xQueueGenericReceive+0x1a0>)
  400d04:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  400d06:	683b      	ldr	r3, [r7, #0]
  400d08:	2b00      	cmp	r3, #0
  400d0a:	d11c      	bne.n	400d46 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  400d0c:	68fb      	ldr	r3, [r7, #12]
  400d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400d10:	1e5a      	subs	r2, r3, #1
  400d12:	68fb      	ldr	r3, [r7, #12]
  400d14:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400d16:	68fb      	ldr	r3, [r7, #12]
  400d18:	681b      	ldr	r3, [r3, #0]
  400d1a:	2b00      	cmp	r3, #0
  400d1c:	d104      	bne.n	400d28 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  400d1e:	4b4c      	ldr	r3, [pc, #304]	; (400e50 <xQueueGenericReceive+0x1a4>)
  400d20:	4798      	blx	r3
  400d22:	4602      	mov	r2, r0
  400d24:	68fb      	ldr	r3, [r7, #12]
  400d26:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d28:	68fb      	ldr	r3, [r7, #12]
  400d2a:	691b      	ldr	r3, [r3, #16]
  400d2c:	2b00      	cmp	r3, #0
  400d2e:	d01b      	beq.n	400d68 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400d30:	68fb      	ldr	r3, [r7, #12]
  400d32:	3310      	adds	r3, #16
  400d34:	4618      	mov	r0, r3
  400d36:	4b47      	ldr	r3, [pc, #284]	; (400e54 <xQueueGenericReceive+0x1a8>)
  400d38:	4798      	blx	r3
  400d3a:	4603      	mov	r3, r0
  400d3c:	2b01      	cmp	r3, #1
  400d3e:	d113      	bne.n	400d68 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  400d40:	4b45      	ldr	r3, [pc, #276]	; (400e58 <xQueueGenericReceive+0x1ac>)
  400d42:	4798      	blx	r3
  400d44:	e010      	b.n	400d68 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  400d46:	68fb      	ldr	r3, [r7, #12]
  400d48:	69ba      	ldr	r2, [r7, #24]
  400d4a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400d4c:	68fb      	ldr	r3, [r7, #12]
  400d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400d50:	2b00      	cmp	r3, #0
  400d52:	d009      	beq.n	400d68 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400d54:	68fb      	ldr	r3, [r7, #12]
  400d56:	3324      	adds	r3, #36	; 0x24
  400d58:	4618      	mov	r0, r3
  400d5a:	4b3e      	ldr	r3, [pc, #248]	; (400e54 <xQueueGenericReceive+0x1a8>)
  400d5c:	4798      	blx	r3
  400d5e:	4603      	mov	r3, r0
  400d60:	2b00      	cmp	r3, #0
  400d62:	d001      	beq.n	400d68 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  400d64:	4b3c      	ldr	r3, [pc, #240]	; (400e58 <xQueueGenericReceive+0x1ac>)
  400d66:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  400d68:	4b3c      	ldr	r3, [pc, #240]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400d6a:	4798      	blx	r3
				return pdPASS;
  400d6c:	2301      	movs	r3, #1
  400d6e:	e064      	b.n	400e3a <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400d70:	687b      	ldr	r3, [r7, #4]
  400d72:	2b00      	cmp	r3, #0
  400d74:	d103      	bne.n	400d7e <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400d76:	4b39      	ldr	r3, [pc, #228]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400d78:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  400d7a:	2300      	movs	r3, #0
  400d7c:	e05d      	b.n	400e3a <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  400d7e:	69fb      	ldr	r3, [r7, #28]
  400d80:	2b00      	cmp	r3, #0
  400d82:	d106      	bne.n	400d92 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400d84:	f107 0310 	add.w	r3, r7, #16
  400d88:	4618      	mov	r0, r3
  400d8a:	4b35      	ldr	r3, [pc, #212]	; (400e60 <xQueueGenericReceive+0x1b4>)
  400d8c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400d8e:	2301      	movs	r3, #1
  400d90:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400d92:	4b32      	ldr	r3, [pc, #200]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400d94:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400d96:	4b33      	ldr	r3, [pc, #204]	; (400e64 <xQueueGenericReceive+0x1b8>)
  400d98:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d9a:	4b2b      	ldr	r3, [pc, #172]	; (400e48 <xQueueGenericReceive+0x19c>)
  400d9c:	4798      	blx	r3
  400d9e:	68fb      	ldr	r3, [r7, #12]
  400da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400da2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400da6:	d102      	bne.n	400dae <xQueueGenericReceive+0x102>
  400da8:	68fb      	ldr	r3, [r7, #12]
  400daa:	2200      	movs	r2, #0
  400dac:	645a      	str	r2, [r3, #68]	; 0x44
  400dae:	68fb      	ldr	r3, [r7, #12]
  400db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400db2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400db6:	d102      	bne.n	400dbe <xQueueGenericReceive+0x112>
  400db8:	68fb      	ldr	r3, [r7, #12]
  400dba:	2200      	movs	r2, #0
  400dbc:	649a      	str	r2, [r3, #72]	; 0x48
  400dbe:	4b27      	ldr	r3, [pc, #156]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400dc0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400dc2:	1d3a      	adds	r2, r7, #4
  400dc4:	f107 0310 	add.w	r3, r7, #16
  400dc8:	4611      	mov	r1, r2
  400dca:	4618      	mov	r0, r3
  400dcc:	4b26      	ldr	r3, [pc, #152]	; (400e68 <xQueueGenericReceive+0x1bc>)
  400dce:	4798      	blx	r3
  400dd0:	4603      	mov	r3, r0
  400dd2:	2b00      	cmp	r3, #0
  400dd4:	d12b      	bne.n	400e2e <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400dd6:	68f8      	ldr	r0, [r7, #12]
  400dd8:	4b24      	ldr	r3, [pc, #144]	; (400e6c <xQueueGenericReceive+0x1c0>)
  400dda:	4798      	blx	r3
  400ddc:	4603      	mov	r3, r0
  400dde:	2b00      	cmp	r3, #0
  400de0:	d01f      	beq.n	400e22 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400de2:	68fb      	ldr	r3, [r7, #12]
  400de4:	681b      	ldr	r3, [r3, #0]
  400de6:	2b00      	cmp	r3, #0
  400de8:	d108      	bne.n	400dfc <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  400dea:	4b17      	ldr	r3, [pc, #92]	; (400e48 <xQueueGenericReceive+0x19c>)
  400dec:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400dee:	68fb      	ldr	r3, [r7, #12]
  400df0:	685b      	ldr	r3, [r3, #4]
  400df2:	4618      	mov	r0, r3
  400df4:	4b1e      	ldr	r3, [pc, #120]	; (400e70 <xQueueGenericReceive+0x1c4>)
  400df6:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  400df8:	4b18      	ldr	r3, [pc, #96]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400dfa:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400dfc:	68fb      	ldr	r3, [r7, #12]
  400dfe:	3324      	adds	r3, #36	; 0x24
  400e00:	687a      	ldr	r2, [r7, #4]
  400e02:	4611      	mov	r1, r2
  400e04:	4618      	mov	r0, r3
  400e06:	4b1b      	ldr	r3, [pc, #108]	; (400e74 <xQueueGenericReceive+0x1c8>)
  400e08:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400e0a:	68f8      	ldr	r0, [r7, #12]
  400e0c:	4b1a      	ldr	r3, [pc, #104]	; (400e78 <xQueueGenericReceive+0x1cc>)
  400e0e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400e10:	4b1a      	ldr	r3, [pc, #104]	; (400e7c <xQueueGenericReceive+0x1d0>)
  400e12:	4798      	blx	r3
  400e14:	4603      	mov	r3, r0
  400e16:	2b00      	cmp	r3, #0
  400e18:	f47f af68 	bne.w	400cec <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  400e1c:	4b0e      	ldr	r3, [pc, #56]	; (400e58 <xQueueGenericReceive+0x1ac>)
  400e1e:	4798      	blx	r3
  400e20:	e764      	b.n	400cec <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400e22:	68f8      	ldr	r0, [r7, #12]
  400e24:	4b14      	ldr	r3, [pc, #80]	; (400e78 <xQueueGenericReceive+0x1cc>)
  400e26:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400e28:	4b14      	ldr	r3, [pc, #80]	; (400e7c <xQueueGenericReceive+0x1d0>)
  400e2a:	4798      	blx	r3
  400e2c:	e75e      	b.n	400cec <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  400e2e:	68f8      	ldr	r0, [r7, #12]
  400e30:	4b11      	ldr	r3, [pc, #68]	; (400e78 <xQueueGenericReceive+0x1cc>)
  400e32:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400e34:	4b11      	ldr	r3, [pc, #68]	; (400e7c <xQueueGenericReceive+0x1d0>)
  400e36:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  400e38:	2300      	movs	r3, #0
		}
	}
}
  400e3a:	4618      	mov	r0, r3
  400e3c:	3720      	adds	r7, #32
  400e3e:	46bd      	mov	sp, r7
  400e40:	bd80      	pop	{r7, pc}
  400e42:	bf00      	nop
  400e44:	0040059d 	.word	0x0040059d
  400e48:	00400555 	.word	0x00400555
  400e4c:	00400f41 	.word	0x00400f41
  400e50:	00401c51 	.word	0x00401c51
  400e54:	004017d9 	.word	0x004017d9
  400e58:	00400539 	.word	0x00400539
  400e5c:	00400575 	.word	0x00400575
  400e60:	00401895 	.word	0x00401895
  400e64:	00401399 	.word	0x00401399
  400e68:	004018d1 	.word	0x004018d1
  400e6c:	00401039 	.word	0x00401039
  400e70:	00401cad 	.word	0x00401cad
  400e74:	004016f1 	.word	0x004016f1
  400e78:	00400f91 	.word	0x00400f91
  400e7c:	004013b5 	.word	0x004013b5

00400e80 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  400e80:	b580      	push	{r7, lr}
  400e82:	b084      	sub	sp, #16
  400e84:	af00      	add	r7, sp, #0
  400e86:	60f8      	str	r0, [r7, #12]
  400e88:	60b9      	str	r1, [r7, #8]
  400e8a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  400e8c:	68fb      	ldr	r3, [r7, #12]
  400e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e90:	2b00      	cmp	r3, #0
  400e92:	d10c      	bne.n	400eae <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400e94:	68fb      	ldr	r3, [r7, #12]
  400e96:	681b      	ldr	r3, [r3, #0]
  400e98:	2b00      	cmp	r3, #0
  400e9a:	d143      	bne.n	400f24 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400e9c:	68fb      	ldr	r3, [r7, #12]
  400e9e:	685b      	ldr	r3, [r3, #4]
  400ea0:	4618      	mov	r0, r3
  400ea2:	4b25      	ldr	r3, [pc, #148]	; (400f38 <prvCopyDataToQueue+0xb8>)
  400ea4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400ea6:	68fb      	ldr	r3, [r7, #12]
  400ea8:	2200      	movs	r2, #0
  400eaa:	605a      	str	r2, [r3, #4]
  400eac:	e03a      	b.n	400f24 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  400eae:	687b      	ldr	r3, [r7, #4]
  400eb0:	2b00      	cmp	r3, #0
  400eb2:	d119      	bne.n	400ee8 <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400eb4:	68fb      	ldr	r3, [r7, #12]
  400eb6:	6898      	ldr	r0, [r3, #8]
  400eb8:	68fb      	ldr	r3, [r7, #12]
  400eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ebc:	461a      	mov	r2, r3
  400ebe:	68b9      	ldr	r1, [r7, #8]
  400ec0:	4b1e      	ldr	r3, [pc, #120]	; (400f3c <prvCopyDataToQueue+0xbc>)
  400ec2:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400ec4:	68fb      	ldr	r3, [r7, #12]
  400ec6:	689a      	ldr	r2, [r3, #8]
  400ec8:	68fb      	ldr	r3, [r7, #12]
  400eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ecc:	441a      	add	r2, r3
  400ece:	68fb      	ldr	r3, [r7, #12]
  400ed0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  400ed2:	68fb      	ldr	r3, [r7, #12]
  400ed4:	689a      	ldr	r2, [r3, #8]
  400ed6:	68fb      	ldr	r3, [r7, #12]
  400ed8:	685b      	ldr	r3, [r3, #4]
  400eda:	429a      	cmp	r2, r3
  400edc:	d322      	bcc.n	400f24 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400ede:	68fb      	ldr	r3, [r7, #12]
  400ee0:	681a      	ldr	r2, [r3, #0]
  400ee2:	68fb      	ldr	r3, [r7, #12]
  400ee4:	609a      	str	r2, [r3, #8]
  400ee6:	e01d      	b.n	400f24 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400ee8:	68fb      	ldr	r3, [r7, #12]
  400eea:	68d8      	ldr	r0, [r3, #12]
  400eec:	68fb      	ldr	r3, [r7, #12]
  400eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ef0:	461a      	mov	r2, r3
  400ef2:	68b9      	ldr	r1, [r7, #8]
  400ef4:	4b11      	ldr	r3, [pc, #68]	; (400f3c <prvCopyDataToQueue+0xbc>)
  400ef6:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  400ef8:	68fb      	ldr	r3, [r7, #12]
  400efa:	68da      	ldr	r2, [r3, #12]
  400efc:	68fb      	ldr	r3, [r7, #12]
  400efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f00:	425b      	negs	r3, r3
  400f02:	441a      	add	r2, r3
  400f04:	68fb      	ldr	r3, [r7, #12]
  400f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  400f08:	68fb      	ldr	r3, [r7, #12]
  400f0a:	68da      	ldr	r2, [r3, #12]
  400f0c:	68fb      	ldr	r3, [r7, #12]
  400f0e:	681b      	ldr	r3, [r3, #0]
  400f10:	429a      	cmp	r2, r3
  400f12:	d207      	bcs.n	400f24 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400f14:	68fb      	ldr	r3, [r7, #12]
  400f16:	685a      	ldr	r2, [r3, #4]
  400f18:	68fb      	ldr	r3, [r7, #12]
  400f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f1c:	425b      	negs	r3, r3
  400f1e:	441a      	add	r2, r3
  400f20:	68fb      	ldr	r3, [r7, #12]
  400f22:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400f24:	68fb      	ldr	r3, [r7, #12]
  400f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400f28:	1c5a      	adds	r2, r3, #1
  400f2a:	68fb      	ldr	r3, [r7, #12]
  400f2c:	639a      	str	r2, [r3, #56]	; 0x38
}
  400f2e:	bf00      	nop
  400f30:	3710      	adds	r7, #16
  400f32:	46bd      	mov	sp, r7
  400f34:	bd80      	pop	{r7, pc}
  400f36:	bf00      	nop
  400f38:	00401d61 	.word	0x00401d61
  400f3c:	00405f05 	.word	0x00405f05

00400f40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  400f40:	b580      	push	{r7, lr}
  400f42:	b082      	sub	sp, #8
  400f44:	af00      	add	r7, sp, #0
  400f46:	6078      	str	r0, [r7, #4]
  400f48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  400f4a:	687b      	ldr	r3, [r7, #4]
  400f4c:	681b      	ldr	r3, [r3, #0]
  400f4e:	2b00      	cmp	r3, #0
  400f50:	d018      	beq.n	400f84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  400f52:	687b      	ldr	r3, [r7, #4]
  400f54:	68da      	ldr	r2, [r3, #12]
  400f56:	687b      	ldr	r3, [r7, #4]
  400f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f5a:	441a      	add	r2, r3
  400f5c:	687b      	ldr	r3, [r7, #4]
  400f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  400f60:	687b      	ldr	r3, [r7, #4]
  400f62:	68da      	ldr	r2, [r3, #12]
  400f64:	687b      	ldr	r3, [r7, #4]
  400f66:	685b      	ldr	r3, [r3, #4]
  400f68:	429a      	cmp	r2, r3
  400f6a:	d303      	bcc.n	400f74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  400f6c:	687b      	ldr	r3, [r7, #4]
  400f6e:	681a      	ldr	r2, [r3, #0]
  400f70:	687b      	ldr	r3, [r7, #4]
  400f72:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  400f74:	687b      	ldr	r3, [r7, #4]
  400f76:	68d9      	ldr	r1, [r3, #12]
  400f78:	687b      	ldr	r3, [r7, #4]
  400f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f7c:	461a      	mov	r2, r3
  400f7e:	6838      	ldr	r0, [r7, #0]
  400f80:	4b02      	ldr	r3, [pc, #8]	; (400f8c <prvCopyDataFromQueue+0x4c>)
  400f82:	4798      	blx	r3
	}
}
  400f84:	bf00      	nop
  400f86:	3708      	adds	r7, #8
  400f88:	46bd      	mov	sp, r7
  400f8a:	bd80      	pop	{r7, pc}
  400f8c:	00405f05 	.word	0x00405f05

00400f90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  400f90:	b580      	push	{r7, lr}
  400f92:	b082      	sub	sp, #8
  400f94:	af00      	add	r7, sp, #0
  400f96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400f98:	4b23      	ldr	r3, [pc, #140]	; (401028 <prvUnlockQueue+0x98>)
  400f9a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400f9c:	e012      	b.n	400fc4 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f9e:	687b      	ldr	r3, [r7, #4]
  400fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400fa2:	2b00      	cmp	r3, #0
  400fa4:	d013      	beq.n	400fce <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400fa6:	687b      	ldr	r3, [r7, #4]
  400fa8:	3324      	adds	r3, #36	; 0x24
  400faa:	4618      	mov	r0, r3
  400fac:	4b1f      	ldr	r3, [pc, #124]	; (40102c <prvUnlockQueue+0x9c>)
  400fae:	4798      	blx	r3
  400fb0:	4603      	mov	r3, r0
  400fb2:	2b00      	cmp	r3, #0
  400fb4:	d001      	beq.n	400fba <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  400fb6:	4b1e      	ldr	r3, [pc, #120]	; (401030 <prvUnlockQueue+0xa0>)
  400fb8:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  400fba:	687b      	ldr	r3, [r7, #4]
  400fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400fbe:	1e5a      	subs	r2, r3, #1
  400fc0:	687b      	ldr	r3, [r7, #4]
  400fc2:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400fc8:	2b00      	cmp	r3, #0
  400fca:	dce8      	bgt.n	400f9e <prvUnlockQueue+0xe>
  400fcc:	e000      	b.n	400fd0 <prvUnlockQueue+0x40>
			}
			else
			{
				break;
  400fce:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400fd0:	687b      	ldr	r3, [r7, #4]
  400fd2:	f04f 32ff 	mov.w	r2, #4294967295
  400fd6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400fd8:	4b16      	ldr	r3, [pc, #88]	; (401034 <prvUnlockQueue+0xa4>)
  400fda:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400fdc:	4b12      	ldr	r3, [pc, #72]	; (401028 <prvUnlockQueue+0x98>)
  400fde:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400fe0:	e012      	b.n	401008 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400fe2:	687b      	ldr	r3, [r7, #4]
  400fe4:	691b      	ldr	r3, [r3, #16]
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	d013      	beq.n	401012 <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400fea:	687b      	ldr	r3, [r7, #4]
  400fec:	3310      	adds	r3, #16
  400fee:	4618      	mov	r0, r3
  400ff0:	4b0e      	ldr	r3, [pc, #56]	; (40102c <prvUnlockQueue+0x9c>)
  400ff2:	4798      	blx	r3
  400ff4:	4603      	mov	r3, r0
  400ff6:	2b00      	cmp	r3, #0
  400ff8:	d001      	beq.n	400ffe <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  400ffa:	4b0d      	ldr	r3, [pc, #52]	; (401030 <prvUnlockQueue+0xa0>)
  400ffc:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  400ffe:	687b      	ldr	r3, [r7, #4]
  401000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  401002:	1e5a      	subs	r2, r3, #1
  401004:	687b      	ldr	r3, [r7, #4]
  401006:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401008:	687b      	ldr	r3, [r7, #4]
  40100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40100c:	2b00      	cmp	r3, #0
  40100e:	dce8      	bgt.n	400fe2 <prvUnlockQueue+0x52>
  401010:	e000      	b.n	401014 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
  401012:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  401014:	687b      	ldr	r3, [r7, #4]
  401016:	f04f 32ff 	mov.w	r2, #4294967295
  40101a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  40101c:	4b05      	ldr	r3, [pc, #20]	; (401034 <prvUnlockQueue+0xa4>)
  40101e:	4798      	blx	r3
}
  401020:	bf00      	nop
  401022:	3708      	adds	r7, #8
  401024:	46bd      	mov	sp, r7
  401026:	bd80      	pop	{r7, pc}
  401028:	00400555 	.word	0x00400555
  40102c:	004017d9 	.word	0x004017d9
  401030:	00401985 	.word	0x00401985
  401034:	00400575 	.word	0x00400575

00401038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  401038:	b580      	push	{r7, lr}
  40103a:	b084      	sub	sp, #16
  40103c:	af00      	add	r7, sp, #0
  40103e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  401040:	4b08      	ldr	r3, [pc, #32]	; (401064 <prvIsQueueEmpty+0x2c>)
  401042:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  401044:	687b      	ldr	r3, [r7, #4]
  401046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401048:	2b00      	cmp	r3, #0
  40104a:	bf0c      	ite	eq
  40104c:	2301      	moveq	r3, #1
  40104e:	2300      	movne	r3, #0
  401050:	b2db      	uxtb	r3, r3
  401052:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  401054:	4b04      	ldr	r3, [pc, #16]	; (401068 <prvIsQueueEmpty+0x30>)
  401056:	4798      	blx	r3

	return xReturn;
  401058:	68fb      	ldr	r3, [r7, #12]
}
  40105a:	4618      	mov	r0, r3
  40105c:	3710      	adds	r7, #16
  40105e:	46bd      	mov	sp, r7
  401060:	bd80      	pop	{r7, pc}
  401062:	bf00      	nop
  401064:	00400555 	.word	0x00400555
  401068:	00400575 	.word	0x00400575

0040106c <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  40106c:	b580      	push	{r7, lr}
  40106e:	b084      	sub	sp, #16
  401070:	af00      	add	r7, sp, #0
  401072:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  401074:	4b09      	ldr	r3, [pc, #36]	; (40109c <prvIsQueueFull+0x30>)
  401076:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  401078:	687b      	ldr	r3, [r7, #4]
  40107a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40107c:	687b      	ldr	r3, [r7, #4]
  40107e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  401080:	429a      	cmp	r2, r3
  401082:	bf0c      	ite	eq
  401084:	2301      	moveq	r3, #1
  401086:	2300      	movne	r3, #0
  401088:	b2db      	uxtb	r3, r3
  40108a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  40108c:	4b04      	ldr	r3, [pc, #16]	; (4010a0 <prvIsQueueFull+0x34>)
  40108e:	4798      	blx	r3

	return xReturn;
  401090:	68fb      	ldr	r3, [r7, #12]
}
  401092:	4618      	mov	r0, r3
  401094:	3710      	adds	r7, #16
  401096:	46bd      	mov	sp, r7
  401098:	bd80      	pop	{r7, pc}
  40109a:	bf00      	nop
  40109c:	00400555 	.word	0x00400555
  4010a0:	00400575 	.word	0x00400575

004010a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  4010a4:	b580      	push	{r7, lr}
  4010a6:	b082      	sub	sp, #8
  4010a8:	af00      	add	r7, sp, #0
  4010aa:	6078      	str	r0, [r7, #4]
  4010ac:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  4010ae:	4b12      	ldr	r3, [pc, #72]	; (4010f8 <vQueueWaitForMessageRestricted+0x54>)
  4010b0:	4798      	blx	r3
  4010b2:	687b      	ldr	r3, [r7, #4]
  4010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4010b6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010ba:	d102      	bne.n	4010c2 <vQueueWaitForMessageRestricted+0x1e>
  4010bc:	687b      	ldr	r3, [r7, #4]
  4010be:	2200      	movs	r2, #0
  4010c0:	645a      	str	r2, [r3, #68]	; 0x44
  4010c2:	687b      	ldr	r3, [r7, #4]
  4010c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4010c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010ca:	d102      	bne.n	4010d2 <vQueueWaitForMessageRestricted+0x2e>
  4010cc:	687b      	ldr	r3, [r7, #4]
  4010ce:	2200      	movs	r2, #0
  4010d0:	649a      	str	r2, [r3, #72]	; 0x48
  4010d2:	4b0a      	ldr	r3, [pc, #40]	; (4010fc <vQueueWaitForMessageRestricted+0x58>)
  4010d4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  4010d6:	687b      	ldr	r3, [r7, #4]
  4010d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4010da:	2b00      	cmp	r3, #0
  4010dc:	d105      	bne.n	4010ea <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4010de:	687b      	ldr	r3, [r7, #4]
  4010e0:	3324      	adds	r3, #36	; 0x24
  4010e2:	6839      	ldr	r1, [r7, #0]
  4010e4:	4618      	mov	r0, r3
  4010e6:	4b06      	ldr	r3, [pc, #24]	; (401100 <vQueueWaitForMessageRestricted+0x5c>)
  4010e8:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  4010ea:	6878      	ldr	r0, [r7, #4]
  4010ec:	4b05      	ldr	r3, [pc, #20]	; (401104 <vQueueWaitForMessageRestricted+0x60>)
  4010ee:	4798      	blx	r3
	}
  4010f0:	bf00      	nop
  4010f2:	3708      	adds	r7, #8
  4010f4:	46bd      	mov	sp, r7
  4010f6:	bd80      	pop	{r7, pc}
  4010f8:	00400555 	.word	0x00400555
  4010fc:	00400575 	.word	0x00400575
  401100:	00401775 	.word	0x00401775
  401104:	00400f91 	.word	0x00400f91

00401108 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  401108:	b590      	push	{r4, r7, lr}
  40110a:	b08b      	sub	sp, #44	; 0x2c
  40110c:	af02      	add	r7, sp, #8
  40110e:	60f8      	str	r0, [r7, #12]
  401110:	60b9      	str	r1, [r7, #8]
  401112:	603b      	str	r3, [r7, #0]
  401114:	4613      	mov	r3, r2
  401116:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  401118:	68fb      	ldr	r3, [r7, #12]
  40111a:	2b00      	cmp	r3, #0
  40111c:	d103      	bne.n	401126 <xTaskGenericCreate+0x1e>
  40111e:	4b54      	ldr	r3, [pc, #336]	; (401270 <xTaskGenericCreate+0x168>)
  401120:	4798      	blx	r3
  401122:	bf00      	nop
  401124:	e7fd      	b.n	401122 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  401126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401128:	2b04      	cmp	r3, #4
  40112a:	d903      	bls.n	401134 <xTaskGenericCreate+0x2c>
  40112c:	4b50      	ldr	r3, [pc, #320]	; (401270 <xTaskGenericCreate+0x168>)
  40112e:	4798      	blx	r3
  401130:	bf00      	nop
  401132:	e7fd      	b.n	401130 <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  401134:	88fb      	ldrh	r3, [r7, #6]
  401136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401138:	4618      	mov	r0, r3
  40113a:	4b4e      	ldr	r3, [pc, #312]	; (401274 <xTaskGenericCreate+0x16c>)
  40113c:	4798      	blx	r3
  40113e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  401140:	69bb      	ldr	r3, [r7, #24]
  401142:	2b00      	cmp	r3, #0
  401144:	d07d      	beq.n	401242 <xTaskGenericCreate+0x13a>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  401146:	69bb      	ldr	r3, [r7, #24]
  401148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40114a:	88f9      	ldrh	r1, [r7, #6]
  40114c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  401150:	440b      	add	r3, r1
  401152:	009b      	lsls	r3, r3, #2
  401154:	4413      	add	r3, r2
  401156:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  401158:	697b      	ldr	r3, [r7, #20]
  40115a:	f023 0307 	bic.w	r3, r3, #7
  40115e:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  401160:	697b      	ldr	r3, [r7, #20]
  401162:	f003 0307 	and.w	r3, r3, #7
  401166:	2b00      	cmp	r3, #0
  401168:	d003      	beq.n	401172 <xTaskGenericCreate+0x6a>
  40116a:	4b41      	ldr	r3, [pc, #260]	; (401270 <xTaskGenericCreate+0x168>)
  40116c:	4798      	blx	r3
  40116e:	bf00      	nop
  401170:	e7fd      	b.n	40116e <xTaskGenericCreate+0x66>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  401172:	88fb      	ldrh	r3, [r7, #6]
  401174:	9300      	str	r3, [sp, #0]
  401176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40117a:	68b9      	ldr	r1, [r7, #8]
  40117c:	69b8      	ldr	r0, [r7, #24]
  40117e:	4c3e      	ldr	r4, [pc, #248]	; (401278 <xTaskGenericCreate+0x170>)
  401180:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401182:	683a      	ldr	r2, [r7, #0]
  401184:	68f9      	ldr	r1, [r7, #12]
  401186:	6978      	ldr	r0, [r7, #20]
  401188:	4b3c      	ldr	r3, [pc, #240]	; (40127c <xTaskGenericCreate+0x174>)
  40118a:	4798      	blx	r3
  40118c:	4602      	mov	r2, r0
  40118e:	69bb      	ldr	r3, [r7, #24]
  401190:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  401192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  401194:	2b00      	cmp	r3, #0
  401196:	d002      	beq.n	40119e <xTaskGenericCreate+0x96>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  401198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40119a:	69ba      	ldr	r2, [r7, #24]
  40119c:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  40119e:	4b38      	ldr	r3, [pc, #224]	; (401280 <xTaskGenericCreate+0x178>)
  4011a0:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4011a2:	4b38      	ldr	r3, [pc, #224]	; (401284 <xTaskGenericCreate+0x17c>)
  4011a4:	681b      	ldr	r3, [r3, #0]
  4011a6:	3301      	adds	r3, #1
  4011a8:	4a36      	ldr	r2, [pc, #216]	; (401284 <xTaskGenericCreate+0x17c>)
  4011aa:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4011ac:	4b36      	ldr	r3, [pc, #216]	; (401288 <xTaskGenericCreate+0x180>)
  4011ae:	681b      	ldr	r3, [r3, #0]
  4011b0:	2b00      	cmp	r3, #0
  4011b2:	d109      	bne.n	4011c8 <xTaskGenericCreate+0xc0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4011b4:	4a34      	ldr	r2, [pc, #208]	; (401288 <xTaskGenericCreate+0x180>)
  4011b6:	69bb      	ldr	r3, [r7, #24]
  4011b8:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4011ba:	4b32      	ldr	r3, [pc, #200]	; (401284 <xTaskGenericCreate+0x17c>)
  4011bc:	681b      	ldr	r3, [r3, #0]
  4011be:	2b01      	cmp	r3, #1
  4011c0:	d10f      	bne.n	4011e2 <xTaskGenericCreate+0xda>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  4011c2:	4b32      	ldr	r3, [pc, #200]	; (40128c <xTaskGenericCreate+0x184>)
  4011c4:	4798      	blx	r3
  4011c6:	e00c      	b.n	4011e2 <xTaskGenericCreate+0xda>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  4011c8:	4b31      	ldr	r3, [pc, #196]	; (401290 <xTaskGenericCreate+0x188>)
  4011ca:	681b      	ldr	r3, [r3, #0]
  4011cc:	2b00      	cmp	r3, #0
  4011ce:	d108      	bne.n	4011e2 <xTaskGenericCreate+0xda>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4011d0:	4b2d      	ldr	r3, [pc, #180]	; (401288 <xTaskGenericCreate+0x180>)
  4011d2:	681b      	ldr	r3, [r3, #0]
  4011d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4011d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4011d8:	429a      	cmp	r2, r3
  4011da:	d802      	bhi.n	4011e2 <xTaskGenericCreate+0xda>
					{
						pxCurrentTCB = pxNewTCB;
  4011dc:	4a2a      	ldr	r2, [pc, #168]	; (401288 <xTaskGenericCreate+0x180>)
  4011de:	69bb      	ldr	r3, [r7, #24]
  4011e0:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  4011e2:	69bb      	ldr	r3, [r7, #24]
  4011e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4011e6:	4b2b      	ldr	r3, [pc, #172]	; (401294 <xTaskGenericCreate+0x18c>)
  4011e8:	681b      	ldr	r3, [r3, #0]
  4011ea:	429a      	cmp	r2, r3
  4011ec:	d903      	bls.n	4011f6 <xTaskGenericCreate+0xee>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  4011ee:	69bb      	ldr	r3, [r7, #24]
  4011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4011f2:	4a28      	ldr	r2, [pc, #160]	; (401294 <xTaskGenericCreate+0x18c>)
  4011f4:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4011f6:	4b28      	ldr	r3, [pc, #160]	; (401298 <xTaskGenericCreate+0x190>)
  4011f8:	681a      	ldr	r2, [r3, #0]
  4011fa:	69bb      	ldr	r3, [r7, #24]
  4011fc:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  4011fe:	4b26      	ldr	r3, [pc, #152]	; (401298 <xTaskGenericCreate+0x190>)
  401200:	681b      	ldr	r3, [r3, #0]
  401202:	3301      	adds	r3, #1
  401204:	4a24      	ldr	r2, [pc, #144]	; (401298 <xTaskGenericCreate+0x190>)
  401206:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  401208:	69bb      	ldr	r3, [r7, #24]
  40120a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40120c:	4b23      	ldr	r3, [pc, #140]	; (40129c <xTaskGenericCreate+0x194>)
  40120e:	681b      	ldr	r3, [r3, #0]
  401210:	429a      	cmp	r2, r3
  401212:	d903      	bls.n	40121c <xTaskGenericCreate+0x114>
  401214:	69bb      	ldr	r3, [r7, #24]
  401216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401218:	4a20      	ldr	r2, [pc, #128]	; (40129c <xTaskGenericCreate+0x194>)
  40121a:	6013      	str	r3, [r2, #0]
  40121c:	69bb      	ldr	r3, [r7, #24]
  40121e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401220:	4613      	mov	r3, r2
  401222:	009b      	lsls	r3, r3, #2
  401224:	4413      	add	r3, r2
  401226:	009b      	lsls	r3, r3, #2
  401228:	4a1d      	ldr	r2, [pc, #116]	; (4012a0 <xTaskGenericCreate+0x198>)
  40122a:	441a      	add	r2, r3
  40122c:	69bb      	ldr	r3, [r7, #24]
  40122e:	3304      	adds	r3, #4
  401230:	4619      	mov	r1, r3
  401232:	4610      	mov	r0, r2
  401234:	4b1b      	ldr	r3, [pc, #108]	; (4012a4 <xTaskGenericCreate+0x19c>)
  401236:	4798      	blx	r3

			xReturn = pdPASS;
  401238:	2301      	movs	r3, #1
  40123a:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  40123c:	4b1a      	ldr	r3, [pc, #104]	; (4012a8 <xTaskGenericCreate+0x1a0>)
  40123e:	4798      	blx	r3
  401240:	e002      	b.n	401248 <xTaskGenericCreate+0x140>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401242:	f04f 33ff 	mov.w	r3, #4294967295
  401246:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  401248:	69fb      	ldr	r3, [r7, #28]
  40124a:	2b01      	cmp	r3, #1
  40124c:	d10b      	bne.n	401266 <xTaskGenericCreate+0x15e>
	{
		if( xSchedulerRunning != pdFALSE )
  40124e:	4b10      	ldr	r3, [pc, #64]	; (401290 <xTaskGenericCreate+0x188>)
  401250:	681b      	ldr	r3, [r3, #0]
  401252:	2b00      	cmp	r3, #0
  401254:	d007      	beq.n	401266 <xTaskGenericCreate+0x15e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401256:	4b0c      	ldr	r3, [pc, #48]	; (401288 <xTaskGenericCreate+0x180>)
  401258:	681b      	ldr	r3, [r3, #0]
  40125a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40125c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40125e:	429a      	cmp	r2, r3
  401260:	d201      	bcs.n	401266 <xTaskGenericCreate+0x15e>
			{
				portYIELD_WITHIN_API();
  401262:	4b12      	ldr	r3, [pc, #72]	; (4012ac <xTaskGenericCreate+0x1a4>)
  401264:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  401266:	69fb      	ldr	r3, [r7, #28]
}
  401268:	4618      	mov	r0, r3
  40126a:	3724      	adds	r7, #36	; 0x24
  40126c:	46bd      	mov	sp, r7
  40126e:	bd90      	pop	{r4, r7, pc}
  401270:	0040059d 	.word	0x0040059d
  401274:	00401bbd 	.word	0x00401bbd
  401278:	004019c5 	.word	0x004019c5
  40127c:	00400449 	.word	0x00400449
  401280:	00400555 	.word	0x00400555
  401284:	2040aaec 	.word	0x2040aaec
  401288:	2040aa14 	.word	0x2040aa14
  40128c:	00401a39 	.word	0x00401a39
  401290:	2040aafc 	.word	0x2040aafc
  401294:	2040aaf4 	.word	0x2040aaf4
  401298:	2040ab10 	.word	0x2040ab10
  40129c:	2040aaf8 	.word	0x2040aaf8
  4012a0:	2040aa18 	.word	0x2040aa18
  4012a4:	0040028b 	.word	0x0040028b
  4012a8:	00400575 	.word	0x00400575
  4012ac:	00400539 	.word	0x00400539

004012b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  4012b0:	b580      	push	{r7, lr}
  4012b2:	b084      	sub	sp, #16
  4012b4:	af00      	add	r7, sp, #0
  4012b6:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  4012b8:	2300      	movs	r3, #0
  4012ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  4012bc:	687b      	ldr	r3, [r7, #4]
  4012be:	2b00      	cmp	r3, #0
  4012c0:	d012      	beq.n	4012e8 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  4012c2:	4b0e      	ldr	r3, [pc, #56]	; (4012fc <vTaskDelay+0x4c>)
  4012c4:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  4012c6:	4b0e      	ldr	r3, [pc, #56]	; (401300 <vTaskDelay+0x50>)
  4012c8:	681a      	ldr	r2, [r3, #0]
  4012ca:	687b      	ldr	r3, [r7, #4]
  4012cc:	4413      	add	r3, r2
  4012ce:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4012d0:	4b0c      	ldr	r3, [pc, #48]	; (401304 <vTaskDelay+0x54>)
  4012d2:	681b      	ldr	r3, [r3, #0]
  4012d4:	3304      	adds	r3, #4
  4012d6:	4618      	mov	r0, r3
  4012d8:	4b0b      	ldr	r3, [pc, #44]	; (401308 <vTaskDelay+0x58>)
  4012da:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4012dc:	68b8      	ldr	r0, [r7, #8]
  4012de:	4b0b      	ldr	r3, [pc, #44]	; (40130c <vTaskDelay+0x5c>)
  4012e0:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  4012e2:	4b0b      	ldr	r3, [pc, #44]	; (401310 <vTaskDelay+0x60>)
  4012e4:	4798      	blx	r3
  4012e6:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  4012e8:	68fb      	ldr	r3, [r7, #12]
  4012ea:	2b00      	cmp	r3, #0
  4012ec:	d101      	bne.n	4012f2 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  4012ee:	4b09      	ldr	r3, [pc, #36]	; (401314 <vTaskDelay+0x64>)
  4012f0:	4798      	blx	r3
		}
	}
  4012f2:	bf00      	nop
  4012f4:	3710      	adds	r7, #16
  4012f6:	46bd      	mov	sp, r7
  4012f8:	bd80      	pop	{r7, pc}
  4012fa:	bf00      	nop
  4012fc:	00401399 	.word	0x00401399
  401300:	2040aaf0 	.word	0x2040aaf0
  401304:	2040aa14 	.word	0x2040aa14
  401308:	0040034d 	.word	0x0040034d
  40130c:	00401b4d 	.word	0x00401b4d
  401310:	004013b5 	.word	0x004013b5
  401314:	00400539 	.word	0x00400539

00401318 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  401318:	b590      	push	{r4, r7, lr}
  40131a:	b087      	sub	sp, #28
  40131c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  40131e:	2300      	movs	r3, #0
  401320:	9303      	str	r3, [sp, #12]
  401322:	2300      	movs	r3, #0
  401324:	9302      	str	r3, [sp, #8]
  401326:	2300      	movs	r3, #0
  401328:	9301      	str	r3, [sp, #4]
  40132a:	2300      	movs	r3, #0
  40132c:	9300      	str	r3, [sp, #0]
  40132e:	2300      	movs	r3, #0
  401330:	2282      	movs	r2, #130	; 0x82
  401332:	4911      	ldr	r1, [pc, #68]	; (401378 <vTaskStartScheduler+0x60>)
  401334:	4811      	ldr	r0, [pc, #68]	; (40137c <vTaskStartScheduler+0x64>)
  401336:	4c12      	ldr	r4, [pc, #72]	; (401380 <vTaskStartScheduler+0x68>)
  401338:	47a0      	blx	r4
  40133a:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  40133c:	687b      	ldr	r3, [r7, #4]
  40133e:	2b01      	cmp	r3, #1
  401340:	d102      	bne.n	401348 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  401342:	4b10      	ldr	r3, [pc, #64]	; (401384 <vTaskStartScheduler+0x6c>)
  401344:	4798      	blx	r3
  401346:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  401348:	687b      	ldr	r3, [r7, #4]
  40134a:	2b01      	cmp	r3, #1
  40134c:	d109      	bne.n	401362 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  40134e:	4b0e      	ldr	r3, [pc, #56]	; (401388 <vTaskStartScheduler+0x70>)
  401350:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  401352:	4b0e      	ldr	r3, [pc, #56]	; (40138c <vTaskStartScheduler+0x74>)
  401354:	2201      	movs	r2, #1
  401356:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  401358:	4b0d      	ldr	r3, [pc, #52]	; (401390 <vTaskStartScheduler+0x78>)
  40135a:	2200      	movs	r2, #0
  40135c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  40135e:	4b0d      	ldr	r3, [pc, #52]	; (401394 <vTaskStartScheduler+0x7c>)
  401360:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  401362:	687b      	ldr	r3, [r7, #4]
  401364:	2b00      	cmp	r3, #0
  401366:	d103      	bne.n	401370 <vTaskStartScheduler+0x58>
  401368:	4b07      	ldr	r3, [pc, #28]	; (401388 <vTaskStartScheduler+0x70>)
  40136a:	4798      	blx	r3
  40136c:	bf00      	nop
  40136e:	e7fd      	b.n	40136c <vTaskStartScheduler+0x54>
}
  401370:	bf00      	nop
  401372:	370c      	adds	r7, #12
  401374:	46bd      	mov	sp, r7
  401376:	bd90      	pop	{r4, r7, pc}
  401378:	00408f24 	.word	0x00408f24
  40137c:	0040199d 	.word	0x0040199d
  401380:	00401109 	.word	0x00401109
  401384:	00401de5 	.word	0x00401de5
  401388:	0040059d 	.word	0x0040059d
  40138c:	2040aafc 	.word	0x2040aafc
  401390:	2040aaf0 	.word	0x2040aaf0
  401394:	004004e1 	.word	0x004004e1

00401398 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  401398:	b480      	push	{r7}
  40139a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  40139c:	4b04      	ldr	r3, [pc, #16]	; (4013b0 <vTaskSuspendAll+0x18>)
  40139e:	681b      	ldr	r3, [r3, #0]
  4013a0:	3301      	adds	r3, #1
  4013a2:	4a03      	ldr	r2, [pc, #12]	; (4013b0 <vTaskSuspendAll+0x18>)
  4013a4:	6013      	str	r3, [r2, #0]
}
  4013a6:	bf00      	nop
  4013a8:	46bd      	mov	sp, r7
  4013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013ae:	4770      	bx	lr
  4013b0:	2040ab00 	.word	0x2040ab00

004013b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  4013b4:	b590      	push	{r4, r7, lr}
  4013b6:	b083      	sub	sp, #12
  4013b8:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  4013ba:	2300      	movs	r3, #0
  4013bc:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  4013be:	4b36      	ldr	r3, [pc, #216]	; (401498 <xTaskResumeAll+0xe4>)
  4013c0:	681b      	ldr	r3, [r3, #0]
  4013c2:	2b00      	cmp	r3, #0
  4013c4:	d103      	bne.n	4013ce <xTaskResumeAll+0x1a>
  4013c6:	4b35      	ldr	r3, [pc, #212]	; (40149c <xTaskResumeAll+0xe8>)
  4013c8:	4798      	blx	r3
  4013ca:	bf00      	nop
  4013cc:	e7fd      	b.n	4013ca <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  4013ce:	4b34      	ldr	r3, [pc, #208]	; (4014a0 <xTaskResumeAll+0xec>)
  4013d0:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  4013d2:	4b31      	ldr	r3, [pc, #196]	; (401498 <xTaskResumeAll+0xe4>)
  4013d4:	681b      	ldr	r3, [r3, #0]
  4013d6:	3b01      	subs	r3, #1
  4013d8:	4a2f      	ldr	r2, [pc, #188]	; (401498 <xTaskResumeAll+0xe4>)
  4013da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4013dc:	4b2e      	ldr	r3, [pc, #184]	; (401498 <xTaskResumeAll+0xe4>)
  4013de:	681b      	ldr	r3, [r3, #0]
  4013e0:	2b00      	cmp	r3, #0
  4013e2:	d152      	bne.n	40148a <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  4013e4:	4b2f      	ldr	r3, [pc, #188]	; (4014a4 <xTaskResumeAll+0xf0>)
  4013e6:	681b      	ldr	r3, [r3, #0]
  4013e8:	2b00      	cmp	r3, #0
  4013ea:	d04e      	beq.n	40148a <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  4013ec:	2300      	movs	r3, #0
  4013ee:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4013f0:	e027      	b.n	401442 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  4013f2:	4b2d      	ldr	r3, [pc, #180]	; (4014a8 <xTaskResumeAll+0xf4>)
  4013f4:	68db      	ldr	r3, [r3, #12]
  4013f6:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  4013f8:	f104 0318 	add.w	r3, r4, #24
  4013fc:	4618      	mov	r0, r3
  4013fe:	4b2b      	ldr	r3, [pc, #172]	; (4014ac <xTaskResumeAll+0xf8>)
  401400:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401402:	1d23      	adds	r3, r4, #4
  401404:	4618      	mov	r0, r3
  401406:	4b29      	ldr	r3, [pc, #164]	; (4014ac <xTaskResumeAll+0xf8>)
  401408:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  40140a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40140c:	4b28      	ldr	r3, [pc, #160]	; (4014b0 <xTaskResumeAll+0xfc>)
  40140e:	681b      	ldr	r3, [r3, #0]
  401410:	429a      	cmp	r2, r3
  401412:	d902      	bls.n	40141a <xTaskResumeAll+0x66>
  401414:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401416:	4a26      	ldr	r2, [pc, #152]	; (4014b0 <xTaskResumeAll+0xfc>)
  401418:	6013      	str	r3, [r2, #0]
  40141a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40141c:	4613      	mov	r3, r2
  40141e:	009b      	lsls	r3, r3, #2
  401420:	4413      	add	r3, r2
  401422:	009b      	lsls	r3, r3, #2
  401424:	4a23      	ldr	r2, [pc, #140]	; (4014b4 <xTaskResumeAll+0x100>)
  401426:	4413      	add	r3, r2
  401428:	1d22      	adds	r2, r4, #4
  40142a:	4611      	mov	r1, r2
  40142c:	4618      	mov	r0, r3
  40142e:	4b22      	ldr	r3, [pc, #136]	; (4014b8 <xTaskResumeAll+0x104>)
  401430:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401432:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401434:	4b21      	ldr	r3, [pc, #132]	; (4014bc <xTaskResumeAll+0x108>)
  401436:	681b      	ldr	r3, [r3, #0]
  401438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40143a:	429a      	cmp	r2, r3
  40143c:	d301      	bcc.n	401442 <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  40143e:	2301      	movs	r3, #1
  401440:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  401442:	4b19      	ldr	r3, [pc, #100]	; (4014a8 <xTaskResumeAll+0xf4>)
  401444:	681b      	ldr	r3, [r3, #0]
  401446:	2b00      	cmp	r3, #0
  401448:	d1d3      	bne.n	4013f2 <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40144a:	4b1d      	ldr	r3, [pc, #116]	; (4014c0 <xTaskResumeAll+0x10c>)
  40144c:	681b      	ldr	r3, [r3, #0]
  40144e:	2b00      	cmp	r3, #0
  401450:	d00d      	beq.n	40146e <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401452:	e006      	b.n	401462 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  401454:	4b1b      	ldr	r3, [pc, #108]	; (4014c4 <xTaskResumeAll+0x110>)
  401456:	4798      	blx	r3
						--uxMissedTicks;
  401458:	4b19      	ldr	r3, [pc, #100]	; (4014c0 <xTaskResumeAll+0x10c>)
  40145a:	681b      	ldr	r3, [r3, #0]
  40145c:	3b01      	subs	r3, #1
  40145e:	4a18      	ldr	r2, [pc, #96]	; (4014c0 <xTaskResumeAll+0x10c>)
  401460:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401462:	4b17      	ldr	r3, [pc, #92]	; (4014c0 <xTaskResumeAll+0x10c>)
  401464:	681b      	ldr	r3, [r3, #0]
  401466:	2b00      	cmp	r3, #0
  401468:	d1f4      	bne.n	401454 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  40146a:	2301      	movs	r3, #1
  40146c:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  40146e:	683b      	ldr	r3, [r7, #0]
  401470:	2b01      	cmp	r3, #1
  401472:	d003      	beq.n	40147c <xTaskResumeAll+0xc8>
  401474:	4b14      	ldr	r3, [pc, #80]	; (4014c8 <xTaskResumeAll+0x114>)
  401476:	681b      	ldr	r3, [r3, #0]
  401478:	2b01      	cmp	r3, #1
  40147a:	d106      	bne.n	40148a <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  40147c:	2301      	movs	r3, #1
  40147e:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  401480:	4b11      	ldr	r3, [pc, #68]	; (4014c8 <xTaskResumeAll+0x114>)
  401482:	2200      	movs	r2, #0
  401484:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  401486:	4b11      	ldr	r3, [pc, #68]	; (4014cc <xTaskResumeAll+0x118>)
  401488:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  40148a:	4b11      	ldr	r3, [pc, #68]	; (4014d0 <xTaskResumeAll+0x11c>)
  40148c:	4798      	blx	r3

	return xAlreadyYielded;
  40148e:	687b      	ldr	r3, [r7, #4]
}
  401490:	4618      	mov	r0, r3
  401492:	370c      	adds	r7, #12
  401494:	46bd      	mov	sp, r7
  401496:	bd90      	pop	{r4, r7, pc}
  401498:	2040ab00 	.word	0x2040ab00
  40149c:	0040059d 	.word	0x0040059d
  4014a0:	00400555 	.word	0x00400555
  4014a4:	2040aaec 	.word	0x2040aaec
  4014a8:	2040aaac 	.word	0x2040aaac
  4014ac:	0040034d 	.word	0x0040034d
  4014b0:	2040aaf8 	.word	0x2040aaf8
  4014b4:	2040aa18 	.word	0x2040aa18
  4014b8:	0040028b 	.word	0x0040028b
  4014bc:	2040aa14 	.word	0x2040aa14
  4014c0:	2040ab04 	.word	0x2040ab04
  4014c4:	00401501 	.word	0x00401501
  4014c8:	2040ab08 	.word	0x2040ab08
  4014cc:	00400539 	.word	0x00400539
  4014d0:	00400575 	.word	0x00400575

004014d4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  4014d4:	b580      	push	{r7, lr}
  4014d6:	b082      	sub	sp, #8
  4014d8:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  4014da:	4b06      	ldr	r3, [pc, #24]	; (4014f4 <xTaskGetTickCount+0x20>)
  4014dc:	4798      	blx	r3
	{
		xTicks = xTickCount;
  4014de:	4b06      	ldr	r3, [pc, #24]	; (4014f8 <xTaskGetTickCount+0x24>)
  4014e0:	681b      	ldr	r3, [r3, #0]
  4014e2:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  4014e4:	4b05      	ldr	r3, [pc, #20]	; (4014fc <xTaskGetTickCount+0x28>)
  4014e6:	4798      	blx	r3

	return xTicks;
  4014e8:	687b      	ldr	r3, [r7, #4]
}
  4014ea:	4618      	mov	r0, r3
  4014ec:	3708      	adds	r7, #8
  4014ee:	46bd      	mov	sp, r7
  4014f0:	bd80      	pop	{r7, pc}
  4014f2:	bf00      	nop
  4014f4:	00400555 	.word	0x00400555
  4014f8:	2040aaf0 	.word	0x2040aaf0
  4014fc:	00400575 	.word	0x00400575

00401500 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  401500:	b580      	push	{r7, lr}
  401502:	b084      	sub	sp, #16
  401504:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401506:	4b45      	ldr	r3, [pc, #276]	; (40161c <vTaskIncrementTick+0x11c>)
  401508:	681b      	ldr	r3, [r3, #0]
  40150a:	2b00      	cmp	r3, #0
  40150c:	d17b      	bne.n	401606 <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  40150e:	4b44      	ldr	r3, [pc, #272]	; (401620 <vTaskIncrementTick+0x120>)
  401510:	681b      	ldr	r3, [r3, #0]
  401512:	3301      	adds	r3, #1
  401514:	4a42      	ldr	r2, [pc, #264]	; (401620 <vTaskIncrementTick+0x120>)
  401516:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  401518:	4b41      	ldr	r3, [pc, #260]	; (401620 <vTaskIncrementTick+0x120>)
  40151a:	681b      	ldr	r3, [r3, #0]
  40151c:	2b00      	cmp	r3, #0
  40151e:	d12a      	bne.n	401576 <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  401520:	4b40      	ldr	r3, [pc, #256]	; (401624 <vTaskIncrementTick+0x124>)
  401522:	681b      	ldr	r3, [r3, #0]
  401524:	681b      	ldr	r3, [r3, #0]
  401526:	2b00      	cmp	r3, #0
  401528:	d003      	beq.n	401532 <vTaskIncrementTick+0x32>
  40152a:	4b3f      	ldr	r3, [pc, #252]	; (401628 <vTaskIncrementTick+0x128>)
  40152c:	4798      	blx	r3
  40152e:	bf00      	nop
  401530:	e7fd      	b.n	40152e <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  401532:	4b3c      	ldr	r3, [pc, #240]	; (401624 <vTaskIncrementTick+0x124>)
  401534:	681b      	ldr	r3, [r3, #0]
  401536:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  401538:	4b3c      	ldr	r3, [pc, #240]	; (40162c <vTaskIncrementTick+0x12c>)
  40153a:	681b      	ldr	r3, [r3, #0]
  40153c:	4a39      	ldr	r2, [pc, #228]	; (401624 <vTaskIncrementTick+0x124>)
  40153e:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  401540:	4a3a      	ldr	r2, [pc, #232]	; (40162c <vTaskIncrementTick+0x12c>)
  401542:	68fb      	ldr	r3, [r7, #12]
  401544:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  401546:	4b3a      	ldr	r3, [pc, #232]	; (401630 <vTaskIncrementTick+0x130>)
  401548:	681b      	ldr	r3, [r3, #0]
  40154a:	3301      	adds	r3, #1
  40154c:	4a38      	ldr	r2, [pc, #224]	; (401630 <vTaskIncrementTick+0x130>)
  40154e:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401550:	4b34      	ldr	r3, [pc, #208]	; (401624 <vTaskIncrementTick+0x124>)
  401552:	681b      	ldr	r3, [r3, #0]
  401554:	681b      	ldr	r3, [r3, #0]
  401556:	2b00      	cmp	r3, #0
  401558:	d104      	bne.n	401564 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  40155a:	4b36      	ldr	r3, [pc, #216]	; (401634 <vTaskIncrementTick+0x134>)
  40155c:	f04f 32ff 	mov.w	r2, #4294967295
  401560:	601a      	str	r2, [r3, #0]
  401562:	e008      	b.n	401576 <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401564:	4b2f      	ldr	r3, [pc, #188]	; (401624 <vTaskIncrementTick+0x124>)
  401566:	681b      	ldr	r3, [r3, #0]
  401568:	68db      	ldr	r3, [r3, #12]
  40156a:	68db      	ldr	r3, [r3, #12]
  40156c:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40156e:	68bb      	ldr	r3, [r7, #8]
  401570:	685b      	ldr	r3, [r3, #4]
  401572:	4a30      	ldr	r2, [pc, #192]	; (401634 <vTaskIncrementTick+0x134>)
  401574:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  401576:	4b2a      	ldr	r3, [pc, #168]	; (401620 <vTaskIncrementTick+0x120>)
  401578:	681a      	ldr	r2, [r3, #0]
  40157a:	4b2e      	ldr	r3, [pc, #184]	; (401634 <vTaskIncrementTick+0x134>)
  40157c:	681b      	ldr	r3, [r3, #0]
  40157e:	429a      	cmp	r2, r3
  401580:	d347      	bcc.n	401612 <vTaskIncrementTick+0x112>
  401582:	4b28      	ldr	r3, [pc, #160]	; (401624 <vTaskIncrementTick+0x124>)
  401584:	681b      	ldr	r3, [r3, #0]
  401586:	681b      	ldr	r3, [r3, #0]
  401588:	2b00      	cmp	r3, #0
  40158a:	d104      	bne.n	401596 <vTaskIncrementTick+0x96>
  40158c:	4b29      	ldr	r3, [pc, #164]	; (401634 <vTaskIncrementTick+0x134>)
  40158e:	f04f 32ff 	mov.w	r2, #4294967295
  401592:	601a      	str	r2, [r3, #0]
  401594:	e03d      	b.n	401612 <vTaskIncrementTick+0x112>
  401596:	4b23      	ldr	r3, [pc, #140]	; (401624 <vTaskIncrementTick+0x124>)
  401598:	681b      	ldr	r3, [r3, #0]
  40159a:	68db      	ldr	r3, [r3, #12]
  40159c:	68db      	ldr	r3, [r3, #12]
  40159e:	60bb      	str	r3, [r7, #8]
  4015a0:	68bb      	ldr	r3, [r7, #8]
  4015a2:	685b      	ldr	r3, [r3, #4]
  4015a4:	607b      	str	r3, [r7, #4]
  4015a6:	4b1e      	ldr	r3, [pc, #120]	; (401620 <vTaskIncrementTick+0x120>)
  4015a8:	681a      	ldr	r2, [r3, #0]
  4015aa:	687b      	ldr	r3, [r7, #4]
  4015ac:	429a      	cmp	r2, r3
  4015ae:	d203      	bcs.n	4015b8 <vTaskIncrementTick+0xb8>
  4015b0:	4a20      	ldr	r2, [pc, #128]	; (401634 <vTaskIncrementTick+0x134>)
  4015b2:	687b      	ldr	r3, [r7, #4]
  4015b4:	6013      	str	r3, [r2, #0]
  4015b6:	e02c      	b.n	401612 <vTaskIncrementTick+0x112>
  4015b8:	68bb      	ldr	r3, [r7, #8]
  4015ba:	3304      	adds	r3, #4
  4015bc:	4618      	mov	r0, r3
  4015be:	4b1e      	ldr	r3, [pc, #120]	; (401638 <vTaskIncrementTick+0x138>)
  4015c0:	4798      	blx	r3
  4015c2:	68bb      	ldr	r3, [r7, #8]
  4015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4015c6:	2b00      	cmp	r3, #0
  4015c8:	d004      	beq.n	4015d4 <vTaskIncrementTick+0xd4>
  4015ca:	68bb      	ldr	r3, [r7, #8]
  4015cc:	3318      	adds	r3, #24
  4015ce:	4618      	mov	r0, r3
  4015d0:	4b19      	ldr	r3, [pc, #100]	; (401638 <vTaskIncrementTick+0x138>)
  4015d2:	4798      	blx	r3
  4015d4:	68bb      	ldr	r3, [r7, #8]
  4015d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015d8:	4b18      	ldr	r3, [pc, #96]	; (40163c <vTaskIncrementTick+0x13c>)
  4015da:	681b      	ldr	r3, [r3, #0]
  4015dc:	429a      	cmp	r2, r3
  4015de:	d903      	bls.n	4015e8 <vTaskIncrementTick+0xe8>
  4015e0:	68bb      	ldr	r3, [r7, #8]
  4015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015e4:	4a15      	ldr	r2, [pc, #84]	; (40163c <vTaskIncrementTick+0x13c>)
  4015e6:	6013      	str	r3, [r2, #0]
  4015e8:	68bb      	ldr	r3, [r7, #8]
  4015ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015ec:	4613      	mov	r3, r2
  4015ee:	009b      	lsls	r3, r3, #2
  4015f0:	4413      	add	r3, r2
  4015f2:	009b      	lsls	r3, r3, #2
  4015f4:	4a12      	ldr	r2, [pc, #72]	; (401640 <vTaskIncrementTick+0x140>)
  4015f6:	441a      	add	r2, r3
  4015f8:	68bb      	ldr	r3, [r7, #8]
  4015fa:	3304      	adds	r3, #4
  4015fc:	4619      	mov	r1, r3
  4015fe:	4610      	mov	r0, r2
  401600:	4b10      	ldr	r3, [pc, #64]	; (401644 <vTaskIncrementTick+0x144>)
  401602:	4798      	blx	r3
  401604:	e7bd      	b.n	401582 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  401606:	4b10      	ldr	r3, [pc, #64]	; (401648 <vTaskIncrementTick+0x148>)
  401608:	681b      	ldr	r3, [r3, #0]
  40160a:	3301      	adds	r3, #1
  40160c:	4a0e      	ldr	r2, [pc, #56]	; (401648 <vTaskIncrementTick+0x148>)
  40160e:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  401610:	e7ff      	b.n	401612 <vTaskIncrementTick+0x112>
  401612:	bf00      	nop
  401614:	3710      	adds	r7, #16
  401616:	46bd      	mov	sp, r7
  401618:	bd80      	pop	{r7, pc}
  40161a:	bf00      	nop
  40161c:	2040ab00 	.word	0x2040ab00
  401620:	2040aaf0 	.word	0x2040aaf0
  401624:	2040aaa4 	.word	0x2040aaa4
  401628:	0040059d 	.word	0x0040059d
  40162c:	2040aaa8 	.word	0x2040aaa8
  401630:	2040ab0c 	.word	0x2040ab0c
  401634:	20400008 	.word	0x20400008
  401638:	0040034d 	.word	0x0040034d
  40163c:	2040aaf8 	.word	0x2040aaf8
  401640:	2040aa18 	.word	0x2040aa18
  401644:	0040028b 	.word	0x0040028b
  401648:	2040ab04 	.word	0x2040ab04

0040164c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  40164c:	b580      	push	{r7, lr}
  40164e:	b082      	sub	sp, #8
  401650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  401652:	4b21      	ldr	r3, [pc, #132]	; (4016d8 <vTaskSwitchContext+0x8c>)
  401654:	681b      	ldr	r3, [r3, #0]
  401656:	2b00      	cmp	r3, #0
  401658:	d010      	beq.n	40167c <vTaskSwitchContext+0x30>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  40165a:	4b20      	ldr	r3, [pc, #128]	; (4016dc <vTaskSwitchContext+0x90>)
  40165c:	2201      	movs	r2, #1
  40165e:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  401660:	e035      	b.n	4016ce <vTaskSwitchContext+0x82>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401662:	4b1f      	ldr	r3, [pc, #124]	; (4016e0 <vTaskSwitchContext+0x94>)
  401664:	681b      	ldr	r3, [r3, #0]
  401666:	2b00      	cmp	r3, #0
  401668:	d103      	bne.n	401672 <vTaskSwitchContext+0x26>
  40166a:	4b1e      	ldr	r3, [pc, #120]	; (4016e4 <vTaskSwitchContext+0x98>)
  40166c:	4798      	blx	r3
  40166e:	bf00      	nop
  401670:	e7fd      	b.n	40166e <vTaskSwitchContext+0x22>
  401672:	4b1b      	ldr	r3, [pc, #108]	; (4016e0 <vTaskSwitchContext+0x94>)
  401674:	681b      	ldr	r3, [r3, #0]
  401676:	3b01      	subs	r3, #1
  401678:	4a19      	ldr	r2, [pc, #100]	; (4016e0 <vTaskSwitchContext+0x94>)
  40167a:	6013      	str	r3, [r2, #0]
  40167c:	4b18      	ldr	r3, [pc, #96]	; (4016e0 <vTaskSwitchContext+0x94>)
  40167e:	681a      	ldr	r2, [r3, #0]
  401680:	4919      	ldr	r1, [pc, #100]	; (4016e8 <vTaskSwitchContext+0x9c>)
  401682:	4613      	mov	r3, r2
  401684:	009b      	lsls	r3, r3, #2
  401686:	4413      	add	r3, r2
  401688:	009b      	lsls	r3, r3, #2
  40168a:	440b      	add	r3, r1
  40168c:	681b      	ldr	r3, [r3, #0]
  40168e:	2b00      	cmp	r3, #0
  401690:	d0e7      	beq.n	401662 <vTaskSwitchContext+0x16>
  401692:	4b13      	ldr	r3, [pc, #76]	; (4016e0 <vTaskSwitchContext+0x94>)
  401694:	681a      	ldr	r2, [r3, #0]
  401696:	4613      	mov	r3, r2
  401698:	009b      	lsls	r3, r3, #2
  40169a:	4413      	add	r3, r2
  40169c:	009b      	lsls	r3, r3, #2
  40169e:	4a12      	ldr	r2, [pc, #72]	; (4016e8 <vTaskSwitchContext+0x9c>)
  4016a0:	4413      	add	r3, r2
  4016a2:	607b      	str	r3, [r7, #4]
  4016a4:	687b      	ldr	r3, [r7, #4]
  4016a6:	685b      	ldr	r3, [r3, #4]
  4016a8:	685a      	ldr	r2, [r3, #4]
  4016aa:	687b      	ldr	r3, [r7, #4]
  4016ac:	605a      	str	r2, [r3, #4]
  4016ae:	687b      	ldr	r3, [r7, #4]
  4016b0:	685a      	ldr	r2, [r3, #4]
  4016b2:	687b      	ldr	r3, [r7, #4]
  4016b4:	3308      	adds	r3, #8
  4016b6:	429a      	cmp	r2, r3
  4016b8:	d104      	bne.n	4016c4 <vTaskSwitchContext+0x78>
  4016ba:	687b      	ldr	r3, [r7, #4]
  4016bc:	685b      	ldr	r3, [r3, #4]
  4016be:	685a      	ldr	r2, [r3, #4]
  4016c0:	687b      	ldr	r3, [r7, #4]
  4016c2:	605a      	str	r2, [r3, #4]
  4016c4:	687b      	ldr	r3, [r7, #4]
  4016c6:	685b      	ldr	r3, [r3, #4]
  4016c8:	68db      	ldr	r3, [r3, #12]
  4016ca:	4a08      	ldr	r2, [pc, #32]	; (4016ec <vTaskSwitchContext+0xa0>)
  4016cc:	6013      	str	r3, [r2, #0]
}
  4016ce:	bf00      	nop
  4016d0:	3708      	adds	r7, #8
  4016d2:	46bd      	mov	sp, r7
  4016d4:	bd80      	pop	{r7, pc}
  4016d6:	bf00      	nop
  4016d8:	2040ab00 	.word	0x2040ab00
  4016dc:	2040ab08 	.word	0x2040ab08
  4016e0:	2040aaf8 	.word	0x2040aaf8
  4016e4:	0040059d 	.word	0x0040059d
  4016e8:	2040aa18 	.word	0x2040aa18
  4016ec:	2040aa14 	.word	0x2040aa14

004016f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  4016f0:	b580      	push	{r7, lr}
  4016f2:	b084      	sub	sp, #16
  4016f4:	af00      	add	r7, sp, #0
  4016f6:	6078      	str	r0, [r7, #4]
  4016f8:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  4016fa:	687b      	ldr	r3, [r7, #4]
  4016fc:	2b00      	cmp	r3, #0
  4016fe:	d103      	bne.n	401708 <vTaskPlaceOnEventList+0x18>
  401700:	4b14      	ldr	r3, [pc, #80]	; (401754 <vTaskPlaceOnEventList+0x64>)
  401702:	4798      	blx	r3
  401704:	bf00      	nop
  401706:	e7fd      	b.n	401704 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401708:	4b13      	ldr	r3, [pc, #76]	; (401758 <vTaskPlaceOnEventList+0x68>)
  40170a:	681b      	ldr	r3, [r3, #0]
  40170c:	3318      	adds	r3, #24
  40170e:	4619      	mov	r1, r3
  401710:	6878      	ldr	r0, [r7, #4]
  401712:	4b12      	ldr	r3, [pc, #72]	; (40175c <vTaskPlaceOnEventList+0x6c>)
  401714:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401716:	4b10      	ldr	r3, [pc, #64]	; (401758 <vTaskPlaceOnEventList+0x68>)
  401718:	681b      	ldr	r3, [r3, #0]
  40171a:	3304      	adds	r3, #4
  40171c:	4618      	mov	r0, r3
  40171e:	4b10      	ldr	r3, [pc, #64]	; (401760 <vTaskPlaceOnEventList+0x70>)
  401720:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401722:	683b      	ldr	r3, [r7, #0]
  401724:	f1b3 3fff 	cmp.w	r3, #4294967295
  401728:	d107      	bne.n	40173a <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40172a:	4b0b      	ldr	r3, [pc, #44]	; (401758 <vTaskPlaceOnEventList+0x68>)
  40172c:	681b      	ldr	r3, [r3, #0]
  40172e:	3304      	adds	r3, #4
  401730:	4619      	mov	r1, r3
  401732:	480c      	ldr	r0, [pc, #48]	; (401764 <vTaskPlaceOnEventList+0x74>)
  401734:	4b0c      	ldr	r3, [pc, #48]	; (401768 <vTaskPlaceOnEventList+0x78>)
  401736:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  401738:	e007      	b.n	40174a <vTaskPlaceOnEventList+0x5a>
			xTimeToWake = xTickCount + xTicksToWait;
  40173a:	4b0c      	ldr	r3, [pc, #48]	; (40176c <vTaskPlaceOnEventList+0x7c>)
  40173c:	681a      	ldr	r2, [r3, #0]
  40173e:	683b      	ldr	r3, [r7, #0]
  401740:	4413      	add	r3, r2
  401742:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401744:	68f8      	ldr	r0, [r7, #12]
  401746:	4b0a      	ldr	r3, [pc, #40]	; (401770 <vTaskPlaceOnEventList+0x80>)
  401748:	4798      	blx	r3
}
  40174a:	bf00      	nop
  40174c:	3710      	adds	r7, #16
  40174e:	46bd      	mov	sp, r7
  401750:	bd80      	pop	{r7, pc}
  401752:	bf00      	nop
  401754:	0040059d 	.word	0x0040059d
  401758:	2040aa14 	.word	0x2040aa14
  40175c:	004002db 	.word	0x004002db
  401760:	0040034d 	.word	0x0040034d
  401764:	2040aad8 	.word	0x2040aad8
  401768:	0040028b 	.word	0x0040028b
  40176c:	2040aaf0 	.word	0x2040aaf0
  401770:	00401b4d 	.word	0x00401b4d

00401774 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  401774:	b580      	push	{r7, lr}
  401776:	b084      	sub	sp, #16
  401778:	af00      	add	r7, sp, #0
  40177a:	6078      	str	r0, [r7, #4]
  40177c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  40177e:	687b      	ldr	r3, [r7, #4]
  401780:	2b00      	cmp	r3, #0
  401782:	d103      	bne.n	40178c <vTaskPlaceOnEventListRestricted+0x18>
  401784:	4b0e      	ldr	r3, [pc, #56]	; (4017c0 <vTaskPlaceOnEventListRestricted+0x4c>)
  401786:	4798      	blx	r3
  401788:	bf00      	nop
  40178a:	e7fd      	b.n	401788 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  40178c:	4b0d      	ldr	r3, [pc, #52]	; (4017c4 <vTaskPlaceOnEventListRestricted+0x50>)
  40178e:	681b      	ldr	r3, [r3, #0]
  401790:	3318      	adds	r3, #24
  401792:	4619      	mov	r1, r3
  401794:	6878      	ldr	r0, [r7, #4]
  401796:	4b0c      	ldr	r3, [pc, #48]	; (4017c8 <vTaskPlaceOnEventListRestricted+0x54>)
  401798:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  40179a:	4b0a      	ldr	r3, [pc, #40]	; (4017c4 <vTaskPlaceOnEventListRestricted+0x50>)
  40179c:	681b      	ldr	r3, [r3, #0]
  40179e:	3304      	adds	r3, #4
  4017a0:	4618      	mov	r0, r3
  4017a2:	4b0a      	ldr	r3, [pc, #40]	; (4017cc <vTaskPlaceOnEventListRestricted+0x58>)
  4017a4:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  4017a6:	4b0a      	ldr	r3, [pc, #40]	; (4017d0 <vTaskPlaceOnEventListRestricted+0x5c>)
  4017a8:	681a      	ldr	r2, [r3, #0]
  4017aa:	683b      	ldr	r3, [r7, #0]
  4017ac:	4413      	add	r3, r2
  4017ae:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  4017b0:	68f8      	ldr	r0, [r7, #12]
  4017b2:	4b08      	ldr	r3, [pc, #32]	; (4017d4 <vTaskPlaceOnEventListRestricted+0x60>)
  4017b4:	4798      	blx	r3
	}
  4017b6:	bf00      	nop
  4017b8:	3710      	adds	r7, #16
  4017ba:	46bd      	mov	sp, r7
  4017bc:	bd80      	pop	{r7, pc}
  4017be:	bf00      	nop
  4017c0:	0040059d 	.word	0x0040059d
  4017c4:	2040aa14 	.word	0x2040aa14
  4017c8:	0040028b 	.word	0x0040028b
  4017cc:	0040034d 	.word	0x0040034d
  4017d0:	2040aaf0 	.word	0x2040aaf0
  4017d4:	00401b4d 	.word	0x00401b4d

004017d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  4017d8:	b580      	push	{r7, lr}
  4017da:	b084      	sub	sp, #16
  4017dc:	af00      	add	r7, sp, #0
  4017de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4017e0:	687b      	ldr	r3, [r7, #4]
  4017e2:	68db      	ldr	r3, [r3, #12]
  4017e4:	68db      	ldr	r3, [r3, #12]
  4017e6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  4017e8:	68bb      	ldr	r3, [r7, #8]
  4017ea:	2b00      	cmp	r3, #0
  4017ec:	d103      	bne.n	4017f6 <xTaskRemoveFromEventList+0x1e>
  4017ee:	4b21      	ldr	r3, [pc, #132]	; (401874 <xTaskRemoveFromEventList+0x9c>)
  4017f0:	4798      	blx	r3
  4017f2:	bf00      	nop
  4017f4:	e7fd      	b.n	4017f2 <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4017f6:	68bb      	ldr	r3, [r7, #8]
  4017f8:	3318      	adds	r3, #24
  4017fa:	4618      	mov	r0, r3
  4017fc:	4b1e      	ldr	r3, [pc, #120]	; (401878 <xTaskRemoveFromEventList+0xa0>)
  4017fe:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401800:	4b1e      	ldr	r3, [pc, #120]	; (40187c <xTaskRemoveFromEventList+0xa4>)
  401802:	681b      	ldr	r3, [r3, #0]
  401804:	2b00      	cmp	r3, #0
  401806:	d11d      	bne.n	401844 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401808:	68bb      	ldr	r3, [r7, #8]
  40180a:	3304      	adds	r3, #4
  40180c:	4618      	mov	r0, r3
  40180e:	4b1a      	ldr	r3, [pc, #104]	; (401878 <xTaskRemoveFromEventList+0xa0>)
  401810:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  401812:	68bb      	ldr	r3, [r7, #8]
  401814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401816:	4b1a      	ldr	r3, [pc, #104]	; (401880 <xTaskRemoveFromEventList+0xa8>)
  401818:	681b      	ldr	r3, [r3, #0]
  40181a:	429a      	cmp	r2, r3
  40181c:	d903      	bls.n	401826 <xTaskRemoveFromEventList+0x4e>
  40181e:	68bb      	ldr	r3, [r7, #8]
  401820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401822:	4a17      	ldr	r2, [pc, #92]	; (401880 <xTaskRemoveFromEventList+0xa8>)
  401824:	6013      	str	r3, [r2, #0]
  401826:	68bb      	ldr	r3, [r7, #8]
  401828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40182a:	4613      	mov	r3, r2
  40182c:	009b      	lsls	r3, r3, #2
  40182e:	4413      	add	r3, r2
  401830:	009b      	lsls	r3, r3, #2
  401832:	4a14      	ldr	r2, [pc, #80]	; (401884 <xTaskRemoveFromEventList+0xac>)
  401834:	441a      	add	r2, r3
  401836:	68bb      	ldr	r3, [r7, #8]
  401838:	3304      	adds	r3, #4
  40183a:	4619      	mov	r1, r3
  40183c:	4610      	mov	r0, r2
  40183e:	4b12      	ldr	r3, [pc, #72]	; (401888 <xTaskRemoveFromEventList+0xb0>)
  401840:	4798      	blx	r3
  401842:	e005      	b.n	401850 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401844:	68bb      	ldr	r3, [r7, #8]
  401846:	3318      	adds	r3, #24
  401848:	4619      	mov	r1, r3
  40184a:	4810      	ldr	r0, [pc, #64]	; (40188c <xTaskRemoveFromEventList+0xb4>)
  40184c:	4b0e      	ldr	r3, [pc, #56]	; (401888 <xTaskRemoveFromEventList+0xb0>)
  40184e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401850:	68bb      	ldr	r3, [r7, #8]
  401852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401854:	4b0e      	ldr	r3, [pc, #56]	; (401890 <xTaskRemoveFromEventList+0xb8>)
  401856:	681b      	ldr	r3, [r3, #0]
  401858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40185a:	429a      	cmp	r2, r3
  40185c:	d302      	bcc.n	401864 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  40185e:	2301      	movs	r3, #1
  401860:	60fb      	str	r3, [r7, #12]
  401862:	e001      	b.n	401868 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  401864:	2300      	movs	r3, #0
  401866:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  401868:	68fb      	ldr	r3, [r7, #12]
}
  40186a:	4618      	mov	r0, r3
  40186c:	3710      	adds	r7, #16
  40186e:	46bd      	mov	sp, r7
  401870:	bd80      	pop	{r7, pc}
  401872:	bf00      	nop
  401874:	0040059d 	.word	0x0040059d
  401878:	0040034d 	.word	0x0040034d
  40187c:	2040ab00 	.word	0x2040ab00
  401880:	2040aaf8 	.word	0x2040aaf8
  401884:	2040aa18 	.word	0x2040aa18
  401888:	0040028b 	.word	0x0040028b
  40188c:	2040aaac 	.word	0x2040aaac
  401890:	2040aa14 	.word	0x2040aa14

00401894 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  401894:	b580      	push	{r7, lr}
  401896:	b082      	sub	sp, #8
  401898:	af00      	add	r7, sp, #0
  40189a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  40189c:	687b      	ldr	r3, [r7, #4]
  40189e:	2b00      	cmp	r3, #0
  4018a0:	d103      	bne.n	4018aa <vTaskSetTimeOutState+0x16>
  4018a2:	4b08      	ldr	r3, [pc, #32]	; (4018c4 <vTaskSetTimeOutState+0x30>)
  4018a4:	4798      	blx	r3
  4018a6:	bf00      	nop
  4018a8:	e7fd      	b.n	4018a6 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4018aa:	4b07      	ldr	r3, [pc, #28]	; (4018c8 <vTaskSetTimeOutState+0x34>)
  4018ac:	681a      	ldr	r2, [r3, #0]
  4018ae:	687b      	ldr	r3, [r7, #4]
  4018b0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4018b2:	4b06      	ldr	r3, [pc, #24]	; (4018cc <vTaskSetTimeOutState+0x38>)
  4018b4:	681a      	ldr	r2, [r3, #0]
  4018b6:	687b      	ldr	r3, [r7, #4]
  4018b8:	605a      	str	r2, [r3, #4]
}
  4018ba:	bf00      	nop
  4018bc:	3708      	adds	r7, #8
  4018be:	46bd      	mov	sp, r7
  4018c0:	bd80      	pop	{r7, pc}
  4018c2:	bf00      	nop
  4018c4:	0040059d 	.word	0x0040059d
  4018c8:	2040ab0c 	.word	0x2040ab0c
  4018cc:	2040aaf0 	.word	0x2040aaf0

004018d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  4018d0:	b580      	push	{r7, lr}
  4018d2:	b084      	sub	sp, #16
  4018d4:	af00      	add	r7, sp, #0
  4018d6:	6078      	str	r0, [r7, #4]
  4018d8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  4018da:	687b      	ldr	r3, [r7, #4]
  4018dc:	2b00      	cmp	r3, #0
  4018de:	d103      	bne.n	4018e8 <xTaskCheckForTimeOut+0x18>
  4018e0:	4b22      	ldr	r3, [pc, #136]	; (40196c <xTaskCheckForTimeOut+0x9c>)
  4018e2:	4798      	blx	r3
  4018e4:	bf00      	nop
  4018e6:	e7fd      	b.n	4018e4 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  4018e8:	683b      	ldr	r3, [r7, #0]
  4018ea:	2b00      	cmp	r3, #0
  4018ec:	d103      	bne.n	4018f6 <xTaskCheckForTimeOut+0x26>
  4018ee:	4b1f      	ldr	r3, [pc, #124]	; (40196c <xTaskCheckForTimeOut+0x9c>)
  4018f0:	4798      	blx	r3
  4018f2:	bf00      	nop
  4018f4:	e7fd      	b.n	4018f2 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  4018f6:	4b1e      	ldr	r3, [pc, #120]	; (401970 <xTaskCheckForTimeOut+0xa0>)
  4018f8:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4018fa:	683b      	ldr	r3, [r7, #0]
  4018fc:	681b      	ldr	r3, [r3, #0]
  4018fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401902:	d102      	bne.n	40190a <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  401904:	2300      	movs	r3, #0
  401906:	60fb      	str	r3, [r7, #12]
  401908:	e029      	b.n	40195e <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  40190a:	687b      	ldr	r3, [r7, #4]
  40190c:	681a      	ldr	r2, [r3, #0]
  40190e:	4b19      	ldr	r3, [pc, #100]	; (401974 <xTaskCheckForTimeOut+0xa4>)
  401910:	681b      	ldr	r3, [r3, #0]
  401912:	429a      	cmp	r2, r3
  401914:	d008      	beq.n	401928 <xTaskCheckForTimeOut+0x58>
  401916:	687b      	ldr	r3, [r7, #4]
  401918:	685a      	ldr	r2, [r3, #4]
  40191a:	4b17      	ldr	r3, [pc, #92]	; (401978 <xTaskCheckForTimeOut+0xa8>)
  40191c:	681b      	ldr	r3, [r3, #0]
  40191e:	429a      	cmp	r2, r3
  401920:	d802      	bhi.n	401928 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401922:	2301      	movs	r3, #1
  401924:	60fb      	str	r3, [r7, #12]
  401926:	e01a      	b.n	40195e <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  401928:	4b13      	ldr	r3, [pc, #76]	; (401978 <xTaskCheckForTimeOut+0xa8>)
  40192a:	681a      	ldr	r2, [r3, #0]
  40192c:	687b      	ldr	r3, [r7, #4]
  40192e:	685b      	ldr	r3, [r3, #4]
  401930:	1ad2      	subs	r2, r2, r3
  401932:	683b      	ldr	r3, [r7, #0]
  401934:	681b      	ldr	r3, [r3, #0]
  401936:	429a      	cmp	r2, r3
  401938:	d20f      	bcs.n	40195a <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  40193a:	4b0f      	ldr	r3, [pc, #60]	; (401978 <xTaskCheckForTimeOut+0xa8>)
  40193c:	681a      	ldr	r2, [r3, #0]
  40193e:	687b      	ldr	r3, [r7, #4]
  401940:	685b      	ldr	r3, [r3, #4]
  401942:	1ad3      	subs	r3, r2, r3
  401944:	683a      	ldr	r2, [r7, #0]
  401946:	6812      	ldr	r2, [r2, #0]
  401948:	1ad2      	subs	r2, r2, r3
  40194a:	683b      	ldr	r3, [r7, #0]
  40194c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40194e:	6878      	ldr	r0, [r7, #4]
  401950:	4b0a      	ldr	r3, [pc, #40]	; (40197c <xTaskCheckForTimeOut+0xac>)
  401952:	4798      	blx	r3
			xReturn = pdFALSE;
  401954:	2300      	movs	r3, #0
  401956:	60fb      	str	r3, [r7, #12]
  401958:	e001      	b.n	40195e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  40195a:	2301      	movs	r3, #1
  40195c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  40195e:	4b08      	ldr	r3, [pc, #32]	; (401980 <xTaskCheckForTimeOut+0xb0>)
  401960:	4798      	blx	r3

	return xReturn;
  401962:	68fb      	ldr	r3, [r7, #12]
}
  401964:	4618      	mov	r0, r3
  401966:	3710      	adds	r7, #16
  401968:	46bd      	mov	sp, r7
  40196a:	bd80      	pop	{r7, pc}
  40196c:	0040059d 	.word	0x0040059d
  401970:	00400555 	.word	0x00400555
  401974:	2040ab0c 	.word	0x2040ab0c
  401978:	2040aaf0 	.word	0x2040aaf0
  40197c:	00401895 	.word	0x00401895
  401980:	00400575 	.word	0x00400575

00401984 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  401984:	b480      	push	{r7}
  401986:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  401988:	4b03      	ldr	r3, [pc, #12]	; (401998 <vTaskMissedYield+0x14>)
  40198a:	2201      	movs	r2, #1
  40198c:	601a      	str	r2, [r3, #0]
}
  40198e:	bf00      	nop
  401990:	46bd      	mov	sp, r7
  401992:	f85d 7b04 	ldr.w	r7, [sp], #4
  401996:	4770      	bx	lr
  401998:	2040ab08 	.word	0x2040ab08

0040199c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  40199c:	b580      	push	{r7, lr}
  40199e:	b082      	sub	sp, #8
  4019a0:	af00      	add	r7, sp, #0
  4019a2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  4019a4:	4b04      	ldr	r3, [pc, #16]	; (4019b8 <prvIdleTask+0x1c>)
  4019a6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  4019a8:	4b04      	ldr	r3, [pc, #16]	; (4019bc <prvIdleTask+0x20>)
  4019aa:	681b      	ldr	r3, [r3, #0]
  4019ac:	2b01      	cmp	r3, #1
  4019ae:	d9f9      	bls.n	4019a4 <prvIdleTask+0x8>
			{
				taskYIELD();
  4019b0:	4b03      	ldr	r3, [pc, #12]	; (4019c0 <prvIdleTask+0x24>)
  4019b2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
  4019b4:	e7f6      	b.n	4019a4 <prvIdleTask+0x8>
  4019b6:	bf00      	nop
  4019b8:	00401abd 	.word	0x00401abd
  4019bc:	2040aa18 	.word	0x2040aa18
  4019c0:	00400539 	.word	0x00400539

004019c4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  4019c4:	b580      	push	{r7, lr}
  4019c6:	b084      	sub	sp, #16
  4019c8:	af00      	add	r7, sp, #0
  4019ca:	60f8      	str	r0, [r7, #12]
  4019cc:	60b9      	str	r1, [r7, #8]
  4019ce:	607a      	str	r2, [r7, #4]
  4019d0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  4019d2:	68fb      	ldr	r3, [r7, #12]
  4019d4:	3334      	adds	r3, #52	; 0x34
  4019d6:	220a      	movs	r2, #10
  4019d8:	68b9      	ldr	r1, [r7, #8]
  4019da:	4618      	mov	r0, r3
  4019dc:	4b14      	ldr	r3, [pc, #80]	; (401a30 <prvInitialiseTCBVariables+0x6c>)
  4019de:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  4019e0:	68fb      	ldr	r3, [r7, #12]
  4019e2:	2200      	movs	r2, #0
  4019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  4019e8:	687b      	ldr	r3, [r7, #4]
  4019ea:	2b04      	cmp	r3, #4
  4019ec:	d901      	bls.n	4019f2 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  4019ee:	2304      	movs	r3, #4
  4019f0:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  4019f2:	68fb      	ldr	r3, [r7, #12]
  4019f4:	687a      	ldr	r2, [r7, #4]
  4019f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4019f8:	68fb      	ldr	r3, [r7, #12]
  4019fa:	687a      	ldr	r2, [r7, #4]
  4019fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4019fe:	68fb      	ldr	r3, [r7, #12]
  401a00:	3304      	adds	r3, #4
  401a02:	4618      	mov	r0, r3
  401a04:	4b0b      	ldr	r3, [pc, #44]	; (401a34 <prvInitialiseTCBVariables+0x70>)
  401a06:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401a08:	68fb      	ldr	r3, [r7, #12]
  401a0a:	3318      	adds	r3, #24
  401a0c:	4618      	mov	r0, r3
  401a0e:	4b09      	ldr	r3, [pc, #36]	; (401a34 <prvInitialiseTCBVariables+0x70>)
  401a10:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401a12:	68fb      	ldr	r3, [r7, #12]
  401a14:	68fa      	ldr	r2, [r7, #12]
  401a16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  401a18:	687b      	ldr	r3, [r7, #4]
  401a1a:	f1c3 0205 	rsb	r2, r3, #5
  401a1e:	68fb      	ldr	r3, [r7, #12]
  401a20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401a22:	68fb      	ldr	r3, [r7, #12]
  401a24:	68fa      	ldr	r2, [r7, #12]
  401a26:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  401a28:	bf00      	nop
  401a2a:	3710      	adds	r7, #16
  401a2c:	46bd      	mov	sp, r7
  401a2e:	bd80      	pop	{r7, pc}
  401a30:	0040641d 	.word	0x0040641d
  401a34:	00400271 	.word	0x00400271

00401a38 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  401a38:	b580      	push	{r7, lr}
  401a3a:	b082      	sub	sp, #8
  401a3c:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401a3e:	2300      	movs	r3, #0
  401a40:	607b      	str	r3, [r7, #4]
  401a42:	e00c      	b.n	401a5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  401a44:	687a      	ldr	r2, [r7, #4]
  401a46:	4613      	mov	r3, r2
  401a48:	009b      	lsls	r3, r3, #2
  401a4a:	4413      	add	r3, r2
  401a4c:	009b      	lsls	r3, r3, #2
  401a4e:	4a12      	ldr	r2, [pc, #72]	; (401a98 <prvInitialiseTaskLists+0x60>)
  401a50:	4413      	add	r3, r2
  401a52:	4618      	mov	r0, r3
  401a54:	4b11      	ldr	r3, [pc, #68]	; (401a9c <prvInitialiseTaskLists+0x64>)
  401a56:	4798      	blx	r3
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401a58:	687b      	ldr	r3, [r7, #4]
  401a5a:	3301      	adds	r3, #1
  401a5c:	607b      	str	r3, [r7, #4]
  401a5e:	687b      	ldr	r3, [r7, #4]
  401a60:	2b04      	cmp	r3, #4
  401a62:	d9ef      	bls.n	401a44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  401a64:	480e      	ldr	r0, [pc, #56]	; (401aa0 <prvInitialiseTaskLists+0x68>)
  401a66:	4b0d      	ldr	r3, [pc, #52]	; (401a9c <prvInitialiseTaskLists+0x64>)
  401a68:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  401a6a:	480e      	ldr	r0, [pc, #56]	; (401aa4 <prvInitialiseTaskLists+0x6c>)
  401a6c:	4b0b      	ldr	r3, [pc, #44]	; (401a9c <prvInitialiseTaskLists+0x64>)
  401a6e:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  401a70:	480d      	ldr	r0, [pc, #52]	; (401aa8 <prvInitialiseTaskLists+0x70>)
  401a72:	4b0a      	ldr	r3, [pc, #40]	; (401a9c <prvInitialiseTaskLists+0x64>)
  401a74:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  401a76:	480d      	ldr	r0, [pc, #52]	; (401aac <prvInitialiseTaskLists+0x74>)
  401a78:	4b08      	ldr	r3, [pc, #32]	; (401a9c <prvInitialiseTaskLists+0x64>)
  401a7a:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  401a7c:	480c      	ldr	r0, [pc, #48]	; (401ab0 <prvInitialiseTaskLists+0x78>)
  401a7e:	4b07      	ldr	r3, [pc, #28]	; (401a9c <prvInitialiseTaskLists+0x64>)
  401a80:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401a82:	4b0c      	ldr	r3, [pc, #48]	; (401ab4 <prvInitialiseTaskLists+0x7c>)
  401a84:	4a06      	ldr	r2, [pc, #24]	; (401aa0 <prvInitialiseTaskLists+0x68>)
  401a86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401a88:	4b0b      	ldr	r3, [pc, #44]	; (401ab8 <prvInitialiseTaskLists+0x80>)
  401a8a:	4a06      	ldr	r2, [pc, #24]	; (401aa4 <prvInitialiseTaskLists+0x6c>)
  401a8c:	601a      	str	r2, [r3, #0]
}
  401a8e:	bf00      	nop
  401a90:	3708      	adds	r7, #8
  401a92:	46bd      	mov	sp, r7
  401a94:	bd80      	pop	{r7, pc}
  401a96:	bf00      	nop
  401a98:	2040aa18 	.word	0x2040aa18
  401a9c:	00400231 	.word	0x00400231
  401aa0:	2040aa7c 	.word	0x2040aa7c
  401aa4:	2040aa90 	.word	0x2040aa90
  401aa8:	2040aaac 	.word	0x2040aaac
  401aac:	2040aac0 	.word	0x2040aac0
  401ab0:	2040aad8 	.word	0x2040aad8
  401ab4:	2040aaa4 	.word	0x2040aaa4
  401ab8:	2040aaa8 	.word	0x2040aaa8

00401abc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  401abc:	b580      	push	{r7, lr}
  401abe:	b082      	sub	sp, #8
  401ac0:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401ac2:	e028      	b.n	401b16 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  401ac4:	4b18      	ldr	r3, [pc, #96]	; (401b28 <prvCheckTasksWaitingTermination+0x6c>)
  401ac6:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401ac8:	4b18      	ldr	r3, [pc, #96]	; (401b2c <prvCheckTasksWaitingTermination+0x70>)
  401aca:	681b      	ldr	r3, [r3, #0]
  401acc:	2b00      	cmp	r3, #0
  401ace:	bf0c      	ite	eq
  401ad0:	2301      	moveq	r3, #1
  401ad2:	2300      	movne	r3, #0
  401ad4:	b2db      	uxtb	r3, r3
  401ad6:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  401ad8:	4b15      	ldr	r3, [pc, #84]	; (401b30 <prvCheckTasksWaitingTermination+0x74>)
  401ada:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  401adc:	687b      	ldr	r3, [r7, #4]
  401ade:	2b00      	cmp	r3, #0
  401ae0:	d119      	bne.n	401b16 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  401ae2:	4b14      	ldr	r3, [pc, #80]	; (401b34 <prvCheckTasksWaitingTermination+0x78>)
  401ae4:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  401ae6:	4b11      	ldr	r3, [pc, #68]	; (401b2c <prvCheckTasksWaitingTermination+0x70>)
  401ae8:	68db      	ldr	r3, [r3, #12]
  401aea:	68db      	ldr	r3, [r3, #12]
  401aec:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401aee:	683b      	ldr	r3, [r7, #0]
  401af0:	3304      	adds	r3, #4
  401af2:	4618      	mov	r0, r3
  401af4:	4b10      	ldr	r3, [pc, #64]	; (401b38 <prvCheckTasksWaitingTermination+0x7c>)
  401af6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401af8:	4b10      	ldr	r3, [pc, #64]	; (401b3c <prvCheckTasksWaitingTermination+0x80>)
  401afa:	681b      	ldr	r3, [r3, #0]
  401afc:	3b01      	subs	r3, #1
  401afe:	4a0f      	ldr	r2, [pc, #60]	; (401b3c <prvCheckTasksWaitingTermination+0x80>)
  401b00:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401b02:	4b0f      	ldr	r3, [pc, #60]	; (401b40 <prvCheckTasksWaitingTermination+0x84>)
  401b04:	681b      	ldr	r3, [r3, #0]
  401b06:	3b01      	subs	r3, #1
  401b08:	4a0d      	ldr	r2, [pc, #52]	; (401b40 <prvCheckTasksWaitingTermination+0x84>)
  401b0a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  401b0c:	4b0d      	ldr	r3, [pc, #52]	; (401b44 <prvCheckTasksWaitingTermination+0x88>)
  401b0e:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  401b10:	6838      	ldr	r0, [r7, #0]
  401b12:	4b0d      	ldr	r3, [pc, #52]	; (401b48 <prvCheckTasksWaitingTermination+0x8c>)
  401b14:	4798      	blx	r3
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401b16:	4b0a      	ldr	r3, [pc, #40]	; (401b40 <prvCheckTasksWaitingTermination+0x84>)
  401b18:	681b      	ldr	r3, [r3, #0]
  401b1a:	2b00      	cmp	r3, #0
  401b1c:	d1d2      	bne.n	401ac4 <prvCheckTasksWaitingTermination+0x8>
			}
		}
	}
	#endif
}
  401b1e:	bf00      	nop
  401b20:	3708      	adds	r7, #8
  401b22:	46bd      	mov	sp, r7
  401b24:	bd80      	pop	{r7, pc}
  401b26:	bf00      	nop
  401b28:	00401399 	.word	0x00401399
  401b2c:	2040aac0 	.word	0x2040aac0
  401b30:	004013b5 	.word	0x004013b5
  401b34:	00400555 	.word	0x00400555
  401b38:	0040034d 	.word	0x0040034d
  401b3c:	2040aaec 	.word	0x2040aaec
  401b40:	2040aad4 	.word	0x2040aad4
  401b44:	00400575 	.word	0x00400575
  401b48:	00401c2d 	.word	0x00401c2d

00401b4c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  401b4c:	b580      	push	{r7, lr}
  401b4e:	b082      	sub	sp, #8
  401b50:	af00      	add	r7, sp, #0
  401b52:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401b54:	4b13      	ldr	r3, [pc, #76]	; (401ba4 <prvAddCurrentTaskToDelayedList+0x58>)
  401b56:	681b      	ldr	r3, [r3, #0]
  401b58:	687a      	ldr	r2, [r7, #4]
  401b5a:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  401b5c:	4b12      	ldr	r3, [pc, #72]	; (401ba8 <prvAddCurrentTaskToDelayedList+0x5c>)
  401b5e:	681b      	ldr	r3, [r3, #0]
  401b60:	687a      	ldr	r2, [r7, #4]
  401b62:	429a      	cmp	r2, r3
  401b64:	d209      	bcs.n	401b7a <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401b66:	4b11      	ldr	r3, [pc, #68]	; (401bac <prvAddCurrentTaskToDelayedList+0x60>)
  401b68:	681a      	ldr	r2, [r3, #0]
  401b6a:	4b0e      	ldr	r3, [pc, #56]	; (401ba4 <prvAddCurrentTaskToDelayedList+0x58>)
  401b6c:	681b      	ldr	r3, [r3, #0]
  401b6e:	3304      	adds	r3, #4
  401b70:	4619      	mov	r1, r3
  401b72:	4610      	mov	r0, r2
  401b74:	4b0e      	ldr	r3, [pc, #56]	; (401bb0 <prvAddCurrentTaskToDelayedList+0x64>)
  401b76:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  401b78:	e010      	b.n	401b9c <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401b7a:	4b0e      	ldr	r3, [pc, #56]	; (401bb4 <prvAddCurrentTaskToDelayedList+0x68>)
  401b7c:	681a      	ldr	r2, [r3, #0]
  401b7e:	4b09      	ldr	r3, [pc, #36]	; (401ba4 <prvAddCurrentTaskToDelayedList+0x58>)
  401b80:	681b      	ldr	r3, [r3, #0]
  401b82:	3304      	adds	r3, #4
  401b84:	4619      	mov	r1, r3
  401b86:	4610      	mov	r0, r2
  401b88:	4b09      	ldr	r3, [pc, #36]	; (401bb0 <prvAddCurrentTaskToDelayedList+0x64>)
  401b8a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401b8c:	4b0a      	ldr	r3, [pc, #40]	; (401bb8 <prvAddCurrentTaskToDelayedList+0x6c>)
  401b8e:	681b      	ldr	r3, [r3, #0]
  401b90:	687a      	ldr	r2, [r7, #4]
  401b92:	429a      	cmp	r2, r3
  401b94:	d202      	bcs.n	401b9c <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
  401b96:	4a08      	ldr	r2, [pc, #32]	; (401bb8 <prvAddCurrentTaskToDelayedList+0x6c>)
  401b98:	687b      	ldr	r3, [r7, #4]
  401b9a:	6013      	str	r3, [r2, #0]
}
  401b9c:	bf00      	nop
  401b9e:	3708      	adds	r7, #8
  401ba0:	46bd      	mov	sp, r7
  401ba2:	bd80      	pop	{r7, pc}
  401ba4:	2040aa14 	.word	0x2040aa14
  401ba8:	2040aaf0 	.word	0x2040aaf0
  401bac:	2040aaa8 	.word	0x2040aaa8
  401bb0:	004002db 	.word	0x004002db
  401bb4:	2040aaa4 	.word	0x2040aaa4
  401bb8:	20400008 	.word	0x20400008

00401bbc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  401bbc:	b580      	push	{r7, lr}
  401bbe:	b084      	sub	sp, #16
  401bc0:	af00      	add	r7, sp, #0
  401bc2:	4603      	mov	r3, r0
  401bc4:	6039      	str	r1, [r7, #0]
  401bc6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  401bc8:	204c      	movs	r0, #76	; 0x4c
  401bca:	4b15      	ldr	r3, [pc, #84]	; (401c20 <prvAllocateTCBAndStack+0x64>)
  401bcc:	4798      	blx	r3
  401bce:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  401bd0:	68fb      	ldr	r3, [r7, #12]
  401bd2:	2b00      	cmp	r3, #0
  401bd4:	d01e      	beq.n	401c14 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  401bd6:	683b      	ldr	r3, [r7, #0]
  401bd8:	2b00      	cmp	r3, #0
  401bda:	d106      	bne.n	401bea <prvAllocateTCBAndStack+0x2e>
  401bdc:	88fb      	ldrh	r3, [r7, #6]
  401bde:	009b      	lsls	r3, r3, #2
  401be0:	4618      	mov	r0, r3
  401be2:	4b0f      	ldr	r3, [pc, #60]	; (401c20 <prvAllocateTCBAndStack+0x64>)
  401be4:	4798      	blx	r3
  401be6:	4603      	mov	r3, r0
  401be8:	e000      	b.n	401bec <prvAllocateTCBAndStack+0x30>
  401bea:	683b      	ldr	r3, [r7, #0]
  401bec:	68fa      	ldr	r2, [r7, #12]
  401bee:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  401bf0:	68fb      	ldr	r3, [r7, #12]
  401bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bf4:	2b00      	cmp	r3, #0
  401bf6:	d105      	bne.n	401c04 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  401bf8:	68f8      	ldr	r0, [r7, #12]
  401bfa:	4b0a      	ldr	r3, [pc, #40]	; (401c24 <prvAllocateTCBAndStack+0x68>)
  401bfc:	4798      	blx	r3
			pxNewTCB = NULL;
  401bfe:	2300      	movs	r3, #0
  401c00:	60fb      	str	r3, [r7, #12]
  401c02:	e007      	b.n	401c14 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  401c04:	68fb      	ldr	r3, [r7, #12]
  401c06:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401c08:	88fb      	ldrh	r3, [r7, #6]
  401c0a:	009b      	lsls	r3, r3, #2
  401c0c:	461a      	mov	r2, r3
  401c0e:	21a5      	movs	r1, #165	; 0xa5
  401c10:	4b05      	ldr	r3, [pc, #20]	; (401c28 <prvAllocateTCBAndStack+0x6c>)
  401c12:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  401c14:	68fb      	ldr	r3, [r7, #12]
}
  401c16:	4618      	mov	r0, r3
  401c18:	3710      	adds	r7, #16
  401c1a:	46bd      	mov	sp, r7
  401c1c:	bd80      	pop	{r7, pc}
  401c1e:	bf00      	nop
  401c20:	00400685 	.word	0x00400685
  401c24:	00400791 	.word	0x00400791
  401c28:	00406039 	.word	0x00406039

00401c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  401c2c:	b580      	push	{r7, lr}
  401c2e:	b082      	sub	sp, #8
  401c30:	af00      	add	r7, sp, #0
  401c32:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401c34:	687b      	ldr	r3, [r7, #4]
  401c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c38:	4618      	mov	r0, r3
  401c3a:	4b04      	ldr	r3, [pc, #16]	; (401c4c <prvDeleteTCB+0x20>)
  401c3c:	4798      	blx	r3
		vPortFree( pxTCB );
  401c3e:	6878      	ldr	r0, [r7, #4]
  401c40:	4b02      	ldr	r3, [pc, #8]	; (401c4c <prvDeleteTCB+0x20>)
  401c42:	4798      	blx	r3
	}
  401c44:	bf00      	nop
  401c46:	3708      	adds	r7, #8
  401c48:	46bd      	mov	sp, r7
  401c4a:	bd80      	pop	{r7, pc}
  401c4c:	00400791 	.word	0x00400791

00401c50 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  401c50:	b480      	push	{r7}
  401c52:	b083      	sub	sp, #12
  401c54:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401c56:	4b05      	ldr	r3, [pc, #20]	; (401c6c <xTaskGetCurrentTaskHandle+0x1c>)
  401c58:	681b      	ldr	r3, [r3, #0]
  401c5a:	607b      	str	r3, [r7, #4]

		return xReturn;
  401c5c:	687b      	ldr	r3, [r7, #4]
	}
  401c5e:	4618      	mov	r0, r3
  401c60:	370c      	adds	r7, #12
  401c62:	46bd      	mov	sp, r7
  401c64:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c68:	4770      	bx	lr
  401c6a:	bf00      	nop
  401c6c:	2040aa14 	.word	0x2040aa14

00401c70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  401c70:	b480      	push	{r7}
  401c72:	b083      	sub	sp, #12
  401c74:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  401c76:	4b0b      	ldr	r3, [pc, #44]	; (401ca4 <xTaskGetSchedulerState+0x34>)
  401c78:	681b      	ldr	r3, [r3, #0]
  401c7a:	2b00      	cmp	r3, #0
  401c7c:	d102      	bne.n	401c84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401c7e:	2300      	movs	r3, #0
  401c80:	607b      	str	r3, [r7, #4]
  401c82:	e008      	b.n	401c96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401c84:	4b08      	ldr	r3, [pc, #32]	; (401ca8 <xTaskGetSchedulerState+0x38>)
  401c86:	681b      	ldr	r3, [r3, #0]
  401c88:	2b00      	cmp	r3, #0
  401c8a:	d102      	bne.n	401c92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  401c8c:	2301      	movs	r3, #1
  401c8e:	607b      	str	r3, [r7, #4]
  401c90:	e001      	b.n	401c96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401c92:	2302      	movs	r3, #2
  401c94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  401c96:	687b      	ldr	r3, [r7, #4]
	}
  401c98:	4618      	mov	r0, r3
  401c9a:	370c      	adds	r7, #12
  401c9c:	46bd      	mov	sp, r7
  401c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ca2:	4770      	bx	lr
  401ca4:	2040aafc 	.word	0x2040aafc
  401ca8:	2040ab00 	.word	0x2040ab00

00401cac <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  401cac:	b580      	push	{r7, lr}
  401cae:	b084      	sub	sp, #16
  401cb0:	af00      	add	r7, sp, #0
  401cb2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401cb4:	687b      	ldr	r3, [r7, #4]
  401cb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401cb8:	687b      	ldr	r3, [r7, #4]
  401cba:	2b00      	cmp	r3, #0
  401cbc:	d041      	beq.n	401d42 <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401cbe:	68fb      	ldr	r3, [r7, #12]
  401cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401cc2:	4b22      	ldr	r3, [pc, #136]	; (401d4c <vTaskPriorityInherit+0xa0>)
  401cc4:	681b      	ldr	r3, [r3, #0]
  401cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401cc8:	429a      	cmp	r2, r3
  401cca:	d23a      	bcs.n	401d42 <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  401ccc:	4b1f      	ldr	r3, [pc, #124]	; (401d4c <vTaskPriorityInherit+0xa0>)
  401cce:	681b      	ldr	r3, [r3, #0]
  401cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401cd2:	f1c3 0205 	rsb	r2, r3, #5
  401cd6:	68fb      	ldr	r3, [r7, #12]
  401cd8:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401cda:	68fb      	ldr	r3, [r7, #12]
  401cdc:	6959      	ldr	r1, [r3, #20]
  401cde:	68fb      	ldr	r3, [r7, #12]
  401ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401ce2:	4613      	mov	r3, r2
  401ce4:	009b      	lsls	r3, r3, #2
  401ce6:	4413      	add	r3, r2
  401ce8:	009b      	lsls	r3, r3, #2
  401cea:	4a19      	ldr	r2, [pc, #100]	; (401d50 <vTaskPriorityInherit+0xa4>)
  401cec:	4413      	add	r3, r2
  401cee:	4299      	cmp	r1, r3
  401cf0:	d122      	bne.n	401d38 <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401cf2:	68fb      	ldr	r3, [r7, #12]
  401cf4:	3304      	adds	r3, #4
  401cf6:	4618      	mov	r0, r3
  401cf8:	4b16      	ldr	r3, [pc, #88]	; (401d54 <vTaskPriorityInherit+0xa8>)
  401cfa:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401cfc:	4b13      	ldr	r3, [pc, #76]	; (401d4c <vTaskPriorityInherit+0xa0>)
  401cfe:	681b      	ldr	r3, [r3, #0]
  401d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d02:	68fb      	ldr	r3, [r7, #12]
  401d04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  401d06:	68fb      	ldr	r3, [r7, #12]
  401d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d0a:	4b13      	ldr	r3, [pc, #76]	; (401d58 <vTaskPriorityInherit+0xac>)
  401d0c:	681b      	ldr	r3, [r3, #0]
  401d0e:	429a      	cmp	r2, r3
  401d10:	d903      	bls.n	401d1a <vTaskPriorityInherit+0x6e>
  401d12:	68fb      	ldr	r3, [r7, #12]
  401d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d16:	4a10      	ldr	r2, [pc, #64]	; (401d58 <vTaskPriorityInherit+0xac>)
  401d18:	6013      	str	r3, [r2, #0]
  401d1a:	68fb      	ldr	r3, [r7, #12]
  401d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d1e:	4613      	mov	r3, r2
  401d20:	009b      	lsls	r3, r3, #2
  401d22:	4413      	add	r3, r2
  401d24:	009b      	lsls	r3, r3, #2
  401d26:	4a0a      	ldr	r2, [pc, #40]	; (401d50 <vTaskPriorityInherit+0xa4>)
  401d28:	441a      	add	r2, r3
  401d2a:	68fb      	ldr	r3, [r7, #12]
  401d2c:	3304      	adds	r3, #4
  401d2e:	4619      	mov	r1, r3
  401d30:	4610      	mov	r0, r2
  401d32:	4b0a      	ldr	r3, [pc, #40]	; (401d5c <vTaskPriorityInherit+0xb0>)
  401d34:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  401d36:	e004      	b.n	401d42 <vTaskPriorityInherit+0x96>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401d38:	4b04      	ldr	r3, [pc, #16]	; (401d4c <vTaskPriorityInherit+0xa0>)
  401d3a:	681b      	ldr	r3, [r3, #0]
  401d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d3e:	68fb      	ldr	r3, [r7, #12]
  401d40:	62da      	str	r2, [r3, #44]	; 0x2c
	}
  401d42:	bf00      	nop
  401d44:	3710      	adds	r7, #16
  401d46:	46bd      	mov	sp, r7
  401d48:	bd80      	pop	{r7, pc}
  401d4a:	bf00      	nop
  401d4c:	2040aa14 	.word	0x2040aa14
  401d50:	2040aa18 	.word	0x2040aa18
  401d54:	0040034d 	.word	0x0040034d
  401d58:	2040aaf8 	.word	0x2040aaf8
  401d5c:	0040028b 	.word	0x0040028b

00401d60 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  401d60:	b580      	push	{r7, lr}
  401d62:	b084      	sub	sp, #16
  401d64:	af00      	add	r7, sp, #0
  401d66:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401d68:	687b      	ldr	r3, [r7, #4]
  401d6a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  401d6c:	687b      	ldr	r3, [r7, #4]
  401d6e:	2b00      	cmp	r3, #0
  401d70:	d02c      	beq.n	401dcc <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401d72:	68fb      	ldr	r3, [r7, #12]
  401d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d76:	68fb      	ldr	r3, [r7, #12]
  401d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401d7a:	429a      	cmp	r2, r3
  401d7c:	d026      	beq.n	401dcc <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401d7e:	68fb      	ldr	r3, [r7, #12]
  401d80:	3304      	adds	r3, #4
  401d82:	4618      	mov	r0, r3
  401d84:	4b13      	ldr	r3, [pc, #76]	; (401dd4 <vTaskPriorityDisinherit+0x74>)
  401d86:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  401d88:	68fb      	ldr	r3, [r7, #12]
  401d8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  401d8c:	68fb      	ldr	r3, [r7, #12]
  401d8e:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  401d90:	68fb      	ldr	r3, [r7, #12]
  401d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d94:	f1c3 0205 	rsb	r2, r3, #5
  401d98:	68fb      	ldr	r3, [r7, #12]
  401d9a:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  401d9c:	68fb      	ldr	r3, [r7, #12]
  401d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401da0:	4b0d      	ldr	r3, [pc, #52]	; (401dd8 <vTaskPriorityDisinherit+0x78>)
  401da2:	681b      	ldr	r3, [r3, #0]
  401da4:	429a      	cmp	r2, r3
  401da6:	d903      	bls.n	401db0 <vTaskPriorityDisinherit+0x50>
  401da8:	68fb      	ldr	r3, [r7, #12]
  401daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401dac:	4a0a      	ldr	r2, [pc, #40]	; (401dd8 <vTaskPriorityDisinherit+0x78>)
  401dae:	6013      	str	r3, [r2, #0]
  401db0:	68fb      	ldr	r3, [r7, #12]
  401db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401db4:	4613      	mov	r3, r2
  401db6:	009b      	lsls	r3, r3, #2
  401db8:	4413      	add	r3, r2
  401dba:	009b      	lsls	r3, r3, #2
  401dbc:	4a07      	ldr	r2, [pc, #28]	; (401ddc <vTaskPriorityDisinherit+0x7c>)
  401dbe:	441a      	add	r2, r3
  401dc0:	68fb      	ldr	r3, [r7, #12]
  401dc2:	3304      	adds	r3, #4
  401dc4:	4619      	mov	r1, r3
  401dc6:	4610      	mov	r0, r2
  401dc8:	4b05      	ldr	r3, [pc, #20]	; (401de0 <vTaskPriorityDisinherit+0x80>)
  401dca:	4798      	blx	r3
			}
		}
	}
  401dcc:	bf00      	nop
  401dce:	3710      	adds	r7, #16
  401dd0:	46bd      	mov	sp, r7
  401dd2:	bd80      	pop	{r7, pc}
  401dd4:	0040034d 	.word	0x0040034d
  401dd8:	2040aaf8 	.word	0x2040aaf8
  401ddc:	2040aa18 	.word	0x2040aa18
  401de0:	0040028b 	.word	0x0040028b

00401de4 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  401de4:	b590      	push	{r4, r7, lr}
  401de6:	b087      	sub	sp, #28
  401de8:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  401dea:	2300      	movs	r3, #0
  401dec:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  401dee:	4b11      	ldr	r3, [pc, #68]	; (401e34 <xTimerCreateTimerTask+0x50>)
  401df0:	4798      	blx	r3

	if( xTimerQueue != NULL )
  401df2:	4b11      	ldr	r3, [pc, #68]	; (401e38 <xTimerCreateTimerTask+0x54>)
  401df4:	681b      	ldr	r3, [r3, #0]
  401df6:	2b00      	cmp	r3, #0
  401df8:	d00f      	beq.n	401e1a <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401dfa:	2300      	movs	r3, #0
  401dfc:	9303      	str	r3, [sp, #12]
  401dfe:	2300      	movs	r3, #0
  401e00:	9302      	str	r3, [sp, #8]
  401e02:	2300      	movs	r3, #0
  401e04:	9301      	str	r3, [sp, #4]
  401e06:	2304      	movs	r3, #4
  401e08:	9300      	str	r3, [sp, #0]
  401e0a:	2300      	movs	r3, #0
  401e0c:	f44f 7282 	mov.w	r2, #260	; 0x104
  401e10:	490a      	ldr	r1, [pc, #40]	; (401e3c <xTimerCreateTimerTask+0x58>)
  401e12:	480b      	ldr	r0, [pc, #44]	; (401e40 <xTimerCreateTimerTask+0x5c>)
  401e14:	4c0b      	ldr	r4, [pc, #44]	; (401e44 <xTimerCreateTimerTask+0x60>)
  401e16:	47a0      	blx	r4
  401e18:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  401e1a:	687b      	ldr	r3, [r7, #4]
  401e1c:	2b00      	cmp	r3, #0
  401e1e:	d103      	bne.n	401e28 <xTimerCreateTimerTask+0x44>
  401e20:	4b09      	ldr	r3, [pc, #36]	; (401e48 <xTimerCreateTimerTask+0x64>)
  401e22:	4798      	blx	r3
  401e24:	bf00      	nop
  401e26:	e7fd      	b.n	401e24 <xTimerCreateTimerTask+0x40>
	return xReturn;
  401e28:	687b      	ldr	r3, [r7, #4]
}
  401e2a:	4618      	mov	r0, r3
  401e2c:	370c      	adds	r7, #12
  401e2e:	46bd      	mov	sp, r7
  401e30:	bd90      	pop	{r4, r7, pc}
  401e32:	bf00      	nop
  401e34:	00402301 	.word	0x00402301
  401e38:	2040ab44 	.word	0x2040ab44
  401e3c:	00408f44 	.word	0x00408f44
  401e40:	00401f5d 	.word	0x00401f5d
  401e44:	00401109 	.word	0x00401109
  401e48:	0040059d 	.word	0x0040059d

00401e4c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  401e4c:	b590      	push	{r4, r7, lr}
  401e4e:	b089      	sub	sp, #36	; 0x24
  401e50:	af00      	add	r7, sp, #0
  401e52:	60f8      	str	r0, [r7, #12]
  401e54:	60b9      	str	r1, [r7, #8]
  401e56:	607a      	str	r2, [r7, #4]
  401e58:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  401e5a:	2300      	movs	r3, #0
  401e5c:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401e5e:	4b1a      	ldr	r3, [pc, #104]	; (401ec8 <xTimerGenericCommand+0x7c>)
  401e60:	681b      	ldr	r3, [r3, #0]
  401e62:	2b00      	cmp	r3, #0
  401e64:	d02a      	beq.n	401ebc <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  401e66:	68bb      	ldr	r3, [r7, #8]
  401e68:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  401e6a:	687b      	ldr	r3, [r7, #4]
  401e6c:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  401e6e:	68fb      	ldr	r3, [r7, #12]
  401e70:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  401e72:	683b      	ldr	r3, [r7, #0]
  401e74:	2b00      	cmp	r3, #0
  401e76:	d118      	bne.n	401eaa <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401e78:	4b14      	ldr	r3, [pc, #80]	; (401ecc <xTimerGenericCommand+0x80>)
  401e7a:	4798      	blx	r3
  401e7c:	4603      	mov	r3, r0
  401e7e:	2b01      	cmp	r3, #1
  401e80:	d109      	bne.n	401e96 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  401e82:	4b11      	ldr	r3, [pc, #68]	; (401ec8 <xTimerGenericCommand+0x7c>)
  401e84:	6818      	ldr	r0, [r3, #0]
  401e86:	f107 0110 	add.w	r1, r7, #16
  401e8a:	2300      	movs	r3, #0
  401e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401e8e:	4c10      	ldr	r4, [pc, #64]	; (401ed0 <xTimerGenericCommand+0x84>)
  401e90:	47a0      	blx	r4
  401e92:	61f8      	str	r0, [r7, #28]
  401e94:	e012      	b.n	401ebc <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401e96:	4b0c      	ldr	r3, [pc, #48]	; (401ec8 <xTimerGenericCommand+0x7c>)
  401e98:	6818      	ldr	r0, [r3, #0]
  401e9a:	f107 0110 	add.w	r1, r7, #16
  401e9e:	2300      	movs	r3, #0
  401ea0:	2200      	movs	r2, #0
  401ea2:	4c0b      	ldr	r4, [pc, #44]	; (401ed0 <xTimerGenericCommand+0x84>)
  401ea4:	47a0      	blx	r4
  401ea6:	61f8      	str	r0, [r7, #28]
  401ea8:	e008      	b.n	401ebc <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401eaa:	4b07      	ldr	r3, [pc, #28]	; (401ec8 <xTimerGenericCommand+0x7c>)
  401eac:	6818      	ldr	r0, [r3, #0]
  401eae:	f107 0110 	add.w	r1, r7, #16
  401eb2:	2300      	movs	r3, #0
  401eb4:	683a      	ldr	r2, [r7, #0]
  401eb6:	4c07      	ldr	r4, [pc, #28]	; (401ed4 <xTimerGenericCommand+0x88>)
  401eb8:	47a0      	blx	r4
  401eba:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  401ebc:	69fb      	ldr	r3, [r7, #28]
}
  401ebe:	4618      	mov	r0, r3
  401ec0:	3724      	adds	r7, #36	; 0x24
  401ec2:	46bd      	mov	sp, r7
  401ec4:	bd90      	pop	{r4, r7, pc}
  401ec6:	bf00      	nop
  401ec8:	2040ab44 	.word	0x2040ab44
  401ecc:	00401c71 	.word	0x00401c71
  401ed0:	00400a89 	.word	0x00400a89
  401ed4:	00400bf1 	.word	0x00400bf1

00401ed8 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  401ed8:	b590      	push	{r4, r7, lr}
  401eda:	b087      	sub	sp, #28
  401edc:	af02      	add	r7, sp, #8
  401ede:	6078      	str	r0, [r7, #4]
  401ee0:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401ee2:	4b19      	ldr	r3, [pc, #100]	; (401f48 <prvProcessExpiredTimer+0x70>)
  401ee4:	681b      	ldr	r3, [r3, #0]
  401ee6:	68db      	ldr	r3, [r3, #12]
  401ee8:	68db      	ldr	r3, [r3, #12]
  401eea:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  401eec:	68fb      	ldr	r3, [r7, #12]
  401eee:	3304      	adds	r3, #4
  401ef0:	4618      	mov	r0, r3
  401ef2:	4b16      	ldr	r3, [pc, #88]	; (401f4c <prvProcessExpiredTimer+0x74>)
  401ef4:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  401ef6:	68fb      	ldr	r3, [r7, #12]
  401ef8:	69db      	ldr	r3, [r3, #28]
  401efa:	2b01      	cmp	r3, #1
  401efc:	d11b      	bne.n	401f36 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401efe:	68fb      	ldr	r3, [r7, #12]
  401f00:	699a      	ldr	r2, [r3, #24]
  401f02:	687b      	ldr	r3, [r7, #4]
  401f04:	18d1      	adds	r1, r2, r3
  401f06:	687b      	ldr	r3, [r7, #4]
  401f08:	683a      	ldr	r2, [r7, #0]
  401f0a:	68f8      	ldr	r0, [r7, #12]
  401f0c:	4c10      	ldr	r4, [pc, #64]	; (401f50 <prvProcessExpiredTimer+0x78>)
  401f0e:	47a0      	blx	r4
  401f10:	4603      	mov	r3, r0
  401f12:	2b01      	cmp	r3, #1
  401f14:	d10f      	bne.n	401f36 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  401f16:	2300      	movs	r3, #0
  401f18:	9300      	str	r3, [sp, #0]
  401f1a:	2300      	movs	r3, #0
  401f1c:	687a      	ldr	r2, [r7, #4]
  401f1e:	2100      	movs	r1, #0
  401f20:	68f8      	ldr	r0, [r7, #12]
  401f22:	4c0c      	ldr	r4, [pc, #48]	; (401f54 <prvProcessExpiredTimer+0x7c>)
  401f24:	47a0      	blx	r4
  401f26:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  401f28:	68bb      	ldr	r3, [r7, #8]
  401f2a:	2b00      	cmp	r3, #0
  401f2c:	d103      	bne.n	401f36 <prvProcessExpiredTimer+0x5e>
  401f2e:	4b0a      	ldr	r3, [pc, #40]	; (401f58 <prvProcessExpiredTimer+0x80>)
  401f30:	4798      	blx	r3
  401f32:	bf00      	nop
  401f34:	e7fd      	b.n	401f32 <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  401f36:	68fb      	ldr	r3, [r7, #12]
  401f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401f3a:	68f8      	ldr	r0, [r7, #12]
  401f3c:	4798      	blx	r3
}
  401f3e:	bf00      	nop
  401f40:	3714      	adds	r7, #20
  401f42:	46bd      	mov	sp, r7
  401f44:	bd90      	pop	{r4, r7, pc}
  401f46:	bf00      	nop
  401f48:	2040ab3c 	.word	0x2040ab3c
  401f4c:	0040034d 	.word	0x0040034d
  401f50:	004020a5 	.word	0x004020a5
  401f54:	00401e4d 	.word	0x00401e4d
  401f58:	0040059d 	.word	0x0040059d

00401f5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  401f5c:	b580      	push	{r7, lr}
  401f5e:	b084      	sub	sp, #16
  401f60:	af00      	add	r7, sp, #0
  401f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401f64:	f107 0308 	add.w	r3, r7, #8
  401f68:	4618      	mov	r0, r3
  401f6a:	4b05      	ldr	r3, [pc, #20]	; (401f80 <prvTimerTask+0x24>)
  401f6c:	4798      	blx	r3
  401f6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  401f70:	68bb      	ldr	r3, [r7, #8]
  401f72:	4619      	mov	r1, r3
  401f74:	68f8      	ldr	r0, [r7, #12]
  401f76:	4b03      	ldr	r3, [pc, #12]	; (401f84 <prvTimerTask+0x28>)
  401f78:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  401f7a:	4b03      	ldr	r3, [pc, #12]	; (401f88 <prvTimerTask+0x2c>)
  401f7c:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401f7e:	e7f1      	b.n	401f64 <prvTimerTask+0x8>
  401f80:	00402011 	.word	0x00402011
  401f84:	00401f8d 	.word	0x00401f8d
  401f88:	0040212d 	.word	0x0040212d

00401f8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  401f8c:	b580      	push	{r7, lr}
  401f8e:	b084      	sub	sp, #16
  401f90:	af00      	add	r7, sp, #0
  401f92:	6078      	str	r0, [r7, #4]
  401f94:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  401f96:	4b17      	ldr	r3, [pc, #92]	; (401ff4 <prvProcessTimerOrBlockTask+0x68>)
  401f98:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401f9a:	f107 0308 	add.w	r3, r7, #8
  401f9e:	4618      	mov	r0, r3
  401fa0:	4b15      	ldr	r3, [pc, #84]	; (401ff8 <prvProcessTimerOrBlockTask+0x6c>)
  401fa2:	4798      	blx	r3
  401fa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  401fa6:	68bb      	ldr	r3, [r7, #8]
  401fa8:	2b00      	cmp	r3, #0
  401faa:	d11d      	bne.n	401fe8 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401fac:	683b      	ldr	r3, [r7, #0]
  401fae:	2b00      	cmp	r3, #0
  401fb0:	d10a      	bne.n	401fc8 <prvProcessTimerOrBlockTask+0x3c>
  401fb2:	687a      	ldr	r2, [r7, #4]
  401fb4:	68fb      	ldr	r3, [r7, #12]
  401fb6:	429a      	cmp	r2, r3
  401fb8:	d806      	bhi.n	401fc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  401fba:	4b10      	ldr	r3, [pc, #64]	; (401ffc <prvProcessTimerOrBlockTask+0x70>)
  401fbc:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401fbe:	68f9      	ldr	r1, [r7, #12]
  401fc0:	6878      	ldr	r0, [r7, #4]
  401fc2:	4b0f      	ldr	r3, [pc, #60]	; (402000 <prvProcessTimerOrBlockTask+0x74>)
  401fc4:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  401fc6:	e011      	b.n	401fec <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  401fc8:	4b0e      	ldr	r3, [pc, #56]	; (402004 <prvProcessTimerOrBlockTask+0x78>)
  401fca:	6818      	ldr	r0, [r3, #0]
  401fcc:	687a      	ldr	r2, [r7, #4]
  401fce:	68fb      	ldr	r3, [r7, #12]
  401fd0:	1ad3      	subs	r3, r2, r3
  401fd2:	4619      	mov	r1, r3
  401fd4:	4b0c      	ldr	r3, [pc, #48]	; (402008 <prvProcessTimerOrBlockTask+0x7c>)
  401fd6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401fd8:	4b08      	ldr	r3, [pc, #32]	; (401ffc <prvProcessTimerOrBlockTask+0x70>)
  401fda:	4798      	blx	r3
  401fdc:	4603      	mov	r3, r0
  401fde:	2b00      	cmp	r3, #0
  401fe0:	d104      	bne.n	401fec <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
  401fe2:	4b0a      	ldr	r3, [pc, #40]	; (40200c <prvProcessTimerOrBlockTask+0x80>)
  401fe4:	4798      	blx	r3
}
  401fe6:	e001      	b.n	401fec <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
  401fe8:	4b04      	ldr	r3, [pc, #16]	; (401ffc <prvProcessTimerOrBlockTask+0x70>)
  401fea:	4798      	blx	r3
}
  401fec:	bf00      	nop
  401fee:	3710      	adds	r7, #16
  401ff0:	46bd      	mov	sp, r7
  401ff2:	bd80      	pop	{r7, pc}
  401ff4:	00401399 	.word	0x00401399
  401ff8:	00402059 	.word	0x00402059
  401ffc:	004013b5 	.word	0x004013b5
  402000:	00401ed9 	.word	0x00401ed9
  402004:	2040ab44 	.word	0x2040ab44
  402008:	004010a5 	.word	0x004010a5
  40200c:	00400539 	.word	0x00400539

00402010 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  402010:	b480      	push	{r7}
  402012:	b085      	sub	sp, #20
  402014:	af00      	add	r7, sp, #0
  402016:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402018:	4b0e      	ldr	r3, [pc, #56]	; (402054 <prvGetNextExpireTime+0x44>)
  40201a:	681b      	ldr	r3, [r3, #0]
  40201c:	681b      	ldr	r3, [r3, #0]
  40201e:	2b00      	cmp	r3, #0
  402020:	bf0c      	ite	eq
  402022:	2301      	moveq	r3, #1
  402024:	2300      	movne	r3, #0
  402026:	b2db      	uxtb	r3, r3
  402028:	461a      	mov	r2, r3
  40202a:	687b      	ldr	r3, [r7, #4]
  40202c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40202e:	687b      	ldr	r3, [r7, #4]
  402030:	681b      	ldr	r3, [r3, #0]
  402032:	2b00      	cmp	r3, #0
  402034:	d105      	bne.n	402042 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402036:	4b07      	ldr	r3, [pc, #28]	; (402054 <prvGetNextExpireTime+0x44>)
  402038:	681b      	ldr	r3, [r3, #0]
  40203a:	68db      	ldr	r3, [r3, #12]
  40203c:	681b      	ldr	r3, [r3, #0]
  40203e:	60fb      	str	r3, [r7, #12]
  402040:	e001      	b.n	402046 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  402042:	2300      	movs	r3, #0
  402044:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  402046:	68fb      	ldr	r3, [r7, #12]
}
  402048:	4618      	mov	r0, r3
  40204a:	3714      	adds	r7, #20
  40204c:	46bd      	mov	sp, r7
  40204e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402052:	4770      	bx	lr
  402054:	2040ab3c 	.word	0x2040ab3c

00402058 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  402058:	b580      	push	{r7, lr}
  40205a:	b084      	sub	sp, #16
  40205c:	af00      	add	r7, sp, #0
  40205e:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  402060:	4b0d      	ldr	r3, [pc, #52]	; (402098 <prvSampleTimeNow+0x40>)
  402062:	4798      	blx	r3
  402064:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  402066:	4b0d      	ldr	r3, [pc, #52]	; (40209c <prvSampleTimeNow+0x44>)
  402068:	681b      	ldr	r3, [r3, #0]
  40206a:	68fa      	ldr	r2, [r7, #12]
  40206c:	429a      	cmp	r2, r3
  40206e:	d208      	bcs.n	402082 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  402070:	4b0a      	ldr	r3, [pc, #40]	; (40209c <prvSampleTimeNow+0x44>)
  402072:	681b      	ldr	r3, [r3, #0]
  402074:	4618      	mov	r0, r3
  402076:	4b0a      	ldr	r3, [pc, #40]	; (4020a0 <prvSampleTimeNow+0x48>)
  402078:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  40207a:	687b      	ldr	r3, [r7, #4]
  40207c:	2201      	movs	r2, #1
  40207e:	601a      	str	r2, [r3, #0]
  402080:	e002      	b.n	402088 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402082:	687b      	ldr	r3, [r7, #4]
  402084:	2200      	movs	r2, #0
  402086:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  402088:	4a04      	ldr	r2, [pc, #16]	; (40209c <prvSampleTimeNow+0x44>)
  40208a:	68fb      	ldr	r3, [r7, #12]
  40208c:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  40208e:	68fb      	ldr	r3, [r7, #12]
}
  402090:	4618      	mov	r0, r3
  402092:	3710      	adds	r7, #16
  402094:	46bd      	mov	sp, r7
  402096:	bd80      	pop	{r7, pc}
  402098:	004014d5 	.word	0x004014d5
  40209c:	2040ab48 	.word	0x2040ab48
  4020a0:	00402239 	.word	0x00402239

004020a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  4020a4:	b580      	push	{r7, lr}
  4020a6:	b086      	sub	sp, #24
  4020a8:	af00      	add	r7, sp, #0
  4020aa:	60f8      	str	r0, [r7, #12]
  4020ac:	60b9      	str	r1, [r7, #8]
  4020ae:	607a      	str	r2, [r7, #4]
  4020b0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  4020b2:	2300      	movs	r3, #0
  4020b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4020b6:	68fb      	ldr	r3, [r7, #12]
  4020b8:	68ba      	ldr	r2, [r7, #8]
  4020ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4020bc:	68fb      	ldr	r3, [r7, #12]
  4020be:	68fa      	ldr	r2, [r7, #12]
  4020c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  4020c2:	68ba      	ldr	r2, [r7, #8]
  4020c4:	687b      	ldr	r3, [r7, #4]
  4020c6:	429a      	cmp	r2, r3
  4020c8:	d812      	bhi.n	4020f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  4020ca:	687a      	ldr	r2, [r7, #4]
  4020cc:	683b      	ldr	r3, [r7, #0]
  4020ce:	1ad2      	subs	r2, r2, r3
  4020d0:	68fb      	ldr	r3, [r7, #12]
  4020d2:	699b      	ldr	r3, [r3, #24]
  4020d4:	429a      	cmp	r2, r3
  4020d6:	d302      	bcc.n	4020de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4020d8:	2301      	movs	r3, #1
  4020da:	617b      	str	r3, [r7, #20]
  4020dc:	e01b      	b.n	402116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4020de:	4b10      	ldr	r3, [pc, #64]	; (402120 <prvInsertTimerInActiveList+0x7c>)
  4020e0:	681a      	ldr	r2, [r3, #0]
  4020e2:	68fb      	ldr	r3, [r7, #12]
  4020e4:	3304      	adds	r3, #4
  4020e6:	4619      	mov	r1, r3
  4020e8:	4610      	mov	r0, r2
  4020ea:	4b0e      	ldr	r3, [pc, #56]	; (402124 <prvInsertTimerInActiveList+0x80>)
  4020ec:	4798      	blx	r3
  4020ee:	e012      	b.n	402116 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4020f0:	687a      	ldr	r2, [r7, #4]
  4020f2:	683b      	ldr	r3, [r7, #0]
  4020f4:	429a      	cmp	r2, r3
  4020f6:	d206      	bcs.n	402106 <prvInsertTimerInActiveList+0x62>
  4020f8:	68ba      	ldr	r2, [r7, #8]
  4020fa:	683b      	ldr	r3, [r7, #0]
  4020fc:	429a      	cmp	r2, r3
  4020fe:	d302      	bcc.n	402106 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402100:	2301      	movs	r3, #1
  402102:	617b      	str	r3, [r7, #20]
  402104:	e007      	b.n	402116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402106:	4b08      	ldr	r3, [pc, #32]	; (402128 <prvInsertTimerInActiveList+0x84>)
  402108:	681a      	ldr	r2, [r3, #0]
  40210a:	68fb      	ldr	r3, [r7, #12]
  40210c:	3304      	adds	r3, #4
  40210e:	4619      	mov	r1, r3
  402110:	4610      	mov	r0, r2
  402112:	4b04      	ldr	r3, [pc, #16]	; (402124 <prvInsertTimerInActiveList+0x80>)
  402114:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  402116:	697b      	ldr	r3, [r7, #20]
}
  402118:	4618      	mov	r0, r3
  40211a:	3718      	adds	r7, #24
  40211c:	46bd      	mov	sp, r7
  40211e:	bd80      	pop	{r7, pc}
  402120:	2040ab40 	.word	0x2040ab40
  402124:	004002db 	.word	0x004002db
  402128:	2040ab3c 	.word	0x2040ab3c

0040212c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  40212c:	b590      	push	{r4, r7, lr}
  40212e:	b08b      	sub	sp, #44	; 0x2c
  402130:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402132:	1d3b      	adds	r3, r7, #4
  402134:	4618      	mov	r0, r3
  402136:	4b38      	ldr	r3, [pc, #224]	; (402218 <prvProcessReceivedCommands+0xec>)
  402138:	4798      	blx	r3
  40213a:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40213c:	e05d      	b.n	4021fa <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  40213e:	693b      	ldr	r3, [r7, #16]
  402140:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  402142:	69bb      	ldr	r3, [r7, #24]
  402144:	2b00      	cmp	r3, #0
  402146:	d008      	beq.n	40215a <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402148:	69bb      	ldr	r3, [r7, #24]
  40214a:	695b      	ldr	r3, [r3, #20]
  40214c:	2b00      	cmp	r3, #0
  40214e:	d004      	beq.n	40215a <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  402150:	69bb      	ldr	r3, [r7, #24]
  402152:	3304      	adds	r3, #4
  402154:	4618      	mov	r0, r3
  402156:	4b31      	ldr	r3, [pc, #196]	; (40221c <prvProcessReceivedCommands+0xf0>)
  402158:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  40215a:	68bb      	ldr	r3, [r7, #8]
  40215c:	2b03      	cmp	r3, #3
  40215e:	d84b      	bhi.n	4021f8 <prvProcessReceivedCommands+0xcc>
  402160:	a201      	add	r2, pc, #4	; (adr r2, 402168 <prvProcessReceivedCommands+0x3c>)
  402162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402166:	bf00      	nop
  402168:	00402179 	.word	0x00402179
  40216c:	004021fb 	.word	0x004021fb
  402170:	004021c7 	.word	0x004021c7
  402174:	004021f1 	.word	0x004021f1
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  402178:	68fa      	ldr	r2, [r7, #12]
  40217a:	69bb      	ldr	r3, [r7, #24]
  40217c:	699b      	ldr	r3, [r3, #24]
  40217e:	18d1      	adds	r1, r2, r3
  402180:	68fb      	ldr	r3, [r7, #12]
  402182:	69fa      	ldr	r2, [r7, #28]
  402184:	69b8      	ldr	r0, [r7, #24]
  402186:	4c26      	ldr	r4, [pc, #152]	; (402220 <prvProcessReceivedCommands+0xf4>)
  402188:	47a0      	blx	r4
  40218a:	4603      	mov	r3, r0
  40218c:	2b01      	cmp	r3, #1
  40218e:	d134      	bne.n	4021fa <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402190:	69bb      	ldr	r3, [r7, #24]
  402192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402194:	69b8      	ldr	r0, [r7, #24]
  402196:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402198:	69bb      	ldr	r3, [r7, #24]
  40219a:	69db      	ldr	r3, [r3, #28]
  40219c:	2b01      	cmp	r3, #1
  40219e:	d12c      	bne.n	4021fa <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4021a0:	68fa      	ldr	r2, [r7, #12]
  4021a2:	69bb      	ldr	r3, [r7, #24]
  4021a4:	699b      	ldr	r3, [r3, #24]
  4021a6:	441a      	add	r2, r3
  4021a8:	2300      	movs	r3, #0
  4021aa:	9300      	str	r3, [sp, #0]
  4021ac:	2300      	movs	r3, #0
  4021ae:	2100      	movs	r1, #0
  4021b0:	69b8      	ldr	r0, [r7, #24]
  4021b2:	4c1c      	ldr	r4, [pc, #112]	; (402224 <prvProcessReceivedCommands+0xf8>)
  4021b4:	47a0      	blx	r4
  4021b6:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  4021b8:	697b      	ldr	r3, [r7, #20]
  4021ba:	2b00      	cmp	r3, #0
  4021bc:	d11d      	bne.n	4021fa <prvProcessReceivedCommands+0xce>
  4021be:	4b1a      	ldr	r3, [pc, #104]	; (402228 <prvProcessReceivedCommands+0xfc>)
  4021c0:	4798      	blx	r3
  4021c2:	bf00      	nop
  4021c4:	e7fd      	b.n	4021c2 <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  4021c6:	68fa      	ldr	r2, [r7, #12]
  4021c8:	69bb      	ldr	r3, [r7, #24]
  4021ca:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4021cc:	69bb      	ldr	r3, [r7, #24]
  4021ce:	699b      	ldr	r3, [r3, #24]
  4021d0:	2b00      	cmp	r3, #0
  4021d2:	d103      	bne.n	4021dc <prvProcessReceivedCommands+0xb0>
  4021d4:	4b14      	ldr	r3, [pc, #80]	; (402228 <prvProcessReceivedCommands+0xfc>)
  4021d6:	4798      	blx	r3
  4021d8:	bf00      	nop
  4021da:	e7fd      	b.n	4021d8 <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4021dc:	69bb      	ldr	r3, [r7, #24]
  4021de:	699a      	ldr	r2, [r3, #24]
  4021e0:	69fb      	ldr	r3, [r7, #28]
  4021e2:	18d1      	adds	r1, r2, r3
  4021e4:	69fb      	ldr	r3, [r7, #28]
  4021e6:	69fa      	ldr	r2, [r7, #28]
  4021e8:	69b8      	ldr	r0, [r7, #24]
  4021ea:	4c0d      	ldr	r4, [pc, #52]	; (402220 <prvProcessReceivedCommands+0xf4>)
  4021ec:	47a0      	blx	r4
				break;
  4021ee:	e004      	b.n	4021fa <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  4021f0:	69b8      	ldr	r0, [r7, #24]
  4021f2:	4b0e      	ldr	r3, [pc, #56]	; (40222c <prvProcessReceivedCommands+0x100>)
  4021f4:	4798      	blx	r3
				break;
  4021f6:	e000      	b.n	4021fa <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  4021f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4021fa:	4b0d      	ldr	r3, [pc, #52]	; (402230 <prvProcessReceivedCommands+0x104>)
  4021fc:	6818      	ldr	r0, [r3, #0]
  4021fe:	f107 0108 	add.w	r1, r7, #8
  402202:	2300      	movs	r3, #0
  402204:	2200      	movs	r2, #0
  402206:	4c0b      	ldr	r4, [pc, #44]	; (402234 <prvProcessReceivedCommands+0x108>)
  402208:	47a0      	blx	r4
  40220a:	4603      	mov	r3, r0
  40220c:	2b00      	cmp	r3, #0
  40220e:	d196      	bne.n	40213e <prvProcessReceivedCommands+0x12>
		}
	}
}
  402210:	bf00      	nop
  402212:	3724      	adds	r7, #36	; 0x24
  402214:	46bd      	mov	sp, r7
  402216:	bd90      	pop	{r4, r7, pc}
  402218:	00402059 	.word	0x00402059
  40221c:	0040034d 	.word	0x0040034d
  402220:	004020a5 	.word	0x004020a5
  402224:	00401e4d 	.word	0x00401e4d
  402228:	0040059d 	.word	0x0040059d
  40222c:	00400791 	.word	0x00400791
  402230:	2040ab44 	.word	0x2040ab44
  402234:	00400cad 	.word	0x00400cad

00402238 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  402238:	b590      	push	{r4, r7, lr}
  40223a:	b08b      	sub	sp, #44	; 0x2c
  40223c:	af02      	add	r7, sp, #8
  40223e:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402240:	e03e      	b.n	4022c0 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402242:	4b29      	ldr	r3, [pc, #164]	; (4022e8 <prvSwitchTimerLists+0xb0>)
  402244:	681b      	ldr	r3, [r3, #0]
  402246:	68db      	ldr	r3, [r3, #12]
  402248:	681b      	ldr	r3, [r3, #0]
  40224a:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40224c:	4b26      	ldr	r3, [pc, #152]	; (4022e8 <prvSwitchTimerLists+0xb0>)
  40224e:	681b      	ldr	r3, [r3, #0]
  402250:	68db      	ldr	r3, [r3, #12]
  402252:	68db      	ldr	r3, [r3, #12]
  402254:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  402256:	69bb      	ldr	r3, [r7, #24]
  402258:	3304      	adds	r3, #4
  40225a:	4618      	mov	r0, r3
  40225c:	4b23      	ldr	r3, [pc, #140]	; (4022ec <prvSwitchTimerLists+0xb4>)
  40225e:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402260:	69bb      	ldr	r3, [r7, #24]
  402262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402264:	69b8      	ldr	r0, [r7, #24]
  402266:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402268:	69bb      	ldr	r3, [r7, #24]
  40226a:	69db      	ldr	r3, [r3, #28]
  40226c:	2b01      	cmp	r3, #1
  40226e:	d127      	bne.n	4022c0 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402270:	69bb      	ldr	r3, [r7, #24]
  402272:	699a      	ldr	r2, [r3, #24]
  402274:	69fb      	ldr	r3, [r7, #28]
  402276:	4413      	add	r3, r2
  402278:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  40227a:	697a      	ldr	r2, [r7, #20]
  40227c:	69fb      	ldr	r3, [r7, #28]
  40227e:	429a      	cmp	r2, r3
  402280:	d90e      	bls.n	4022a0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402282:	69bb      	ldr	r3, [r7, #24]
  402284:	697a      	ldr	r2, [r7, #20]
  402286:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402288:	69bb      	ldr	r3, [r7, #24]
  40228a:	69ba      	ldr	r2, [r7, #24]
  40228c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40228e:	4b16      	ldr	r3, [pc, #88]	; (4022e8 <prvSwitchTimerLists+0xb0>)
  402290:	681a      	ldr	r2, [r3, #0]
  402292:	69bb      	ldr	r3, [r7, #24]
  402294:	3304      	adds	r3, #4
  402296:	4619      	mov	r1, r3
  402298:	4610      	mov	r0, r2
  40229a:	4b15      	ldr	r3, [pc, #84]	; (4022f0 <prvSwitchTimerLists+0xb8>)
  40229c:	4798      	blx	r3
  40229e:	e00f      	b.n	4022c0 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4022a0:	2300      	movs	r3, #0
  4022a2:	9300      	str	r3, [sp, #0]
  4022a4:	2300      	movs	r3, #0
  4022a6:	69fa      	ldr	r2, [r7, #28]
  4022a8:	2100      	movs	r1, #0
  4022aa:	69b8      	ldr	r0, [r7, #24]
  4022ac:	4c11      	ldr	r4, [pc, #68]	; (4022f4 <prvSwitchTimerLists+0xbc>)
  4022ae:	47a0      	blx	r4
  4022b0:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  4022b2:	693b      	ldr	r3, [r7, #16]
  4022b4:	2b00      	cmp	r3, #0
  4022b6:	d103      	bne.n	4022c0 <prvSwitchTimerLists+0x88>
  4022b8:	4b0f      	ldr	r3, [pc, #60]	; (4022f8 <prvSwitchTimerLists+0xc0>)
  4022ba:	4798      	blx	r3
  4022bc:	bf00      	nop
  4022be:	e7fd      	b.n	4022bc <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4022c0:	4b09      	ldr	r3, [pc, #36]	; (4022e8 <prvSwitchTimerLists+0xb0>)
  4022c2:	681b      	ldr	r3, [r3, #0]
  4022c4:	681b      	ldr	r3, [r3, #0]
  4022c6:	2b00      	cmp	r3, #0
  4022c8:	d1bb      	bne.n	402242 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  4022ca:	4b07      	ldr	r3, [pc, #28]	; (4022e8 <prvSwitchTimerLists+0xb0>)
  4022cc:	681b      	ldr	r3, [r3, #0]
  4022ce:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  4022d0:	4b0a      	ldr	r3, [pc, #40]	; (4022fc <prvSwitchTimerLists+0xc4>)
  4022d2:	681b      	ldr	r3, [r3, #0]
  4022d4:	4a04      	ldr	r2, [pc, #16]	; (4022e8 <prvSwitchTimerLists+0xb0>)
  4022d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  4022d8:	4a08      	ldr	r2, [pc, #32]	; (4022fc <prvSwitchTimerLists+0xc4>)
  4022da:	68fb      	ldr	r3, [r7, #12]
  4022dc:	6013      	str	r3, [r2, #0]
}
  4022de:	bf00      	nop
  4022e0:	3724      	adds	r7, #36	; 0x24
  4022e2:	46bd      	mov	sp, r7
  4022e4:	bd90      	pop	{r4, r7, pc}
  4022e6:	bf00      	nop
  4022e8:	2040ab3c 	.word	0x2040ab3c
  4022ec:	0040034d 	.word	0x0040034d
  4022f0:	004002db 	.word	0x004002db
  4022f4:	00401e4d 	.word	0x00401e4d
  4022f8:	0040059d 	.word	0x0040059d
  4022fc:	2040ab40 	.word	0x2040ab40

00402300 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402300:	b580      	push	{r7, lr}
  402302:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402304:	4b0e      	ldr	r3, [pc, #56]	; (402340 <prvCheckForValidListAndQueue+0x40>)
  402306:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402308:	4b0e      	ldr	r3, [pc, #56]	; (402344 <prvCheckForValidListAndQueue+0x44>)
  40230a:	681b      	ldr	r3, [r3, #0]
  40230c:	2b00      	cmp	r3, #0
  40230e:	d113      	bne.n	402338 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  402310:	480d      	ldr	r0, [pc, #52]	; (402348 <prvCheckForValidListAndQueue+0x48>)
  402312:	4b0e      	ldr	r3, [pc, #56]	; (40234c <prvCheckForValidListAndQueue+0x4c>)
  402314:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  402316:	480e      	ldr	r0, [pc, #56]	; (402350 <prvCheckForValidListAndQueue+0x50>)
  402318:	4b0c      	ldr	r3, [pc, #48]	; (40234c <prvCheckForValidListAndQueue+0x4c>)
  40231a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  40231c:	4b0d      	ldr	r3, [pc, #52]	; (402354 <prvCheckForValidListAndQueue+0x54>)
  40231e:	4a0a      	ldr	r2, [pc, #40]	; (402348 <prvCheckForValidListAndQueue+0x48>)
  402320:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402322:	4b0d      	ldr	r3, [pc, #52]	; (402358 <prvCheckForValidListAndQueue+0x58>)
  402324:	4a0a      	ldr	r2, [pc, #40]	; (402350 <prvCheckForValidListAndQueue+0x50>)
  402326:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  402328:	2200      	movs	r2, #0
  40232a:	210c      	movs	r1, #12
  40232c:	2005      	movs	r0, #5
  40232e:	4b0b      	ldr	r3, [pc, #44]	; (40235c <prvCheckForValidListAndQueue+0x5c>)
  402330:	4798      	blx	r3
  402332:	4602      	mov	r2, r0
  402334:	4b03      	ldr	r3, [pc, #12]	; (402344 <prvCheckForValidListAndQueue+0x44>)
  402336:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  402338:	4b09      	ldr	r3, [pc, #36]	; (402360 <prvCheckForValidListAndQueue+0x60>)
  40233a:	4798      	blx	r3
}
  40233c:	bf00      	nop
  40233e:	bd80      	pop	{r7, pc}
  402340:	00400555 	.word	0x00400555
  402344:	2040ab44 	.word	0x2040ab44
  402348:	2040ab14 	.word	0x2040ab14
  40234c:	00400231 	.word	0x00400231
  402350:	2040ab28 	.word	0x2040ab28
  402354:	2040ab3c 	.word	0x2040ab3c
  402358:	2040ab40 	.word	0x2040ab40
  40235c:	004009f1 	.word	0x004009f1
  402360:	00400575 	.word	0x00400575

00402364 <ppbuf_insert_active>:

#include <string.h>
#include "PingPong.h"


int ppbuf_insert_active(ppbuf_t *p, void *data, int size){
  402364:	b480      	push	{r7}
  402366:	b089      	sub	sp, #36	; 0x24
  402368:	af00      	add	r7, sp, #0
  40236a:	60f8      	str	r0, [r7, #12]
  40236c:	60b9      	str	r1, [r7, #8]
  40236e:	607a      	str	r2, [r7, #4]
	int ret = 0;
  402370:	2300      	movs	r3, #0
  402372:	61fb      	str	r3, [r7, #28]
	unsigned int *ptr;

	if(p == NULL || data == NULL || size == 0) {
  402374:	68fb      	ldr	r3, [r7, #12]
  402376:	2b00      	cmp	r3, #0
  402378:	d005      	beq.n	402386 <ppbuf_insert_active+0x22>
  40237a:	68bb      	ldr	r3, [r7, #8]
  40237c:	2b00      	cmp	r3, #0
  40237e:	d002      	beq.n	402386 <ppbuf_insert_active+0x22>
  402380:	687b      	ldr	r3, [r7, #4]
  402382:	2b00      	cmp	r3, #0
  402384:	d103      	bne.n	40238e <ppbuf_insert_active+0x2a>
		/* check your parameters */
		ret = -1;
  402386:	f04f 33ff 	mov.w	r3, #4294967295
  40238a:	61fb      	str	r3, [r7, #28]
  40238c:	e033      	b.n	4023f6 <ppbuf_insert_active+0x92>
	} else {
		if(size > (p->buffer_size - p->put_index)) {
  40238e:	68fb      	ldr	r3, [r7, #12]
  402390:	689a      	ldr	r2, [r3, #8]
  402392:	68fb      	ldr	r3, [r7, #12]
  402394:	68db      	ldr	r3, [r3, #12]
  402396:	1ad2      	subs	r2, r2, r3
  402398:	687b      	ldr	r3, [r7, #4]
  40239a:	429a      	cmp	r2, r3
  40239c:	da03      	bge.n	4023a6 <ppbuf_insert_active+0x42>
			/* not enough room for new samples */
			ret = -1;
  40239e:	f04f 33ff 	mov.w	r3, #4294967295
  4023a2:	61fb      	str	r3, [r7, #28]
  4023a4:	e027      	b.n	4023f6 <ppbuf_insert_active+0x92>
		} else {
			/* take the current position */
			int mem_position = ((p->ping) * p->buffer_size) + p->put_index;
  4023a6:	68fb      	ldr	r3, [r7, #12]
  4023a8:	791b      	ldrb	r3, [r3, #4]
  4023aa:	461a      	mov	r2, r3
  4023ac:	68fb      	ldr	r3, [r7, #12]
  4023ae:	689b      	ldr	r3, [r3, #8]
  4023b0:	fb03 f202 	mul.w	r2, r3, r2
  4023b4:	68fb      	ldr	r3, [r7, #12]
  4023b6:	68db      	ldr	r3, [r3, #12]
  4023b8:	4413      	add	r3, r2
  4023ba:	61bb      	str	r3, [r7, #24]
			ptr = (unsigned int *)p->buffer_data; //uint8_t
  4023bc:	68fb      	ldr	r3, [r7, #12]
  4023be:	681b      	ldr	r3, [r3, #0]
  4023c0:	617b      	str	r3, [r7, #20]

			/* copy the contents */
			memcpy(&ptr[mem_position], data, sizeof(int));
  4023c2:	69bb      	ldr	r3, [r7, #24]
  4023c4:	009b      	lsls	r3, r3, #2
  4023c6:	697a      	ldr	r2, [r7, #20]
  4023c8:	4413      	add	r3, r2
  4023ca:	68ba      	ldr	r2, [r7, #8]
  4023cc:	6812      	ldr	r2, [r2, #0]
  4023ce:	601a      	str	r2, [r3, #0]

			/* update put index */
			p->put_index += size;
  4023d0:	68fb      	ldr	r3, [r7, #12]
  4023d2:	68da      	ldr	r2, [r3, #12]
  4023d4:	687b      	ldr	r3, [r7, #4]
  4023d6:	441a      	add	r2, r3
  4023d8:	68fb      	ldr	r3, [r7, #12]
  4023da:	60da      	str	r2, [r3, #12]
			p->full_signal = (p->put_index >= p->buffer_size?true:false);
  4023dc:	68fb      	ldr	r3, [r7, #12]
  4023de:	68da      	ldr	r2, [r3, #12]
  4023e0:	68fb      	ldr	r3, [r7, #12]
  4023e2:	689b      	ldr	r3, [r3, #8]
  4023e4:	429a      	cmp	r2, r3
  4023e6:	bfac      	ite	ge
  4023e8:	2301      	movge	r3, #1
  4023ea:	2300      	movlt	r3, #0
  4023ec:	b2da      	uxtb	r2, r3
  4023ee:	68fb      	ldr	r3, [r7, #12]
  4023f0:	751a      	strb	r2, [r3, #20]

			/* swap will only generated when ppbuf_get_full_signal is called */
			ret = 0;
  4023f2:	2300      	movs	r3, #0
  4023f4:	61fb      	str	r3, [r7, #28]
		}
	}
	return(ret);
  4023f6:	69fb      	ldr	r3, [r7, #28]
}
  4023f8:	4618      	mov	r0, r3
  4023fa:	3724      	adds	r7, #36	; 0x24
  4023fc:	46bd      	mov	sp, r7
  4023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402402:	4770      	bx	lr

00402404 <ppbuf_remove_inactive>:

int ppbuf_remove_inactive(ppbuf_t *p, void *data, int size){
  402404:	b480      	push	{r7}
  402406:	b089      	sub	sp, #36	; 0x24
  402408:	af00      	add	r7, sp, #0
  40240a:	60f8      	str	r0, [r7, #12]
  40240c:	60b9      	str	r1, [r7, #8]
  40240e:	607a      	str	r2, [r7, #4]
	int ret = 0;
  402410:	2300      	movs	r3, #0
  402412:	61fb      	str	r3, [r7, #28]
	unsigned int *ptr;

	if(p == NULL || data == NULL || size == 0) {
  402414:	68fb      	ldr	r3, [r7, #12]
  402416:	2b00      	cmp	r3, #0
  402418:	d005      	beq.n	402426 <ppbuf_remove_inactive+0x22>
  40241a:	68bb      	ldr	r3, [r7, #8]
  40241c:	2b00      	cmp	r3, #0
  40241e:	d002      	beq.n	402426 <ppbuf_remove_inactive+0x22>
  402420:	687b      	ldr	r3, [r7, #4]
  402422:	2b00      	cmp	r3, #0
  402424:	d103      	bne.n	40242e <ppbuf_remove_inactive+0x2a>
		/* check your parameters */
		ret = -1;
  402426:	f04f 33ff 	mov.w	r3, #4294967295
  40242a:	61fb      	str	r3, [r7, #28]
  40242c:	e029      	b.n	402482 <ppbuf_remove_inactive+0x7e>
	} else {
		if(size > (p->buffer_size - p->get_index)) {
  40242e:	68fb      	ldr	r3, [r7, #12]
  402430:	689a      	ldr	r2, [r3, #8]
  402432:	68fb      	ldr	r3, [r7, #12]
  402434:	691b      	ldr	r3, [r3, #16]
  402436:	1ad2      	subs	r2, r2, r3
  402438:	687b      	ldr	r3, [r7, #4]
  40243a:	429a      	cmp	r2, r3
  40243c:	da03      	bge.n	402446 <ppbuf_remove_inactive+0x42>
			/* not enough data in sample buffer */
			ret = -1;
  40243e:	f04f 33ff 	mov.w	r3, #4294967295
  402442:	61fb      	str	r3, [r7, #28]
  402444:	e01d      	b.n	402482 <ppbuf_remove_inactive+0x7e>
		} else {
			/* take the current position */
			int mem_position = ((p->pong) * p->buffer_size) + p->get_index;
  402446:	68fb      	ldr	r3, [r7, #12]
  402448:	795b      	ldrb	r3, [r3, #5]
  40244a:	461a      	mov	r2, r3
  40244c:	68fb      	ldr	r3, [r7, #12]
  40244e:	689b      	ldr	r3, [r3, #8]
  402450:	fb03 f202 	mul.w	r2, r3, r2
  402454:	68fb      	ldr	r3, [r7, #12]
  402456:	691b      	ldr	r3, [r3, #16]
  402458:	4413      	add	r3, r2
  40245a:	61bb      	str	r3, [r7, #24]
			ptr = (unsigned int *)p->buffer_data;
  40245c:	68fb      	ldr	r3, [r7, #12]
  40245e:	681b      	ldr	r3, [r3, #0]
  402460:	617b      	str	r3, [r7, #20]

			/* copy the contents */
			memcpy(data,&ptr[mem_position], sizeof(int));
  402462:	69bb      	ldr	r3, [r7, #24]
  402464:	009b      	lsls	r3, r3, #2
  402466:	697a      	ldr	r2, [r7, #20]
  402468:	4413      	add	r3, r2
  40246a:	681b      	ldr	r3, [r3, #0]
  40246c:	461a      	mov	r2, r3
  40246e:	68bb      	ldr	r3, [r7, #8]
  402470:	601a      	str	r2, [r3, #0]

			/* update put index */
			p->get_index += size;
  402472:	68fb      	ldr	r3, [r7, #12]
  402474:	691a      	ldr	r2, [r3, #16]
  402476:	687b      	ldr	r3, [r7, #4]
  402478:	441a      	add	r2, r3
  40247a:	68fb      	ldr	r3, [r7, #12]
  40247c:	611a      	str	r2, [r3, #16]

			/* when buffer is empty we are not able to extract anymore data */
			ret = 0;
  40247e:	2300      	movs	r3, #0
  402480:	61fb      	str	r3, [r7, #28]
		}
	}
	return(ret);
  402482:	69fb      	ldr	r3, [r7, #28]


}
  402484:	4618      	mov	r0, r3
  402486:	3724      	adds	r7, #36	; 0x24
  402488:	46bd      	mov	sp, r7
  40248a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40248e:	4770      	bx	lr

00402490 <ppbuf_get_full_signal>:
		mem_position = ((p->pong) * p->buffer_size) + i;
		p->buffer_data[mem_position] = b[i];
	}
}

bool ppbuf_get_full_signal(ppbuf_t *p, bool consume) {
  402490:	b480      	push	{r7}
  402492:	b085      	sub	sp, #20
  402494:	af00      	add	r7, sp, #0
  402496:	6078      	str	r0, [r7, #4]
  402498:	460b      	mov	r3, r1
  40249a:	70fb      	strb	r3, [r7, #3]
	/* take the last signaled full occurrence */
	bool ret = (p != NULL ? p->full_signal : false);
  40249c:	687b      	ldr	r3, [r7, #4]
  40249e:	2b00      	cmp	r3, #0
  4024a0:	d005      	beq.n	4024ae <ppbuf_get_full_signal+0x1e>
  4024a2:	687b      	ldr	r3, [r7, #4]
  4024a4:	7d1b      	ldrb	r3, [r3, #20]
  4024a6:	2b00      	cmp	r3, #0
  4024a8:	d001      	beq.n	4024ae <ppbuf_get_full_signal+0x1e>
  4024aa:	2301      	movs	r3, #1
  4024ac:	e000      	b.n	4024b0 <ppbuf_get_full_signal+0x20>
  4024ae:	2300      	movs	r3, #0
  4024b0:	73fb      	strb	r3, [r7, #15]

	if((consume != false) && (p != NULL) && (ret != false)) {
  4024b2:	78fb      	ldrb	r3, [r7, #3]
  4024b4:	2b00      	cmp	r3, #0
  4024b6:	d026      	beq.n	402506 <ppbuf_get_full_signal+0x76>
  4024b8:	687b      	ldr	r3, [r7, #4]
  4024ba:	2b00      	cmp	r3, #0
  4024bc:	d023      	beq.n	402506 <ppbuf_get_full_signal+0x76>
  4024be:	7bfb      	ldrb	r3, [r7, #15]
  4024c0:	2b00      	cmp	r3, #0
  4024c2:	d020      	beq.n	402506 <ppbuf_get_full_signal+0x76>
		p->full_signal = false;
  4024c4:	687b      	ldr	r3, [r7, #4]
  4024c6:	2200      	movs	r2, #0
  4024c8:	751a      	strb	r2, [r3, #20]

		/* swap the buffer switches */
		p->ping = p->ping ^ p->pong;
  4024ca:	687b      	ldr	r3, [r7, #4]
  4024cc:	791a      	ldrb	r2, [r3, #4]
  4024ce:	687b      	ldr	r3, [r7, #4]
  4024d0:	795b      	ldrb	r3, [r3, #5]
  4024d2:	4053      	eors	r3, r2
  4024d4:	b2da      	uxtb	r2, r3
  4024d6:	687b      	ldr	r3, [r7, #4]
  4024d8:	711a      	strb	r2, [r3, #4]
		p->pong = p->pong ^ p->ping;
  4024da:	687b      	ldr	r3, [r7, #4]
  4024dc:	795a      	ldrb	r2, [r3, #5]
  4024de:	687b      	ldr	r3, [r7, #4]
  4024e0:	791b      	ldrb	r3, [r3, #4]
  4024e2:	4053      	eors	r3, r2
  4024e4:	b2da      	uxtb	r2, r3
  4024e6:	687b      	ldr	r3, [r7, #4]
  4024e8:	715a      	strb	r2, [r3, #5]
		p->ping = p->ping ^ p->pong;
  4024ea:	687b      	ldr	r3, [r7, #4]
  4024ec:	791a      	ldrb	r2, [r3, #4]
  4024ee:	687b      	ldr	r3, [r7, #4]
  4024f0:	795b      	ldrb	r3, [r3, #5]
  4024f2:	4053      	eors	r3, r2
  4024f4:	b2da      	uxtb	r2, r3
  4024f6:	687b      	ldr	r3, [r7, #4]
  4024f8:	711a      	strb	r2, [r3, #4]

		/* resets the buffer position */
		p->get_index = 0;
  4024fa:	687b      	ldr	r3, [r7, #4]
  4024fc:	2200      	movs	r2, #0
  4024fe:	611a      	str	r2, [r3, #16]
		p->put_index = 0;
  402500:	687b      	ldr	r3, [r7, #4]
  402502:	2200      	movs	r2, #0
  402504:	60da      	str	r2, [r3, #12]
		
		//ppbuf_lowpass(p);
		
	}

	return(ret);
  402506:	7bfb      	ldrb	r3, [r7, #15]
}
  402508:	4618      	mov	r0, r3
  40250a:	3714      	adds	r7, #20
  40250c:	46bd      	mov	sp, r7
  40250e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402512:	4770      	bx	lr

00402514 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  402514:	b480      	push	{r7}
  402516:	b083      	sub	sp, #12
  402518:	af00      	add	r7, sp, #0
  40251a:	6078      	str	r0, [r7, #4]
  40251c:	460b      	mov	r3, r1
  40251e:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  402520:	bf00      	nop
  402522:	370c      	adds	r7, #12
  402524:	46bd      	mov	sp, r7
  402526:	f85d 7b04 	ldr.w	r7, [sp], #4
  40252a:	4770      	bx	lr

0040252c <afec_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
  40252c:	b480      	push	{r7}
  40252e:	b085      	sub	sp, #20
  402530:	af00      	add	r7, sp, #0
  402532:	6078      	str	r0, [r7, #4]
  402534:	460b      	mov	r3, r1
  402536:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = afec->AFEC_MR;
  402538:	687b      	ldr	r3, [r7, #4]
  40253a:	685b      	ldr	r3, [r3, #4]
  40253c:	60fb      	str	r3, [r7, #12]

	if (trigger == AFEC_TRIG_FREERUN) {
  40253e:	78fb      	ldrb	r3, [r7, #3]
  402540:	2bff      	cmp	r3, #255	; 0xff
  402542:	d104      	bne.n	40254e <afec_set_trigger+0x22>
		reg |= AFEC_MR_FREERUN_ON;
  402544:	68fb      	ldr	r3, [r7, #12]
  402546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40254a:	60fb      	str	r3, [r7, #12]
  40254c:	e007      	b.n	40255e <afec_set_trigger+0x32>
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  40254e:	68fb      	ldr	r3, [r7, #12]
  402550:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  402554:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  402556:	78fb      	ldrb	r3, [r7, #3]
  402558:	68fa      	ldr	r2, [r7, #12]
  40255a:	4313      	orrs	r3, r2
  40255c:	60fb      	str	r3, [r7, #12]
	}

	afec->AFEC_MR = reg;
  40255e:	687b      	ldr	r3, [r7, #4]
  402560:	68fa      	ldr	r2, [r7, #12]
  402562:	605a      	str	r2, [r3, #4]
}
  402564:	bf00      	nop
  402566:	3714      	adds	r7, #20
  402568:	46bd      	mov	sp, r7
  40256a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40256e:	4770      	bx	lr

00402570 <afec_start_software_conversion>:
 * this function can NOT start analog to digital conversion.
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
  402570:	b480      	push	{r7}
  402572:	b083      	sub	sp, #12
  402574:	af00      	add	r7, sp, #0
  402576:	6078      	str	r0, [r7, #4]
	afec->AFEC_CR = AFEC_CR_START;
  402578:	687b      	ldr	r3, [r7, #4]
  40257a:	2202      	movs	r2, #2
  40257c:	601a      	str	r2, [r3, #0]
}
  40257e:	bf00      	nop
  402580:	370c      	adds	r7, #12
  402582:	46bd      	mov	sp, r7
  402584:	f85d 7b04 	ldr.w	r7, [sp], #4
  402588:	4770      	bx	lr
	...

0040258c <afec_channel_enable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_enable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  40258c:	b580      	push	{r7, lr}
  40258e:	b082      	sub	sp, #8
  402590:	af00      	add	r7, sp, #0
  402592:	6078      	str	r0, [r7, #4]
  402594:	460b      	mov	r3, r1
  402596:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  402598:	887b      	ldrh	r3, [r7, #2]
  40259a:	f640 72ff 	movw	r2, #4095	; 0xfff
  40259e:	4293      	cmp	r3, r2
  4025a0:	d004      	beq.n	4025ac <afec_channel_enable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  4025a2:	887b      	ldrh	r3, [r7, #2]
  4025a4:	4619      	mov	r1, r3
  4025a6:	6878      	ldr	r0, [r7, #4]
  4025a8:	4b0a      	ldr	r3, [pc, #40]	; (4025d4 <afec_channel_enable+0x48>)
  4025aa:	4798      	blx	r3
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4025ac:	887b      	ldrh	r3, [r7, #2]
  4025ae:	f640 72ff 	movw	r2, #4095	; 0xfff
  4025b2:	4293      	cmp	r3, r2
  4025b4:	d005      	beq.n	4025c2 <afec_channel_enable+0x36>
  4025b6:	887b      	ldrh	r3, [r7, #2]
  4025b8:	2201      	movs	r2, #1
  4025ba:	fa02 f303 	lsl.w	r3, r2, r3
  4025be:	461a      	mov	r2, r3
  4025c0:	e001      	b.n	4025c6 <afec_channel_enable+0x3a>
  4025c2:	f640 72ff 	movw	r2, #4095	; 0xfff
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4025c6:	687b      	ldr	r3, [r7, #4]
  4025c8:	615a      	str	r2, [r3, #20]
}
  4025ca:	bf00      	nop
  4025cc:	3708      	adds	r7, #8
  4025ce:	46bd      	mov	sp, r7
  4025d0:	bd80      	pop	{r7, pc}
  4025d2:	bf00      	nop
  4025d4:	00402515 	.word	0x00402515

004025d8 <afec_channel_disable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_disable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  4025d8:	b580      	push	{r7, lr}
  4025da:	b082      	sub	sp, #8
  4025dc:	af00      	add	r7, sp, #0
  4025de:	6078      	str	r0, [r7, #4]
  4025e0:	460b      	mov	r3, r1
  4025e2:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  4025e4:	887b      	ldrh	r3, [r7, #2]
  4025e6:	f640 72ff 	movw	r2, #4095	; 0xfff
  4025ea:	4293      	cmp	r3, r2
  4025ec:	d004      	beq.n	4025f8 <afec_channel_disable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  4025ee:	887b      	ldrh	r3, [r7, #2]
  4025f0:	4619      	mov	r1, r3
  4025f2:	6878      	ldr	r0, [r7, #4]
  4025f4:	4b0a      	ldr	r3, [pc, #40]	; (402620 <afec_channel_disable+0x48>)
  4025f6:	4798      	blx	r3
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4025f8:	887b      	ldrh	r3, [r7, #2]
  4025fa:	f640 72ff 	movw	r2, #4095	; 0xfff
  4025fe:	4293      	cmp	r3, r2
  402600:	d005      	beq.n	40260e <afec_channel_disable+0x36>
  402602:	887b      	ldrh	r3, [r7, #2]
  402604:	2201      	movs	r2, #1
  402606:	fa02 f303 	lsl.w	r3, r2, r3
  40260a:	461a      	mov	r2, r3
  40260c:	e001      	b.n	402612 <afec_channel_disable+0x3a>
  40260e:	f640 72ff 	movw	r2, #4095	; 0xfff
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  402612:	687b      	ldr	r3, [r7, #4]
  402614:	619a      	str	r2, [r3, #24]
}
  402616:	bf00      	nop
  402618:	3708      	adds	r7, #8
  40261a:	46bd      	mov	sp, r7
  40261c:	bd80      	pop	{r7, pc}
  40261e:	bf00      	nop
  402620:	00402515 	.word	0x00402515

00402624 <afec_channel_get_value>:
 *
 * \return AFEC converted value of the selected channel.
 */
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
  402624:	b580      	push	{r7, lr}
  402626:	b082      	sub	sp, #8
  402628:	af00      	add	r7, sp, #0
  40262a:	6078      	str	r0, [r7, #4]
  40262c:	460b      	mov	r3, r1
  40262e:	807b      	strh	r3, [r7, #2]
	afec_ch_sanity_check(afec, afec_ch);
  402630:	887b      	ldrh	r3, [r7, #2]
  402632:	4619      	mov	r1, r3
  402634:	6878      	ldr	r0, [r7, #4]
  402636:	4b05      	ldr	r3, [pc, #20]	; (40264c <afec_channel_get_value+0x28>)
  402638:	4798      	blx	r3

	afec->AFEC_CSELR = afec_ch;
  40263a:	887a      	ldrh	r2, [r7, #2]
  40263c:	687b      	ldr	r3, [r7, #4]
  40263e:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402640:	687b      	ldr	r3, [r7, #4]
  402642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
  402644:	4618      	mov	r0, r3
  402646:	3708      	adds	r7, #8
  402648:	46bd      	mov	sp, r7
  40264a:	bd80      	pop	{r7, pc}
  40264c:	00402515 	.word	0x00402515

00402650 <afec_channel_set_analog_offset>:
 * \param afec_ch AFEC channel number.
 * \param aoffset  Analog offset value.
 */
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
  402650:	b580      	push	{r7, lr}
  402652:	b082      	sub	sp, #8
  402654:	af00      	add	r7, sp, #0
  402656:	6078      	str	r0, [r7, #4]
  402658:	460b      	mov	r3, r1
  40265a:	807b      	strh	r3, [r7, #2]
  40265c:	4613      	mov	r3, r2
  40265e:	803b      	strh	r3, [r7, #0]
	afec_ch_sanity_check(afec, afec_ch);
  402660:	887b      	ldrh	r3, [r7, #2]
  402662:	4619      	mov	r1, r3
  402664:	6878      	ldr	r0, [r7, #4]
  402666:	4b07      	ldr	r3, [pc, #28]	; (402684 <afec_channel_set_analog_offset+0x34>)
  402668:	4798      	blx	r3

	afec->AFEC_CSELR = afec_ch;
  40266a:	887a      	ldrh	r2, [r7, #2]
  40266c:	687b      	ldr	r3, [r7, #4]
  40266e:	665a      	str	r2, [r3, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402670:	883b      	ldrh	r3, [r7, #0]
  402672:	f3c3 020b 	ubfx	r2, r3, #0, #12
  402676:	687b      	ldr	r3, [r7, #4]
  402678:	66da      	str	r2, [r3, #108]	; 0x6c
}
  40267a:	bf00      	nop
  40267c:	3708      	adds	r7, #8
  40267e:	46bd      	mov	sp, r7
  402680:	bd80      	pop	{r7, pc}
  402682:	bf00      	nop
  402684:	00402515 	.word	0x00402515

00402688 <osc_get_rate>:
{
  402688:	b480      	push	{r7}
  40268a:	b083      	sub	sp, #12
  40268c:	af00      	add	r7, sp, #0
  40268e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402690:	687b      	ldr	r3, [r7, #4]
  402692:	2b07      	cmp	r3, #7
  402694:	d825      	bhi.n	4026e2 <osc_get_rate+0x5a>
  402696:	a201      	add	r2, pc, #4	; (adr r2, 40269c <osc_get_rate+0x14>)
  402698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40269c:	004026bd 	.word	0x004026bd
  4026a0:	004026c3 	.word	0x004026c3
  4026a4:	004026c9 	.word	0x004026c9
  4026a8:	004026cf 	.word	0x004026cf
  4026ac:	004026d3 	.word	0x004026d3
  4026b0:	004026d7 	.word	0x004026d7
  4026b4:	004026db 	.word	0x004026db
  4026b8:	004026df 	.word	0x004026df
		return OSC_SLCK_32K_RC_HZ;
  4026bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4026c0:	e010      	b.n	4026e4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4026c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4026c6:	e00d      	b.n	4026e4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4026c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4026cc:	e00a      	b.n	4026e4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4026ce:	4b08      	ldr	r3, [pc, #32]	; (4026f0 <osc_get_rate+0x68>)
  4026d0:	e008      	b.n	4026e4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4026d2:	4b08      	ldr	r3, [pc, #32]	; (4026f4 <osc_get_rate+0x6c>)
  4026d4:	e006      	b.n	4026e4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4026d6:	4b08      	ldr	r3, [pc, #32]	; (4026f8 <osc_get_rate+0x70>)
  4026d8:	e004      	b.n	4026e4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4026da:	4b07      	ldr	r3, [pc, #28]	; (4026f8 <osc_get_rate+0x70>)
  4026dc:	e002      	b.n	4026e4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4026de:	4b06      	ldr	r3, [pc, #24]	; (4026f8 <osc_get_rate+0x70>)
  4026e0:	e000      	b.n	4026e4 <osc_get_rate+0x5c>
	return 0;
  4026e2:	2300      	movs	r3, #0
}
  4026e4:	4618      	mov	r0, r3
  4026e6:	370c      	adds	r7, #12
  4026e8:	46bd      	mov	sp, r7
  4026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026ee:	4770      	bx	lr
  4026f0:	003d0900 	.word	0x003d0900
  4026f4:	007a1200 	.word	0x007a1200
  4026f8:	00b71b00 	.word	0x00b71b00

004026fc <sysclk_get_main_hz>:
{
  4026fc:	b580      	push	{r7, lr}
  4026fe:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402700:	2006      	movs	r0, #6
  402702:	4b05      	ldr	r3, [pc, #20]	; (402718 <sysclk_get_main_hz+0x1c>)
  402704:	4798      	blx	r3
  402706:	4602      	mov	r2, r0
  402708:	4613      	mov	r3, r2
  40270a:	009b      	lsls	r3, r3, #2
  40270c:	4413      	add	r3, r2
  40270e:	009a      	lsls	r2, r3, #2
  402710:	4413      	add	r3, r2
}
  402712:	4618      	mov	r0, r3
  402714:	bd80      	pop	{r7, pc}
  402716:	bf00      	nop
  402718:	00402689 	.word	0x00402689

0040271c <sysclk_get_cpu_hz>:
{
  40271c:	b580      	push	{r7, lr}
  40271e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402720:	4b02      	ldr	r3, [pc, #8]	; (40272c <sysclk_get_cpu_hz+0x10>)
  402722:	4798      	blx	r3
  402724:	4603      	mov	r3, r0
}
  402726:	4618      	mov	r0, r3
  402728:	bd80      	pop	{r7, pc}
  40272a:	bf00      	nop
  40272c:	004026fd 	.word	0x004026fd

00402730 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402730:	b580      	push	{r7, lr}
  402732:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402734:	4b02      	ldr	r3, [pc, #8]	; (402740 <sysclk_get_peripheral_hz+0x10>)
  402736:	4798      	blx	r3
  402738:	4603      	mov	r3, r0
  40273a:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  40273c:	4618      	mov	r0, r3
  40273e:	bd80      	pop	{r7, pc}
  402740:	004026fd 	.word	0x004026fd

00402744 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402744:	b580      	push	{r7, lr}
  402746:	b082      	sub	sp, #8
  402748:	af00      	add	r7, sp, #0
  40274a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40274c:	6878      	ldr	r0, [r7, #4]
  40274e:	4b03      	ldr	r3, [pc, #12]	; (40275c <sysclk_enable_peripheral_clock+0x18>)
  402750:	4798      	blx	r3
}
  402752:	bf00      	nop
  402754:	3708      	adds	r7, #8
  402756:	46bd      	mov	sp, r7
  402758:	bd80      	pop	{r7, pc}
  40275a:	bf00      	nop
  40275c:	00404ec9 	.word	0x00404ec9

00402760 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  402760:	b580      	push	{r7, lr}
  402762:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  402764:	200a      	movs	r0, #10
  402766:	4b08      	ldr	r3, [pc, #32]	; (402788 <ioport_init+0x28>)
  402768:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40276a:	200b      	movs	r0, #11
  40276c:	4b06      	ldr	r3, [pc, #24]	; (402788 <ioport_init+0x28>)
  40276e:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  402770:	200c      	movs	r0, #12
  402772:	4b05      	ldr	r3, [pc, #20]	; (402788 <ioport_init+0x28>)
  402774:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  402776:	2010      	movs	r0, #16
  402778:	4b03      	ldr	r3, [pc, #12]	; (402788 <ioport_init+0x28>)
  40277a:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  40277c:	2011      	movs	r0, #17
  40277e:	4b02      	ldr	r3, [pc, #8]	; (402788 <ioport_init+0x28>)
  402780:	4798      	blx	r3
	arch_ioport_init();
}
  402782:	bf00      	nop
  402784:	bd80      	pop	{r7, pc}
  402786:	bf00      	nop
  402788:	00402745 	.word	0x00402745

0040278c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  40278c:	b580      	push	{r7, lr}
  40278e:	b08c      	sub	sp, #48	; 0x30
  402790:	af00      	add	r7, sp, #0
  402792:	6078      	str	r0, [r7, #4]
  402794:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  402796:	4b49      	ldr	r3, [pc, #292]	; (4028bc <usart_serial_init+0x130>)
  402798:	4798      	blx	r3
  40279a:	4603      	mov	r3, r0
  40279c:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40279e:	683b      	ldr	r3, [r7, #0]
  4027a0:	681b      	ldr	r3, [r3, #0]
  4027a2:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  4027a4:	683b      	ldr	r3, [r7, #0]
  4027a6:	689b      	ldr	r3, [r3, #8]
  4027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  4027aa:	683b      	ldr	r3, [r7, #0]
  4027ac:	681b      	ldr	r3, [r3, #0]
  4027ae:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  4027b0:	683b      	ldr	r3, [r7, #0]
  4027b2:	685b      	ldr	r3, [r3, #4]
  4027b4:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  4027b6:	683b      	ldr	r3, [r7, #0]
  4027b8:	689b      	ldr	r3, [r3, #8]
  4027ba:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4027bc:	683b      	ldr	r3, [r7, #0]
  4027be:	68db      	ldr	r3, [r3, #12]
  4027c0:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4027c2:	2300      	movs	r3, #0
  4027c4:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4027c6:	687b      	ldr	r3, [r7, #4]
  4027c8:	4a3d      	ldr	r2, [pc, #244]	; (4028c0 <usart_serial_init+0x134>)
  4027ca:	4293      	cmp	r3, r2
  4027cc:	d108      	bne.n	4027e0 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  4027ce:	2007      	movs	r0, #7
  4027d0:	4b3c      	ldr	r3, [pc, #240]	; (4028c4 <usart_serial_init+0x138>)
  4027d2:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4027d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4027d8:	4619      	mov	r1, r3
  4027da:	6878      	ldr	r0, [r7, #4]
  4027dc:	4b3a      	ldr	r3, [pc, #232]	; (4028c8 <usart_serial_init+0x13c>)
  4027de:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4027e0:	687b      	ldr	r3, [r7, #4]
  4027e2:	4a3a      	ldr	r2, [pc, #232]	; (4028cc <usart_serial_init+0x140>)
  4027e4:	4293      	cmp	r3, r2
  4027e6:	d108      	bne.n	4027fa <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  4027e8:	2008      	movs	r0, #8
  4027ea:	4b36      	ldr	r3, [pc, #216]	; (4028c4 <usart_serial_init+0x138>)
  4027ec:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4027ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4027f2:	4619      	mov	r1, r3
  4027f4:	6878      	ldr	r0, [r7, #4]
  4027f6:	4b34      	ldr	r3, [pc, #208]	; (4028c8 <usart_serial_init+0x13c>)
  4027f8:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4027fa:	687b      	ldr	r3, [r7, #4]
  4027fc:	4a34      	ldr	r2, [pc, #208]	; (4028d0 <usart_serial_init+0x144>)
  4027fe:	4293      	cmp	r3, r2
  402800:	d108      	bne.n	402814 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  402802:	202c      	movs	r0, #44	; 0x2c
  402804:	4b2f      	ldr	r3, [pc, #188]	; (4028c4 <usart_serial_init+0x138>)
  402806:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402808:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40280c:	4619      	mov	r1, r3
  40280e:	6878      	ldr	r0, [r7, #4]
  402810:	4b2d      	ldr	r3, [pc, #180]	; (4028c8 <usart_serial_init+0x13c>)
  402812:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402814:	687b      	ldr	r3, [r7, #4]
  402816:	4a2f      	ldr	r2, [pc, #188]	; (4028d4 <usart_serial_init+0x148>)
  402818:	4293      	cmp	r3, r2
  40281a:	d108      	bne.n	40282e <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  40281c:	202d      	movs	r0, #45	; 0x2d
  40281e:	4b29      	ldr	r3, [pc, #164]	; (4028c4 <usart_serial_init+0x138>)
  402820:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402822:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402826:	4619      	mov	r1, r3
  402828:	6878      	ldr	r0, [r7, #4]
  40282a:	4b27      	ldr	r3, [pc, #156]	; (4028c8 <usart_serial_init+0x13c>)
  40282c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40282e:	687b      	ldr	r3, [r7, #4]
  402830:	4a29      	ldr	r2, [pc, #164]	; (4028d8 <usart_serial_init+0x14c>)
  402832:	4293      	cmp	r3, r2
  402834:	d111      	bne.n	40285a <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  402836:	200d      	movs	r0, #13
  402838:	4b22      	ldr	r3, [pc, #136]	; (4028c4 <usart_serial_init+0x138>)
  40283a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40283c:	4b1f      	ldr	r3, [pc, #124]	; (4028bc <usart_serial_init+0x130>)
  40283e:	4798      	blx	r3
  402840:	4602      	mov	r2, r0
  402842:	f107 030c 	add.w	r3, r7, #12
  402846:	4619      	mov	r1, r3
  402848:	6878      	ldr	r0, [r7, #4]
  40284a:	4b24      	ldr	r3, [pc, #144]	; (4028dc <usart_serial_init+0x150>)
  40284c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40284e:	6878      	ldr	r0, [r7, #4]
  402850:	4b23      	ldr	r3, [pc, #140]	; (4028e0 <usart_serial_init+0x154>)
  402852:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402854:	6878      	ldr	r0, [r7, #4]
  402856:	4b23      	ldr	r3, [pc, #140]	; (4028e4 <usart_serial_init+0x158>)
  402858:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40285a:	687b      	ldr	r3, [r7, #4]
  40285c:	4a22      	ldr	r2, [pc, #136]	; (4028e8 <usart_serial_init+0x15c>)
  40285e:	4293      	cmp	r3, r2
  402860:	d111      	bne.n	402886 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  402862:	200e      	movs	r0, #14
  402864:	4b17      	ldr	r3, [pc, #92]	; (4028c4 <usart_serial_init+0x138>)
  402866:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402868:	4b14      	ldr	r3, [pc, #80]	; (4028bc <usart_serial_init+0x130>)
  40286a:	4798      	blx	r3
  40286c:	4602      	mov	r2, r0
  40286e:	f107 030c 	add.w	r3, r7, #12
  402872:	4619      	mov	r1, r3
  402874:	6878      	ldr	r0, [r7, #4]
  402876:	4b19      	ldr	r3, [pc, #100]	; (4028dc <usart_serial_init+0x150>)
  402878:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40287a:	6878      	ldr	r0, [r7, #4]
  40287c:	4b18      	ldr	r3, [pc, #96]	; (4028e0 <usart_serial_init+0x154>)
  40287e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402880:	6878      	ldr	r0, [r7, #4]
  402882:	4b18      	ldr	r3, [pc, #96]	; (4028e4 <usart_serial_init+0x158>)
  402884:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402886:	687b      	ldr	r3, [r7, #4]
  402888:	4a18      	ldr	r2, [pc, #96]	; (4028ec <usart_serial_init+0x160>)
  40288a:	4293      	cmp	r3, r2
  40288c:	d111      	bne.n	4028b2 <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  40288e:	200f      	movs	r0, #15
  402890:	4b0c      	ldr	r3, [pc, #48]	; (4028c4 <usart_serial_init+0x138>)
  402892:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402894:	4b09      	ldr	r3, [pc, #36]	; (4028bc <usart_serial_init+0x130>)
  402896:	4798      	blx	r3
  402898:	4602      	mov	r2, r0
  40289a:	f107 030c 	add.w	r3, r7, #12
  40289e:	4619      	mov	r1, r3
  4028a0:	6878      	ldr	r0, [r7, #4]
  4028a2:	4b0e      	ldr	r3, [pc, #56]	; (4028dc <usart_serial_init+0x150>)
  4028a4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4028a6:	6878      	ldr	r0, [r7, #4]
  4028a8:	4b0d      	ldr	r3, [pc, #52]	; (4028e0 <usart_serial_init+0x154>)
  4028aa:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4028ac:	6878      	ldr	r0, [r7, #4]
  4028ae:	4b0d      	ldr	r3, [pc, #52]	; (4028e4 <usart_serial_init+0x158>)
  4028b0:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4028b2:	bf00      	nop
  4028b4:	3730      	adds	r7, #48	; 0x30
  4028b6:	46bd      	mov	sp, r7
  4028b8:	bd80      	pop	{r7, pc}
  4028ba:	bf00      	nop
  4028bc:	00402731 	.word	0x00402731
  4028c0:	400e0800 	.word	0x400e0800
  4028c4:	00402745 	.word	0x00402745
  4028c8:	00404f4d 	.word	0x00404f4d
  4028cc:	400e0a00 	.word	0x400e0a00
  4028d0:	400e1a00 	.word	0x400e1a00
  4028d4:	400e1c00 	.word	0x400e1c00
  4028d8:	40024000 	.word	0x40024000
  4028dc:	004050e5 	.word	0x004050e5
  4028e0:	00405169 	.word	0x00405169
  4028e4:	0040519d 	.word	0x0040519d
  4028e8:	40028000 	.word	0x40028000
  4028ec:	4002c000 	.word	0x4002c000

004028f0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4028f0:	b580      	push	{r7, lr}
  4028f2:	b082      	sub	sp, #8
  4028f4:	af00      	add	r7, sp, #0
  4028f6:	6078      	str	r0, [r7, #4]
  4028f8:	460b      	mov	r3, r1
  4028fa:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4028fc:	687b      	ldr	r3, [r7, #4]
  4028fe:	4a36      	ldr	r2, [pc, #216]	; (4029d8 <usart_serial_putchar+0xe8>)
  402900:	4293      	cmp	r3, r2
  402902:	d10a      	bne.n	40291a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  402904:	bf00      	nop
  402906:	78fb      	ldrb	r3, [r7, #3]
  402908:	4619      	mov	r1, r3
  40290a:	6878      	ldr	r0, [r7, #4]
  40290c:	4b33      	ldr	r3, [pc, #204]	; (4029dc <usart_serial_putchar+0xec>)
  40290e:	4798      	blx	r3
  402910:	4603      	mov	r3, r0
  402912:	2b00      	cmp	r3, #0
  402914:	d1f7      	bne.n	402906 <usart_serial_putchar+0x16>
		return 1;
  402916:	2301      	movs	r3, #1
  402918:	e05a      	b.n	4029d0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40291a:	687b      	ldr	r3, [r7, #4]
  40291c:	4a30      	ldr	r2, [pc, #192]	; (4029e0 <usart_serial_putchar+0xf0>)
  40291e:	4293      	cmp	r3, r2
  402920:	d10a      	bne.n	402938 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  402922:	bf00      	nop
  402924:	78fb      	ldrb	r3, [r7, #3]
  402926:	4619      	mov	r1, r3
  402928:	6878      	ldr	r0, [r7, #4]
  40292a:	4b2c      	ldr	r3, [pc, #176]	; (4029dc <usart_serial_putchar+0xec>)
  40292c:	4798      	blx	r3
  40292e:	4603      	mov	r3, r0
  402930:	2b00      	cmp	r3, #0
  402932:	d1f7      	bne.n	402924 <usart_serial_putchar+0x34>
		return 1;
  402934:	2301      	movs	r3, #1
  402936:	e04b      	b.n	4029d0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402938:	687b      	ldr	r3, [r7, #4]
  40293a:	4a2a      	ldr	r2, [pc, #168]	; (4029e4 <usart_serial_putchar+0xf4>)
  40293c:	4293      	cmp	r3, r2
  40293e:	d10a      	bne.n	402956 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  402940:	bf00      	nop
  402942:	78fb      	ldrb	r3, [r7, #3]
  402944:	4619      	mov	r1, r3
  402946:	6878      	ldr	r0, [r7, #4]
  402948:	4b24      	ldr	r3, [pc, #144]	; (4029dc <usart_serial_putchar+0xec>)
  40294a:	4798      	blx	r3
  40294c:	4603      	mov	r3, r0
  40294e:	2b00      	cmp	r3, #0
  402950:	d1f7      	bne.n	402942 <usart_serial_putchar+0x52>
		return 1;
  402952:	2301      	movs	r3, #1
  402954:	e03c      	b.n	4029d0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402956:	687b      	ldr	r3, [r7, #4]
  402958:	4a23      	ldr	r2, [pc, #140]	; (4029e8 <usart_serial_putchar+0xf8>)
  40295a:	4293      	cmp	r3, r2
  40295c:	d10a      	bne.n	402974 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  40295e:	bf00      	nop
  402960:	78fb      	ldrb	r3, [r7, #3]
  402962:	4619      	mov	r1, r3
  402964:	6878      	ldr	r0, [r7, #4]
  402966:	4b1d      	ldr	r3, [pc, #116]	; (4029dc <usart_serial_putchar+0xec>)
  402968:	4798      	blx	r3
  40296a:	4603      	mov	r3, r0
  40296c:	2b00      	cmp	r3, #0
  40296e:	d1f7      	bne.n	402960 <usart_serial_putchar+0x70>
		return 1;
  402970:	2301      	movs	r3, #1
  402972:	e02d      	b.n	4029d0 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402974:	687b      	ldr	r3, [r7, #4]
  402976:	4a1d      	ldr	r2, [pc, #116]	; (4029ec <usart_serial_putchar+0xfc>)
  402978:	4293      	cmp	r3, r2
  40297a:	d10a      	bne.n	402992 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  40297c:	bf00      	nop
  40297e:	78fb      	ldrb	r3, [r7, #3]
  402980:	4619      	mov	r1, r3
  402982:	6878      	ldr	r0, [r7, #4]
  402984:	4b1a      	ldr	r3, [pc, #104]	; (4029f0 <usart_serial_putchar+0x100>)
  402986:	4798      	blx	r3
  402988:	4603      	mov	r3, r0
  40298a:	2b00      	cmp	r3, #0
  40298c:	d1f7      	bne.n	40297e <usart_serial_putchar+0x8e>
		return 1;
  40298e:	2301      	movs	r3, #1
  402990:	e01e      	b.n	4029d0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402992:	687b      	ldr	r3, [r7, #4]
  402994:	4a17      	ldr	r2, [pc, #92]	; (4029f4 <usart_serial_putchar+0x104>)
  402996:	4293      	cmp	r3, r2
  402998:	d10a      	bne.n	4029b0 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  40299a:	bf00      	nop
  40299c:	78fb      	ldrb	r3, [r7, #3]
  40299e:	4619      	mov	r1, r3
  4029a0:	6878      	ldr	r0, [r7, #4]
  4029a2:	4b13      	ldr	r3, [pc, #76]	; (4029f0 <usart_serial_putchar+0x100>)
  4029a4:	4798      	blx	r3
  4029a6:	4603      	mov	r3, r0
  4029a8:	2b00      	cmp	r3, #0
  4029aa:	d1f7      	bne.n	40299c <usart_serial_putchar+0xac>
		return 1;
  4029ac:	2301      	movs	r3, #1
  4029ae:	e00f      	b.n	4029d0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4029b0:	687b      	ldr	r3, [r7, #4]
  4029b2:	4a11      	ldr	r2, [pc, #68]	; (4029f8 <usart_serial_putchar+0x108>)
  4029b4:	4293      	cmp	r3, r2
  4029b6:	d10a      	bne.n	4029ce <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  4029b8:	bf00      	nop
  4029ba:	78fb      	ldrb	r3, [r7, #3]
  4029bc:	4619      	mov	r1, r3
  4029be:	6878      	ldr	r0, [r7, #4]
  4029c0:	4b0b      	ldr	r3, [pc, #44]	; (4029f0 <usart_serial_putchar+0x100>)
  4029c2:	4798      	blx	r3
  4029c4:	4603      	mov	r3, r0
  4029c6:	2b00      	cmp	r3, #0
  4029c8:	d1f7      	bne.n	4029ba <usart_serial_putchar+0xca>
		return 1;
  4029ca:	2301      	movs	r3, #1
  4029cc:	e000      	b.n	4029d0 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4029ce:	2300      	movs	r3, #0
}
  4029d0:	4618      	mov	r0, r3
  4029d2:	3708      	adds	r7, #8
  4029d4:	46bd      	mov	sp, r7
  4029d6:	bd80      	pop	{r7, pc}
  4029d8:	400e0800 	.word	0x400e0800
  4029dc:	00404fa5 	.word	0x00404fa5
  4029e0:	400e0a00 	.word	0x400e0a00
  4029e4:	400e1a00 	.word	0x400e1a00
  4029e8:	400e1c00 	.word	0x400e1c00
  4029ec:	40024000 	.word	0x40024000
  4029f0:	00405209 	.word	0x00405209
  4029f4:	40028000 	.word	0x40028000
  4029f8:	4002c000 	.word	0x4002c000

004029fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4029fc:	b580      	push	{r7, lr}
  4029fe:	b084      	sub	sp, #16
  402a00:	af00      	add	r7, sp, #0
  402a02:	6078      	str	r0, [r7, #4]
  402a04:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  402a06:	2300      	movs	r3, #0
  402a08:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402a0a:	687b      	ldr	r3, [r7, #4]
  402a0c:	4a34      	ldr	r2, [pc, #208]	; (402ae0 <usart_serial_getchar+0xe4>)
  402a0e:	4293      	cmp	r3, r2
  402a10:	d107      	bne.n	402a22 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  402a12:	bf00      	nop
  402a14:	6839      	ldr	r1, [r7, #0]
  402a16:	6878      	ldr	r0, [r7, #4]
  402a18:	4b32      	ldr	r3, [pc, #200]	; (402ae4 <usart_serial_getchar+0xe8>)
  402a1a:	4798      	blx	r3
  402a1c:	4603      	mov	r3, r0
  402a1e:	2b00      	cmp	r3, #0
  402a20:	d1f8      	bne.n	402a14 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402a22:	687b      	ldr	r3, [r7, #4]
  402a24:	4a30      	ldr	r2, [pc, #192]	; (402ae8 <usart_serial_getchar+0xec>)
  402a26:	4293      	cmp	r3, r2
  402a28:	d107      	bne.n	402a3a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  402a2a:	bf00      	nop
  402a2c:	6839      	ldr	r1, [r7, #0]
  402a2e:	6878      	ldr	r0, [r7, #4]
  402a30:	4b2c      	ldr	r3, [pc, #176]	; (402ae4 <usart_serial_getchar+0xe8>)
  402a32:	4798      	blx	r3
  402a34:	4603      	mov	r3, r0
  402a36:	2b00      	cmp	r3, #0
  402a38:	d1f8      	bne.n	402a2c <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402a3a:	687b      	ldr	r3, [r7, #4]
  402a3c:	4a2b      	ldr	r2, [pc, #172]	; (402aec <usart_serial_getchar+0xf0>)
  402a3e:	4293      	cmp	r3, r2
  402a40:	d107      	bne.n	402a52 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  402a42:	bf00      	nop
  402a44:	6839      	ldr	r1, [r7, #0]
  402a46:	6878      	ldr	r0, [r7, #4]
  402a48:	4b26      	ldr	r3, [pc, #152]	; (402ae4 <usart_serial_getchar+0xe8>)
  402a4a:	4798      	blx	r3
  402a4c:	4603      	mov	r3, r0
  402a4e:	2b00      	cmp	r3, #0
  402a50:	d1f8      	bne.n	402a44 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402a52:	687b      	ldr	r3, [r7, #4]
  402a54:	4a26      	ldr	r2, [pc, #152]	; (402af0 <usart_serial_getchar+0xf4>)
  402a56:	4293      	cmp	r3, r2
  402a58:	d107      	bne.n	402a6a <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  402a5a:	bf00      	nop
  402a5c:	6839      	ldr	r1, [r7, #0]
  402a5e:	6878      	ldr	r0, [r7, #4]
  402a60:	4b20      	ldr	r3, [pc, #128]	; (402ae4 <usart_serial_getchar+0xe8>)
  402a62:	4798      	blx	r3
  402a64:	4603      	mov	r3, r0
  402a66:	2b00      	cmp	r3, #0
  402a68:	d1f8      	bne.n	402a5c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402a6a:	687b      	ldr	r3, [r7, #4]
  402a6c:	4a21      	ldr	r2, [pc, #132]	; (402af4 <usart_serial_getchar+0xf8>)
  402a6e:	4293      	cmp	r3, r2
  402a70:	d10d      	bne.n	402a8e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  402a72:	bf00      	nop
  402a74:	f107 030c 	add.w	r3, r7, #12
  402a78:	4619      	mov	r1, r3
  402a7a:	6878      	ldr	r0, [r7, #4]
  402a7c:	4b1e      	ldr	r3, [pc, #120]	; (402af8 <usart_serial_getchar+0xfc>)
  402a7e:	4798      	blx	r3
  402a80:	4603      	mov	r3, r0
  402a82:	2b00      	cmp	r3, #0
  402a84:	d1f6      	bne.n	402a74 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  402a86:	68fb      	ldr	r3, [r7, #12]
  402a88:	b2da      	uxtb	r2, r3
  402a8a:	683b      	ldr	r3, [r7, #0]
  402a8c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402a8e:	687b      	ldr	r3, [r7, #4]
  402a90:	4a1a      	ldr	r2, [pc, #104]	; (402afc <usart_serial_getchar+0x100>)
  402a92:	4293      	cmp	r3, r2
  402a94:	d10d      	bne.n	402ab2 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  402a96:	bf00      	nop
  402a98:	f107 030c 	add.w	r3, r7, #12
  402a9c:	4619      	mov	r1, r3
  402a9e:	6878      	ldr	r0, [r7, #4]
  402aa0:	4b15      	ldr	r3, [pc, #84]	; (402af8 <usart_serial_getchar+0xfc>)
  402aa2:	4798      	blx	r3
  402aa4:	4603      	mov	r3, r0
  402aa6:	2b00      	cmp	r3, #0
  402aa8:	d1f6      	bne.n	402a98 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  402aaa:	68fb      	ldr	r3, [r7, #12]
  402aac:	b2da      	uxtb	r2, r3
  402aae:	683b      	ldr	r3, [r7, #0]
  402ab0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402ab2:	687b      	ldr	r3, [r7, #4]
  402ab4:	4a12      	ldr	r2, [pc, #72]	; (402b00 <usart_serial_getchar+0x104>)
  402ab6:	4293      	cmp	r3, r2
  402ab8:	d10d      	bne.n	402ad6 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  402aba:	bf00      	nop
  402abc:	f107 030c 	add.w	r3, r7, #12
  402ac0:	4619      	mov	r1, r3
  402ac2:	6878      	ldr	r0, [r7, #4]
  402ac4:	4b0c      	ldr	r3, [pc, #48]	; (402af8 <usart_serial_getchar+0xfc>)
  402ac6:	4798      	blx	r3
  402ac8:	4603      	mov	r3, r0
  402aca:	2b00      	cmp	r3, #0
  402acc:	d1f6      	bne.n	402abc <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  402ace:	68fb      	ldr	r3, [r7, #12]
  402ad0:	b2da      	uxtb	r2, r3
  402ad2:	683b      	ldr	r3, [r7, #0]
  402ad4:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402ad6:	bf00      	nop
  402ad8:	3710      	adds	r7, #16
  402ada:	46bd      	mov	sp, r7
  402adc:	bd80      	pop	{r7, pc}
  402ade:	bf00      	nop
  402ae0:	400e0800 	.word	0x400e0800
  402ae4:	00404fd5 	.word	0x00404fd5
  402ae8:	400e0a00 	.word	0x400e0a00
  402aec:	400e1a00 	.word	0x400e1a00
  402af0:	400e1c00 	.word	0x400e1c00
  402af4:	40024000 	.word	0x40024000
  402af8:	0040523b 	.word	0x0040523b
  402afc:	40028000 	.word	0x40028000
  402b00:	4002c000 	.word	0x4002c000

00402b04 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  402b04:	b580      	push	{r7, lr}
  402b06:	b082      	sub	sp, #8
  402b08:	af00      	add	r7, sp, #0
  402b0a:	6078      	str	r0, [r7, #4]
  402b0c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  402b0e:	4a0f      	ldr	r2, [pc, #60]	; (402b4c <stdio_serial_init+0x48>)
  402b10:	687b      	ldr	r3, [r7, #4]
  402b12:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402b14:	4b0e      	ldr	r3, [pc, #56]	; (402b50 <stdio_serial_init+0x4c>)
  402b16:	4a0f      	ldr	r2, [pc, #60]	; (402b54 <stdio_serial_init+0x50>)
  402b18:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402b1a:	4b0f      	ldr	r3, [pc, #60]	; (402b58 <stdio_serial_init+0x54>)
  402b1c:	4a0f      	ldr	r2, [pc, #60]	; (402b5c <stdio_serial_init+0x58>)
  402b1e:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  402b20:	6839      	ldr	r1, [r7, #0]
  402b22:	6878      	ldr	r0, [r7, #4]
  402b24:	4b0e      	ldr	r3, [pc, #56]	; (402b60 <stdio_serial_init+0x5c>)
  402b26:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402b28:	4b0e      	ldr	r3, [pc, #56]	; (402b64 <stdio_serial_init+0x60>)
  402b2a:	681b      	ldr	r3, [r3, #0]
  402b2c:	689b      	ldr	r3, [r3, #8]
  402b2e:	2100      	movs	r1, #0
  402b30:	4618      	mov	r0, r3
  402b32:	4b0d      	ldr	r3, [pc, #52]	; (402b68 <stdio_serial_init+0x64>)
  402b34:	4798      	blx	r3
	setbuf(stdin, NULL);
  402b36:	4b0b      	ldr	r3, [pc, #44]	; (402b64 <stdio_serial_init+0x60>)
  402b38:	681b      	ldr	r3, [r3, #0]
  402b3a:	685b      	ldr	r3, [r3, #4]
  402b3c:	2100      	movs	r1, #0
  402b3e:	4618      	mov	r0, r3
  402b40:	4b09      	ldr	r3, [pc, #36]	; (402b68 <stdio_serial_init+0x64>)
  402b42:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  402b44:	bf00      	nop
  402b46:	3708      	adds	r7, #8
  402b48:	46bd      	mov	sp, r7
  402b4a:	bd80      	pop	{r7, pc}
  402b4c:	20415b34 	.word	0x20415b34
  402b50:	20415b30 	.word	0x20415b30
  402b54:	004028f1 	.word	0x004028f1
  402b58:	20415b2c 	.word	0x20415b2c
  402b5c:	004029fd 	.word	0x004029fd
  402b60:	0040278d 	.word	0x0040278d
  402b64:	2040003c 	.word	0x2040003c
  402b68:	00406181 	.word	0x00406181

00402b6c <vApplicationMallocFailedHook>:
extern void vApplicationTickHook(void)
{
}

extern void vApplicationMallocFailedHook(void)
{
  402b6c:	b580      	push	{r7, lr}
  402b6e:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
  402b70:	4b01      	ldr	r3, [pc, #4]	; (402b78 <vApplicationMallocFailedHook+0xc>)
  402b72:	4798      	blx	r3
  402b74:	bf00      	nop
  402b76:	e7fd      	b.n	402b74 <vApplicationMallocFailedHook+0x8>
  402b78:	0040059d 	.word	0x0040059d

00402b7c <TC0_Handler>:
/* Callbacks / Handler                                                 */
/************************************************************************/
/**
*  Interrupt handler for TC1 interrupt.
*/
void TC0_Handler(void){
  402b7c:	b580      	push	{r7, lr}
  402b7e:	b082      	sub	sp, #8
  402b80:	af00      	add	r7, sp, #0
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrup��o foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC0, 0);
  402b82:	2100      	movs	r1, #0
  402b84:	4804      	ldr	r0, [pc, #16]	; (402b98 <TC0_Handler+0x1c>)
  402b86:	4b05      	ldr	r3, [pc, #20]	; (402b9c <TC0_Handler+0x20>)
  402b88:	4798      	blx	r3
  402b8a:	4603      	mov	r3, r0
  402b8c:	607b      	str	r3, [r7, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  402b8e:	687b      	ldr	r3, [r7, #4]

}
  402b90:	bf00      	nop
  402b92:	3708      	adds	r7, #8
  402b94:	46bd      	mov	sp, r7
  402b96:	bd80      	pop	{r7, pc}
  402b98:	4000c000 	.word	0x4000c000
  402b9c:	00403849 	.word	0x00403849

00402ba0 <Saturation>:
static void Volume(){
	g_ul_value  = (int) ((float) g_ul_value * volume);

}

static void Saturation(int value) {
  402ba0:	b480      	push	{r7}
  402ba2:	b085      	sub	sp, #20
  402ba4:	af00      	add	r7, sp, #0
  402ba6:	6078      	str	r0, [r7, #4]
	int sat_value = (int) ((100 - value) * ground / 100) + 20;
  402ba8:	687b      	ldr	r3, [r7, #4]
  402baa:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  402bae:	4a17      	ldr	r2, [pc, #92]	; (402c0c <Saturation+0x6c>)
  402bb0:	6812      	ldr	r2, [r2, #0]
  402bb2:	fb02 f303 	mul.w	r3, r2, r3
  402bb6:	4a16      	ldr	r2, [pc, #88]	; (402c10 <Saturation+0x70>)
  402bb8:	fb82 1203 	smull	r1, r2, r2, r3
  402bbc:	1152      	asrs	r2, r2, #5
  402bbe:	17db      	asrs	r3, r3, #31
  402bc0:	1ad3      	subs	r3, r2, r3
  402bc2:	3314      	adds	r3, #20
  402bc4:	60fb      	str	r3, [r7, #12]
	
	if (g_ul_value > ground + sat_value) g_ul_value = ground + sat_value;
  402bc6:	4b11      	ldr	r3, [pc, #68]	; (402c0c <Saturation+0x6c>)
  402bc8:	681a      	ldr	r2, [r3, #0]
  402bca:	68fb      	ldr	r3, [r7, #12]
  402bcc:	441a      	add	r2, r3
  402bce:	4b11      	ldr	r3, [pc, #68]	; (402c14 <Saturation+0x74>)
  402bd0:	681b      	ldr	r3, [r3, #0]
  402bd2:	429a      	cmp	r2, r3
  402bd4:	da05      	bge.n	402be2 <Saturation+0x42>
  402bd6:	4b0d      	ldr	r3, [pc, #52]	; (402c0c <Saturation+0x6c>)
  402bd8:	681a      	ldr	r2, [r3, #0]
  402bda:	68fb      	ldr	r3, [r7, #12]
  402bdc:	4413      	add	r3, r2
  402bde:	4a0d      	ldr	r2, [pc, #52]	; (402c14 <Saturation+0x74>)
  402be0:	6013      	str	r3, [r2, #0]
	if (g_ul_value < ground - sat_value) g_ul_value = ground - sat_value;
  402be2:	4b0a      	ldr	r3, [pc, #40]	; (402c0c <Saturation+0x6c>)
  402be4:	681a      	ldr	r2, [r3, #0]
  402be6:	68fb      	ldr	r3, [r7, #12]
  402be8:	1ad2      	subs	r2, r2, r3
  402bea:	4b0a      	ldr	r3, [pc, #40]	; (402c14 <Saturation+0x74>)
  402bec:	681b      	ldr	r3, [r3, #0]
  402bee:	429a      	cmp	r2, r3
  402bf0:	dd05      	ble.n	402bfe <Saturation+0x5e>
  402bf2:	4b06      	ldr	r3, [pc, #24]	; (402c0c <Saturation+0x6c>)
  402bf4:	681a      	ldr	r2, [r3, #0]
  402bf6:	68fb      	ldr	r3, [r7, #12]
  402bf8:	1ad3      	subs	r3, r2, r3
  402bfa:	4a06      	ldr	r2, [pc, #24]	; (402c14 <Saturation+0x74>)
  402bfc:	6013      	str	r3, [r2, #0]
}
  402bfe:	bf00      	nop
  402c00:	3714      	adds	r7, #20
  402c02:	46bd      	mov	sp, r7
  402c04:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c08:	4770      	bx	lr
  402c0a:	bf00      	nop
  402c0c:	20400030 	.word	0x20400030
  402c10:	51eb851f 	.word	0x51eb851f
  402c14:	2040ae74 	.word	0x2040ae74

00402c18 <Gain>:

static void Gain(int value) {
  402c18:	b480      	push	{r7}
  402c1a:	b085      	sub	sp, #20
  402c1c:	af00      	add	r7, sp, #0
  402c1e:	6078      	str	r0, [r7, #4]
	int percent100 = 90;
  402c20:	235a      	movs	r3, #90	; 0x5a
  402c22:	60fb      	str	r3, [r7, #12]
	
	g_ul_value = (int) (((g_ul_value - ground) * value / percent100) + ground);
  402c24:	4b0a      	ldr	r3, [pc, #40]	; (402c50 <Gain+0x38>)
  402c26:	681a      	ldr	r2, [r3, #0]
  402c28:	4b0a      	ldr	r3, [pc, #40]	; (402c54 <Gain+0x3c>)
  402c2a:	681b      	ldr	r3, [r3, #0]
  402c2c:	1ad3      	subs	r3, r2, r3
  402c2e:	687a      	ldr	r2, [r7, #4]
  402c30:	fb02 f203 	mul.w	r2, r2, r3
  402c34:	68fb      	ldr	r3, [r7, #12]
  402c36:	fb92 f2f3 	sdiv	r2, r2, r3
  402c3a:	4b06      	ldr	r3, [pc, #24]	; (402c54 <Gain+0x3c>)
  402c3c:	681b      	ldr	r3, [r3, #0]
  402c3e:	4413      	add	r3, r2
  402c40:	4a03      	ldr	r2, [pc, #12]	; (402c50 <Gain+0x38>)
  402c42:	6013      	str	r3, [r2, #0]
}
  402c44:	bf00      	nop
  402c46:	3714      	adds	r7, #20
  402c48:	46bd      	mov	sp, r7
  402c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c4e:	4770      	bx	lr
  402c50:	2040ae74 	.word	0x2040ae74
  402c54:	20400030 	.word	0x20400030

00402c58 <lowPassFrequency>:

static void lowPassFrequency(int CUTOFF)
{
  402c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402c5c:	b08b      	sub	sp, #44	; 0x2c
  402c5e:	af00      	add	r7, sp, #0
  402c60:	6078      	str	r0, [r7, #4]
	double RC = 1.0/(CUTOFF*2*3.14);
  402c62:	687b      	ldr	r3, [r7, #4]
  402c64:	005a      	lsls	r2, r3, #1
  402c66:	4b42      	ldr	r3, [pc, #264]	; (402d70 <lowPassFrequency+0x118>)
  402c68:	4610      	mov	r0, r2
  402c6a:	4798      	blx	r3
  402c6c:	4c41      	ldr	r4, [pc, #260]	; (402d74 <lowPassFrequency+0x11c>)
  402c6e:	a33c      	add	r3, pc, #240	; (adr r3, 402d60 <lowPassFrequency+0x108>)
  402c70:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c74:	47a0      	blx	r4
  402c76:	4603      	mov	r3, r0
  402c78:	460c      	mov	r4, r1
  402c7a:	461a      	mov	r2, r3
  402c7c:	4623      	mov	r3, r4
  402c7e:	4c3e      	ldr	r4, [pc, #248]	; (402d78 <lowPassFrequency+0x120>)
  402c80:	f04f 0000 	mov.w	r0, #0
  402c84:	493d      	ldr	r1, [pc, #244]	; (402d7c <lowPassFrequency+0x124>)
  402c86:	47a0      	blx	r4
  402c88:	4603      	mov	r3, r0
  402c8a:	460c      	mov	r4, r1
  402c8c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double dt = 1.0/22000;
  402c90:	a435      	add	r4, pc, #212	; (adr r4, 402d68 <lowPassFrequency+0x110>)
  402c92:	e9d4 3400 	ldrd	r3, r4, [r4]
  402c96:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double alpha = dt/(RC+dt);
  402c9a:	4c39      	ldr	r4, [pc, #228]	; (402d80 <lowPassFrequency+0x128>)
  402c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
  402ca0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
  402ca4:	47a0      	blx	r4
  402ca6:	4603      	mov	r3, r0
  402ca8:	460c      	mov	r4, r1
  402caa:	461a      	mov	r2, r3
  402cac:	4623      	mov	r3, r4
  402cae:	4c32      	ldr	r4, [pc, #200]	; (402d78 <lowPassFrequency+0x120>)
  402cb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
  402cb4:	47a0      	blx	r4
  402cb6:	4603      	mov	r3, r0
  402cb8:	460c      	mov	r4, r1
  402cba:	e9c7 3404 	strd	r3, r4, [r7, #16]
	
	int current = g_ul_value - ground;
  402cbe:	4b31      	ldr	r3, [pc, #196]	; (402d84 <lowPassFrequency+0x12c>)
  402cc0:	681a      	ldr	r2, [r3, #0]
  402cc2:	4b31      	ldr	r3, [pc, #196]	; (402d88 <lowPassFrequency+0x130>)
  402cc4:	681b      	ldr	r3, [r3, #0]
  402cc6:	1ad3      	subs	r3, r2, r3
  402cc8:	60fb      	str	r3, [r7, #12]
	int past = g_ul_value_old - ground;
  402cca:	4b30      	ldr	r3, [pc, #192]	; (402d8c <lowPassFrequency+0x134>)
  402ccc:	681a      	ldr	r2, [r3, #0]
  402cce:	4b2e      	ldr	r3, [pc, #184]	; (402d88 <lowPassFrequency+0x130>)
  402cd0:	681b      	ldr	r3, [r3, #0]
  402cd2:	1ad3      	subs	r3, r2, r3
  402cd4:	60bb      	str	r3, [r7, #8]
	
	g_ul_value = (int) ((double) past + (alpha*((double) current - (double) past)) + ground);
  402cd6:	4b26      	ldr	r3, [pc, #152]	; (402d70 <lowPassFrequency+0x118>)
  402cd8:	68b8      	ldr	r0, [r7, #8]
  402cda:	4798      	blx	r3
  402cdc:	4605      	mov	r5, r0
  402cde:	460e      	mov	r6, r1
  402ce0:	4b23      	ldr	r3, [pc, #140]	; (402d70 <lowPassFrequency+0x118>)
  402ce2:	68f8      	ldr	r0, [r7, #12]
  402ce4:	4798      	blx	r3
  402ce6:	4680      	mov	r8, r0
  402ce8:	4689      	mov	r9, r1
  402cea:	4b21      	ldr	r3, [pc, #132]	; (402d70 <lowPassFrequency+0x118>)
  402cec:	68b8      	ldr	r0, [r7, #8]
  402cee:	4798      	blx	r3
  402cf0:	4602      	mov	r2, r0
  402cf2:	460b      	mov	r3, r1
  402cf4:	4c26      	ldr	r4, [pc, #152]	; (402d90 <lowPassFrequency+0x138>)
  402cf6:	4640      	mov	r0, r8
  402cf8:	4649      	mov	r1, r9
  402cfa:	47a0      	blx	r4
  402cfc:	4603      	mov	r3, r0
  402cfe:	460c      	mov	r4, r1
  402d00:	4618      	mov	r0, r3
  402d02:	4621      	mov	r1, r4
  402d04:	4c1b      	ldr	r4, [pc, #108]	; (402d74 <lowPassFrequency+0x11c>)
  402d06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
  402d0a:	47a0      	blx	r4
  402d0c:	4603      	mov	r3, r0
  402d0e:	460c      	mov	r4, r1
  402d10:	461a      	mov	r2, r3
  402d12:	4623      	mov	r3, r4
  402d14:	4c1a      	ldr	r4, [pc, #104]	; (402d80 <lowPassFrequency+0x128>)
  402d16:	4628      	mov	r0, r5
  402d18:	4631      	mov	r1, r6
  402d1a:	47a0      	blx	r4
  402d1c:	4603      	mov	r3, r0
  402d1e:	460c      	mov	r4, r1
  402d20:	461d      	mov	r5, r3
  402d22:	4626      	mov	r6, r4
  402d24:	4b18      	ldr	r3, [pc, #96]	; (402d88 <lowPassFrequency+0x130>)
  402d26:	681a      	ldr	r2, [r3, #0]
  402d28:	4b11      	ldr	r3, [pc, #68]	; (402d70 <lowPassFrequency+0x118>)
  402d2a:	4610      	mov	r0, r2
  402d2c:	4798      	blx	r3
  402d2e:	4602      	mov	r2, r0
  402d30:	460b      	mov	r3, r1
  402d32:	4c13      	ldr	r4, [pc, #76]	; (402d80 <lowPassFrequency+0x128>)
  402d34:	4628      	mov	r0, r5
  402d36:	4631      	mov	r1, r6
  402d38:	47a0      	blx	r4
  402d3a:	4603      	mov	r3, r0
  402d3c:	460c      	mov	r4, r1
  402d3e:	4619      	mov	r1, r3
  402d40:	4622      	mov	r2, r4
  402d42:	4b14      	ldr	r3, [pc, #80]	; (402d94 <lowPassFrequency+0x13c>)
  402d44:	4608      	mov	r0, r1
  402d46:	4611      	mov	r1, r2
  402d48:	4798      	blx	r3
  402d4a:	4602      	mov	r2, r0
  402d4c:	4b0d      	ldr	r3, [pc, #52]	; (402d84 <lowPassFrequency+0x12c>)
  402d4e:	601a      	str	r2, [r3, #0]
}
  402d50:	bf00      	nop
  402d52:	372c      	adds	r7, #44	; 0x2c
  402d54:	46bd      	mov	sp, r7
  402d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402d5a:	bf00      	nop
  402d5c:	f3af 8000 	nop.w
  402d60:	51eb851f 	.word	0x51eb851f
  402d64:	40091eb8 	.word	0x40091eb8
  402d68:	4a19b16e 	.word	0x4a19b16e
  402d6c:	3f07d4ce 	.word	0x3f07d4ce
  402d70:	0040594d 	.word	0x0040594d
  402d74:	00405a19 	.word	0x00405a19
  402d78:	00405c6d 	.word	0x00405c6d
  402d7c:	3ff00000 	.word	0x3ff00000
  402d80:	004056b5 	.word	0x004056b5
  402d84:	2040ae74 	.word	0x2040ae74
  402d88:	20400030 	.word	0x20400030
  402d8c:	2040ae70 	.word	0x2040ae70
  402d90:	004056b1 	.word	0x004056b1
  402d94:	00405e3d 	.word	0x00405e3d

00402d98 <reverb>:

static void reverb(int value) {
  402d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402d9c:	b087      	sub	sp, #28
  402d9e:	af00      	add	r7, sp, #0
  402da0:	6078      	str	r0, [r7, #4]
	double max_value = 100;
  402da2:	f04f 0300 	mov.w	r3, #0
  402da6:	4c2f      	ldr	r4, [pc, #188]	; (402e64 <reverb+0xcc>)
  402da8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double normal_value = (g_ul_value - ground);
  402dac:	4b2e      	ldr	r3, [pc, #184]	; (402e68 <reverb+0xd0>)
  402dae:	681a      	ldr	r2, [r3, #0]
  402db0:	4b2e      	ldr	r3, [pc, #184]	; (402e6c <reverb+0xd4>)
  402db2:	681b      	ldr	r3, [r3, #0]
  402db4:	1ad2      	subs	r2, r2, r3
  402db6:	4b2e      	ldr	r3, [pc, #184]	; (402e70 <reverb+0xd8>)
  402db8:	4610      	mov	r0, r2
  402dba:	4798      	blx	r3
  402dbc:	4603      	mov	r3, r0
  402dbe:	460c      	mov	r4, r1
  402dc0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	
	g_ul_value = (int) (normal_value + reverb_buffer.values[reverb_buffer.p]*(((double) value) / (max_value*2)) + ground);
  402dc4:	4a2b      	ldr	r2, [pc, #172]	; (402e74 <reverb+0xdc>)
  402dc6:	f64a 33e0 	movw	r3, #44000	; 0xabe0
  402dca:	4413      	add	r3, r2
  402dcc:	681b      	ldr	r3, [r3, #0]
  402dce:	4a29      	ldr	r2, [pc, #164]	; (402e74 <reverb+0xdc>)
  402dd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  402dd4:	4b26      	ldr	r3, [pc, #152]	; (402e70 <reverb+0xd8>)
  402dd6:	4610      	mov	r0, r2
  402dd8:	4798      	blx	r3
  402dda:	4605      	mov	r5, r0
  402ddc:	460e      	mov	r6, r1
  402dde:	4b24      	ldr	r3, [pc, #144]	; (402e70 <reverb+0xd8>)
  402de0:	6878      	ldr	r0, [r7, #4]
  402de2:	4798      	blx	r3
  402de4:	4680      	mov	r8, r0
  402de6:	4689      	mov	r9, r1
  402de8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
  402dec:	4c22      	ldr	r4, [pc, #136]	; (402e78 <reverb+0xe0>)
  402dee:	4602      	mov	r2, r0
  402df0:	460b      	mov	r3, r1
  402df2:	47a0      	blx	r4
  402df4:	4603      	mov	r3, r0
  402df6:	460c      	mov	r4, r1
  402df8:	461a      	mov	r2, r3
  402dfa:	4623      	mov	r3, r4
  402dfc:	4c1f      	ldr	r4, [pc, #124]	; (402e7c <reverb+0xe4>)
  402dfe:	4640      	mov	r0, r8
  402e00:	4649      	mov	r1, r9
  402e02:	47a0      	blx	r4
  402e04:	4603      	mov	r3, r0
  402e06:	460c      	mov	r4, r1
  402e08:	461a      	mov	r2, r3
  402e0a:	4623      	mov	r3, r4
  402e0c:	4c1c      	ldr	r4, [pc, #112]	; (402e80 <reverb+0xe8>)
  402e0e:	4628      	mov	r0, r5
  402e10:	4631      	mov	r1, r6
  402e12:	47a0      	blx	r4
  402e14:	4603      	mov	r3, r0
  402e16:	460c      	mov	r4, r1
  402e18:	4618      	mov	r0, r3
  402e1a:	4621      	mov	r1, r4
  402e1c:	4c16      	ldr	r4, [pc, #88]	; (402e78 <reverb+0xe0>)
  402e1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
  402e22:	47a0      	blx	r4
  402e24:	4603      	mov	r3, r0
  402e26:	460c      	mov	r4, r1
  402e28:	461d      	mov	r5, r3
  402e2a:	4626      	mov	r6, r4
  402e2c:	4b0f      	ldr	r3, [pc, #60]	; (402e6c <reverb+0xd4>)
  402e2e:	681a      	ldr	r2, [r3, #0]
  402e30:	4b0f      	ldr	r3, [pc, #60]	; (402e70 <reverb+0xd8>)
  402e32:	4610      	mov	r0, r2
  402e34:	4798      	blx	r3
  402e36:	4602      	mov	r2, r0
  402e38:	460b      	mov	r3, r1
  402e3a:	4c0f      	ldr	r4, [pc, #60]	; (402e78 <reverb+0xe0>)
  402e3c:	4628      	mov	r0, r5
  402e3e:	4631      	mov	r1, r6
  402e40:	47a0      	blx	r4
  402e42:	4603      	mov	r3, r0
  402e44:	460c      	mov	r4, r1
  402e46:	4619      	mov	r1, r3
  402e48:	4622      	mov	r2, r4
  402e4a:	4b0e      	ldr	r3, [pc, #56]	; (402e84 <reverb+0xec>)
  402e4c:	4608      	mov	r0, r1
  402e4e:	4611      	mov	r1, r2
  402e50:	4798      	blx	r3
  402e52:	4602      	mov	r2, r0
  402e54:	4b04      	ldr	r3, [pc, #16]	; (402e68 <reverb+0xd0>)
  402e56:	601a      	str	r2, [r3, #0]
}
  402e58:	bf00      	nop
  402e5a:	371c      	adds	r7, #28
  402e5c:	46bd      	mov	sp, r7
  402e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402e62:	bf00      	nop
  402e64:	40590000 	.word	0x40590000
  402e68:	2040ae74 	.word	0x2040ae74
  402e6c:	20400030 	.word	0x20400030
  402e70:	0040594d 	.word	0x0040594d
  402e74:	2040af34 	.word	0x2040af34
  402e78:	004056b5 	.word	0x004056b5
  402e7c:	00405c6d 	.word	0x00405c6d
  402e80:	00405a19 	.word	0x00405a19
  402e84:	00405e3d 	.word	0x00405e3d

00402e88 <AFEC_Audio_callback>:

static void AFEC_Audio_callback(void){
  402e88:	b580      	push	{r7, lr}
  402e8a:	af00      	add	r7, sp, #0
	/** The conversion data value */

	// check swap
	if(ppbuf_get_full_signal(&buffer,false) == true) {
  402e8c:	2100      	movs	r1, #0
  402e8e:	483d      	ldr	r0, [pc, #244]	; (402f84 <AFEC_Audio_callback+0xfc>)
  402e90:	4b3d      	ldr	r3, [pc, #244]	; (402f88 <AFEC_Audio_callback+0x100>)
  402e92:	4798      	blx	r3
  402e94:	4603      	mov	r3, r0
  402e96:	2b00      	cmp	r3, #0
  402e98:	d006      	beq.n	402ea8 <AFEC_Audio_callback+0x20>
		ppbuf_get_full_signal(&buffer,true); // swap
  402e9a:	2101      	movs	r1, #1
  402e9c:	4839      	ldr	r0, [pc, #228]	; (402f84 <AFEC_Audio_callback+0xfc>)
  402e9e:	4b3a      	ldr	r3, [pc, #232]	; (402f88 <AFEC_Audio_callback+0x100>)
  402ea0:	4798      	blx	r3
// 		printf("Signal: %d\n", g_ul_value);
// 		printf("Average: %d\n", count/11000);
		count = 0;
  402ea2:	4b3a      	ldr	r3, [pc, #232]	; (402f8c <AFEC_Audio_callback+0x104>)
  402ea4:	2200      	movs	r2, #0
  402ea6:	601a      	str	r2, [r3, #0]
	}
	
	g_ul_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_PIN);
  402ea8:	2100      	movs	r1, #0
  402eaa:	4839      	ldr	r0, [pc, #228]	; (402f90 <AFEC_Audio_callback+0x108>)
  402eac:	4b39      	ldr	r3, [pc, #228]	; (402f94 <AFEC_Audio_callback+0x10c>)
  402eae:	4798      	blx	r3
  402eb0:	4603      	mov	r3, r0
  402eb2:	461a      	mov	r2, r3
  402eb4:	4b38      	ldr	r3, [pc, #224]	; (402f98 <AFEC_Audio_callback+0x110>)
  402eb6:	601a      	str	r2, [r3, #0]
	
	/*        EFFECTS        */
	reverb(100);
  402eb8:	2064      	movs	r0, #100	; 0x64
  402eba:	4b38      	ldr	r3, [pc, #224]	; (402f9c <AFEC_Audio_callback+0x114>)
  402ebc:	4798      	blx	r3
	Saturation(saturation_value);
  402ebe:	4b38      	ldr	r3, [pc, #224]	; (402fa0 <AFEC_Audio_callback+0x118>)
  402ec0:	681b      	ldr	r3, [r3, #0]
  402ec2:	4618      	mov	r0, r3
  402ec4:	4b37      	ldr	r3, [pc, #220]	; (402fa4 <AFEC_Audio_callback+0x11c>)
  402ec6:	4798      	blx	r3
	Gain(gain_value);
  402ec8:	4b37      	ldr	r3, [pc, #220]	; (402fa8 <AFEC_Audio_callback+0x120>)
  402eca:	681b      	ldr	r3, [r3, #0]
  402ecc:	4618      	mov	r0, r3
  402ece:	4b37      	ldr	r3, [pc, #220]	; (402fac <AFEC_Audio_callback+0x124>)
  402ed0:	4798      	blx	r3
	lowPassFrequency(lowpass_value);
  402ed2:	4b37      	ldr	r3, [pc, #220]	; (402fb0 <AFEC_Audio_callback+0x128>)
  402ed4:	681b      	ldr	r3, [r3, #0]
  402ed6:	4618      	mov	r0, r3
  402ed8:	4b36      	ldr	r3, [pc, #216]	; (402fb4 <AFEC_Audio_callback+0x12c>)
  402eda:	4798      	blx	r3
	
	
	count += g_ul_value;
  402edc:	4b2b      	ldr	r3, [pc, #172]	; (402f8c <AFEC_Audio_callback+0x104>)
  402ede:	681a      	ldr	r2, [r3, #0]
  402ee0:	4b2d      	ldr	r3, [pc, #180]	; (402f98 <AFEC_Audio_callback+0x110>)
  402ee2:	681b      	ldr	r3, [r3, #0]
  402ee4:	4413      	add	r3, r2
  402ee6:	4a29      	ldr	r2, [pc, #164]	; (402f8c <AFEC_Audio_callback+0x104>)
  402ee8:	6013      	str	r3, [r2, #0]
	g_ul_value_old = g_ul_value;
  402eea:	4b2b      	ldr	r3, [pc, #172]	; (402f98 <AFEC_Audio_callback+0x110>)
  402eec:	681b      	ldr	r3, [r3, #0]
  402eee:	4a32      	ldr	r2, [pc, #200]	; (402fb8 <AFEC_Audio_callback+0x130>)
  402ef0:	6013      	str	r3, [r2, #0]
	if (reverb_buffer.p < reverb_buffer.maxp) {
  402ef2:	4a32      	ldr	r2, [pc, #200]	; (402fbc <AFEC_Audio_callback+0x134>)
  402ef4:	f64a 33e0 	movw	r3, #44000	; 0xabe0
  402ef8:	4413      	add	r3, r2
  402efa:	681a      	ldr	r2, [r3, #0]
  402efc:	492f      	ldr	r1, [pc, #188]	; (402fbc <AFEC_Audio_callback+0x134>)
  402efe:	f64a 33e4 	movw	r3, #44004	; 0xabe4
  402f02:	440b      	add	r3, r1
  402f04:	681b      	ldr	r3, [r3, #0]
  402f06:	429a      	cmp	r2, r3
  402f08:	da15      	bge.n	402f36 <AFEC_Audio_callback+0xae>
		reverb_buffer.values[reverb_buffer.p] = g_ul_value;
  402f0a:	4a2c      	ldr	r2, [pc, #176]	; (402fbc <AFEC_Audio_callback+0x134>)
  402f0c:	f64a 33e0 	movw	r3, #44000	; 0xabe0
  402f10:	4413      	add	r3, r2
  402f12:	681b      	ldr	r3, [r3, #0]
  402f14:	4a20      	ldr	r2, [pc, #128]	; (402f98 <AFEC_Audio_callback+0x110>)
  402f16:	6812      	ldr	r2, [r2, #0]
  402f18:	4928      	ldr	r1, [pc, #160]	; (402fbc <AFEC_Audio_callback+0x134>)
  402f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		reverb_buffer.p += 1;
  402f1e:	4a27      	ldr	r2, [pc, #156]	; (402fbc <AFEC_Audio_callback+0x134>)
  402f20:	f64a 33e0 	movw	r3, #44000	; 0xabe0
  402f24:	4413      	add	r3, r2
  402f26:	681b      	ldr	r3, [r3, #0]
  402f28:	1c5a      	adds	r2, r3, #1
  402f2a:	4924      	ldr	r1, [pc, #144]	; (402fbc <AFEC_Audio_callback+0x134>)
  402f2c:	f64a 33e0 	movw	r3, #44000	; 0xabe0
  402f30:	440b      	add	r3, r1
  402f32:	601a      	str	r2, [r3, #0]
  402f34:	e00f      	b.n	402f56 <AFEC_Audio_callback+0xce>
	} else {
		reverb_buffer.values[reverb_buffer.p] = g_ul_value;
  402f36:	4a21      	ldr	r2, [pc, #132]	; (402fbc <AFEC_Audio_callback+0x134>)
  402f38:	f64a 33e0 	movw	r3, #44000	; 0xabe0
  402f3c:	4413      	add	r3, r2
  402f3e:	681b      	ldr	r3, [r3, #0]
  402f40:	4a15      	ldr	r2, [pc, #84]	; (402f98 <AFEC_Audio_callback+0x110>)
  402f42:	6812      	ldr	r2, [r2, #0]
  402f44:	491d      	ldr	r1, [pc, #116]	; (402fbc <AFEC_Audio_callback+0x134>)
  402f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		reverb_buffer.p = 0;
  402f4a:	4a1c      	ldr	r2, [pc, #112]	; (402fbc <AFEC_Audio_callback+0x134>)
  402f4c:	f64a 33e0 	movw	r3, #44000	; 0xabe0
  402f50:	4413      	add	r3, r2
  402f52:	2200      	movs	r2, #0
  402f54:	601a      	str	r2, [r3, #0]
	}
	
	ppbuf_insert_active(&buffer, &g_ul_value, 1);
  402f56:	2201      	movs	r2, #1
  402f58:	490f      	ldr	r1, [pc, #60]	; (402f98 <AFEC_Audio_callback+0x110>)
  402f5a:	480a      	ldr	r0, [pc, #40]	; (402f84 <AFEC_Audio_callback+0xfc>)
  402f5c:	4b18      	ldr	r3, [pc, #96]	; (402fc0 <AFEC_Audio_callback+0x138>)
  402f5e:	4798      	blx	r3
	ppbuf_remove_inactive(&buffer, &buf, 1);	
  402f60:	2201      	movs	r2, #1
  402f62:	4918      	ldr	r1, [pc, #96]	; (402fc4 <AFEC_Audio_callback+0x13c>)
  402f64:	4807      	ldr	r0, [pc, #28]	; (402f84 <AFEC_Audio_callback+0xfc>)
  402f66:	4b18      	ldr	r3, [pc, #96]	; (402fc8 <AFEC_Audio_callback+0x140>)
  402f68:	4798      	blx	r3
	
	dacc_get_interrupt_status(DACC_BASE);
  402f6a:	4818      	ldr	r0, [pc, #96]	; (402fcc <AFEC_Audio_callback+0x144>)
  402f6c:	4b18      	ldr	r3, [pc, #96]	; (402fd0 <AFEC_Audio_callback+0x148>)
  402f6e:	4798      	blx	r3
	dacc_write_conversion_data(DACC_BASE, buf, DACC_CHANNEL);
  402f70:	4b14      	ldr	r3, [pc, #80]	; (402fc4 <AFEC_Audio_callback+0x13c>)
  402f72:	681b      	ldr	r3, [r3, #0]
  402f74:	2200      	movs	r2, #0
  402f76:	4619      	mov	r1, r3
  402f78:	4814      	ldr	r0, [pc, #80]	; (402fcc <AFEC_Audio_callback+0x144>)
  402f7a:	4b16      	ldr	r3, [pc, #88]	; (402fd4 <AFEC_Audio_callback+0x14c>)
  402f7c:	4798      	blx	r3

}
  402f7e:	bf00      	nop
  402f80:	bd80      	pop	{r7, pc}
  402f82:	bf00      	nop
  402f84:	2040000c 	.word	0x2040000c
  402f88:	00402491 	.word	0x00402491
  402f8c:	2040ae78 	.word	0x2040ae78
  402f90:	4003c000 	.word	0x4003c000
  402f94:	00402625 	.word	0x00402625
  402f98:	2040ae74 	.word	0x2040ae74
  402f9c:	00402d99 	.word	0x00402d99
  402fa0:	20400024 	.word	0x20400024
  402fa4:	00402ba1 	.word	0x00402ba1
  402fa8:	20400028 	.word	0x20400028
  402fac:	00402c19 	.word	0x00402c19
  402fb0:	2040002c 	.word	0x2040002c
  402fb4:	00402c59 	.word	0x00402c59
  402fb8:	2040ae70 	.word	0x2040ae70
  402fbc:	2040af34 	.word	0x2040af34
  402fc0:	00402365 	.word	0x00402365
  402fc4:	2040ae6c 	.word	0x2040ae6c
  402fc8:	00402405 	.word	0x00402405
  402fcc:	40040000 	.word	0x40040000
  402fd0:	004001c7 	.word	0x004001c7
  402fd4:	004001df 	.word	0x004001df

00402fd8 <convert_adc_to_gain>:

static int32_t convert_adc_to_gain(int32_t ADC_value){
  402fd8:	b480      	push	{r7}
  402fda:	b085      	sub	sp, #20
  402fdc:	af00      	add	r7, sp, #0
  402fde:	6078      	str	r0, [r7, #4]

	uint32_t max_gain = 100;
  402fe0:	2364      	movs	r3, #100	; 0x64
  402fe2:	60fb      	str	r3, [r7, #12]
	return (ADC_value*(max_gain) / MAX_DIGITAL);
  402fe4:	687b      	ldr	r3, [r7, #4]
  402fe6:	68fa      	ldr	r2, [r7, #12]
  402fe8:	fb02 f203 	mul.w	r2, r2, r3
  402fec:	4b06      	ldr	r3, [pc, #24]	; (403008 <convert_adc_to_gain+0x30>)
  402fee:	fba3 1302 	umull	r1, r3, r3, r2
  402ff2:	1ad2      	subs	r2, r2, r3
  402ff4:	0852      	lsrs	r2, r2, #1
  402ff6:	4413      	add	r3, r2
  402ff8:	0adb      	lsrs	r3, r3, #11
}
  402ffa:	4618      	mov	r0, r3
  402ffc:	3714      	adds	r7, #20
  402ffe:	46bd      	mov	sp, r7
  403000:	f85d 7b04 	ldr.w	r7, [sp], #4
  403004:	4770      	bx	lr
  403006:	bf00      	nop
  403008:	00100101 	.word	0x00100101

0040300c <convert_adc_to_saturation>:

static int32_t convert_adc_to_saturation(int32_t ADC_value){
  40300c:	b480      	push	{r7}
  40300e:	b085      	sub	sp, #20
  403010:	af00      	add	r7, sp, #0
  403012:	6078      	str	r0, [r7, #4]

	uint32_t max_saturation = 100;
  403014:	2364      	movs	r3, #100	; 0x64
  403016:	60fb      	str	r3, [r7, #12]
	return (ADC_value*(max_saturation) / MAX_DIGITAL);
  403018:	687b      	ldr	r3, [r7, #4]
  40301a:	68fa      	ldr	r2, [r7, #12]
  40301c:	fb02 f203 	mul.w	r2, r2, r3
  403020:	4b06      	ldr	r3, [pc, #24]	; (40303c <convert_adc_to_saturation+0x30>)
  403022:	fba3 1302 	umull	r1, r3, r3, r2
  403026:	1ad2      	subs	r2, r2, r3
  403028:	0852      	lsrs	r2, r2, #1
  40302a:	4413      	add	r3, r2
  40302c:	0adb      	lsrs	r3, r3, #11
}
  40302e:	4618      	mov	r0, r3
  403030:	3714      	adds	r7, #20
  403032:	46bd      	mov	sp, r7
  403034:	f85d 7b04 	ldr.w	r7, [sp], #4
  403038:	4770      	bx	lr
  40303a:	bf00      	nop
  40303c:	00100101 	.word	0x00100101

00403040 <convert_adc_to_lowpass>:

static int32_t convert_adc_to_lowpass(int32_t ADC_value){
  403040:	b5f0      	push	{r4, r5, r6, r7, lr}
  403042:	b087      	sub	sp, #28
  403044:	af00      	add	r7, sp, #0
  403046:	6078      	str	r0, [r7, #4]

	uint32_t max_lowpass = 10000;
  403048:	f242 7310 	movw	r3, #10000	; 0x2710
  40304c:	617b      	str	r3, [r7, #20]
	double x = (((double) ADC_value) / MAX_DIGITAL) * (((double) ADC_value) / MAX_DIGITAL);
  40304e:	4b20      	ldr	r3, [pc, #128]	; (4030d0 <convert_adc_to_lowpass+0x90>)
  403050:	6878      	ldr	r0, [r7, #4]
  403052:	4798      	blx	r3
  403054:	4c1f      	ldr	r4, [pc, #124]	; (4030d4 <convert_adc_to_lowpass+0x94>)
  403056:	a31c      	add	r3, pc, #112	; (adr r3, 4030c8 <convert_adc_to_lowpass+0x88>)
  403058:	e9d3 2300 	ldrd	r2, r3, [r3]
  40305c:	47a0      	blx	r4
  40305e:	4603      	mov	r3, r0
  403060:	460c      	mov	r4, r1
  403062:	461d      	mov	r5, r3
  403064:	4626      	mov	r6, r4
  403066:	4b1a      	ldr	r3, [pc, #104]	; (4030d0 <convert_adc_to_lowpass+0x90>)
  403068:	6878      	ldr	r0, [r7, #4]
  40306a:	4798      	blx	r3
  40306c:	4c19      	ldr	r4, [pc, #100]	; (4030d4 <convert_adc_to_lowpass+0x94>)
  40306e:	a316      	add	r3, pc, #88	; (adr r3, 4030c8 <convert_adc_to_lowpass+0x88>)
  403070:	e9d3 2300 	ldrd	r2, r3, [r3]
  403074:	47a0      	blx	r4
  403076:	4603      	mov	r3, r0
  403078:	460c      	mov	r4, r1
  40307a:	461a      	mov	r2, r3
  40307c:	4623      	mov	r3, r4
  40307e:	4c16      	ldr	r4, [pc, #88]	; (4030d8 <convert_adc_to_lowpass+0x98>)
  403080:	4628      	mov	r0, r5
  403082:	4631      	mov	r1, r6
  403084:	47a0      	blx	r4
  403086:	4603      	mov	r3, r0
  403088:	460c      	mov	r4, r1
  40308a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return x * max_lowpass + 20;
  40308e:	4b13      	ldr	r3, [pc, #76]	; (4030dc <convert_adc_to_lowpass+0x9c>)
  403090:	6978      	ldr	r0, [r7, #20]
  403092:	4798      	blx	r3
  403094:	4c10      	ldr	r4, [pc, #64]	; (4030d8 <convert_adc_to_lowpass+0x98>)
  403096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
  40309a:	47a0      	blx	r4
  40309c:	4603      	mov	r3, r0
  40309e:	460c      	mov	r4, r1
  4030a0:	4618      	mov	r0, r3
  4030a2:	4621      	mov	r1, r4
  4030a4:	4c0e      	ldr	r4, [pc, #56]	; (4030e0 <convert_adc_to_lowpass+0xa0>)
  4030a6:	f04f 0200 	mov.w	r2, #0
  4030aa:	4b0e      	ldr	r3, [pc, #56]	; (4030e4 <convert_adc_to_lowpass+0xa4>)
  4030ac:	47a0      	blx	r4
  4030ae:	4603      	mov	r3, r0
  4030b0:	460c      	mov	r4, r1
  4030b2:	4619      	mov	r1, r3
  4030b4:	4622      	mov	r2, r4
  4030b6:	4b0c      	ldr	r3, [pc, #48]	; (4030e8 <convert_adc_to_lowpass+0xa8>)
  4030b8:	4608      	mov	r0, r1
  4030ba:	4611      	mov	r1, r2
  4030bc:	4798      	blx	r3
  4030be:	4603      	mov	r3, r0
}
  4030c0:	4618      	mov	r0, r3
  4030c2:	371c      	adds	r7, #28
  4030c4:	46bd      	mov	sp, r7
  4030c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4030c8:	00000000 	.word	0x00000000
  4030cc:	40affe00 	.word	0x40affe00
  4030d0:	0040594d 	.word	0x0040594d
  4030d4:	00405c6d 	.word	0x00405c6d
  4030d8:	00405a19 	.word	0x00405a19
  4030dc:	0040592d 	.word	0x0040592d
  4030e0:	004056b5 	.word	0x004056b5
  4030e4:	40340000 	.word	0x40340000
  4030e8:	00405e3d 	.word	0x00405e3d

004030ec <AFEC_Gain_callback>:

static void AFEC_Gain_callback(void){
  4030ec:	b590      	push	{r4, r7, lr}
  4030ee:	b083      	sub	sp, #12
  4030f0:	af00      	add	r7, sp, #0
	uint32_t gain;
	gain = afec_channel_get_value(AFEC1, AFEC_CHANNEL_PIN_GAIN);
  4030f2:	2101      	movs	r1, #1
  4030f4:	480a      	ldr	r0, [pc, #40]	; (403120 <AFEC_Gain_callback+0x34>)
  4030f6:	4b0b      	ldr	r3, [pc, #44]	; (403124 <AFEC_Gain_callback+0x38>)
  4030f8:	4798      	blx	r3
  4030fa:	4603      	mov	r3, r0
  4030fc:	607b      	str	r3, [r7, #4]
	gain = convert_adc_to_gain(gain);
  4030fe:	687b      	ldr	r3, [r7, #4]
  403100:	4618      	mov	r0, r3
  403102:	4b09      	ldr	r3, [pc, #36]	; (403128 <AFEC_Gain_callback+0x3c>)
  403104:	4798      	blx	r3
  403106:	4603      	mov	r3, r0
  403108:	607b      	str	r3, [r7, #4]
/*	printf("CALLBACK: %d\n", gain);*/
	xQueueSendFromISR( xQueueGain, &gain, NULL);
  40310a:	4b08      	ldr	r3, [pc, #32]	; (40312c <AFEC_Gain_callback+0x40>)
  40310c:	6818      	ldr	r0, [r3, #0]
  40310e:	1d39      	adds	r1, r7, #4
  403110:	2300      	movs	r3, #0
  403112:	2200      	movs	r2, #0
  403114:	4c06      	ldr	r4, [pc, #24]	; (403130 <AFEC_Gain_callback+0x44>)
  403116:	47a0      	blx	r4
}
  403118:	bf00      	nop
  40311a:	370c      	adds	r7, #12
  40311c:	46bd      	mov	sp, r7
  40311e:	bd90      	pop	{r4, r7, pc}
  403120:	40064000 	.word	0x40064000
  403124:	00402625 	.word	0x00402625
  403128:	00402fd9 	.word	0x00402fd9
  40312c:	2040af28 	.word	0x2040af28
  403130:	00400bf1 	.word	0x00400bf1

00403134 <AFEC_Saturation_callback>:

static void AFEC_Saturation_callback(void){
  403134:	b590      	push	{r4, r7, lr}
  403136:	b083      	sub	sp, #12
  403138:	af00      	add	r7, sp, #0
	uint32_t saturation;
	saturation = afec_channel_get_value(AFEC1, AFEC_CHANNEL_PIN_SATURATION);
  40313a:	2103      	movs	r1, #3
  40313c:	480a      	ldr	r0, [pc, #40]	; (403168 <AFEC_Saturation_callback+0x34>)
  40313e:	4b0b      	ldr	r3, [pc, #44]	; (40316c <AFEC_Saturation_callback+0x38>)
  403140:	4798      	blx	r3
  403142:	4603      	mov	r3, r0
  403144:	607b      	str	r3, [r7, #4]
	saturation = convert_adc_to_saturation(saturation);
  403146:	687b      	ldr	r3, [r7, #4]
  403148:	4618      	mov	r0, r3
  40314a:	4b09      	ldr	r3, [pc, #36]	; (403170 <AFEC_Saturation_callback+0x3c>)
  40314c:	4798      	blx	r3
  40314e:	4603      	mov	r3, r0
  403150:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR( xQueueSaturation, &saturation, NULL);
  403152:	4b08      	ldr	r3, [pc, #32]	; (403174 <AFEC_Saturation_callback+0x40>)
  403154:	6818      	ldr	r0, [r3, #0]
  403156:	1d39      	adds	r1, r7, #4
  403158:	2300      	movs	r3, #0
  40315a:	2200      	movs	r2, #0
  40315c:	4c06      	ldr	r4, [pc, #24]	; (403178 <AFEC_Saturation_callback+0x44>)
  40315e:	47a0      	blx	r4
}
  403160:	bf00      	nop
  403162:	370c      	adds	r7, #12
  403164:	46bd      	mov	sp, r7
  403166:	bd90      	pop	{r4, r7, pc}
  403168:	40064000 	.word	0x40064000
  40316c:	00402625 	.word	0x00402625
  403170:	0040300d 	.word	0x0040300d
  403174:	20415b1c 	.word	0x20415b1c
  403178:	00400bf1 	.word	0x00400bf1

0040317c <AFEC_Lowpass_callback>:

static void AFEC_Lowpass_callback(void){
  40317c:	b590      	push	{r4, r7, lr}
  40317e:	b083      	sub	sp, #12
  403180:	af00      	add	r7, sp, #0
	uint32_t lowpass;
	lowpass = afec_channel_get_value(AFEC1, AFEC_CHANNEL_PIN_LOWPASS);
  403182:	2105      	movs	r1, #5
  403184:	480a      	ldr	r0, [pc, #40]	; (4031b0 <AFEC_Lowpass_callback+0x34>)
  403186:	4b0b      	ldr	r3, [pc, #44]	; (4031b4 <AFEC_Lowpass_callback+0x38>)
  403188:	4798      	blx	r3
  40318a:	4603      	mov	r3, r0
  40318c:	607b      	str	r3, [r7, #4]
	lowpass = convert_adc_to_lowpass(lowpass);
  40318e:	687b      	ldr	r3, [r7, #4]
  403190:	4618      	mov	r0, r3
  403192:	4b09      	ldr	r3, [pc, #36]	; (4031b8 <AFEC_Lowpass_callback+0x3c>)
  403194:	4798      	blx	r3
  403196:	4603      	mov	r3, r0
  403198:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR( xQueueLowpass, &lowpass, NULL);
  40319a:	4b08      	ldr	r3, [pc, #32]	; (4031bc <AFEC_Lowpass_callback+0x40>)
  40319c:	6818      	ldr	r0, [r3, #0]
  40319e:	1d39      	adds	r1, r7, #4
  4031a0:	2300      	movs	r3, #0
  4031a2:	2200      	movs	r2, #0
  4031a4:	4c06      	ldr	r4, [pc, #24]	; (4031c0 <AFEC_Lowpass_callback+0x44>)
  4031a6:	47a0      	blx	r4
}
  4031a8:	bf00      	nop
  4031aa:	370c      	adds	r7, #12
  4031ac:	46bd      	mov	sp, r7
  4031ae:	bd90      	pop	{r4, r7, pc}
  4031b0:	40064000 	.word	0x40064000
  4031b4:	00402625 	.word	0x00402625
  4031b8:	00403041 	.word	0x00403041
  4031bc:	2040af2c 	.word	0x2040af2c
  4031c0:	00400bf1 	.word	0x00400bf1

004031c4 <configure_console>:
 * 8 bits
 * 1 stop bit
 * sem paridade
 */
static void configure_console(void)
{
  4031c4:	b590      	push	{r4, r7, lr}
  4031c6:	b085      	sub	sp, #20
  4031c8:	af00      	add	r7, sp, #0
 
	const usart_serial_options_t uart_serial_options = {
  4031ca:	4b08      	ldr	r3, [pc, #32]	; (4031ec <configure_console+0x28>)
  4031cc:	463c      	mov	r4, r7
  4031ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4031d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits   = CONF_UART_STOP_BITS,
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  4031d4:	200e      	movs	r0, #14
  4031d6:	4b06      	ldr	r3, [pc, #24]	; (4031f0 <configure_console+0x2c>)
  4031d8:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  4031da:	463b      	mov	r3, r7
  4031dc:	4619      	mov	r1, r3
  4031de:	4805      	ldr	r0, [pc, #20]	; (4031f4 <configure_console+0x30>)
  4031e0:	4b05      	ldr	r3, [pc, #20]	; (4031f8 <configure_console+0x34>)
  4031e2:	4798      	blx	r3
}
  4031e4:	bf00      	nop
  4031e6:	3714      	adds	r7, #20
  4031e8:	46bd      	mov	sp, r7
  4031ea:	bd90      	pop	{r4, r7, pc}
  4031ec:	00408f64 	.word	0x00408f64
  4031f0:	00402745 	.word	0x00402745
  4031f4:	40028000 	.word	0x40028000
  4031f8:	00402b05 	.word	0x00402b05

004031fc <config_ADC_AUDIO>:

static void config_ADC_AUDIO(void){
  4031fc:	b590      	push	{r4, r7, lr}
  4031fe:	b08b      	sub	sp, #44	; 0x2c
  403200:	af00      	add	r7, sp, #0
/************************************* 
   * Ativa e configura AFEC
   *************************************/  
  /* Ativa AFEC - 0 */
	afec_enable(AFEC0);
  403202:	4821      	ldr	r0, [pc, #132]	; (403288 <config_ADC_AUDIO+0x8c>)
  403204:	4b21      	ldr	r3, [pc, #132]	; (40328c <config_ADC_AUDIO+0x90>)
  403206:	4798      	blx	r3

	/* struct de configuracao do AFEC */
	struct afec_config afec_cfg;

	/* Carrega parametros padrao */
	afec_get_config_defaults(&afec_cfg);
  403208:	f107 0310 	add.w	r3, r7, #16
  40320c:	4618      	mov	r0, r3
  40320e:	4b20      	ldr	r3, [pc, #128]	; (403290 <config_ADC_AUDIO+0x94>)
  403210:	4798      	blx	r3

	/* Configura AFEC */
	afec_init(AFEC0, &afec_cfg);
  403212:	f107 0310 	add.w	r3, r7, #16
  403216:	4619      	mov	r1, r3
  403218:	481b      	ldr	r0, [pc, #108]	; (403288 <config_ADC_AUDIO+0x8c>)
  40321a:	4b1e      	ldr	r3, [pc, #120]	; (403294 <config_ADC_AUDIO+0x98>)
  40321c:	4798      	blx	r3
  
	/* Configura trigger por software */
	afec_set_trigger(AFEC0, AFEC_TRIG_TIO_CH_0);
  40321e:	2103      	movs	r1, #3
  403220:	4819      	ldr	r0, [pc, #100]	; (403288 <config_ADC_AUDIO+0x8c>)
  403222:	4b1d      	ldr	r3, [pc, #116]	; (403298 <config_ADC_AUDIO+0x9c>)
  403224:	4798      	blx	r3
		
	AFEC0->AFEC_MR |= 3;
  403226:	4a18      	ldr	r2, [pc, #96]	; (403288 <config_ADC_AUDIO+0x8c>)
  403228:	4b17      	ldr	r3, [pc, #92]	; (403288 <config_ADC_AUDIO+0x8c>)
  40322a:	685b      	ldr	r3, [r3, #4]
  40322c:	f043 0303 	orr.w	r3, r3, #3
  403230:	6053      	str	r3, [r2, #4]
  
	/* configura call back */
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0,	AFEC_Audio_callback, 1); 
  403232:	2301      	movs	r3, #1
  403234:	4a19      	ldr	r2, [pc, #100]	; (40329c <config_ADC_AUDIO+0xa0>)
  403236:	2100      	movs	r1, #0
  403238:	4813      	ldr	r0, [pc, #76]	; (403288 <config_ADC_AUDIO+0x8c>)
  40323a:	4c19      	ldr	r4, [pc, #100]	; (4032a0 <config_ADC_AUDIO+0xa4>)
  40323c:	47a0      	blx	r4
   
	/*** Configuracao espec�fica do canal AFEC ***/
	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  40323e:	f107 030c 	add.w	r3, r7, #12
  403242:	4618      	mov	r0, r3
  403244:	4b17      	ldr	r3, [pc, #92]	; (4032a4 <config_ADC_AUDIO+0xa8>)
  403246:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  403248:	2300      	movs	r3, #0
  40324a:	737b      	strb	r3, [r7, #13]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_PIN, &afec_ch_cfg);
  40324c:	f107 030c 	add.w	r3, r7, #12
  403250:	461a      	mov	r2, r3
  403252:	2100      	movs	r1, #0
  403254:	480c      	ldr	r0, [pc, #48]	; (403288 <config_ADC_AUDIO+0x8c>)
  403256:	4b14      	ldr	r3, [pc, #80]	; (4032a8 <config_ADC_AUDIO+0xac>)
  403258:	4798      	blx	r3
	* Calibracao:
	* Because the internal ADC offset is 0x200, it should cancel it and shift
	 down to 0.
	 */
	//afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_PIN, 0x1B0);
	afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_PIN, 0x1A0);
  40325a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
  40325e:	2100      	movs	r1, #0
  403260:	4809      	ldr	r0, [pc, #36]	; (403288 <config_ADC_AUDIO+0x8c>)
  403262:	4b12      	ldr	r3, [pc, #72]	; (4032ac <config_ADC_AUDIO+0xb0>)
  403264:	4798      	blx	r3

	/***  Configura sensor de temperatura ***/
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  403266:	1d3b      	adds	r3, r7, #4
  403268:	4618      	mov	r0, r3
  40326a:	4b11      	ldr	r3, [pc, #68]	; (4032b0 <config_ADC_AUDIO+0xb4>)
  40326c:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  40326e:	1d3b      	adds	r3, r7, #4
  403270:	4619      	mov	r1, r3
  403272:	4805      	ldr	r0, [pc, #20]	; (403288 <config_ADC_AUDIO+0x8c>)
  403274:	4b0f      	ldr	r3, [pc, #60]	; (4032b4 <config_ADC_AUDIO+0xb8>)
  403276:	4798      	blx	r3

	/* Selecina canal e inicializa convers�o */  
	afec_channel_enable(AFEC0, AFEC_CHANNEL_PIN);
  403278:	2100      	movs	r1, #0
  40327a:	4803      	ldr	r0, [pc, #12]	; (403288 <config_ADC_AUDIO+0x8c>)
  40327c:	4b0e      	ldr	r3, [pc, #56]	; (4032b8 <config_ADC_AUDIO+0xbc>)
  40327e:	4798      	blx	r3
}
  403280:	bf00      	nop
  403282:	372c      	adds	r7, #44	; 0x2c
  403284:	46bd      	mov	sp, r7
  403286:	bd90      	pop	{r4, r7, pc}
  403288:	4003c000 	.word	0x4003c000
  40328c:	00404a79 	.word	0x00404a79
  403290:	00404709 	.word	0x00404709
  403294:	004047b9 	.word	0x004047b9
  403298:	0040252d 	.word	0x0040252d
  40329c:	00402e89 	.word	0x00402e89
  4032a0:	00404851 	.word	0x00404851
  4032a4:	00404769 	.word	0x00404769
  4032a8:	0040462d 	.word	0x0040462d
  4032ac:	00402651 	.word	0x00402651
  4032b0:	00404789 	.word	0x00404789
  4032b4:	004046c1 	.word	0x004046c1
  4032b8:	0040258d 	.word	0x0040258d

004032bc <config_AFEC_EFFECTS>:

static void config_AFEC_EFFECTS(void){
  4032bc:	b590      	push	{r4, r7, lr}
  4032be:	b08b      	sub	sp, #44	; 0x2c
  4032c0:	af00      	add	r7, sp, #0
/*************************************
   * Ativa e configura AFEC
   *************************************/
  /* Ativa AFEC - 0 */
	afec_enable(AFEC1);
  4032c2:	482f      	ldr	r0, [pc, #188]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  4032c4:	4b2f      	ldr	r3, [pc, #188]	; (403384 <config_AFEC_EFFECTS+0xc8>)
  4032c6:	4798      	blx	r3

	/* struct de configuracao do AFEC */
	struct afec_config afec_cfg;

	/* Carrega parametros padrao */
	afec_get_config_defaults(&afec_cfg);
  4032c8:	f107 0310 	add.w	r3, r7, #16
  4032cc:	4618      	mov	r0, r3
  4032ce:	4b2e      	ldr	r3, [pc, #184]	; (403388 <config_AFEC_EFFECTS+0xcc>)
  4032d0:	4798      	blx	r3

	/* Configura AFEC */
	afec_init(AFEC1, &afec_cfg);
  4032d2:	f107 0310 	add.w	r3, r7, #16
  4032d6:	4619      	mov	r1, r3
  4032d8:	4829      	ldr	r0, [pc, #164]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  4032da:	4b2c      	ldr	r3, [pc, #176]	; (40338c <config_AFEC_EFFECTS+0xd0>)
  4032dc:	4798      	blx	r3

	/* Configura trigger por software */
	afec_set_trigger(AFEC1, AFEC_TRIG_SW);
  4032de:	2100      	movs	r1, #0
  4032e0:	4827      	ldr	r0, [pc, #156]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  4032e2:	4b2b      	ldr	r3, [pc, #172]	; (403390 <config_AFEC_EFFECTS+0xd4>)
  4032e4:	4798      	blx	r3

/*	AFEC1->AFEC_MR |= 3;*/

	/* configura call back */
	afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_3,	AFEC_Saturation_callback, 1);
  4032e6:	2301      	movs	r3, #1
  4032e8:	4a2a      	ldr	r2, [pc, #168]	; (403394 <config_AFEC_EFFECTS+0xd8>)
  4032ea:	2103      	movs	r1, #3
  4032ec:	4824      	ldr	r0, [pc, #144]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  4032ee:	4c2a      	ldr	r4, [pc, #168]	; (403398 <config_AFEC_EFFECTS+0xdc>)
  4032f0:	47a0      	blx	r4
	afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_1,	AFEC_Gain_callback, 1);
  4032f2:	2301      	movs	r3, #1
  4032f4:	4a29      	ldr	r2, [pc, #164]	; (40339c <config_AFEC_EFFECTS+0xe0>)
  4032f6:	2101      	movs	r1, #1
  4032f8:	4821      	ldr	r0, [pc, #132]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  4032fa:	4c27      	ldr	r4, [pc, #156]	; (403398 <config_AFEC_EFFECTS+0xdc>)
  4032fc:	47a0      	blx	r4
	afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_5,	AFEC_Lowpass_callback, 1);
  4032fe:	2301      	movs	r3, #1
  403300:	4a27      	ldr	r2, [pc, #156]	; (4033a0 <config_AFEC_EFFECTS+0xe4>)
  403302:	2105      	movs	r1, #5
  403304:	481e      	ldr	r0, [pc, #120]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  403306:	4c24      	ldr	r4, [pc, #144]	; (403398 <config_AFEC_EFFECTS+0xdc>)
  403308:	47a0      	blx	r4

	/*** Configuracao espec?fica do canal AFEC ***/
	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  40330a:	f107 030c 	add.w	r3, r7, #12
  40330e:	4618      	mov	r0, r3
  403310:	4b24      	ldr	r3, [pc, #144]	; (4033a4 <config_AFEC_EFFECTS+0xe8>)
  403312:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  403314:	2300      	movs	r3, #0
  403316:	737b      	strb	r3, [r7, #13]
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_PIN_GAIN, &afec_ch_cfg);
  403318:	f107 030c 	add.w	r3, r7, #12
  40331c:	461a      	mov	r2, r3
  40331e:	2101      	movs	r1, #1
  403320:	4817      	ldr	r0, [pc, #92]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  403322:	4b21      	ldr	r3, [pc, #132]	; (4033a8 <config_AFEC_EFFECTS+0xec>)
  403324:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_PIN_SATURATION, &afec_ch_cfg);
  403326:	f107 030c 	add.w	r3, r7, #12
  40332a:	461a      	mov	r2, r3
  40332c:	2103      	movs	r1, #3
  40332e:	4814      	ldr	r0, [pc, #80]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  403330:	4b1d      	ldr	r3, [pc, #116]	; (4033a8 <config_AFEC_EFFECTS+0xec>)
  403332:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_PIN_LOWPASS, &afec_ch_cfg);
  403334:	f107 030c 	add.w	r3, r7, #12
  403338:	461a      	mov	r2, r3
  40333a:	2105      	movs	r1, #5
  40333c:	4810      	ldr	r0, [pc, #64]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  40333e:	4b1a      	ldr	r3, [pc, #104]	; (4033a8 <config_AFEC_EFFECTS+0xec>)
  403340:	4798      	blx	r3
	/*
	* Calibracao:
	* Because the internal ADC offset is 0x200, it should cancel it and shift
	 down to 0.
	 */
	afec_channel_set_analog_offset(AFEC1, AFEC_CHANNEL_PIN_GAIN, 0x200);
  403342:	f44f 7200 	mov.w	r2, #512	; 0x200
  403346:	2101      	movs	r1, #1
  403348:	480d      	ldr	r0, [pc, #52]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  40334a:	4b18      	ldr	r3, [pc, #96]	; (4033ac <config_AFEC_EFFECTS+0xf0>)
  40334c:	4798      	blx	r3
	afec_channel_set_analog_offset(AFEC1, AFEC_CHANNEL_PIN_SATURATION, 0x200);
  40334e:	f44f 7200 	mov.w	r2, #512	; 0x200
  403352:	2103      	movs	r1, #3
  403354:	480a      	ldr	r0, [pc, #40]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  403356:	4b15      	ldr	r3, [pc, #84]	; (4033ac <config_AFEC_EFFECTS+0xf0>)
  403358:	4798      	blx	r3
	afec_channel_set_analog_offset(AFEC1, AFEC_CHANNEL_PIN_LOWPASS, 0x200);
  40335a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40335e:	2105      	movs	r1, #5
  403360:	4807      	ldr	r0, [pc, #28]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  403362:	4b12      	ldr	r3, [pc, #72]	; (4033ac <config_AFEC_EFFECTS+0xf0>)
  403364:	4798      	blx	r3

	/***  Configura sensor de temperatura ***/
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  403366:	1d3b      	adds	r3, r7, #4
  403368:	4618      	mov	r0, r3
  40336a:	4b11      	ldr	r3, [pc, #68]	; (4033b0 <config_AFEC_EFFECTS+0xf4>)
  40336c:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC1, &afec_temp_sensor_cfg);
  40336e:	1d3b      	adds	r3, r7, #4
  403370:	4619      	mov	r1, r3
  403372:	4803      	ldr	r0, [pc, #12]	; (403380 <config_AFEC_EFFECTS+0xc4>)
  403374:	4b0f      	ldr	r3, [pc, #60]	; (4033b4 <config_AFEC_EFFECTS+0xf8>)
  403376:	4798      	blx	r3
}
  403378:	bf00      	nop
  40337a:	372c      	adds	r7, #44	; 0x2c
  40337c:	46bd      	mov	sp, r7
  40337e:	bd90      	pop	{r4, r7, pc}
  403380:	40064000 	.word	0x40064000
  403384:	00404a79 	.word	0x00404a79
  403388:	00404709 	.word	0x00404709
  40338c:	004047b9 	.word	0x004047b9
  403390:	0040252d 	.word	0x0040252d
  403394:	00403135 	.word	0x00403135
  403398:	00404851 	.word	0x00404851
  40339c:	004030ed 	.word	0x004030ed
  4033a0:	0040317d 	.word	0x0040317d
  4033a4:	00404769 	.word	0x00404769
  4033a8:	0040462d 	.word	0x0040462d
  4033ac:	00402651 	.word	0x00402651
  4033b0:	00404789 	.word	0x00404789
  4033b4:	004046c1 	.word	0x004046c1

004033b8 <config_DAC>:

static void config_DAC(void){
  4033b8:	b580      	push	{r7, lr}
  4033ba:	af00      	add	r7, sp, #0
	/* Enable clock for DACC */
	sysclk_enable_peripheral_clock(DACC_ID);
  4033bc:	201e      	movs	r0, #30
  4033be:	4b05      	ldr	r3, [pc, #20]	; (4033d4 <config_DAC+0x1c>)
  4033c0:	4798      	blx	r3

	/* Reset DACC registers */
	dacc_reset(DACC_BASE);
  4033c2:	4805      	ldr	r0, [pc, #20]	; (4033d8 <config_DAC+0x20>)
  4033c4:	4b05      	ldr	r3, [pc, #20]	; (4033dc <config_DAC+0x24>)
  4033c6:	4798      	blx	r3
	dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  4033c8:	2100      	movs	r1, #0
  4033ca:	4803      	ldr	r0, [pc, #12]	; (4033d8 <config_DAC+0x20>)
  4033cc:	4b04      	ldr	r3, [pc, #16]	; (4033e0 <config_DAC+0x28>)
  4033ce:	4798      	blx	r3
}
  4033d0:	bf00      	nop
  4033d2:	bd80      	pop	{r7, pc}
  4033d4:	00402745 	.word	0x00402745
  4033d8:	40040000 	.word	0x40040000
  4033dc:	004001ad 	.word	0x004001ad
  4033e0:	00400205 	.word	0x00400205

004033e4 <TC_init>:

/**
* Configura TimerCounter (TC) para gerar uma interrupcao no canal (ID_TC e TC_CHANNEL)
* na taxa de especificada em freq.
*/
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4033e4:	b590      	push	{r4, r7, lr}
  4033e6:	b08b      	sub	sp, #44	; 0x2c
  4033e8:	af02      	add	r7, sp, #8
  4033ea:	60f8      	str	r0, [r7, #12]
  4033ec:	60b9      	str	r1, [r7, #8]
  4033ee:	607a      	str	r2, [r7, #4]
  4033f0:	603b      	str	r3, [r7, #0]
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
  4033f2:	4b1f      	ldr	r3, [pc, #124]	; (403470 <TC_init+0x8c>)
  4033f4:	4798      	blx	r3
  4033f6:	61f8      	str	r0, [r7, #28]

	pmc_enable_periph_clk(ID_TC);
  4033f8:	68bb      	ldr	r3, [r7, #8]
  4033fa:	4618      	mov	r0, r3
  4033fc:	4b1d      	ldr	r3, [pc, #116]	; (403474 <TC_init+0x90>)
  4033fe:	4798      	blx	r3

	/** Configura o TC para operar em  4Mhz e interrup�c�o no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  403400:	6838      	ldr	r0, [r7, #0]
  403402:	f107 0114 	add.w	r1, r7, #20
  403406:	f107 0218 	add.w	r2, r7, #24
  40340a:	69fb      	ldr	r3, [r7, #28]
  40340c:	9300      	str	r3, [sp, #0]
  40340e:	460b      	mov	r3, r1
  403410:	69f9      	ldr	r1, [r7, #28]
  403412:	4c19      	ldr	r4, [pc, #100]	; (403478 <TC_init+0x94>)
  403414:	47a0      	blx	r4
	
	//PMC->PMC_SCER = 1 << 14;
	ul_tcclks = 1;
  403416:	2301      	movs	r3, #1
  403418:	617b      	str	r3, [r7, #20]
	
	tc_init(TC, TC_CHANNEL, ul_tcclks 
  40341a:	6879      	ldr	r1, [r7, #4]
  40341c:	697b      	ldr	r3, [r7, #20]
  40341e:	f443 231c 	orr.w	r3, r3, #638976	; 0x9c000
  403422:	461a      	mov	r2, r3
  403424:	68f8      	ldr	r0, [r7, #12]
  403426:	4b15      	ldr	r3, [pc, #84]	; (40347c <TC_init+0x98>)
  403428:	4798      	blx	r3
							| TC_CMR_ACPA_SET /* RA Compare Effect: set */
							| TC_CMR_ACPC_CLEAR /* RC Compare Effect: clear */
							| TC_CMR_CPCTRG /* UP mode with automatic trigger on RC Compare */
	);
	
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq /8 );
  40342a:	6879      	ldr	r1, [r7, #4]
  40342c:	69bb      	ldr	r3, [r7, #24]
  40342e:	69fa      	ldr	r2, [r7, #28]
  403430:	fbb2 f2f3 	udiv	r2, r2, r3
  403434:	683b      	ldr	r3, [r7, #0]
  403436:	fbb2 f3f3 	udiv	r3, r2, r3
  40343a:	08db      	lsrs	r3, r3, #3
  40343c:	461a      	mov	r2, r3
  40343e:	68f8      	ldr	r0, [r7, #12]
  403440:	4b0f      	ldr	r3, [pc, #60]	; (403480 <TC_init+0x9c>)
  403442:	4798      	blx	r3
	tc_write_ra(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq / 8 / 2);
  403444:	6879      	ldr	r1, [r7, #4]
  403446:	69bb      	ldr	r3, [r7, #24]
  403448:	69fa      	ldr	r2, [r7, #28]
  40344a:	fbb2 f2f3 	udiv	r2, r2, r3
  40344e:	683b      	ldr	r3, [r7, #0]
  403450:	fbb2 f3f3 	udiv	r3, r2, r3
  403454:	091b      	lsrs	r3, r3, #4
  403456:	461a      	mov	r2, r3
  403458:	68f8      	ldr	r0, [r7, #12]
  40345a:	4b0a      	ldr	r3, [pc, #40]	; (403484 <TC_init+0xa0>)
  40345c:	4798      	blx	r3

	tc_start(TC, TC_CHANNEL);
  40345e:	687b      	ldr	r3, [r7, #4]
  403460:	4619      	mov	r1, r3
  403462:	68f8      	ldr	r0, [r7, #12]
  403464:	4b08      	ldr	r3, [pc, #32]	; (403488 <TC_init+0xa4>)
  403466:	4798      	blx	r3
}
  403468:	bf00      	nop
  40346a:	3724      	adds	r7, #36	; 0x24
  40346c:	46bd      	mov	sp, r7
  40346e:	bd90      	pop	{r4, r7, pc}
  403470:	0040271d 	.word	0x0040271d
  403474:	00404ec9 	.word	0x00404ec9
  403478:	0040386d 	.word	0x0040386d
  40347c:	004037a1 	.word	0x004037a1
  403480:	00403823 	.word	0x00403823
  403484:	004037fd 	.word	0x004037fd
  403488:	004037db 	.word	0x004037db

0040348c <task_adc_to_dac>:
// 	pmc_enable_periph_clk(BUT_PIO_ID);
// 	pio_set_input(BUT_PIO, BUT_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
// 
// };

static void task_adc_to_dac(void *pvParameters) {
  40348c:	b590      	push	{r4, r7, lr}
  40348e:	b087      	sub	sp, #28
  403490:	af00      	add	r7, sp, #0
  403492:	6078      	str	r0, [r7, #4]

	xQueueEffects = xQueueCreate( 100, sizeof( effects_t ) );
  403494:	2200      	movs	r2, #0
  403496:	210c      	movs	r1, #12
  403498:	2064      	movs	r0, #100	; 0x64
  40349a:	4b2d      	ldr	r3, [pc, #180]	; (403550 <task_adc_to_dac+0xc4>)
  40349c:	4798      	blx	r3
  40349e:	4602      	mov	r2, r0
  4034a0:	4b2c      	ldr	r3, [pc, #176]	; (403554 <task_adc_to_dac+0xc8>)
  4034a2:	601a      	str	r2, [r3, #0]
	
	for (int i = 0; i < reverb_buffer.maxp; i++) {
  4034a4:	2300      	movs	r3, #0
  4034a6:	617b      	str	r3, [r7, #20]
  4034a8:	e007      	b.n	4034ba <task_adc_to_dac+0x2e>
		reverb_buffer.values[i] = 0;
  4034aa:	4a2b      	ldr	r2, [pc, #172]	; (403558 <task_adc_to_dac+0xcc>)
  4034ac:	697b      	ldr	r3, [r7, #20]
  4034ae:	2100      	movs	r1, #0
  4034b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < reverb_buffer.maxp; i++) {
  4034b4:	697b      	ldr	r3, [r7, #20]
  4034b6:	3301      	adds	r3, #1
  4034b8:	617b      	str	r3, [r7, #20]
  4034ba:	4a27      	ldr	r2, [pc, #156]	; (403558 <task_adc_to_dac+0xcc>)
  4034bc:	f64a 33e4 	movw	r3, #44004	; 0xabe4
  4034c0:	4413      	add	r3, r2
  4034c2:	681a      	ldr	r2, [r3, #0]
  4034c4:	697b      	ldr	r3, [r7, #20]
  4034c6:	429a      	cmp	r2, r3
  4034c8:	dcef      	bgt.n	4034aa <task_adc_to_dac+0x1e>
	}
	reverb_buffer.p = 0;
  4034ca:	4a23      	ldr	r2, [pc, #140]	; (403558 <task_adc_to_dac+0xcc>)
  4034cc:	f64a 33e0 	movw	r3, #44000	; 0xabe0
  4034d0:	4413      	add	r3, r2
  4034d2:	2200      	movs	r2, #0
  4034d4:	601a      	str	r2, [r3, #0]
	reverb_buffer.maxp = 256;
  4034d6:	4a20      	ldr	r2, [pc, #128]	; (403558 <task_adc_to_dac+0xcc>)
  4034d8:	f64a 33e4 	movw	r3, #44004	; 0xabe4
  4034dc:	4413      	add	r3, r2
  4034de:	f44f 7280 	mov.w	r2, #256	; 0x100
  4034e2:	601a      	str	r2, [r3, #0]


	config_ADC_AUDIO();
  4034e4:	4b1d      	ldr	r3, [pc, #116]	; (40355c <task_adc_to_dac+0xd0>)
  4034e6:	4798      	blx	r3
	
	TC_init(TC0, ID_TC0, 0, 22000);
  4034e8:	f245 53f0 	movw	r3, #22000	; 0x55f0
  4034ec:	2200      	movs	r2, #0
  4034ee:	2117      	movs	r1, #23
  4034f0:	481b      	ldr	r0, [pc, #108]	; (403560 <task_adc_to_dac+0xd4>)
  4034f2:	4c1c      	ldr	r4, [pc, #112]	; (403564 <task_adc_to_dac+0xd8>)
  4034f4:	47a0      	blx	r4

	config_DAC();
  4034f6:	4b1c      	ldr	r3, [pc, #112]	; (403568 <task_adc_to_dac+0xdc>)
  4034f8:	4798      	blx	r3
	
	saturation_value = 50;
  4034fa:	4b1c      	ldr	r3, [pc, #112]	; (40356c <task_adc_to_dac+0xe0>)
  4034fc:	2232      	movs	r2, #50	; 0x32
  4034fe:	601a      	str	r2, [r3, #0]
	gain_value = 70;
  403500:	4b1b      	ldr	r3, [pc, #108]	; (403570 <task_adc_to_dac+0xe4>)
  403502:	2246      	movs	r2, #70	; 0x46
  403504:	601a      	str	r2, [r3, #0]
	lowpass_value = 10000;
  403506:	4b1b      	ldr	r3, [pc, #108]	; (403574 <task_adc_to_dac+0xe8>)
  403508:	f242 7210 	movw	r2, #10000	; 0x2710
  40350c:	601a      	str	r2, [r3, #0]

	effects_t effects;
	effects.gain = 50;
  40350e:	2332      	movs	r3, #50	; 0x32
  403510:	60bb      	str	r3, [r7, #8]
	effects.saturation = 0;
  403512:	2300      	movs	r3, #0
  403514:	60fb      	str	r3, [r7, #12]
	effects.lowpass = 10000;
  403516:	f242 7310 	movw	r3, #10000	; 0x2710
  40351a:	613b      	str	r3, [r7, #16]
	
	while(1) {
		if (xQueueReceive( xQueueEffects, &(effects),  1000 / portTICK_RATE_MS)) {
  40351c:	4b0d      	ldr	r3, [pc, #52]	; (403554 <task_adc_to_dac+0xc8>)
  40351e:	6818      	ldr	r0, [r3, #0]
  403520:	f107 0108 	add.w	r1, r7, #8
  403524:	2300      	movs	r3, #0
  403526:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40352a:	4c13      	ldr	r4, [pc, #76]	; (403578 <task_adc_to_dac+0xec>)
  40352c:	47a0      	blx	r4
  40352e:	4603      	mov	r3, r0
  403530:	2b00      	cmp	r3, #0
  403532:	d0f3      	beq.n	40351c <task_adc_to_dac+0x90>
// 			printf("Gain_Value: %d\n", effects.gain);
			gain_value = effects.gain;
  403534:	68bb      	ldr	r3, [r7, #8]
  403536:	4a0e      	ldr	r2, [pc, #56]	; (403570 <task_adc_to_dac+0xe4>)
  403538:	6013      	str	r3, [r2, #0]
			saturation_value = effects.saturation;
  40353a:	68fb      	ldr	r3, [r7, #12]
  40353c:	4a0b      	ldr	r2, [pc, #44]	; (40356c <task_adc_to_dac+0xe0>)
  40353e:	6013      	str	r3, [r2, #0]
			lowpass_value = effects.lowpass;
  403540:	693b      	ldr	r3, [r7, #16]
  403542:	4a0c      	ldr	r2, [pc, #48]	; (403574 <task_adc_to_dac+0xe8>)
  403544:	6013      	str	r3, [r2, #0]
			vTaskDelay( 100 / portTICK_RATE_MS);
  403546:	2064      	movs	r0, #100	; 0x64
  403548:	4b0c      	ldr	r3, [pc, #48]	; (40357c <task_adc_to_dac+0xf0>)
  40354a:	4798      	blx	r3
		if (xQueueReceive( xQueueEffects, &(effects),  1000 / portTICK_RATE_MS)) {
  40354c:	e7e6      	b.n	40351c <task_adc_to_dac+0x90>
  40354e:	bf00      	nop
  403550:	004009f1 	.word	0x004009f1
  403554:	20415b20 	.word	0x20415b20
  403558:	2040af34 	.word	0x2040af34
  40355c:	004031fd 	.word	0x004031fd
  403560:	4000c000 	.word	0x4000c000
  403564:	004033e5 	.word	0x004033e5
  403568:	004033b9 	.word	0x004033b9
  40356c:	20400024 	.word	0x20400024
  403570:	20400028 	.word	0x20400028
  403574:	2040002c 	.word	0x2040002c
  403578:	00400cad 	.word	0x00400cad
  40357c:	004012b1 	.word	0x004012b1

00403580 <task_effects_controller>:
		}
	}
}

void task_effects_controller(void) {
  403580:	b590      	push	{r4, r7, lr}
  403582:	b087      	sub	sp, #28
  403584:	af00      	add	r7, sp, #0

	xQueueGain = xQueueCreate( 100, sizeof( uint32_t ) );
  403586:	2200      	movs	r2, #0
  403588:	2104      	movs	r1, #4
  40358a:	2064      	movs	r0, #100	; 0x64
  40358c:	4b46      	ldr	r3, [pc, #280]	; (4036a8 <task_effects_controller+0x128>)
  40358e:	4798      	blx	r3
  403590:	4602      	mov	r2, r0
  403592:	4b46      	ldr	r3, [pc, #280]	; (4036ac <task_effects_controller+0x12c>)
  403594:	601a      	str	r2, [r3, #0]
	xQueueSaturation = xQueueCreate( 100, sizeof( uint32_t ) );
  403596:	2200      	movs	r2, #0
  403598:	2104      	movs	r1, #4
  40359a:	2064      	movs	r0, #100	; 0x64
  40359c:	4b42      	ldr	r3, [pc, #264]	; (4036a8 <task_effects_controller+0x128>)
  40359e:	4798      	blx	r3
  4035a0:	4602      	mov	r2, r0
  4035a2:	4b43      	ldr	r3, [pc, #268]	; (4036b0 <task_effects_controller+0x130>)
  4035a4:	601a      	str	r2, [r3, #0]
	xQueueLowpass = xQueueCreate( 100, sizeof( uint32_t ) );
  4035a6:	2200      	movs	r2, #0
  4035a8:	2104      	movs	r1, #4
  4035aa:	2064      	movs	r0, #100	; 0x64
  4035ac:	4b3e      	ldr	r3, [pc, #248]	; (4036a8 <task_effects_controller+0x128>)
  4035ae:	4798      	blx	r3
  4035b0:	4602      	mov	r2, r0
  4035b2:	4b40      	ldr	r3, [pc, #256]	; (4036b4 <task_effects_controller+0x134>)
  4035b4:	601a      	str	r2, [r3, #0]

	config_AFEC_EFFECTS();
  4035b6:	4b40      	ldr	r3, [pc, #256]	; (4036b8 <task_effects_controller+0x138>)
  4035b8:	4798      	blx	r3
	
	int saturation = 0;
  4035ba:	2300      	movs	r3, #0
  4035bc:	617b      	str	r3, [r7, #20]
	int gain = 50;
  4035be:	2332      	movs	r3, #50	; 0x32
  4035c0:	613b      	str	r3, [r7, #16]
	int lowpass = 10000;
  4035c2:	f242 7310 	movw	r3, #10000	; 0x2710
  4035c6:	60fb      	str	r3, [r7, #12]

	effects_t effects;
	effects.gain = gain;
  4035c8:	693b      	ldr	r3, [r7, #16]
  4035ca:	603b      	str	r3, [r7, #0]
	effects.saturation = saturation;
  4035cc:	697b      	ldr	r3, [r7, #20]
  4035ce:	607b      	str	r3, [r7, #4]
	effects.lowpass = lowpass;
  4035d0:	68fb      	ldr	r3, [r7, #12]
  4035d2:	60bb      	str	r3, [r7, #8]

	afec_channel_enable(AFEC1, AFEC_CHANNEL_PIN_GAIN);
  4035d4:	2101      	movs	r1, #1
  4035d6:	4839      	ldr	r0, [pc, #228]	; (4036bc <task_effects_controller+0x13c>)
  4035d8:	4b39      	ldr	r3, [pc, #228]	; (4036c0 <task_effects_controller+0x140>)
  4035da:	4798      	blx	r3

	afec_start_software_conversion(AFEC1);
  4035dc:	4837      	ldr	r0, [pc, #220]	; (4036bc <task_effects_controller+0x13c>)
  4035de:	4b39      	ldr	r3, [pc, #228]	; (4036c4 <task_effects_controller+0x144>)
  4035e0:	4798      	blx	r3

// 	printf("Teste: %d\n", gain);
	
	while(1) {
		if (xQueueReceive( xQueueGain, &(gain),  10 / portTICK_RATE_MS)) {
  4035e2:	4b32      	ldr	r3, [pc, #200]	; (4036ac <task_effects_controller+0x12c>)
  4035e4:	6818      	ldr	r0, [r3, #0]
  4035e6:	f107 0110 	add.w	r1, r7, #16
  4035ea:	2300      	movs	r3, #0
  4035ec:	220a      	movs	r2, #10
  4035ee:	4c36      	ldr	r4, [pc, #216]	; (4036c8 <task_effects_controller+0x148>)
  4035f0:	47a0      	blx	r4
  4035f2:	4603      	mov	r3, r0
  4035f4:	2b00      	cmp	r3, #0
  4035f6:	d011      	beq.n	40361c <task_effects_controller+0x9c>
			printf("Gain: %d\n", gain);
  4035f8:	693b      	ldr	r3, [r7, #16]
  4035fa:	4619      	mov	r1, r3
  4035fc:	4833      	ldr	r0, [pc, #204]	; (4036cc <task_effects_controller+0x14c>)
  4035fe:	4b34      	ldr	r3, [pc, #208]	; (4036d0 <task_effects_controller+0x150>)
  403600:	4798      	blx	r3
			effects.gain = gain;
  403602:	693b      	ldr	r3, [r7, #16]
  403604:	603b      	str	r3, [r7, #0]
			
			afec_channel_disable(AFEC1, AFEC_CHANNEL_PIN_GAIN);
  403606:	2101      	movs	r1, #1
  403608:	482c      	ldr	r0, [pc, #176]	; (4036bc <task_effects_controller+0x13c>)
  40360a:	4b32      	ldr	r3, [pc, #200]	; (4036d4 <task_effects_controller+0x154>)
  40360c:	4798      	blx	r3
			afec_channel_enable(AFEC1, AFEC_CHANNEL_PIN_SATURATION);
  40360e:	2103      	movs	r1, #3
  403610:	482a      	ldr	r0, [pc, #168]	; (4036bc <task_effects_controller+0x13c>)
  403612:	4b2b      	ldr	r3, [pc, #172]	; (4036c0 <task_effects_controller+0x140>)
  403614:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  403616:	4829      	ldr	r0, [pc, #164]	; (4036bc <task_effects_controller+0x13c>)
  403618:	4b2a      	ldr	r3, [pc, #168]	; (4036c4 <task_effects_controller+0x144>)
  40361a:	4798      	blx	r3
		}
		if (xQueueReceive( xQueueSaturation, &(saturation), 10 / portTICK_RATE_MS)) {
  40361c:	4b24      	ldr	r3, [pc, #144]	; (4036b0 <task_effects_controller+0x130>)
  40361e:	6818      	ldr	r0, [r3, #0]
  403620:	f107 0114 	add.w	r1, r7, #20
  403624:	2300      	movs	r3, #0
  403626:	220a      	movs	r2, #10
  403628:	4c27      	ldr	r4, [pc, #156]	; (4036c8 <task_effects_controller+0x148>)
  40362a:	47a0      	blx	r4
  40362c:	4603      	mov	r3, r0
  40362e:	2b00      	cmp	r3, #0
  403630:	d011      	beq.n	403656 <task_effects_controller+0xd6>
			printf("Saturation: %d\n", saturation);
  403632:	697b      	ldr	r3, [r7, #20]
  403634:	4619      	mov	r1, r3
  403636:	4828      	ldr	r0, [pc, #160]	; (4036d8 <task_effects_controller+0x158>)
  403638:	4b25      	ldr	r3, [pc, #148]	; (4036d0 <task_effects_controller+0x150>)
  40363a:	4798      	blx	r3
			effects.saturation = saturation;
  40363c:	697b      	ldr	r3, [r7, #20]
  40363e:	607b      	str	r3, [r7, #4]
			
			afec_channel_disable(AFEC1, AFEC_CHANNEL_PIN_SATURATION);
  403640:	2103      	movs	r1, #3
  403642:	481e      	ldr	r0, [pc, #120]	; (4036bc <task_effects_controller+0x13c>)
  403644:	4b23      	ldr	r3, [pc, #140]	; (4036d4 <task_effects_controller+0x154>)
  403646:	4798      	blx	r3
			afec_channel_enable(AFEC1, AFEC_CHANNEL_PIN_LOWPASS);
  403648:	2105      	movs	r1, #5
  40364a:	481c      	ldr	r0, [pc, #112]	; (4036bc <task_effects_controller+0x13c>)
  40364c:	4b1c      	ldr	r3, [pc, #112]	; (4036c0 <task_effects_controller+0x140>)
  40364e:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  403650:	481a      	ldr	r0, [pc, #104]	; (4036bc <task_effects_controller+0x13c>)
  403652:	4b1c      	ldr	r3, [pc, #112]	; (4036c4 <task_effects_controller+0x144>)
  403654:	4798      	blx	r3
		}
		if (xQueueReceive( xQueueLowpass, &(lowpass), 10 / portTICK_RATE_MS)) {
  403656:	4b17      	ldr	r3, [pc, #92]	; (4036b4 <task_effects_controller+0x134>)
  403658:	6818      	ldr	r0, [r3, #0]
  40365a:	f107 010c 	add.w	r1, r7, #12
  40365e:	2300      	movs	r3, #0
  403660:	220a      	movs	r2, #10
  403662:	4c19      	ldr	r4, [pc, #100]	; (4036c8 <task_effects_controller+0x148>)
  403664:	47a0      	blx	r4
  403666:	4603      	mov	r3, r0
  403668:	2b00      	cmp	r3, #0
  40366a:	d011      	beq.n	403690 <task_effects_controller+0x110>
			printf("Lowpass: %d\n", lowpass);
  40366c:	68fb      	ldr	r3, [r7, #12]
  40366e:	4619      	mov	r1, r3
  403670:	481a      	ldr	r0, [pc, #104]	; (4036dc <task_effects_controller+0x15c>)
  403672:	4b17      	ldr	r3, [pc, #92]	; (4036d0 <task_effects_controller+0x150>)
  403674:	4798      	blx	r3
			effects.lowpass = lowpass;
  403676:	68fb      	ldr	r3, [r7, #12]
  403678:	60bb      	str	r3, [r7, #8]

			afec_channel_disable(AFEC1, AFEC_CHANNEL_PIN_LOWPASS);
  40367a:	2105      	movs	r1, #5
  40367c:	480f      	ldr	r0, [pc, #60]	; (4036bc <task_effects_controller+0x13c>)
  40367e:	4b15      	ldr	r3, [pc, #84]	; (4036d4 <task_effects_controller+0x154>)
  403680:	4798      	blx	r3
			afec_channel_enable(AFEC1, AFEC_CHANNEL_PIN_GAIN);
  403682:	2101      	movs	r1, #1
  403684:	480d      	ldr	r0, [pc, #52]	; (4036bc <task_effects_controller+0x13c>)
  403686:	4b0e      	ldr	r3, [pc, #56]	; (4036c0 <task_effects_controller+0x140>)
  403688:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  40368a:	480c      	ldr	r0, [pc, #48]	; (4036bc <task_effects_controller+0x13c>)
  40368c:	4b0d      	ldr	r3, [pc, #52]	; (4036c4 <task_effects_controller+0x144>)
  40368e:	4798      	blx	r3
		}
		xQueueSend( xQueueEffects, &effects, NULL);
  403690:	4b13      	ldr	r3, [pc, #76]	; (4036e0 <task_effects_controller+0x160>)
  403692:	6818      	ldr	r0, [r3, #0]
  403694:	4639      	mov	r1, r7
  403696:	2300      	movs	r3, #0
  403698:	2200      	movs	r2, #0
  40369a:	4c12      	ldr	r4, [pc, #72]	; (4036e4 <task_effects_controller+0x164>)
  40369c:	47a0      	blx	r4
		vTaskDelay(500 / portTICK_RATE_MS);
  40369e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4036a2:	4b11      	ldr	r3, [pc, #68]	; (4036e8 <task_effects_controller+0x168>)
  4036a4:	4798      	blx	r3
		if (xQueueReceive( xQueueGain, &(gain),  10 / portTICK_RATE_MS)) {
  4036a6:	e79c      	b.n	4035e2 <task_effects_controller+0x62>
  4036a8:	004009f1 	.word	0x004009f1
  4036ac:	2040af28 	.word	0x2040af28
  4036b0:	20415b1c 	.word	0x20415b1c
  4036b4:	2040af2c 	.word	0x2040af2c
  4036b8:	004032bd 	.word	0x004032bd
  4036bc:	40064000 	.word	0x40064000
  4036c0:	0040258d 	.word	0x0040258d
  4036c4:	00402571 	.word	0x00402571
  4036c8:	00400cad 	.word	0x00400cad
  4036cc:	00408f74 	.word	0x00408f74
  4036d0:	00405edd 	.word	0x00405edd
  4036d4:	004025d9 	.word	0x004025d9
  4036d8:	00408f80 	.word	0x00408f80
  4036dc:	00408f90 	.word	0x00408f90
  4036e0:	20415b20 	.word	0x20415b20
  4036e4:	00400a89 	.word	0x00400a89
  4036e8:	004012b1 	.word	0x004012b1

004036ec <main>:

/************************************************************************/
/* Main                                                                 */
/************************************************************************/
int main(void)
{
  4036ec:	b590      	push	{r4, r7, lr}
  4036ee:	b085      	sub	sp, #20
  4036f0:	af04      	add	r7, sp, #16

	/* Initialize the SAM system. */
	sysclk_init();
  4036f2:	4b1c      	ldr	r3, [pc, #112]	; (403764 <main+0x78>)
  4036f4:	4798      	blx	r3
	ioport_init();
  4036f6:	4b1c      	ldr	r3, [pc, #112]	; (403768 <main+0x7c>)
  4036f8:	4798      	blx	r3
	board_init();
  4036fa:	4b1c      	ldr	r3, [pc, #112]	; (40376c <main+0x80>)
  4036fc:	4798      	blx	r3
  
	/* inicializa delay */
	delay_init(sysclk_get_cpu_hz());

	/* inicializa console (printf) */
	configure_console();
  4036fe:	4b1c      	ldr	r3, [pc, #112]	; (403770 <main+0x84>)
  403700:	4798      	blx	r3
  
	/* Output example information. */
	puts(STRING_HEADER);
  403702:	481c      	ldr	r0, [pc, #112]	; (403774 <main+0x88>)
  403704:	4b1c      	ldr	r3, [pc, #112]	; (403778 <main+0x8c>)
  403706:	4798      	blx	r3
	
	/*BUT_init();*/
	
	if (xTaskCreate(task_adc_to_dac, "AudioTask", TASK_TRIGGER_STACK_SIZE, NULL,
  403708:	2300      	movs	r3, #0
  40370a:	9303      	str	r3, [sp, #12]
  40370c:	2300      	movs	r3, #0
  40370e:	9302      	str	r3, [sp, #8]
  403710:	2300      	movs	r3, #0
  403712:	9301      	str	r3, [sp, #4]
  403714:	2300      	movs	r3, #0
  403716:	9300      	str	r3, [sp, #0]
  403718:	2300      	movs	r3, #0
  40371a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40371e:	4917      	ldr	r1, [pc, #92]	; (40377c <main+0x90>)
  403720:	4817      	ldr	r0, [pc, #92]	; (403780 <main+0x94>)
  403722:	4c18      	ldr	r4, [pc, #96]	; (403784 <main+0x98>)
  403724:	47a0      	blx	r4
  403726:	4603      	mov	r3, r0
  403728:	2b01      	cmp	r3, #1
  40372a:	d002      	beq.n	403732 <main+0x46>
	TASK_TRIGGER_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create AudioTask task\r\n");
  40372c:	4816      	ldr	r0, [pc, #88]	; (403788 <main+0x9c>)
  40372e:	4b17      	ldr	r3, [pc, #92]	; (40378c <main+0xa0>)
  403730:	4798      	blx	r3
	}

	if (xTaskCreate(task_effects_controller, "EffectsController", TASK_TRIGGER_STACK_SIZE, NULL,
  403732:	2300      	movs	r3, #0
  403734:	9303      	str	r3, [sp, #12]
  403736:	2300      	movs	r3, #0
  403738:	9302      	str	r3, [sp, #8]
  40373a:	2300      	movs	r3, #0
  40373c:	9301      	str	r3, [sp, #4]
  40373e:	2300      	movs	r3, #0
  403740:	9300      	str	r3, [sp, #0]
  403742:	2300      	movs	r3, #0
  403744:	f44f 7280 	mov.w	r2, #256	; 0x100
  403748:	4911      	ldr	r1, [pc, #68]	; (403790 <main+0xa4>)
  40374a:	4812      	ldr	r0, [pc, #72]	; (403794 <main+0xa8>)
  40374c:	4c0d      	ldr	r4, [pc, #52]	; (403784 <main+0x98>)
  40374e:	47a0      	blx	r4
  403750:	4603      	mov	r3, r0
  403752:	2b01      	cmp	r3, #1
  403754:	d002      	beq.n	40375c <main+0x70>
	TASK_TRIGGER_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create EffectsController task\r\n");
  403756:	4810      	ldr	r0, [pc, #64]	; (403798 <main+0xac>)
  403758:	4b0c      	ldr	r3, [pc, #48]	; (40378c <main+0xa0>)
  40375a:	4798      	blx	r3
	}
	
	vTaskStartScheduler();
  40375c:	4b0f      	ldr	r3, [pc, #60]	; (40379c <main+0xb0>)
  40375e:	4798      	blx	r3

	while (1) {
  403760:	e7fe      	b.n	403760 <main+0x74>
  403762:	bf00      	nop
  403764:	00403c15 	.word	0x00403c15
  403768:	00402761 	.word	0x00402761
  40376c:	004041e5 	.word	0x004041e5
  403770:	004031c5 	.word	0x004031c5
  403774:	00408fa0 	.word	0x00408fa0
  403778:	00406171 	.word	0x00406171
  40377c:	00409000 	.word	0x00409000
  403780:	0040348d 	.word	0x0040348d
  403784:	00401109 	.word	0x00401109
  403788:	0040900c 	.word	0x0040900c
  40378c:	00405edd 	.word	0x00405edd
  403790:	00409030 	.word	0x00409030
  403794:	00403581 	.word	0x00403581
  403798:	00409044 	.word	0x00409044
  40379c:	00401319 	.word	0x00401319

004037a0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4037a0:	b480      	push	{r7}
  4037a2:	b087      	sub	sp, #28
  4037a4:	af00      	add	r7, sp, #0
  4037a6:	60f8      	str	r0, [r7, #12]
  4037a8:	60b9      	str	r1, [r7, #8]
  4037aa:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4037ac:	68fa      	ldr	r2, [r7, #12]
  4037ae:	68bb      	ldr	r3, [r7, #8]
  4037b0:	019b      	lsls	r3, r3, #6
  4037b2:	4413      	add	r3, r2
  4037b4:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4037b6:	697b      	ldr	r3, [r7, #20]
  4037b8:	2202      	movs	r2, #2
  4037ba:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4037bc:	697b      	ldr	r3, [r7, #20]
  4037be:	f04f 32ff 	mov.w	r2, #4294967295
  4037c2:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4037c4:	697b      	ldr	r3, [r7, #20]
  4037c6:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4037c8:	697b      	ldr	r3, [r7, #20]
  4037ca:	687a      	ldr	r2, [r7, #4]
  4037cc:	605a      	str	r2, [r3, #4]
}
  4037ce:	bf00      	nop
  4037d0:	371c      	adds	r7, #28
  4037d2:	46bd      	mov	sp, r7
  4037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4037d8:	4770      	bx	lr

004037da <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4037da:	b480      	push	{r7}
  4037dc:	b083      	sub	sp, #12
  4037de:	af00      	add	r7, sp, #0
  4037e0:	6078      	str	r0, [r7, #4]
  4037e2:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4037e4:	687a      	ldr	r2, [r7, #4]
  4037e6:	683b      	ldr	r3, [r7, #0]
  4037e8:	019b      	lsls	r3, r3, #6
  4037ea:	4413      	add	r3, r2
  4037ec:	2205      	movs	r2, #5
  4037ee:	601a      	str	r2, [r3, #0]
}
  4037f0:	bf00      	nop
  4037f2:	370c      	adds	r7, #12
  4037f4:	46bd      	mov	sp, r7
  4037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4037fa:	4770      	bx	lr

004037fc <tc_write_ra>:
 */
void tc_write_ra(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  4037fc:	b480      	push	{r7}
  4037fe:	b085      	sub	sp, #20
  403800:	af00      	add	r7, sp, #0
  403802:	60f8      	str	r0, [r7, #12]
  403804:	60b9      	str	r1, [r7, #8]
  403806:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  403808:	68fa      	ldr	r2, [r7, #12]
  40380a:	68bb      	ldr	r3, [r7, #8]
  40380c:	019b      	lsls	r3, r3, #6
  40380e:	4413      	add	r3, r2
  403810:	3314      	adds	r3, #20
  403812:	687a      	ldr	r2, [r7, #4]
  403814:	601a      	str	r2, [r3, #0]
}
  403816:	bf00      	nop
  403818:	3714      	adds	r7, #20
  40381a:	46bd      	mov	sp, r7
  40381c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403820:	4770      	bx	lr

00403822 <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  403822:	b480      	push	{r7}
  403824:	b085      	sub	sp, #20
  403826:	af00      	add	r7, sp, #0
  403828:	60f8      	str	r0, [r7, #12]
  40382a:	60b9      	str	r1, [r7, #8]
  40382c:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40382e:	68fa      	ldr	r2, [r7, #12]
  403830:	68bb      	ldr	r3, [r7, #8]
  403832:	019b      	lsls	r3, r3, #6
  403834:	4413      	add	r3, r2
  403836:	331c      	adds	r3, #28
  403838:	687a      	ldr	r2, [r7, #4]
  40383a:	601a      	str	r2, [r3, #0]
}
  40383c:	bf00      	nop
  40383e:	3714      	adds	r7, #20
  403840:	46bd      	mov	sp, r7
  403842:	f85d 7b04 	ldr.w	r7, [sp], #4
  403846:	4770      	bx	lr

00403848 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  403848:	b480      	push	{r7}
  40384a:	b085      	sub	sp, #20
  40384c:	af00      	add	r7, sp, #0
  40384e:	6078      	str	r0, [r7, #4]
  403850:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  403852:	687a      	ldr	r2, [r7, #4]
  403854:	683b      	ldr	r3, [r7, #0]
  403856:	019b      	lsls	r3, r3, #6
  403858:	4413      	add	r3, r2
  40385a:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  40385c:	68fb      	ldr	r3, [r7, #12]
  40385e:	6a1b      	ldr	r3, [r3, #32]
}
  403860:	4618      	mov	r0, r3
  403862:	3714      	adds	r7, #20
  403864:	46bd      	mov	sp, r7
  403866:	f85d 7b04 	ldr.w	r7, [sp], #4
  40386a:	4770      	bx	lr

0040386c <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40386c:	b480      	push	{r7}
  40386e:	b08d      	sub	sp, #52	; 0x34
  403870:	af00      	add	r7, sp, #0
  403872:	60f8      	str	r0, [r7, #12]
  403874:	60b9      	str	r1, [r7, #8]
  403876:	607a      	str	r2, [r7, #4]
  403878:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40387a:	2302      	movs	r3, #2
  40387c:	613b      	str	r3, [r7, #16]
  40387e:	2308      	movs	r3, #8
  403880:	617b      	str	r3, [r7, #20]
  403882:	2320      	movs	r3, #32
  403884:	61bb      	str	r3, [r7, #24]
  403886:	2380      	movs	r3, #128	; 0x80
  403888:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  40388c:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40388e:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  403890:	2300      	movs	r3, #0
  403892:	62fb      	str	r3, [r7, #44]	; 0x2c
  403894:	e01a      	b.n	4038cc <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  403896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403898:	009b      	lsls	r3, r3, #2
  40389a:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40389e:	4413      	add	r3, r2
  4038a0:	f853 3c20 	ldr.w	r3, [r3, #-32]
  4038a4:	68ba      	ldr	r2, [r7, #8]
  4038a6:	fbb2 f3f3 	udiv	r3, r2, r3
  4038aa:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  4038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4038ae:	0c1b      	lsrs	r3, r3, #16
  4038b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  4038b2:	68fa      	ldr	r2, [r7, #12]
  4038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4038b6:	429a      	cmp	r2, r3
  4038b8:	d901      	bls.n	4038be <tc_find_mck_divisor+0x52>
			return 0;
  4038ba:	2300      	movs	r3, #0
  4038bc:	e023      	b.n	403906 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  4038be:	68fa      	ldr	r2, [r7, #12]
  4038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4038c2:	429a      	cmp	r2, r3
  4038c4:	d206      	bcs.n	4038d4 <tc_find_mck_divisor+0x68>
			ul_index++) {
  4038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4038c8:	3301      	adds	r3, #1
  4038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  4038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4038ce:	2b04      	cmp	r3, #4
  4038d0:	d9e1      	bls.n	403896 <tc_find_mck_divisor+0x2a>
  4038d2:	e000      	b.n	4038d6 <tc_find_mck_divisor+0x6a>
			break;
  4038d4:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  4038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4038d8:	2b04      	cmp	r3, #4
  4038da:	d901      	bls.n	4038e0 <tc_find_mck_divisor+0x74>
		return 0;
  4038dc:	2300      	movs	r3, #0
  4038de:	e012      	b.n	403906 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  4038e0:	687b      	ldr	r3, [r7, #4]
  4038e2:	2b00      	cmp	r3, #0
  4038e4:	d008      	beq.n	4038f8 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  4038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4038e8:	009b      	lsls	r3, r3, #2
  4038ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4038ee:	4413      	add	r3, r2
  4038f0:	f853 2c20 	ldr.w	r2, [r3, #-32]
  4038f4:	687b      	ldr	r3, [r7, #4]
  4038f6:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  4038f8:	683b      	ldr	r3, [r7, #0]
  4038fa:	2b00      	cmp	r3, #0
  4038fc:	d002      	beq.n	403904 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  4038fe:	683b      	ldr	r3, [r7, #0]
  403900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  403902:	601a      	str	r2, [r3, #0]
	}

	return 1;
  403904:	2301      	movs	r3, #1
}
  403906:	4618      	mov	r0, r3
  403908:	3734      	adds	r7, #52	; 0x34
  40390a:	46bd      	mov	sp, r7
  40390c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403910:	4770      	bx	lr
	...

00403914 <osc_enable>:
{
  403914:	b580      	push	{r7, lr}
  403916:	b082      	sub	sp, #8
  403918:	af00      	add	r7, sp, #0
  40391a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40391c:	687b      	ldr	r3, [r7, #4]
  40391e:	2b07      	cmp	r3, #7
  403920:	d831      	bhi.n	403986 <osc_enable+0x72>
  403922:	a201      	add	r2, pc, #4	; (adr r2, 403928 <osc_enable+0x14>)
  403924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403928:	00403985 	.word	0x00403985
  40392c:	00403949 	.word	0x00403949
  403930:	00403951 	.word	0x00403951
  403934:	00403959 	.word	0x00403959
  403938:	00403961 	.word	0x00403961
  40393c:	00403969 	.word	0x00403969
  403940:	00403971 	.word	0x00403971
  403944:	0040397b 	.word	0x0040397b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  403948:	2000      	movs	r0, #0
  40394a:	4b11      	ldr	r3, [pc, #68]	; (403990 <osc_enable+0x7c>)
  40394c:	4798      	blx	r3
		break;
  40394e:	e01a      	b.n	403986 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  403950:	2001      	movs	r0, #1
  403952:	4b0f      	ldr	r3, [pc, #60]	; (403990 <osc_enable+0x7c>)
  403954:	4798      	blx	r3
		break;
  403956:	e016      	b.n	403986 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  403958:	2000      	movs	r0, #0
  40395a:	4b0e      	ldr	r3, [pc, #56]	; (403994 <osc_enable+0x80>)
  40395c:	4798      	blx	r3
		break;
  40395e:	e012      	b.n	403986 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  403960:	2010      	movs	r0, #16
  403962:	4b0c      	ldr	r3, [pc, #48]	; (403994 <osc_enable+0x80>)
  403964:	4798      	blx	r3
		break;
  403966:	e00e      	b.n	403986 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  403968:	2020      	movs	r0, #32
  40396a:	4b0a      	ldr	r3, [pc, #40]	; (403994 <osc_enable+0x80>)
  40396c:	4798      	blx	r3
		break;
  40396e:	e00a      	b.n	403986 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403970:	213e      	movs	r1, #62	; 0x3e
  403972:	2000      	movs	r0, #0
  403974:	4b08      	ldr	r3, [pc, #32]	; (403998 <osc_enable+0x84>)
  403976:	4798      	blx	r3
		break;
  403978:	e005      	b.n	403986 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40397a:	213e      	movs	r1, #62	; 0x3e
  40397c:	2001      	movs	r0, #1
  40397e:	4b06      	ldr	r3, [pc, #24]	; (403998 <osc_enable+0x84>)
  403980:	4798      	blx	r3
		break;
  403982:	e000      	b.n	403986 <osc_enable+0x72>
		break;
  403984:	bf00      	nop
}
  403986:	bf00      	nop
  403988:	3708      	adds	r7, #8
  40398a:	46bd      	mov	sp, r7
  40398c:	bd80      	pop	{r7, pc}
  40398e:	bf00      	nop
  403990:	00404d05 	.word	0x00404d05
  403994:	00404d71 	.word	0x00404d71
  403998:	00404de1 	.word	0x00404de1

0040399c <osc_is_ready>:
{
  40399c:	b580      	push	{r7, lr}
  40399e:	b082      	sub	sp, #8
  4039a0:	af00      	add	r7, sp, #0
  4039a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4039a4:	687b      	ldr	r3, [r7, #4]
  4039a6:	2b07      	cmp	r3, #7
  4039a8:	d826      	bhi.n	4039f8 <osc_is_ready+0x5c>
  4039aa:	a201      	add	r2, pc, #4	; (adr r2, 4039b0 <osc_is_ready+0x14>)
  4039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4039b0:	004039d1 	.word	0x004039d1
  4039b4:	004039d5 	.word	0x004039d5
  4039b8:	004039d5 	.word	0x004039d5
  4039bc:	004039e7 	.word	0x004039e7
  4039c0:	004039e7 	.word	0x004039e7
  4039c4:	004039e7 	.word	0x004039e7
  4039c8:	004039e7 	.word	0x004039e7
  4039cc:	004039e7 	.word	0x004039e7
		return 1;
  4039d0:	2301      	movs	r3, #1
  4039d2:	e012      	b.n	4039fa <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  4039d4:	4b0b      	ldr	r3, [pc, #44]	; (403a04 <osc_is_ready+0x68>)
  4039d6:	4798      	blx	r3
  4039d8:	4603      	mov	r3, r0
  4039da:	2b00      	cmp	r3, #0
  4039dc:	bf14      	ite	ne
  4039de:	2301      	movne	r3, #1
  4039e0:	2300      	moveq	r3, #0
  4039e2:	b2db      	uxtb	r3, r3
  4039e4:	e009      	b.n	4039fa <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  4039e6:	4b08      	ldr	r3, [pc, #32]	; (403a08 <osc_is_ready+0x6c>)
  4039e8:	4798      	blx	r3
  4039ea:	4603      	mov	r3, r0
  4039ec:	2b00      	cmp	r3, #0
  4039ee:	bf14      	ite	ne
  4039f0:	2301      	movne	r3, #1
  4039f2:	2300      	moveq	r3, #0
  4039f4:	b2db      	uxtb	r3, r3
  4039f6:	e000      	b.n	4039fa <osc_is_ready+0x5e>
	return 0;
  4039f8:	2300      	movs	r3, #0
}
  4039fa:	4618      	mov	r0, r3
  4039fc:	3708      	adds	r7, #8
  4039fe:	46bd      	mov	sp, r7
  403a00:	bd80      	pop	{r7, pc}
  403a02:	bf00      	nop
  403a04:	00404d3d 	.word	0x00404d3d
  403a08:	00404e59 	.word	0x00404e59

00403a0c <osc_get_rate>:
{
  403a0c:	b480      	push	{r7}
  403a0e:	b083      	sub	sp, #12
  403a10:	af00      	add	r7, sp, #0
  403a12:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403a14:	687b      	ldr	r3, [r7, #4]
  403a16:	2b07      	cmp	r3, #7
  403a18:	d825      	bhi.n	403a66 <osc_get_rate+0x5a>
  403a1a:	a201      	add	r2, pc, #4	; (adr r2, 403a20 <osc_get_rate+0x14>)
  403a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403a20:	00403a41 	.word	0x00403a41
  403a24:	00403a47 	.word	0x00403a47
  403a28:	00403a4d 	.word	0x00403a4d
  403a2c:	00403a53 	.word	0x00403a53
  403a30:	00403a57 	.word	0x00403a57
  403a34:	00403a5b 	.word	0x00403a5b
  403a38:	00403a5f 	.word	0x00403a5f
  403a3c:	00403a63 	.word	0x00403a63
		return OSC_SLCK_32K_RC_HZ;
  403a40:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403a44:	e010      	b.n	403a68 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  403a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403a4a:	e00d      	b.n	403a68 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  403a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403a50:	e00a      	b.n	403a68 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  403a52:	4b08      	ldr	r3, [pc, #32]	; (403a74 <osc_get_rate+0x68>)
  403a54:	e008      	b.n	403a68 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  403a56:	4b08      	ldr	r3, [pc, #32]	; (403a78 <osc_get_rate+0x6c>)
  403a58:	e006      	b.n	403a68 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  403a5a:	4b08      	ldr	r3, [pc, #32]	; (403a7c <osc_get_rate+0x70>)
  403a5c:	e004      	b.n	403a68 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  403a5e:	4b07      	ldr	r3, [pc, #28]	; (403a7c <osc_get_rate+0x70>)
  403a60:	e002      	b.n	403a68 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  403a62:	4b06      	ldr	r3, [pc, #24]	; (403a7c <osc_get_rate+0x70>)
  403a64:	e000      	b.n	403a68 <osc_get_rate+0x5c>
	return 0;
  403a66:	2300      	movs	r3, #0
}
  403a68:	4618      	mov	r0, r3
  403a6a:	370c      	adds	r7, #12
  403a6c:	46bd      	mov	sp, r7
  403a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a72:	4770      	bx	lr
  403a74:	003d0900 	.word	0x003d0900
  403a78:	007a1200 	.word	0x007a1200
  403a7c:	00b71b00 	.word	0x00b71b00

00403a80 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  403a80:	b580      	push	{r7, lr}
  403a82:	b082      	sub	sp, #8
  403a84:	af00      	add	r7, sp, #0
  403a86:	4603      	mov	r3, r0
  403a88:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  403a8a:	bf00      	nop
  403a8c:	79fb      	ldrb	r3, [r7, #7]
  403a8e:	4618      	mov	r0, r3
  403a90:	4b05      	ldr	r3, [pc, #20]	; (403aa8 <osc_wait_ready+0x28>)
  403a92:	4798      	blx	r3
  403a94:	4603      	mov	r3, r0
  403a96:	f083 0301 	eor.w	r3, r3, #1
  403a9a:	b2db      	uxtb	r3, r3
  403a9c:	2b00      	cmp	r3, #0
  403a9e:	d1f5      	bne.n	403a8c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  403aa0:	bf00      	nop
  403aa2:	3708      	adds	r7, #8
  403aa4:	46bd      	mov	sp, r7
  403aa6:	bd80      	pop	{r7, pc}
  403aa8:	0040399d 	.word	0x0040399d

00403aac <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  403aac:	b580      	push	{r7, lr}
  403aae:	b086      	sub	sp, #24
  403ab0:	af00      	add	r7, sp, #0
  403ab2:	60f8      	str	r0, [r7, #12]
  403ab4:	607a      	str	r2, [r7, #4]
  403ab6:	603b      	str	r3, [r7, #0]
  403ab8:	460b      	mov	r3, r1
  403aba:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  403abc:	687b      	ldr	r3, [r7, #4]
  403abe:	2b00      	cmp	r3, #0
  403ac0:	d107      	bne.n	403ad2 <pll_config_init+0x26>
  403ac2:	683b      	ldr	r3, [r7, #0]
  403ac4:	2b00      	cmp	r3, #0
  403ac6:	d104      	bne.n	403ad2 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  403ac8:	68fb      	ldr	r3, [r7, #12]
  403aca:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  403ace:	601a      	str	r2, [r3, #0]
  403ad0:	e019      	b.n	403b06 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  403ad2:	7afb      	ldrb	r3, [r7, #11]
  403ad4:	4618      	mov	r0, r3
  403ad6:	4b0e      	ldr	r3, [pc, #56]	; (403b10 <pll_config_init+0x64>)
  403ad8:	4798      	blx	r3
  403ada:	4602      	mov	r2, r0
  403adc:	687b      	ldr	r3, [r7, #4]
  403ade:	fbb2 f3f3 	udiv	r3, r2, r3
  403ae2:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  403ae4:	697b      	ldr	r3, [r7, #20]
  403ae6:	683a      	ldr	r2, [r7, #0]
  403ae8:	fb02 f303 	mul.w	r3, r2, r3
  403aec:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  403aee:	683b      	ldr	r3, [r7, #0]
  403af0:	3b01      	subs	r3, #1
  403af2:	041a      	lsls	r2, r3, #16
  403af4:	4b07      	ldr	r3, [pc, #28]	; (403b14 <pll_config_init+0x68>)
  403af6:	4013      	ands	r3, r2
  403af8:	687a      	ldr	r2, [r7, #4]
  403afa:	b2d2      	uxtb	r2, r2
  403afc:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  403afe:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  403b02:	68fb      	ldr	r3, [r7, #12]
  403b04:	601a      	str	r2, [r3, #0]
	}
}
  403b06:	bf00      	nop
  403b08:	3718      	adds	r7, #24
  403b0a:	46bd      	mov	sp, r7
  403b0c:	bd80      	pop	{r7, pc}
  403b0e:	bf00      	nop
  403b10:	00403a0d 	.word	0x00403a0d
  403b14:	07ff0000 	.word	0x07ff0000

00403b18 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  403b18:	b580      	push	{r7, lr}
  403b1a:	b082      	sub	sp, #8
  403b1c:	af00      	add	r7, sp, #0
  403b1e:	6078      	str	r0, [r7, #4]
  403b20:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  403b22:	683b      	ldr	r3, [r7, #0]
  403b24:	2b00      	cmp	r3, #0
  403b26:	d108      	bne.n	403b3a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  403b28:	4b09      	ldr	r3, [pc, #36]	; (403b50 <pll_enable+0x38>)
  403b2a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403b2c:	4a09      	ldr	r2, [pc, #36]	; (403b54 <pll_enable+0x3c>)
  403b2e:	687b      	ldr	r3, [r7, #4]
  403b30:	681b      	ldr	r3, [r3, #0]
  403b32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403b36:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  403b38:	e005      	b.n	403b46 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  403b3a:	4a06      	ldr	r2, [pc, #24]	; (403b54 <pll_enable+0x3c>)
  403b3c:	687b      	ldr	r3, [r7, #4]
  403b3e:	681b      	ldr	r3, [r3, #0]
  403b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403b44:	61d3      	str	r3, [r2, #28]
}
  403b46:	bf00      	nop
  403b48:	3708      	adds	r7, #8
  403b4a:	46bd      	mov	sp, r7
  403b4c:	bd80      	pop	{r7, pc}
  403b4e:	bf00      	nop
  403b50:	00404e75 	.word	0x00404e75
  403b54:	400e0600 	.word	0x400e0600

00403b58 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  403b58:	b580      	push	{r7, lr}
  403b5a:	b082      	sub	sp, #8
  403b5c:	af00      	add	r7, sp, #0
  403b5e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  403b60:	687b      	ldr	r3, [r7, #4]
  403b62:	2b00      	cmp	r3, #0
  403b64:	d103      	bne.n	403b6e <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  403b66:	4b05      	ldr	r3, [pc, #20]	; (403b7c <pll_is_locked+0x24>)
  403b68:	4798      	blx	r3
  403b6a:	4603      	mov	r3, r0
  403b6c:	e002      	b.n	403b74 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  403b6e:	4b04      	ldr	r3, [pc, #16]	; (403b80 <pll_is_locked+0x28>)
  403b70:	4798      	blx	r3
  403b72:	4603      	mov	r3, r0
	}
}
  403b74:	4618      	mov	r0, r3
  403b76:	3708      	adds	r7, #8
  403b78:	46bd      	mov	sp, r7
  403b7a:	bd80      	pop	{r7, pc}
  403b7c:	00404e91 	.word	0x00404e91
  403b80:	00404ead 	.word	0x00404ead

00403b84 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  403b84:	b580      	push	{r7, lr}
  403b86:	b082      	sub	sp, #8
  403b88:	af00      	add	r7, sp, #0
  403b8a:	4603      	mov	r3, r0
  403b8c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  403b8e:	79fb      	ldrb	r3, [r7, #7]
  403b90:	3b03      	subs	r3, #3
  403b92:	2b04      	cmp	r3, #4
  403b94:	d808      	bhi.n	403ba8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  403b96:	79fb      	ldrb	r3, [r7, #7]
  403b98:	4618      	mov	r0, r3
  403b9a:	4b06      	ldr	r3, [pc, #24]	; (403bb4 <pll_enable_source+0x30>)
  403b9c:	4798      	blx	r3
		osc_wait_ready(e_src);
  403b9e:	79fb      	ldrb	r3, [r7, #7]
  403ba0:	4618      	mov	r0, r3
  403ba2:	4b05      	ldr	r3, [pc, #20]	; (403bb8 <pll_enable_source+0x34>)
  403ba4:	4798      	blx	r3
		break;
  403ba6:	e000      	b.n	403baa <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  403ba8:	bf00      	nop
	}
}
  403baa:	bf00      	nop
  403bac:	3708      	adds	r7, #8
  403bae:	46bd      	mov	sp, r7
  403bb0:	bd80      	pop	{r7, pc}
  403bb2:	bf00      	nop
  403bb4:	00403915 	.word	0x00403915
  403bb8:	00403a81 	.word	0x00403a81

00403bbc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  403bbc:	b580      	push	{r7, lr}
  403bbe:	b082      	sub	sp, #8
  403bc0:	af00      	add	r7, sp, #0
  403bc2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403bc4:	bf00      	nop
  403bc6:	6878      	ldr	r0, [r7, #4]
  403bc8:	4b04      	ldr	r3, [pc, #16]	; (403bdc <pll_wait_for_lock+0x20>)
  403bca:	4798      	blx	r3
  403bcc:	4603      	mov	r3, r0
  403bce:	2b00      	cmp	r3, #0
  403bd0:	d0f9      	beq.n	403bc6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  403bd2:	2300      	movs	r3, #0
}
  403bd4:	4618      	mov	r0, r3
  403bd6:	3708      	adds	r7, #8
  403bd8:	46bd      	mov	sp, r7
  403bda:	bd80      	pop	{r7, pc}
  403bdc:	00403b59 	.word	0x00403b59

00403be0 <sysclk_get_main_hz>:
{
  403be0:	b580      	push	{r7, lr}
  403be2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  403be4:	2006      	movs	r0, #6
  403be6:	4b05      	ldr	r3, [pc, #20]	; (403bfc <sysclk_get_main_hz+0x1c>)
  403be8:	4798      	blx	r3
  403bea:	4602      	mov	r2, r0
  403bec:	4613      	mov	r3, r2
  403bee:	009b      	lsls	r3, r3, #2
  403bf0:	4413      	add	r3, r2
  403bf2:	009a      	lsls	r2, r3, #2
  403bf4:	4413      	add	r3, r2
}
  403bf6:	4618      	mov	r0, r3
  403bf8:	bd80      	pop	{r7, pc}
  403bfa:	bf00      	nop
  403bfc:	00403a0d 	.word	0x00403a0d

00403c00 <sysclk_get_cpu_hz>:
{
  403c00:	b580      	push	{r7, lr}
  403c02:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  403c04:	4b02      	ldr	r3, [pc, #8]	; (403c10 <sysclk_get_cpu_hz+0x10>)
  403c06:	4798      	blx	r3
  403c08:	4603      	mov	r3, r0
}
  403c0a:	4618      	mov	r0, r3
  403c0c:	bd80      	pop	{r7, pc}
  403c0e:	bf00      	nop
  403c10:	00403be1 	.word	0x00403be1

00403c14 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403c14:	b590      	push	{r4, r7, lr}
  403c16:	b083      	sub	sp, #12
  403c18:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403c1a:	4813      	ldr	r0, [pc, #76]	; (403c68 <sysclk_init+0x54>)
  403c1c:	4b13      	ldr	r3, [pc, #76]	; (403c6c <sysclk_init+0x58>)
  403c1e:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  403c20:	2006      	movs	r0, #6
  403c22:	4b13      	ldr	r3, [pc, #76]	; (403c70 <sysclk_init+0x5c>)
  403c24:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  403c26:	1d38      	adds	r0, r7, #4
  403c28:	2319      	movs	r3, #25
  403c2a:	2201      	movs	r2, #1
  403c2c:	2106      	movs	r1, #6
  403c2e:	4c11      	ldr	r4, [pc, #68]	; (403c74 <sysclk_init+0x60>)
  403c30:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  403c32:	1d3b      	adds	r3, r7, #4
  403c34:	2100      	movs	r1, #0
  403c36:	4618      	mov	r0, r3
  403c38:	4b0f      	ldr	r3, [pc, #60]	; (403c78 <sysclk_init+0x64>)
  403c3a:	4798      	blx	r3
		pll_wait_for_lock(0);
  403c3c:	2000      	movs	r0, #0
  403c3e:	4b0f      	ldr	r3, [pc, #60]	; (403c7c <sysclk_init+0x68>)
  403c40:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  403c42:	2002      	movs	r0, #2
  403c44:	4b0e      	ldr	r3, [pc, #56]	; (403c80 <sysclk_init+0x6c>)
  403c46:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403c48:	2000      	movs	r0, #0
  403c4a:	4b0e      	ldr	r3, [pc, #56]	; (403c84 <sysclk_init+0x70>)
  403c4c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403c4e:	4b0e      	ldr	r3, [pc, #56]	; (403c88 <sysclk_init+0x74>)
  403c50:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403c52:	4b0e      	ldr	r3, [pc, #56]	; (403c8c <sysclk_init+0x78>)
  403c54:	4798      	blx	r3
  403c56:	4603      	mov	r3, r0
  403c58:	4618      	mov	r0, r3
  403c5a:	4b04      	ldr	r3, [pc, #16]	; (403c6c <sysclk_init+0x58>)
  403c5c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  403c5e:	bf00      	nop
  403c60:	370c      	adds	r7, #12
  403c62:	46bd      	mov	sp, r7
  403c64:	bd90      	pop	{r4, r7, pc}
  403c66:	bf00      	nop
  403c68:	11e1a300 	.word	0x11e1a300
  403c6c:	00405539 	.word	0x00405539
  403c70:	00403b85 	.word	0x00403b85
  403c74:	00403aad 	.word	0x00403aad
  403c78:	00403b19 	.word	0x00403b19
  403c7c:	00403bbd 	.word	0x00403bbd
  403c80:	00404c05 	.word	0x00404c05
  403c84:	00404c81 	.word	0x00404c81
  403c88:	004053d1 	.word	0x004053d1
  403c8c:	00403c01 	.word	0x00403c01

00403c90 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  403c90:	b580      	push	{r7, lr}
  403c92:	b086      	sub	sp, #24
  403c94:	af00      	add	r7, sp, #0
  403c96:	60f8      	str	r0, [r7, #12]
  403c98:	60b9      	str	r1, [r7, #8]
  403c9a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  403c9c:	2300      	movs	r3, #0
  403c9e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  403ca0:	68fb      	ldr	r3, [r7, #12]
  403ca2:	2b00      	cmp	r3, #0
  403ca4:	d012      	beq.n	403ccc <_read+0x3c>
		return -1;
  403ca6:	f04f 33ff 	mov.w	r3, #4294967295
  403caa:	e013      	b.n	403cd4 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  403cac:	4b0b      	ldr	r3, [pc, #44]	; (403cdc <_read+0x4c>)
  403cae:	681b      	ldr	r3, [r3, #0]
  403cb0:	4a0b      	ldr	r2, [pc, #44]	; (403ce0 <_read+0x50>)
  403cb2:	6812      	ldr	r2, [r2, #0]
  403cb4:	68b9      	ldr	r1, [r7, #8]
  403cb6:	4610      	mov	r0, r2
  403cb8:	4798      	blx	r3
		ptr++;
  403cba:	68bb      	ldr	r3, [r7, #8]
  403cbc:	3301      	adds	r3, #1
  403cbe:	60bb      	str	r3, [r7, #8]
		nChars++;
  403cc0:	697b      	ldr	r3, [r7, #20]
  403cc2:	3301      	adds	r3, #1
  403cc4:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  403cc6:	687b      	ldr	r3, [r7, #4]
  403cc8:	3b01      	subs	r3, #1
  403cca:	607b      	str	r3, [r7, #4]
  403ccc:	687b      	ldr	r3, [r7, #4]
  403cce:	2b00      	cmp	r3, #0
  403cd0:	dcec      	bgt.n	403cac <_read+0x1c>
	}
	return nChars;
  403cd2:	697b      	ldr	r3, [r7, #20]
}
  403cd4:	4618      	mov	r0, r3
  403cd6:	3718      	adds	r7, #24
  403cd8:	46bd      	mov	sp, r7
  403cda:	bd80      	pop	{r7, pc}
  403cdc:	20415b2c 	.word	0x20415b2c
  403ce0:	20415b34 	.word	0x20415b34

00403ce4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  403ce4:	b580      	push	{r7, lr}
  403ce6:	b086      	sub	sp, #24
  403ce8:	af00      	add	r7, sp, #0
  403cea:	60f8      	str	r0, [r7, #12]
  403cec:	60b9      	str	r1, [r7, #8]
  403cee:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  403cf0:	2300      	movs	r3, #0
  403cf2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  403cf4:	68fb      	ldr	r3, [r7, #12]
  403cf6:	2b01      	cmp	r3, #1
  403cf8:	d01e      	beq.n	403d38 <_write+0x54>
  403cfa:	68fb      	ldr	r3, [r7, #12]
  403cfc:	2b02      	cmp	r3, #2
  403cfe:	d01b      	beq.n	403d38 <_write+0x54>
  403d00:	68fb      	ldr	r3, [r7, #12]
  403d02:	2b03      	cmp	r3, #3
  403d04:	d018      	beq.n	403d38 <_write+0x54>
		return -1;
  403d06:	f04f 33ff 	mov.w	r3, #4294967295
  403d0a:	e019      	b.n	403d40 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  403d0c:	4b0e      	ldr	r3, [pc, #56]	; (403d48 <_write+0x64>)
  403d0e:	681a      	ldr	r2, [r3, #0]
  403d10:	4b0e      	ldr	r3, [pc, #56]	; (403d4c <_write+0x68>)
  403d12:	6818      	ldr	r0, [r3, #0]
  403d14:	68bb      	ldr	r3, [r7, #8]
  403d16:	1c59      	adds	r1, r3, #1
  403d18:	60b9      	str	r1, [r7, #8]
  403d1a:	781b      	ldrb	r3, [r3, #0]
  403d1c:	4619      	mov	r1, r3
  403d1e:	4790      	blx	r2
  403d20:	4603      	mov	r3, r0
  403d22:	2b00      	cmp	r3, #0
  403d24:	da02      	bge.n	403d2c <_write+0x48>
			return -1;
  403d26:	f04f 33ff 	mov.w	r3, #4294967295
  403d2a:	e009      	b.n	403d40 <_write+0x5c>
		}
		++nChars;
  403d2c:	697b      	ldr	r3, [r7, #20]
  403d2e:	3301      	adds	r3, #1
  403d30:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  403d32:	687b      	ldr	r3, [r7, #4]
  403d34:	3b01      	subs	r3, #1
  403d36:	607b      	str	r3, [r7, #4]
  403d38:	687b      	ldr	r3, [r7, #4]
  403d3a:	2b00      	cmp	r3, #0
  403d3c:	d1e6      	bne.n	403d0c <_write+0x28>
	}
	return nChars;
  403d3e:	697b      	ldr	r3, [r7, #20]
}
  403d40:	4618      	mov	r0, r3
  403d42:	3718      	adds	r7, #24
  403d44:	46bd      	mov	sp, r7
  403d46:	bd80      	pop	{r7, pc}
  403d48:	20415b30 	.word	0x20415b30
  403d4c:	20415b34 	.word	0x20415b34

00403d50 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  403d50:	b480      	push	{r7}
  403d52:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403d54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403d58:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  403d5c:	4b09      	ldr	r3, [pc, #36]	; (403d84 <SCB_EnableICache+0x34>)
  403d5e:	2200      	movs	r2, #0
  403d60:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  403d64:	4a07      	ldr	r2, [pc, #28]	; (403d84 <SCB_EnableICache+0x34>)
  403d66:	4b07      	ldr	r3, [pc, #28]	; (403d84 <SCB_EnableICache+0x34>)
  403d68:	695b      	ldr	r3, [r3, #20]
  403d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  403d6e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  403d70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403d74:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  403d78:	bf00      	nop
  403d7a:	46bd      	mov	sp, r7
  403d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d80:	4770      	bx	lr
  403d82:	bf00      	nop
  403d84:	e000ed00 	.word	0xe000ed00

00403d88 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  403d88:	b480      	push	{r7}
  403d8a:	b08b      	sub	sp, #44	; 0x2c
  403d8c:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  403d8e:	4b26      	ldr	r3, [pc, #152]	; (403e28 <SCB_EnableDCache+0xa0>)
  403d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  403d94:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  403d96:	69fb      	ldr	r3, [r7, #28]
  403d98:	0b5b      	lsrs	r3, r3, #13
  403d9a:	f3c3 030e 	ubfx	r3, r3, #0, #15
  403d9e:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  403da0:	69fb      	ldr	r3, [r7, #28]
  403da2:	f003 0307 	and.w	r3, r3, #7
  403da6:	3304      	adds	r3, #4
  403da8:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  403daa:	69fb      	ldr	r3, [r7, #28]
  403dac:	08db      	lsrs	r3, r3, #3
  403dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
  403db2:	617b      	str	r3, [r7, #20]
  403db4:	697b      	ldr	r3, [r7, #20]
  403db6:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403db8:	68bb      	ldr	r3, [r7, #8]
  403dba:	fab3 f383 	clz	r3, r3
  403dbe:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  403dc0:	687b      	ldr	r3, [r7, #4]
  403dc2:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  403dc4:	f003 031f 	and.w	r3, r3, #31
  403dc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  403dca:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  403dce:	697b      	ldr	r3, [r7, #20]
  403dd0:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  403dd2:	6a3a      	ldr	r2, [r7, #32]
  403dd4:	693b      	ldr	r3, [r7, #16]
  403dd6:	fa02 f303 	lsl.w	r3, r2, r3
  403dda:	4619      	mov	r1, r3
  403ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  403dde:	69bb      	ldr	r3, [r7, #24]
  403de0:	fa02 f303 	lsl.w	r3, r2, r3
  403de4:	430b      	orrs	r3, r1
  403de6:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  403de8:	4a0f      	ldr	r2, [pc, #60]	; (403e28 <SCB_EnableDCache+0xa0>)
  403dea:	68fb      	ldr	r3, [r7, #12]
  403dec:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  403df0:	6a3b      	ldr	r3, [r7, #32]
  403df2:	1e5a      	subs	r2, r3, #1
  403df4:	623a      	str	r2, [r7, #32]
  403df6:	2b00      	cmp	r3, #0
  403df8:	d1eb      	bne.n	403dd2 <SCB_EnableDCache+0x4a>
        } while(sets--);
  403dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403dfc:	1e5a      	subs	r2, r3, #1
  403dfe:	627a      	str	r2, [r7, #36]	; 0x24
  403e00:	2b00      	cmp	r3, #0
  403e02:	d1e4      	bne.n	403dce <SCB_EnableDCache+0x46>
  403e04:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  403e08:	4a07      	ldr	r2, [pc, #28]	; (403e28 <SCB_EnableDCache+0xa0>)
  403e0a:	4b07      	ldr	r3, [pc, #28]	; (403e28 <SCB_EnableDCache+0xa0>)
  403e0c:	695b      	ldr	r3, [r3, #20]
  403e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403e12:	6153      	str	r3, [r2, #20]
  403e14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403e18:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  403e1c:	bf00      	nop
  403e1e:	372c      	adds	r7, #44	; 0x2c
  403e20:	46bd      	mov	sp, r7
  403e22:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e26:	4770      	bx	lr
  403e28:	e000ed00 	.word	0xe000ed00

00403e2c <sysclk_enable_peripheral_clock>:
{
  403e2c:	b580      	push	{r7, lr}
  403e2e:	b082      	sub	sp, #8
  403e30:	af00      	add	r7, sp, #0
  403e32:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  403e34:	6878      	ldr	r0, [r7, #4]
  403e36:	4b03      	ldr	r3, [pc, #12]	; (403e44 <sysclk_enable_peripheral_clock+0x18>)
  403e38:	4798      	blx	r3
}
  403e3a:	bf00      	nop
  403e3c:	3708      	adds	r7, #8
  403e3e:	46bd      	mov	sp, r7
  403e40:	bd80      	pop	{r7, pc}
  403e42:	bf00      	nop
  403e44:	00404ec9 	.word	0x00404ec9

00403e48 <ioport_init>:
{
  403e48:	b580      	push	{r7, lr}
  403e4a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  403e4c:	200a      	movs	r0, #10
  403e4e:	4b08      	ldr	r3, [pc, #32]	; (403e70 <ioport_init+0x28>)
  403e50:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  403e52:	200b      	movs	r0, #11
  403e54:	4b06      	ldr	r3, [pc, #24]	; (403e70 <ioport_init+0x28>)
  403e56:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  403e58:	200c      	movs	r0, #12
  403e5a:	4b05      	ldr	r3, [pc, #20]	; (403e70 <ioport_init+0x28>)
  403e5c:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  403e5e:	2010      	movs	r0, #16
  403e60:	4b03      	ldr	r3, [pc, #12]	; (403e70 <ioport_init+0x28>)
  403e62:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  403e64:	2011      	movs	r0, #17
  403e66:	4b02      	ldr	r3, [pc, #8]	; (403e70 <ioport_init+0x28>)
  403e68:	4798      	blx	r3
}
  403e6a:	bf00      	nop
  403e6c:	bd80      	pop	{r7, pc}
  403e6e:	bf00      	nop
  403e70:	00403e2d 	.word	0x00403e2d

00403e74 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  403e74:	b480      	push	{r7}
  403e76:	b089      	sub	sp, #36	; 0x24
  403e78:	af00      	add	r7, sp, #0
  403e7a:	6078      	str	r0, [r7, #4]
  403e7c:	687b      	ldr	r3, [r7, #4]
  403e7e:	61fb      	str	r3, [r7, #28]
  403e80:	69fb      	ldr	r3, [r7, #28]
  403e82:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  403e84:	69bb      	ldr	r3, [r7, #24]
  403e86:	095a      	lsrs	r2, r3, #5
  403e88:	69fb      	ldr	r3, [r7, #28]
  403e8a:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  403e8c:	697b      	ldr	r3, [r7, #20]
  403e8e:	f003 031f 	and.w	r3, r3, #31
  403e92:	2101      	movs	r1, #1
  403e94:	fa01 f303 	lsl.w	r3, r1, r3
  403e98:	613a      	str	r2, [r7, #16]
  403e9a:	60fb      	str	r3, [r7, #12]
  403e9c:	693b      	ldr	r3, [r7, #16]
  403e9e:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403ea0:	68ba      	ldr	r2, [r7, #8]
  403ea2:	4b06      	ldr	r3, [pc, #24]	; (403ebc <ioport_disable_pin+0x48>)
  403ea4:	4413      	add	r3, r2
  403ea6:	025b      	lsls	r3, r3, #9
  403ea8:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403eaa:	68fb      	ldr	r3, [r7, #12]
  403eac:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  403eae:	bf00      	nop
  403eb0:	3724      	adds	r7, #36	; 0x24
  403eb2:	46bd      	mov	sp, r7
  403eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403eb8:	4770      	bx	lr
  403eba:	bf00      	nop
  403ebc:	00200707 	.word	0x00200707

00403ec0 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  403ec0:	b480      	push	{r7}
  403ec2:	b08d      	sub	sp, #52	; 0x34
  403ec4:	af00      	add	r7, sp, #0
  403ec6:	6078      	str	r0, [r7, #4]
  403ec8:	6039      	str	r1, [r7, #0]
  403eca:	687b      	ldr	r3, [r7, #4]
  403ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  403ece:	683b      	ldr	r3, [r7, #0]
  403ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  403ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403ed4:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  403ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403ed8:	095a      	lsrs	r2, r3, #5
  403eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403edc:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  403ede:	6a3b      	ldr	r3, [r7, #32]
  403ee0:	f003 031f 	and.w	r3, r3, #31
  403ee4:	2101      	movs	r1, #1
  403ee6:	fa01 f303 	lsl.w	r3, r1, r3
  403eea:	61fa      	str	r2, [r7, #28]
  403eec:	61bb      	str	r3, [r7, #24]
  403eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403ef0:	617b      	str	r3, [r7, #20]
  403ef2:	69fb      	ldr	r3, [r7, #28]
  403ef4:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403ef6:	693a      	ldr	r2, [r7, #16]
  403ef8:	4b37      	ldr	r3, [pc, #220]	; (403fd8 <ioport_set_pin_mode+0x118>)
  403efa:	4413      	add	r3, r2
  403efc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  403efe:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  403f00:	697b      	ldr	r3, [r7, #20]
  403f02:	f003 0308 	and.w	r3, r3, #8
  403f06:	2b00      	cmp	r3, #0
  403f08:	d003      	beq.n	403f12 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  403f0a:	68fb      	ldr	r3, [r7, #12]
  403f0c:	69ba      	ldr	r2, [r7, #24]
  403f0e:	665a      	str	r2, [r3, #100]	; 0x64
  403f10:	e002      	b.n	403f18 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  403f12:	68fb      	ldr	r3, [r7, #12]
  403f14:	69ba      	ldr	r2, [r7, #24]
  403f16:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  403f18:	697b      	ldr	r3, [r7, #20]
  403f1a:	f003 0310 	and.w	r3, r3, #16
  403f1e:	2b00      	cmp	r3, #0
  403f20:	d004      	beq.n	403f2c <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  403f22:	68fb      	ldr	r3, [r7, #12]
  403f24:	69ba      	ldr	r2, [r7, #24]
  403f26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  403f2a:	e003      	b.n	403f34 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  403f2c:	68fb      	ldr	r3, [r7, #12]
  403f2e:	69ba      	ldr	r2, [r7, #24]
  403f30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  403f34:	697b      	ldr	r3, [r7, #20]
  403f36:	f003 0320 	and.w	r3, r3, #32
  403f3a:	2b00      	cmp	r3, #0
  403f3c:	d003      	beq.n	403f46 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  403f3e:	68fb      	ldr	r3, [r7, #12]
  403f40:	69ba      	ldr	r2, [r7, #24]
  403f42:	651a      	str	r2, [r3, #80]	; 0x50
  403f44:	e002      	b.n	403f4c <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  403f46:	68fb      	ldr	r3, [r7, #12]
  403f48:	69ba      	ldr	r2, [r7, #24]
  403f4a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  403f4c:	697b      	ldr	r3, [r7, #20]
  403f4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  403f52:	2b00      	cmp	r3, #0
  403f54:	d003      	beq.n	403f5e <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  403f56:	68fb      	ldr	r3, [r7, #12]
  403f58:	69ba      	ldr	r2, [r7, #24]
  403f5a:	621a      	str	r2, [r3, #32]
  403f5c:	e002      	b.n	403f64 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  403f5e:	68fb      	ldr	r3, [r7, #12]
  403f60:	69ba      	ldr	r2, [r7, #24]
  403f62:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  403f64:	697b      	ldr	r3, [r7, #20]
  403f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403f6a:	2b00      	cmp	r3, #0
  403f6c:	d004      	beq.n	403f78 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  403f6e:	68fb      	ldr	r3, [r7, #12]
  403f70:	69ba      	ldr	r2, [r7, #24]
  403f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  403f76:	e003      	b.n	403f80 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403f78:	68fb      	ldr	r3, [r7, #12]
  403f7a:	69ba      	ldr	r2, [r7, #24]
  403f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  403f80:	697b      	ldr	r3, [r7, #20]
  403f82:	f003 0301 	and.w	r3, r3, #1
  403f86:	2b00      	cmp	r3, #0
  403f88:	d006      	beq.n	403f98 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  403f8a:	68fb      	ldr	r3, [r7, #12]
  403f8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403f8e:	69bb      	ldr	r3, [r7, #24]
  403f90:	431a      	orrs	r2, r3
  403f92:	68fb      	ldr	r3, [r7, #12]
  403f94:	671a      	str	r2, [r3, #112]	; 0x70
  403f96:	e006      	b.n	403fa6 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403f98:	68fb      	ldr	r3, [r7, #12]
  403f9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403f9c:	69bb      	ldr	r3, [r7, #24]
  403f9e:	43db      	mvns	r3, r3
  403fa0:	401a      	ands	r2, r3
  403fa2:	68fb      	ldr	r3, [r7, #12]
  403fa4:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  403fa6:	697b      	ldr	r3, [r7, #20]
  403fa8:	f003 0302 	and.w	r3, r3, #2
  403fac:	2b00      	cmp	r3, #0
  403fae:	d006      	beq.n	403fbe <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  403fb0:	68fb      	ldr	r3, [r7, #12]
  403fb2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403fb4:	69bb      	ldr	r3, [r7, #24]
  403fb6:	431a      	orrs	r2, r3
  403fb8:	68fb      	ldr	r3, [r7, #12]
  403fba:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  403fbc:	e006      	b.n	403fcc <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403fbe:	68fb      	ldr	r3, [r7, #12]
  403fc0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403fc2:	69bb      	ldr	r3, [r7, #24]
  403fc4:	43db      	mvns	r3, r3
  403fc6:	401a      	ands	r2, r3
  403fc8:	68fb      	ldr	r3, [r7, #12]
  403fca:	675a      	str	r2, [r3, #116]	; 0x74
  403fcc:	bf00      	nop
  403fce:	3734      	adds	r7, #52	; 0x34
  403fd0:	46bd      	mov	sp, r7
  403fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fd6:	4770      	bx	lr
  403fd8:	00200707 	.word	0x00200707

00403fdc <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  403fdc:	b480      	push	{r7}
  403fde:	b08d      	sub	sp, #52	; 0x34
  403fe0:	af00      	add	r7, sp, #0
  403fe2:	6078      	str	r0, [r7, #4]
  403fe4:	460b      	mov	r3, r1
  403fe6:	70fb      	strb	r3, [r7, #3]
  403fe8:	687b      	ldr	r3, [r7, #4]
  403fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  403fec:	78fb      	ldrb	r3, [r7, #3]
  403fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  403ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403ff4:	627b      	str	r3, [r7, #36]	; 0x24
  403ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403ff8:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  403ffa:	6a3b      	ldr	r3, [r7, #32]
  403ffc:	095b      	lsrs	r3, r3, #5
  403ffe:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404000:	69fa      	ldr	r2, [r7, #28]
  404002:	4b17      	ldr	r3, [pc, #92]	; (404060 <ioport_set_pin_dir+0x84>)
  404004:	4413      	add	r3, r2
  404006:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  404008:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40400a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40400e:	2b01      	cmp	r3, #1
  404010:	d109      	bne.n	404026 <ioport_set_pin_dir+0x4a>
  404012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404014:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  404016:	697b      	ldr	r3, [r7, #20]
  404018:	f003 031f 	and.w	r3, r3, #31
  40401c:	2201      	movs	r2, #1
  40401e:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404020:	69bb      	ldr	r3, [r7, #24]
  404022:	611a      	str	r2, [r3, #16]
  404024:	e00c      	b.n	404040 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  404026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40402a:	2b00      	cmp	r3, #0
  40402c:	d108      	bne.n	404040 <ioport_set_pin_dir+0x64>
  40402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404030:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  404032:	693b      	ldr	r3, [r7, #16]
  404034:	f003 031f 	and.w	r3, r3, #31
  404038:	2201      	movs	r2, #1
  40403a:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40403c:	69bb      	ldr	r3, [r7, #24]
  40403e:	615a      	str	r2, [r3, #20]
  404040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404042:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  404044:	68fb      	ldr	r3, [r7, #12]
  404046:	f003 031f 	and.w	r3, r3, #31
  40404a:	2201      	movs	r2, #1
  40404c:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40404e:	69bb      	ldr	r3, [r7, #24]
  404050:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  404054:	bf00      	nop
  404056:	3734      	adds	r7, #52	; 0x34
  404058:	46bd      	mov	sp, r7
  40405a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40405e:	4770      	bx	lr
  404060:	00200707 	.word	0x00200707

00404064 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  404064:	b480      	push	{r7}
  404066:	b08b      	sub	sp, #44	; 0x2c
  404068:	af00      	add	r7, sp, #0
  40406a:	6078      	str	r0, [r7, #4]
  40406c:	460b      	mov	r3, r1
  40406e:	70fb      	strb	r3, [r7, #3]
  404070:	687b      	ldr	r3, [r7, #4]
  404072:	627b      	str	r3, [r7, #36]	; 0x24
  404074:	78fb      	ldrb	r3, [r7, #3]
  404076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40407c:	61fb      	str	r3, [r7, #28]
  40407e:	69fb      	ldr	r3, [r7, #28]
  404080:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  404082:	69bb      	ldr	r3, [r7, #24]
  404084:	095b      	lsrs	r3, r3, #5
  404086:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404088:	697a      	ldr	r2, [r7, #20]
  40408a:	4b10      	ldr	r3, [pc, #64]	; (4040cc <ioport_set_pin_level+0x68>)
  40408c:	4413      	add	r3, r2
  40408e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  404090:	613b      	str	r3, [r7, #16]

	if (level) {
  404092:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  404096:	2b00      	cmp	r3, #0
  404098:	d009      	beq.n	4040ae <ioport_set_pin_level+0x4a>
  40409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40409c:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40409e:	68fb      	ldr	r3, [r7, #12]
  4040a0:	f003 031f 	and.w	r3, r3, #31
  4040a4:	2201      	movs	r2, #1
  4040a6:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4040a8:	693b      	ldr	r3, [r7, #16]
  4040aa:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4040ac:	e008      	b.n	4040c0 <ioport_set_pin_level+0x5c>
  4040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4040b0:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4040b2:	68bb      	ldr	r3, [r7, #8]
  4040b4:	f003 031f 	and.w	r3, r3, #31
  4040b8:	2201      	movs	r2, #1
  4040ba:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4040bc:	693b      	ldr	r3, [r7, #16]
  4040be:	635a      	str	r2, [r3, #52]	; 0x34
  4040c0:	bf00      	nop
  4040c2:	372c      	adds	r7, #44	; 0x2c
  4040c4:	46bd      	mov	sp, r7
  4040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040ca:	4770      	bx	lr
  4040cc:	00200707 	.word	0x00200707

004040d0 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4040d0:	b480      	push	{r7}
  4040d2:	b08d      	sub	sp, #52	; 0x34
  4040d4:	af00      	add	r7, sp, #0
  4040d6:	6078      	str	r0, [r7, #4]
  4040d8:	460b      	mov	r3, r1
  4040da:	70fb      	strb	r3, [r7, #3]
  4040dc:	687b      	ldr	r3, [r7, #4]
  4040de:	62fb      	str	r3, [r7, #44]	; 0x2c
  4040e0:	78fb      	ldrb	r3, [r7, #3]
  4040e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4040e8:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4040ec:	095a      	lsrs	r2, r3, #5
  4040ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4040f0:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4040f2:	6a3b      	ldr	r3, [r7, #32]
  4040f4:	f003 031f 	and.w	r3, r3, #31
  4040f8:	2101      	movs	r1, #1
  4040fa:	fa01 f303 	lsl.w	r3, r1, r3
  4040fe:	61fa      	str	r2, [r7, #28]
  404100:	61bb      	str	r3, [r7, #24]
  404102:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  404106:	75fb      	strb	r3, [r7, #23]
  404108:	69fb      	ldr	r3, [r7, #28]
  40410a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40410c:	693a      	ldr	r2, [r7, #16]
  40410e:	4b23      	ldr	r3, [pc, #140]	; (40419c <ioport_set_pin_sense_mode+0xcc>)
  404110:	4413      	add	r3, r2
  404112:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  404114:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  404116:	7dfb      	ldrb	r3, [r7, #23]
  404118:	3b01      	subs	r3, #1
  40411a:	2b03      	cmp	r3, #3
  40411c:	d82e      	bhi.n	40417c <ioport_set_pin_sense_mode+0xac>
  40411e:	a201      	add	r2, pc, #4	; (adr r2, 404124 <ioport_set_pin_sense_mode+0x54>)
  404120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404124:	00404159 	.word	0x00404159
  404128:	0040416b 	.word	0x0040416b
  40412c:	00404135 	.word	0x00404135
  404130:	00404147 	.word	0x00404147
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  404134:	68fb      	ldr	r3, [r7, #12]
  404136:	69ba      	ldr	r2, [r7, #24]
  404138:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  40413c:	68fb      	ldr	r3, [r7, #12]
  40413e:	69ba      	ldr	r2, [r7, #24]
  404140:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  404144:	e01f      	b.n	404186 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  404146:	68fb      	ldr	r3, [r7, #12]
  404148:	69ba      	ldr	r2, [r7, #24]
  40414a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  40414e:	68fb      	ldr	r3, [r7, #12]
  404150:	69ba      	ldr	r2, [r7, #24]
  404152:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  404156:	e016      	b.n	404186 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  404158:	68fb      	ldr	r3, [r7, #12]
  40415a:	69ba      	ldr	r2, [r7, #24]
  40415c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  404160:	68fb      	ldr	r3, [r7, #12]
  404162:	69ba      	ldr	r2, [r7, #24]
  404164:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  404168:	e00d      	b.n	404186 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40416a:	68fb      	ldr	r3, [r7, #12]
  40416c:	69ba      	ldr	r2, [r7, #24]
  40416e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  404172:	68fb      	ldr	r3, [r7, #12]
  404174:	69ba      	ldr	r2, [r7, #24]
  404176:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40417a:	e004      	b.n	404186 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  40417c:	68fb      	ldr	r3, [r7, #12]
  40417e:	69ba      	ldr	r2, [r7, #24]
  404180:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  404184:	e003      	b.n	40418e <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  404186:	68fb      	ldr	r3, [r7, #12]
  404188:	69ba      	ldr	r2, [r7, #24]
  40418a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  40418e:	bf00      	nop
  404190:	3734      	adds	r7, #52	; 0x34
  404192:	46bd      	mov	sp, r7
  404194:	f85d 7b04 	ldr.w	r7, [sp], #4
  404198:	4770      	bx	lr
  40419a:	bf00      	nop
  40419c:	00200707 	.word	0x00200707

004041a0 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  4041a0:	b480      	push	{r7}
  4041a2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  4041a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4041a8:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4041ac:	4a0c      	ldr	r2, [pc, #48]	; (4041e0 <tcm_disable+0x40>)
  4041ae:	4b0c      	ldr	r3, [pc, #48]	; (4041e0 <tcm_disable+0x40>)
  4041b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  4041b4:	f023 0301 	bic.w	r3, r3, #1
  4041b8:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4041bc:	4a08      	ldr	r2, [pc, #32]	; (4041e0 <tcm_disable+0x40>)
  4041be:	4b08      	ldr	r3, [pc, #32]	; (4041e0 <tcm_disable+0x40>)
  4041c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  4041c4:	f023 0301 	bic.w	r3, r3, #1
  4041c8:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  4041cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4041d0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  4041d4:	bf00      	nop
  4041d6:	46bd      	mov	sp, r7
  4041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4041dc:	4770      	bx	lr
  4041de:	bf00      	nop
  4041e0:	e000ed00 	.word	0xe000ed00

004041e4 <board_init>:
#endif

void board_init(void)
{
  4041e4:	b580      	push	{r7, lr}
  4041e6:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4041e8:	4b1e      	ldr	r3, [pc, #120]	; (404264 <board_init+0x80>)
  4041ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4041ee:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  4041f0:	4b1d      	ldr	r3, [pc, #116]	; (404268 <board_init+0x84>)
  4041f2:	4798      	blx	r3
	SCB_EnableDCache();
  4041f4:	4b1d      	ldr	r3, [pc, #116]	; (40426c <board_init+0x88>)
  4041f6:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4041f8:	4b1d      	ldr	r3, [pc, #116]	; (404270 <board_init+0x8c>)
  4041fa:	4a1e      	ldr	r2, [pc, #120]	; (404274 <board_init+0x90>)
  4041fc:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4041fe:	4b1c      	ldr	r3, [pc, #112]	; (404270 <board_init+0x8c>)
  404200:	4a1d      	ldr	r2, [pc, #116]	; (404278 <board_init+0x94>)
  404202:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  404204:	4b1d      	ldr	r3, [pc, #116]	; (40427c <board_init+0x98>)
  404206:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  404208:	4b1d      	ldr	r3, [pc, #116]	; (404280 <board_init+0x9c>)
  40420a:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  40420c:	2101      	movs	r1, #1
  40420e:	2048      	movs	r0, #72	; 0x48
  404210:	4b1c      	ldr	r3, [pc, #112]	; (404284 <board_init+0xa0>)
  404212:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  404214:	2101      	movs	r1, #1
  404216:	2048      	movs	r0, #72	; 0x48
  404218:	4b1b      	ldr	r3, [pc, #108]	; (404288 <board_init+0xa4>)
  40421a:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  40421c:	2100      	movs	r1, #0
  40421e:	200b      	movs	r0, #11
  404220:	4b18      	ldr	r3, [pc, #96]	; (404284 <board_init+0xa0>)
  404222:	4798      	blx	r3
  404224:	2188      	movs	r1, #136	; 0x88
  404226:	200b      	movs	r0, #11
  404228:	4b18      	ldr	r3, [pc, #96]	; (40428c <board_init+0xa8>)
  40422a:	4798      	blx	r3
  40422c:	2102      	movs	r1, #2
  40422e:	200b      	movs	r0, #11
  404230:	4b17      	ldr	r3, [pc, #92]	; (404290 <board_init+0xac>)
  404232:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  404234:	2100      	movs	r1, #0
  404236:	2015      	movs	r0, #21
  404238:	4b14      	ldr	r3, [pc, #80]	; (40428c <board_init+0xa8>)
  40423a:	4798      	blx	r3
  40423c:	2015      	movs	r0, #21
  40423e:	4b15      	ldr	r3, [pc, #84]	; (404294 <board_init+0xb0>)
  404240:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  404242:	4a15      	ldr	r2, [pc, #84]	; (404298 <board_init+0xb4>)
  404244:	4b14      	ldr	r3, [pc, #80]	; (404298 <board_init+0xb4>)
  404246:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  40424a:	f043 0310 	orr.w	r3, r3, #16
  40424e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  404252:	2103      	movs	r1, #3
  404254:	2024      	movs	r0, #36	; 0x24
  404256:	4b0d      	ldr	r3, [pc, #52]	; (40428c <board_init+0xa8>)
  404258:	4798      	blx	r3
  40425a:	2024      	movs	r0, #36	; 0x24
  40425c:	4b0d      	ldr	r3, [pc, #52]	; (404294 <board_init+0xb0>)
  40425e:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  404260:	bf00      	nop
  404262:	bd80      	pop	{r7, pc}
  404264:	400e1850 	.word	0x400e1850
  404268:	00403d51 	.word	0x00403d51
  40426c:	00403d89 	.word	0x00403d89
  404270:	400e0c00 	.word	0x400e0c00
  404274:	5a00080c 	.word	0x5a00080c
  404278:	5a00070c 	.word	0x5a00070c
  40427c:	004041a1 	.word	0x004041a1
  404280:	00403e49 	.word	0x00403e49
  404284:	00403fdd 	.word	0x00403fdd
  404288:	00404065 	.word	0x00404065
  40428c:	00403ec1 	.word	0x00403ec1
  404290:	004040d1 	.word	0x004040d1
  404294:	00403e75 	.word	0x00403e75
  404298:	40088000 	.word	0x40088000

0040429c <NVIC_EnableIRQ>:
{
  40429c:	b480      	push	{r7}
  40429e:	b083      	sub	sp, #12
  4042a0:	af00      	add	r7, sp, #0
  4042a2:	4603      	mov	r3, r0
  4042a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4042a6:	4909      	ldr	r1, [pc, #36]	; (4042cc <NVIC_EnableIRQ+0x30>)
  4042a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4042ac:	095b      	lsrs	r3, r3, #5
  4042ae:	79fa      	ldrb	r2, [r7, #7]
  4042b0:	f002 021f 	and.w	r2, r2, #31
  4042b4:	2001      	movs	r0, #1
  4042b6:	fa00 f202 	lsl.w	r2, r0, r2
  4042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4042be:	bf00      	nop
  4042c0:	370c      	adds	r7, #12
  4042c2:	46bd      	mov	sp, r7
  4042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042c8:	4770      	bx	lr
  4042ca:	bf00      	nop
  4042cc:	e000e100 	.word	0xe000e100

004042d0 <NVIC_ClearPendingIRQ>:
{
  4042d0:	b480      	push	{r7}
  4042d2:	b083      	sub	sp, #12
  4042d4:	af00      	add	r7, sp, #0
  4042d6:	4603      	mov	r3, r0
  4042d8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4042da:	4909      	ldr	r1, [pc, #36]	; (404300 <NVIC_ClearPendingIRQ+0x30>)
  4042dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4042e0:	095b      	lsrs	r3, r3, #5
  4042e2:	79fa      	ldrb	r2, [r7, #7]
  4042e4:	f002 021f 	and.w	r2, r2, #31
  4042e8:	2001      	movs	r0, #1
  4042ea:	fa00 f202 	lsl.w	r2, r0, r2
  4042ee:	3360      	adds	r3, #96	; 0x60
  4042f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  4042f4:	bf00      	nop
  4042f6:	370c      	adds	r7, #12
  4042f8:	46bd      	mov	sp, r7
  4042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042fe:	4770      	bx	lr
  404300:	e000e100 	.word	0xe000e100

00404304 <NVIC_SetPriority>:
{
  404304:	b480      	push	{r7}
  404306:	b083      	sub	sp, #12
  404308:	af00      	add	r7, sp, #0
  40430a:	4603      	mov	r3, r0
  40430c:	6039      	str	r1, [r7, #0]
  40430e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  404310:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404314:	2b00      	cmp	r3, #0
  404316:	da0b      	bge.n	404330 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404318:	490d      	ldr	r1, [pc, #52]	; (404350 <NVIC_SetPriority+0x4c>)
  40431a:	79fb      	ldrb	r3, [r7, #7]
  40431c:	f003 030f 	and.w	r3, r3, #15
  404320:	3b04      	subs	r3, #4
  404322:	683a      	ldr	r2, [r7, #0]
  404324:	b2d2      	uxtb	r2, r2
  404326:	0152      	lsls	r2, r2, #5
  404328:	b2d2      	uxtb	r2, r2
  40432a:	440b      	add	r3, r1
  40432c:	761a      	strb	r2, [r3, #24]
}
  40432e:	e009      	b.n	404344 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404330:	4908      	ldr	r1, [pc, #32]	; (404354 <NVIC_SetPriority+0x50>)
  404332:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404336:	683a      	ldr	r2, [r7, #0]
  404338:	b2d2      	uxtb	r2, r2
  40433a:	0152      	lsls	r2, r2, #5
  40433c:	b2d2      	uxtb	r2, r2
  40433e:	440b      	add	r3, r1
  404340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  404344:	bf00      	nop
  404346:	370c      	adds	r7, #12
  404348:	46bd      	mov	sp, r7
  40434a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40434e:	4770      	bx	lr
  404350:	e000ed00 	.word	0xe000ed00
  404354:	e000e100 	.word	0xe000e100

00404358 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  404358:	b480      	push	{r7}
  40435a:	b083      	sub	sp, #12
  40435c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40435e:	f3ef 8310 	mrs	r3, PRIMASK
  404362:	607b      	str	r3, [r7, #4]
  return(result);
  404364:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404366:	2b00      	cmp	r3, #0
  404368:	bf0c      	ite	eq
  40436a:	2301      	moveq	r3, #1
  40436c:	2300      	movne	r3, #0
  40436e:	b2db      	uxtb	r3, r3
  404370:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  404372:	b672      	cpsid	i
  __ASM volatile ("dmb");
  404374:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404378:	4b04      	ldr	r3, [pc, #16]	; (40438c <cpu_irq_save+0x34>)
  40437a:	2200      	movs	r2, #0
  40437c:	701a      	strb	r2, [r3, #0]
	return flags;
  40437e:	683b      	ldr	r3, [r7, #0]
}
  404380:	4618      	mov	r0, r3
  404382:	370c      	adds	r7, #12
  404384:	46bd      	mov	sp, r7
  404386:	f85d 7b04 	ldr.w	r7, [sp], #4
  40438a:	4770      	bx	lr
  40438c:	20400034 	.word	0x20400034

00404390 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  404390:	b480      	push	{r7}
  404392:	b083      	sub	sp, #12
  404394:	af00      	add	r7, sp, #0
  404396:	6078      	str	r0, [r7, #4]
	return (flags);
  404398:	687b      	ldr	r3, [r7, #4]
  40439a:	2b00      	cmp	r3, #0
  40439c:	bf14      	ite	ne
  40439e:	2301      	movne	r3, #1
  4043a0:	2300      	moveq	r3, #0
  4043a2:	b2db      	uxtb	r3, r3
}
  4043a4:	4618      	mov	r0, r3
  4043a6:	370c      	adds	r7, #12
  4043a8:	46bd      	mov	sp, r7
  4043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043ae:	4770      	bx	lr

004043b0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4043b0:	b580      	push	{r7, lr}
  4043b2:	b082      	sub	sp, #8
  4043b4:	af00      	add	r7, sp, #0
  4043b6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4043b8:	6878      	ldr	r0, [r7, #4]
  4043ba:	4b07      	ldr	r3, [pc, #28]	; (4043d8 <cpu_irq_restore+0x28>)
  4043bc:	4798      	blx	r3
  4043be:	4603      	mov	r3, r0
  4043c0:	2b00      	cmp	r3, #0
  4043c2:	d005      	beq.n	4043d0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4043c4:	4b05      	ldr	r3, [pc, #20]	; (4043dc <cpu_irq_restore+0x2c>)
  4043c6:	2201      	movs	r2, #1
  4043c8:	701a      	strb	r2, [r3, #0]
  4043ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4043ce:	b662      	cpsie	i
}
  4043d0:	bf00      	nop
  4043d2:	3708      	adds	r7, #8
  4043d4:	46bd      	mov	sp, r7
  4043d6:	bd80      	pop	{r7, pc}
  4043d8:	00404391 	.word	0x00404391
  4043dc:	20400034 	.word	0x20400034

004043e0 <afec_ch_sanity_check>:
{
  4043e0:	b480      	push	{r7}
  4043e2:	b083      	sub	sp, #12
  4043e4:	af00      	add	r7, sp, #0
  4043e6:	6078      	str	r0, [r7, #4]
  4043e8:	460b      	mov	r3, r1
  4043ea:	807b      	strh	r3, [r7, #2]
}
  4043ec:	bf00      	nop
  4043ee:	370c      	adds	r7, #12
  4043f0:	46bd      	mov	sp, r7
  4043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043f6:	4770      	bx	lr

004043f8 <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  4043f8:	b480      	push	{r7}
  4043fa:	b083      	sub	sp, #12
  4043fc:	af00      	add	r7, sp, #0
  4043fe:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  404400:	687b      	ldr	r3, [r7, #4]
  404402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  404404:	4618      	mov	r0, r3
  404406:	370c      	adds	r7, #12
  404408:	46bd      	mov	sp, r7
  40440a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40440e:	4770      	bx	lr

00404410 <afec_get_interrupt_mask>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
  404410:	b480      	push	{r7}
  404412:	b083      	sub	sp, #12
  404414:	af00      	add	r7, sp, #0
  404416:	6078      	str	r0, [r7, #4]
	return afec->AFEC_IMR;
  404418:	687b      	ldr	r3, [r7, #4]
  40441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  40441c:	4618      	mov	r0, r3
  40441e:	370c      	adds	r7, #12
  404420:	46bd      	mov	sp, r7
  404422:	f85d 7b04 	ldr.w	r7, [sp], #4
  404426:	4770      	bx	lr

00404428 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  404428:	b580      	push	{r7, lr}
  40442a:	b084      	sub	sp, #16
  40442c:	af00      	add	r7, sp, #0
  40442e:	4603      	mov	r3, r0
  404430:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  404432:	79fb      	ldrb	r3, [r7, #7]
  404434:	4a0a      	ldr	r2, [pc, #40]	; (404460 <sleepmgr_lock_mode+0x38>)
  404436:	5cd3      	ldrb	r3, [r2, r3]
  404438:	2bff      	cmp	r3, #255	; 0xff
  40443a:	d100      	bne.n	40443e <sleepmgr_lock_mode+0x16>
		while (true) {
  40443c:	e7fe      	b.n	40443c <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  40443e:	4b09      	ldr	r3, [pc, #36]	; (404464 <sleepmgr_lock_mode+0x3c>)
  404440:	4798      	blx	r3
  404442:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  404444:	79fb      	ldrb	r3, [r7, #7]
  404446:	4a06      	ldr	r2, [pc, #24]	; (404460 <sleepmgr_lock_mode+0x38>)
  404448:	5cd2      	ldrb	r2, [r2, r3]
  40444a:	3201      	adds	r2, #1
  40444c:	b2d1      	uxtb	r1, r2
  40444e:	4a04      	ldr	r2, [pc, #16]	; (404460 <sleepmgr_lock_mode+0x38>)
  404450:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  404452:	68f8      	ldr	r0, [r7, #12]
  404454:	4b04      	ldr	r3, [pc, #16]	; (404468 <sleepmgr_lock_mode+0x40>)
  404456:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  404458:	bf00      	nop
  40445a:	3710      	adds	r7, #16
  40445c:	46bd      	mov	sp, r7
  40445e:	bd80      	pop	{r7, pc}
  404460:	20415b24 	.word	0x20415b24
  404464:	00404359 	.word	0x00404359
  404468:	004043b1 	.word	0x004043b1

0040446c <osc_get_rate>:
{
  40446c:	b480      	push	{r7}
  40446e:	b083      	sub	sp, #12
  404470:	af00      	add	r7, sp, #0
  404472:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404474:	687b      	ldr	r3, [r7, #4]
  404476:	2b07      	cmp	r3, #7
  404478:	d825      	bhi.n	4044c6 <osc_get_rate+0x5a>
  40447a:	a201      	add	r2, pc, #4	; (adr r2, 404480 <osc_get_rate+0x14>)
  40447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404480:	004044a1 	.word	0x004044a1
  404484:	004044a7 	.word	0x004044a7
  404488:	004044ad 	.word	0x004044ad
  40448c:	004044b3 	.word	0x004044b3
  404490:	004044b7 	.word	0x004044b7
  404494:	004044bb 	.word	0x004044bb
  404498:	004044bf 	.word	0x004044bf
  40449c:	004044c3 	.word	0x004044c3
		return OSC_SLCK_32K_RC_HZ;
  4044a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4044a4:	e010      	b.n	4044c8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4044a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4044aa:	e00d      	b.n	4044c8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4044ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4044b0:	e00a      	b.n	4044c8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4044b2:	4b08      	ldr	r3, [pc, #32]	; (4044d4 <osc_get_rate+0x68>)
  4044b4:	e008      	b.n	4044c8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4044b6:	4b08      	ldr	r3, [pc, #32]	; (4044d8 <osc_get_rate+0x6c>)
  4044b8:	e006      	b.n	4044c8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4044ba:	4b08      	ldr	r3, [pc, #32]	; (4044dc <osc_get_rate+0x70>)
  4044bc:	e004      	b.n	4044c8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4044be:	4b07      	ldr	r3, [pc, #28]	; (4044dc <osc_get_rate+0x70>)
  4044c0:	e002      	b.n	4044c8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4044c2:	4b06      	ldr	r3, [pc, #24]	; (4044dc <osc_get_rate+0x70>)
  4044c4:	e000      	b.n	4044c8 <osc_get_rate+0x5c>
	return 0;
  4044c6:	2300      	movs	r3, #0
}
  4044c8:	4618      	mov	r0, r3
  4044ca:	370c      	adds	r7, #12
  4044cc:	46bd      	mov	sp, r7
  4044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4044d2:	4770      	bx	lr
  4044d4:	003d0900 	.word	0x003d0900
  4044d8:	007a1200 	.word	0x007a1200
  4044dc:	00b71b00 	.word	0x00b71b00

004044e0 <sysclk_get_main_hz>:
{
  4044e0:	b580      	push	{r7, lr}
  4044e2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4044e4:	2006      	movs	r0, #6
  4044e6:	4b05      	ldr	r3, [pc, #20]	; (4044fc <sysclk_get_main_hz+0x1c>)
  4044e8:	4798      	blx	r3
  4044ea:	4602      	mov	r2, r0
  4044ec:	4613      	mov	r3, r2
  4044ee:	009b      	lsls	r3, r3, #2
  4044f0:	4413      	add	r3, r2
  4044f2:	009a      	lsls	r2, r3, #2
  4044f4:	4413      	add	r3, r2
}
  4044f6:	4618      	mov	r0, r3
  4044f8:	bd80      	pop	{r7, pc}
  4044fa:	bf00      	nop
  4044fc:	0040446d 	.word	0x0040446d

00404500 <sysclk_get_cpu_hz>:
{
  404500:	b580      	push	{r7, lr}
  404502:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  404504:	4b02      	ldr	r3, [pc, #8]	; (404510 <sysclk_get_cpu_hz+0x10>)
  404506:	4798      	blx	r3
  404508:	4603      	mov	r3, r0
}
  40450a:	4618      	mov	r0, r3
  40450c:	bd80      	pop	{r7, pc}
  40450e:	bf00      	nop
  404510:	004044e1 	.word	0x004044e1

00404514 <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  404514:	b480      	push	{r7}
  404516:	b083      	sub	sp, #12
  404518:	af00      	add	r7, sp, #0
  40451a:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  40451c:	687b      	ldr	r3, [r7, #4]
  40451e:	4a09      	ldr	r2, [pc, #36]	; (404544 <afec_find_inst_num+0x30>)
  404520:	4293      	cmp	r3, r2
  404522:	d101      	bne.n	404528 <afec_find_inst_num+0x14>
		return 1;
  404524:	2301      	movs	r3, #1
  404526:	e006      	b.n	404536 <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  404528:	687b      	ldr	r3, [r7, #4]
  40452a:	4a07      	ldr	r2, [pc, #28]	; (404548 <afec_find_inst_num+0x34>)
  40452c:	4293      	cmp	r3, r2
  40452e:	d101      	bne.n	404534 <afec_find_inst_num+0x20>
		return 0;
  404530:	2300      	movs	r3, #0
  404532:	e000      	b.n	404536 <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  404534:	2300      	movs	r3, #0
}
  404536:	4618      	mov	r0, r3
  404538:	370c      	adds	r7, #12
  40453a:	46bd      	mov	sp, r7
  40453c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404540:	4770      	bx	lr
  404542:	bf00      	nop
  404544:	40064000 	.word	0x40064000
  404548:	4003c000 	.word	0x4003c000

0040454c <afec_find_pid>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
  40454c:	b480      	push	{r7}
  40454e:	b083      	sub	sp, #12
  404550:	af00      	add	r7, sp, #0
  404552:	6078      	str	r0, [r7, #4]
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  404554:	687b      	ldr	r3, [r7, #4]
  404556:	4a09      	ldr	r2, [pc, #36]	; (40457c <afec_find_pid+0x30>)
  404558:	4293      	cmp	r3, r2
  40455a:	d101      	bne.n	404560 <afec_find_pid+0x14>
		return ID_AFEC1;
  40455c:	2328      	movs	r3, #40	; 0x28
  40455e:	e006      	b.n	40456e <afec_find_pid+0x22>
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
  404560:	687b      	ldr	r3, [r7, #4]
  404562:	4a07      	ldr	r2, [pc, #28]	; (404580 <afec_find_pid+0x34>)
  404564:	4293      	cmp	r3, r2
  404566:	d101      	bne.n	40456c <afec_find_pid+0x20>
		return ID_AFEC0;
  404568:	231d      	movs	r3, #29
  40456a:	e000      	b.n	40456e <afec_find_pid+0x22>
	}
#endif
	return ID_AFEC0;
  40456c:	231d      	movs	r3, #29
}
  40456e:	4618      	mov	r0, r3
  404570:	370c      	adds	r7, #12
  404572:	46bd      	mov	sp, r7
  404574:	f85d 7b04 	ldr.w	r7, [sp], #4
  404578:	4770      	bx	lr
  40457a:	bf00      	nop
  40457c:	40064000 	.word	0x40064000
  404580:	4003c000 	.word	0x4003c000

00404584 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  404584:	b480      	push	{r7}
  404586:	b085      	sub	sp, #20
  404588:	af00      	add	r7, sp, #0
  40458a:	6078      	str	r0, [r7, #4]
  40458c:	6039      	str	r1, [r7, #0]
	uint32_t reg = 0;
  40458e:	2300      	movs	r3, #0
  404590:	60fb      	str	r3, [r7, #12]

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  404592:	683b      	ldr	r3, [r7, #0]
  404594:	7cdb      	ldrb	r3, [r3, #19]
  404596:	2b00      	cmp	r3, #0
  404598:	d002      	beq.n	4045a0 <afec_set_config+0x1c>
  40459a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40459e:	e000      	b.n	4045a2 <afec_set_config+0x1e>
  4045a0:	2200      	movs	r2, #0
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4045a2:	683b      	ldr	r3, [r7, #0]
  4045a4:	6859      	ldr	r1, [r3, #4]
  4045a6:	683b      	ldr	r3, [r7, #0]
  4045a8:	689b      	ldr	r3, [r3, #8]
  4045aa:	fbb1 f3f3 	udiv	r3, r1, r3
  4045ae:	3b01      	subs	r3, #1
  4045b0:	021b      	lsls	r3, r3, #8
  4045b2:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4045b4:	431a      	orrs	r2, r3
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4045b6:	683b      	ldr	r3, [r7, #0]
  4045b8:	7c1b      	ldrb	r3, [r3, #16]
  4045ba:	061b      	lsls	r3, r3, #24
  4045bc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
			AFEC_MR_ONE |
  4045c0:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
  4045c2:	683b      	ldr	r3, [r7, #0]
  4045c4:	7c5b      	ldrb	r3, [r3, #17]
  4045c6:	071b      	lsls	r3, r3, #28
  4045c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
			AFEC_MR_TRACKTIM(config->tracktim) |
  4045cc:	431a      	orrs	r2, r3
			(config->startup_time);
  4045ce:	683b      	ldr	r3, [r7, #0]
  4045d0:	68db      	ldr	r3, [r3, #12]
			AFEC_MR_TRANSFER(config->transfer) |
  4045d2:	4313      	orrs	r3, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4045d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  4045d8:	60fb      	str	r3, [r7, #12]

	afec->AFEC_MR = reg;
  4045da:	687b      	ldr	r3, [r7, #4]
  4045dc:	68fa      	ldr	r2, [r7, #12]
  4045de:	605a      	str	r2, [r3, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4045e0:	683b      	ldr	r3, [r7, #0]
  4045e2:	7d1b      	ldrb	r3, [r3, #20]
  4045e4:	2b00      	cmp	r3, #0
  4045e6:	d002      	beq.n	4045ee <afec_set_config+0x6a>
  4045e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4045ec:	e000      	b.n	4045f0 <afec_set_config+0x6c>
  4045ee:	2200      	movs	r2, #0
			(config->resolution) |
  4045f0:	683b      	ldr	r3, [r7, #0]
  4045f2:	681b      	ldr	r3, [r3, #0]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4045f4:	431a      	orrs	r2, r3
			(config->stm ? AFEC_EMR_STM : 0);
  4045f6:	683b      	ldr	r3, [r7, #0]
  4045f8:	7d5b      	ldrb	r3, [r3, #21]
  4045fa:	2b00      	cmp	r3, #0
  4045fc:	d002      	beq.n	404604 <afec_set_config+0x80>
  4045fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  404602:	e000      	b.n	404606 <afec_set_config+0x82>
  404604:	2300      	movs	r3, #0
			(config->resolution) |
  404606:	431a      	orrs	r2, r3
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  404608:	687b      	ldr	r3, [r7, #4]
  40460a:	609a      	str	r2, [r3, #8]
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  40460c:	683b      	ldr	r3, [r7, #0]
  40460e:	7d9b      	ldrb	r3, [r3, #22]
  404610:	021b      	lsls	r3, r3, #8
  404612:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404616:	f043 020c 	orr.w	r2, r3, #12
  40461a:	687b      	ldr	r3, [r7, #4]
  40461c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  404620:	bf00      	nop
  404622:	3714      	adds	r7, #20
  404624:	46bd      	mov	sp, r7
  404626:	f85d 7b04 	ldr.w	r7, [sp], #4
  40462a:	4770      	bx	lr

0040462c <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  40462c:	b580      	push	{r7, lr}
  40462e:	b086      	sub	sp, #24
  404630:	af00      	add	r7, sp, #0
  404632:	60f8      	str	r0, [r7, #12]
  404634:	460b      	mov	r3, r1
  404636:	607a      	str	r2, [r7, #4]
  404638:	817b      	strh	r3, [r7, #10]
	afec_ch_sanity_check(afec, channel);
  40463a:	897b      	ldrh	r3, [r7, #10]
  40463c:	4619      	mov	r1, r3
  40463e:	68f8      	ldr	r0, [r7, #12]
  404640:	4b1e      	ldr	r3, [pc, #120]	; (4046bc <afec_ch_set_config+0x90>)
  404642:	4798      	blx	r3
	uint32_t reg = 0;
  404644:	2300      	movs	r3, #0
  404646:	617b      	str	r3, [r7, #20]

	reg = afec->AFEC_DIFFR;
  404648:	68fb      	ldr	r3, [r7, #12]
  40464a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  40464c:	617b      	str	r3, [r7, #20]
	reg &= ~(0x1u << channel);
  40464e:	897b      	ldrh	r3, [r7, #10]
  404650:	2201      	movs	r2, #1
  404652:	fa02 f303 	lsl.w	r3, r2, r3
  404656:	43db      	mvns	r3, r3
  404658:	697a      	ldr	r2, [r7, #20]
  40465a:	4013      	ands	r3, r2
  40465c:	617b      	str	r3, [r7, #20]
	reg |= (config->diff) ? (0x1u << channel) : 0;
  40465e:	687b      	ldr	r3, [r7, #4]
  404660:	781b      	ldrb	r3, [r3, #0]
  404662:	2b00      	cmp	r3, #0
  404664:	d004      	beq.n	404670 <afec_ch_set_config+0x44>
  404666:	897b      	ldrh	r3, [r7, #10]
  404668:	2201      	movs	r2, #1
  40466a:	fa02 f303 	lsl.w	r3, r2, r3
  40466e:	e000      	b.n	404672 <afec_ch_set_config+0x46>
  404670:	2300      	movs	r3, #0
  404672:	697a      	ldr	r2, [r7, #20]
  404674:	4313      	orrs	r3, r2
  404676:	617b      	str	r3, [r7, #20]
	afec->AFEC_DIFFR = reg;
  404678:	68fb      	ldr	r3, [r7, #12]
  40467a:	697a      	ldr	r2, [r7, #20]
  40467c:	661a      	str	r2, [r3, #96]	; 0x60

	reg = afec->AFEC_CGR;
  40467e:	68fb      	ldr	r3, [r7, #12]
  404680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  404682:	617b      	str	r3, [r7, #20]
	reg &= ~(0x03u << (2 * channel));
  404684:	897b      	ldrh	r3, [r7, #10]
  404686:	005b      	lsls	r3, r3, #1
  404688:	2203      	movs	r2, #3
  40468a:	fa02 f303 	lsl.w	r3, r2, r3
  40468e:	43db      	mvns	r3, r3
  404690:	697a      	ldr	r2, [r7, #20]
  404692:	4013      	ands	r3, r2
  404694:	617b      	str	r3, [r7, #20]
	reg |= (config->gain) << (2 * channel);
  404696:	687b      	ldr	r3, [r7, #4]
  404698:	785b      	ldrb	r3, [r3, #1]
  40469a:	461a      	mov	r2, r3
  40469c:	897b      	ldrh	r3, [r7, #10]
  40469e:	005b      	lsls	r3, r3, #1
  4046a0:	fa02 f303 	lsl.w	r3, r2, r3
  4046a4:	461a      	mov	r2, r3
  4046a6:	697b      	ldr	r3, [r7, #20]
  4046a8:	4313      	orrs	r3, r2
  4046aa:	617b      	str	r3, [r7, #20]
	afec->AFEC_CGR = reg;
  4046ac:	68fb      	ldr	r3, [r7, #12]
  4046ae:	697a      	ldr	r2, [r7, #20]
  4046b0:	655a      	str	r2, [r3, #84]	; 0x54
}
  4046b2:	bf00      	nop
  4046b4:	3718      	adds	r7, #24
  4046b6:	46bd      	mov	sp, r7
  4046b8:	bd80      	pop	{r7, pc}
  4046ba:	bf00      	nop
  4046bc:	004043e1 	.word	0x004043e1

004046c0 <afec_temp_sensor_set_config>:
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC temperature sensor
 */
void afec_temp_sensor_set_config(Afec *const afec,
		struct afec_temp_sensor_config *config)
{
  4046c0:	b480      	push	{r7}
  4046c2:	b085      	sub	sp, #20
  4046c4:	af00      	add	r7, sp, #0
  4046c6:	6078      	str	r0, [r7, #4]
  4046c8:	6039      	str	r1, [r7, #0]
	Assert(afec == AFEC0);

	uint32_t reg = 0;
  4046ca:	2300      	movs	r3, #0
  4046cc:	60fb      	str	r3, [r7, #12]

	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  4046ce:	683b      	ldr	r3, [r7, #0]
  4046d0:	781b      	ldrb	r3, [r3, #0]
  4046d2:	2b00      	cmp	r3, #0
  4046d4:	d001      	beq.n	4046da <afec_temp_sensor_set_config+0x1a>
  4046d6:	2301      	movs	r3, #1
  4046d8:	e000      	b.n	4046dc <afec_temp_sensor_set_config+0x1c>
  4046da:	2300      	movs	r3, #0
  4046dc:	683a      	ldr	r2, [r7, #0]
  4046de:	7852      	ldrb	r2, [r2, #1]
  4046e0:	4313      	orrs	r3, r2
  4046e2:	60fb      	str	r3, [r7, #12]
	afec->AFEC_TEMPMR = reg;
  4046e4:	687b      	ldr	r3, [r7, #4]
  4046e6:	68fa      	ldr	r2, [r7, #12]
  4046e8:	671a      	str	r2, [r3, #112]	; 0x70

	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4046ea:	683b      	ldr	r3, [r7, #0]
  4046ec:	885b      	ldrh	r3, [r3, #2]
  4046ee:	461a      	mov	r2, r3
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  4046f0:	683b      	ldr	r3, [r7, #0]
  4046f2:	889b      	ldrh	r3, [r3, #4]
  4046f4:	041b      	lsls	r3, r3, #16
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  4046f6:	431a      	orrs	r2, r3
  4046f8:	687b      	ldr	r3, [r7, #4]
  4046fa:	675a      	str	r2, [r3, #116]	; 0x74
			
}
  4046fc:	bf00      	nop
  4046fe:	3714      	adds	r7, #20
  404700:	46bd      	mov	sp, r7
  404702:	f85d 7b04 	ldr.w	r7, [sp], #4
  404706:	4770      	bx	lr

00404708 <afec_get_config_defaults>:
 * - AFE Bias Current Control value is 1
 *
 * \param cfg Pointer to configuration structure to be initiated.
 */
void afec_get_config_defaults(struct afec_config *const cfg)
{
  404708:	b580      	push	{r7, lr}
  40470a:	b082      	sub	sp, #8
  40470c:	af00      	add	r7, sp, #0
  40470e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  404710:	687b      	ldr	r3, [r7, #4]
  404712:	2200      	movs	r2, #0
  404714:	601a      	str	r2, [r3, #0]
	cfg->mck = sysclk_get_cpu_hz();
  404716:	4b12      	ldr	r3, [pc, #72]	; (404760 <afec_get_config_defaults+0x58>)
  404718:	4798      	blx	r3
  40471a:	4602      	mov	r2, r0
  40471c:	687b      	ldr	r3, [r7, #4]
  40471e:	605a      	str	r2, [r3, #4]
		cfg->afec_clock = 6000000UL;
  404720:	687b      	ldr	r3, [r7, #4]
  404722:	4a10      	ldr	r2, [pc, #64]	; (404764 <afec_get_config_defaults+0x5c>)
  404724:	609a      	str	r2, [r3, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  404726:	687b      	ldr	r3, [r7, #4]
  404728:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  40472c:	60da      	str	r2, [r3, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  40472e:	687b      	ldr	r3, [r7, #4]
  404730:	2202      	movs	r2, #2
  404732:	741a      	strb	r2, [r3, #16]
		cfg->transfer = 1;
  404734:	687b      	ldr	r3, [r7, #4]
  404736:	2201      	movs	r2, #1
  404738:	745a      	strb	r2, [r3, #17]
		cfg->anach = true;
  40473a:	687b      	ldr	r3, [r7, #4]
  40473c:	2201      	movs	r2, #1
  40473e:	749a      	strb	r2, [r3, #18]
		cfg->useq = false;
  404740:	687b      	ldr	r3, [r7, #4]
  404742:	2200      	movs	r2, #0
  404744:	74da      	strb	r2, [r3, #19]
		cfg->tag = true;
  404746:	687b      	ldr	r3, [r7, #4]
  404748:	2201      	movs	r2, #1
  40474a:	751a      	strb	r2, [r3, #20]
		cfg->stm = true;
  40474c:	687b      	ldr	r3, [r7, #4]
  40474e:	2201      	movs	r2, #1
  404750:	755a      	strb	r2, [r3, #21]
		cfg->ibctl = 1;
  404752:	687b      	ldr	r3, [r7, #4]
  404754:	2201      	movs	r2, #1
  404756:	759a      	strb	r2, [r3, #22]
}
  404758:	bf00      	nop
  40475a:	3708      	adds	r7, #8
  40475c:	46bd      	mov	sp, r7
  40475e:	bd80      	pop	{r7, pc}
  404760:	00404501 	.word	0x00404501
  404764:	005b8d80 	.word	0x005b8d80

00404768 <afec_ch_get_config_defaults>:
 * - Gain value is 1
 *
 * \param cfg Pointer to channel configuration structure to be initiated.
 */
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
  404768:	b480      	push	{r7}
  40476a:	b083      	sub	sp, #12
  40476c:	af00      	add	r7, sp, #0
  40476e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  404770:	687b      	ldr	r3, [r7, #4]
  404772:	2200      	movs	r2, #0
  404774:	701a      	strb	r2, [r3, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  404776:	687b      	ldr	r3, [r7, #4]
  404778:	2201      	movs	r2, #1
  40477a:	705a      	strb	r2, [r3, #1]

}
  40477c:	bf00      	nop
  40477e:	370c      	adds	r7, #12
  404780:	46bd      	mov	sp, r7
  404782:	f85d 7b04 	ldr.w	r7, [sp], #4
  404786:	4770      	bx	lr

00404788 <afec_temp_sensor_get_config_defaults>:
 * \param cfg Pointer to temperature sensor configuration structure
 *        to be initiated.
 */
void afec_temp_sensor_get_config_defaults(
		struct afec_temp_sensor_config *const cfg)
{
  404788:	b480      	push	{r7}
  40478a:	b083      	sub	sp, #12
  40478c:	af00      	add	r7, sp, #0
  40478e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->rctc = false;
  404790:	687b      	ldr	r3, [r7, #4]
  404792:	2200      	movs	r2, #0
  404794:	701a      	strb	r2, [r3, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  404796:	687b      	ldr	r3, [r7, #4]
  404798:	2220      	movs	r2, #32
  40479a:	705a      	strb	r2, [r3, #1]
	cfg->low_threshold= 0xFF;
  40479c:	687b      	ldr	r3, [r7, #4]
  40479e:	22ff      	movs	r2, #255	; 0xff
  4047a0:	805a      	strh	r2, [r3, #2]
	cfg->high_threshold= 0xFFF;
  4047a2:	687b      	ldr	r3, [r7, #4]
  4047a4:	f640 72ff 	movw	r2, #4095	; 0xfff
  4047a8:	809a      	strh	r2, [r3, #4]
}
  4047aa:	bf00      	nop
  4047ac:	370c      	adds	r7, #12
  4047ae:	46bd      	mov	sp, r7
  4047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4047b4:	4770      	bx	lr
	...

004047b8 <afec_init>:
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  4047b8:	b580      	push	{r7, lr}
  4047ba:	b084      	sub	sp, #16
  4047bc:	af00      	add	r7, sp, #0
  4047be:	6078      	str	r0, [r7, #4]
  4047c0:	6039      	str	r1, [r7, #0]
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4047c2:	6878      	ldr	r0, [r7, #4]
  4047c4:	4b1d      	ldr	r3, [pc, #116]	; (40483c <afec_init+0x84>)
  4047c6:	4798      	blx	r3
  4047c8:	4603      	mov	r3, r0
  4047ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4047ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4047d2:	d101      	bne.n	4047d8 <afec_init+0x20>
		return STATUS_ERR_BUSY;
  4047d4:	2319      	movs	r3, #25
  4047d6:	e02c      	b.n	404832 <afec_init+0x7a>
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  4047d8:	687b      	ldr	r3, [r7, #4]
  4047da:	2201      	movs	r2, #1
  4047dc:	601a      	str	r2, [r3, #0]
	afec_set_config(afec, config);
  4047de:	6839      	ldr	r1, [r7, #0]
  4047e0:	6878      	ldr	r0, [r7, #4]
  4047e2:	4b17      	ldr	r3, [pc, #92]	; (404840 <afec_init+0x88>)
  4047e4:	4798      	blx	r3

	uint32_t i;
	if(afec == AFEC0) {
  4047e6:	687b      	ldr	r3, [r7, #4]
  4047e8:	4a16      	ldr	r2, [pc, #88]	; (404844 <afec_init+0x8c>)
  4047ea:	4293      	cmp	r3, r2
  4047ec:	d10d      	bne.n	40480a <afec_init+0x52>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4047ee:	2300      	movs	r3, #0
  4047f0:	60fb      	str	r3, [r7, #12]
  4047f2:	e007      	b.n	404804 <afec_init+0x4c>
			afec_callback_pointer[0][i] = 0;
  4047f4:	4a14      	ldr	r2, [pc, #80]	; (404848 <afec_init+0x90>)
  4047f6:	68fb      	ldr	r3, [r7, #12]
  4047f8:	2100      	movs	r1, #0
  4047fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4047fe:	68fb      	ldr	r3, [r7, #12]
  404800:	3301      	adds	r3, #1
  404802:	60fb      	str	r3, [r7, #12]
  404804:	68fb      	ldr	r3, [r7, #12]
  404806:	2b0f      	cmp	r3, #15
  404808:	d9f4      	bls.n	4047f4 <afec_init+0x3c>
		}
	}
	if(afec == AFEC1) {
  40480a:	687b      	ldr	r3, [r7, #4]
  40480c:	4a0f      	ldr	r2, [pc, #60]	; (40484c <afec_init+0x94>)
  40480e:	4293      	cmp	r3, r2
  404810:	d10e      	bne.n	404830 <afec_init+0x78>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  404812:	2300      	movs	r3, #0
  404814:	60fb      	str	r3, [r7, #12]
  404816:	e008      	b.n	40482a <afec_init+0x72>
			afec_callback_pointer[1][i] = 0;
  404818:	4a0b      	ldr	r2, [pc, #44]	; (404848 <afec_init+0x90>)
  40481a:	68fb      	ldr	r3, [r7, #12]
  40481c:	3310      	adds	r3, #16
  40481e:	2100      	movs	r1, #0
  404820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  404824:	68fb      	ldr	r3, [r7, #12]
  404826:	3301      	adds	r3, #1
  404828:	60fb      	str	r3, [r7, #12]
  40482a:	68fb      	ldr	r3, [r7, #12]
  40482c:	2b0f      	cmp	r3, #15
  40482e:	d9f3      	bls.n	404818 <afec_init+0x60>
		}
	}

	return STATUS_OK;
  404830:	2300      	movs	r3, #0
}
  404832:	4618      	mov	r0, r3
  404834:	3710      	adds	r7, #16
  404836:	46bd      	mov	sp, r7
  404838:	bd80      	pop	{r7, pc}
  40483a:	bf00      	nop
  40483c:	004043f9 	.word	0x004043f9
  404840:	00404585 	.word	0x00404585
  404844:	4003c000 	.word	0x4003c000
  404848:	20415b38 	.word	0x20415b38
  40484c:	40064000 	.word	0x40064000

00404850 <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  404850:	b580      	push	{r7, lr}
  404852:	b086      	sub	sp, #24
  404854:	af00      	add	r7, sp, #0
  404856:	60f8      	str	r0, [r7, #12]
  404858:	60b9      	str	r1, [r7, #8]
  40485a:	607a      	str	r2, [r7, #4]
  40485c:	70fb      	strb	r3, [r7, #3]
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
  40485e:	68f8      	ldr	r0, [r7, #12]
  404860:	4b17      	ldr	r3, [pc, #92]	; (4048c0 <afec_set_callback+0x70>)
  404862:	4798      	blx	r3
  404864:	6178      	str	r0, [r7, #20]
	afec_callback_pointer[i][source] = callback;
  404866:	4917      	ldr	r1, [pc, #92]	; (4048c4 <afec_set_callback+0x74>)
  404868:	697b      	ldr	r3, [r7, #20]
  40486a:	011a      	lsls	r2, r3, #4
  40486c:	68bb      	ldr	r3, [r7, #8]
  40486e:	4413      	add	r3, r2
  404870:	687a      	ldr	r2, [r7, #4]
  404872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!i) {
  404876:	697b      	ldr	r3, [r7, #20]
  404878:	2b00      	cmp	r3, #0
  40487a:	d10b      	bne.n	404894 <afec_set_callback+0x44>
		irq_register_handler(AFEC0_IRQn, irq_level);
  40487c:	201d      	movs	r0, #29
  40487e:	4b12      	ldr	r3, [pc, #72]	; (4048c8 <afec_set_callback+0x78>)
  404880:	4798      	blx	r3
  404882:	78fb      	ldrb	r3, [r7, #3]
  404884:	4619      	mov	r1, r3
  404886:	201d      	movs	r0, #29
  404888:	4b10      	ldr	r3, [pc, #64]	; (4048cc <afec_set_callback+0x7c>)
  40488a:	4798      	blx	r3
  40488c:	201d      	movs	r0, #29
  40488e:	4b10      	ldr	r3, [pc, #64]	; (4048d0 <afec_set_callback+0x80>)
  404890:	4798      	blx	r3
  404892:	e00d      	b.n	4048b0 <afec_set_callback+0x60>
	} else if (i == 1) {
  404894:	697b      	ldr	r3, [r7, #20]
  404896:	2b01      	cmp	r3, #1
  404898:	d10a      	bne.n	4048b0 <afec_set_callback+0x60>
		irq_register_handler(AFEC1_IRQn, irq_level);
  40489a:	2028      	movs	r0, #40	; 0x28
  40489c:	4b0a      	ldr	r3, [pc, #40]	; (4048c8 <afec_set_callback+0x78>)
  40489e:	4798      	blx	r3
  4048a0:	78fb      	ldrb	r3, [r7, #3]
  4048a2:	4619      	mov	r1, r3
  4048a4:	2028      	movs	r0, #40	; 0x28
  4048a6:	4b09      	ldr	r3, [pc, #36]	; (4048cc <afec_set_callback+0x7c>)
  4048a8:	4798      	blx	r3
  4048aa:	2028      	movs	r0, #40	; 0x28
  4048ac:	4b08      	ldr	r3, [pc, #32]	; (4048d0 <afec_set_callback+0x80>)
  4048ae:	4798      	blx	r3
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  4048b0:	68b9      	ldr	r1, [r7, #8]
  4048b2:	68f8      	ldr	r0, [r7, #12]
  4048b4:	4b07      	ldr	r3, [pc, #28]	; (4048d4 <afec_set_callback+0x84>)
  4048b6:	4798      	blx	r3
}
  4048b8:	bf00      	nop
  4048ba:	3718      	adds	r7, #24
  4048bc:	46bd      	mov	sp, r7
  4048be:	bd80      	pop	{r7, pc}
  4048c0:	00404515 	.word	0x00404515
  4048c4:	20415b38 	.word	0x20415b38
  4048c8:	004042d1 	.word	0x004042d1
  4048cc:	00404305 	.word	0x00404305
  4048d0:	0040429d 	.word	0x0040429d
  4048d4:	004048d9 	.word	0x004048d9

004048d8 <afec_enable_interrupt>:
 * \param afec  Base address of the AFEC.
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
  4048d8:	b480      	push	{r7}
  4048da:	b083      	sub	sp, #12
  4048dc:	af00      	add	r7, sp, #0
  4048de:	6078      	str	r0, [r7, #4]
  4048e0:	6039      	str	r1, [r7, #0]
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4048e2:	683b      	ldr	r3, [r7, #0]
  4048e4:	4a19      	ldr	r2, [pc, #100]	; (40494c <afec_enable_interrupt+0x74>)
  4048e6:	4293      	cmp	r3, r2
  4048e8:	d103      	bne.n	4048f2 <afec_enable_interrupt+0x1a>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4048ea:	687b      	ldr	r3, [r7, #4]
  4048ec:	4a17      	ldr	r2, [pc, #92]	; (40494c <afec_enable_interrupt+0x74>)
  4048ee:	625a      	str	r2, [r3, #36]	; 0x24
		return;
  4048f0:	e026      	b.n	404940 <afec_enable_interrupt+0x68>
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4048f2:	683b      	ldr	r3, [r7, #0]
  4048f4:	2b0b      	cmp	r3, #11
  4048f6:	d80f      	bhi.n	404918 <afec_enable_interrupt+0x40>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  4048f8:	683b      	ldr	r3, [r7, #0]
  4048fa:	2b0b      	cmp	r3, #11
  4048fc:	d104      	bne.n	404908 <afec_enable_interrupt+0x30>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4048fe:	687b      	ldr	r3, [r7, #4]
  404900:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404904:	625a      	str	r2, [r3, #36]	; 0x24
  404906:	e01b      	b.n	404940 <afec_enable_interrupt+0x68>
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  404908:	2201      	movs	r2, #1
  40490a:	683b      	ldr	r3, [r7, #0]
  40490c:	fa02 f303 	lsl.w	r3, r2, r3
  404910:	461a      	mov	r2, r3
  404912:	687b      	ldr	r3, [r7, #4]
  404914:	625a      	str	r2, [r3, #36]	; 0x24
  404916:	e013      	b.n	404940 <afec_enable_interrupt+0x68>
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  404918:	683b      	ldr	r3, [r7, #0]
  40491a:	2b0e      	cmp	r3, #14
  40491c:	d808      	bhi.n	404930 <afec_enable_interrupt+0x58>
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  40491e:	683b      	ldr	r3, [r7, #0]
  404920:	330c      	adds	r3, #12
  404922:	2201      	movs	r2, #1
  404924:	fa02 f303 	lsl.w	r3, r2, r3
  404928:	461a      	mov	r2, r3
  40492a:	687b      	ldr	r3, [r7, #4]
  40492c:	625a      	str	r2, [r3, #36]	; 0x24
  40492e:	e007      	b.n	404940 <afec_enable_interrupt+0x68>
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
				+ AFEC_INTERRUPT_GAP2);
  404930:	683b      	ldr	r3, [r7, #0]
  404932:	330f      	adds	r3, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  404934:	2201      	movs	r2, #1
  404936:	fa02 f303 	lsl.w	r3, r2, r3
  40493a:	461a      	mov	r2, r3
  40493c:	687b      	ldr	r3, [r7, #4]
  40493e:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
  404940:	370c      	adds	r7, #12
  404942:	46bd      	mov	sp, r7
  404944:	f85d 7b04 	ldr.w	r7, [sp], #4
  404948:	4770      	bx	lr
  40494a:	bf00      	nop
  40494c:	47000fff 	.word	0x47000fff

00404950 <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  404950:	b580      	push	{r7, lr}
  404952:	b082      	sub	sp, #8
  404954:	af00      	add	r7, sp, #0
  404956:	4603      	mov	r3, r0
  404958:	6039      	str	r1, [r7, #0]
  40495a:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  40495c:	79fb      	ldrb	r3, [r7, #7]
  40495e:	490a      	ldr	r1, [pc, #40]	; (404988 <afec_interrupt+0x38>)
  404960:	011a      	lsls	r2, r3, #4
  404962:	683b      	ldr	r3, [r7, #0]
  404964:	4413      	add	r3, r2
  404966:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40496a:	2b00      	cmp	r3, #0
  40496c:	d007      	beq.n	40497e <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  40496e:	79fb      	ldrb	r3, [r7, #7]
  404970:	4905      	ldr	r1, [pc, #20]	; (404988 <afec_interrupt+0x38>)
  404972:	011a      	lsls	r2, r3, #4
  404974:	683b      	ldr	r3, [r7, #0]
  404976:	4413      	add	r3, r2
  404978:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  40497c:	4798      	blx	r3
	}
}
  40497e:	bf00      	nop
  404980:	3708      	adds	r7, #8
  404982:	46bd      	mov	sp, r7
  404984:	bd80      	pop	{r7, pc}
  404986:	bf00      	nop
  404988:	20415b38 	.word	0x20415b38

0040498c <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  40498c:	b590      	push	{r4, r7, lr}
  40498e:	b087      	sub	sp, #28
  404990:	af00      	add	r7, sp, #0
  404992:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  404994:	6878      	ldr	r0, [r7, #4]
  404996:	4b28      	ldr	r3, [pc, #160]	; (404a38 <afec_process_callback+0xac>)
  404998:	4798      	blx	r3
  40499a:	4604      	mov	r4, r0
  40499c:	6878      	ldr	r0, [r7, #4]
  40499e:	4b27      	ldr	r3, [pc, #156]	; (404a3c <afec_process_callback+0xb0>)
  4049a0:	4798      	blx	r3
  4049a2:	4603      	mov	r3, r0
  4049a4:	4023      	ands	r3, r4
  4049a6:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  4049a8:	6878      	ldr	r0, [r7, #4]
  4049aa:	4b25      	ldr	r3, [pc, #148]	; (404a40 <afec_process_callback+0xb4>)
  4049ac:	4798      	blx	r3
  4049ae:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4049b0:	2300      	movs	r3, #0
  4049b2:	617b      	str	r3, [r7, #20]
  4049b4:	e039      	b.n	404a2a <afec_process_callback+0x9e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4049b6:	697b      	ldr	r3, [r7, #20]
  4049b8:	2b0b      	cmp	r3, #11
  4049ba:	d80f      	bhi.n	4049dc <afec_process_callback+0x50>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  4049bc:	2201      	movs	r2, #1
  4049be:	697b      	ldr	r3, [r7, #20]
  4049c0:	fa02 f303 	lsl.w	r3, r2, r3
  4049c4:	461a      	mov	r2, r3
  4049c6:	68fb      	ldr	r3, [r7, #12]
  4049c8:	4013      	ands	r3, r2
  4049ca:	2b00      	cmp	r3, #0
  4049cc:	d02a      	beq.n	404a24 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4049ce:	693b      	ldr	r3, [r7, #16]
  4049d0:	b2db      	uxtb	r3, r3
  4049d2:	6979      	ldr	r1, [r7, #20]
  4049d4:	4618      	mov	r0, r3
  4049d6:	4b1b      	ldr	r3, [pc, #108]	; (404a44 <afec_process_callback+0xb8>)
  4049d8:	4798      	blx	r3
  4049da:	e023      	b.n	404a24 <afec_process_callback+0x98>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4049dc:	697b      	ldr	r3, [r7, #20]
  4049de:	2b0e      	cmp	r3, #14
  4049e0:	d810      	bhi.n	404a04 <afec_process_callback+0x78>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4049e2:	697b      	ldr	r3, [r7, #20]
  4049e4:	330c      	adds	r3, #12
  4049e6:	2201      	movs	r2, #1
  4049e8:	fa02 f303 	lsl.w	r3, r2, r3
  4049ec:	461a      	mov	r2, r3
  4049ee:	68fb      	ldr	r3, [r7, #12]
  4049f0:	4013      	ands	r3, r2
  4049f2:	2b00      	cmp	r3, #0
  4049f4:	d016      	beq.n	404a24 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4049f6:	693b      	ldr	r3, [r7, #16]
  4049f8:	b2db      	uxtb	r3, r3
  4049fa:	6979      	ldr	r1, [r7, #20]
  4049fc:	4618      	mov	r0, r3
  4049fe:	4b11      	ldr	r3, [pc, #68]	; (404a44 <afec_process_callback+0xb8>)
  404a00:	4798      	blx	r3
  404a02:	e00f      	b.n	404a24 <afec_process_callback+0x98>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  404a04:	697b      	ldr	r3, [r7, #20]
  404a06:	330f      	adds	r3, #15
  404a08:	2201      	movs	r2, #1
  404a0a:	fa02 f303 	lsl.w	r3, r2, r3
  404a0e:	461a      	mov	r2, r3
  404a10:	68fb      	ldr	r3, [r7, #12]
  404a12:	4013      	ands	r3, r2
  404a14:	2b00      	cmp	r3, #0
  404a16:	d005      	beq.n	404a24 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  404a18:	693b      	ldr	r3, [r7, #16]
  404a1a:	b2db      	uxtb	r3, r3
  404a1c:	6979      	ldr	r1, [r7, #20]
  404a1e:	4618      	mov	r0, r3
  404a20:	4b08      	ldr	r3, [pc, #32]	; (404a44 <afec_process_callback+0xb8>)
  404a22:	4798      	blx	r3
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  404a24:	697b      	ldr	r3, [r7, #20]
  404a26:	3301      	adds	r3, #1
  404a28:	617b      	str	r3, [r7, #20]
  404a2a:	697b      	ldr	r3, [r7, #20]
  404a2c:	2b0f      	cmp	r3, #15
  404a2e:	d9c2      	bls.n	4049b6 <afec_process_callback+0x2a>
			}
		}
	}
}
  404a30:	bf00      	nop
  404a32:	371c      	adds	r7, #28
  404a34:	46bd      	mov	sp, r7
  404a36:	bd90      	pop	{r4, r7, pc}
  404a38:	004043f9 	.word	0x004043f9
  404a3c:	00404411 	.word	0x00404411
  404a40:	00404515 	.word	0x00404515
  404a44:	00404951 	.word	0x00404951

00404a48 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  404a48:	b580      	push	{r7, lr}
  404a4a:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  404a4c:	4802      	ldr	r0, [pc, #8]	; (404a58 <AFEC0_Handler+0x10>)
  404a4e:	4b03      	ldr	r3, [pc, #12]	; (404a5c <AFEC0_Handler+0x14>)
  404a50:	4798      	blx	r3
}
  404a52:	bf00      	nop
  404a54:	bd80      	pop	{r7, pc}
  404a56:	bf00      	nop
  404a58:	4003c000 	.word	0x4003c000
  404a5c:	0040498d 	.word	0x0040498d

00404a60 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  404a60:	b580      	push	{r7, lr}
  404a62:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  404a64:	4802      	ldr	r0, [pc, #8]	; (404a70 <AFEC1_Handler+0x10>)
  404a66:	4b03      	ldr	r3, [pc, #12]	; (404a74 <AFEC1_Handler+0x14>)
  404a68:	4798      	blx	r3
}
  404a6a:	bf00      	nop
  404a6c:	bd80      	pop	{r7, pc}
  404a6e:	bf00      	nop
  404a70:	40064000 	.word	0x40064000
  404a74:	0040498d 	.word	0x0040498d

00404a78 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  404a78:	b580      	push	{r7, lr}
  404a7a:	b084      	sub	sp, #16
  404a7c:	af00      	add	r7, sp, #0
  404a7e:	6078      	str	r0, [r7, #4]
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  404a80:	6878      	ldr	r0, [r7, #4]
  404a82:	4b06      	ldr	r3, [pc, #24]	; (404a9c <afec_enable+0x24>)
  404a84:	4798      	blx	r3
  404a86:	60f8      	str	r0, [r7, #12]
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  404a88:	68f8      	ldr	r0, [r7, #12]
  404a8a:	4b05      	ldr	r3, [pc, #20]	; (404aa0 <afec_enable+0x28>)
  404a8c:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
  404a8e:	2002      	movs	r0, #2
  404a90:	4b04      	ldr	r3, [pc, #16]	; (404aa4 <afec_enable+0x2c>)
  404a92:	4798      	blx	r3
}
  404a94:	bf00      	nop
  404a96:	3710      	adds	r7, #16
  404a98:	46bd      	mov	sp, r7
  404a9a:	bd80      	pop	{r7, pc}
  404a9c:	0040454d 	.word	0x0040454d
  404aa0:	00404ec9 	.word	0x00404ec9
  404aa4:	00404429 	.word	0x00404429

00404aa8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  404aa8:	b480      	push	{r7}
  404aaa:	b083      	sub	sp, #12
  404aac:	af00      	add	r7, sp, #0
  404aae:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  404ab0:	687b      	ldr	r3, [r7, #4]
  404ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  404ab4:	4618      	mov	r0, r3
  404ab6:	370c      	adds	r7, #12
  404ab8:	46bd      	mov	sp, r7
  404aba:	f85d 7b04 	ldr.w	r7, [sp], #4
  404abe:	4770      	bx	lr

00404ac0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  404ac0:	b480      	push	{r7}
  404ac2:	b083      	sub	sp, #12
  404ac4:	af00      	add	r7, sp, #0
  404ac6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  404ac8:	687b      	ldr	r3, [r7, #4]
  404aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  404acc:	4618      	mov	r0, r3
  404ace:	370c      	adds	r7, #12
  404ad0:	46bd      	mov	sp, r7
  404ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ad6:	4770      	bx	lr

00404ad8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404ad8:	b580      	push	{r7, lr}
  404ada:	b084      	sub	sp, #16
  404adc:	af00      	add	r7, sp, #0
  404ade:	6078      	str	r0, [r7, #4]
  404ae0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  404ae2:	6878      	ldr	r0, [r7, #4]
  404ae4:	4b26      	ldr	r3, [pc, #152]	; (404b80 <pio_handler_process+0xa8>)
  404ae6:	4798      	blx	r3
  404ae8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  404aea:	6878      	ldr	r0, [r7, #4]
  404aec:	4b25      	ldr	r3, [pc, #148]	; (404b84 <pio_handler_process+0xac>)
  404aee:	4798      	blx	r3
  404af0:	4602      	mov	r2, r0
  404af2:	68fb      	ldr	r3, [r7, #12]
  404af4:	4013      	ands	r3, r2
  404af6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  404af8:	68fb      	ldr	r3, [r7, #12]
  404afa:	2b00      	cmp	r3, #0
  404afc:	d03c      	beq.n	404b78 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  404afe:	2300      	movs	r3, #0
  404b00:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  404b02:	e034      	b.n	404b6e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  404b04:	4a20      	ldr	r2, [pc, #128]	; (404b88 <pio_handler_process+0xb0>)
  404b06:	68bb      	ldr	r3, [r7, #8]
  404b08:	011b      	lsls	r3, r3, #4
  404b0a:	4413      	add	r3, r2
  404b0c:	681a      	ldr	r2, [r3, #0]
  404b0e:	683b      	ldr	r3, [r7, #0]
  404b10:	429a      	cmp	r2, r3
  404b12:	d126      	bne.n	404b62 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404b14:	4a1c      	ldr	r2, [pc, #112]	; (404b88 <pio_handler_process+0xb0>)
  404b16:	68bb      	ldr	r3, [r7, #8]
  404b18:	011b      	lsls	r3, r3, #4
  404b1a:	4413      	add	r3, r2
  404b1c:	3304      	adds	r3, #4
  404b1e:	681a      	ldr	r2, [r3, #0]
  404b20:	68fb      	ldr	r3, [r7, #12]
  404b22:	4013      	ands	r3, r2
  404b24:	2b00      	cmp	r3, #0
  404b26:	d01c      	beq.n	404b62 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  404b28:	4a17      	ldr	r2, [pc, #92]	; (404b88 <pio_handler_process+0xb0>)
  404b2a:	68bb      	ldr	r3, [r7, #8]
  404b2c:	011b      	lsls	r3, r3, #4
  404b2e:	4413      	add	r3, r2
  404b30:	330c      	adds	r3, #12
  404b32:	681b      	ldr	r3, [r3, #0]
  404b34:	4914      	ldr	r1, [pc, #80]	; (404b88 <pio_handler_process+0xb0>)
  404b36:	68ba      	ldr	r2, [r7, #8]
  404b38:	0112      	lsls	r2, r2, #4
  404b3a:	440a      	add	r2, r1
  404b3c:	6810      	ldr	r0, [r2, #0]
  404b3e:	4912      	ldr	r1, [pc, #72]	; (404b88 <pio_handler_process+0xb0>)
  404b40:	68ba      	ldr	r2, [r7, #8]
  404b42:	0112      	lsls	r2, r2, #4
  404b44:	440a      	add	r2, r1
  404b46:	3204      	adds	r2, #4
  404b48:	6812      	ldr	r2, [r2, #0]
  404b4a:	4611      	mov	r1, r2
  404b4c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  404b4e:	4a0e      	ldr	r2, [pc, #56]	; (404b88 <pio_handler_process+0xb0>)
  404b50:	68bb      	ldr	r3, [r7, #8]
  404b52:	011b      	lsls	r3, r3, #4
  404b54:	4413      	add	r3, r2
  404b56:	3304      	adds	r3, #4
  404b58:	681b      	ldr	r3, [r3, #0]
  404b5a:	43db      	mvns	r3, r3
  404b5c:	68fa      	ldr	r2, [r7, #12]
  404b5e:	4013      	ands	r3, r2
  404b60:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  404b62:	68bb      	ldr	r3, [r7, #8]
  404b64:	3301      	adds	r3, #1
  404b66:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  404b68:	68bb      	ldr	r3, [r7, #8]
  404b6a:	2b06      	cmp	r3, #6
  404b6c:	d803      	bhi.n	404b76 <pio_handler_process+0x9e>
		while (status != 0) {
  404b6e:	68fb      	ldr	r3, [r7, #12]
  404b70:	2b00      	cmp	r3, #0
  404b72:	d1c7      	bne.n	404b04 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  404b74:	e000      	b.n	404b78 <pio_handler_process+0xa0>
				break;
  404b76:	bf00      	nop
}
  404b78:	bf00      	nop
  404b7a:	3710      	adds	r7, #16
  404b7c:	46bd      	mov	sp, r7
  404b7e:	bd80      	pop	{r7, pc}
  404b80:	00404aa9 	.word	0x00404aa9
  404b84:	00404ac1 	.word	0x00404ac1
  404b88:	2040ae7c 	.word	0x2040ae7c

00404b8c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  404b8c:	b580      	push	{r7, lr}
  404b8e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  404b90:	210a      	movs	r1, #10
  404b92:	4802      	ldr	r0, [pc, #8]	; (404b9c <PIOA_Handler+0x10>)
  404b94:	4b02      	ldr	r3, [pc, #8]	; (404ba0 <PIOA_Handler+0x14>)
  404b96:	4798      	blx	r3
}
  404b98:	bf00      	nop
  404b9a:	bd80      	pop	{r7, pc}
  404b9c:	400e0e00 	.word	0x400e0e00
  404ba0:	00404ad9 	.word	0x00404ad9

00404ba4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  404ba4:	b580      	push	{r7, lr}
  404ba6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  404ba8:	210b      	movs	r1, #11
  404baa:	4802      	ldr	r0, [pc, #8]	; (404bb4 <PIOB_Handler+0x10>)
  404bac:	4b02      	ldr	r3, [pc, #8]	; (404bb8 <PIOB_Handler+0x14>)
  404bae:	4798      	blx	r3
}
  404bb0:	bf00      	nop
  404bb2:	bd80      	pop	{r7, pc}
  404bb4:	400e1000 	.word	0x400e1000
  404bb8:	00404ad9 	.word	0x00404ad9

00404bbc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  404bbc:	b580      	push	{r7, lr}
  404bbe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  404bc0:	210c      	movs	r1, #12
  404bc2:	4802      	ldr	r0, [pc, #8]	; (404bcc <PIOC_Handler+0x10>)
  404bc4:	4b02      	ldr	r3, [pc, #8]	; (404bd0 <PIOC_Handler+0x14>)
  404bc6:	4798      	blx	r3
}
  404bc8:	bf00      	nop
  404bca:	bd80      	pop	{r7, pc}
  404bcc:	400e1200 	.word	0x400e1200
  404bd0:	00404ad9 	.word	0x00404ad9

00404bd4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  404bd4:	b580      	push	{r7, lr}
  404bd6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  404bd8:	2110      	movs	r1, #16
  404bda:	4802      	ldr	r0, [pc, #8]	; (404be4 <PIOD_Handler+0x10>)
  404bdc:	4b02      	ldr	r3, [pc, #8]	; (404be8 <PIOD_Handler+0x14>)
  404bde:	4798      	blx	r3
}
  404be0:	bf00      	nop
  404be2:	bd80      	pop	{r7, pc}
  404be4:	400e1400 	.word	0x400e1400
  404be8:	00404ad9 	.word	0x00404ad9

00404bec <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  404bec:	b580      	push	{r7, lr}
  404bee:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  404bf0:	2111      	movs	r1, #17
  404bf2:	4802      	ldr	r0, [pc, #8]	; (404bfc <PIOE_Handler+0x10>)
  404bf4:	4b02      	ldr	r3, [pc, #8]	; (404c00 <PIOE_Handler+0x14>)
  404bf6:	4798      	blx	r3
}
  404bf8:	bf00      	nop
  404bfa:	bd80      	pop	{r7, pc}
  404bfc:	400e1600 	.word	0x400e1600
  404c00:	00404ad9 	.word	0x00404ad9

00404c04 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  404c04:	b480      	push	{r7}
  404c06:	b083      	sub	sp, #12
  404c08:	af00      	add	r7, sp, #0
  404c0a:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  404c0c:	687b      	ldr	r3, [r7, #4]
  404c0e:	3b01      	subs	r3, #1
  404c10:	2b03      	cmp	r3, #3
  404c12:	d81a      	bhi.n	404c4a <pmc_mck_set_division+0x46>
  404c14:	a201      	add	r2, pc, #4	; (adr r2, 404c1c <pmc_mck_set_division+0x18>)
  404c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404c1a:	bf00      	nop
  404c1c:	00404c2d 	.word	0x00404c2d
  404c20:	00404c33 	.word	0x00404c33
  404c24:	00404c3b 	.word	0x00404c3b
  404c28:	00404c43 	.word	0x00404c43
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  404c2c:	2300      	movs	r3, #0
  404c2e:	607b      	str	r3, [r7, #4]
			break;
  404c30:	e00e      	b.n	404c50 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  404c32:	f44f 7380 	mov.w	r3, #256	; 0x100
  404c36:	607b      	str	r3, [r7, #4]
			break;
  404c38:	e00a      	b.n	404c50 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  404c3a:	f44f 7340 	mov.w	r3, #768	; 0x300
  404c3e:	607b      	str	r3, [r7, #4]
			break;
  404c40:	e006      	b.n	404c50 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  404c42:	f44f 7300 	mov.w	r3, #512	; 0x200
  404c46:	607b      	str	r3, [r7, #4]
			break;
  404c48:	e002      	b.n	404c50 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  404c4a:	2300      	movs	r3, #0
  404c4c:	607b      	str	r3, [r7, #4]
			break;
  404c4e:	bf00      	nop
	}
	PMC->PMC_MCKR =
  404c50:	490a      	ldr	r1, [pc, #40]	; (404c7c <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  404c52:	4b0a      	ldr	r3, [pc, #40]	; (404c7c <pmc_mck_set_division+0x78>)
  404c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  404c5a:	687b      	ldr	r3, [r7, #4]
  404c5c:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  404c5e:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  404c60:	bf00      	nop
  404c62:	4b06      	ldr	r3, [pc, #24]	; (404c7c <pmc_mck_set_division+0x78>)
  404c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404c66:	f003 0308 	and.w	r3, r3, #8
  404c6a:	2b00      	cmp	r3, #0
  404c6c:	d0f9      	beq.n	404c62 <pmc_mck_set_division+0x5e>
}
  404c6e:	bf00      	nop
  404c70:	370c      	adds	r7, #12
  404c72:	46bd      	mov	sp, r7
  404c74:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c78:	4770      	bx	lr
  404c7a:	bf00      	nop
  404c7c:	400e0600 	.word	0x400e0600

00404c80 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  404c80:	b480      	push	{r7}
  404c82:	b085      	sub	sp, #20
  404c84:	af00      	add	r7, sp, #0
  404c86:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404c88:	491d      	ldr	r1, [pc, #116]	; (404d00 <pmc_switch_mck_to_pllack+0x80>)
  404c8a:	4b1d      	ldr	r3, [pc, #116]	; (404d00 <pmc_switch_mck_to_pllack+0x80>)
  404c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404c8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  404c92:	687b      	ldr	r3, [r7, #4]
  404c94:	4313      	orrs	r3, r2
  404c96:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404c9c:	60fb      	str	r3, [r7, #12]
  404c9e:	e007      	b.n	404cb0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404ca0:	68fb      	ldr	r3, [r7, #12]
  404ca2:	2b00      	cmp	r3, #0
  404ca4:	d101      	bne.n	404caa <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  404ca6:	2301      	movs	r3, #1
  404ca8:	e023      	b.n	404cf2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  404caa:	68fb      	ldr	r3, [r7, #12]
  404cac:	3b01      	subs	r3, #1
  404cae:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404cb0:	4b13      	ldr	r3, [pc, #76]	; (404d00 <pmc_switch_mck_to_pllack+0x80>)
  404cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404cb4:	f003 0308 	and.w	r3, r3, #8
  404cb8:	2b00      	cmp	r3, #0
  404cba:	d0f1      	beq.n	404ca0 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  404cbc:	4a10      	ldr	r2, [pc, #64]	; (404d00 <pmc_switch_mck_to_pllack+0x80>)
  404cbe:	4b10      	ldr	r3, [pc, #64]	; (404d00 <pmc_switch_mck_to_pllack+0x80>)
  404cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404cc2:	f023 0303 	bic.w	r3, r3, #3
  404cc6:	f043 0302 	orr.w	r3, r3, #2
  404cca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404cd0:	60fb      	str	r3, [r7, #12]
  404cd2:	e007      	b.n	404ce4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404cd4:	68fb      	ldr	r3, [r7, #12]
  404cd6:	2b00      	cmp	r3, #0
  404cd8:	d101      	bne.n	404cde <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  404cda:	2301      	movs	r3, #1
  404cdc:	e009      	b.n	404cf2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  404cde:	68fb      	ldr	r3, [r7, #12]
  404ce0:	3b01      	subs	r3, #1
  404ce2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404ce4:	4b06      	ldr	r3, [pc, #24]	; (404d00 <pmc_switch_mck_to_pllack+0x80>)
  404ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404ce8:	f003 0308 	and.w	r3, r3, #8
  404cec:	2b00      	cmp	r3, #0
  404cee:	d0f1      	beq.n	404cd4 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  404cf0:	2300      	movs	r3, #0
}
  404cf2:	4618      	mov	r0, r3
  404cf4:	3714      	adds	r7, #20
  404cf6:	46bd      	mov	sp, r7
  404cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
  404cfc:	4770      	bx	lr
  404cfe:	bf00      	nop
  404d00:	400e0600 	.word	0x400e0600

00404d04 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  404d04:	b480      	push	{r7}
  404d06:	b083      	sub	sp, #12
  404d08:	af00      	add	r7, sp, #0
  404d0a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  404d0c:	687b      	ldr	r3, [r7, #4]
  404d0e:	2b01      	cmp	r3, #1
  404d10:	d105      	bne.n	404d1e <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  404d12:	4907      	ldr	r1, [pc, #28]	; (404d30 <pmc_switch_sclk_to_32kxtal+0x2c>)
  404d14:	4b06      	ldr	r3, [pc, #24]	; (404d30 <pmc_switch_sclk_to_32kxtal+0x2c>)
  404d16:	689a      	ldr	r2, [r3, #8]
  404d18:	4b06      	ldr	r3, [pc, #24]	; (404d34 <pmc_switch_sclk_to_32kxtal+0x30>)
  404d1a:	4313      	orrs	r3, r2
  404d1c:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  404d1e:	4b04      	ldr	r3, [pc, #16]	; (404d30 <pmc_switch_sclk_to_32kxtal+0x2c>)
  404d20:	4a05      	ldr	r2, [pc, #20]	; (404d38 <pmc_switch_sclk_to_32kxtal+0x34>)
  404d22:	601a      	str	r2, [r3, #0]
}
  404d24:	bf00      	nop
  404d26:	370c      	adds	r7, #12
  404d28:	46bd      	mov	sp, r7
  404d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d2e:	4770      	bx	lr
  404d30:	400e1810 	.word	0x400e1810
  404d34:	a5100000 	.word	0xa5100000
  404d38:	a5000008 	.word	0xa5000008

00404d3c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  404d3c:	b480      	push	{r7}
  404d3e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  404d40:	4b09      	ldr	r3, [pc, #36]	; (404d68 <pmc_osc_is_ready_32kxtal+0x2c>)
  404d42:	695b      	ldr	r3, [r3, #20]
  404d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  404d48:	2b00      	cmp	r3, #0
  404d4a:	d007      	beq.n	404d5c <pmc_osc_is_ready_32kxtal+0x20>
  404d4c:	4b07      	ldr	r3, [pc, #28]	; (404d6c <pmc_osc_is_ready_32kxtal+0x30>)
  404d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404d54:	2b00      	cmp	r3, #0
  404d56:	d001      	beq.n	404d5c <pmc_osc_is_ready_32kxtal+0x20>
  404d58:	2301      	movs	r3, #1
  404d5a:	e000      	b.n	404d5e <pmc_osc_is_ready_32kxtal+0x22>
  404d5c:	2300      	movs	r3, #0
}
  404d5e:	4618      	mov	r0, r3
  404d60:	46bd      	mov	sp, r7
  404d62:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d66:	4770      	bx	lr
  404d68:	400e1810 	.word	0x400e1810
  404d6c:	400e0600 	.word	0x400e0600

00404d70 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  404d70:	b480      	push	{r7}
  404d72:	b083      	sub	sp, #12
  404d74:	af00      	add	r7, sp, #0
  404d76:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  404d78:	4915      	ldr	r1, [pc, #84]	; (404dd0 <pmc_switch_mainck_to_fastrc+0x60>)
  404d7a:	4b15      	ldr	r3, [pc, #84]	; (404dd0 <pmc_switch_mainck_to_fastrc+0x60>)
  404d7c:	6a1a      	ldr	r2, [r3, #32]
  404d7e:	4b15      	ldr	r3, [pc, #84]	; (404dd4 <pmc_switch_mainck_to_fastrc+0x64>)
  404d80:	4313      	orrs	r3, r2
  404d82:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404d84:	bf00      	nop
  404d86:	4b12      	ldr	r3, [pc, #72]	; (404dd0 <pmc_switch_mainck_to_fastrc+0x60>)
  404d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  404d8e:	2b00      	cmp	r3, #0
  404d90:	d0f9      	beq.n	404d86 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  404d92:	490f      	ldr	r1, [pc, #60]	; (404dd0 <pmc_switch_mainck_to_fastrc+0x60>)
  404d94:	4b0e      	ldr	r3, [pc, #56]	; (404dd0 <pmc_switch_mainck_to_fastrc+0x60>)
  404d96:	6a1a      	ldr	r2, [r3, #32]
  404d98:	4b0f      	ldr	r3, [pc, #60]	; (404dd8 <pmc_switch_mainck_to_fastrc+0x68>)
  404d9a:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  404d9c:	687a      	ldr	r2, [r7, #4]
  404d9e:	4313      	orrs	r3, r2
  404da0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  404da4:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404da6:	bf00      	nop
  404da8:	4b09      	ldr	r3, [pc, #36]	; (404dd0 <pmc_switch_mainck_to_fastrc+0x60>)
  404daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  404db0:	2b00      	cmp	r3, #0
  404db2:	d0f9      	beq.n	404da8 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  404db4:	4906      	ldr	r1, [pc, #24]	; (404dd0 <pmc_switch_mainck_to_fastrc+0x60>)
  404db6:	4b06      	ldr	r3, [pc, #24]	; (404dd0 <pmc_switch_mainck_to_fastrc+0x60>)
  404db8:	6a1a      	ldr	r2, [r3, #32]
  404dba:	4b08      	ldr	r3, [pc, #32]	; (404ddc <pmc_switch_mainck_to_fastrc+0x6c>)
  404dbc:	4013      	ands	r3, r2
  404dbe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404dc2:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  404dc4:	bf00      	nop
  404dc6:	370c      	adds	r7, #12
  404dc8:	46bd      	mov	sp, r7
  404dca:	f85d 7b04 	ldr.w	r7, [sp], #4
  404dce:	4770      	bx	lr
  404dd0:	400e0600 	.word	0x400e0600
  404dd4:	00370008 	.word	0x00370008
  404dd8:	ffc8ff8f 	.word	0xffc8ff8f
  404ddc:	fec8ffff 	.word	0xfec8ffff

00404de0 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  404de0:	b480      	push	{r7}
  404de2:	b083      	sub	sp, #12
  404de4:	af00      	add	r7, sp, #0
  404de6:	6078      	str	r0, [r7, #4]
  404de8:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  404dea:	687b      	ldr	r3, [r7, #4]
  404dec:	2b00      	cmp	r3, #0
  404dee:	d008      	beq.n	404e02 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404df0:	4913      	ldr	r1, [pc, #76]	; (404e40 <pmc_switch_mainck_to_xtal+0x60>)
  404df2:	4b13      	ldr	r3, [pc, #76]	; (404e40 <pmc_switch_mainck_to_xtal+0x60>)
  404df4:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  404df6:	4a13      	ldr	r2, [pc, #76]	; (404e44 <pmc_switch_mainck_to_xtal+0x64>)
  404df8:	401a      	ands	r2, r3
  404dfa:	4b13      	ldr	r3, [pc, #76]	; (404e48 <pmc_switch_mainck_to_xtal+0x68>)
  404dfc:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404dfe:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  404e00:	e018      	b.n	404e34 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404e02:	490f      	ldr	r1, [pc, #60]	; (404e40 <pmc_switch_mainck_to_xtal+0x60>)
  404e04:	4b0e      	ldr	r3, [pc, #56]	; (404e40 <pmc_switch_mainck_to_xtal+0x60>)
  404e06:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404e08:	4b10      	ldr	r3, [pc, #64]	; (404e4c <pmc_switch_mainck_to_xtal+0x6c>)
  404e0a:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  404e0c:	683a      	ldr	r2, [r7, #0]
  404e0e:	0212      	lsls	r2, r2, #8
  404e10:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404e12:	431a      	orrs	r2, r3
  404e14:	4b0e      	ldr	r3, [pc, #56]	; (404e50 <pmc_switch_mainck_to_xtal+0x70>)
  404e16:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404e18:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  404e1a:	bf00      	nop
  404e1c:	4b08      	ldr	r3, [pc, #32]	; (404e40 <pmc_switch_mainck_to_xtal+0x60>)
  404e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404e20:	f003 0301 	and.w	r3, r3, #1
  404e24:	2b00      	cmp	r3, #0
  404e26:	d0f9      	beq.n	404e1c <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  404e28:	4905      	ldr	r1, [pc, #20]	; (404e40 <pmc_switch_mainck_to_xtal+0x60>)
  404e2a:	4b05      	ldr	r3, [pc, #20]	; (404e40 <pmc_switch_mainck_to_xtal+0x60>)
  404e2c:	6a1a      	ldr	r2, [r3, #32]
  404e2e:	4b09      	ldr	r3, [pc, #36]	; (404e54 <pmc_switch_mainck_to_xtal+0x74>)
  404e30:	4313      	orrs	r3, r2
  404e32:	620b      	str	r3, [r1, #32]
}
  404e34:	bf00      	nop
  404e36:	370c      	adds	r7, #12
  404e38:	46bd      	mov	sp, r7
  404e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e3e:	4770      	bx	lr
  404e40:	400e0600 	.word	0x400e0600
  404e44:	fec8fffc 	.word	0xfec8fffc
  404e48:	01370002 	.word	0x01370002
  404e4c:	ffc8fffc 	.word	0xffc8fffc
  404e50:	00370001 	.word	0x00370001
  404e54:	01370000 	.word	0x01370000

00404e58 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  404e58:	b480      	push	{r7}
  404e5a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  404e5c:	4b04      	ldr	r3, [pc, #16]	; (404e70 <pmc_osc_is_ready_mainck+0x18>)
  404e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  404e64:	4618      	mov	r0, r3
  404e66:	46bd      	mov	sp, r7
  404e68:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e6c:	4770      	bx	lr
  404e6e:	bf00      	nop
  404e70:	400e0600 	.word	0x400e0600

00404e74 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  404e74:	b480      	push	{r7}
  404e76:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  404e78:	4b04      	ldr	r3, [pc, #16]	; (404e8c <pmc_disable_pllack+0x18>)
  404e7a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  404e7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  404e80:	bf00      	nop
  404e82:	46bd      	mov	sp, r7
  404e84:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e88:	4770      	bx	lr
  404e8a:	bf00      	nop
  404e8c:	400e0600 	.word	0x400e0600

00404e90 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  404e90:	b480      	push	{r7}
  404e92:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404e94:	4b04      	ldr	r3, [pc, #16]	; (404ea8 <pmc_is_locked_pllack+0x18>)
  404e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404e98:	f003 0302 	and.w	r3, r3, #2
}
  404e9c:	4618      	mov	r0, r3
  404e9e:	46bd      	mov	sp, r7
  404ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ea4:	4770      	bx	lr
  404ea6:	bf00      	nop
  404ea8:	400e0600 	.word	0x400e0600

00404eac <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  404eac:	b480      	push	{r7}
  404eae:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  404eb0:	4b04      	ldr	r3, [pc, #16]	; (404ec4 <pmc_is_locked_upll+0x18>)
  404eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  404eb8:	4618      	mov	r0, r3
  404eba:	46bd      	mov	sp, r7
  404ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ec0:	4770      	bx	lr
  404ec2:	bf00      	nop
  404ec4:	400e0600 	.word	0x400e0600

00404ec8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  404ec8:	b480      	push	{r7}
  404eca:	b083      	sub	sp, #12
  404ecc:	af00      	add	r7, sp, #0
  404ece:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  404ed0:	687b      	ldr	r3, [r7, #4]
  404ed2:	2b3f      	cmp	r3, #63	; 0x3f
  404ed4:	d901      	bls.n	404eda <pmc_enable_periph_clk+0x12>
		return 1;
  404ed6:	2301      	movs	r3, #1
  404ed8:	e02f      	b.n	404f3a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  404eda:	687b      	ldr	r3, [r7, #4]
  404edc:	2b1f      	cmp	r3, #31
  404ede:	d813      	bhi.n	404f08 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  404ee0:	4b19      	ldr	r3, [pc, #100]	; (404f48 <pmc_enable_periph_clk+0x80>)
  404ee2:	699a      	ldr	r2, [r3, #24]
  404ee4:	2101      	movs	r1, #1
  404ee6:	687b      	ldr	r3, [r7, #4]
  404ee8:	fa01 f303 	lsl.w	r3, r1, r3
  404eec:	401a      	ands	r2, r3
  404eee:	2101      	movs	r1, #1
  404ef0:	687b      	ldr	r3, [r7, #4]
  404ef2:	fa01 f303 	lsl.w	r3, r1, r3
  404ef6:	429a      	cmp	r2, r3
  404ef8:	d01e      	beq.n	404f38 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  404efa:	4a13      	ldr	r2, [pc, #76]	; (404f48 <pmc_enable_periph_clk+0x80>)
  404efc:	2101      	movs	r1, #1
  404efe:	687b      	ldr	r3, [r7, #4]
  404f00:	fa01 f303 	lsl.w	r3, r1, r3
  404f04:	6113      	str	r3, [r2, #16]
  404f06:	e017      	b.n	404f38 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  404f08:	687b      	ldr	r3, [r7, #4]
  404f0a:	3b20      	subs	r3, #32
  404f0c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  404f0e:	4b0e      	ldr	r3, [pc, #56]	; (404f48 <pmc_enable_periph_clk+0x80>)
  404f10:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  404f14:	2101      	movs	r1, #1
  404f16:	687b      	ldr	r3, [r7, #4]
  404f18:	fa01 f303 	lsl.w	r3, r1, r3
  404f1c:	401a      	ands	r2, r3
  404f1e:	2101      	movs	r1, #1
  404f20:	687b      	ldr	r3, [r7, #4]
  404f22:	fa01 f303 	lsl.w	r3, r1, r3
  404f26:	429a      	cmp	r2, r3
  404f28:	d006      	beq.n	404f38 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  404f2a:	4a07      	ldr	r2, [pc, #28]	; (404f48 <pmc_enable_periph_clk+0x80>)
  404f2c:	2101      	movs	r1, #1
  404f2e:	687b      	ldr	r3, [r7, #4]
  404f30:	fa01 f303 	lsl.w	r3, r1, r3
  404f34:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  404f38:	2300      	movs	r3, #0
}
  404f3a:	4618      	mov	r0, r3
  404f3c:	370c      	adds	r7, #12
  404f3e:	46bd      	mov	sp, r7
  404f40:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f44:	4770      	bx	lr
  404f46:	bf00      	nop
  404f48:	400e0600 	.word	0x400e0600

00404f4c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  404f4c:	b480      	push	{r7}
  404f4e:	b085      	sub	sp, #20
  404f50:	af00      	add	r7, sp, #0
  404f52:	6078      	str	r0, [r7, #4]
  404f54:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  404f56:	2300      	movs	r3, #0
  404f58:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  404f5a:	687b      	ldr	r3, [r7, #4]
  404f5c:	22ac      	movs	r2, #172	; 0xac
  404f5e:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  404f60:	683b      	ldr	r3, [r7, #0]
  404f62:	681a      	ldr	r2, [r3, #0]
  404f64:	683b      	ldr	r3, [r7, #0]
  404f66:	685b      	ldr	r3, [r3, #4]
  404f68:	fbb2 f3f3 	udiv	r3, r2, r3
  404f6c:	091b      	lsrs	r3, r3, #4
  404f6e:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  404f70:	68fb      	ldr	r3, [r7, #12]
  404f72:	2b00      	cmp	r3, #0
  404f74:	d003      	beq.n	404f7e <uart_init+0x32>
  404f76:	68fb      	ldr	r3, [r7, #12]
  404f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  404f7c:	d301      	bcc.n	404f82 <uart_init+0x36>
		return 1;
  404f7e:	2301      	movs	r3, #1
  404f80:	e00a      	b.n	404f98 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  404f82:	687b      	ldr	r3, [r7, #4]
  404f84:	68fa      	ldr	r2, [r7, #12]
  404f86:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  404f88:	683b      	ldr	r3, [r7, #0]
  404f8a:	689a      	ldr	r2, [r3, #8]
  404f8c:	687b      	ldr	r3, [r7, #4]
  404f8e:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  404f90:	687b      	ldr	r3, [r7, #4]
  404f92:	2250      	movs	r2, #80	; 0x50
  404f94:	601a      	str	r2, [r3, #0]

	return 0;
  404f96:	2300      	movs	r3, #0
}
  404f98:	4618      	mov	r0, r3
  404f9a:	3714      	adds	r7, #20
  404f9c:	46bd      	mov	sp, r7
  404f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fa2:	4770      	bx	lr

00404fa4 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  404fa4:	b480      	push	{r7}
  404fa6:	b083      	sub	sp, #12
  404fa8:	af00      	add	r7, sp, #0
  404faa:	6078      	str	r0, [r7, #4]
  404fac:	460b      	mov	r3, r1
  404fae:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  404fb0:	687b      	ldr	r3, [r7, #4]
  404fb2:	695b      	ldr	r3, [r3, #20]
  404fb4:	f003 0302 	and.w	r3, r3, #2
  404fb8:	2b00      	cmp	r3, #0
  404fba:	d101      	bne.n	404fc0 <uart_write+0x1c>
		return 1;
  404fbc:	2301      	movs	r3, #1
  404fbe:	e003      	b.n	404fc8 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  404fc0:	78fa      	ldrb	r2, [r7, #3]
  404fc2:	687b      	ldr	r3, [r7, #4]
  404fc4:	61da      	str	r2, [r3, #28]
	return 0;
  404fc6:	2300      	movs	r3, #0
}
  404fc8:	4618      	mov	r0, r3
  404fca:	370c      	adds	r7, #12
  404fcc:	46bd      	mov	sp, r7
  404fce:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fd2:	4770      	bx	lr

00404fd4 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  404fd4:	b480      	push	{r7}
  404fd6:	b083      	sub	sp, #12
  404fd8:	af00      	add	r7, sp, #0
  404fda:	6078      	str	r0, [r7, #4]
  404fdc:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  404fde:	687b      	ldr	r3, [r7, #4]
  404fe0:	695b      	ldr	r3, [r3, #20]
  404fe2:	f003 0301 	and.w	r3, r3, #1
  404fe6:	2b00      	cmp	r3, #0
  404fe8:	d101      	bne.n	404fee <uart_read+0x1a>
		return 1;
  404fea:	2301      	movs	r3, #1
  404fec:	e005      	b.n	404ffa <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  404fee:	687b      	ldr	r3, [r7, #4]
  404ff0:	699b      	ldr	r3, [r3, #24]
  404ff2:	b2da      	uxtb	r2, r3
  404ff4:	683b      	ldr	r3, [r7, #0]
  404ff6:	701a      	strb	r2, [r3, #0]
	return 0;
  404ff8:	2300      	movs	r3, #0
}
  404ffa:	4618      	mov	r0, r3
  404ffc:	370c      	adds	r7, #12
  404ffe:	46bd      	mov	sp, r7
  405000:	f85d 7b04 	ldr.w	r7, [sp], #4
  405004:	4770      	bx	lr

00405006 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  405006:	b480      	push	{r7}
  405008:	b089      	sub	sp, #36	; 0x24
  40500a:	af00      	add	r7, sp, #0
  40500c:	60f8      	str	r0, [r7, #12]
  40500e:	60b9      	str	r1, [r7, #8]
  405010:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  405012:	68bb      	ldr	r3, [r7, #8]
  405014:	011a      	lsls	r2, r3, #4
  405016:	687b      	ldr	r3, [r7, #4]
  405018:	429a      	cmp	r2, r3
  40501a:	d802      	bhi.n	405022 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  40501c:	2310      	movs	r3, #16
  40501e:	61fb      	str	r3, [r7, #28]
  405020:	e001      	b.n	405026 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  405022:	2308      	movs	r3, #8
  405024:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  405026:	687b      	ldr	r3, [r7, #4]
  405028:	00da      	lsls	r2, r3, #3
  40502a:	69fb      	ldr	r3, [r7, #28]
  40502c:	68b9      	ldr	r1, [r7, #8]
  40502e:	fb01 f303 	mul.w	r3, r1, r3
  405032:	085b      	lsrs	r3, r3, #1
  405034:	441a      	add	r2, r3
  405036:	69fb      	ldr	r3, [r7, #28]
  405038:	68b9      	ldr	r1, [r7, #8]
  40503a:	fb01 f303 	mul.w	r3, r1, r3
  40503e:	fbb2 f3f3 	udiv	r3, r2, r3
  405042:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  405044:	69bb      	ldr	r3, [r7, #24]
  405046:	08db      	lsrs	r3, r3, #3
  405048:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  40504a:	69bb      	ldr	r3, [r7, #24]
  40504c:	f003 0307 	and.w	r3, r3, #7
  405050:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  405052:	697b      	ldr	r3, [r7, #20]
  405054:	2b00      	cmp	r3, #0
  405056:	d003      	beq.n	405060 <usart_set_async_baudrate+0x5a>
  405058:	697b      	ldr	r3, [r7, #20]
  40505a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40505e:	d301      	bcc.n	405064 <usart_set_async_baudrate+0x5e>
		return 1;
  405060:	2301      	movs	r3, #1
  405062:	e00f      	b.n	405084 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  405064:	69fb      	ldr	r3, [r7, #28]
  405066:	2b08      	cmp	r3, #8
  405068:	d105      	bne.n	405076 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  40506a:	68fb      	ldr	r3, [r7, #12]
  40506c:	685b      	ldr	r3, [r3, #4]
  40506e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  405072:	68fb      	ldr	r3, [r7, #12]
  405074:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  405076:	693b      	ldr	r3, [r7, #16]
  405078:	041a      	lsls	r2, r3, #16
  40507a:	697b      	ldr	r3, [r7, #20]
  40507c:	431a      	orrs	r2, r3
  40507e:	68fb      	ldr	r3, [r7, #12]
  405080:	621a      	str	r2, [r3, #32]

	return 0;
  405082:	2300      	movs	r3, #0
}
  405084:	4618      	mov	r0, r3
  405086:	3724      	adds	r7, #36	; 0x24
  405088:	46bd      	mov	sp, r7
  40508a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40508e:	4770      	bx	lr

00405090 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  405090:	b580      	push	{r7, lr}
  405092:	b082      	sub	sp, #8
  405094:	af00      	add	r7, sp, #0
  405096:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  405098:	6878      	ldr	r0, [r7, #4]
  40509a:	4b0d      	ldr	r3, [pc, #52]	; (4050d0 <usart_reset+0x40>)
  40509c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40509e:	687b      	ldr	r3, [r7, #4]
  4050a0:	2200      	movs	r2, #0
  4050a2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  4050a4:	687b      	ldr	r3, [r7, #4]
  4050a6:	2200      	movs	r2, #0
  4050a8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4050aa:	687b      	ldr	r3, [r7, #4]
  4050ac:	2200      	movs	r2, #0
  4050ae:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  4050b0:	6878      	ldr	r0, [r7, #4]
  4050b2:	4b08      	ldr	r3, [pc, #32]	; (4050d4 <usart_reset+0x44>)
  4050b4:	4798      	blx	r3
	usart_reset_rx(p_usart);
  4050b6:	6878      	ldr	r0, [r7, #4]
  4050b8:	4b07      	ldr	r3, [pc, #28]	; (4050d8 <usart_reset+0x48>)
  4050ba:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  4050bc:	6878      	ldr	r0, [r7, #4]
  4050be:	4b07      	ldr	r3, [pc, #28]	; (4050dc <usart_reset+0x4c>)
  4050c0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  4050c2:	6878      	ldr	r0, [r7, #4]
  4050c4:	4b06      	ldr	r3, [pc, #24]	; (4050e0 <usart_reset+0x50>)
  4050c6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  4050c8:	bf00      	nop
  4050ca:	3708      	adds	r7, #8
  4050cc:	46bd      	mov	sp, r7
  4050ce:	bd80      	pop	{r7, pc}
  4050d0:	00405271 	.word	0x00405271
  4050d4:	00405183 	.word	0x00405183
  4050d8:	004051b7 	.word	0x004051b7
  4050dc:	004051d1 	.word	0x004051d1
  4050e0:	004051ed 	.word	0x004051ed

004050e4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4050e4:	b580      	push	{r7, lr}
  4050e6:	b084      	sub	sp, #16
  4050e8:	af00      	add	r7, sp, #0
  4050ea:	60f8      	str	r0, [r7, #12]
  4050ec:	60b9      	str	r1, [r7, #8]
  4050ee:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4050f0:	68f8      	ldr	r0, [r7, #12]
  4050f2:	4b1a      	ldr	r3, [pc, #104]	; (40515c <usart_init_rs232+0x78>)
  4050f4:	4798      	blx	r3

	ul_reg_val = 0;
  4050f6:	4b1a      	ldr	r3, [pc, #104]	; (405160 <usart_init_rs232+0x7c>)
  4050f8:	2200      	movs	r2, #0
  4050fa:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4050fc:	68bb      	ldr	r3, [r7, #8]
  4050fe:	2b00      	cmp	r3, #0
  405100:	d009      	beq.n	405116 <usart_init_rs232+0x32>
  405102:	68bb      	ldr	r3, [r7, #8]
  405104:	681b      	ldr	r3, [r3, #0]
  405106:	687a      	ldr	r2, [r7, #4]
  405108:	4619      	mov	r1, r3
  40510a:	68f8      	ldr	r0, [r7, #12]
  40510c:	4b15      	ldr	r3, [pc, #84]	; (405164 <usart_init_rs232+0x80>)
  40510e:	4798      	blx	r3
  405110:	4603      	mov	r3, r0
  405112:	2b00      	cmp	r3, #0
  405114:	d001      	beq.n	40511a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  405116:	2301      	movs	r3, #1
  405118:	e01b      	b.n	405152 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  40511a:	68bb      	ldr	r3, [r7, #8]
  40511c:	685a      	ldr	r2, [r3, #4]
  40511e:	68bb      	ldr	r3, [r7, #8]
  405120:	689b      	ldr	r3, [r3, #8]
  405122:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  405124:	68bb      	ldr	r3, [r7, #8]
  405126:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405128:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  40512a:	68bb      	ldr	r3, [r7, #8]
  40512c:	68db      	ldr	r3, [r3, #12]
  40512e:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405130:	4b0b      	ldr	r3, [pc, #44]	; (405160 <usart_init_rs232+0x7c>)
  405132:	681b      	ldr	r3, [r3, #0]
  405134:	4313      	orrs	r3, r2
  405136:	4a0a      	ldr	r2, [pc, #40]	; (405160 <usart_init_rs232+0x7c>)
  405138:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  40513a:	4b09      	ldr	r3, [pc, #36]	; (405160 <usart_init_rs232+0x7c>)
  40513c:	681b      	ldr	r3, [r3, #0]
  40513e:	4a08      	ldr	r2, [pc, #32]	; (405160 <usart_init_rs232+0x7c>)
  405140:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  405142:	68fb      	ldr	r3, [r7, #12]
  405144:	685a      	ldr	r2, [r3, #4]
  405146:	4b06      	ldr	r3, [pc, #24]	; (405160 <usart_init_rs232+0x7c>)
  405148:	681b      	ldr	r3, [r3, #0]
  40514a:	431a      	orrs	r2, r3
  40514c:	68fb      	ldr	r3, [r7, #12]
  40514e:	605a      	str	r2, [r3, #4]

	return 0;
  405150:	2300      	movs	r3, #0
}
  405152:	4618      	mov	r0, r3
  405154:	3710      	adds	r7, #16
  405156:	46bd      	mov	sp, r7
  405158:	bd80      	pop	{r7, pc}
  40515a:	bf00      	nop
  40515c:	00405091 	.word	0x00405091
  405160:	2040aeec 	.word	0x2040aeec
  405164:	00405007 	.word	0x00405007

00405168 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  405168:	b480      	push	{r7}
  40516a:	b083      	sub	sp, #12
  40516c:	af00      	add	r7, sp, #0
  40516e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  405170:	687b      	ldr	r3, [r7, #4]
  405172:	2240      	movs	r2, #64	; 0x40
  405174:	601a      	str	r2, [r3, #0]
}
  405176:	bf00      	nop
  405178:	370c      	adds	r7, #12
  40517a:	46bd      	mov	sp, r7
  40517c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405180:	4770      	bx	lr

00405182 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  405182:	b480      	push	{r7}
  405184:	b083      	sub	sp, #12
  405186:	af00      	add	r7, sp, #0
  405188:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40518a:	687b      	ldr	r3, [r7, #4]
  40518c:	2288      	movs	r2, #136	; 0x88
  40518e:	601a      	str	r2, [r3, #0]
}
  405190:	bf00      	nop
  405192:	370c      	adds	r7, #12
  405194:	46bd      	mov	sp, r7
  405196:	f85d 7b04 	ldr.w	r7, [sp], #4
  40519a:	4770      	bx	lr

0040519c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  40519c:	b480      	push	{r7}
  40519e:	b083      	sub	sp, #12
  4051a0:	af00      	add	r7, sp, #0
  4051a2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  4051a4:	687b      	ldr	r3, [r7, #4]
  4051a6:	2210      	movs	r2, #16
  4051a8:	601a      	str	r2, [r3, #0]
}
  4051aa:	bf00      	nop
  4051ac:	370c      	adds	r7, #12
  4051ae:	46bd      	mov	sp, r7
  4051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051b4:	4770      	bx	lr

004051b6 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  4051b6:	b480      	push	{r7}
  4051b8:	b083      	sub	sp, #12
  4051ba:	af00      	add	r7, sp, #0
  4051bc:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4051be:	687b      	ldr	r3, [r7, #4]
  4051c0:	2224      	movs	r2, #36	; 0x24
  4051c2:	601a      	str	r2, [r3, #0]
}
  4051c4:	bf00      	nop
  4051c6:	370c      	adds	r7, #12
  4051c8:	46bd      	mov	sp, r7
  4051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051ce:	4770      	bx	lr

004051d0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  4051d0:	b480      	push	{r7}
  4051d2:	b083      	sub	sp, #12
  4051d4:	af00      	add	r7, sp, #0
  4051d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  4051d8:	687b      	ldr	r3, [r7, #4]
  4051da:	f44f 7280 	mov.w	r2, #256	; 0x100
  4051de:	601a      	str	r2, [r3, #0]
}
  4051e0:	bf00      	nop
  4051e2:	370c      	adds	r7, #12
  4051e4:	46bd      	mov	sp, r7
  4051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4051ea:	4770      	bx	lr

004051ec <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  4051ec:	b480      	push	{r7}
  4051ee:	b083      	sub	sp, #12
  4051f0:	af00      	add	r7, sp, #0
  4051f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  4051f4:	687b      	ldr	r3, [r7, #4]
  4051f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4051fa:	601a      	str	r2, [r3, #0]
}
  4051fc:	bf00      	nop
  4051fe:	370c      	adds	r7, #12
  405200:	46bd      	mov	sp, r7
  405202:	f85d 7b04 	ldr.w	r7, [sp], #4
  405206:	4770      	bx	lr

00405208 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  405208:	b480      	push	{r7}
  40520a:	b083      	sub	sp, #12
  40520c:	af00      	add	r7, sp, #0
  40520e:	6078      	str	r0, [r7, #4]
  405210:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  405212:	687b      	ldr	r3, [r7, #4]
  405214:	695b      	ldr	r3, [r3, #20]
  405216:	f003 0302 	and.w	r3, r3, #2
  40521a:	2b00      	cmp	r3, #0
  40521c:	d101      	bne.n	405222 <usart_write+0x1a>
		return 1;
  40521e:	2301      	movs	r3, #1
  405220:	e005      	b.n	40522e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  405222:	683b      	ldr	r3, [r7, #0]
  405224:	f3c3 0208 	ubfx	r2, r3, #0, #9
  405228:	687b      	ldr	r3, [r7, #4]
  40522a:	61da      	str	r2, [r3, #28]
	return 0;
  40522c:	2300      	movs	r3, #0
}
  40522e:	4618      	mov	r0, r3
  405230:	370c      	adds	r7, #12
  405232:	46bd      	mov	sp, r7
  405234:	f85d 7b04 	ldr.w	r7, [sp], #4
  405238:	4770      	bx	lr

0040523a <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  40523a:	b480      	push	{r7}
  40523c:	b083      	sub	sp, #12
  40523e:	af00      	add	r7, sp, #0
  405240:	6078      	str	r0, [r7, #4]
  405242:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  405244:	687b      	ldr	r3, [r7, #4]
  405246:	695b      	ldr	r3, [r3, #20]
  405248:	f003 0301 	and.w	r3, r3, #1
  40524c:	2b00      	cmp	r3, #0
  40524e:	d101      	bne.n	405254 <usart_read+0x1a>
		return 1;
  405250:	2301      	movs	r3, #1
  405252:	e006      	b.n	405262 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  405254:	687b      	ldr	r3, [r7, #4]
  405256:	699b      	ldr	r3, [r3, #24]
  405258:	f3c3 0208 	ubfx	r2, r3, #0, #9
  40525c:	683b      	ldr	r3, [r7, #0]
  40525e:	601a      	str	r2, [r3, #0]

	return 0;
  405260:	2300      	movs	r3, #0
}
  405262:	4618      	mov	r0, r3
  405264:	370c      	adds	r7, #12
  405266:	46bd      	mov	sp, r7
  405268:	f85d 7b04 	ldr.w	r7, [sp], #4
  40526c:	4770      	bx	lr
	...

00405270 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  405270:	b480      	push	{r7}
  405272:	b083      	sub	sp, #12
  405274:	af00      	add	r7, sp, #0
  405276:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  405278:	687b      	ldr	r3, [r7, #4]
  40527a:	4a04      	ldr	r2, [pc, #16]	; (40528c <usart_disable_writeprotect+0x1c>)
  40527c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  405280:	bf00      	nop
  405282:	370c      	adds	r7, #12
  405284:	46bd      	mov	sp, r7
  405286:	f85d 7b04 	ldr.w	r7, [sp], #4
  40528a:	4770      	bx	lr
  40528c:	55534100 	.word	0x55534100

00405290 <cpu_irq_save>:
{
  405290:	b480      	push	{r7}
  405292:	b083      	sub	sp, #12
  405294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405296:	f3ef 8310 	mrs	r3, PRIMASK
  40529a:	607b      	str	r3, [r7, #4]
  return(result);
  40529c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40529e:	2b00      	cmp	r3, #0
  4052a0:	bf0c      	ite	eq
  4052a2:	2301      	moveq	r3, #1
  4052a4:	2300      	movne	r3, #0
  4052a6:	b2db      	uxtb	r3, r3
  4052a8:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4052aa:	b672      	cpsid	i
  4052ac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4052b0:	4b04      	ldr	r3, [pc, #16]	; (4052c4 <cpu_irq_save+0x34>)
  4052b2:	2200      	movs	r2, #0
  4052b4:	701a      	strb	r2, [r3, #0]
	return flags;
  4052b6:	683b      	ldr	r3, [r7, #0]
}
  4052b8:	4618      	mov	r0, r3
  4052ba:	370c      	adds	r7, #12
  4052bc:	46bd      	mov	sp, r7
  4052be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4052c2:	4770      	bx	lr
  4052c4:	20400034 	.word	0x20400034

004052c8 <cpu_irq_is_enabled_flags>:
{
  4052c8:	b480      	push	{r7}
  4052ca:	b083      	sub	sp, #12
  4052cc:	af00      	add	r7, sp, #0
  4052ce:	6078      	str	r0, [r7, #4]
	return (flags);
  4052d0:	687b      	ldr	r3, [r7, #4]
  4052d2:	2b00      	cmp	r3, #0
  4052d4:	bf14      	ite	ne
  4052d6:	2301      	movne	r3, #1
  4052d8:	2300      	moveq	r3, #0
  4052da:	b2db      	uxtb	r3, r3
}
  4052dc:	4618      	mov	r0, r3
  4052de:	370c      	adds	r7, #12
  4052e0:	46bd      	mov	sp, r7
  4052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4052e6:	4770      	bx	lr

004052e8 <cpu_irq_restore>:
{
  4052e8:	b580      	push	{r7, lr}
  4052ea:	b082      	sub	sp, #8
  4052ec:	af00      	add	r7, sp, #0
  4052ee:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4052f0:	6878      	ldr	r0, [r7, #4]
  4052f2:	4b07      	ldr	r3, [pc, #28]	; (405310 <cpu_irq_restore+0x28>)
  4052f4:	4798      	blx	r3
  4052f6:	4603      	mov	r3, r0
  4052f8:	2b00      	cmp	r3, #0
  4052fa:	d005      	beq.n	405308 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4052fc:	4b05      	ldr	r3, [pc, #20]	; (405314 <cpu_irq_restore+0x2c>)
  4052fe:	2201      	movs	r2, #1
  405300:	701a      	strb	r2, [r3, #0]
  405302:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405306:	b662      	cpsie	i
}
  405308:	bf00      	nop
  40530a:	3708      	adds	r7, #8
  40530c:	46bd      	mov	sp, r7
  40530e:	bd80      	pop	{r7, pc}
  405310:	004052c9 	.word	0x004052c9
  405314:	20400034 	.word	0x20400034

00405318 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  405318:	b580      	push	{r7, lr}
  40531a:	b084      	sub	sp, #16
  40531c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40531e:	4b1e      	ldr	r3, [pc, #120]	; (405398 <Reset_Handler+0x80>)
  405320:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  405322:	4b1e      	ldr	r3, [pc, #120]	; (40539c <Reset_Handler+0x84>)
  405324:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  405326:	68fa      	ldr	r2, [r7, #12]
  405328:	68bb      	ldr	r3, [r7, #8]
  40532a:	429a      	cmp	r2, r3
  40532c:	d00c      	beq.n	405348 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40532e:	e007      	b.n	405340 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  405330:	68bb      	ldr	r3, [r7, #8]
  405332:	1d1a      	adds	r2, r3, #4
  405334:	60ba      	str	r2, [r7, #8]
  405336:	68fa      	ldr	r2, [r7, #12]
  405338:	1d11      	adds	r1, r2, #4
  40533a:	60f9      	str	r1, [r7, #12]
  40533c:	6812      	ldr	r2, [r2, #0]
  40533e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  405340:	68bb      	ldr	r3, [r7, #8]
  405342:	4a17      	ldr	r2, [pc, #92]	; (4053a0 <Reset_Handler+0x88>)
  405344:	4293      	cmp	r3, r2
  405346:	d3f3      	bcc.n	405330 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  405348:	4b16      	ldr	r3, [pc, #88]	; (4053a4 <Reset_Handler+0x8c>)
  40534a:	60bb      	str	r3, [r7, #8]
  40534c:	e004      	b.n	405358 <Reset_Handler+0x40>
                *pDest++ = 0;
  40534e:	68bb      	ldr	r3, [r7, #8]
  405350:	1d1a      	adds	r2, r3, #4
  405352:	60ba      	str	r2, [r7, #8]
  405354:	2200      	movs	r2, #0
  405356:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  405358:	68bb      	ldr	r3, [r7, #8]
  40535a:	4a13      	ldr	r2, [pc, #76]	; (4053a8 <Reset_Handler+0x90>)
  40535c:	4293      	cmp	r3, r2
  40535e:	d3f6      	bcc.n	40534e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  405360:	4b12      	ldr	r3, [pc, #72]	; (4053ac <Reset_Handler+0x94>)
  405362:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  405364:	4a12      	ldr	r2, [pc, #72]	; (4053b0 <Reset_Handler+0x98>)
  405366:	68fb      	ldr	r3, [r7, #12]
  405368:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40536c:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  40536e:	4b11      	ldr	r3, [pc, #68]	; (4053b4 <Reset_Handler+0x9c>)
  405370:	4798      	blx	r3
  405372:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  405374:	4a10      	ldr	r2, [pc, #64]	; (4053b8 <Reset_Handler+0xa0>)
  405376:	4b10      	ldr	r3, [pc, #64]	; (4053b8 <Reset_Handler+0xa0>)
  405378:	681b      	ldr	r3, [r3, #0]
  40537a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40537e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  405380:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405384:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  405388:	6878      	ldr	r0, [r7, #4]
  40538a:	4b0c      	ldr	r3, [pc, #48]	; (4053bc <Reset_Handler+0xa4>)
  40538c:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  40538e:	4b0c      	ldr	r3, [pc, #48]	; (4053c0 <Reset_Handler+0xa8>)
  405390:	4798      	blx	r3

        /* Branch to main function */
        main();
  405392:	4b0c      	ldr	r3, [pc, #48]	; (4053c4 <Reset_Handler+0xac>)
  405394:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  405396:	e7fe      	b.n	405396 <Reset_Handler+0x7e>
  405398:	00409208 	.word	0x00409208
  40539c:	20400000 	.word	0x20400000
  4053a0:	204009e8 	.word	0x204009e8
  4053a4:	204009e8 	.word	0x204009e8
  4053a8:	20415be0 	.word	0x20415be0
  4053ac:	00400000 	.word	0x00400000
  4053b0:	e000ed00 	.word	0xe000ed00
  4053b4:	00405291 	.word	0x00405291
  4053b8:	e000ed88 	.word	0xe000ed88
  4053bc:	004052e9 	.word	0x004052e9
  4053c0:	00405e8d 	.word	0x00405e8d
  4053c4:	004036ed 	.word	0x004036ed

004053c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4053c8:	b480      	push	{r7}
  4053ca:	af00      	add	r7, sp, #0
        while (1) {
  4053cc:	e7fe      	b.n	4053cc <Dummy_Handler+0x4>
	...

004053d0 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  4053d0:	b480      	push	{r7}
  4053d2:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4053d4:	4b52      	ldr	r3, [pc, #328]	; (405520 <SystemCoreClockUpdate+0x150>)
  4053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4053d8:	f003 0303 	and.w	r3, r3, #3
  4053dc:	2b01      	cmp	r3, #1
  4053de:	d014      	beq.n	40540a <SystemCoreClockUpdate+0x3a>
  4053e0:	2b01      	cmp	r3, #1
  4053e2:	d302      	bcc.n	4053ea <SystemCoreClockUpdate+0x1a>
  4053e4:	2b02      	cmp	r3, #2
  4053e6:	d038      	beq.n	40545a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  4053e8:	e07a      	b.n	4054e0 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4053ea:	4b4e      	ldr	r3, [pc, #312]	; (405524 <SystemCoreClockUpdate+0x154>)
  4053ec:	695b      	ldr	r3, [r3, #20]
  4053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4053f2:	2b00      	cmp	r3, #0
  4053f4:	d004      	beq.n	405400 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4053f6:	4b4c      	ldr	r3, [pc, #304]	; (405528 <SystemCoreClockUpdate+0x158>)
  4053f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4053fc:	601a      	str	r2, [r3, #0]
    break;
  4053fe:	e06f      	b.n	4054e0 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405400:	4b49      	ldr	r3, [pc, #292]	; (405528 <SystemCoreClockUpdate+0x158>)
  405402:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  405406:	601a      	str	r2, [r3, #0]
    break;
  405408:	e06a      	b.n	4054e0 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40540a:	4b45      	ldr	r3, [pc, #276]	; (405520 <SystemCoreClockUpdate+0x150>)
  40540c:	6a1b      	ldr	r3, [r3, #32]
  40540e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  405412:	2b00      	cmp	r3, #0
  405414:	d003      	beq.n	40541e <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  405416:	4b44      	ldr	r3, [pc, #272]	; (405528 <SystemCoreClockUpdate+0x158>)
  405418:	4a44      	ldr	r2, [pc, #272]	; (40552c <SystemCoreClockUpdate+0x15c>)
  40541a:	601a      	str	r2, [r3, #0]
    break;
  40541c:	e060      	b.n	4054e0 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40541e:	4b42      	ldr	r3, [pc, #264]	; (405528 <SystemCoreClockUpdate+0x158>)
  405420:	4a43      	ldr	r2, [pc, #268]	; (405530 <SystemCoreClockUpdate+0x160>)
  405422:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405424:	4b3e      	ldr	r3, [pc, #248]	; (405520 <SystemCoreClockUpdate+0x150>)
  405426:	6a1b      	ldr	r3, [r3, #32]
  405428:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40542c:	2b10      	cmp	r3, #16
  40542e:	d004      	beq.n	40543a <SystemCoreClockUpdate+0x6a>
  405430:	2b20      	cmp	r3, #32
  405432:	d008      	beq.n	405446 <SystemCoreClockUpdate+0x76>
  405434:	2b00      	cmp	r3, #0
  405436:	d00e      	beq.n	405456 <SystemCoreClockUpdate+0x86>
          break;
  405438:	e00e      	b.n	405458 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  40543a:	4b3b      	ldr	r3, [pc, #236]	; (405528 <SystemCoreClockUpdate+0x158>)
  40543c:	681b      	ldr	r3, [r3, #0]
  40543e:	005b      	lsls	r3, r3, #1
  405440:	4a39      	ldr	r2, [pc, #228]	; (405528 <SystemCoreClockUpdate+0x158>)
  405442:	6013      	str	r3, [r2, #0]
          break;
  405444:	e008      	b.n	405458 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  405446:	4b38      	ldr	r3, [pc, #224]	; (405528 <SystemCoreClockUpdate+0x158>)
  405448:	681a      	ldr	r2, [r3, #0]
  40544a:	4613      	mov	r3, r2
  40544c:	005b      	lsls	r3, r3, #1
  40544e:	4413      	add	r3, r2
  405450:	4a35      	ldr	r2, [pc, #212]	; (405528 <SystemCoreClockUpdate+0x158>)
  405452:	6013      	str	r3, [r2, #0]
          break;
  405454:	e000      	b.n	405458 <SystemCoreClockUpdate+0x88>
          break;
  405456:	bf00      	nop
    break;
  405458:	e042      	b.n	4054e0 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40545a:	4b31      	ldr	r3, [pc, #196]	; (405520 <SystemCoreClockUpdate+0x150>)
  40545c:	6a1b      	ldr	r3, [r3, #32]
  40545e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  405462:	2b00      	cmp	r3, #0
  405464:	d003      	beq.n	40546e <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  405466:	4b30      	ldr	r3, [pc, #192]	; (405528 <SystemCoreClockUpdate+0x158>)
  405468:	4a30      	ldr	r2, [pc, #192]	; (40552c <SystemCoreClockUpdate+0x15c>)
  40546a:	601a      	str	r2, [r3, #0]
  40546c:	e01c      	b.n	4054a8 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40546e:	4b2e      	ldr	r3, [pc, #184]	; (405528 <SystemCoreClockUpdate+0x158>)
  405470:	4a2f      	ldr	r2, [pc, #188]	; (405530 <SystemCoreClockUpdate+0x160>)
  405472:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405474:	4b2a      	ldr	r3, [pc, #168]	; (405520 <SystemCoreClockUpdate+0x150>)
  405476:	6a1b      	ldr	r3, [r3, #32]
  405478:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40547c:	2b10      	cmp	r3, #16
  40547e:	d004      	beq.n	40548a <SystemCoreClockUpdate+0xba>
  405480:	2b20      	cmp	r3, #32
  405482:	d008      	beq.n	405496 <SystemCoreClockUpdate+0xc6>
  405484:	2b00      	cmp	r3, #0
  405486:	d00e      	beq.n	4054a6 <SystemCoreClockUpdate+0xd6>
          break;
  405488:	e00e      	b.n	4054a8 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  40548a:	4b27      	ldr	r3, [pc, #156]	; (405528 <SystemCoreClockUpdate+0x158>)
  40548c:	681b      	ldr	r3, [r3, #0]
  40548e:	005b      	lsls	r3, r3, #1
  405490:	4a25      	ldr	r2, [pc, #148]	; (405528 <SystemCoreClockUpdate+0x158>)
  405492:	6013      	str	r3, [r2, #0]
          break;
  405494:	e008      	b.n	4054a8 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  405496:	4b24      	ldr	r3, [pc, #144]	; (405528 <SystemCoreClockUpdate+0x158>)
  405498:	681a      	ldr	r2, [r3, #0]
  40549a:	4613      	mov	r3, r2
  40549c:	005b      	lsls	r3, r3, #1
  40549e:	4413      	add	r3, r2
  4054a0:	4a21      	ldr	r2, [pc, #132]	; (405528 <SystemCoreClockUpdate+0x158>)
  4054a2:	6013      	str	r3, [r2, #0]
          break;
  4054a4:	e000      	b.n	4054a8 <SystemCoreClockUpdate+0xd8>
          break;
  4054a6:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4054a8:	4b1d      	ldr	r3, [pc, #116]	; (405520 <SystemCoreClockUpdate+0x150>)
  4054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4054ac:	f003 0303 	and.w	r3, r3, #3
  4054b0:	2b02      	cmp	r3, #2
  4054b2:	d114      	bne.n	4054de <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4054b4:	4b1a      	ldr	r3, [pc, #104]	; (405520 <SystemCoreClockUpdate+0x150>)
  4054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4054b8:	0c1b      	lsrs	r3, r3, #16
  4054ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
  4054be:	3301      	adds	r3, #1
  4054c0:	4a19      	ldr	r2, [pc, #100]	; (405528 <SystemCoreClockUpdate+0x158>)
  4054c2:	6812      	ldr	r2, [r2, #0]
  4054c4:	fb02 f303 	mul.w	r3, r2, r3
  4054c8:	4a17      	ldr	r2, [pc, #92]	; (405528 <SystemCoreClockUpdate+0x158>)
  4054ca:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4054cc:	4b14      	ldr	r3, [pc, #80]	; (405520 <SystemCoreClockUpdate+0x150>)
  4054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4054d0:	b2db      	uxtb	r3, r3
  4054d2:	4a15      	ldr	r2, [pc, #84]	; (405528 <SystemCoreClockUpdate+0x158>)
  4054d4:	6812      	ldr	r2, [r2, #0]
  4054d6:	fbb2 f3f3 	udiv	r3, r2, r3
  4054da:	4a13      	ldr	r2, [pc, #76]	; (405528 <SystemCoreClockUpdate+0x158>)
  4054dc:	6013      	str	r3, [r2, #0]
    break;
  4054de:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4054e0:	4b0f      	ldr	r3, [pc, #60]	; (405520 <SystemCoreClockUpdate+0x150>)
  4054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4054e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4054e8:	2b70      	cmp	r3, #112	; 0x70
  4054ea:	d108      	bne.n	4054fe <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  4054ec:	4b0e      	ldr	r3, [pc, #56]	; (405528 <SystemCoreClockUpdate+0x158>)
  4054ee:	681b      	ldr	r3, [r3, #0]
  4054f0:	4a10      	ldr	r2, [pc, #64]	; (405534 <SystemCoreClockUpdate+0x164>)
  4054f2:	fba2 2303 	umull	r2, r3, r2, r3
  4054f6:	085b      	lsrs	r3, r3, #1
  4054f8:	4a0b      	ldr	r2, [pc, #44]	; (405528 <SystemCoreClockUpdate+0x158>)
  4054fa:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  4054fc:	e00a      	b.n	405514 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4054fe:	4b08      	ldr	r3, [pc, #32]	; (405520 <SystemCoreClockUpdate+0x150>)
  405500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405502:	091b      	lsrs	r3, r3, #4
  405504:	f003 0307 	and.w	r3, r3, #7
  405508:	4a07      	ldr	r2, [pc, #28]	; (405528 <SystemCoreClockUpdate+0x158>)
  40550a:	6812      	ldr	r2, [r2, #0]
  40550c:	fa22 f303 	lsr.w	r3, r2, r3
  405510:	4a05      	ldr	r2, [pc, #20]	; (405528 <SystemCoreClockUpdate+0x158>)
  405512:	6013      	str	r3, [r2, #0]
}
  405514:	bf00      	nop
  405516:	46bd      	mov	sp, r7
  405518:	f85d 7b04 	ldr.w	r7, [sp], #4
  40551c:	4770      	bx	lr
  40551e:	bf00      	nop
  405520:	400e0600 	.word	0x400e0600
  405524:	400e1810 	.word	0x400e1810
  405528:	20400038 	.word	0x20400038
  40552c:	00b71b00 	.word	0x00b71b00
  405530:	003d0900 	.word	0x003d0900
  405534:	aaaaaaab 	.word	0xaaaaaaab

00405538 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  405538:	b480      	push	{r7}
  40553a:	b083      	sub	sp, #12
  40553c:	af00      	add	r7, sp, #0
  40553e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  405540:	687b      	ldr	r3, [r7, #4]
  405542:	4a1d      	ldr	r2, [pc, #116]	; (4055b8 <system_init_flash+0x80>)
  405544:	4293      	cmp	r3, r2
  405546:	d804      	bhi.n	405552 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  405548:	4b1c      	ldr	r3, [pc, #112]	; (4055bc <system_init_flash+0x84>)
  40554a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40554e:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  405550:	e02b      	b.n	4055aa <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  405552:	687b      	ldr	r3, [r7, #4]
  405554:	4a1a      	ldr	r2, [pc, #104]	; (4055c0 <system_init_flash+0x88>)
  405556:	4293      	cmp	r3, r2
  405558:	d803      	bhi.n	405562 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40555a:	4b18      	ldr	r3, [pc, #96]	; (4055bc <system_init_flash+0x84>)
  40555c:	4a19      	ldr	r2, [pc, #100]	; (4055c4 <system_init_flash+0x8c>)
  40555e:	601a      	str	r2, [r3, #0]
}
  405560:	e023      	b.n	4055aa <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  405562:	687b      	ldr	r3, [r7, #4]
  405564:	4a18      	ldr	r2, [pc, #96]	; (4055c8 <system_init_flash+0x90>)
  405566:	4293      	cmp	r3, r2
  405568:	d803      	bhi.n	405572 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40556a:	4b14      	ldr	r3, [pc, #80]	; (4055bc <system_init_flash+0x84>)
  40556c:	4a17      	ldr	r2, [pc, #92]	; (4055cc <system_init_flash+0x94>)
  40556e:	601a      	str	r2, [r3, #0]
}
  405570:	e01b      	b.n	4055aa <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  405572:	687b      	ldr	r3, [r7, #4]
  405574:	4a16      	ldr	r2, [pc, #88]	; (4055d0 <system_init_flash+0x98>)
  405576:	4293      	cmp	r3, r2
  405578:	d803      	bhi.n	405582 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40557a:	4b10      	ldr	r3, [pc, #64]	; (4055bc <system_init_flash+0x84>)
  40557c:	4a15      	ldr	r2, [pc, #84]	; (4055d4 <system_init_flash+0x9c>)
  40557e:	601a      	str	r2, [r3, #0]
}
  405580:	e013      	b.n	4055aa <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  405582:	687b      	ldr	r3, [r7, #4]
  405584:	4a14      	ldr	r2, [pc, #80]	; (4055d8 <system_init_flash+0xa0>)
  405586:	4293      	cmp	r3, r2
  405588:	d804      	bhi.n	405594 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40558a:	4b0c      	ldr	r3, [pc, #48]	; (4055bc <system_init_flash+0x84>)
  40558c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  405590:	601a      	str	r2, [r3, #0]
}
  405592:	e00a      	b.n	4055aa <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  405594:	687b      	ldr	r3, [r7, #4]
  405596:	4a11      	ldr	r2, [pc, #68]	; (4055dc <system_init_flash+0xa4>)
  405598:	4293      	cmp	r3, r2
  40559a:	d803      	bhi.n	4055a4 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40559c:	4b07      	ldr	r3, [pc, #28]	; (4055bc <system_init_flash+0x84>)
  40559e:	4a10      	ldr	r2, [pc, #64]	; (4055e0 <system_init_flash+0xa8>)
  4055a0:	601a      	str	r2, [r3, #0]
}
  4055a2:	e002      	b.n	4055aa <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4055a4:	4b05      	ldr	r3, [pc, #20]	; (4055bc <system_init_flash+0x84>)
  4055a6:	4a0f      	ldr	r2, [pc, #60]	; (4055e4 <system_init_flash+0xac>)
  4055a8:	601a      	str	r2, [r3, #0]
}
  4055aa:	bf00      	nop
  4055ac:	370c      	adds	r7, #12
  4055ae:	46bd      	mov	sp, r7
  4055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4055b4:	4770      	bx	lr
  4055b6:	bf00      	nop
  4055b8:	015ef3bf 	.word	0x015ef3bf
  4055bc:	400e0c00 	.word	0x400e0c00
  4055c0:	02bde77f 	.word	0x02bde77f
  4055c4:	04000100 	.word	0x04000100
  4055c8:	041cdb3f 	.word	0x041cdb3f
  4055cc:	04000200 	.word	0x04000200
  4055d0:	057bceff 	.word	0x057bceff
  4055d4:	04000300 	.word	0x04000300
  4055d8:	06dac2bf 	.word	0x06dac2bf
  4055dc:	0839b67f 	.word	0x0839b67f
  4055e0:	04000500 	.word	0x04000500
  4055e4:	04000600 	.word	0x04000600

004055e8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4055e8:	b480      	push	{r7}
  4055ea:	b085      	sub	sp, #20
  4055ec:	af00      	add	r7, sp, #0
  4055ee:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4055f0:	4b10      	ldr	r3, [pc, #64]	; (405634 <_sbrk+0x4c>)
  4055f2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4055f4:	4b10      	ldr	r3, [pc, #64]	; (405638 <_sbrk+0x50>)
  4055f6:	681b      	ldr	r3, [r3, #0]
  4055f8:	2b00      	cmp	r3, #0
  4055fa:	d102      	bne.n	405602 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4055fc:	4b0e      	ldr	r3, [pc, #56]	; (405638 <_sbrk+0x50>)
  4055fe:	4a0f      	ldr	r2, [pc, #60]	; (40563c <_sbrk+0x54>)
  405600:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  405602:	4b0d      	ldr	r3, [pc, #52]	; (405638 <_sbrk+0x50>)
  405604:	681b      	ldr	r3, [r3, #0]
  405606:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  405608:	68ba      	ldr	r2, [r7, #8]
  40560a:	687b      	ldr	r3, [r7, #4]
  40560c:	441a      	add	r2, r3
  40560e:	68fb      	ldr	r3, [r7, #12]
  405610:	429a      	cmp	r2, r3
  405612:	dd02      	ble.n	40561a <_sbrk+0x32>
		return (caddr_t) -1;	
  405614:	f04f 33ff 	mov.w	r3, #4294967295
  405618:	e006      	b.n	405628 <_sbrk+0x40>
	}

	heap += incr;
  40561a:	4b07      	ldr	r3, [pc, #28]	; (405638 <_sbrk+0x50>)
  40561c:	681a      	ldr	r2, [r3, #0]
  40561e:	687b      	ldr	r3, [r7, #4]
  405620:	4413      	add	r3, r2
  405622:	4a05      	ldr	r2, [pc, #20]	; (405638 <_sbrk+0x50>)
  405624:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  405626:	68bb      	ldr	r3, [r7, #8]
}
  405628:	4618      	mov	r0, r3
  40562a:	3714      	adds	r7, #20
  40562c:	46bd      	mov	sp, r7
  40562e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405632:	4770      	bx	lr
  405634:	2045fffc 	.word	0x2045fffc
  405638:	2040aef0 	.word	0x2040aef0
  40563c:	20417de0 	.word	0x20417de0

00405640 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  405640:	b480      	push	{r7}
  405642:	b083      	sub	sp, #12
  405644:	af00      	add	r7, sp, #0
  405646:	6078      	str	r0, [r7, #4]
	return -1;
  405648:	f04f 33ff 	mov.w	r3, #4294967295
}
  40564c:	4618      	mov	r0, r3
  40564e:	370c      	adds	r7, #12
  405650:	46bd      	mov	sp, r7
  405652:	f85d 7b04 	ldr.w	r7, [sp], #4
  405656:	4770      	bx	lr

00405658 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  405658:	b480      	push	{r7}
  40565a:	b083      	sub	sp, #12
  40565c:	af00      	add	r7, sp, #0
  40565e:	6078      	str	r0, [r7, #4]
  405660:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  405662:	683b      	ldr	r3, [r7, #0]
  405664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  405668:	605a      	str	r2, [r3, #4]

	return 0;
  40566a:	2300      	movs	r3, #0
}
  40566c:	4618      	mov	r0, r3
  40566e:	370c      	adds	r7, #12
  405670:	46bd      	mov	sp, r7
  405672:	f85d 7b04 	ldr.w	r7, [sp], #4
  405676:	4770      	bx	lr

00405678 <_isatty>:

extern int _isatty(int file)
{
  405678:	b480      	push	{r7}
  40567a:	b083      	sub	sp, #12
  40567c:	af00      	add	r7, sp, #0
  40567e:	6078      	str	r0, [r7, #4]
	return 1;
  405680:	2301      	movs	r3, #1
}
  405682:	4618      	mov	r0, r3
  405684:	370c      	adds	r7, #12
  405686:	46bd      	mov	sp, r7
  405688:	f85d 7b04 	ldr.w	r7, [sp], #4
  40568c:	4770      	bx	lr

0040568e <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  40568e:	b480      	push	{r7}
  405690:	b085      	sub	sp, #20
  405692:	af00      	add	r7, sp, #0
  405694:	60f8      	str	r0, [r7, #12]
  405696:	60b9      	str	r1, [r7, #8]
  405698:	607a      	str	r2, [r7, #4]
	return 0;
  40569a:	2300      	movs	r3, #0
}
  40569c:	4618      	mov	r0, r3
  40569e:	3714      	adds	r7, #20
  4056a0:	46bd      	mov	sp, r7
  4056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056a6:	4770      	bx	lr

004056a8 <__aeabi_drsub>:
  4056a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4056ac:	e002      	b.n	4056b4 <__adddf3>
  4056ae:	bf00      	nop

004056b0 <__aeabi_dsub>:
  4056b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004056b4 <__adddf3>:
  4056b4:	b530      	push	{r4, r5, lr}
  4056b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4056ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4056be:	ea94 0f05 	teq	r4, r5
  4056c2:	bf08      	it	eq
  4056c4:	ea90 0f02 	teqeq	r0, r2
  4056c8:	bf1f      	itttt	ne
  4056ca:	ea54 0c00 	orrsne.w	ip, r4, r0
  4056ce:	ea55 0c02 	orrsne.w	ip, r5, r2
  4056d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4056d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4056da:	f000 80e2 	beq.w	4058a2 <__adddf3+0x1ee>
  4056de:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4056e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4056e6:	bfb8      	it	lt
  4056e8:	426d      	neglt	r5, r5
  4056ea:	dd0c      	ble.n	405706 <__adddf3+0x52>
  4056ec:	442c      	add	r4, r5
  4056ee:	ea80 0202 	eor.w	r2, r0, r2
  4056f2:	ea81 0303 	eor.w	r3, r1, r3
  4056f6:	ea82 0000 	eor.w	r0, r2, r0
  4056fa:	ea83 0101 	eor.w	r1, r3, r1
  4056fe:	ea80 0202 	eor.w	r2, r0, r2
  405702:	ea81 0303 	eor.w	r3, r1, r3
  405706:	2d36      	cmp	r5, #54	; 0x36
  405708:	bf88      	it	hi
  40570a:	bd30      	pophi	{r4, r5, pc}
  40570c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405710:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405714:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405718:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40571c:	d002      	beq.n	405724 <__adddf3+0x70>
  40571e:	4240      	negs	r0, r0
  405720:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405724:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405728:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40572c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405730:	d002      	beq.n	405738 <__adddf3+0x84>
  405732:	4252      	negs	r2, r2
  405734:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405738:	ea94 0f05 	teq	r4, r5
  40573c:	f000 80a7 	beq.w	40588e <__adddf3+0x1da>
  405740:	f1a4 0401 	sub.w	r4, r4, #1
  405744:	f1d5 0e20 	rsbs	lr, r5, #32
  405748:	db0d      	blt.n	405766 <__adddf3+0xb2>
  40574a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40574e:	fa22 f205 	lsr.w	r2, r2, r5
  405752:	1880      	adds	r0, r0, r2
  405754:	f141 0100 	adc.w	r1, r1, #0
  405758:	fa03 f20e 	lsl.w	r2, r3, lr
  40575c:	1880      	adds	r0, r0, r2
  40575e:	fa43 f305 	asr.w	r3, r3, r5
  405762:	4159      	adcs	r1, r3
  405764:	e00e      	b.n	405784 <__adddf3+0xd0>
  405766:	f1a5 0520 	sub.w	r5, r5, #32
  40576a:	f10e 0e20 	add.w	lr, lr, #32
  40576e:	2a01      	cmp	r2, #1
  405770:	fa03 fc0e 	lsl.w	ip, r3, lr
  405774:	bf28      	it	cs
  405776:	f04c 0c02 	orrcs.w	ip, ip, #2
  40577a:	fa43 f305 	asr.w	r3, r3, r5
  40577e:	18c0      	adds	r0, r0, r3
  405780:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405788:	d507      	bpl.n	40579a <__adddf3+0xe6>
  40578a:	f04f 0e00 	mov.w	lr, #0
  40578e:	f1dc 0c00 	rsbs	ip, ip, #0
  405792:	eb7e 0000 	sbcs.w	r0, lr, r0
  405796:	eb6e 0101 	sbc.w	r1, lr, r1
  40579a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40579e:	d31b      	bcc.n	4057d8 <__adddf3+0x124>
  4057a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4057a4:	d30c      	bcc.n	4057c0 <__adddf3+0x10c>
  4057a6:	0849      	lsrs	r1, r1, #1
  4057a8:	ea5f 0030 	movs.w	r0, r0, rrx
  4057ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4057b0:	f104 0401 	add.w	r4, r4, #1
  4057b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4057b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4057bc:	f080 809a 	bcs.w	4058f4 <__adddf3+0x240>
  4057c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4057c4:	bf08      	it	eq
  4057c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4057ca:	f150 0000 	adcs.w	r0, r0, #0
  4057ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4057d2:	ea41 0105 	orr.w	r1, r1, r5
  4057d6:	bd30      	pop	{r4, r5, pc}
  4057d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4057dc:	4140      	adcs	r0, r0
  4057de:	eb41 0101 	adc.w	r1, r1, r1
  4057e2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4057e6:	f1a4 0401 	sub.w	r4, r4, #1
  4057ea:	d1e9      	bne.n	4057c0 <__adddf3+0x10c>
  4057ec:	f091 0f00 	teq	r1, #0
  4057f0:	bf04      	itt	eq
  4057f2:	4601      	moveq	r1, r0
  4057f4:	2000      	moveq	r0, #0
  4057f6:	fab1 f381 	clz	r3, r1
  4057fa:	bf08      	it	eq
  4057fc:	3320      	addeq	r3, #32
  4057fe:	f1a3 030b 	sub.w	r3, r3, #11
  405802:	f1b3 0220 	subs.w	r2, r3, #32
  405806:	da0c      	bge.n	405822 <__adddf3+0x16e>
  405808:	320c      	adds	r2, #12
  40580a:	dd08      	ble.n	40581e <__adddf3+0x16a>
  40580c:	f102 0c14 	add.w	ip, r2, #20
  405810:	f1c2 020c 	rsb	r2, r2, #12
  405814:	fa01 f00c 	lsl.w	r0, r1, ip
  405818:	fa21 f102 	lsr.w	r1, r1, r2
  40581c:	e00c      	b.n	405838 <__adddf3+0x184>
  40581e:	f102 0214 	add.w	r2, r2, #20
  405822:	bfd8      	it	le
  405824:	f1c2 0c20 	rsble	ip, r2, #32
  405828:	fa01 f102 	lsl.w	r1, r1, r2
  40582c:	fa20 fc0c 	lsr.w	ip, r0, ip
  405830:	bfdc      	itt	le
  405832:	ea41 010c 	orrle.w	r1, r1, ip
  405836:	4090      	lslle	r0, r2
  405838:	1ae4      	subs	r4, r4, r3
  40583a:	bfa2      	ittt	ge
  40583c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405840:	4329      	orrge	r1, r5
  405842:	bd30      	popge	{r4, r5, pc}
  405844:	ea6f 0404 	mvn.w	r4, r4
  405848:	3c1f      	subs	r4, #31
  40584a:	da1c      	bge.n	405886 <__adddf3+0x1d2>
  40584c:	340c      	adds	r4, #12
  40584e:	dc0e      	bgt.n	40586e <__adddf3+0x1ba>
  405850:	f104 0414 	add.w	r4, r4, #20
  405854:	f1c4 0220 	rsb	r2, r4, #32
  405858:	fa20 f004 	lsr.w	r0, r0, r4
  40585c:	fa01 f302 	lsl.w	r3, r1, r2
  405860:	ea40 0003 	orr.w	r0, r0, r3
  405864:	fa21 f304 	lsr.w	r3, r1, r4
  405868:	ea45 0103 	orr.w	r1, r5, r3
  40586c:	bd30      	pop	{r4, r5, pc}
  40586e:	f1c4 040c 	rsb	r4, r4, #12
  405872:	f1c4 0220 	rsb	r2, r4, #32
  405876:	fa20 f002 	lsr.w	r0, r0, r2
  40587a:	fa01 f304 	lsl.w	r3, r1, r4
  40587e:	ea40 0003 	orr.w	r0, r0, r3
  405882:	4629      	mov	r1, r5
  405884:	bd30      	pop	{r4, r5, pc}
  405886:	fa21 f004 	lsr.w	r0, r1, r4
  40588a:	4629      	mov	r1, r5
  40588c:	bd30      	pop	{r4, r5, pc}
  40588e:	f094 0f00 	teq	r4, #0
  405892:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405896:	bf06      	itte	eq
  405898:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40589c:	3401      	addeq	r4, #1
  40589e:	3d01      	subne	r5, #1
  4058a0:	e74e      	b.n	405740 <__adddf3+0x8c>
  4058a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4058a6:	bf18      	it	ne
  4058a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4058ac:	d029      	beq.n	405902 <__adddf3+0x24e>
  4058ae:	ea94 0f05 	teq	r4, r5
  4058b2:	bf08      	it	eq
  4058b4:	ea90 0f02 	teqeq	r0, r2
  4058b8:	d005      	beq.n	4058c6 <__adddf3+0x212>
  4058ba:	ea54 0c00 	orrs.w	ip, r4, r0
  4058be:	bf04      	itt	eq
  4058c0:	4619      	moveq	r1, r3
  4058c2:	4610      	moveq	r0, r2
  4058c4:	bd30      	pop	{r4, r5, pc}
  4058c6:	ea91 0f03 	teq	r1, r3
  4058ca:	bf1e      	ittt	ne
  4058cc:	2100      	movne	r1, #0
  4058ce:	2000      	movne	r0, #0
  4058d0:	bd30      	popne	{r4, r5, pc}
  4058d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4058d6:	d105      	bne.n	4058e4 <__adddf3+0x230>
  4058d8:	0040      	lsls	r0, r0, #1
  4058da:	4149      	adcs	r1, r1
  4058dc:	bf28      	it	cs
  4058de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4058e2:	bd30      	pop	{r4, r5, pc}
  4058e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4058e8:	bf3c      	itt	cc
  4058ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4058ee:	bd30      	popcc	{r4, r5, pc}
  4058f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4058f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4058f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4058fc:	f04f 0000 	mov.w	r0, #0
  405900:	bd30      	pop	{r4, r5, pc}
  405902:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405906:	bf1a      	itte	ne
  405908:	4619      	movne	r1, r3
  40590a:	4610      	movne	r0, r2
  40590c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405910:	bf1c      	itt	ne
  405912:	460b      	movne	r3, r1
  405914:	4602      	movne	r2, r0
  405916:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40591a:	bf06      	itte	eq
  40591c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405920:	ea91 0f03 	teqeq	r1, r3
  405924:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405928:	bd30      	pop	{r4, r5, pc}
  40592a:	bf00      	nop

0040592c <__aeabi_ui2d>:
  40592c:	f090 0f00 	teq	r0, #0
  405930:	bf04      	itt	eq
  405932:	2100      	moveq	r1, #0
  405934:	4770      	bxeq	lr
  405936:	b530      	push	{r4, r5, lr}
  405938:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40593c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405940:	f04f 0500 	mov.w	r5, #0
  405944:	f04f 0100 	mov.w	r1, #0
  405948:	e750      	b.n	4057ec <__adddf3+0x138>
  40594a:	bf00      	nop

0040594c <__aeabi_i2d>:
  40594c:	f090 0f00 	teq	r0, #0
  405950:	bf04      	itt	eq
  405952:	2100      	moveq	r1, #0
  405954:	4770      	bxeq	lr
  405956:	b530      	push	{r4, r5, lr}
  405958:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40595c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405960:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405964:	bf48      	it	mi
  405966:	4240      	negmi	r0, r0
  405968:	f04f 0100 	mov.w	r1, #0
  40596c:	e73e      	b.n	4057ec <__adddf3+0x138>
  40596e:	bf00      	nop

00405970 <__aeabi_f2d>:
  405970:	0042      	lsls	r2, r0, #1
  405972:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405976:	ea4f 0131 	mov.w	r1, r1, rrx
  40597a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40597e:	bf1f      	itttt	ne
  405980:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405984:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405988:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40598c:	4770      	bxne	lr
  40598e:	f092 0f00 	teq	r2, #0
  405992:	bf14      	ite	ne
  405994:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405998:	4770      	bxeq	lr
  40599a:	b530      	push	{r4, r5, lr}
  40599c:	f44f 7460 	mov.w	r4, #896	; 0x380
  4059a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4059a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4059a8:	e720      	b.n	4057ec <__adddf3+0x138>
  4059aa:	bf00      	nop

004059ac <__aeabi_ul2d>:
  4059ac:	ea50 0201 	orrs.w	r2, r0, r1
  4059b0:	bf08      	it	eq
  4059b2:	4770      	bxeq	lr
  4059b4:	b530      	push	{r4, r5, lr}
  4059b6:	f04f 0500 	mov.w	r5, #0
  4059ba:	e00a      	b.n	4059d2 <__aeabi_l2d+0x16>

004059bc <__aeabi_l2d>:
  4059bc:	ea50 0201 	orrs.w	r2, r0, r1
  4059c0:	bf08      	it	eq
  4059c2:	4770      	bxeq	lr
  4059c4:	b530      	push	{r4, r5, lr}
  4059c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4059ca:	d502      	bpl.n	4059d2 <__aeabi_l2d+0x16>
  4059cc:	4240      	negs	r0, r0
  4059ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4059d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4059d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4059da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4059de:	f43f aedc 	beq.w	40579a <__adddf3+0xe6>
  4059e2:	f04f 0203 	mov.w	r2, #3
  4059e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4059ea:	bf18      	it	ne
  4059ec:	3203      	addne	r2, #3
  4059ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4059f2:	bf18      	it	ne
  4059f4:	3203      	addne	r2, #3
  4059f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4059fa:	f1c2 0320 	rsb	r3, r2, #32
  4059fe:	fa00 fc03 	lsl.w	ip, r0, r3
  405a02:	fa20 f002 	lsr.w	r0, r0, r2
  405a06:	fa01 fe03 	lsl.w	lr, r1, r3
  405a0a:	ea40 000e 	orr.w	r0, r0, lr
  405a0e:	fa21 f102 	lsr.w	r1, r1, r2
  405a12:	4414      	add	r4, r2
  405a14:	e6c1      	b.n	40579a <__adddf3+0xe6>
  405a16:	bf00      	nop

00405a18 <__aeabi_dmul>:
  405a18:	b570      	push	{r4, r5, r6, lr}
  405a1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405a1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405a22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405a26:	bf1d      	ittte	ne
  405a28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405a2c:	ea94 0f0c 	teqne	r4, ip
  405a30:	ea95 0f0c 	teqne	r5, ip
  405a34:	f000 f8de 	bleq	405bf4 <__aeabi_dmul+0x1dc>
  405a38:	442c      	add	r4, r5
  405a3a:	ea81 0603 	eor.w	r6, r1, r3
  405a3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405a42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405a46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405a4a:	bf18      	it	ne
  405a4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405a50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405a58:	d038      	beq.n	405acc <__aeabi_dmul+0xb4>
  405a5a:	fba0 ce02 	umull	ip, lr, r0, r2
  405a5e:	f04f 0500 	mov.w	r5, #0
  405a62:	fbe1 e502 	umlal	lr, r5, r1, r2
  405a66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405a6a:	fbe0 e503 	umlal	lr, r5, r0, r3
  405a6e:	f04f 0600 	mov.w	r6, #0
  405a72:	fbe1 5603 	umlal	r5, r6, r1, r3
  405a76:	f09c 0f00 	teq	ip, #0
  405a7a:	bf18      	it	ne
  405a7c:	f04e 0e01 	orrne.w	lr, lr, #1
  405a80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405a84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405a88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405a8c:	d204      	bcs.n	405a98 <__aeabi_dmul+0x80>
  405a8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405a92:	416d      	adcs	r5, r5
  405a94:	eb46 0606 	adc.w	r6, r6, r6
  405a98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405a9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405aa0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405aa4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405aa8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405aac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405ab0:	bf88      	it	hi
  405ab2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405ab6:	d81e      	bhi.n	405af6 <__aeabi_dmul+0xde>
  405ab8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405abc:	bf08      	it	eq
  405abe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405ac2:	f150 0000 	adcs.w	r0, r0, #0
  405ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405aca:	bd70      	pop	{r4, r5, r6, pc}
  405acc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405ad0:	ea46 0101 	orr.w	r1, r6, r1
  405ad4:	ea40 0002 	orr.w	r0, r0, r2
  405ad8:	ea81 0103 	eor.w	r1, r1, r3
  405adc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405ae0:	bfc2      	ittt	gt
  405ae2:	ebd4 050c 	rsbsgt	r5, r4, ip
  405ae6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405aea:	bd70      	popgt	{r4, r5, r6, pc}
  405aec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405af0:	f04f 0e00 	mov.w	lr, #0
  405af4:	3c01      	subs	r4, #1
  405af6:	f300 80ab 	bgt.w	405c50 <__aeabi_dmul+0x238>
  405afa:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405afe:	bfde      	ittt	le
  405b00:	2000      	movle	r0, #0
  405b02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405b06:	bd70      	pople	{r4, r5, r6, pc}
  405b08:	f1c4 0400 	rsb	r4, r4, #0
  405b0c:	3c20      	subs	r4, #32
  405b0e:	da35      	bge.n	405b7c <__aeabi_dmul+0x164>
  405b10:	340c      	adds	r4, #12
  405b12:	dc1b      	bgt.n	405b4c <__aeabi_dmul+0x134>
  405b14:	f104 0414 	add.w	r4, r4, #20
  405b18:	f1c4 0520 	rsb	r5, r4, #32
  405b1c:	fa00 f305 	lsl.w	r3, r0, r5
  405b20:	fa20 f004 	lsr.w	r0, r0, r4
  405b24:	fa01 f205 	lsl.w	r2, r1, r5
  405b28:	ea40 0002 	orr.w	r0, r0, r2
  405b2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405b30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405b34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405b38:	fa21 f604 	lsr.w	r6, r1, r4
  405b3c:	eb42 0106 	adc.w	r1, r2, r6
  405b40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405b44:	bf08      	it	eq
  405b46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405b4a:	bd70      	pop	{r4, r5, r6, pc}
  405b4c:	f1c4 040c 	rsb	r4, r4, #12
  405b50:	f1c4 0520 	rsb	r5, r4, #32
  405b54:	fa00 f304 	lsl.w	r3, r0, r4
  405b58:	fa20 f005 	lsr.w	r0, r0, r5
  405b5c:	fa01 f204 	lsl.w	r2, r1, r4
  405b60:	ea40 0002 	orr.w	r0, r0, r2
  405b64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405b68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405b6c:	f141 0100 	adc.w	r1, r1, #0
  405b70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405b74:	bf08      	it	eq
  405b76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405b7a:	bd70      	pop	{r4, r5, r6, pc}
  405b7c:	f1c4 0520 	rsb	r5, r4, #32
  405b80:	fa00 f205 	lsl.w	r2, r0, r5
  405b84:	ea4e 0e02 	orr.w	lr, lr, r2
  405b88:	fa20 f304 	lsr.w	r3, r0, r4
  405b8c:	fa01 f205 	lsl.w	r2, r1, r5
  405b90:	ea43 0302 	orr.w	r3, r3, r2
  405b94:	fa21 f004 	lsr.w	r0, r1, r4
  405b98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405b9c:	fa21 f204 	lsr.w	r2, r1, r4
  405ba0:	ea20 0002 	bic.w	r0, r0, r2
  405ba4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405ba8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405bac:	bf08      	it	eq
  405bae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405bb2:	bd70      	pop	{r4, r5, r6, pc}
  405bb4:	f094 0f00 	teq	r4, #0
  405bb8:	d10f      	bne.n	405bda <__aeabi_dmul+0x1c2>
  405bba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405bbe:	0040      	lsls	r0, r0, #1
  405bc0:	eb41 0101 	adc.w	r1, r1, r1
  405bc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405bc8:	bf08      	it	eq
  405bca:	3c01      	subeq	r4, #1
  405bcc:	d0f7      	beq.n	405bbe <__aeabi_dmul+0x1a6>
  405bce:	ea41 0106 	orr.w	r1, r1, r6
  405bd2:	f095 0f00 	teq	r5, #0
  405bd6:	bf18      	it	ne
  405bd8:	4770      	bxne	lr
  405bda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405bde:	0052      	lsls	r2, r2, #1
  405be0:	eb43 0303 	adc.w	r3, r3, r3
  405be4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405be8:	bf08      	it	eq
  405bea:	3d01      	subeq	r5, #1
  405bec:	d0f7      	beq.n	405bde <__aeabi_dmul+0x1c6>
  405bee:	ea43 0306 	orr.w	r3, r3, r6
  405bf2:	4770      	bx	lr
  405bf4:	ea94 0f0c 	teq	r4, ip
  405bf8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405bfc:	bf18      	it	ne
  405bfe:	ea95 0f0c 	teqne	r5, ip
  405c02:	d00c      	beq.n	405c1e <__aeabi_dmul+0x206>
  405c04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405c08:	bf18      	it	ne
  405c0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405c0e:	d1d1      	bne.n	405bb4 <__aeabi_dmul+0x19c>
  405c10:	ea81 0103 	eor.w	r1, r1, r3
  405c14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405c18:	f04f 0000 	mov.w	r0, #0
  405c1c:	bd70      	pop	{r4, r5, r6, pc}
  405c1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405c22:	bf06      	itte	eq
  405c24:	4610      	moveq	r0, r2
  405c26:	4619      	moveq	r1, r3
  405c28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405c2c:	d019      	beq.n	405c62 <__aeabi_dmul+0x24a>
  405c2e:	ea94 0f0c 	teq	r4, ip
  405c32:	d102      	bne.n	405c3a <__aeabi_dmul+0x222>
  405c34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405c38:	d113      	bne.n	405c62 <__aeabi_dmul+0x24a>
  405c3a:	ea95 0f0c 	teq	r5, ip
  405c3e:	d105      	bne.n	405c4c <__aeabi_dmul+0x234>
  405c40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405c44:	bf1c      	itt	ne
  405c46:	4610      	movne	r0, r2
  405c48:	4619      	movne	r1, r3
  405c4a:	d10a      	bne.n	405c62 <__aeabi_dmul+0x24a>
  405c4c:	ea81 0103 	eor.w	r1, r1, r3
  405c50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405c54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405c58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405c5c:	f04f 0000 	mov.w	r0, #0
  405c60:	bd70      	pop	{r4, r5, r6, pc}
  405c62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405c66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405c6a:	bd70      	pop	{r4, r5, r6, pc}

00405c6c <__aeabi_ddiv>:
  405c6c:	b570      	push	{r4, r5, r6, lr}
  405c6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405c72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405c76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405c7a:	bf1d      	ittte	ne
  405c7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405c80:	ea94 0f0c 	teqne	r4, ip
  405c84:	ea95 0f0c 	teqne	r5, ip
  405c88:	f000 f8a7 	bleq	405dda <__aeabi_ddiv+0x16e>
  405c8c:	eba4 0405 	sub.w	r4, r4, r5
  405c90:	ea81 0e03 	eor.w	lr, r1, r3
  405c94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405c98:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405c9c:	f000 8088 	beq.w	405db0 <__aeabi_ddiv+0x144>
  405ca0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405ca4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405ca8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405cac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405cb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405cb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405cb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405cbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405cc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405cc4:	429d      	cmp	r5, r3
  405cc6:	bf08      	it	eq
  405cc8:	4296      	cmpeq	r6, r2
  405cca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405cce:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405cd2:	d202      	bcs.n	405cda <__aeabi_ddiv+0x6e>
  405cd4:	085b      	lsrs	r3, r3, #1
  405cd6:	ea4f 0232 	mov.w	r2, r2, rrx
  405cda:	1ab6      	subs	r6, r6, r2
  405cdc:	eb65 0503 	sbc.w	r5, r5, r3
  405ce0:	085b      	lsrs	r3, r3, #1
  405ce2:	ea4f 0232 	mov.w	r2, r2, rrx
  405ce6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  405cea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405cee:	ebb6 0e02 	subs.w	lr, r6, r2
  405cf2:	eb75 0e03 	sbcs.w	lr, r5, r3
  405cf6:	bf22      	ittt	cs
  405cf8:	1ab6      	subcs	r6, r6, r2
  405cfa:	4675      	movcs	r5, lr
  405cfc:	ea40 000c 	orrcs.w	r0, r0, ip
  405d00:	085b      	lsrs	r3, r3, #1
  405d02:	ea4f 0232 	mov.w	r2, r2, rrx
  405d06:	ebb6 0e02 	subs.w	lr, r6, r2
  405d0a:	eb75 0e03 	sbcs.w	lr, r5, r3
  405d0e:	bf22      	ittt	cs
  405d10:	1ab6      	subcs	r6, r6, r2
  405d12:	4675      	movcs	r5, lr
  405d14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405d18:	085b      	lsrs	r3, r3, #1
  405d1a:	ea4f 0232 	mov.w	r2, r2, rrx
  405d1e:	ebb6 0e02 	subs.w	lr, r6, r2
  405d22:	eb75 0e03 	sbcs.w	lr, r5, r3
  405d26:	bf22      	ittt	cs
  405d28:	1ab6      	subcs	r6, r6, r2
  405d2a:	4675      	movcs	r5, lr
  405d2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405d30:	085b      	lsrs	r3, r3, #1
  405d32:	ea4f 0232 	mov.w	r2, r2, rrx
  405d36:	ebb6 0e02 	subs.w	lr, r6, r2
  405d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
  405d3e:	bf22      	ittt	cs
  405d40:	1ab6      	subcs	r6, r6, r2
  405d42:	4675      	movcs	r5, lr
  405d44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405d48:	ea55 0e06 	orrs.w	lr, r5, r6
  405d4c:	d018      	beq.n	405d80 <__aeabi_ddiv+0x114>
  405d4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405d52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405d56:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405d5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405d5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405d62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405d66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405d6a:	d1c0      	bne.n	405cee <__aeabi_ddiv+0x82>
  405d6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405d70:	d10b      	bne.n	405d8a <__aeabi_ddiv+0x11e>
  405d72:	ea41 0100 	orr.w	r1, r1, r0
  405d76:	f04f 0000 	mov.w	r0, #0
  405d7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405d7e:	e7b6      	b.n	405cee <__aeabi_ddiv+0x82>
  405d80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405d84:	bf04      	itt	eq
  405d86:	4301      	orreq	r1, r0
  405d88:	2000      	moveq	r0, #0
  405d8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405d8e:	bf88      	it	hi
  405d90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405d94:	f63f aeaf 	bhi.w	405af6 <__aeabi_dmul+0xde>
  405d98:	ebb5 0c03 	subs.w	ip, r5, r3
  405d9c:	bf04      	itt	eq
  405d9e:	ebb6 0c02 	subseq.w	ip, r6, r2
  405da2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405da6:	f150 0000 	adcs.w	r0, r0, #0
  405daa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405dae:	bd70      	pop	{r4, r5, r6, pc}
  405db0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405db4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405db8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405dbc:	bfc2      	ittt	gt
  405dbe:	ebd4 050c 	rsbsgt	r5, r4, ip
  405dc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405dc6:	bd70      	popgt	{r4, r5, r6, pc}
  405dc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405dcc:	f04f 0e00 	mov.w	lr, #0
  405dd0:	3c01      	subs	r4, #1
  405dd2:	e690      	b.n	405af6 <__aeabi_dmul+0xde>
  405dd4:	ea45 0e06 	orr.w	lr, r5, r6
  405dd8:	e68d      	b.n	405af6 <__aeabi_dmul+0xde>
  405dda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405dde:	ea94 0f0c 	teq	r4, ip
  405de2:	bf08      	it	eq
  405de4:	ea95 0f0c 	teqeq	r5, ip
  405de8:	f43f af3b 	beq.w	405c62 <__aeabi_dmul+0x24a>
  405dec:	ea94 0f0c 	teq	r4, ip
  405df0:	d10a      	bne.n	405e08 <__aeabi_ddiv+0x19c>
  405df2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405df6:	f47f af34 	bne.w	405c62 <__aeabi_dmul+0x24a>
  405dfa:	ea95 0f0c 	teq	r5, ip
  405dfe:	f47f af25 	bne.w	405c4c <__aeabi_dmul+0x234>
  405e02:	4610      	mov	r0, r2
  405e04:	4619      	mov	r1, r3
  405e06:	e72c      	b.n	405c62 <__aeabi_dmul+0x24a>
  405e08:	ea95 0f0c 	teq	r5, ip
  405e0c:	d106      	bne.n	405e1c <__aeabi_ddiv+0x1b0>
  405e0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405e12:	f43f aefd 	beq.w	405c10 <__aeabi_dmul+0x1f8>
  405e16:	4610      	mov	r0, r2
  405e18:	4619      	mov	r1, r3
  405e1a:	e722      	b.n	405c62 <__aeabi_dmul+0x24a>
  405e1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405e20:	bf18      	it	ne
  405e22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405e26:	f47f aec5 	bne.w	405bb4 <__aeabi_dmul+0x19c>
  405e2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405e2e:	f47f af0d 	bne.w	405c4c <__aeabi_dmul+0x234>
  405e32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  405e36:	f47f aeeb 	bne.w	405c10 <__aeabi_dmul+0x1f8>
  405e3a:	e712      	b.n	405c62 <__aeabi_dmul+0x24a>

00405e3c <__aeabi_d2iz>:
  405e3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405e40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405e44:	d215      	bcs.n	405e72 <__aeabi_d2iz+0x36>
  405e46:	d511      	bpl.n	405e6c <__aeabi_d2iz+0x30>
  405e48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  405e4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  405e50:	d912      	bls.n	405e78 <__aeabi_d2iz+0x3c>
  405e52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405e56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405e5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  405e5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405e62:	fa23 f002 	lsr.w	r0, r3, r2
  405e66:	bf18      	it	ne
  405e68:	4240      	negne	r0, r0
  405e6a:	4770      	bx	lr
  405e6c:	f04f 0000 	mov.w	r0, #0
  405e70:	4770      	bx	lr
  405e72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405e76:	d105      	bne.n	405e84 <__aeabi_d2iz+0x48>
  405e78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  405e7c:	bf08      	it	eq
  405e7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405e82:	4770      	bx	lr
  405e84:	f04f 0000 	mov.w	r0, #0
  405e88:	4770      	bx	lr
  405e8a:	bf00      	nop

00405e8c <__libc_init_array>:
  405e8c:	b570      	push	{r4, r5, r6, lr}
  405e8e:	4e0f      	ldr	r6, [pc, #60]	; (405ecc <__libc_init_array+0x40>)
  405e90:	4d0f      	ldr	r5, [pc, #60]	; (405ed0 <__libc_init_array+0x44>)
  405e92:	1b76      	subs	r6, r6, r5
  405e94:	10b6      	asrs	r6, r6, #2
  405e96:	bf18      	it	ne
  405e98:	2400      	movne	r4, #0
  405e9a:	d005      	beq.n	405ea8 <__libc_init_array+0x1c>
  405e9c:	3401      	adds	r4, #1
  405e9e:	f855 3b04 	ldr.w	r3, [r5], #4
  405ea2:	4798      	blx	r3
  405ea4:	42a6      	cmp	r6, r4
  405ea6:	d1f9      	bne.n	405e9c <__libc_init_array+0x10>
  405ea8:	4e0a      	ldr	r6, [pc, #40]	; (405ed4 <__libc_init_array+0x48>)
  405eaa:	4d0b      	ldr	r5, [pc, #44]	; (405ed8 <__libc_init_array+0x4c>)
  405eac:	1b76      	subs	r6, r6, r5
  405eae:	f003 f995 	bl	4091dc <_init>
  405eb2:	10b6      	asrs	r6, r6, #2
  405eb4:	bf18      	it	ne
  405eb6:	2400      	movne	r4, #0
  405eb8:	d006      	beq.n	405ec8 <__libc_init_array+0x3c>
  405eba:	3401      	adds	r4, #1
  405ebc:	f855 3b04 	ldr.w	r3, [r5], #4
  405ec0:	4798      	blx	r3
  405ec2:	42a6      	cmp	r6, r4
  405ec4:	d1f9      	bne.n	405eba <__libc_init_array+0x2e>
  405ec6:	bd70      	pop	{r4, r5, r6, pc}
  405ec8:	bd70      	pop	{r4, r5, r6, pc}
  405eca:	bf00      	nop
  405ecc:	004091e8 	.word	0x004091e8
  405ed0:	004091e8 	.word	0x004091e8
  405ed4:	004091f0 	.word	0x004091f0
  405ed8:	004091e8 	.word	0x004091e8

00405edc <iprintf>:
  405edc:	b40f      	push	{r0, r1, r2, r3}
  405ede:	b500      	push	{lr}
  405ee0:	4907      	ldr	r1, [pc, #28]	; (405f00 <iprintf+0x24>)
  405ee2:	b083      	sub	sp, #12
  405ee4:	ab04      	add	r3, sp, #16
  405ee6:	6808      	ldr	r0, [r1, #0]
  405ee8:	f853 2b04 	ldr.w	r2, [r3], #4
  405eec:	6881      	ldr	r1, [r0, #8]
  405eee:	9301      	str	r3, [sp, #4]
  405ef0:	f000 fb06 	bl	406500 <_vfiprintf_r>
  405ef4:	b003      	add	sp, #12
  405ef6:	f85d eb04 	ldr.w	lr, [sp], #4
  405efa:	b004      	add	sp, #16
  405efc:	4770      	bx	lr
  405efe:	bf00      	nop
  405f00:	2040003c 	.word	0x2040003c

00405f04 <memcpy>:
  405f04:	4684      	mov	ip, r0
  405f06:	ea41 0300 	orr.w	r3, r1, r0
  405f0a:	f013 0303 	ands.w	r3, r3, #3
  405f0e:	d16d      	bne.n	405fec <memcpy+0xe8>
  405f10:	3a40      	subs	r2, #64	; 0x40
  405f12:	d341      	bcc.n	405f98 <memcpy+0x94>
  405f14:	f851 3b04 	ldr.w	r3, [r1], #4
  405f18:	f840 3b04 	str.w	r3, [r0], #4
  405f1c:	f851 3b04 	ldr.w	r3, [r1], #4
  405f20:	f840 3b04 	str.w	r3, [r0], #4
  405f24:	f851 3b04 	ldr.w	r3, [r1], #4
  405f28:	f840 3b04 	str.w	r3, [r0], #4
  405f2c:	f851 3b04 	ldr.w	r3, [r1], #4
  405f30:	f840 3b04 	str.w	r3, [r0], #4
  405f34:	f851 3b04 	ldr.w	r3, [r1], #4
  405f38:	f840 3b04 	str.w	r3, [r0], #4
  405f3c:	f851 3b04 	ldr.w	r3, [r1], #4
  405f40:	f840 3b04 	str.w	r3, [r0], #4
  405f44:	f851 3b04 	ldr.w	r3, [r1], #4
  405f48:	f840 3b04 	str.w	r3, [r0], #4
  405f4c:	f851 3b04 	ldr.w	r3, [r1], #4
  405f50:	f840 3b04 	str.w	r3, [r0], #4
  405f54:	f851 3b04 	ldr.w	r3, [r1], #4
  405f58:	f840 3b04 	str.w	r3, [r0], #4
  405f5c:	f851 3b04 	ldr.w	r3, [r1], #4
  405f60:	f840 3b04 	str.w	r3, [r0], #4
  405f64:	f851 3b04 	ldr.w	r3, [r1], #4
  405f68:	f840 3b04 	str.w	r3, [r0], #4
  405f6c:	f851 3b04 	ldr.w	r3, [r1], #4
  405f70:	f840 3b04 	str.w	r3, [r0], #4
  405f74:	f851 3b04 	ldr.w	r3, [r1], #4
  405f78:	f840 3b04 	str.w	r3, [r0], #4
  405f7c:	f851 3b04 	ldr.w	r3, [r1], #4
  405f80:	f840 3b04 	str.w	r3, [r0], #4
  405f84:	f851 3b04 	ldr.w	r3, [r1], #4
  405f88:	f840 3b04 	str.w	r3, [r0], #4
  405f8c:	f851 3b04 	ldr.w	r3, [r1], #4
  405f90:	f840 3b04 	str.w	r3, [r0], #4
  405f94:	3a40      	subs	r2, #64	; 0x40
  405f96:	d2bd      	bcs.n	405f14 <memcpy+0x10>
  405f98:	3230      	adds	r2, #48	; 0x30
  405f9a:	d311      	bcc.n	405fc0 <memcpy+0xbc>
  405f9c:	f851 3b04 	ldr.w	r3, [r1], #4
  405fa0:	f840 3b04 	str.w	r3, [r0], #4
  405fa4:	f851 3b04 	ldr.w	r3, [r1], #4
  405fa8:	f840 3b04 	str.w	r3, [r0], #4
  405fac:	f851 3b04 	ldr.w	r3, [r1], #4
  405fb0:	f840 3b04 	str.w	r3, [r0], #4
  405fb4:	f851 3b04 	ldr.w	r3, [r1], #4
  405fb8:	f840 3b04 	str.w	r3, [r0], #4
  405fbc:	3a10      	subs	r2, #16
  405fbe:	d2ed      	bcs.n	405f9c <memcpy+0x98>
  405fc0:	320c      	adds	r2, #12
  405fc2:	d305      	bcc.n	405fd0 <memcpy+0xcc>
  405fc4:	f851 3b04 	ldr.w	r3, [r1], #4
  405fc8:	f840 3b04 	str.w	r3, [r0], #4
  405fcc:	3a04      	subs	r2, #4
  405fce:	d2f9      	bcs.n	405fc4 <memcpy+0xc0>
  405fd0:	3204      	adds	r2, #4
  405fd2:	d008      	beq.n	405fe6 <memcpy+0xe2>
  405fd4:	07d2      	lsls	r2, r2, #31
  405fd6:	bf1c      	itt	ne
  405fd8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405fdc:	f800 3b01 	strbne.w	r3, [r0], #1
  405fe0:	d301      	bcc.n	405fe6 <memcpy+0xe2>
  405fe2:	880b      	ldrh	r3, [r1, #0]
  405fe4:	8003      	strh	r3, [r0, #0]
  405fe6:	4660      	mov	r0, ip
  405fe8:	4770      	bx	lr
  405fea:	bf00      	nop
  405fec:	2a08      	cmp	r2, #8
  405fee:	d313      	bcc.n	406018 <memcpy+0x114>
  405ff0:	078b      	lsls	r3, r1, #30
  405ff2:	d08d      	beq.n	405f10 <memcpy+0xc>
  405ff4:	f010 0303 	ands.w	r3, r0, #3
  405ff8:	d08a      	beq.n	405f10 <memcpy+0xc>
  405ffa:	f1c3 0304 	rsb	r3, r3, #4
  405ffe:	1ad2      	subs	r2, r2, r3
  406000:	07db      	lsls	r3, r3, #31
  406002:	bf1c      	itt	ne
  406004:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406008:	f800 3b01 	strbne.w	r3, [r0], #1
  40600c:	d380      	bcc.n	405f10 <memcpy+0xc>
  40600e:	f831 3b02 	ldrh.w	r3, [r1], #2
  406012:	f820 3b02 	strh.w	r3, [r0], #2
  406016:	e77b      	b.n	405f10 <memcpy+0xc>
  406018:	3a04      	subs	r2, #4
  40601a:	d3d9      	bcc.n	405fd0 <memcpy+0xcc>
  40601c:	3a01      	subs	r2, #1
  40601e:	f811 3b01 	ldrb.w	r3, [r1], #1
  406022:	f800 3b01 	strb.w	r3, [r0], #1
  406026:	d2f9      	bcs.n	40601c <memcpy+0x118>
  406028:	780b      	ldrb	r3, [r1, #0]
  40602a:	7003      	strb	r3, [r0, #0]
  40602c:	784b      	ldrb	r3, [r1, #1]
  40602e:	7043      	strb	r3, [r0, #1]
  406030:	788b      	ldrb	r3, [r1, #2]
  406032:	7083      	strb	r3, [r0, #2]
  406034:	4660      	mov	r0, ip
  406036:	4770      	bx	lr

00406038 <memset>:
  406038:	b470      	push	{r4, r5, r6}
  40603a:	0786      	lsls	r6, r0, #30
  40603c:	d046      	beq.n	4060cc <memset+0x94>
  40603e:	1e54      	subs	r4, r2, #1
  406040:	2a00      	cmp	r2, #0
  406042:	d041      	beq.n	4060c8 <memset+0x90>
  406044:	b2ca      	uxtb	r2, r1
  406046:	4603      	mov	r3, r0
  406048:	e002      	b.n	406050 <memset+0x18>
  40604a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40604e:	d33b      	bcc.n	4060c8 <memset+0x90>
  406050:	f803 2b01 	strb.w	r2, [r3], #1
  406054:	079d      	lsls	r5, r3, #30
  406056:	d1f8      	bne.n	40604a <memset+0x12>
  406058:	2c03      	cmp	r4, #3
  40605a:	d92e      	bls.n	4060ba <memset+0x82>
  40605c:	b2cd      	uxtb	r5, r1
  40605e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406062:	2c0f      	cmp	r4, #15
  406064:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406068:	d919      	bls.n	40609e <memset+0x66>
  40606a:	f103 0210 	add.w	r2, r3, #16
  40606e:	4626      	mov	r6, r4
  406070:	3e10      	subs	r6, #16
  406072:	2e0f      	cmp	r6, #15
  406074:	f842 5c10 	str.w	r5, [r2, #-16]
  406078:	f842 5c0c 	str.w	r5, [r2, #-12]
  40607c:	f842 5c08 	str.w	r5, [r2, #-8]
  406080:	f842 5c04 	str.w	r5, [r2, #-4]
  406084:	f102 0210 	add.w	r2, r2, #16
  406088:	d8f2      	bhi.n	406070 <memset+0x38>
  40608a:	f1a4 0210 	sub.w	r2, r4, #16
  40608e:	f022 020f 	bic.w	r2, r2, #15
  406092:	f004 040f 	and.w	r4, r4, #15
  406096:	3210      	adds	r2, #16
  406098:	2c03      	cmp	r4, #3
  40609a:	4413      	add	r3, r2
  40609c:	d90d      	bls.n	4060ba <memset+0x82>
  40609e:	461e      	mov	r6, r3
  4060a0:	4622      	mov	r2, r4
  4060a2:	3a04      	subs	r2, #4
  4060a4:	2a03      	cmp	r2, #3
  4060a6:	f846 5b04 	str.w	r5, [r6], #4
  4060aa:	d8fa      	bhi.n	4060a2 <memset+0x6a>
  4060ac:	1f22      	subs	r2, r4, #4
  4060ae:	f022 0203 	bic.w	r2, r2, #3
  4060b2:	3204      	adds	r2, #4
  4060b4:	4413      	add	r3, r2
  4060b6:	f004 0403 	and.w	r4, r4, #3
  4060ba:	b12c      	cbz	r4, 4060c8 <memset+0x90>
  4060bc:	b2c9      	uxtb	r1, r1
  4060be:	441c      	add	r4, r3
  4060c0:	f803 1b01 	strb.w	r1, [r3], #1
  4060c4:	429c      	cmp	r4, r3
  4060c6:	d1fb      	bne.n	4060c0 <memset+0x88>
  4060c8:	bc70      	pop	{r4, r5, r6}
  4060ca:	4770      	bx	lr
  4060cc:	4614      	mov	r4, r2
  4060ce:	4603      	mov	r3, r0
  4060d0:	e7c2      	b.n	406058 <memset+0x20>
  4060d2:	bf00      	nop

004060d4 <_puts_r>:
  4060d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4060d6:	4605      	mov	r5, r0
  4060d8:	b089      	sub	sp, #36	; 0x24
  4060da:	4608      	mov	r0, r1
  4060dc:	460c      	mov	r4, r1
  4060de:	f000 f92f 	bl	406340 <strlen>
  4060e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4060e4:	4f21      	ldr	r7, [pc, #132]	; (40616c <_puts_r+0x98>)
  4060e6:	9404      	str	r4, [sp, #16]
  4060e8:	2601      	movs	r6, #1
  4060ea:	1c44      	adds	r4, r0, #1
  4060ec:	a904      	add	r1, sp, #16
  4060ee:	2202      	movs	r2, #2
  4060f0:	9403      	str	r4, [sp, #12]
  4060f2:	9005      	str	r0, [sp, #20]
  4060f4:	68ac      	ldr	r4, [r5, #8]
  4060f6:	9706      	str	r7, [sp, #24]
  4060f8:	9607      	str	r6, [sp, #28]
  4060fa:	9101      	str	r1, [sp, #4]
  4060fc:	9202      	str	r2, [sp, #8]
  4060fe:	b353      	cbz	r3, 406156 <_puts_r+0x82>
  406100:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406102:	f013 0f01 	tst.w	r3, #1
  406106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40610a:	b29a      	uxth	r2, r3
  40610c:	d101      	bne.n	406112 <_puts_r+0x3e>
  40610e:	0590      	lsls	r0, r2, #22
  406110:	d525      	bpl.n	40615e <_puts_r+0x8a>
  406112:	0491      	lsls	r1, r2, #18
  406114:	d406      	bmi.n	406124 <_puts_r+0x50>
  406116:	6e62      	ldr	r2, [r4, #100]	; 0x64
  406118:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40611c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  406120:	81a3      	strh	r3, [r4, #12]
  406122:	6662      	str	r2, [r4, #100]	; 0x64
  406124:	4628      	mov	r0, r5
  406126:	aa01      	add	r2, sp, #4
  406128:	4621      	mov	r1, r4
  40612a:	f001 fbeb 	bl	407904 <__sfvwrite_r>
  40612e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406130:	2800      	cmp	r0, #0
  406132:	bf0c      	ite	eq
  406134:	250a      	moveq	r5, #10
  406136:	f04f 35ff 	movne.w	r5, #4294967295
  40613a:	07da      	lsls	r2, r3, #31
  40613c:	d402      	bmi.n	406144 <_puts_r+0x70>
  40613e:	89a3      	ldrh	r3, [r4, #12]
  406140:	059b      	lsls	r3, r3, #22
  406142:	d502      	bpl.n	40614a <_puts_r+0x76>
  406144:	4628      	mov	r0, r5
  406146:	b009      	add	sp, #36	; 0x24
  406148:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40614a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40614c:	f001 fd90 	bl	407c70 <__retarget_lock_release_recursive>
  406150:	4628      	mov	r0, r5
  406152:	b009      	add	sp, #36	; 0x24
  406154:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406156:	4628      	mov	r0, r5
  406158:	f001 f9c8 	bl	4074ec <__sinit>
  40615c:	e7d0      	b.n	406100 <_puts_r+0x2c>
  40615e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406160:	f001 fd84 	bl	407c6c <__retarget_lock_acquire_recursive>
  406164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406168:	b29a      	uxth	r2, r3
  40616a:	e7d2      	b.n	406112 <_puts_r+0x3e>
  40616c:	00409074 	.word	0x00409074

00406170 <puts>:
  406170:	4b02      	ldr	r3, [pc, #8]	; (40617c <puts+0xc>)
  406172:	4601      	mov	r1, r0
  406174:	6818      	ldr	r0, [r3, #0]
  406176:	f7ff bfad 	b.w	4060d4 <_puts_r>
  40617a:	bf00      	nop
  40617c:	2040003c 	.word	0x2040003c

00406180 <setbuf>:
  406180:	2900      	cmp	r1, #0
  406182:	bf0c      	ite	eq
  406184:	2202      	moveq	r2, #2
  406186:	2200      	movne	r2, #0
  406188:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40618c:	f000 b800 	b.w	406190 <setvbuf>

00406190 <setvbuf>:
  406190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406194:	4c61      	ldr	r4, [pc, #388]	; (40631c <setvbuf+0x18c>)
  406196:	6825      	ldr	r5, [r4, #0]
  406198:	b083      	sub	sp, #12
  40619a:	4604      	mov	r4, r0
  40619c:	460f      	mov	r7, r1
  40619e:	4690      	mov	r8, r2
  4061a0:	461e      	mov	r6, r3
  4061a2:	b115      	cbz	r5, 4061aa <setvbuf+0x1a>
  4061a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4061a6:	2b00      	cmp	r3, #0
  4061a8:	d064      	beq.n	406274 <setvbuf+0xe4>
  4061aa:	f1b8 0f02 	cmp.w	r8, #2
  4061ae:	d006      	beq.n	4061be <setvbuf+0x2e>
  4061b0:	f1b8 0f01 	cmp.w	r8, #1
  4061b4:	f200 809f 	bhi.w	4062f6 <setvbuf+0x166>
  4061b8:	2e00      	cmp	r6, #0
  4061ba:	f2c0 809c 	blt.w	4062f6 <setvbuf+0x166>
  4061be:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4061c0:	07d8      	lsls	r0, r3, #31
  4061c2:	d534      	bpl.n	40622e <setvbuf+0x9e>
  4061c4:	4621      	mov	r1, r4
  4061c6:	4628      	mov	r0, r5
  4061c8:	f001 f938 	bl	40743c <_fflush_r>
  4061cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4061ce:	b141      	cbz	r1, 4061e2 <setvbuf+0x52>
  4061d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4061d4:	4299      	cmp	r1, r3
  4061d6:	d002      	beq.n	4061de <setvbuf+0x4e>
  4061d8:	4628      	mov	r0, r5
  4061da:	f001 faad 	bl	407738 <_free_r>
  4061de:	2300      	movs	r3, #0
  4061e0:	6323      	str	r3, [r4, #48]	; 0x30
  4061e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4061e6:	2200      	movs	r2, #0
  4061e8:	61a2      	str	r2, [r4, #24]
  4061ea:	6062      	str	r2, [r4, #4]
  4061ec:	061a      	lsls	r2, r3, #24
  4061ee:	d43a      	bmi.n	406266 <setvbuf+0xd6>
  4061f0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4061f4:	f023 0303 	bic.w	r3, r3, #3
  4061f8:	f1b8 0f02 	cmp.w	r8, #2
  4061fc:	81a3      	strh	r3, [r4, #12]
  4061fe:	d01d      	beq.n	40623c <setvbuf+0xac>
  406200:	ab01      	add	r3, sp, #4
  406202:	466a      	mov	r2, sp
  406204:	4621      	mov	r1, r4
  406206:	4628      	mov	r0, r5
  406208:	f001 fd34 	bl	407c74 <__swhatbuf_r>
  40620c:	89a3      	ldrh	r3, [r4, #12]
  40620e:	4318      	orrs	r0, r3
  406210:	81a0      	strh	r0, [r4, #12]
  406212:	2e00      	cmp	r6, #0
  406214:	d132      	bne.n	40627c <setvbuf+0xec>
  406216:	9e00      	ldr	r6, [sp, #0]
  406218:	4630      	mov	r0, r6
  40621a:	f001 fda3 	bl	407d64 <malloc>
  40621e:	4607      	mov	r7, r0
  406220:	2800      	cmp	r0, #0
  406222:	d06b      	beq.n	4062fc <setvbuf+0x16c>
  406224:	89a3      	ldrh	r3, [r4, #12]
  406226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40622a:	81a3      	strh	r3, [r4, #12]
  40622c:	e028      	b.n	406280 <setvbuf+0xf0>
  40622e:	89a3      	ldrh	r3, [r4, #12]
  406230:	0599      	lsls	r1, r3, #22
  406232:	d4c7      	bmi.n	4061c4 <setvbuf+0x34>
  406234:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406236:	f001 fd19 	bl	407c6c <__retarget_lock_acquire_recursive>
  40623a:	e7c3      	b.n	4061c4 <setvbuf+0x34>
  40623c:	2500      	movs	r5, #0
  40623e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406240:	2600      	movs	r6, #0
  406242:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406246:	f043 0302 	orr.w	r3, r3, #2
  40624a:	2001      	movs	r0, #1
  40624c:	60a6      	str	r6, [r4, #8]
  40624e:	07ce      	lsls	r6, r1, #31
  406250:	81a3      	strh	r3, [r4, #12]
  406252:	6022      	str	r2, [r4, #0]
  406254:	6122      	str	r2, [r4, #16]
  406256:	6160      	str	r0, [r4, #20]
  406258:	d401      	bmi.n	40625e <setvbuf+0xce>
  40625a:	0598      	lsls	r0, r3, #22
  40625c:	d53e      	bpl.n	4062dc <setvbuf+0x14c>
  40625e:	4628      	mov	r0, r5
  406260:	b003      	add	sp, #12
  406262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406266:	6921      	ldr	r1, [r4, #16]
  406268:	4628      	mov	r0, r5
  40626a:	f001 fa65 	bl	407738 <_free_r>
  40626e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406272:	e7bd      	b.n	4061f0 <setvbuf+0x60>
  406274:	4628      	mov	r0, r5
  406276:	f001 f939 	bl	4074ec <__sinit>
  40627a:	e796      	b.n	4061aa <setvbuf+0x1a>
  40627c:	2f00      	cmp	r7, #0
  40627e:	d0cb      	beq.n	406218 <setvbuf+0x88>
  406280:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406282:	2b00      	cmp	r3, #0
  406284:	d033      	beq.n	4062ee <setvbuf+0x15e>
  406286:	9b00      	ldr	r3, [sp, #0]
  406288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40628c:	6027      	str	r7, [r4, #0]
  40628e:	429e      	cmp	r6, r3
  406290:	bf1c      	itt	ne
  406292:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  406296:	81a2      	strhne	r2, [r4, #12]
  406298:	f1b8 0f01 	cmp.w	r8, #1
  40629c:	bf04      	itt	eq
  40629e:	f042 0201 	orreq.w	r2, r2, #1
  4062a2:	81a2      	strheq	r2, [r4, #12]
  4062a4:	b292      	uxth	r2, r2
  4062a6:	f012 0308 	ands.w	r3, r2, #8
  4062aa:	6127      	str	r7, [r4, #16]
  4062ac:	6166      	str	r6, [r4, #20]
  4062ae:	d00e      	beq.n	4062ce <setvbuf+0x13e>
  4062b0:	07d1      	lsls	r1, r2, #31
  4062b2:	d51a      	bpl.n	4062ea <setvbuf+0x15a>
  4062b4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4062b6:	4276      	negs	r6, r6
  4062b8:	2300      	movs	r3, #0
  4062ba:	f015 0501 	ands.w	r5, r5, #1
  4062be:	61a6      	str	r6, [r4, #24]
  4062c0:	60a3      	str	r3, [r4, #8]
  4062c2:	d009      	beq.n	4062d8 <setvbuf+0x148>
  4062c4:	2500      	movs	r5, #0
  4062c6:	4628      	mov	r0, r5
  4062c8:	b003      	add	sp, #12
  4062ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4062ce:	60a3      	str	r3, [r4, #8]
  4062d0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4062d2:	f015 0501 	ands.w	r5, r5, #1
  4062d6:	d1f5      	bne.n	4062c4 <setvbuf+0x134>
  4062d8:	0593      	lsls	r3, r2, #22
  4062da:	d4c0      	bmi.n	40625e <setvbuf+0xce>
  4062dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4062de:	f001 fcc7 	bl	407c70 <__retarget_lock_release_recursive>
  4062e2:	4628      	mov	r0, r5
  4062e4:	b003      	add	sp, #12
  4062e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4062ea:	60a6      	str	r6, [r4, #8]
  4062ec:	e7f0      	b.n	4062d0 <setvbuf+0x140>
  4062ee:	4628      	mov	r0, r5
  4062f0:	f001 f8fc 	bl	4074ec <__sinit>
  4062f4:	e7c7      	b.n	406286 <setvbuf+0xf6>
  4062f6:	f04f 35ff 	mov.w	r5, #4294967295
  4062fa:	e7b0      	b.n	40625e <setvbuf+0xce>
  4062fc:	f8dd 9000 	ldr.w	r9, [sp]
  406300:	45b1      	cmp	r9, r6
  406302:	d004      	beq.n	40630e <setvbuf+0x17e>
  406304:	4648      	mov	r0, r9
  406306:	f001 fd2d 	bl	407d64 <malloc>
  40630a:	4607      	mov	r7, r0
  40630c:	b920      	cbnz	r0, 406318 <setvbuf+0x188>
  40630e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406312:	f04f 35ff 	mov.w	r5, #4294967295
  406316:	e792      	b.n	40623e <setvbuf+0xae>
  406318:	464e      	mov	r6, r9
  40631a:	e783      	b.n	406224 <setvbuf+0x94>
  40631c:	2040003c 	.word	0x2040003c
	...

00406340 <strlen>:
  406340:	f890 f000 	pld	[r0]
  406344:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406348:	f020 0107 	bic.w	r1, r0, #7
  40634c:	f06f 0c00 	mvn.w	ip, #0
  406350:	f010 0407 	ands.w	r4, r0, #7
  406354:	f891 f020 	pld	[r1, #32]
  406358:	f040 8049 	bne.w	4063ee <strlen+0xae>
  40635c:	f04f 0400 	mov.w	r4, #0
  406360:	f06f 0007 	mvn.w	r0, #7
  406364:	e9d1 2300 	ldrd	r2, r3, [r1]
  406368:	f891 f040 	pld	[r1, #64]	; 0x40
  40636c:	f100 0008 	add.w	r0, r0, #8
  406370:	fa82 f24c 	uadd8	r2, r2, ip
  406374:	faa4 f28c 	sel	r2, r4, ip
  406378:	fa83 f34c 	uadd8	r3, r3, ip
  40637c:	faa2 f38c 	sel	r3, r2, ip
  406380:	bb4b      	cbnz	r3, 4063d6 <strlen+0x96>
  406382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406386:	fa82 f24c 	uadd8	r2, r2, ip
  40638a:	f100 0008 	add.w	r0, r0, #8
  40638e:	faa4 f28c 	sel	r2, r4, ip
  406392:	fa83 f34c 	uadd8	r3, r3, ip
  406396:	faa2 f38c 	sel	r3, r2, ip
  40639a:	b9e3      	cbnz	r3, 4063d6 <strlen+0x96>
  40639c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4063a0:	fa82 f24c 	uadd8	r2, r2, ip
  4063a4:	f100 0008 	add.w	r0, r0, #8
  4063a8:	faa4 f28c 	sel	r2, r4, ip
  4063ac:	fa83 f34c 	uadd8	r3, r3, ip
  4063b0:	faa2 f38c 	sel	r3, r2, ip
  4063b4:	b97b      	cbnz	r3, 4063d6 <strlen+0x96>
  4063b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4063ba:	f101 0120 	add.w	r1, r1, #32
  4063be:	fa82 f24c 	uadd8	r2, r2, ip
  4063c2:	f100 0008 	add.w	r0, r0, #8
  4063c6:	faa4 f28c 	sel	r2, r4, ip
  4063ca:	fa83 f34c 	uadd8	r3, r3, ip
  4063ce:	faa2 f38c 	sel	r3, r2, ip
  4063d2:	2b00      	cmp	r3, #0
  4063d4:	d0c6      	beq.n	406364 <strlen+0x24>
  4063d6:	2a00      	cmp	r2, #0
  4063d8:	bf04      	itt	eq
  4063da:	3004      	addeq	r0, #4
  4063dc:	461a      	moveq	r2, r3
  4063de:	ba12      	rev	r2, r2
  4063e0:	fab2 f282 	clz	r2, r2
  4063e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4063e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4063ec:	4770      	bx	lr
  4063ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4063f2:	f004 0503 	and.w	r5, r4, #3
  4063f6:	f1c4 0000 	rsb	r0, r4, #0
  4063fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4063fe:	f014 0f04 	tst.w	r4, #4
  406402:	f891 f040 	pld	[r1, #64]	; 0x40
  406406:	fa0c f505 	lsl.w	r5, ip, r5
  40640a:	ea62 0205 	orn	r2, r2, r5
  40640e:	bf1c      	itt	ne
  406410:	ea63 0305 	ornne	r3, r3, r5
  406414:	4662      	movne	r2, ip
  406416:	f04f 0400 	mov.w	r4, #0
  40641a:	e7a9      	b.n	406370 <strlen+0x30>

0040641c <strncpy>:
  40641c:	ea40 0301 	orr.w	r3, r0, r1
  406420:	f013 0f03 	tst.w	r3, #3
  406424:	b470      	push	{r4, r5, r6}
  406426:	4603      	mov	r3, r0
  406428:	d024      	beq.n	406474 <strncpy+0x58>
  40642a:	b1a2      	cbz	r2, 406456 <strncpy+0x3a>
  40642c:	780c      	ldrb	r4, [r1, #0]
  40642e:	701c      	strb	r4, [r3, #0]
  406430:	3a01      	subs	r2, #1
  406432:	3301      	adds	r3, #1
  406434:	3101      	adds	r1, #1
  406436:	b13c      	cbz	r4, 406448 <strncpy+0x2c>
  406438:	b16a      	cbz	r2, 406456 <strncpy+0x3a>
  40643a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40643e:	f803 4b01 	strb.w	r4, [r3], #1
  406442:	3a01      	subs	r2, #1
  406444:	2c00      	cmp	r4, #0
  406446:	d1f7      	bne.n	406438 <strncpy+0x1c>
  406448:	b12a      	cbz	r2, 406456 <strncpy+0x3a>
  40644a:	441a      	add	r2, r3
  40644c:	2100      	movs	r1, #0
  40644e:	f803 1b01 	strb.w	r1, [r3], #1
  406452:	429a      	cmp	r2, r3
  406454:	d1fb      	bne.n	40644e <strncpy+0x32>
  406456:	bc70      	pop	{r4, r5, r6}
  406458:	4770      	bx	lr
  40645a:	460e      	mov	r6, r1
  40645c:	f851 5b04 	ldr.w	r5, [r1], #4
  406460:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  406464:	ea24 0405 	bic.w	r4, r4, r5
  406468:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  40646c:	d105      	bne.n	40647a <strncpy+0x5e>
  40646e:	f843 5b04 	str.w	r5, [r3], #4
  406472:	3a04      	subs	r2, #4
  406474:	2a03      	cmp	r2, #3
  406476:	d8f0      	bhi.n	40645a <strncpy+0x3e>
  406478:	e7d7      	b.n	40642a <strncpy+0xe>
  40647a:	4631      	mov	r1, r6
  40647c:	e7d6      	b.n	40642c <strncpy+0x10>
  40647e:	bf00      	nop

00406480 <__sprint_r.part.0>:
  406480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406484:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  406486:	049c      	lsls	r4, r3, #18
  406488:	4693      	mov	fp, r2
  40648a:	d52f      	bpl.n	4064ec <__sprint_r.part.0+0x6c>
  40648c:	6893      	ldr	r3, [r2, #8]
  40648e:	6812      	ldr	r2, [r2, #0]
  406490:	b353      	cbz	r3, 4064e8 <__sprint_r.part.0+0x68>
  406492:	460e      	mov	r6, r1
  406494:	4607      	mov	r7, r0
  406496:	f102 0908 	add.w	r9, r2, #8
  40649a:	e919 0420 	ldmdb	r9, {r5, sl}
  40649e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4064a2:	d017      	beq.n	4064d4 <__sprint_r.part.0+0x54>
  4064a4:	3d04      	subs	r5, #4
  4064a6:	2400      	movs	r4, #0
  4064a8:	e001      	b.n	4064ae <__sprint_r.part.0+0x2e>
  4064aa:	45a0      	cmp	r8, r4
  4064ac:	d010      	beq.n	4064d0 <__sprint_r.part.0+0x50>
  4064ae:	4632      	mov	r2, r6
  4064b0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4064b4:	4638      	mov	r0, r7
  4064b6:	f001 f8bb 	bl	407630 <_fputwc_r>
  4064ba:	1c43      	adds	r3, r0, #1
  4064bc:	f104 0401 	add.w	r4, r4, #1
  4064c0:	d1f3      	bne.n	4064aa <__sprint_r.part.0+0x2a>
  4064c2:	2300      	movs	r3, #0
  4064c4:	f8cb 3008 	str.w	r3, [fp, #8]
  4064c8:	f8cb 3004 	str.w	r3, [fp, #4]
  4064cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064d0:	f8db 3008 	ldr.w	r3, [fp, #8]
  4064d4:	f02a 0a03 	bic.w	sl, sl, #3
  4064d8:	eba3 030a 	sub.w	r3, r3, sl
  4064dc:	f8cb 3008 	str.w	r3, [fp, #8]
  4064e0:	f109 0908 	add.w	r9, r9, #8
  4064e4:	2b00      	cmp	r3, #0
  4064e6:	d1d8      	bne.n	40649a <__sprint_r.part.0+0x1a>
  4064e8:	2000      	movs	r0, #0
  4064ea:	e7ea      	b.n	4064c2 <__sprint_r.part.0+0x42>
  4064ec:	f001 fa0a 	bl	407904 <__sfvwrite_r>
  4064f0:	2300      	movs	r3, #0
  4064f2:	f8cb 3008 	str.w	r3, [fp, #8]
  4064f6:	f8cb 3004 	str.w	r3, [fp, #4]
  4064fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064fe:	bf00      	nop

00406500 <_vfiprintf_r>:
  406500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406504:	b0ad      	sub	sp, #180	; 0xb4
  406506:	461d      	mov	r5, r3
  406508:	468b      	mov	fp, r1
  40650a:	4690      	mov	r8, r2
  40650c:	9307      	str	r3, [sp, #28]
  40650e:	9006      	str	r0, [sp, #24]
  406510:	b118      	cbz	r0, 40651a <_vfiprintf_r+0x1a>
  406512:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406514:	2b00      	cmp	r3, #0
  406516:	f000 80f3 	beq.w	406700 <_vfiprintf_r+0x200>
  40651a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40651e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  406522:	07df      	lsls	r7, r3, #31
  406524:	b281      	uxth	r1, r0
  406526:	d402      	bmi.n	40652e <_vfiprintf_r+0x2e>
  406528:	058e      	lsls	r6, r1, #22
  40652a:	f140 80fc 	bpl.w	406726 <_vfiprintf_r+0x226>
  40652e:	048c      	lsls	r4, r1, #18
  406530:	d40a      	bmi.n	406548 <_vfiprintf_r+0x48>
  406532:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406536:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40653a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40653e:	f8ab 100c 	strh.w	r1, [fp, #12]
  406542:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  406546:	b289      	uxth	r1, r1
  406548:	0708      	lsls	r0, r1, #28
  40654a:	f140 80b3 	bpl.w	4066b4 <_vfiprintf_r+0x1b4>
  40654e:	f8db 3010 	ldr.w	r3, [fp, #16]
  406552:	2b00      	cmp	r3, #0
  406554:	f000 80ae 	beq.w	4066b4 <_vfiprintf_r+0x1b4>
  406558:	f001 031a 	and.w	r3, r1, #26
  40655c:	2b0a      	cmp	r3, #10
  40655e:	f000 80b5 	beq.w	4066cc <_vfiprintf_r+0x1cc>
  406562:	2300      	movs	r3, #0
  406564:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  406568:	930b      	str	r3, [sp, #44]	; 0x2c
  40656a:	9311      	str	r3, [sp, #68]	; 0x44
  40656c:	9310      	str	r3, [sp, #64]	; 0x40
  40656e:	9303      	str	r3, [sp, #12]
  406570:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  406574:	46ca      	mov	sl, r9
  406576:	f8cd b010 	str.w	fp, [sp, #16]
  40657a:	f898 3000 	ldrb.w	r3, [r8]
  40657e:	4644      	mov	r4, r8
  406580:	b1fb      	cbz	r3, 4065c2 <_vfiprintf_r+0xc2>
  406582:	2b25      	cmp	r3, #37	; 0x25
  406584:	d102      	bne.n	40658c <_vfiprintf_r+0x8c>
  406586:	e01c      	b.n	4065c2 <_vfiprintf_r+0xc2>
  406588:	2b25      	cmp	r3, #37	; 0x25
  40658a:	d003      	beq.n	406594 <_vfiprintf_r+0x94>
  40658c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  406590:	2b00      	cmp	r3, #0
  406592:	d1f9      	bne.n	406588 <_vfiprintf_r+0x88>
  406594:	eba4 0508 	sub.w	r5, r4, r8
  406598:	b19d      	cbz	r5, 4065c2 <_vfiprintf_r+0xc2>
  40659a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40659c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40659e:	f8ca 8000 	str.w	r8, [sl]
  4065a2:	3301      	adds	r3, #1
  4065a4:	442a      	add	r2, r5
  4065a6:	2b07      	cmp	r3, #7
  4065a8:	f8ca 5004 	str.w	r5, [sl, #4]
  4065ac:	9211      	str	r2, [sp, #68]	; 0x44
  4065ae:	9310      	str	r3, [sp, #64]	; 0x40
  4065b0:	dd7a      	ble.n	4066a8 <_vfiprintf_r+0x1a8>
  4065b2:	2a00      	cmp	r2, #0
  4065b4:	f040 84b0 	bne.w	406f18 <_vfiprintf_r+0xa18>
  4065b8:	9b03      	ldr	r3, [sp, #12]
  4065ba:	9210      	str	r2, [sp, #64]	; 0x40
  4065bc:	442b      	add	r3, r5
  4065be:	46ca      	mov	sl, r9
  4065c0:	9303      	str	r3, [sp, #12]
  4065c2:	7823      	ldrb	r3, [r4, #0]
  4065c4:	2b00      	cmp	r3, #0
  4065c6:	f000 83e0 	beq.w	406d8a <_vfiprintf_r+0x88a>
  4065ca:	2000      	movs	r0, #0
  4065cc:	f04f 0300 	mov.w	r3, #0
  4065d0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4065d4:	f104 0801 	add.w	r8, r4, #1
  4065d8:	7862      	ldrb	r2, [r4, #1]
  4065da:	4605      	mov	r5, r0
  4065dc:	4606      	mov	r6, r0
  4065de:	4603      	mov	r3, r0
  4065e0:	f04f 34ff 	mov.w	r4, #4294967295
  4065e4:	f108 0801 	add.w	r8, r8, #1
  4065e8:	f1a2 0120 	sub.w	r1, r2, #32
  4065ec:	2958      	cmp	r1, #88	; 0x58
  4065ee:	f200 82de 	bhi.w	406bae <_vfiprintf_r+0x6ae>
  4065f2:	e8df f011 	tbh	[pc, r1, lsl #1]
  4065f6:	0221      	.short	0x0221
  4065f8:	02dc02dc 	.word	0x02dc02dc
  4065fc:	02dc0229 	.word	0x02dc0229
  406600:	02dc02dc 	.word	0x02dc02dc
  406604:	02dc02dc 	.word	0x02dc02dc
  406608:	028902dc 	.word	0x028902dc
  40660c:	02dc0295 	.word	0x02dc0295
  406610:	02bd00a2 	.word	0x02bd00a2
  406614:	019f02dc 	.word	0x019f02dc
  406618:	01a401a4 	.word	0x01a401a4
  40661c:	01a401a4 	.word	0x01a401a4
  406620:	01a401a4 	.word	0x01a401a4
  406624:	01a401a4 	.word	0x01a401a4
  406628:	02dc01a4 	.word	0x02dc01a4
  40662c:	02dc02dc 	.word	0x02dc02dc
  406630:	02dc02dc 	.word	0x02dc02dc
  406634:	02dc02dc 	.word	0x02dc02dc
  406638:	02dc02dc 	.word	0x02dc02dc
  40663c:	01b202dc 	.word	0x01b202dc
  406640:	02dc02dc 	.word	0x02dc02dc
  406644:	02dc02dc 	.word	0x02dc02dc
  406648:	02dc02dc 	.word	0x02dc02dc
  40664c:	02dc02dc 	.word	0x02dc02dc
  406650:	02dc02dc 	.word	0x02dc02dc
  406654:	02dc0197 	.word	0x02dc0197
  406658:	02dc02dc 	.word	0x02dc02dc
  40665c:	02dc02dc 	.word	0x02dc02dc
  406660:	02dc019b 	.word	0x02dc019b
  406664:	025302dc 	.word	0x025302dc
  406668:	02dc02dc 	.word	0x02dc02dc
  40666c:	02dc02dc 	.word	0x02dc02dc
  406670:	02dc02dc 	.word	0x02dc02dc
  406674:	02dc02dc 	.word	0x02dc02dc
  406678:	02dc02dc 	.word	0x02dc02dc
  40667c:	021b025a 	.word	0x021b025a
  406680:	02dc02dc 	.word	0x02dc02dc
  406684:	026e02dc 	.word	0x026e02dc
  406688:	02dc021b 	.word	0x02dc021b
  40668c:	027302dc 	.word	0x027302dc
  406690:	01f502dc 	.word	0x01f502dc
  406694:	02090182 	.word	0x02090182
  406698:	02dc02d7 	.word	0x02dc02d7
  40669c:	02dc029a 	.word	0x02dc029a
  4066a0:	02dc00a7 	.word	0x02dc00a7
  4066a4:	022e02dc 	.word	0x022e02dc
  4066a8:	f10a 0a08 	add.w	sl, sl, #8
  4066ac:	9b03      	ldr	r3, [sp, #12]
  4066ae:	442b      	add	r3, r5
  4066b0:	9303      	str	r3, [sp, #12]
  4066b2:	e786      	b.n	4065c2 <_vfiprintf_r+0xc2>
  4066b4:	4659      	mov	r1, fp
  4066b6:	9806      	ldr	r0, [sp, #24]
  4066b8:	f000 fdac 	bl	407214 <__swsetup_r>
  4066bc:	bb18      	cbnz	r0, 406706 <_vfiprintf_r+0x206>
  4066be:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4066c2:	f001 031a 	and.w	r3, r1, #26
  4066c6:	2b0a      	cmp	r3, #10
  4066c8:	f47f af4b 	bne.w	406562 <_vfiprintf_r+0x62>
  4066cc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4066d0:	2b00      	cmp	r3, #0
  4066d2:	f6ff af46 	blt.w	406562 <_vfiprintf_r+0x62>
  4066d6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4066da:	07db      	lsls	r3, r3, #31
  4066dc:	d405      	bmi.n	4066ea <_vfiprintf_r+0x1ea>
  4066de:	058f      	lsls	r7, r1, #22
  4066e0:	d403      	bmi.n	4066ea <_vfiprintf_r+0x1ea>
  4066e2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4066e6:	f001 fac3 	bl	407c70 <__retarget_lock_release_recursive>
  4066ea:	462b      	mov	r3, r5
  4066ec:	4642      	mov	r2, r8
  4066ee:	4659      	mov	r1, fp
  4066f0:	9806      	ldr	r0, [sp, #24]
  4066f2:	f000 fd4d 	bl	407190 <__sbprintf>
  4066f6:	9003      	str	r0, [sp, #12]
  4066f8:	9803      	ldr	r0, [sp, #12]
  4066fa:	b02d      	add	sp, #180	; 0xb4
  4066fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406700:	f000 fef4 	bl	4074ec <__sinit>
  406704:	e709      	b.n	40651a <_vfiprintf_r+0x1a>
  406706:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40670a:	07d9      	lsls	r1, r3, #31
  40670c:	d404      	bmi.n	406718 <_vfiprintf_r+0x218>
  40670e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406712:	059a      	lsls	r2, r3, #22
  406714:	f140 84aa 	bpl.w	40706c <_vfiprintf_r+0xb6c>
  406718:	f04f 33ff 	mov.w	r3, #4294967295
  40671c:	9303      	str	r3, [sp, #12]
  40671e:	9803      	ldr	r0, [sp, #12]
  406720:	b02d      	add	sp, #180	; 0xb4
  406722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406726:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40672a:	f001 fa9f 	bl	407c6c <__retarget_lock_acquire_recursive>
  40672e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  406732:	b281      	uxth	r1, r0
  406734:	e6fb      	b.n	40652e <_vfiprintf_r+0x2e>
  406736:	4276      	negs	r6, r6
  406738:	9207      	str	r2, [sp, #28]
  40673a:	f043 0304 	orr.w	r3, r3, #4
  40673e:	f898 2000 	ldrb.w	r2, [r8]
  406742:	e74f      	b.n	4065e4 <_vfiprintf_r+0xe4>
  406744:	9608      	str	r6, [sp, #32]
  406746:	069e      	lsls	r6, r3, #26
  406748:	f100 8450 	bmi.w	406fec <_vfiprintf_r+0xaec>
  40674c:	9907      	ldr	r1, [sp, #28]
  40674e:	06dd      	lsls	r5, r3, #27
  406750:	460a      	mov	r2, r1
  406752:	f100 83ef 	bmi.w	406f34 <_vfiprintf_r+0xa34>
  406756:	0658      	lsls	r0, r3, #25
  406758:	f140 83ec 	bpl.w	406f34 <_vfiprintf_r+0xa34>
  40675c:	880e      	ldrh	r6, [r1, #0]
  40675e:	3104      	adds	r1, #4
  406760:	2700      	movs	r7, #0
  406762:	2201      	movs	r2, #1
  406764:	9107      	str	r1, [sp, #28]
  406766:	f04f 0100 	mov.w	r1, #0
  40676a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40676e:	2500      	movs	r5, #0
  406770:	1c61      	adds	r1, r4, #1
  406772:	f000 8116 	beq.w	4069a2 <_vfiprintf_r+0x4a2>
  406776:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40677a:	9102      	str	r1, [sp, #8]
  40677c:	ea56 0107 	orrs.w	r1, r6, r7
  406780:	f040 8114 	bne.w	4069ac <_vfiprintf_r+0x4ac>
  406784:	2c00      	cmp	r4, #0
  406786:	f040 835c 	bne.w	406e42 <_vfiprintf_r+0x942>
  40678a:	2a00      	cmp	r2, #0
  40678c:	f040 83b7 	bne.w	406efe <_vfiprintf_r+0x9fe>
  406790:	f013 0301 	ands.w	r3, r3, #1
  406794:	9305      	str	r3, [sp, #20]
  406796:	f000 8457 	beq.w	407048 <_vfiprintf_r+0xb48>
  40679a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40679e:	2330      	movs	r3, #48	; 0x30
  4067a0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4067a4:	9b05      	ldr	r3, [sp, #20]
  4067a6:	42a3      	cmp	r3, r4
  4067a8:	bfb8      	it	lt
  4067aa:	4623      	movlt	r3, r4
  4067ac:	9301      	str	r3, [sp, #4]
  4067ae:	b10d      	cbz	r5, 4067b4 <_vfiprintf_r+0x2b4>
  4067b0:	3301      	adds	r3, #1
  4067b2:	9301      	str	r3, [sp, #4]
  4067b4:	9b02      	ldr	r3, [sp, #8]
  4067b6:	f013 0302 	ands.w	r3, r3, #2
  4067ba:	9309      	str	r3, [sp, #36]	; 0x24
  4067bc:	d002      	beq.n	4067c4 <_vfiprintf_r+0x2c4>
  4067be:	9b01      	ldr	r3, [sp, #4]
  4067c0:	3302      	adds	r3, #2
  4067c2:	9301      	str	r3, [sp, #4]
  4067c4:	9b02      	ldr	r3, [sp, #8]
  4067c6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4067ca:	930a      	str	r3, [sp, #40]	; 0x28
  4067cc:	f040 8217 	bne.w	406bfe <_vfiprintf_r+0x6fe>
  4067d0:	9b08      	ldr	r3, [sp, #32]
  4067d2:	9a01      	ldr	r2, [sp, #4]
  4067d4:	1a9d      	subs	r5, r3, r2
  4067d6:	2d00      	cmp	r5, #0
  4067d8:	f340 8211 	ble.w	406bfe <_vfiprintf_r+0x6fe>
  4067dc:	2d10      	cmp	r5, #16
  4067de:	f340 8490 	ble.w	407102 <_vfiprintf_r+0xc02>
  4067e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4067e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4067e6:	4ec4      	ldr	r6, [pc, #784]	; (406af8 <_vfiprintf_r+0x5f8>)
  4067e8:	46d6      	mov	lr, sl
  4067ea:	2710      	movs	r7, #16
  4067ec:	46a2      	mov	sl, r4
  4067ee:	4619      	mov	r1, r3
  4067f0:	9c06      	ldr	r4, [sp, #24]
  4067f2:	e007      	b.n	406804 <_vfiprintf_r+0x304>
  4067f4:	f101 0c02 	add.w	ip, r1, #2
  4067f8:	f10e 0e08 	add.w	lr, lr, #8
  4067fc:	4601      	mov	r1, r0
  4067fe:	3d10      	subs	r5, #16
  406800:	2d10      	cmp	r5, #16
  406802:	dd11      	ble.n	406828 <_vfiprintf_r+0x328>
  406804:	1c48      	adds	r0, r1, #1
  406806:	3210      	adds	r2, #16
  406808:	2807      	cmp	r0, #7
  40680a:	9211      	str	r2, [sp, #68]	; 0x44
  40680c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  406810:	9010      	str	r0, [sp, #64]	; 0x40
  406812:	ddef      	ble.n	4067f4 <_vfiprintf_r+0x2f4>
  406814:	2a00      	cmp	r2, #0
  406816:	f040 81e4 	bne.w	406be2 <_vfiprintf_r+0x6e2>
  40681a:	3d10      	subs	r5, #16
  40681c:	2d10      	cmp	r5, #16
  40681e:	4611      	mov	r1, r2
  406820:	f04f 0c01 	mov.w	ip, #1
  406824:	46ce      	mov	lr, r9
  406826:	dced      	bgt.n	406804 <_vfiprintf_r+0x304>
  406828:	4654      	mov	r4, sl
  40682a:	4661      	mov	r1, ip
  40682c:	46f2      	mov	sl, lr
  40682e:	442a      	add	r2, r5
  406830:	2907      	cmp	r1, #7
  406832:	9211      	str	r2, [sp, #68]	; 0x44
  406834:	f8ca 6000 	str.w	r6, [sl]
  406838:	f8ca 5004 	str.w	r5, [sl, #4]
  40683c:	9110      	str	r1, [sp, #64]	; 0x40
  40683e:	f300 82ec 	bgt.w	406e1a <_vfiprintf_r+0x91a>
  406842:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406846:	f10a 0a08 	add.w	sl, sl, #8
  40684a:	1c48      	adds	r0, r1, #1
  40684c:	2d00      	cmp	r5, #0
  40684e:	f040 81de 	bne.w	406c0e <_vfiprintf_r+0x70e>
  406852:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406854:	2b00      	cmp	r3, #0
  406856:	f000 81f8 	beq.w	406c4a <_vfiprintf_r+0x74a>
  40685a:	3202      	adds	r2, #2
  40685c:	a90e      	add	r1, sp, #56	; 0x38
  40685e:	2302      	movs	r3, #2
  406860:	2807      	cmp	r0, #7
  406862:	9211      	str	r2, [sp, #68]	; 0x44
  406864:	9010      	str	r0, [sp, #64]	; 0x40
  406866:	e88a 000a 	stmia.w	sl, {r1, r3}
  40686a:	f340 81ea 	ble.w	406c42 <_vfiprintf_r+0x742>
  40686e:	2a00      	cmp	r2, #0
  406870:	f040 838c 	bne.w	406f8c <_vfiprintf_r+0xa8c>
  406874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406876:	2b80      	cmp	r3, #128	; 0x80
  406878:	f04f 0001 	mov.w	r0, #1
  40687c:	4611      	mov	r1, r2
  40687e:	46ca      	mov	sl, r9
  406880:	f040 81e7 	bne.w	406c52 <_vfiprintf_r+0x752>
  406884:	9b08      	ldr	r3, [sp, #32]
  406886:	9d01      	ldr	r5, [sp, #4]
  406888:	1b5e      	subs	r6, r3, r5
  40688a:	2e00      	cmp	r6, #0
  40688c:	f340 81e1 	ble.w	406c52 <_vfiprintf_r+0x752>
  406890:	2e10      	cmp	r6, #16
  406892:	4d9a      	ldr	r5, [pc, #616]	; (406afc <_vfiprintf_r+0x5fc>)
  406894:	f340 8450 	ble.w	407138 <_vfiprintf_r+0xc38>
  406898:	46d4      	mov	ip, sl
  40689a:	2710      	movs	r7, #16
  40689c:	46a2      	mov	sl, r4
  40689e:	9c06      	ldr	r4, [sp, #24]
  4068a0:	e007      	b.n	4068b2 <_vfiprintf_r+0x3b2>
  4068a2:	f101 0e02 	add.w	lr, r1, #2
  4068a6:	f10c 0c08 	add.w	ip, ip, #8
  4068aa:	4601      	mov	r1, r0
  4068ac:	3e10      	subs	r6, #16
  4068ae:	2e10      	cmp	r6, #16
  4068b0:	dd11      	ble.n	4068d6 <_vfiprintf_r+0x3d6>
  4068b2:	1c48      	adds	r0, r1, #1
  4068b4:	3210      	adds	r2, #16
  4068b6:	2807      	cmp	r0, #7
  4068b8:	9211      	str	r2, [sp, #68]	; 0x44
  4068ba:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4068be:	9010      	str	r0, [sp, #64]	; 0x40
  4068c0:	ddef      	ble.n	4068a2 <_vfiprintf_r+0x3a2>
  4068c2:	2a00      	cmp	r2, #0
  4068c4:	f040 829d 	bne.w	406e02 <_vfiprintf_r+0x902>
  4068c8:	3e10      	subs	r6, #16
  4068ca:	2e10      	cmp	r6, #16
  4068cc:	f04f 0e01 	mov.w	lr, #1
  4068d0:	4611      	mov	r1, r2
  4068d2:	46cc      	mov	ip, r9
  4068d4:	dced      	bgt.n	4068b2 <_vfiprintf_r+0x3b2>
  4068d6:	4654      	mov	r4, sl
  4068d8:	46e2      	mov	sl, ip
  4068da:	4432      	add	r2, r6
  4068dc:	f1be 0f07 	cmp.w	lr, #7
  4068e0:	9211      	str	r2, [sp, #68]	; 0x44
  4068e2:	e88a 0060 	stmia.w	sl, {r5, r6}
  4068e6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4068ea:	f300 8369 	bgt.w	406fc0 <_vfiprintf_r+0xac0>
  4068ee:	f10a 0a08 	add.w	sl, sl, #8
  4068f2:	f10e 0001 	add.w	r0, lr, #1
  4068f6:	4671      	mov	r1, lr
  4068f8:	e1ab      	b.n	406c52 <_vfiprintf_r+0x752>
  4068fa:	9608      	str	r6, [sp, #32]
  4068fc:	f013 0220 	ands.w	r2, r3, #32
  406900:	f040 838c 	bne.w	40701c <_vfiprintf_r+0xb1c>
  406904:	f013 0110 	ands.w	r1, r3, #16
  406908:	f040 831a 	bne.w	406f40 <_vfiprintf_r+0xa40>
  40690c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  406910:	f000 8316 	beq.w	406f40 <_vfiprintf_r+0xa40>
  406914:	9807      	ldr	r0, [sp, #28]
  406916:	460a      	mov	r2, r1
  406918:	4601      	mov	r1, r0
  40691a:	3104      	adds	r1, #4
  40691c:	8806      	ldrh	r6, [r0, #0]
  40691e:	9107      	str	r1, [sp, #28]
  406920:	2700      	movs	r7, #0
  406922:	e720      	b.n	406766 <_vfiprintf_r+0x266>
  406924:	9608      	str	r6, [sp, #32]
  406926:	f043 0310 	orr.w	r3, r3, #16
  40692a:	e7e7      	b.n	4068fc <_vfiprintf_r+0x3fc>
  40692c:	9608      	str	r6, [sp, #32]
  40692e:	f043 0310 	orr.w	r3, r3, #16
  406932:	e708      	b.n	406746 <_vfiprintf_r+0x246>
  406934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406938:	f898 2000 	ldrb.w	r2, [r8]
  40693c:	e652      	b.n	4065e4 <_vfiprintf_r+0xe4>
  40693e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406942:	2600      	movs	r6, #0
  406944:	f818 2b01 	ldrb.w	r2, [r8], #1
  406948:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40694c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  406950:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406954:	2909      	cmp	r1, #9
  406956:	d9f5      	bls.n	406944 <_vfiprintf_r+0x444>
  406958:	e646      	b.n	4065e8 <_vfiprintf_r+0xe8>
  40695a:	9608      	str	r6, [sp, #32]
  40695c:	2800      	cmp	r0, #0
  40695e:	f040 8408 	bne.w	407172 <_vfiprintf_r+0xc72>
  406962:	f043 0310 	orr.w	r3, r3, #16
  406966:	069e      	lsls	r6, r3, #26
  406968:	f100 834c 	bmi.w	407004 <_vfiprintf_r+0xb04>
  40696c:	06dd      	lsls	r5, r3, #27
  40696e:	f100 82f3 	bmi.w	406f58 <_vfiprintf_r+0xa58>
  406972:	0658      	lsls	r0, r3, #25
  406974:	f140 82f0 	bpl.w	406f58 <_vfiprintf_r+0xa58>
  406978:	9d07      	ldr	r5, [sp, #28]
  40697a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40697e:	462a      	mov	r2, r5
  406980:	17f7      	asrs	r7, r6, #31
  406982:	3204      	adds	r2, #4
  406984:	4630      	mov	r0, r6
  406986:	4639      	mov	r1, r7
  406988:	9207      	str	r2, [sp, #28]
  40698a:	2800      	cmp	r0, #0
  40698c:	f171 0200 	sbcs.w	r2, r1, #0
  406990:	f2c0 835d 	blt.w	40704e <_vfiprintf_r+0xb4e>
  406994:	1c61      	adds	r1, r4, #1
  406996:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40699a:	f04f 0201 	mov.w	r2, #1
  40699e:	f47f aeea 	bne.w	406776 <_vfiprintf_r+0x276>
  4069a2:	ea56 0107 	orrs.w	r1, r6, r7
  4069a6:	f000 824d 	beq.w	406e44 <_vfiprintf_r+0x944>
  4069aa:	9302      	str	r3, [sp, #8]
  4069ac:	2a01      	cmp	r2, #1
  4069ae:	f000 828c 	beq.w	406eca <_vfiprintf_r+0x9ca>
  4069b2:	2a02      	cmp	r2, #2
  4069b4:	f040 825c 	bne.w	406e70 <_vfiprintf_r+0x970>
  4069b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4069ba:	46cb      	mov	fp, r9
  4069bc:	0933      	lsrs	r3, r6, #4
  4069be:	f006 010f 	and.w	r1, r6, #15
  4069c2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4069c6:	093a      	lsrs	r2, r7, #4
  4069c8:	461e      	mov	r6, r3
  4069ca:	4617      	mov	r7, r2
  4069cc:	5c43      	ldrb	r3, [r0, r1]
  4069ce:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4069d2:	ea56 0307 	orrs.w	r3, r6, r7
  4069d6:	d1f1      	bne.n	4069bc <_vfiprintf_r+0x4bc>
  4069d8:	eba9 030b 	sub.w	r3, r9, fp
  4069dc:	9305      	str	r3, [sp, #20]
  4069de:	e6e1      	b.n	4067a4 <_vfiprintf_r+0x2a4>
  4069e0:	2800      	cmp	r0, #0
  4069e2:	f040 83c0 	bne.w	407166 <_vfiprintf_r+0xc66>
  4069e6:	0699      	lsls	r1, r3, #26
  4069e8:	f100 8367 	bmi.w	4070ba <_vfiprintf_r+0xbba>
  4069ec:	06da      	lsls	r2, r3, #27
  4069ee:	f100 80f1 	bmi.w	406bd4 <_vfiprintf_r+0x6d4>
  4069f2:	065b      	lsls	r3, r3, #25
  4069f4:	f140 80ee 	bpl.w	406bd4 <_vfiprintf_r+0x6d4>
  4069f8:	9a07      	ldr	r2, [sp, #28]
  4069fa:	6813      	ldr	r3, [r2, #0]
  4069fc:	3204      	adds	r2, #4
  4069fe:	9207      	str	r2, [sp, #28]
  406a00:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  406a04:	801a      	strh	r2, [r3, #0]
  406a06:	e5b8      	b.n	40657a <_vfiprintf_r+0x7a>
  406a08:	9807      	ldr	r0, [sp, #28]
  406a0a:	4a3d      	ldr	r2, [pc, #244]	; (406b00 <_vfiprintf_r+0x600>)
  406a0c:	9608      	str	r6, [sp, #32]
  406a0e:	920b      	str	r2, [sp, #44]	; 0x2c
  406a10:	6806      	ldr	r6, [r0, #0]
  406a12:	2278      	movs	r2, #120	; 0x78
  406a14:	2130      	movs	r1, #48	; 0x30
  406a16:	3004      	adds	r0, #4
  406a18:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406a1c:	f043 0302 	orr.w	r3, r3, #2
  406a20:	9007      	str	r0, [sp, #28]
  406a22:	2700      	movs	r7, #0
  406a24:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406a28:	2202      	movs	r2, #2
  406a2a:	e69c      	b.n	406766 <_vfiprintf_r+0x266>
  406a2c:	9608      	str	r6, [sp, #32]
  406a2e:	2800      	cmp	r0, #0
  406a30:	d099      	beq.n	406966 <_vfiprintf_r+0x466>
  406a32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406a36:	e796      	b.n	406966 <_vfiprintf_r+0x466>
  406a38:	f898 2000 	ldrb.w	r2, [r8]
  406a3c:	2d00      	cmp	r5, #0
  406a3e:	f47f add1 	bne.w	4065e4 <_vfiprintf_r+0xe4>
  406a42:	2001      	movs	r0, #1
  406a44:	2520      	movs	r5, #32
  406a46:	e5cd      	b.n	4065e4 <_vfiprintf_r+0xe4>
  406a48:	f043 0301 	orr.w	r3, r3, #1
  406a4c:	f898 2000 	ldrb.w	r2, [r8]
  406a50:	e5c8      	b.n	4065e4 <_vfiprintf_r+0xe4>
  406a52:	9608      	str	r6, [sp, #32]
  406a54:	2800      	cmp	r0, #0
  406a56:	f040 8393 	bne.w	407180 <_vfiprintf_r+0xc80>
  406a5a:	4929      	ldr	r1, [pc, #164]	; (406b00 <_vfiprintf_r+0x600>)
  406a5c:	910b      	str	r1, [sp, #44]	; 0x2c
  406a5e:	069f      	lsls	r7, r3, #26
  406a60:	f100 82e8 	bmi.w	407034 <_vfiprintf_r+0xb34>
  406a64:	9807      	ldr	r0, [sp, #28]
  406a66:	06de      	lsls	r6, r3, #27
  406a68:	4601      	mov	r1, r0
  406a6a:	f100 8270 	bmi.w	406f4e <_vfiprintf_r+0xa4e>
  406a6e:	065d      	lsls	r5, r3, #25
  406a70:	f140 826d 	bpl.w	406f4e <_vfiprintf_r+0xa4e>
  406a74:	3104      	adds	r1, #4
  406a76:	8806      	ldrh	r6, [r0, #0]
  406a78:	9107      	str	r1, [sp, #28]
  406a7a:	2700      	movs	r7, #0
  406a7c:	07d8      	lsls	r0, r3, #31
  406a7e:	f140 8222 	bpl.w	406ec6 <_vfiprintf_r+0x9c6>
  406a82:	ea56 0107 	orrs.w	r1, r6, r7
  406a86:	f000 821e 	beq.w	406ec6 <_vfiprintf_r+0x9c6>
  406a8a:	2130      	movs	r1, #48	; 0x30
  406a8c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406a90:	f043 0302 	orr.w	r3, r3, #2
  406a94:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406a98:	2202      	movs	r2, #2
  406a9a:	e664      	b.n	406766 <_vfiprintf_r+0x266>
  406a9c:	9608      	str	r6, [sp, #32]
  406a9e:	2800      	cmp	r0, #0
  406aa0:	f040 836b 	bne.w	40717a <_vfiprintf_r+0xc7a>
  406aa4:	4917      	ldr	r1, [pc, #92]	; (406b04 <_vfiprintf_r+0x604>)
  406aa6:	910b      	str	r1, [sp, #44]	; 0x2c
  406aa8:	e7d9      	b.n	406a5e <_vfiprintf_r+0x55e>
  406aaa:	9907      	ldr	r1, [sp, #28]
  406aac:	9608      	str	r6, [sp, #32]
  406aae:	680a      	ldr	r2, [r1, #0]
  406ab0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406ab4:	f04f 0000 	mov.w	r0, #0
  406ab8:	460a      	mov	r2, r1
  406aba:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  406abe:	3204      	adds	r2, #4
  406ac0:	2001      	movs	r0, #1
  406ac2:	9001      	str	r0, [sp, #4]
  406ac4:	9207      	str	r2, [sp, #28]
  406ac6:	9005      	str	r0, [sp, #20]
  406ac8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406acc:	9302      	str	r3, [sp, #8]
  406ace:	2400      	movs	r4, #0
  406ad0:	e670      	b.n	4067b4 <_vfiprintf_r+0x2b4>
  406ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406ad6:	f898 2000 	ldrb.w	r2, [r8]
  406ada:	e583      	b.n	4065e4 <_vfiprintf_r+0xe4>
  406adc:	f898 2000 	ldrb.w	r2, [r8]
  406ae0:	2a6c      	cmp	r2, #108	; 0x6c
  406ae2:	bf03      	ittte	eq
  406ae4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406ae8:	f043 0320 	orreq.w	r3, r3, #32
  406aec:	f108 0801 	addeq.w	r8, r8, #1
  406af0:	f043 0310 	orrne.w	r3, r3, #16
  406af4:	e576      	b.n	4065e4 <_vfiprintf_r+0xe4>
  406af6:	bf00      	nop
  406af8:	004090a8 	.word	0x004090a8
  406afc:	004090b8 	.word	0x004090b8
  406b00:	0040908c 	.word	0x0040908c
  406b04:	00409078 	.word	0x00409078
  406b08:	9907      	ldr	r1, [sp, #28]
  406b0a:	680e      	ldr	r6, [r1, #0]
  406b0c:	460a      	mov	r2, r1
  406b0e:	2e00      	cmp	r6, #0
  406b10:	f102 0204 	add.w	r2, r2, #4
  406b14:	f6ff ae0f 	blt.w	406736 <_vfiprintf_r+0x236>
  406b18:	9207      	str	r2, [sp, #28]
  406b1a:	f898 2000 	ldrb.w	r2, [r8]
  406b1e:	e561      	b.n	4065e4 <_vfiprintf_r+0xe4>
  406b20:	f898 2000 	ldrb.w	r2, [r8]
  406b24:	2001      	movs	r0, #1
  406b26:	252b      	movs	r5, #43	; 0x2b
  406b28:	e55c      	b.n	4065e4 <_vfiprintf_r+0xe4>
  406b2a:	9907      	ldr	r1, [sp, #28]
  406b2c:	9608      	str	r6, [sp, #32]
  406b2e:	f8d1 b000 	ldr.w	fp, [r1]
  406b32:	f04f 0200 	mov.w	r2, #0
  406b36:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406b3a:	1d0e      	adds	r6, r1, #4
  406b3c:	f1bb 0f00 	cmp.w	fp, #0
  406b40:	f000 82e5 	beq.w	40710e <_vfiprintf_r+0xc0e>
  406b44:	1c67      	adds	r7, r4, #1
  406b46:	f000 82c4 	beq.w	4070d2 <_vfiprintf_r+0xbd2>
  406b4a:	4622      	mov	r2, r4
  406b4c:	2100      	movs	r1, #0
  406b4e:	4658      	mov	r0, fp
  406b50:	9301      	str	r3, [sp, #4]
  406b52:	f001 fbd5 	bl	408300 <memchr>
  406b56:	9b01      	ldr	r3, [sp, #4]
  406b58:	2800      	cmp	r0, #0
  406b5a:	f000 82e5 	beq.w	407128 <_vfiprintf_r+0xc28>
  406b5e:	eba0 020b 	sub.w	r2, r0, fp
  406b62:	9205      	str	r2, [sp, #20]
  406b64:	9607      	str	r6, [sp, #28]
  406b66:	9302      	str	r3, [sp, #8]
  406b68:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406b6c:	2400      	movs	r4, #0
  406b6e:	e619      	b.n	4067a4 <_vfiprintf_r+0x2a4>
  406b70:	f898 2000 	ldrb.w	r2, [r8]
  406b74:	2a2a      	cmp	r2, #42	; 0x2a
  406b76:	f108 0701 	add.w	r7, r8, #1
  406b7a:	f000 82e9 	beq.w	407150 <_vfiprintf_r+0xc50>
  406b7e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406b82:	2909      	cmp	r1, #9
  406b84:	46b8      	mov	r8, r7
  406b86:	f04f 0400 	mov.w	r4, #0
  406b8a:	f63f ad2d 	bhi.w	4065e8 <_vfiprintf_r+0xe8>
  406b8e:	f818 2b01 	ldrb.w	r2, [r8], #1
  406b92:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406b96:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406b9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406b9e:	2909      	cmp	r1, #9
  406ba0:	d9f5      	bls.n	406b8e <_vfiprintf_r+0x68e>
  406ba2:	e521      	b.n	4065e8 <_vfiprintf_r+0xe8>
  406ba4:	f043 0320 	orr.w	r3, r3, #32
  406ba8:	f898 2000 	ldrb.w	r2, [r8]
  406bac:	e51a      	b.n	4065e4 <_vfiprintf_r+0xe4>
  406bae:	9608      	str	r6, [sp, #32]
  406bb0:	2800      	cmp	r0, #0
  406bb2:	f040 82db 	bne.w	40716c <_vfiprintf_r+0xc6c>
  406bb6:	2a00      	cmp	r2, #0
  406bb8:	f000 80e7 	beq.w	406d8a <_vfiprintf_r+0x88a>
  406bbc:	2101      	movs	r1, #1
  406bbe:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406bc2:	f04f 0200 	mov.w	r2, #0
  406bc6:	9101      	str	r1, [sp, #4]
  406bc8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406bcc:	9105      	str	r1, [sp, #20]
  406bce:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406bd2:	e77b      	b.n	406acc <_vfiprintf_r+0x5cc>
  406bd4:	9a07      	ldr	r2, [sp, #28]
  406bd6:	6813      	ldr	r3, [r2, #0]
  406bd8:	3204      	adds	r2, #4
  406bda:	9207      	str	r2, [sp, #28]
  406bdc:	9a03      	ldr	r2, [sp, #12]
  406bde:	601a      	str	r2, [r3, #0]
  406be0:	e4cb      	b.n	40657a <_vfiprintf_r+0x7a>
  406be2:	aa0f      	add	r2, sp, #60	; 0x3c
  406be4:	9904      	ldr	r1, [sp, #16]
  406be6:	4620      	mov	r0, r4
  406be8:	f7ff fc4a 	bl	406480 <__sprint_r.part.0>
  406bec:	2800      	cmp	r0, #0
  406bee:	f040 8139 	bne.w	406e64 <_vfiprintf_r+0x964>
  406bf2:	9910      	ldr	r1, [sp, #64]	; 0x40
  406bf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406bf6:	f101 0c01 	add.w	ip, r1, #1
  406bfa:	46ce      	mov	lr, r9
  406bfc:	e5ff      	b.n	4067fe <_vfiprintf_r+0x2fe>
  406bfe:	9910      	ldr	r1, [sp, #64]	; 0x40
  406c00:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c02:	1c48      	adds	r0, r1, #1
  406c04:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406c08:	2d00      	cmp	r5, #0
  406c0a:	f43f ae22 	beq.w	406852 <_vfiprintf_r+0x352>
  406c0e:	3201      	adds	r2, #1
  406c10:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  406c14:	2101      	movs	r1, #1
  406c16:	2807      	cmp	r0, #7
  406c18:	9211      	str	r2, [sp, #68]	; 0x44
  406c1a:	9010      	str	r0, [sp, #64]	; 0x40
  406c1c:	f8ca 5000 	str.w	r5, [sl]
  406c20:	f8ca 1004 	str.w	r1, [sl, #4]
  406c24:	f340 8108 	ble.w	406e38 <_vfiprintf_r+0x938>
  406c28:	2a00      	cmp	r2, #0
  406c2a:	f040 81bc 	bne.w	406fa6 <_vfiprintf_r+0xaa6>
  406c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406c30:	2b00      	cmp	r3, #0
  406c32:	f43f ae1f 	beq.w	406874 <_vfiprintf_r+0x374>
  406c36:	ab0e      	add	r3, sp, #56	; 0x38
  406c38:	2202      	movs	r2, #2
  406c3a:	4608      	mov	r0, r1
  406c3c:	931c      	str	r3, [sp, #112]	; 0x70
  406c3e:	921d      	str	r2, [sp, #116]	; 0x74
  406c40:	46ca      	mov	sl, r9
  406c42:	4601      	mov	r1, r0
  406c44:	f10a 0a08 	add.w	sl, sl, #8
  406c48:	3001      	adds	r0, #1
  406c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c4c:	2b80      	cmp	r3, #128	; 0x80
  406c4e:	f43f ae19 	beq.w	406884 <_vfiprintf_r+0x384>
  406c52:	9b05      	ldr	r3, [sp, #20]
  406c54:	1ae4      	subs	r4, r4, r3
  406c56:	2c00      	cmp	r4, #0
  406c58:	dd2e      	ble.n	406cb8 <_vfiprintf_r+0x7b8>
  406c5a:	2c10      	cmp	r4, #16
  406c5c:	4db3      	ldr	r5, [pc, #716]	; (406f2c <_vfiprintf_r+0xa2c>)
  406c5e:	dd1e      	ble.n	406c9e <_vfiprintf_r+0x79e>
  406c60:	46d6      	mov	lr, sl
  406c62:	2610      	movs	r6, #16
  406c64:	9f06      	ldr	r7, [sp, #24]
  406c66:	f8dd a010 	ldr.w	sl, [sp, #16]
  406c6a:	e006      	b.n	406c7a <_vfiprintf_r+0x77a>
  406c6c:	1c88      	adds	r0, r1, #2
  406c6e:	f10e 0e08 	add.w	lr, lr, #8
  406c72:	4619      	mov	r1, r3
  406c74:	3c10      	subs	r4, #16
  406c76:	2c10      	cmp	r4, #16
  406c78:	dd10      	ble.n	406c9c <_vfiprintf_r+0x79c>
  406c7a:	1c4b      	adds	r3, r1, #1
  406c7c:	3210      	adds	r2, #16
  406c7e:	2b07      	cmp	r3, #7
  406c80:	9211      	str	r2, [sp, #68]	; 0x44
  406c82:	e88e 0060 	stmia.w	lr, {r5, r6}
  406c86:	9310      	str	r3, [sp, #64]	; 0x40
  406c88:	ddf0      	ble.n	406c6c <_vfiprintf_r+0x76c>
  406c8a:	2a00      	cmp	r2, #0
  406c8c:	d165      	bne.n	406d5a <_vfiprintf_r+0x85a>
  406c8e:	3c10      	subs	r4, #16
  406c90:	2c10      	cmp	r4, #16
  406c92:	f04f 0001 	mov.w	r0, #1
  406c96:	4611      	mov	r1, r2
  406c98:	46ce      	mov	lr, r9
  406c9a:	dcee      	bgt.n	406c7a <_vfiprintf_r+0x77a>
  406c9c:	46f2      	mov	sl, lr
  406c9e:	4422      	add	r2, r4
  406ca0:	2807      	cmp	r0, #7
  406ca2:	9211      	str	r2, [sp, #68]	; 0x44
  406ca4:	f8ca 5000 	str.w	r5, [sl]
  406ca8:	f8ca 4004 	str.w	r4, [sl, #4]
  406cac:	9010      	str	r0, [sp, #64]	; 0x40
  406cae:	f300 8085 	bgt.w	406dbc <_vfiprintf_r+0x8bc>
  406cb2:	f10a 0a08 	add.w	sl, sl, #8
  406cb6:	3001      	adds	r0, #1
  406cb8:	9905      	ldr	r1, [sp, #20]
  406cba:	f8ca b000 	str.w	fp, [sl]
  406cbe:	440a      	add	r2, r1
  406cc0:	2807      	cmp	r0, #7
  406cc2:	9211      	str	r2, [sp, #68]	; 0x44
  406cc4:	f8ca 1004 	str.w	r1, [sl, #4]
  406cc8:	9010      	str	r0, [sp, #64]	; 0x40
  406cca:	f340 8082 	ble.w	406dd2 <_vfiprintf_r+0x8d2>
  406cce:	2a00      	cmp	r2, #0
  406cd0:	f040 8118 	bne.w	406f04 <_vfiprintf_r+0xa04>
  406cd4:	9b02      	ldr	r3, [sp, #8]
  406cd6:	9210      	str	r2, [sp, #64]	; 0x40
  406cd8:	0758      	lsls	r0, r3, #29
  406cda:	d535      	bpl.n	406d48 <_vfiprintf_r+0x848>
  406cdc:	9b08      	ldr	r3, [sp, #32]
  406cde:	9901      	ldr	r1, [sp, #4]
  406ce0:	1a5c      	subs	r4, r3, r1
  406ce2:	2c00      	cmp	r4, #0
  406ce4:	f340 80e7 	ble.w	406eb6 <_vfiprintf_r+0x9b6>
  406ce8:	46ca      	mov	sl, r9
  406cea:	2c10      	cmp	r4, #16
  406cec:	f340 8218 	ble.w	407120 <_vfiprintf_r+0xc20>
  406cf0:	9910      	ldr	r1, [sp, #64]	; 0x40
  406cf2:	4e8f      	ldr	r6, [pc, #572]	; (406f30 <_vfiprintf_r+0xa30>)
  406cf4:	9f06      	ldr	r7, [sp, #24]
  406cf6:	f8dd b010 	ldr.w	fp, [sp, #16]
  406cfa:	2510      	movs	r5, #16
  406cfc:	e006      	b.n	406d0c <_vfiprintf_r+0x80c>
  406cfe:	1c88      	adds	r0, r1, #2
  406d00:	f10a 0a08 	add.w	sl, sl, #8
  406d04:	4619      	mov	r1, r3
  406d06:	3c10      	subs	r4, #16
  406d08:	2c10      	cmp	r4, #16
  406d0a:	dd11      	ble.n	406d30 <_vfiprintf_r+0x830>
  406d0c:	1c4b      	adds	r3, r1, #1
  406d0e:	3210      	adds	r2, #16
  406d10:	2b07      	cmp	r3, #7
  406d12:	9211      	str	r2, [sp, #68]	; 0x44
  406d14:	f8ca 6000 	str.w	r6, [sl]
  406d18:	f8ca 5004 	str.w	r5, [sl, #4]
  406d1c:	9310      	str	r3, [sp, #64]	; 0x40
  406d1e:	ddee      	ble.n	406cfe <_vfiprintf_r+0x7fe>
  406d20:	bb42      	cbnz	r2, 406d74 <_vfiprintf_r+0x874>
  406d22:	3c10      	subs	r4, #16
  406d24:	2c10      	cmp	r4, #16
  406d26:	f04f 0001 	mov.w	r0, #1
  406d2a:	4611      	mov	r1, r2
  406d2c:	46ca      	mov	sl, r9
  406d2e:	dced      	bgt.n	406d0c <_vfiprintf_r+0x80c>
  406d30:	4422      	add	r2, r4
  406d32:	2807      	cmp	r0, #7
  406d34:	9211      	str	r2, [sp, #68]	; 0x44
  406d36:	f8ca 6000 	str.w	r6, [sl]
  406d3a:	f8ca 4004 	str.w	r4, [sl, #4]
  406d3e:	9010      	str	r0, [sp, #64]	; 0x40
  406d40:	dd51      	ble.n	406de6 <_vfiprintf_r+0x8e6>
  406d42:	2a00      	cmp	r2, #0
  406d44:	f040 819b 	bne.w	40707e <_vfiprintf_r+0xb7e>
  406d48:	9b03      	ldr	r3, [sp, #12]
  406d4a:	9a08      	ldr	r2, [sp, #32]
  406d4c:	9901      	ldr	r1, [sp, #4]
  406d4e:	428a      	cmp	r2, r1
  406d50:	bfac      	ite	ge
  406d52:	189b      	addge	r3, r3, r2
  406d54:	185b      	addlt	r3, r3, r1
  406d56:	9303      	str	r3, [sp, #12]
  406d58:	e04e      	b.n	406df8 <_vfiprintf_r+0x8f8>
  406d5a:	aa0f      	add	r2, sp, #60	; 0x3c
  406d5c:	4651      	mov	r1, sl
  406d5e:	4638      	mov	r0, r7
  406d60:	f7ff fb8e 	bl	406480 <__sprint_r.part.0>
  406d64:	2800      	cmp	r0, #0
  406d66:	f040 813f 	bne.w	406fe8 <_vfiprintf_r+0xae8>
  406d6a:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d6e:	1c48      	adds	r0, r1, #1
  406d70:	46ce      	mov	lr, r9
  406d72:	e77f      	b.n	406c74 <_vfiprintf_r+0x774>
  406d74:	aa0f      	add	r2, sp, #60	; 0x3c
  406d76:	4659      	mov	r1, fp
  406d78:	4638      	mov	r0, r7
  406d7a:	f7ff fb81 	bl	406480 <__sprint_r.part.0>
  406d7e:	b960      	cbnz	r0, 406d9a <_vfiprintf_r+0x89a>
  406d80:	9910      	ldr	r1, [sp, #64]	; 0x40
  406d82:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d84:	1c48      	adds	r0, r1, #1
  406d86:	46ca      	mov	sl, r9
  406d88:	e7bd      	b.n	406d06 <_vfiprintf_r+0x806>
  406d8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406d8c:	f8dd b010 	ldr.w	fp, [sp, #16]
  406d90:	2b00      	cmp	r3, #0
  406d92:	f040 81d4 	bne.w	40713e <_vfiprintf_r+0xc3e>
  406d96:	2300      	movs	r3, #0
  406d98:	9310      	str	r3, [sp, #64]	; 0x40
  406d9a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406d9e:	f013 0f01 	tst.w	r3, #1
  406da2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406da6:	d102      	bne.n	406dae <_vfiprintf_r+0x8ae>
  406da8:	059a      	lsls	r2, r3, #22
  406daa:	f140 80de 	bpl.w	406f6a <_vfiprintf_r+0xa6a>
  406dae:	065b      	lsls	r3, r3, #25
  406db0:	f53f acb2 	bmi.w	406718 <_vfiprintf_r+0x218>
  406db4:	9803      	ldr	r0, [sp, #12]
  406db6:	b02d      	add	sp, #180	; 0xb4
  406db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406dbc:	2a00      	cmp	r2, #0
  406dbe:	f040 8106 	bne.w	406fce <_vfiprintf_r+0xace>
  406dc2:	9a05      	ldr	r2, [sp, #20]
  406dc4:	921d      	str	r2, [sp, #116]	; 0x74
  406dc6:	2301      	movs	r3, #1
  406dc8:	9211      	str	r2, [sp, #68]	; 0x44
  406dca:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  406dce:	9310      	str	r3, [sp, #64]	; 0x40
  406dd0:	46ca      	mov	sl, r9
  406dd2:	f10a 0a08 	add.w	sl, sl, #8
  406dd6:	9b02      	ldr	r3, [sp, #8]
  406dd8:	0759      	lsls	r1, r3, #29
  406dda:	d504      	bpl.n	406de6 <_vfiprintf_r+0x8e6>
  406ddc:	9b08      	ldr	r3, [sp, #32]
  406dde:	9901      	ldr	r1, [sp, #4]
  406de0:	1a5c      	subs	r4, r3, r1
  406de2:	2c00      	cmp	r4, #0
  406de4:	dc81      	bgt.n	406cea <_vfiprintf_r+0x7ea>
  406de6:	9b03      	ldr	r3, [sp, #12]
  406de8:	9908      	ldr	r1, [sp, #32]
  406dea:	9801      	ldr	r0, [sp, #4]
  406dec:	4281      	cmp	r1, r0
  406dee:	bfac      	ite	ge
  406df0:	185b      	addge	r3, r3, r1
  406df2:	181b      	addlt	r3, r3, r0
  406df4:	9303      	str	r3, [sp, #12]
  406df6:	bb72      	cbnz	r2, 406e56 <_vfiprintf_r+0x956>
  406df8:	2300      	movs	r3, #0
  406dfa:	9310      	str	r3, [sp, #64]	; 0x40
  406dfc:	46ca      	mov	sl, r9
  406dfe:	f7ff bbbc 	b.w	40657a <_vfiprintf_r+0x7a>
  406e02:	aa0f      	add	r2, sp, #60	; 0x3c
  406e04:	9904      	ldr	r1, [sp, #16]
  406e06:	4620      	mov	r0, r4
  406e08:	f7ff fb3a 	bl	406480 <__sprint_r.part.0>
  406e0c:	bb50      	cbnz	r0, 406e64 <_vfiprintf_r+0x964>
  406e0e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406e10:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406e12:	f101 0e01 	add.w	lr, r1, #1
  406e16:	46cc      	mov	ip, r9
  406e18:	e548      	b.n	4068ac <_vfiprintf_r+0x3ac>
  406e1a:	2a00      	cmp	r2, #0
  406e1c:	f040 8140 	bne.w	4070a0 <_vfiprintf_r+0xba0>
  406e20:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  406e24:	2900      	cmp	r1, #0
  406e26:	f000 811b 	beq.w	407060 <_vfiprintf_r+0xb60>
  406e2a:	2201      	movs	r2, #1
  406e2c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406e30:	4610      	mov	r0, r2
  406e32:	921d      	str	r2, [sp, #116]	; 0x74
  406e34:	911c      	str	r1, [sp, #112]	; 0x70
  406e36:	46ca      	mov	sl, r9
  406e38:	4601      	mov	r1, r0
  406e3a:	f10a 0a08 	add.w	sl, sl, #8
  406e3e:	3001      	adds	r0, #1
  406e40:	e507      	b.n	406852 <_vfiprintf_r+0x352>
  406e42:	9b02      	ldr	r3, [sp, #8]
  406e44:	2a01      	cmp	r2, #1
  406e46:	f000 8098 	beq.w	406f7a <_vfiprintf_r+0xa7a>
  406e4a:	2a02      	cmp	r2, #2
  406e4c:	d10d      	bne.n	406e6a <_vfiprintf_r+0x96a>
  406e4e:	9302      	str	r3, [sp, #8]
  406e50:	2600      	movs	r6, #0
  406e52:	2700      	movs	r7, #0
  406e54:	e5b0      	b.n	4069b8 <_vfiprintf_r+0x4b8>
  406e56:	aa0f      	add	r2, sp, #60	; 0x3c
  406e58:	9904      	ldr	r1, [sp, #16]
  406e5a:	9806      	ldr	r0, [sp, #24]
  406e5c:	f7ff fb10 	bl	406480 <__sprint_r.part.0>
  406e60:	2800      	cmp	r0, #0
  406e62:	d0c9      	beq.n	406df8 <_vfiprintf_r+0x8f8>
  406e64:	f8dd b010 	ldr.w	fp, [sp, #16]
  406e68:	e797      	b.n	406d9a <_vfiprintf_r+0x89a>
  406e6a:	9302      	str	r3, [sp, #8]
  406e6c:	2600      	movs	r6, #0
  406e6e:	2700      	movs	r7, #0
  406e70:	4649      	mov	r1, r9
  406e72:	e000      	b.n	406e76 <_vfiprintf_r+0x976>
  406e74:	4659      	mov	r1, fp
  406e76:	08f2      	lsrs	r2, r6, #3
  406e78:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406e7c:	08f8      	lsrs	r0, r7, #3
  406e7e:	f006 0307 	and.w	r3, r6, #7
  406e82:	4607      	mov	r7, r0
  406e84:	4616      	mov	r6, r2
  406e86:	3330      	adds	r3, #48	; 0x30
  406e88:	ea56 0207 	orrs.w	r2, r6, r7
  406e8c:	f801 3c01 	strb.w	r3, [r1, #-1]
  406e90:	f101 3bff 	add.w	fp, r1, #4294967295
  406e94:	d1ee      	bne.n	406e74 <_vfiprintf_r+0x974>
  406e96:	9a02      	ldr	r2, [sp, #8]
  406e98:	07d6      	lsls	r6, r2, #31
  406e9a:	f57f ad9d 	bpl.w	4069d8 <_vfiprintf_r+0x4d8>
  406e9e:	2b30      	cmp	r3, #48	; 0x30
  406ea0:	f43f ad9a 	beq.w	4069d8 <_vfiprintf_r+0x4d8>
  406ea4:	3902      	subs	r1, #2
  406ea6:	2330      	movs	r3, #48	; 0x30
  406ea8:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406eac:	eba9 0301 	sub.w	r3, r9, r1
  406eb0:	9305      	str	r3, [sp, #20]
  406eb2:	468b      	mov	fp, r1
  406eb4:	e476      	b.n	4067a4 <_vfiprintf_r+0x2a4>
  406eb6:	9b03      	ldr	r3, [sp, #12]
  406eb8:	9a08      	ldr	r2, [sp, #32]
  406eba:	428a      	cmp	r2, r1
  406ebc:	bfac      	ite	ge
  406ebe:	189b      	addge	r3, r3, r2
  406ec0:	185b      	addlt	r3, r3, r1
  406ec2:	9303      	str	r3, [sp, #12]
  406ec4:	e798      	b.n	406df8 <_vfiprintf_r+0x8f8>
  406ec6:	2202      	movs	r2, #2
  406ec8:	e44d      	b.n	406766 <_vfiprintf_r+0x266>
  406eca:	2f00      	cmp	r7, #0
  406ecc:	bf08      	it	eq
  406ece:	2e0a      	cmpeq	r6, #10
  406ed0:	d352      	bcc.n	406f78 <_vfiprintf_r+0xa78>
  406ed2:	46cb      	mov	fp, r9
  406ed4:	4630      	mov	r0, r6
  406ed6:	4639      	mov	r1, r7
  406ed8:	220a      	movs	r2, #10
  406eda:	2300      	movs	r3, #0
  406edc:	f001 fe9a 	bl	408c14 <__aeabi_uldivmod>
  406ee0:	3230      	adds	r2, #48	; 0x30
  406ee2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  406ee6:	4630      	mov	r0, r6
  406ee8:	4639      	mov	r1, r7
  406eea:	2300      	movs	r3, #0
  406eec:	220a      	movs	r2, #10
  406eee:	f001 fe91 	bl	408c14 <__aeabi_uldivmod>
  406ef2:	4606      	mov	r6, r0
  406ef4:	460f      	mov	r7, r1
  406ef6:	ea56 0307 	orrs.w	r3, r6, r7
  406efa:	d1eb      	bne.n	406ed4 <_vfiprintf_r+0x9d4>
  406efc:	e56c      	b.n	4069d8 <_vfiprintf_r+0x4d8>
  406efe:	9405      	str	r4, [sp, #20]
  406f00:	46cb      	mov	fp, r9
  406f02:	e44f      	b.n	4067a4 <_vfiprintf_r+0x2a4>
  406f04:	aa0f      	add	r2, sp, #60	; 0x3c
  406f06:	9904      	ldr	r1, [sp, #16]
  406f08:	9806      	ldr	r0, [sp, #24]
  406f0a:	f7ff fab9 	bl	406480 <__sprint_r.part.0>
  406f0e:	2800      	cmp	r0, #0
  406f10:	d1a8      	bne.n	406e64 <_vfiprintf_r+0x964>
  406f12:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406f14:	46ca      	mov	sl, r9
  406f16:	e75e      	b.n	406dd6 <_vfiprintf_r+0x8d6>
  406f18:	aa0f      	add	r2, sp, #60	; 0x3c
  406f1a:	9904      	ldr	r1, [sp, #16]
  406f1c:	9806      	ldr	r0, [sp, #24]
  406f1e:	f7ff faaf 	bl	406480 <__sprint_r.part.0>
  406f22:	2800      	cmp	r0, #0
  406f24:	d19e      	bne.n	406e64 <_vfiprintf_r+0x964>
  406f26:	46ca      	mov	sl, r9
  406f28:	f7ff bbc0 	b.w	4066ac <_vfiprintf_r+0x1ac>
  406f2c:	004090b8 	.word	0x004090b8
  406f30:	004090a8 	.word	0x004090a8
  406f34:	3104      	adds	r1, #4
  406f36:	6816      	ldr	r6, [r2, #0]
  406f38:	9107      	str	r1, [sp, #28]
  406f3a:	2201      	movs	r2, #1
  406f3c:	2700      	movs	r7, #0
  406f3e:	e412      	b.n	406766 <_vfiprintf_r+0x266>
  406f40:	9807      	ldr	r0, [sp, #28]
  406f42:	4601      	mov	r1, r0
  406f44:	3104      	adds	r1, #4
  406f46:	6806      	ldr	r6, [r0, #0]
  406f48:	9107      	str	r1, [sp, #28]
  406f4a:	2700      	movs	r7, #0
  406f4c:	e40b      	b.n	406766 <_vfiprintf_r+0x266>
  406f4e:	680e      	ldr	r6, [r1, #0]
  406f50:	3104      	adds	r1, #4
  406f52:	9107      	str	r1, [sp, #28]
  406f54:	2700      	movs	r7, #0
  406f56:	e591      	b.n	406a7c <_vfiprintf_r+0x57c>
  406f58:	9907      	ldr	r1, [sp, #28]
  406f5a:	680e      	ldr	r6, [r1, #0]
  406f5c:	460a      	mov	r2, r1
  406f5e:	17f7      	asrs	r7, r6, #31
  406f60:	3204      	adds	r2, #4
  406f62:	9207      	str	r2, [sp, #28]
  406f64:	4630      	mov	r0, r6
  406f66:	4639      	mov	r1, r7
  406f68:	e50f      	b.n	40698a <_vfiprintf_r+0x48a>
  406f6a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406f6e:	f000 fe7f 	bl	407c70 <__retarget_lock_release_recursive>
  406f72:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406f76:	e71a      	b.n	406dae <_vfiprintf_r+0x8ae>
  406f78:	9b02      	ldr	r3, [sp, #8]
  406f7a:	9302      	str	r3, [sp, #8]
  406f7c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406f80:	3630      	adds	r6, #48	; 0x30
  406f82:	2301      	movs	r3, #1
  406f84:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406f88:	9305      	str	r3, [sp, #20]
  406f8a:	e40b      	b.n	4067a4 <_vfiprintf_r+0x2a4>
  406f8c:	aa0f      	add	r2, sp, #60	; 0x3c
  406f8e:	9904      	ldr	r1, [sp, #16]
  406f90:	9806      	ldr	r0, [sp, #24]
  406f92:	f7ff fa75 	bl	406480 <__sprint_r.part.0>
  406f96:	2800      	cmp	r0, #0
  406f98:	f47f af64 	bne.w	406e64 <_vfiprintf_r+0x964>
  406f9c:	9910      	ldr	r1, [sp, #64]	; 0x40
  406f9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406fa0:	1c48      	adds	r0, r1, #1
  406fa2:	46ca      	mov	sl, r9
  406fa4:	e651      	b.n	406c4a <_vfiprintf_r+0x74a>
  406fa6:	aa0f      	add	r2, sp, #60	; 0x3c
  406fa8:	9904      	ldr	r1, [sp, #16]
  406faa:	9806      	ldr	r0, [sp, #24]
  406fac:	f7ff fa68 	bl	406480 <__sprint_r.part.0>
  406fb0:	2800      	cmp	r0, #0
  406fb2:	f47f af57 	bne.w	406e64 <_vfiprintf_r+0x964>
  406fb6:	9910      	ldr	r1, [sp, #64]	; 0x40
  406fb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406fba:	1c48      	adds	r0, r1, #1
  406fbc:	46ca      	mov	sl, r9
  406fbe:	e448      	b.n	406852 <_vfiprintf_r+0x352>
  406fc0:	2a00      	cmp	r2, #0
  406fc2:	f040 8091 	bne.w	4070e8 <_vfiprintf_r+0xbe8>
  406fc6:	2001      	movs	r0, #1
  406fc8:	4611      	mov	r1, r2
  406fca:	46ca      	mov	sl, r9
  406fcc:	e641      	b.n	406c52 <_vfiprintf_r+0x752>
  406fce:	aa0f      	add	r2, sp, #60	; 0x3c
  406fd0:	9904      	ldr	r1, [sp, #16]
  406fd2:	9806      	ldr	r0, [sp, #24]
  406fd4:	f7ff fa54 	bl	406480 <__sprint_r.part.0>
  406fd8:	2800      	cmp	r0, #0
  406fda:	f47f af43 	bne.w	406e64 <_vfiprintf_r+0x964>
  406fde:	9810      	ldr	r0, [sp, #64]	; 0x40
  406fe0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406fe2:	3001      	adds	r0, #1
  406fe4:	46ca      	mov	sl, r9
  406fe6:	e667      	b.n	406cb8 <_vfiprintf_r+0x7b8>
  406fe8:	46d3      	mov	fp, sl
  406fea:	e6d6      	b.n	406d9a <_vfiprintf_r+0x89a>
  406fec:	9e07      	ldr	r6, [sp, #28]
  406fee:	3607      	adds	r6, #7
  406ff0:	f026 0207 	bic.w	r2, r6, #7
  406ff4:	f102 0108 	add.w	r1, r2, #8
  406ff8:	e9d2 6700 	ldrd	r6, r7, [r2]
  406ffc:	9107      	str	r1, [sp, #28]
  406ffe:	2201      	movs	r2, #1
  407000:	f7ff bbb1 	b.w	406766 <_vfiprintf_r+0x266>
  407004:	9e07      	ldr	r6, [sp, #28]
  407006:	3607      	adds	r6, #7
  407008:	f026 0607 	bic.w	r6, r6, #7
  40700c:	e9d6 0100 	ldrd	r0, r1, [r6]
  407010:	f106 0208 	add.w	r2, r6, #8
  407014:	9207      	str	r2, [sp, #28]
  407016:	4606      	mov	r6, r0
  407018:	460f      	mov	r7, r1
  40701a:	e4b6      	b.n	40698a <_vfiprintf_r+0x48a>
  40701c:	9e07      	ldr	r6, [sp, #28]
  40701e:	3607      	adds	r6, #7
  407020:	f026 0207 	bic.w	r2, r6, #7
  407024:	f102 0108 	add.w	r1, r2, #8
  407028:	e9d2 6700 	ldrd	r6, r7, [r2]
  40702c:	9107      	str	r1, [sp, #28]
  40702e:	2200      	movs	r2, #0
  407030:	f7ff bb99 	b.w	406766 <_vfiprintf_r+0x266>
  407034:	9e07      	ldr	r6, [sp, #28]
  407036:	3607      	adds	r6, #7
  407038:	f026 0107 	bic.w	r1, r6, #7
  40703c:	f101 0008 	add.w	r0, r1, #8
  407040:	9007      	str	r0, [sp, #28]
  407042:	e9d1 6700 	ldrd	r6, r7, [r1]
  407046:	e519      	b.n	406a7c <_vfiprintf_r+0x57c>
  407048:	46cb      	mov	fp, r9
  40704a:	f7ff bbab 	b.w	4067a4 <_vfiprintf_r+0x2a4>
  40704e:	252d      	movs	r5, #45	; 0x2d
  407050:	4276      	negs	r6, r6
  407052:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  407056:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40705a:	2201      	movs	r2, #1
  40705c:	f7ff bb88 	b.w	406770 <_vfiprintf_r+0x270>
  407060:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407062:	b9b3      	cbnz	r3, 407092 <_vfiprintf_r+0xb92>
  407064:	4611      	mov	r1, r2
  407066:	2001      	movs	r0, #1
  407068:	46ca      	mov	sl, r9
  40706a:	e5f2      	b.n	406c52 <_vfiprintf_r+0x752>
  40706c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407070:	f000 fdfe 	bl	407c70 <__retarget_lock_release_recursive>
  407074:	f04f 33ff 	mov.w	r3, #4294967295
  407078:	9303      	str	r3, [sp, #12]
  40707a:	f7ff bb50 	b.w	40671e <_vfiprintf_r+0x21e>
  40707e:	aa0f      	add	r2, sp, #60	; 0x3c
  407080:	9904      	ldr	r1, [sp, #16]
  407082:	9806      	ldr	r0, [sp, #24]
  407084:	f7ff f9fc 	bl	406480 <__sprint_r.part.0>
  407088:	2800      	cmp	r0, #0
  40708a:	f47f aeeb 	bne.w	406e64 <_vfiprintf_r+0x964>
  40708e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407090:	e6a9      	b.n	406de6 <_vfiprintf_r+0x8e6>
  407092:	ab0e      	add	r3, sp, #56	; 0x38
  407094:	2202      	movs	r2, #2
  407096:	931c      	str	r3, [sp, #112]	; 0x70
  407098:	921d      	str	r2, [sp, #116]	; 0x74
  40709a:	2001      	movs	r0, #1
  40709c:	46ca      	mov	sl, r9
  40709e:	e5d0      	b.n	406c42 <_vfiprintf_r+0x742>
  4070a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4070a2:	9904      	ldr	r1, [sp, #16]
  4070a4:	9806      	ldr	r0, [sp, #24]
  4070a6:	f7ff f9eb 	bl	406480 <__sprint_r.part.0>
  4070aa:	2800      	cmp	r0, #0
  4070ac:	f47f aeda 	bne.w	406e64 <_vfiprintf_r+0x964>
  4070b0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4070b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4070b4:	1c48      	adds	r0, r1, #1
  4070b6:	46ca      	mov	sl, r9
  4070b8:	e5a4      	b.n	406c04 <_vfiprintf_r+0x704>
  4070ba:	9a07      	ldr	r2, [sp, #28]
  4070bc:	9903      	ldr	r1, [sp, #12]
  4070be:	6813      	ldr	r3, [r2, #0]
  4070c0:	17cd      	asrs	r5, r1, #31
  4070c2:	4608      	mov	r0, r1
  4070c4:	3204      	adds	r2, #4
  4070c6:	4629      	mov	r1, r5
  4070c8:	9207      	str	r2, [sp, #28]
  4070ca:	e9c3 0100 	strd	r0, r1, [r3]
  4070ce:	f7ff ba54 	b.w	40657a <_vfiprintf_r+0x7a>
  4070d2:	4658      	mov	r0, fp
  4070d4:	9607      	str	r6, [sp, #28]
  4070d6:	9302      	str	r3, [sp, #8]
  4070d8:	f7ff f932 	bl	406340 <strlen>
  4070dc:	2400      	movs	r4, #0
  4070de:	9005      	str	r0, [sp, #20]
  4070e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4070e4:	f7ff bb5e 	b.w	4067a4 <_vfiprintf_r+0x2a4>
  4070e8:	aa0f      	add	r2, sp, #60	; 0x3c
  4070ea:	9904      	ldr	r1, [sp, #16]
  4070ec:	9806      	ldr	r0, [sp, #24]
  4070ee:	f7ff f9c7 	bl	406480 <__sprint_r.part.0>
  4070f2:	2800      	cmp	r0, #0
  4070f4:	f47f aeb6 	bne.w	406e64 <_vfiprintf_r+0x964>
  4070f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4070fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4070fc:	1c48      	adds	r0, r1, #1
  4070fe:	46ca      	mov	sl, r9
  407100:	e5a7      	b.n	406c52 <_vfiprintf_r+0x752>
  407102:	9910      	ldr	r1, [sp, #64]	; 0x40
  407104:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407106:	4e20      	ldr	r6, [pc, #128]	; (407188 <_vfiprintf_r+0xc88>)
  407108:	3101      	adds	r1, #1
  40710a:	f7ff bb90 	b.w	40682e <_vfiprintf_r+0x32e>
  40710e:	2c06      	cmp	r4, #6
  407110:	bf28      	it	cs
  407112:	2406      	movcs	r4, #6
  407114:	9405      	str	r4, [sp, #20]
  407116:	9607      	str	r6, [sp, #28]
  407118:	9401      	str	r4, [sp, #4]
  40711a:	f8df b070 	ldr.w	fp, [pc, #112]	; 40718c <_vfiprintf_r+0xc8c>
  40711e:	e4d5      	b.n	406acc <_vfiprintf_r+0x5cc>
  407120:	9810      	ldr	r0, [sp, #64]	; 0x40
  407122:	4e19      	ldr	r6, [pc, #100]	; (407188 <_vfiprintf_r+0xc88>)
  407124:	3001      	adds	r0, #1
  407126:	e603      	b.n	406d30 <_vfiprintf_r+0x830>
  407128:	9405      	str	r4, [sp, #20]
  40712a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40712e:	9607      	str	r6, [sp, #28]
  407130:	9302      	str	r3, [sp, #8]
  407132:	4604      	mov	r4, r0
  407134:	f7ff bb36 	b.w	4067a4 <_vfiprintf_r+0x2a4>
  407138:	4686      	mov	lr, r0
  40713a:	f7ff bbce 	b.w	4068da <_vfiprintf_r+0x3da>
  40713e:	9806      	ldr	r0, [sp, #24]
  407140:	aa0f      	add	r2, sp, #60	; 0x3c
  407142:	4659      	mov	r1, fp
  407144:	f7ff f99c 	bl	406480 <__sprint_r.part.0>
  407148:	2800      	cmp	r0, #0
  40714a:	f43f ae24 	beq.w	406d96 <_vfiprintf_r+0x896>
  40714e:	e624      	b.n	406d9a <_vfiprintf_r+0x89a>
  407150:	9907      	ldr	r1, [sp, #28]
  407152:	f898 2001 	ldrb.w	r2, [r8, #1]
  407156:	680c      	ldr	r4, [r1, #0]
  407158:	3104      	adds	r1, #4
  40715a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40715e:	46b8      	mov	r8, r7
  407160:	9107      	str	r1, [sp, #28]
  407162:	f7ff ba3f 	b.w	4065e4 <_vfiprintf_r+0xe4>
  407166:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40716a:	e43c      	b.n	4069e6 <_vfiprintf_r+0x4e6>
  40716c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407170:	e521      	b.n	406bb6 <_vfiprintf_r+0x6b6>
  407172:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407176:	f7ff bbf4 	b.w	406962 <_vfiprintf_r+0x462>
  40717a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40717e:	e491      	b.n	406aa4 <_vfiprintf_r+0x5a4>
  407180:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407184:	e469      	b.n	406a5a <_vfiprintf_r+0x55a>
  407186:	bf00      	nop
  407188:	004090a8 	.word	0x004090a8
  40718c:	004090a0 	.word	0x004090a0

00407190 <__sbprintf>:
  407190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407194:	460c      	mov	r4, r1
  407196:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40719a:	8989      	ldrh	r1, [r1, #12]
  40719c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40719e:	89e5      	ldrh	r5, [r4, #14]
  4071a0:	9619      	str	r6, [sp, #100]	; 0x64
  4071a2:	f021 0102 	bic.w	r1, r1, #2
  4071a6:	4606      	mov	r6, r0
  4071a8:	69e0      	ldr	r0, [r4, #28]
  4071aa:	f8ad 100c 	strh.w	r1, [sp, #12]
  4071ae:	4617      	mov	r7, r2
  4071b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4071b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4071b6:	f8ad 500e 	strh.w	r5, [sp, #14]
  4071ba:	4698      	mov	r8, r3
  4071bc:	ad1a      	add	r5, sp, #104	; 0x68
  4071be:	2300      	movs	r3, #0
  4071c0:	9007      	str	r0, [sp, #28]
  4071c2:	a816      	add	r0, sp, #88	; 0x58
  4071c4:	9209      	str	r2, [sp, #36]	; 0x24
  4071c6:	9306      	str	r3, [sp, #24]
  4071c8:	9500      	str	r5, [sp, #0]
  4071ca:	9504      	str	r5, [sp, #16]
  4071cc:	9102      	str	r1, [sp, #8]
  4071ce:	9105      	str	r1, [sp, #20]
  4071d0:	f000 fd48 	bl	407c64 <__retarget_lock_init_recursive>
  4071d4:	4643      	mov	r3, r8
  4071d6:	463a      	mov	r2, r7
  4071d8:	4669      	mov	r1, sp
  4071da:	4630      	mov	r0, r6
  4071dc:	f7ff f990 	bl	406500 <_vfiprintf_r>
  4071e0:	1e05      	subs	r5, r0, #0
  4071e2:	db07      	blt.n	4071f4 <__sbprintf+0x64>
  4071e4:	4630      	mov	r0, r6
  4071e6:	4669      	mov	r1, sp
  4071e8:	f000 f928 	bl	40743c <_fflush_r>
  4071ec:	2800      	cmp	r0, #0
  4071ee:	bf18      	it	ne
  4071f0:	f04f 35ff 	movne.w	r5, #4294967295
  4071f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4071f8:	065b      	lsls	r3, r3, #25
  4071fa:	d503      	bpl.n	407204 <__sbprintf+0x74>
  4071fc:	89a3      	ldrh	r3, [r4, #12]
  4071fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407202:	81a3      	strh	r3, [r4, #12]
  407204:	9816      	ldr	r0, [sp, #88]	; 0x58
  407206:	f000 fd2f 	bl	407c68 <__retarget_lock_close_recursive>
  40720a:	4628      	mov	r0, r5
  40720c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  407210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407214 <__swsetup_r>:
  407214:	b538      	push	{r3, r4, r5, lr}
  407216:	4b30      	ldr	r3, [pc, #192]	; (4072d8 <__swsetup_r+0xc4>)
  407218:	681b      	ldr	r3, [r3, #0]
  40721a:	4605      	mov	r5, r0
  40721c:	460c      	mov	r4, r1
  40721e:	b113      	cbz	r3, 407226 <__swsetup_r+0x12>
  407220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407222:	2a00      	cmp	r2, #0
  407224:	d038      	beq.n	407298 <__swsetup_r+0x84>
  407226:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40722a:	b293      	uxth	r3, r2
  40722c:	0718      	lsls	r0, r3, #28
  40722e:	d50c      	bpl.n	40724a <__swsetup_r+0x36>
  407230:	6920      	ldr	r0, [r4, #16]
  407232:	b1a8      	cbz	r0, 407260 <__swsetup_r+0x4c>
  407234:	f013 0201 	ands.w	r2, r3, #1
  407238:	d01e      	beq.n	407278 <__swsetup_r+0x64>
  40723a:	6963      	ldr	r3, [r4, #20]
  40723c:	2200      	movs	r2, #0
  40723e:	425b      	negs	r3, r3
  407240:	61a3      	str	r3, [r4, #24]
  407242:	60a2      	str	r2, [r4, #8]
  407244:	b1f0      	cbz	r0, 407284 <__swsetup_r+0x70>
  407246:	2000      	movs	r0, #0
  407248:	bd38      	pop	{r3, r4, r5, pc}
  40724a:	06d9      	lsls	r1, r3, #27
  40724c:	d53c      	bpl.n	4072c8 <__swsetup_r+0xb4>
  40724e:	0758      	lsls	r0, r3, #29
  407250:	d426      	bmi.n	4072a0 <__swsetup_r+0x8c>
  407252:	6920      	ldr	r0, [r4, #16]
  407254:	f042 0308 	orr.w	r3, r2, #8
  407258:	81a3      	strh	r3, [r4, #12]
  40725a:	b29b      	uxth	r3, r3
  40725c:	2800      	cmp	r0, #0
  40725e:	d1e9      	bne.n	407234 <__swsetup_r+0x20>
  407260:	f403 7220 	and.w	r2, r3, #640	; 0x280
  407264:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407268:	d0e4      	beq.n	407234 <__swsetup_r+0x20>
  40726a:	4628      	mov	r0, r5
  40726c:	4621      	mov	r1, r4
  40726e:	f000 fd2f 	bl	407cd0 <__smakebuf_r>
  407272:	89a3      	ldrh	r3, [r4, #12]
  407274:	6920      	ldr	r0, [r4, #16]
  407276:	e7dd      	b.n	407234 <__swsetup_r+0x20>
  407278:	0799      	lsls	r1, r3, #30
  40727a:	bf58      	it	pl
  40727c:	6962      	ldrpl	r2, [r4, #20]
  40727e:	60a2      	str	r2, [r4, #8]
  407280:	2800      	cmp	r0, #0
  407282:	d1e0      	bne.n	407246 <__swsetup_r+0x32>
  407284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407288:	061a      	lsls	r2, r3, #24
  40728a:	d5dd      	bpl.n	407248 <__swsetup_r+0x34>
  40728c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407290:	81a3      	strh	r3, [r4, #12]
  407292:	f04f 30ff 	mov.w	r0, #4294967295
  407296:	bd38      	pop	{r3, r4, r5, pc}
  407298:	4618      	mov	r0, r3
  40729a:	f000 f927 	bl	4074ec <__sinit>
  40729e:	e7c2      	b.n	407226 <__swsetup_r+0x12>
  4072a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4072a2:	b151      	cbz	r1, 4072ba <__swsetup_r+0xa6>
  4072a4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4072a8:	4299      	cmp	r1, r3
  4072aa:	d004      	beq.n	4072b6 <__swsetup_r+0xa2>
  4072ac:	4628      	mov	r0, r5
  4072ae:	f000 fa43 	bl	407738 <_free_r>
  4072b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4072b6:	2300      	movs	r3, #0
  4072b8:	6323      	str	r3, [r4, #48]	; 0x30
  4072ba:	2300      	movs	r3, #0
  4072bc:	6920      	ldr	r0, [r4, #16]
  4072be:	6063      	str	r3, [r4, #4]
  4072c0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4072c4:	6020      	str	r0, [r4, #0]
  4072c6:	e7c5      	b.n	407254 <__swsetup_r+0x40>
  4072c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4072cc:	2309      	movs	r3, #9
  4072ce:	602b      	str	r3, [r5, #0]
  4072d0:	f04f 30ff 	mov.w	r0, #4294967295
  4072d4:	81a2      	strh	r2, [r4, #12]
  4072d6:	bd38      	pop	{r3, r4, r5, pc}
  4072d8:	2040003c 	.word	0x2040003c

004072dc <register_fini>:
  4072dc:	4b02      	ldr	r3, [pc, #8]	; (4072e8 <register_fini+0xc>)
  4072de:	b113      	cbz	r3, 4072e6 <register_fini+0xa>
  4072e0:	4802      	ldr	r0, [pc, #8]	; (4072ec <register_fini+0x10>)
  4072e2:	f000 b805 	b.w	4072f0 <atexit>
  4072e6:	4770      	bx	lr
  4072e8:	00000000 	.word	0x00000000
  4072ec:	0040755d 	.word	0x0040755d

004072f0 <atexit>:
  4072f0:	2300      	movs	r3, #0
  4072f2:	4601      	mov	r1, r0
  4072f4:	461a      	mov	r2, r3
  4072f6:	4618      	mov	r0, r3
  4072f8:	f001 bb64 	b.w	4089c4 <__register_exitproc>

004072fc <__sflush_r>:
  4072fc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407300:	b29a      	uxth	r2, r3
  407302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407306:	460d      	mov	r5, r1
  407308:	0711      	lsls	r1, r2, #28
  40730a:	4680      	mov	r8, r0
  40730c:	d43a      	bmi.n	407384 <__sflush_r+0x88>
  40730e:	686a      	ldr	r2, [r5, #4]
  407310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407314:	2a00      	cmp	r2, #0
  407316:	81ab      	strh	r3, [r5, #12]
  407318:	dd6f      	ble.n	4073fa <__sflush_r+0xfe>
  40731a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40731c:	2c00      	cmp	r4, #0
  40731e:	d049      	beq.n	4073b4 <__sflush_r+0xb8>
  407320:	2200      	movs	r2, #0
  407322:	b29b      	uxth	r3, r3
  407324:	f8d8 6000 	ldr.w	r6, [r8]
  407328:	f8c8 2000 	str.w	r2, [r8]
  40732c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407330:	d067      	beq.n	407402 <__sflush_r+0x106>
  407332:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407334:	075f      	lsls	r7, r3, #29
  407336:	d505      	bpl.n	407344 <__sflush_r+0x48>
  407338:	6869      	ldr	r1, [r5, #4]
  40733a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40733c:	1a52      	subs	r2, r2, r1
  40733e:	b10b      	cbz	r3, 407344 <__sflush_r+0x48>
  407340:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407342:	1ad2      	subs	r2, r2, r3
  407344:	2300      	movs	r3, #0
  407346:	69e9      	ldr	r1, [r5, #28]
  407348:	4640      	mov	r0, r8
  40734a:	47a0      	blx	r4
  40734c:	1c44      	adds	r4, r0, #1
  40734e:	d03c      	beq.n	4073ca <__sflush_r+0xce>
  407350:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407354:	692a      	ldr	r2, [r5, #16]
  407356:	602a      	str	r2, [r5, #0]
  407358:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40735c:	2200      	movs	r2, #0
  40735e:	81ab      	strh	r3, [r5, #12]
  407360:	04db      	lsls	r3, r3, #19
  407362:	606a      	str	r2, [r5, #4]
  407364:	d447      	bmi.n	4073f6 <__sflush_r+0xfa>
  407366:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407368:	f8c8 6000 	str.w	r6, [r8]
  40736c:	b311      	cbz	r1, 4073b4 <__sflush_r+0xb8>
  40736e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407372:	4299      	cmp	r1, r3
  407374:	d002      	beq.n	40737c <__sflush_r+0x80>
  407376:	4640      	mov	r0, r8
  407378:	f000 f9de 	bl	407738 <_free_r>
  40737c:	2000      	movs	r0, #0
  40737e:	6328      	str	r0, [r5, #48]	; 0x30
  407380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407384:	692e      	ldr	r6, [r5, #16]
  407386:	b1ae      	cbz	r6, 4073b4 <__sflush_r+0xb8>
  407388:	682c      	ldr	r4, [r5, #0]
  40738a:	602e      	str	r6, [r5, #0]
  40738c:	0791      	lsls	r1, r2, #30
  40738e:	bf0c      	ite	eq
  407390:	696b      	ldreq	r3, [r5, #20]
  407392:	2300      	movne	r3, #0
  407394:	1ba4      	subs	r4, r4, r6
  407396:	60ab      	str	r3, [r5, #8]
  407398:	e00a      	b.n	4073b0 <__sflush_r+0xb4>
  40739a:	4623      	mov	r3, r4
  40739c:	4632      	mov	r2, r6
  40739e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4073a0:	69e9      	ldr	r1, [r5, #28]
  4073a2:	4640      	mov	r0, r8
  4073a4:	47b8      	blx	r7
  4073a6:	2800      	cmp	r0, #0
  4073a8:	eba4 0400 	sub.w	r4, r4, r0
  4073ac:	4406      	add	r6, r0
  4073ae:	dd04      	ble.n	4073ba <__sflush_r+0xbe>
  4073b0:	2c00      	cmp	r4, #0
  4073b2:	dcf2      	bgt.n	40739a <__sflush_r+0x9e>
  4073b4:	2000      	movs	r0, #0
  4073b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4073ba:	89ab      	ldrh	r3, [r5, #12]
  4073bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4073c0:	81ab      	strh	r3, [r5, #12]
  4073c2:	f04f 30ff 	mov.w	r0, #4294967295
  4073c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4073ca:	f8d8 4000 	ldr.w	r4, [r8]
  4073ce:	2c1d      	cmp	r4, #29
  4073d0:	d8f3      	bhi.n	4073ba <__sflush_r+0xbe>
  4073d2:	4b19      	ldr	r3, [pc, #100]	; (407438 <__sflush_r+0x13c>)
  4073d4:	40e3      	lsrs	r3, r4
  4073d6:	43db      	mvns	r3, r3
  4073d8:	f013 0301 	ands.w	r3, r3, #1
  4073dc:	d1ed      	bne.n	4073ba <__sflush_r+0xbe>
  4073de:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4073e2:	606b      	str	r3, [r5, #4]
  4073e4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4073e8:	6929      	ldr	r1, [r5, #16]
  4073ea:	81ab      	strh	r3, [r5, #12]
  4073ec:	04da      	lsls	r2, r3, #19
  4073ee:	6029      	str	r1, [r5, #0]
  4073f0:	d5b9      	bpl.n	407366 <__sflush_r+0x6a>
  4073f2:	2c00      	cmp	r4, #0
  4073f4:	d1b7      	bne.n	407366 <__sflush_r+0x6a>
  4073f6:	6528      	str	r0, [r5, #80]	; 0x50
  4073f8:	e7b5      	b.n	407366 <__sflush_r+0x6a>
  4073fa:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4073fc:	2a00      	cmp	r2, #0
  4073fe:	dc8c      	bgt.n	40731a <__sflush_r+0x1e>
  407400:	e7d8      	b.n	4073b4 <__sflush_r+0xb8>
  407402:	2301      	movs	r3, #1
  407404:	69e9      	ldr	r1, [r5, #28]
  407406:	4640      	mov	r0, r8
  407408:	47a0      	blx	r4
  40740a:	1c43      	adds	r3, r0, #1
  40740c:	4602      	mov	r2, r0
  40740e:	d002      	beq.n	407416 <__sflush_r+0x11a>
  407410:	89ab      	ldrh	r3, [r5, #12]
  407412:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407414:	e78e      	b.n	407334 <__sflush_r+0x38>
  407416:	f8d8 3000 	ldr.w	r3, [r8]
  40741a:	2b00      	cmp	r3, #0
  40741c:	d0f8      	beq.n	407410 <__sflush_r+0x114>
  40741e:	2b1d      	cmp	r3, #29
  407420:	d001      	beq.n	407426 <__sflush_r+0x12a>
  407422:	2b16      	cmp	r3, #22
  407424:	d102      	bne.n	40742c <__sflush_r+0x130>
  407426:	f8c8 6000 	str.w	r6, [r8]
  40742a:	e7c3      	b.n	4073b4 <__sflush_r+0xb8>
  40742c:	89ab      	ldrh	r3, [r5, #12]
  40742e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407432:	81ab      	strh	r3, [r5, #12]
  407434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407438:	20400001 	.word	0x20400001

0040743c <_fflush_r>:
  40743c:	b538      	push	{r3, r4, r5, lr}
  40743e:	460d      	mov	r5, r1
  407440:	4604      	mov	r4, r0
  407442:	b108      	cbz	r0, 407448 <_fflush_r+0xc>
  407444:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407446:	b1bb      	cbz	r3, 407478 <_fflush_r+0x3c>
  407448:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40744c:	b188      	cbz	r0, 407472 <_fflush_r+0x36>
  40744e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407450:	07db      	lsls	r3, r3, #31
  407452:	d401      	bmi.n	407458 <_fflush_r+0x1c>
  407454:	0581      	lsls	r1, r0, #22
  407456:	d517      	bpl.n	407488 <_fflush_r+0x4c>
  407458:	4620      	mov	r0, r4
  40745a:	4629      	mov	r1, r5
  40745c:	f7ff ff4e 	bl	4072fc <__sflush_r>
  407460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407462:	07da      	lsls	r2, r3, #31
  407464:	4604      	mov	r4, r0
  407466:	d402      	bmi.n	40746e <_fflush_r+0x32>
  407468:	89ab      	ldrh	r3, [r5, #12]
  40746a:	059b      	lsls	r3, r3, #22
  40746c:	d507      	bpl.n	40747e <_fflush_r+0x42>
  40746e:	4620      	mov	r0, r4
  407470:	bd38      	pop	{r3, r4, r5, pc}
  407472:	4604      	mov	r4, r0
  407474:	4620      	mov	r0, r4
  407476:	bd38      	pop	{r3, r4, r5, pc}
  407478:	f000 f838 	bl	4074ec <__sinit>
  40747c:	e7e4      	b.n	407448 <_fflush_r+0xc>
  40747e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407480:	f000 fbf6 	bl	407c70 <__retarget_lock_release_recursive>
  407484:	4620      	mov	r0, r4
  407486:	bd38      	pop	{r3, r4, r5, pc}
  407488:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40748a:	f000 fbef 	bl	407c6c <__retarget_lock_acquire_recursive>
  40748e:	e7e3      	b.n	407458 <_fflush_r+0x1c>

00407490 <_cleanup_r>:
  407490:	4901      	ldr	r1, [pc, #4]	; (407498 <_cleanup_r+0x8>)
  407492:	f000 bbaf 	b.w	407bf4 <_fwalk_reent>
  407496:	bf00      	nop
  407498:	00408aad 	.word	0x00408aad

0040749c <std.isra.0>:
  40749c:	b510      	push	{r4, lr}
  40749e:	2300      	movs	r3, #0
  4074a0:	4604      	mov	r4, r0
  4074a2:	8181      	strh	r1, [r0, #12]
  4074a4:	81c2      	strh	r2, [r0, #14]
  4074a6:	6003      	str	r3, [r0, #0]
  4074a8:	6043      	str	r3, [r0, #4]
  4074aa:	6083      	str	r3, [r0, #8]
  4074ac:	6643      	str	r3, [r0, #100]	; 0x64
  4074ae:	6103      	str	r3, [r0, #16]
  4074b0:	6143      	str	r3, [r0, #20]
  4074b2:	6183      	str	r3, [r0, #24]
  4074b4:	4619      	mov	r1, r3
  4074b6:	2208      	movs	r2, #8
  4074b8:	305c      	adds	r0, #92	; 0x5c
  4074ba:	f7fe fdbd 	bl	406038 <memset>
  4074be:	4807      	ldr	r0, [pc, #28]	; (4074dc <std.isra.0+0x40>)
  4074c0:	4907      	ldr	r1, [pc, #28]	; (4074e0 <std.isra.0+0x44>)
  4074c2:	4a08      	ldr	r2, [pc, #32]	; (4074e4 <std.isra.0+0x48>)
  4074c4:	4b08      	ldr	r3, [pc, #32]	; (4074e8 <std.isra.0+0x4c>)
  4074c6:	6220      	str	r0, [r4, #32]
  4074c8:	61e4      	str	r4, [r4, #28]
  4074ca:	6261      	str	r1, [r4, #36]	; 0x24
  4074cc:	62a2      	str	r2, [r4, #40]	; 0x28
  4074ce:	62e3      	str	r3, [r4, #44]	; 0x2c
  4074d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4074d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4074d8:	f000 bbc4 	b.w	407c64 <__retarget_lock_init_recursive>
  4074dc:	004087f1 	.word	0x004087f1
  4074e0:	00408815 	.word	0x00408815
  4074e4:	00408851 	.word	0x00408851
  4074e8:	00408871 	.word	0x00408871

004074ec <__sinit>:
  4074ec:	b510      	push	{r4, lr}
  4074ee:	4604      	mov	r4, r0
  4074f0:	4812      	ldr	r0, [pc, #72]	; (40753c <__sinit+0x50>)
  4074f2:	f000 fbbb 	bl	407c6c <__retarget_lock_acquire_recursive>
  4074f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4074f8:	b9d2      	cbnz	r2, 407530 <__sinit+0x44>
  4074fa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4074fe:	4810      	ldr	r0, [pc, #64]	; (407540 <__sinit+0x54>)
  407500:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407504:	2103      	movs	r1, #3
  407506:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40750a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40750c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407510:	6860      	ldr	r0, [r4, #4]
  407512:	2104      	movs	r1, #4
  407514:	f7ff ffc2 	bl	40749c <std.isra.0>
  407518:	2201      	movs	r2, #1
  40751a:	2109      	movs	r1, #9
  40751c:	68a0      	ldr	r0, [r4, #8]
  40751e:	f7ff ffbd 	bl	40749c <std.isra.0>
  407522:	2202      	movs	r2, #2
  407524:	2112      	movs	r1, #18
  407526:	68e0      	ldr	r0, [r4, #12]
  407528:	f7ff ffb8 	bl	40749c <std.isra.0>
  40752c:	2301      	movs	r3, #1
  40752e:	63a3      	str	r3, [r4, #56]	; 0x38
  407530:	4802      	ldr	r0, [pc, #8]	; (40753c <__sinit+0x50>)
  407532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407536:	f000 bb9b 	b.w	407c70 <__retarget_lock_release_recursive>
  40753a:	bf00      	nop
  40753c:	20415bc4 	.word	0x20415bc4
  407540:	00407491 	.word	0x00407491

00407544 <__sfp_lock_acquire>:
  407544:	4801      	ldr	r0, [pc, #4]	; (40754c <__sfp_lock_acquire+0x8>)
  407546:	f000 bb91 	b.w	407c6c <__retarget_lock_acquire_recursive>
  40754a:	bf00      	nop
  40754c:	20415bd8 	.word	0x20415bd8

00407550 <__sfp_lock_release>:
  407550:	4801      	ldr	r0, [pc, #4]	; (407558 <__sfp_lock_release+0x8>)
  407552:	f000 bb8d 	b.w	407c70 <__retarget_lock_release_recursive>
  407556:	bf00      	nop
  407558:	20415bd8 	.word	0x20415bd8

0040755c <__libc_fini_array>:
  40755c:	b538      	push	{r3, r4, r5, lr}
  40755e:	4c0a      	ldr	r4, [pc, #40]	; (407588 <__libc_fini_array+0x2c>)
  407560:	4d0a      	ldr	r5, [pc, #40]	; (40758c <__libc_fini_array+0x30>)
  407562:	1b64      	subs	r4, r4, r5
  407564:	10a4      	asrs	r4, r4, #2
  407566:	d00a      	beq.n	40757e <__libc_fini_array+0x22>
  407568:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40756c:	3b01      	subs	r3, #1
  40756e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  407572:	3c01      	subs	r4, #1
  407574:	f855 3904 	ldr.w	r3, [r5], #-4
  407578:	4798      	blx	r3
  40757a:	2c00      	cmp	r4, #0
  40757c:	d1f9      	bne.n	407572 <__libc_fini_array+0x16>
  40757e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407582:	f001 be35 	b.w	4091f0 <_fini>
  407586:	bf00      	nop
  407588:	00409200 	.word	0x00409200
  40758c:	004091fc 	.word	0x004091fc

00407590 <__fputwc>:
  407590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407594:	b082      	sub	sp, #8
  407596:	4680      	mov	r8, r0
  407598:	4689      	mov	r9, r1
  40759a:	4614      	mov	r4, r2
  40759c:	f000 fb54 	bl	407c48 <__locale_mb_cur_max>
  4075a0:	2801      	cmp	r0, #1
  4075a2:	d036      	beq.n	407612 <__fputwc+0x82>
  4075a4:	464a      	mov	r2, r9
  4075a6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4075aa:	a901      	add	r1, sp, #4
  4075ac:	4640      	mov	r0, r8
  4075ae:	f001 f9bb 	bl	408928 <_wcrtomb_r>
  4075b2:	1c42      	adds	r2, r0, #1
  4075b4:	4606      	mov	r6, r0
  4075b6:	d025      	beq.n	407604 <__fputwc+0x74>
  4075b8:	b3a8      	cbz	r0, 407626 <__fputwc+0x96>
  4075ba:	f89d e004 	ldrb.w	lr, [sp, #4]
  4075be:	2500      	movs	r5, #0
  4075c0:	f10d 0a04 	add.w	sl, sp, #4
  4075c4:	e009      	b.n	4075da <__fputwc+0x4a>
  4075c6:	6823      	ldr	r3, [r4, #0]
  4075c8:	1c5a      	adds	r2, r3, #1
  4075ca:	6022      	str	r2, [r4, #0]
  4075cc:	f883 e000 	strb.w	lr, [r3]
  4075d0:	3501      	adds	r5, #1
  4075d2:	42b5      	cmp	r5, r6
  4075d4:	d227      	bcs.n	407626 <__fputwc+0x96>
  4075d6:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4075da:	68a3      	ldr	r3, [r4, #8]
  4075dc:	3b01      	subs	r3, #1
  4075de:	2b00      	cmp	r3, #0
  4075e0:	60a3      	str	r3, [r4, #8]
  4075e2:	daf0      	bge.n	4075c6 <__fputwc+0x36>
  4075e4:	69a7      	ldr	r7, [r4, #24]
  4075e6:	42bb      	cmp	r3, r7
  4075e8:	4671      	mov	r1, lr
  4075ea:	4622      	mov	r2, r4
  4075ec:	4640      	mov	r0, r8
  4075ee:	db02      	blt.n	4075f6 <__fputwc+0x66>
  4075f0:	f1be 0f0a 	cmp.w	lr, #10
  4075f4:	d1e7      	bne.n	4075c6 <__fputwc+0x36>
  4075f6:	f001 f93f 	bl	408878 <__swbuf_r>
  4075fa:	1c43      	adds	r3, r0, #1
  4075fc:	d1e8      	bne.n	4075d0 <__fputwc+0x40>
  4075fe:	b002      	add	sp, #8
  407600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407604:	89a3      	ldrh	r3, [r4, #12]
  407606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40760a:	81a3      	strh	r3, [r4, #12]
  40760c:	b002      	add	sp, #8
  40760e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407612:	f109 33ff 	add.w	r3, r9, #4294967295
  407616:	2bfe      	cmp	r3, #254	; 0xfe
  407618:	d8c4      	bhi.n	4075a4 <__fputwc+0x14>
  40761a:	fa5f fe89 	uxtb.w	lr, r9
  40761e:	4606      	mov	r6, r0
  407620:	f88d e004 	strb.w	lr, [sp, #4]
  407624:	e7cb      	b.n	4075be <__fputwc+0x2e>
  407626:	4648      	mov	r0, r9
  407628:	b002      	add	sp, #8
  40762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40762e:	bf00      	nop

00407630 <_fputwc_r>:
  407630:	b530      	push	{r4, r5, lr}
  407632:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407634:	f013 0f01 	tst.w	r3, #1
  407638:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40763c:	4614      	mov	r4, r2
  40763e:	b083      	sub	sp, #12
  407640:	4605      	mov	r5, r0
  407642:	b29a      	uxth	r2, r3
  407644:	d101      	bne.n	40764a <_fputwc_r+0x1a>
  407646:	0590      	lsls	r0, r2, #22
  407648:	d51c      	bpl.n	407684 <_fputwc_r+0x54>
  40764a:	0490      	lsls	r0, r2, #18
  40764c:	d406      	bmi.n	40765c <_fputwc_r+0x2c>
  40764e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407650:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407658:	81a3      	strh	r3, [r4, #12]
  40765a:	6662      	str	r2, [r4, #100]	; 0x64
  40765c:	4628      	mov	r0, r5
  40765e:	4622      	mov	r2, r4
  407660:	f7ff ff96 	bl	407590 <__fputwc>
  407664:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407666:	07da      	lsls	r2, r3, #31
  407668:	4605      	mov	r5, r0
  40766a:	d402      	bmi.n	407672 <_fputwc_r+0x42>
  40766c:	89a3      	ldrh	r3, [r4, #12]
  40766e:	059b      	lsls	r3, r3, #22
  407670:	d502      	bpl.n	407678 <_fputwc_r+0x48>
  407672:	4628      	mov	r0, r5
  407674:	b003      	add	sp, #12
  407676:	bd30      	pop	{r4, r5, pc}
  407678:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40767a:	f000 faf9 	bl	407c70 <__retarget_lock_release_recursive>
  40767e:	4628      	mov	r0, r5
  407680:	b003      	add	sp, #12
  407682:	bd30      	pop	{r4, r5, pc}
  407684:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407686:	9101      	str	r1, [sp, #4]
  407688:	f000 faf0 	bl	407c6c <__retarget_lock_acquire_recursive>
  40768c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407690:	9901      	ldr	r1, [sp, #4]
  407692:	b29a      	uxth	r2, r3
  407694:	e7d9      	b.n	40764a <_fputwc_r+0x1a>
  407696:	bf00      	nop

00407698 <_malloc_trim_r>:
  407698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40769a:	4f24      	ldr	r7, [pc, #144]	; (40772c <_malloc_trim_r+0x94>)
  40769c:	460c      	mov	r4, r1
  40769e:	4606      	mov	r6, r0
  4076a0:	f000 fee2 	bl	408468 <__malloc_lock>
  4076a4:	68bb      	ldr	r3, [r7, #8]
  4076a6:	685d      	ldr	r5, [r3, #4]
  4076a8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4076ac:	310f      	adds	r1, #15
  4076ae:	f025 0503 	bic.w	r5, r5, #3
  4076b2:	4429      	add	r1, r5
  4076b4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4076b8:	f021 010f 	bic.w	r1, r1, #15
  4076bc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4076c0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4076c4:	db07      	blt.n	4076d6 <_malloc_trim_r+0x3e>
  4076c6:	2100      	movs	r1, #0
  4076c8:	4630      	mov	r0, r6
  4076ca:	f001 f87f 	bl	4087cc <_sbrk_r>
  4076ce:	68bb      	ldr	r3, [r7, #8]
  4076d0:	442b      	add	r3, r5
  4076d2:	4298      	cmp	r0, r3
  4076d4:	d004      	beq.n	4076e0 <_malloc_trim_r+0x48>
  4076d6:	4630      	mov	r0, r6
  4076d8:	f000 fecc 	bl	408474 <__malloc_unlock>
  4076dc:	2000      	movs	r0, #0
  4076de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4076e0:	4261      	negs	r1, r4
  4076e2:	4630      	mov	r0, r6
  4076e4:	f001 f872 	bl	4087cc <_sbrk_r>
  4076e8:	3001      	adds	r0, #1
  4076ea:	d00d      	beq.n	407708 <_malloc_trim_r+0x70>
  4076ec:	4b10      	ldr	r3, [pc, #64]	; (407730 <_malloc_trim_r+0x98>)
  4076ee:	68ba      	ldr	r2, [r7, #8]
  4076f0:	6819      	ldr	r1, [r3, #0]
  4076f2:	1b2d      	subs	r5, r5, r4
  4076f4:	f045 0501 	orr.w	r5, r5, #1
  4076f8:	4630      	mov	r0, r6
  4076fa:	1b09      	subs	r1, r1, r4
  4076fc:	6055      	str	r5, [r2, #4]
  4076fe:	6019      	str	r1, [r3, #0]
  407700:	f000 feb8 	bl	408474 <__malloc_unlock>
  407704:	2001      	movs	r0, #1
  407706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407708:	2100      	movs	r1, #0
  40770a:	4630      	mov	r0, r6
  40770c:	f001 f85e 	bl	4087cc <_sbrk_r>
  407710:	68ba      	ldr	r2, [r7, #8]
  407712:	1a83      	subs	r3, r0, r2
  407714:	2b0f      	cmp	r3, #15
  407716:	ddde      	ble.n	4076d6 <_malloc_trim_r+0x3e>
  407718:	4c06      	ldr	r4, [pc, #24]	; (407734 <_malloc_trim_r+0x9c>)
  40771a:	4905      	ldr	r1, [pc, #20]	; (407730 <_malloc_trim_r+0x98>)
  40771c:	6824      	ldr	r4, [r4, #0]
  40771e:	f043 0301 	orr.w	r3, r3, #1
  407722:	1b00      	subs	r0, r0, r4
  407724:	6053      	str	r3, [r2, #4]
  407726:	6008      	str	r0, [r1, #0]
  407728:	e7d5      	b.n	4076d6 <_malloc_trim_r+0x3e>
  40772a:	bf00      	nop
  40772c:	204005d8 	.word	0x204005d8
  407730:	2040aef4 	.word	0x2040aef4
  407734:	204009e0 	.word	0x204009e0

00407738 <_free_r>:
  407738:	2900      	cmp	r1, #0
  40773a:	d044      	beq.n	4077c6 <_free_r+0x8e>
  40773c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407740:	460d      	mov	r5, r1
  407742:	4680      	mov	r8, r0
  407744:	f000 fe90 	bl	408468 <__malloc_lock>
  407748:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40774c:	4969      	ldr	r1, [pc, #420]	; (4078f4 <_free_r+0x1bc>)
  40774e:	f027 0301 	bic.w	r3, r7, #1
  407752:	f1a5 0408 	sub.w	r4, r5, #8
  407756:	18e2      	adds	r2, r4, r3
  407758:	688e      	ldr	r6, [r1, #8]
  40775a:	6850      	ldr	r0, [r2, #4]
  40775c:	42b2      	cmp	r2, r6
  40775e:	f020 0003 	bic.w	r0, r0, #3
  407762:	d05e      	beq.n	407822 <_free_r+0xea>
  407764:	07fe      	lsls	r6, r7, #31
  407766:	6050      	str	r0, [r2, #4]
  407768:	d40b      	bmi.n	407782 <_free_r+0x4a>
  40776a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40776e:	1be4      	subs	r4, r4, r7
  407770:	f101 0e08 	add.w	lr, r1, #8
  407774:	68a5      	ldr	r5, [r4, #8]
  407776:	4575      	cmp	r5, lr
  407778:	443b      	add	r3, r7
  40777a:	d06d      	beq.n	407858 <_free_r+0x120>
  40777c:	68e7      	ldr	r7, [r4, #12]
  40777e:	60ef      	str	r7, [r5, #12]
  407780:	60bd      	str	r5, [r7, #8]
  407782:	1815      	adds	r5, r2, r0
  407784:	686d      	ldr	r5, [r5, #4]
  407786:	07ed      	lsls	r5, r5, #31
  407788:	d53e      	bpl.n	407808 <_free_r+0xd0>
  40778a:	f043 0201 	orr.w	r2, r3, #1
  40778e:	6062      	str	r2, [r4, #4]
  407790:	50e3      	str	r3, [r4, r3]
  407792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407796:	d217      	bcs.n	4077c8 <_free_r+0x90>
  407798:	08db      	lsrs	r3, r3, #3
  40779a:	1c58      	adds	r0, r3, #1
  40779c:	109a      	asrs	r2, r3, #2
  40779e:	684d      	ldr	r5, [r1, #4]
  4077a0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4077a4:	60a7      	str	r7, [r4, #8]
  4077a6:	2301      	movs	r3, #1
  4077a8:	4093      	lsls	r3, r2
  4077aa:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4077ae:	432b      	orrs	r3, r5
  4077b0:	3a08      	subs	r2, #8
  4077b2:	60e2      	str	r2, [r4, #12]
  4077b4:	604b      	str	r3, [r1, #4]
  4077b6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4077ba:	60fc      	str	r4, [r7, #12]
  4077bc:	4640      	mov	r0, r8
  4077be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4077c2:	f000 be57 	b.w	408474 <__malloc_unlock>
  4077c6:	4770      	bx	lr
  4077c8:	0a5a      	lsrs	r2, r3, #9
  4077ca:	2a04      	cmp	r2, #4
  4077cc:	d852      	bhi.n	407874 <_free_r+0x13c>
  4077ce:	099a      	lsrs	r2, r3, #6
  4077d0:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4077d4:	00ff      	lsls	r7, r7, #3
  4077d6:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4077da:	19c8      	adds	r0, r1, r7
  4077dc:	59ca      	ldr	r2, [r1, r7]
  4077de:	3808      	subs	r0, #8
  4077e0:	4290      	cmp	r0, r2
  4077e2:	d04f      	beq.n	407884 <_free_r+0x14c>
  4077e4:	6851      	ldr	r1, [r2, #4]
  4077e6:	f021 0103 	bic.w	r1, r1, #3
  4077ea:	428b      	cmp	r3, r1
  4077ec:	d232      	bcs.n	407854 <_free_r+0x11c>
  4077ee:	6892      	ldr	r2, [r2, #8]
  4077f0:	4290      	cmp	r0, r2
  4077f2:	d1f7      	bne.n	4077e4 <_free_r+0xac>
  4077f4:	68c3      	ldr	r3, [r0, #12]
  4077f6:	60a0      	str	r0, [r4, #8]
  4077f8:	60e3      	str	r3, [r4, #12]
  4077fa:	609c      	str	r4, [r3, #8]
  4077fc:	60c4      	str	r4, [r0, #12]
  4077fe:	4640      	mov	r0, r8
  407800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407804:	f000 be36 	b.w	408474 <__malloc_unlock>
  407808:	6895      	ldr	r5, [r2, #8]
  40780a:	4f3b      	ldr	r7, [pc, #236]	; (4078f8 <_free_r+0x1c0>)
  40780c:	42bd      	cmp	r5, r7
  40780e:	4403      	add	r3, r0
  407810:	d040      	beq.n	407894 <_free_r+0x15c>
  407812:	68d0      	ldr	r0, [r2, #12]
  407814:	60e8      	str	r0, [r5, #12]
  407816:	f043 0201 	orr.w	r2, r3, #1
  40781a:	6085      	str	r5, [r0, #8]
  40781c:	6062      	str	r2, [r4, #4]
  40781e:	50e3      	str	r3, [r4, r3]
  407820:	e7b7      	b.n	407792 <_free_r+0x5a>
  407822:	07ff      	lsls	r7, r7, #31
  407824:	4403      	add	r3, r0
  407826:	d407      	bmi.n	407838 <_free_r+0x100>
  407828:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40782c:	1aa4      	subs	r4, r4, r2
  40782e:	4413      	add	r3, r2
  407830:	68a0      	ldr	r0, [r4, #8]
  407832:	68e2      	ldr	r2, [r4, #12]
  407834:	60c2      	str	r2, [r0, #12]
  407836:	6090      	str	r0, [r2, #8]
  407838:	4a30      	ldr	r2, [pc, #192]	; (4078fc <_free_r+0x1c4>)
  40783a:	6812      	ldr	r2, [r2, #0]
  40783c:	f043 0001 	orr.w	r0, r3, #1
  407840:	4293      	cmp	r3, r2
  407842:	6060      	str	r0, [r4, #4]
  407844:	608c      	str	r4, [r1, #8]
  407846:	d3b9      	bcc.n	4077bc <_free_r+0x84>
  407848:	4b2d      	ldr	r3, [pc, #180]	; (407900 <_free_r+0x1c8>)
  40784a:	4640      	mov	r0, r8
  40784c:	6819      	ldr	r1, [r3, #0]
  40784e:	f7ff ff23 	bl	407698 <_malloc_trim_r>
  407852:	e7b3      	b.n	4077bc <_free_r+0x84>
  407854:	4610      	mov	r0, r2
  407856:	e7cd      	b.n	4077f4 <_free_r+0xbc>
  407858:	1811      	adds	r1, r2, r0
  40785a:	6849      	ldr	r1, [r1, #4]
  40785c:	07c9      	lsls	r1, r1, #31
  40785e:	d444      	bmi.n	4078ea <_free_r+0x1b2>
  407860:	6891      	ldr	r1, [r2, #8]
  407862:	68d2      	ldr	r2, [r2, #12]
  407864:	60ca      	str	r2, [r1, #12]
  407866:	4403      	add	r3, r0
  407868:	f043 0001 	orr.w	r0, r3, #1
  40786c:	6091      	str	r1, [r2, #8]
  40786e:	6060      	str	r0, [r4, #4]
  407870:	50e3      	str	r3, [r4, r3]
  407872:	e7a3      	b.n	4077bc <_free_r+0x84>
  407874:	2a14      	cmp	r2, #20
  407876:	d816      	bhi.n	4078a6 <_free_r+0x16e>
  407878:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40787c:	00ff      	lsls	r7, r7, #3
  40787e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407882:	e7aa      	b.n	4077da <_free_r+0xa2>
  407884:	10aa      	asrs	r2, r5, #2
  407886:	2301      	movs	r3, #1
  407888:	684d      	ldr	r5, [r1, #4]
  40788a:	4093      	lsls	r3, r2
  40788c:	432b      	orrs	r3, r5
  40788e:	604b      	str	r3, [r1, #4]
  407890:	4603      	mov	r3, r0
  407892:	e7b0      	b.n	4077f6 <_free_r+0xbe>
  407894:	f043 0201 	orr.w	r2, r3, #1
  407898:	614c      	str	r4, [r1, #20]
  40789a:	610c      	str	r4, [r1, #16]
  40789c:	60e5      	str	r5, [r4, #12]
  40789e:	60a5      	str	r5, [r4, #8]
  4078a0:	6062      	str	r2, [r4, #4]
  4078a2:	50e3      	str	r3, [r4, r3]
  4078a4:	e78a      	b.n	4077bc <_free_r+0x84>
  4078a6:	2a54      	cmp	r2, #84	; 0x54
  4078a8:	d806      	bhi.n	4078b8 <_free_r+0x180>
  4078aa:	0b1a      	lsrs	r2, r3, #12
  4078ac:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4078b0:	00ff      	lsls	r7, r7, #3
  4078b2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4078b6:	e790      	b.n	4077da <_free_r+0xa2>
  4078b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4078bc:	d806      	bhi.n	4078cc <_free_r+0x194>
  4078be:	0bda      	lsrs	r2, r3, #15
  4078c0:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4078c4:	00ff      	lsls	r7, r7, #3
  4078c6:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4078ca:	e786      	b.n	4077da <_free_r+0xa2>
  4078cc:	f240 5054 	movw	r0, #1364	; 0x554
  4078d0:	4282      	cmp	r2, r0
  4078d2:	d806      	bhi.n	4078e2 <_free_r+0x1aa>
  4078d4:	0c9a      	lsrs	r2, r3, #18
  4078d6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4078da:	00ff      	lsls	r7, r7, #3
  4078dc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4078e0:	e77b      	b.n	4077da <_free_r+0xa2>
  4078e2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4078e6:	257e      	movs	r5, #126	; 0x7e
  4078e8:	e777      	b.n	4077da <_free_r+0xa2>
  4078ea:	f043 0101 	orr.w	r1, r3, #1
  4078ee:	6061      	str	r1, [r4, #4]
  4078f0:	6013      	str	r3, [r2, #0]
  4078f2:	e763      	b.n	4077bc <_free_r+0x84>
  4078f4:	204005d8 	.word	0x204005d8
  4078f8:	204005e0 	.word	0x204005e0
  4078fc:	204009e4 	.word	0x204009e4
  407900:	2040af24 	.word	0x2040af24

00407904 <__sfvwrite_r>:
  407904:	6893      	ldr	r3, [r2, #8]
  407906:	2b00      	cmp	r3, #0
  407908:	d073      	beq.n	4079f2 <__sfvwrite_r+0xee>
  40790a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40790e:	898b      	ldrh	r3, [r1, #12]
  407910:	b083      	sub	sp, #12
  407912:	460c      	mov	r4, r1
  407914:	0719      	lsls	r1, r3, #28
  407916:	9000      	str	r0, [sp, #0]
  407918:	4616      	mov	r6, r2
  40791a:	d526      	bpl.n	40796a <__sfvwrite_r+0x66>
  40791c:	6922      	ldr	r2, [r4, #16]
  40791e:	b322      	cbz	r2, 40796a <__sfvwrite_r+0x66>
  407920:	f013 0002 	ands.w	r0, r3, #2
  407924:	6835      	ldr	r5, [r6, #0]
  407926:	d02c      	beq.n	407982 <__sfvwrite_r+0x7e>
  407928:	f04f 0900 	mov.w	r9, #0
  40792c:	4fb0      	ldr	r7, [pc, #704]	; (407bf0 <__sfvwrite_r+0x2ec>)
  40792e:	46c8      	mov	r8, r9
  407930:	46b2      	mov	sl, r6
  407932:	45b8      	cmp	r8, r7
  407934:	4643      	mov	r3, r8
  407936:	464a      	mov	r2, r9
  407938:	bf28      	it	cs
  40793a:	463b      	movcs	r3, r7
  40793c:	9800      	ldr	r0, [sp, #0]
  40793e:	f1b8 0f00 	cmp.w	r8, #0
  407942:	d050      	beq.n	4079e6 <__sfvwrite_r+0xe2>
  407944:	69e1      	ldr	r1, [r4, #28]
  407946:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407948:	47b0      	blx	r6
  40794a:	2800      	cmp	r0, #0
  40794c:	dd58      	ble.n	407a00 <__sfvwrite_r+0xfc>
  40794e:	f8da 3008 	ldr.w	r3, [sl, #8]
  407952:	1a1b      	subs	r3, r3, r0
  407954:	4481      	add	r9, r0
  407956:	eba8 0800 	sub.w	r8, r8, r0
  40795a:	f8ca 3008 	str.w	r3, [sl, #8]
  40795e:	2b00      	cmp	r3, #0
  407960:	d1e7      	bne.n	407932 <__sfvwrite_r+0x2e>
  407962:	2000      	movs	r0, #0
  407964:	b003      	add	sp, #12
  407966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40796a:	4621      	mov	r1, r4
  40796c:	9800      	ldr	r0, [sp, #0]
  40796e:	f7ff fc51 	bl	407214 <__swsetup_r>
  407972:	2800      	cmp	r0, #0
  407974:	f040 8133 	bne.w	407bde <__sfvwrite_r+0x2da>
  407978:	89a3      	ldrh	r3, [r4, #12]
  40797a:	6835      	ldr	r5, [r6, #0]
  40797c:	f013 0002 	ands.w	r0, r3, #2
  407980:	d1d2      	bne.n	407928 <__sfvwrite_r+0x24>
  407982:	f013 0901 	ands.w	r9, r3, #1
  407986:	d145      	bne.n	407a14 <__sfvwrite_r+0x110>
  407988:	464f      	mov	r7, r9
  40798a:	9601      	str	r6, [sp, #4]
  40798c:	b337      	cbz	r7, 4079dc <__sfvwrite_r+0xd8>
  40798e:	059a      	lsls	r2, r3, #22
  407990:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407994:	f140 8083 	bpl.w	407a9e <__sfvwrite_r+0x19a>
  407998:	4547      	cmp	r7, r8
  40799a:	46c3      	mov	fp, r8
  40799c:	f0c0 80ab 	bcc.w	407af6 <__sfvwrite_r+0x1f2>
  4079a0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4079a4:	f040 80ac 	bne.w	407b00 <__sfvwrite_r+0x1fc>
  4079a8:	6820      	ldr	r0, [r4, #0]
  4079aa:	46ba      	mov	sl, r7
  4079ac:	465a      	mov	r2, fp
  4079ae:	4649      	mov	r1, r9
  4079b0:	f000 fcf6 	bl	4083a0 <memmove>
  4079b4:	68a2      	ldr	r2, [r4, #8]
  4079b6:	6823      	ldr	r3, [r4, #0]
  4079b8:	eba2 0208 	sub.w	r2, r2, r8
  4079bc:	445b      	add	r3, fp
  4079be:	60a2      	str	r2, [r4, #8]
  4079c0:	6023      	str	r3, [r4, #0]
  4079c2:	9a01      	ldr	r2, [sp, #4]
  4079c4:	6893      	ldr	r3, [r2, #8]
  4079c6:	eba3 030a 	sub.w	r3, r3, sl
  4079ca:	44d1      	add	r9, sl
  4079cc:	eba7 070a 	sub.w	r7, r7, sl
  4079d0:	6093      	str	r3, [r2, #8]
  4079d2:	2b00      	cmp	r3, #0
  4079d4:	d0c5      	beq.n	407962 <__sfvwrite_r+0x5e>
  4079d6:	89a3      	ldrh	r3, [r4, #12]
  4079d8:	2f00      	cmp	r7, #0
  4079da:	d1d8      	bne.n	40798e <__sfvwrite_r+0x8a>
  4079dc:	f8d5 9000 	ldr.w	r9, [r5]
  4079e0:	686f      	ldr	r7, [r5, #4]
  4079e2:	3508      	adds	r5, #8
  4079e4:	e7d2      	b.n	40798c <__sfvwrite_r+0x88>
  4079e6:	f8d5 9000 	ldr.w	r9, [r5]
  4079ea:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4079ee:	3508      	adds	r5, #8
  4079f0:	e79f      	b.n	407932 <__sfvwrite_r+0x2e>
  4079f2:	2000      	movs	r0, #0
  4079f4:	4770      	bx	lr
  4079f6:	4621      	mov	r1, r4
  4079f8:	9800      	ldr	r0, [sp, #0]
  4079fa:	f7ff fd1f 	bl	40743c <_fflush_r>
  4079fe:	b370      	cbz	r0, 407a5e <__sfvwrite_r+0x15a>
  407a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407a08:	f04f 30ff 	mov.w	r0, #4294967295
  407a0c:	81a3      	strh	r3, [r4, #12]
  407a0e:	b003      	add	sp, #12
  407a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a14:	4681      	mov	r9, r0
  407a16:	4633      	mov	r3, r6
  407a18:	464e      	mov	r6, r9
  407a1a:	46a8      	mov	r8, r5
  407a1c:	469a      	mov	sl, r3
  407a1e:	464d      	mov	r5, r9
  407a20:	b34e      	cbz	r6, 407a76 <__sfvwrite_r+0x172>
  407a22:	b380      	cbz	r0, 407a86 <__sfvwrite_r+0x182>
  407a24:	6820      	ldr	r0, [r4, #0]
  407a26:	6923      	ldr	r3, [r4, #16]
  407a28:	6962      	ldr	r2, [r4, #20]
  407a2a:	45b1      	cmp	r9, r6
  407a2c:	46cb      	mov	fp, r9
  407a2e:	bf28      	it	cs
  407a30:	46b3      	movcs	fp, r6
  407a32:	4298      	cmp	r0, r3
  407a34:	465f      	mov	r7, fp
  407a36:	d904      	bls.n	407a42 <__sfvwrite_r+0x13e>
  407a38:	68a3      	ldr	r3, [r4, #8]
  407a3a:	4413      	add	r3, r2
  407a3c:	459b      	cmp	fp, r3
  407a3e:	f300 80a6 	bgt.w	407b8e <__sfvwrite_r+0x28a>
  407a42:	4593      	cmp	fp, r2
  407a44:	db4b      	blt.n	407ade <__sfvwrite_r+0x1da>
  407a46:	4613      	mov	r3, r2
  407a48:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407a4a:	69e1      	ldr	r1, [r4, #28]
  407a4c:	9800      	ldr	r0, [sp, #0]
  407a4e:	462a      	mov	r2, r5
  407a50:	47b8      	blx	r7
  407a52:	1e07      	subs	r7, r0, #0
  407a54:	ddd4      	ble.n	407a00 <__sfvwrite_r+0xfc>
  407a56:	ebb9 0907 	subs.w	r9, r9, r7
  407a5a:	d0cc      	beq.n	4079f6 <__sfvwrite_r+0xf2>
  407a5c:	2001      	movs	r0, #1
  407a5e:	f8da 3008 	ldr.w	r3, [sl, #8]
  407a62:	1bdb      	subs	r3, r3, r7
  407a64:	443d      	add	r5, r7
  407a66:	1bf6      	subs	r6, r6, r7
  407a68:	f8ca 3008 	str.w	r3, [sl, #8]
  407a6c:	2b00      	cmp	r3, #0
  407a6e:	f43f af78 	beq.w	407962 <__sfvwrite_r+0x5e>
  407a72:	2e00      	cmp	r6, #0
  407a74:	d1d5      	bne.n	407a22 <__sfvwrite_r+0x11e>
  407a76:	f108 0308 	add.w	r3, r8, #8
  407a7a:	e913 0060 	ldmdb	r3, {r5, r6}
  407a7e:	4698      	mov	r8, r3
  407a80:	3308      	adds	r3, #8
  407a82:	2e00      	cmp	r6, #0
  407a84:	d0f9      	beq.n	407a7a <__sfvwrite_r+0x176>
  407a86:	4632      	mov	r2, r6
  407a88:	210a      	movs	r1, #10
  407a8a:	4628      	mov	r0, r5
  407a8c:	f000 fc38 	bl	408300 <memchr>
  407a90:	2800      	cmp	r0, #0
  407a92:	f000 80a1 	beq.w	407bd8 <__sfvwrite_r+0x2d4>
  407a96:	3001      	adds	r0, #1
  407a98:	eba0 0905 	sub.w	r9, r0, r5
  407a9c:	e7c2      	b.n	407a24 <__sfvwrite_r+0x120>
  407a9e:	6820      	ldr	r0, [r4, #0]
  407aa0:	6923      	ldr	r3, [r4, #16]
  407aa2:	4298      	cmp	r0, r3
  407aa4:	d802      	bhi.n	407aac <__sfvwrite_r+0x1a8>
  407aa6:	6963      	ldr	r3, [r4, #20]
  407aa8:	429f      	cmp	r7, r3
  407aaa:	d25d      	bcs.n	407b68 <__sfvwrite_r+0x264>
  407aac:	45b8      	cmp	r8, r7
  407aae:	bf28      	it	cs
  407ab0:	46b8      	movcs	r8, r7
  407ab2:	4642      	mov	r2, r8
  407ab4:	4649      	mov	r1, r9
  407ab6:	f000 fc73 	bl	4083a0 <memmove>
  407aba:	68a3      	ldr	r3, [r4, #8]
  407abc:	6822      	ldr	r2, [r4, #0]
  407abe:	eba3 0308 	sub.w	r3, r3, r8
  407ac2:	4442      	add	r2, r8
  407ac4:	60a3      	str	r3, [r4, #8]
  407ac6:	6022      	str	r2, [r4, #0]
  407ac8:	b10b      	cbz	r3, 407ace <__sfvwrite_r+0x1ca>
  407aca:	46c2      	mov	sl, r8
  407acc:	e779      	b.n	4079c2 <__sfvwrite_r+0xbe>
  407ace:	4621      	mov	r1, r4
  407ad0:	9800      	ldr	r0, [sp, #0]
  407ad2:	f7ff fcb3 	bl	40743c <_fflush_r>
  407ad6:	2800      	cmp	r0, #0
  407ad8:	d192      	bne.n	407a00 <__sfvwrite_r+0xfc>
  407ada:	46c2      	mov	sl, r8
  407adc:	e771      	b.n	4079c2 <__sfvwrite_r+0xbe>
  407ade:	465a      	mov	r2, fp
  407ae0:	4629      	mov	r1, r5
  407ae2:	f000 fc5d 	bl	4083a0 <memmove>
  407ae6:	68a2      	ldr	r2, [r4, #8]
  407ae8:	6823      	ldr	r3, [r4, #0]
  407aea:	eba2 020b 	sub.w	r2, r2, fp
  407aee:	445b      	add	r3, fp
  407af0:	60a2      	str	r2, [r4, #8]
  407af2:	6023      	str	r3, [r4, #0]
  407af4:	e7af      	b.n	407a56 <__sfvwrite_r+0x152>
  407af6:	6820      	ldr	r0, [r4, #0]
  407af8:	46b8      	mov	r8, r7
  407afa:	46ba      	mov	sl, r7
  407afc:	46bb      	mov	fp, r7
  407afe:	e755      	b.n	4079ac <__sfvwrite_r+0xa8>
  407b00:	6962      	ldr	r2, [r4, #20]
  407b02:	6820      	ldr	r0, [r4, #0]
  407b04:	6921      	ldr	r1, [r4, #16]
  407b06:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407b0a:	eba0 0a01 	sub.w	sl, r0, r1
  407b0e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  407b12:	f10a 0001 	add.w	r0, sl, #1
  407b16:	ea4f 0868 	mov.w	r8, r8, asr #1
  407b1a:	4438      	add	r0, r7
  407b1c:	4540      	cmp	r0, r8
  407b1e:	4642      	mov	r2, r8
  407b20:	bf84      	itt	hi
  407b22:	4680      	movhi	r8, r0
  407b24:	4642      	movhi	r2, r8
  407b26:	055b      	lsls	r3, r3, #21
  407b28:	d544      	bpl.n	407bb4 <__sfvwrite_r+0x2b0>
  407b2a:	4611      	mov	r1, r2
  407b2c:	9800      	ldr	r0, [sp, #0]
  407b2e:	f000 f921 	bl	407d74 <_malloc_r>
  407b32:	4683      	mov	fp, r0
  407b34:	2800      	cmp	r0, #0
  407b36:	d055      	beq.n	407be4 <__sfvwrite_r+0x2e0>
  407b38:	4652      	mov	r2, sl
  407b3a:	6921      	ldr	r1, [r4, #16]
  407b3c:	f7fe f9e2 	bl	405f04 <memcpy>
  407b40:	89a3      	ldrh	r3, [r4, #12]
  407b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407b4a:	81a3      	strh	r3, [r4, #12]
  407b4c:	eb0b 000a 	add.w	r0, fp, sl
  407b50:	eba8 030a 	sub.w	r3, r8, sl
  407b54:	f8c4 b010 	str.w	fp, [r4, #16]
  407b58:	f8c4 8014 	str.w	r8, [r4, #20]
  407b5c:	6020      	str	r0, [r4, #0]
  407b5e:	60a3      	str	r3, [r4, #8]
  407b60:	46b8      	mov	r8, r7
  407b62:	46ba      	mov	sl, r7
  407b64:	46bb      	mov	fp, r7
  407b66:	e721      	b.n	4079ac <__sfvwrite_r+0xa8>
  407b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407b6c:	42b9      	cmp	r1, r7
  407b6e:	bf28      	it	cs
  407b70:	4639      	movcs	r1, r7
  407b72:	464a      	mov	r2, r9
  407b74:	fb91 f1f3 	sdiv	r1, r1, r3
  407b78:	9800      	ldr	r0, [sp, #0]
  407b7a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407b7c:	fb03 f301 	mul.w	r3, r3, r1
  407b80:	69e1      	ldr	r1, [r4, #28]
  407b82:	47b0      	blx	r6
  407b84:	f1b0 0a00 	subs.w	sl, r0, #0
  407b88:	f73f af1b 	bgt.w	4079c2 <__sfvwrite_r+0xbe>
  407b8c:	e738      	b.n	407a00 <__sfvwrite_r+0xfc>
  407b8e:	461a      	mov	r2, r3
  407b90:	4629      	mov	r1, r5
  407b92:	9301      	str	r3, [sp, #4]
  407b94:	f000 fc04 	bl	4083a0 <memmove>
  407b98:	6822      	ldr	r2, [r4, #0]
  407b9a:	9b01      	ldr	r3, [sp, #4]
  407b9c:	9800      	ldr	r0, [sp, #0]
  407b9e:	441a      	add	r2, r3
  407ba0:	6022      	str	r2, [r4, #0]
  407ba2:	4621      	mov	r1, r4
  407ba4:	f7ff fc4a 	bl	40743c <_fflush_r>
  407ba8:	9b01      	ldr	r3, [sp, #4]
  407baa:	2800      	cmp	r0, #0
  407bac:	f47f af28 	bne.w	407a00 <__sfvwrite_r+0xfc>
  407bb0:	461f      	mov	r7, r3
  407bb2:	e750      	b.n	407a56 <__sfvwrite_r+0x152>
  407bb4:	9800      	ldr	r0, [sp, #0]
  407bb6:	f000 fc63 	bl	408480 <_realloc_r>
  407bba:	4683      	mov	fp, r0
  407bbc:	2800      	cmp	r0, #0
  407bbe:	d1c5      	bne.n	407b4c <__sfvwrite_r+0x248>
  407bc0:	9d00      	ldr	r5, [sp, #0]
  407bc2:	6921      	ldr	r1, [r4, #16]
  407bc4:	4628      	mov	r0, r5
  407bc6:	f7ff fdb7 	bl	407738 <_free_r>
  407bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407bce:	220c      	movs	r2, #12
  407bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407bd4:	602a      	str	r2, [r5, #0]
  407bd6:	e715      	b.n	407a04 <__sfvwrite_r+0x100>
  407bd8:	f106 0901 	add.w	r9, r6, #1
  407bdc:	e722      	b.n	407a24 <__sfvwrite_r+0x120>
  407bde:	f04f 30ff 	mov.w	r0, #4294967295
  407be2:	e6bf      	b.n	407964 <__sfvwrite_r+0x60>
  407be4:	9a00      	ldr	r2, [sp, #0]
  407be6:	230c      	movs	r3, #12
  407be8:	6013      	str	r3, [r2, #0]
  407bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407bee:	e709      	b.n	407a04 <__sfvwrite_r+0x100>
  407bf0:	7ffffc00 	.word	0x7ffffc00

00407bf4 <_fwalk_reent>:
  407bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407bf8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407bfc:	d01f      	beq.n	407c3e <_fwalk_reent+0x4a>
  407bfe:	4688      	mov	r8, r1
  407c00:	4606      	mov	r6, r0
  407c02:	f04f 0900 	mov.w	r9, #0
  407c06:	687d      	ldr	r5, [r7, #4]
  407c08:	68bc      	ldr	r4, [r7, #8]
  407c0a:	3d01      	subs	r5, #1
  407c0c:	d411      	bmi.n	407c32 <_fwalk_reent+0x3e>
  407c0e:	89a3      	ldrh	r3, [r4, #12]
  407c10:	2b01      	cmp	r3, #1
  407c12:	f105 35ff 	add.w	r5, r5, #4294967295
  407c16:	d908      	bls.n	407c2a <_fwalk_reent+0x36>
  407c18:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407c1c:	3301      	adds	r3, #1
  407c1e:	4621      	mov	r1, r4
  407c20:	4630      	mov	r0, r6
  407c22:	d002      	beq.n	407c2a <_fwalk_reent+0x36>
  407c24:	47c0      	blx	r8
  407c26:	ea49 0900 	orr.w	r9, r9, r0
  407c2a:	1c6b      	adds	r3, r5, #1
  407c2c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407c30:	d1ed      	bne.n	407c0e <_fwalk_reent+0x1a>
  407c32:	683f      	ldr	r7, [r7, #0]
  407c34:	2f00      	cmp	r7, #0
  407c36:	d1e6      	bne.n	407c06 <_fwalk_reent+0x12>
  407c38:	4648      	mov	r0, r9
  407c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407c3e:	46b9      	mov	r9, r7
  407c40:	4648      	mov	r0, r9
  407c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407c46:	bf00      	nop

00407c48 <__locale_mb_cur_max>:
  407c48:	4b04      	ldr	r3, [pc, #16]	; (407c5c <__locale_mb_cur_max+0x14>)
  407c4a:	4a05      	ldr	r2, [pc, #20]	; (407c60 <__locale_mb_cur_max+0x18>)
  407c4c:	681b      	ldr	r3, [r3, #0]
  407c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  407c50:	2b00      	cmp	r3, #0
  407c52:	bf08      	it	eq
  407c54:	4613      	moveq	r3, r2
  407c56:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  407c5a:	4770      	bx	lr
  407c5c:	2040003c 	.word	0x2040003c
  407c60:	2040046c 	.word	0x2040046c

00407c64 <__retarget_lock_init_recursive>:
  407c64:	4770      	bx	lr
  407c66:	bf00      	nop

00407c68 <__retarget_lock_close_recursive>:
  407c68:	4770      	bx	lr
  407c6a:	bf00      	nop

00407c6c <__retarget_lock_acquire_recursive>:
  407c6c:	4770      	bx	lr
  407c6e:	bf00      	nop

00407c70 <__retarget_lock_release_recursive>:
  407c70:	4770      	bx	lr
  407c72:	bf00      	nop

00407c74 <__swhatbuf_r>:
  407c74:	b570      	push	{r4, r5, r6, lr}
  407c76:	460c      	mov	r4, r1
  407c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407c7c:	2900      	cmp	r1, #0
  407c7e:	b090      	sub	sp, #64	; 0x40
  407c80:	4615      	mov	r5, r2
  407c82:	461e      	mov	r6, r3
  407c84:	db14      	blt.n	407cb0 <__swhatbuf_r+0x3c>
  407c86:	aa01      	add	r2, sp, #4
  407c88:	f000 ff72 	bl	408b70 <_fstat_r>
  407c8c:	2800      	cmp	r0, #0
  407c8e:	db0f      	blt.n	407cb0 <__swhatbuf_r+0x3c>
  407c90:	9a02      	ldr	r2, [sp, #8]
  407c92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  407c96:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  407c9a:	fab2 f282 	clz	r2, r2
  407c9e:	0952      	lsrs	r2, r2, #5
  407ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407ca4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407ca8:	6032      	str	r2, [r6, #0]
  407caa:	602b      	str	r3, [r5, #0]
  407cac:	b010      	add	sp, #64	; 0x40
  407cae:	bd70      	pop	{r4, r5, r6, pc}
  407cb0:	89a2      	ldrh	r2, [r4, #12]
  407cb2:	2300      	movs	r3, #0
  407cb4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407cb8:	6033      	str	r3, [r6, #0]
  407cba:	d004      	beq.n	407cc6 <__swhatbuf_r+0x52>
  407cbc:	2240      	movs	r2, #64	; 0x40
  407cbe:	4618      	mov	r0, r3
  407cc0:	602a      	str	r2, [r5, #0]
  407cc2:	b010      	add	sp, #64	; 0x40
  407cc4:	bd70      	pop	{r4, r5, r6, pc}
  407cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407cca:	602b      	str	r3, [r5, #0]
  407ccc:	b010      	add	sp, #64	; 0x40
  407cce:	bd70      	pop	{r4, r5, r6, pc}

00407cd0 <__smakebuf_r>:
  407cd0:	898a      	ldrh	r2, [r1, #12]
  407cd2:	0792      	lsls	r2, r2, #30
  407cd4:	460b      	mov	r3, r1
  407cd6:	d506      	bpl.n	407ce6 <__smakebuf_r+0x16>
  407cd8:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407cdc:	2101      	movs	r1, #1
  407cde:	601a      	str	r2, [r3, #0]
  407ce0:	611a      	str	r2, [r3, #16]
  407ce2:	6159      	str	r1, [r3, #20]
  407ce4:	4770      	bx	lr
  407ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
  407ce8:	b083      	sub	sp, #12
  407cea:	ab01      	add	r3, sp, #4
  407cec:	466a      	mov	r2, sp
  407cee:	460c      	mov	r4, r1
  407cf0:	4606      	mov	r6, r0
  407cf2:	f7ff ffbf 	bl	407c74 <__swhatbuf_r>
  407cf6:	9900      	ldr	r1, [sp, #0]
  407cf8:	4605      	mov	r5, r0
  407cfa:	4630      	mov	r0, r6
  407cfc:	f000 f83a 	bl	407d74 <_malloc_r>
  407d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407d04:	b1d8      	cbz	r0, 407d3e <__smakebuf_r+0x6e>
  407d06:	9a01      	ldr	r2, [sp, #4]
  407d08:	4f15      	ldr	r7, [pc, #84]	; (407d60 <__smakebuf_r+0x90>)
  407d0a:	9900      	ldr	r1, [sp, #0]
  407d0c:	63f7      	str	r7, [r6, #60]	; 0x3c
  407d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407d12:	81a3      	strh	r3, [r4, #12]
  407d14:	6020      	str	r0, [r4, #0]
  407d16:	6120      	str	r0, [r4, #16]
  407d18:	6161      	str	r1, [r4, #20]
  407d1a:	b91a      	cbnz	r2, 407d24 <__smakebuf_r+0x54>
  407d1c:	432b      	orrs	r3, r5
  407d1e:	81a3      	strh	r3, [r4, #12]
  407d20:	b003      	add	sp, #12
  407d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407d24:	4630      	mov	r0, r6
  407d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407d2a:	f000 ff35 	bl	408b98 <_isatty_r>
  407d2e:	b1a0      	cbz	r0, 407d5a <__smakebuf_r+0x8a>
  407d30:	89a3      	ldrh	r3, [r4, #12]
  407d32:	f023 0303 	bic.w	r3, r3, #3
  407d36:	f043 0301 	orr.w	r3, r3, #1
  407d3a:	b21b      	sxth	r3, r3
  407d3c:	e7ee      	b.n	407d1c <__smakebuf_r+0x4c>
  407d3e:	059a      	lsls	r2, r3, #22
  407d40:	d4ee      	bmi.n	407d20 <__smakebuf_r+0x50>
  407d42:	f023 0303 	bic.w	r3, r3, #3
  407d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407d4a:	f043 0302 	orr.w	r3, r3, #2
  407d4e:	2101      	movs	r1, #1
  407d50:	81a3      	strh	r3, [r4, #12]
  407d52:	6022      	str	r2, [r4, #0]
  407d54:	6122      	str	r2, [r4, #16]
  407d56:	6161      	str	r1, [r4, #20]
  407d58:	e7e2      	b.n	407d20 <__smakebuf_r+0x50>
  407d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407d5e:	e7dd      	b.n	407d1c <__smakebuf_r+0x4c>
  407d60:	00407491 	.word	0x00407491

00407d64 <malloc>:
  407d64:	4b02      	ldr	r3, [pc, #8]	; (407d70 <malloc+0xc>)
  407d66:	4601      	mov	r1, r0
  407d68:	6818      	ldr	r0, [r3, #0]
  407d6a:	f000 b803 	b.w	407d74 <_malloc_r>
  407d6e:	bf00      	nop
  407d70:	2040003c 	.word	0x2040003c

00407d74 <_malloc_r>:
  407d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d78:	f101 060b 	add.w	r6, r1, #11
  407d7c:	2e16      	cmp	r6, #22
  407d7e:	b083      	sub	sp, #12
  407d80:	4605      	mov	r5, r0
  407d82:	f240 809e 	bls.w	407ec2 <_malloc_r+0x14e>
  407d86:	f036 0607 	bics.w	r6, r6, #7
  407d8a:	f100 80bd 	bmi.w	407f08 <_malloc_r+0x194>
  407d8e:	42b1      	cmp	r1, r6
  407d90:	f200 80ba 	bhi.w	407f08 <_malloc_r+0x194>
  407d94:	f000 fb68 	bl	408468 <__malloc_lock>
  407d98:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  407d9c:	f0c0 8293 	bcc.w	4082c6 <_malloc_r+0x552>
  407da0:	0a73      	lsrs	r3, r6, #9
  407da2:	f000 80b8 	beq.w	407f16 <_malloc_r+0x1a2>
  407da6:	2b04      	cmp	r3, #4
  407da8:	f200 8179 	bhi.w	40809e <_malloc_r+0x32a>
  407dac:	09b3      	lsrs	r3, r6, #6
  407dae:	f103 0039 	add.w	r0, r3, #57	; 0x39
  407db2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  407db6:	00c3      	lsls	r3, r0, #3
  407db8:	4fbf      	ldr	r7, [pc, #764]	; (4080b8 <_malloc_r+0x344>)
  407dba:	443b      	add	r3, r7
  407dbc:	f1a3 0108 	sub.w	r1, r3, #8
  407dc0:	685c      	ldr	r4, [r3, #4]
  407dc2:	42a1      	cmp	r1, r4
  407dc4:	d106      	bne.n	407dd4 <_malloc_r+0x60>
  407dc6:	e00c      	b.n	407de2 <_malloc_r+0x6e>
  407dc8:	2a00      	cmp	r2, #0
  407dca:	f280 80aa 	bge.w	407f22 <_malloc_r+0x1ae>
  407dce:	68e4      	ldr	r4, [r4, #12]
  407dd0:	42a1      	cmp	r1, r4
  407dd2:	d006      	beq.n	407de2 <_malloc_r+0x6e>
  407dd4:	6863      	ldr	r3, [r4, #4]
  407dd6:	f023 0303 	bic.w	r3, r3, #3
  407dda:	1b9a      	subs	r2, r3, r6
  407ddc:	2a0f      	cmp	r2, #15
  407dde:	ddf3      	ble.n	407dc8 <_malloc_r+0x54>
  407de0:	4670      	mov	r0, lr
  407de2:	693c      	ldr	r4, [r7, #16]
  407de4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4080cc <_malloc_r+0x358>
  407de8:	4574      	cmp	r4, lr
  407dea:	f000 81ab 	beq.w	408144 <_malloc_r+0x3d0>
  407dee:	6863      	ldr	r3, [r4, #4]
  407df0:	f023 0303 	bic.w	r3, r3, #3
  407df4:	1b9a      	subs	r2, r3, r6
  407df6:	2a0f      	cmp	r2, #15
  407df8:	f300 8190 	bgt.w	40811c <_malloc_r+0x3a8>
  407dfc:	2a00      	cmp	r2, #0
  407dfe:	f8c7 e014 	str.w	lr, [r7, #20]
  407e02:	f8c7 e010 	str.w	lr, [r7, #16]
  407e06:	f280 809d 	bge.w	407f44 <_malloc_r+0x1d0>
  407e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407e0e:	f080 8161 	bcs.w	4080d4 <_malloc_r+0x360>
  407e12:	08db      	lsrs	r3, r3, #3
  407e14:	f103 0c01 	add.w	ip, r3, #1
  407e18:	1099      	asrs	r1, r3, #2
  407e1a:	687a      	ldr	r2, [r7, #4]
  407e1c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  407e20:	f8c4 8008 	str.w	r8, [r4, #8]
  407e24:	2301      	movs	r3, #1
  407e26:	408b      	lsls	r3, r1
  407e28:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  407e2c:	4313      	orrs	r3, r2
  407e2e:	3908      	subs	r1, #8
  407e30:	60e1      	str	r1, [r4, #12]
  407e32:	607b      	str	r3, [r7, #4]
  407e34:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  407e38:	f8c8 400c 	str.w	r4, [r8, #12]
  407e3c:	1082      	asrs	r2, r0, #2
  407e3e:	2401      	movs	r4, #1
  407e40:	4094      	lsls	r4, r2
  407e42:	429c      	cmp	r4, r3
  407e44:	f200 808b 	bhi.w	407f5e <_malloc_r+0x1ea>
  407e48:	421c      	tst	r4, r3
  407e4a:	d106      	bne.n	407e5a <_malloc_r+0xe6>
  407e4c:	f020 0003 	bic.w	r0, r0, #3
  407e50:	0064      	lsls	r4, r4, #1
  407e52:	421c      	tst	r4, r3
  407e54:	f100 0004 	add.w	r0, r0, #4
  407e58:	d0fa      	beq.n	407e50 <_malloc_r+0xdc>
  407e5a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  407e5e:	46cc      	mov	ip, r9
  407e60:	4680      	mov	r8, r0
  407e62:	f8dc 300c 	ldr.w	r3, [ip, #12]
  407e66:	459c      	cmp	ip, r3
  407e68:	d107      	bne.n	407e7a <_malloc_r+0x106>
  407e6a:	e16d      	b.n	408148 <_malloc_r+0x3d4>
  407e6c:	2a00      	cmp	r2, #0
  407e6e:	f280 817b 	bge.w	408168 <_malloc_r+0x3f4>
  407e72:	68db      	ldr	r3, [r3, #12]
  407e74:	459c      	cmp	ip, r3
  407e76:	f000 8167 	beq.w	408148 <_malloc_r+0x3d4>
  407e7a:	6859      	ldr	r1, [r3, #4]
  407e7c:	f021 0103 	bic.w	r1, r1, #3
  407e80:	1b8a      	subs	r2, r1, r6
  407e82:	2a0f      	cmp	r2, #15
  407e84:	ddf2      	ble.n	407e6c <_malloc_r+0xf8>
  407e86:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  407e8a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  407e8e:	9300      	str	r3, [sp, #0]
  407e90:	199c      	adds	r4, r3, r6
  407e92:	4628      	mov	r0, r5
  407e94:	f046 0601 	orr.w	r6, r6, #1
  407e98:	f042 0501 	orr.w	r5, r2, #1
  407e9c:	605e      	str	r6, [r3, #4]
  407e9e:	f8c8 c00c 	str.w	ip, [r8, #12]
  407ea2:	f8cc 8008 	str.w	r8, [ip, #8]
  407ea6:	617c      	str	r4, [r7, #20]
  407ea8:	613c      	str	r4, [r7, #16]
  407eaa:	f8c4 e00c 	str.w	lr, [r4, #12]
  407eae:	f8c4 e008 	str.w	lr, [r4, #8]
  407eb2:	6065      	str	r5, [r4, #4]
  407eb4:	505a      	str	r2, [r3, r1]
  407eb6:	f000 fadd 	bl	408474 <__malloc_unlock>
  407eba:	9b00      	ldr	r3, [sp, #0]
  407ebc:	f103 0408 	add.w	r4, r3, #8
  407ec0:	e01e      	b.n	407f00 <_malloc_r+0x18c>
  407ec2:	2910      	cmp	r1, #16
  407ec4:	d820      	bhi.n	407f08 <_malloc_r+0x194>
  407ec6:	f000 facf 	bl	408468 <__malloc_lock>
  407eca:	2610      	movs	r6, #16
  407ecc:	2318      	movs	r3, #24
  407ece:	2002      	movs	r0, #2
  407ed0:	4f79      	ldr	r7, [pc, #484]	; (4080b8 <_malloc_r+0x344>)
  407ed2:	443b      	add	r3, r7
  407ed4:	f1a3 0208 	sub.w	r2, r3, #8
  407ed8:	685c      	ldr	r4, [r3, #4]
  407eda:	4294      	cmp	r4, r2
  407edc:	f000 813d 	beq.w	40815a <_malloc_r+0x3e6>
  407ee0:	6863      	ldr	r3, [r4, #4]
  407ee2:	68e1      	ldr	r1, [r4, #12]
  407ee4:	68a6      	ldr	r6, [r4, #8]
  407ee6:	f023 0303 	bic.w	r3, r3, #3
  407eea:	4423      	add	r3, r4
  407eec:	4628      	mov	r0, r5
  407eee:	685a      	ldr	r2, [r3, #4]
  407ef0:	60f1      	str	r1, [r6, #12]
  407ef2:	f042 0201 	orr.w	r2, r2, #1
  407ef6:	608e      	str	r6, [r1, #8]
  407ef8:	605a      	str	r2, [r3, #4]
  407efa:	f000 fabb 	bl	408474 <__malloc_unlock>
  407efe:	3408      	adds	r4, #8
  407f00:	4620      	mov	r0, r4
  407f02:	b003      	add	sp, #12
  407f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f08:	2400      	movs	r4, #0
  407f0a:	230c      	movs	r3, #12
  407f0c:	4620      	mov	r0, r4
  407f0e:	602b      	str	r3, [r5, #0]
  407f10:	b003      	add	sp, #12
  407f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f16:	2040      	movs	r0, #64	; 0x40
  407f18:	f44f 7300 	mov.w	r3, #512	; 0x200
  407f1c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  407f20:	e74a      	b.n	407db8 <_malloc_r+0x44>
  407f22:	4423      	add	r3, r4
  407f24:	68e1      	ldr	r1, [r4, #12]
  407f26:	685a      	ldr	r2, [r3, #4]
  407f28:	68a6      	ldr	r6, [r4, #8]
  407f2a:	f042 0201 	orr.w	r2, r2, #1
  407f2e:	60f1      	str	r1, [r6, #12]
  407f30:	4628      	mov	r0, r5
  407f32:	608e      	str	r6, [r1, #8]
  407f34:	605a      	str	r2, [r3, #4]
  407f36:	f000 fa9d 	bl	408474 <__malloc_unlock>
  407f3a:	3408      	adds	r4, #8
  407f3c:	4620      	mov	r0, r4
  407f3e:	b003      	add	sp, #12
  407f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f44:	4423      	add	r3, r4
  407f46:	4628      	mov	r0, r5
  407f48:	685a      	ldr	r2, [r3, #4]
  407f4a:	f042 0201 	orr.w	r2, r2, #1
  407f4e:	605a      	str	r2, [r3, #4]
  407f50:	f000 fa90 	bl	408474 <__malloc_unlock>
  407f54:	3408      	adds	r4, #8
  407f56:	4620      	mov	r0, r4
  407f58:	b003      	add	sp, #12
  407f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407f5e:	68bc      	ldr	r4, [r7, #8]
  407f60:	6863      	ldr	r3, [r4, #4]
  407f62:	f023 0803 	bic.w	r8, r3, #3
  407f66:	45b0      	cmp	r8, r6
  407f68:	d304      	bcc.n	407f74 <_malloc_r+0x200>
  407f6a:	eba8 0306 	sub.w	r3, r8, r6
  407f6e:	2b0f      	cmp	r3, #15
  407f70:	f300 8085 	bgt.w	40807e <_malloc_r+0x30a>
  407f74:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4080d0 <_malloc_r+0x35c>
  407f78:	4b50      	ldr	r3, [pc, #320]	; (4080bc <_malloc_r+0x348>)
  407f7a:	f8d9 2000 	ldr.w	r2, [r9]
  407f7e:	681b      	ldr	r3, [r3, #0]
  407f80:	3201      	adds	r2, #1
  407f82:	4433      	add	r3, r6
  407f84:	eb04 0a08 	add.w	sl, r4, r8
  407f88:	f000 8155 	beq.w	408236 <_malloc_r+0x4c2>
  407f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  407f90:	330f      	adds	r3, #15
  407f92:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  407f96:	f02b 0b0f 	bic.w	fp, fp, #15
  407f9a:	4659      	mov	r1, fp
  407f9c:	4628      	mov	r0, r5
  407f9e:	f000 fc15 	bl	4087cc <_sbrk_r>
  407fa2:	1c41      	adds	r1, r0, #1
  407fa4:	4602      	mov	r2, r0
  407fa6:	f000 80fc 	beq.w	4081a2 <_malloc_r+0x42e>
  407faa:	4582      	cmp	sl, r0
  407fac:	f200 80f7 	bhi.w	40819e <_malloc_r+0x42a>
  407fb0:	4b43      	ldr	r3, [pc, #268]	; (4080c0 <_malloc_r+0x34c>)
  407fb2:	6819      	ldr	r1, [r3, #0]
  407fb4:	4459      	add	r1, fp
  407fb6:	6019      	str	r1, [r3, #0]
  407fb8:	f000 814d 	beq.w	408256 <_malloc_r+0x4e2>
  407fbc:	f8d9 0000 	ldr.w	r0, [r9]
  407fc0:	3001      	adds	r0, #1
  407fc2:	bf1b      	ittet	ne
  407fc4:	eba2 0a0a 	subne.w	sl, r2, sl
  407fc8:	4451      	addne	r1, sl
  407fca:	f8c9 2000 	streq.w	r2, [r9]
  407fce:	6019      	strne	r1, [r3, #0]
  407fd0:	f012 0107 	ands.w	r1, r2, #7
  407fd4:	f000 8115 	beq.w	408202 <_malloc_r+0x48e>
  407fd8:	f1c1 0008 	rsb	r0, r1, #8
  407fdc:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  407fe0:	4402      	add	r2, r0
  407fe2:	3108      	adds	r1, #8
  407fe4:	eb02 090b 	add.w	r9, r2, fp
  407fe8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  407fec:	eba1 0909 	sub.w	r9, r1, r9
  407ff0:	4649      	mov	r1, r9
  407ff2:	4628      	mov	r0, r5
  407ff4:	9301      	str	r3, [sp, #4]
  407ff6:	9200      	str	r2, [sp, #0]
  407ff8:	f000 fbe8 	bl	4087cc <_sbrk_r>
  407ffc:	1c43      	adds	r3, r0, #1
  407ffe:	e89d 000c 	ldmia.w	sp, {r2, r3}
  408002:	f000 8143 	beq.w	40828c <_malloc_r+0x518>
  408006:	1a80      	subs	r0, r0, r2
  408008:	4448      	add	r0, r9
  40800a:	f040 0001 	orr.w	r0, r0, #1
  40800e:	6819      	ldr	r1, [r3, #0]
  408010:	60ba      	str	r2, [r7, #8]
  408012:	4449      	add	r1, r9
  408014:	42bc      	cmp	r4, r7
  408016:	6050      	str	r0, [r2, #4]
  408018:	6019      	str	r1, [r3, #0]
  40801a:	d017      	beq.n	40804c <_malloc_r+0x2d8>
  40801c:	f1b8 0f0f 	cmp.w	r8, #15
  408020:	f240 80fb 	bls.w	40821a <_malloc_r+0x4a6>
  408024:	6860      	ldr	r0, [r4, #4]
  408026:	f1a8 020c 	sub.w	r2, r8, #12
  40802a:	f022 0207 	bic.w	r2, r2, #7
  40802e:	eb04 0e02 	add.w	lr, r4, r2
  408032:	f000 0001 	and.w	r0, r0, #1
  408036:	f04f 0c05 	mov.w	ip, #5
  40803a:	4310      	orrs	r0, r2
  40803c:	2a0f      	cmp	r2, #15
  40803e:	6060      	str	r0, [r4, #4]
  408040:	f8ce c004 	str.w	ip, [lr, #4]
  408044:	f8ce c008 	str.w	ip, [lr, #8]
  408048:	f200 8117 	bhi.w	40827a <_malloc_r+0x506>
  40804c:	4b1d      	ldr	r3, [pc, #116]	; (4080c4 <_malloc_r+0x350>)
  40804e:	68bc      	ldr	r4, [r7, #8]
  408050:	681a      	ldr	r2, [r3, #0]
  408052:	4291      	cmp	r1, r2
  408054:	bf88      	it	hi
  408056:	6019      	strhi	r1, [r3, #0]
  408058:	4b1b      	ldr	r3, [pc, #108]	; (4080c8 <_malloc_r+0x354>)
  40805a:	681a      	ldr	r2, [r3, #0]
  40805c:	4291      	cmp	r1, r2
  40805e:	6862      	ldr	r2, [r4, #4]
  408060:	bf88      	it	hi
  408062:	6019      	strhi	r1, [r3, #0]
  408064:	f022 0203 	bic.w	r2, r2, #3
  408068:	4296      	cmp	r6, r2
  40806a:	eba2 0306 	sub.w	r3, r2, r6
  40806e:	d801      	bhi.n	408074 <_malloc_r+0x300>
  408070:	2b0f      	cmp	r3, #15
  408072:	dc04      	bgt.n	40807e <_malloc_r+0x30a>
  408074:	4628      	mov	r0, r5
  408076:	f000 f9fd 	bl	408474 <__malloc_unlock>
  40807a:	2400      	movs	r4, #0
  40807c:	e740      	b.n	407f00 <_malloc_r+0x18c>
  40807e:	19a2      	adds	r2, r4, r6
  408080:	f043 0301 	orr.w	r3, r3, #1
  408084:	f046 0601 	orr.w	r6, r6, #1
  408088:	6066      	str	r6, [r4, #4]
  40808a:	4628      	mov	r0, r5
  40808c:	60ba      	str	r2, [r7, #8]
  40808e:	6053      	str	r3, [r2, #4]
  408090:	f000 f9f0 	bl	408474 <__malloc_unlock>
  408094:	3408      	adds	r4, #8
  408096:	4620      	mov	r0, r4
  408098:	b003      	add	sp, #12
  40809a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40809e:	2b14      	cmp	r3, #20
  4080a0:	d971      	bls.n	408186 <_malloc_r+0x412>
  4080a2:	2b54      	cmp	r3, #84	; 0x54
  4080a4:	f200 80a3 	bhi.w	4081ee <_malloc_r+0x47a>
  4080a8:	0b33      	lsrs	r3, r6, #12
  4080aa:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4080ae:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4080b2:	00c3      	lsls	r3, r0, #3
  4080b4:	e680      	b.n	407db8 <_malloc_r+0x44>
  4080b6:	bf00      	nop
  4080b8:	204005d8 	.word	0x204005d8
  4080bc:	2040af24 	.word	0x2040af24
  4080c0:	2040aef4 	.word	0x2040aef4
  4080c4:	2040af1c 	.word	0x2040af1c
  4080c8:	2040af20 	.word	0x2040af20
  4080cc:	204005e0 	.word	0x204005e0
  4080d0:	204009e0 	.word	0x204009e0
  4080d4:	0a5a      	lsrs	r2, r3, #9
  4080d6:	2a04      	cmp	r2, #4
  4080d8:	d95b      	bls.n	408192 <_malloc_r+0x41e>
  4080da:	2a14      	cmp	r2, #20
  4080dc:	f200 80ae 	bhi.w	40823c <_malloc_r+0x4c8>
  4080e0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4080e4:	00c9      	lsls	r1, r1, #3
  4080e6:	325b      	adds	r2, #91	; 0x5b
  4080e8:	eb07 0c01 	add.w	ip, r7, r1
  4080ec:	5879      	ldr	r1, [r7, r1]
  4080ee:	f1ac 0c08 	sub.w	ip, ip, #8
  4080f2:	458c      	cmp	ip, r1
  4080f4:	f000 8088 	beq.w	408208 <_malloc_r+0x494>
  4080f8:	684a      	ldr	r2, [r1, #4]
  4080fa:	f022 0203 	bic.w	r2, r2, #3
  4080fe:	4293      	cmp	r3, r2
  408100:	d273      	bcs.n	4081ea <_malloc_r+0x476>
  408102:	6889      	ldr	r1, [r1, #8]
  408104:	458c      	cmp	ip, r1
  408106:	d1f7      	bne.n	4080f8 <_malloc_r+0x384>
  408108:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40810c:	687b      	ldr	r3, [r7, #4]
  40810e:	60e2      	str	r2, [r4, #12]
  408110:	f8c4 c008 	str.w	ip, [r4, #8]
  408114:	6094      	str	r4, [r2, #8]
  408116:	f8cc 400c 	str.w	r4, [ip, #12]
  40811a:	e68f      	b.n	407e3c <_malloc_r+0xc8>
  40811c:	19a1      	adds	r1, r4, r6
  40811e:	f046 0c01 	orr.w	ip, r6, #1
  408122:	f042 0601 	orr.w	r6, r2, #1
  408126:	f8c4 c004 	str.w	ip, [r4, #4]
  40812a:	4628      	mov	r0, r5
  40812c:	6179      	str	r1, [r7, #20]
  40812e:	6139      	str	r1, [r7, #16]
  408130:	f8c1 e00c 	str.w	lr, [r1, #12]
  408134:	f8c1 e008 	str.w	lr, [r1, #8]
  408138:	604e      	str	r6, [r1, #4]
  40813a:	50e2      	str	r2, [r4, r3]
  40813c:	f000 f99a 	bl	408474 <__malloc_unlock>
  408140:	3408      	adds	r4, #8
  408142:	e6dd      	b.n	407f00 <_malloc_r+0x18c>
  408144:	687b      	ldr	r3, [r7, #4]
  408146:	e679      	b.n	407e3c <_malloc_r+0xc8>
  408148:	f108 0801 	add.w	r8, r8, #1
  40814c:	f018 0f03 	tst.w	r8, #3
  408150:	f10c 0c08 	add.w	ip, ip, #8
  408154:	f47f ae85 	bne.w	407e62 <_malloc_r+0xee>
  408158:	e02d      	b.n	4081b6 <_malloc_r+0x442>
  40815a:	68dc      	ldr	r4, [r3, #12]
  40815c:	42a3      	cmp	r3, r4
  40815e:	bf08      	it	eq
  408160:	3002      	addeq	r0, #2
  408162:	f43f ae3e 	beq.w	407de2 <_malloc_r+0x6e>
  408166:	e6bb      	b.n	407ee0 <_malloc_r+0x16c>
  408168:	4419      	add	r1, r3
  40816a:	461c      	mov	r4, r3
  40816c:	684a      	ldr	r2, [r1, #4]
  40816e:	68db      	ldr	r3, [r3, #12]
  408170:	f854 6f08 	ldr.w	r6, [r4, #8]!
  408174:	f042 0201 	orr.w	r2, r2, #1
  408178:	604a      	str	r2, [r1, #4]
  40817a:	4628      	mov	r0, r5
  40817c:	60f3      	str	r3, [r6, #12]
  40817e:	609e      	str	r6, [r3, #8]
  408180:	f000 f978 	bl	408474 <__malloc_unlock>
  408184:	e6bc      	b.n	407f00 <_malloc_r+0x18c>
  408186:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40818a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40818e:	00c3      	lsls	r3, r0, #3
  408190:	e612      	b.n	407db8 <_malloc_r+0x44>
  408192:	099a      	lsrs	r2, r3, #6
  408194:	f102 0139 	add.w	r1, r2, #57	; 0x39
  408198:	00c9      	lsls	r1, r1, #3
  40819a:	3238      	adds	r2, #56	; 0x38
  40819c:	e7a4      	b.n	4080e8 <_malloc_r+0x374>
  40819e:	42bc      	cmp	r4, r7
  4081a0:	d054      	beq.n	40824c <_malloc_r+0x4d8>
  4081a2:	68bc      	ldr	r4, [r7, #8]
  4081a4:	6862      	ldr	r2, [r4, #4]
  4081a6:	f022 0203 	bic.w	r2, r2, #3
  4081aa:	e75d      	b.n	408068 <_malloc_r+0x2f4>
  4081ac:	f859 3908 	ldr.w	r3, [r9], #-8
  4081b0:	4599      	cmp	r9, r3
  4081b2:	f040 8086 	bne.w	4082c2 <_malloc_r+0x54e>
  4081b6:	f010 0f03 	tst.w	r0, #3
  4081ba:	f100 30ff 	add.w	r0, r0, #4294967295
  4081be:	d1f5      	bne.n	4081ac <_malloc_r+0x438>
  4081c0:	687b      	ldr	r3, [r7, #4]
  4081c2:	ea23 0304 	bic.w	r3, r3, r4
  4081c6:	607b      	str	r3, [r7, #4]
  4081c8:	0064      	lsls	r4, r4, #1
  4081ca:	429c      	cmp	r4, r3
  4081cc:	f63f aec7 	bhi.w	407f5e <_malloc_r+0x1ea>
  4081d0:	2c00      	cmp	r4, #0
  4081d2:	f43f aec4 	beq.w	407f5e <_malloc_r+0x1ea>
  4081d6:	421c      	tst	r4, r3
  4081d8:	4640      	mov	r0, r8
  4081da:	f47f ae3e 	bne.w	407e5a <_malloc_r+0xe6>
  4081de:	0064      	lsls	r4, r4, #1
  4081e0:	421c      	tst	r4, r3
  4081e2:	f100 0004 	add.w	r0, r0, #4
  4081e6:	d0fa      	beq.n	4081de <_malloc_r+0x46a>
  4081e8:	e637      	b.n	407e5a <_malloc_r+0xe6>
  4081ea:	468c      	mov	ip, r1
  4081ec:	e78c      	b.n	408108 <_malloc_r+0x394>
  4081ee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4081f2:	d815      	bhi.n	408220 <_malloc_r+0x4ac>
  4081f4:	0bf3      	lsrs	r3, r6, #15
  4081f6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4081fa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4081fe:	00c3      	lsls	r3, r0, #3
  408200:	e5da      	b.n	407db8 <_malloc_r+0x44>
  408202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  408206:	e6ed      	b.n	407fe4 <_malloc_r+0x270>
  408208:	687b      	ldr	r3, [r7, #4]
  40820a:	1092      	asrs	r2, r2, #2
  40820c:	2101      	movs	r1, #1
  40820e:	fa01 f202 	lsl.w	r2, r1, r2
  408212:	4313      	orrs	r3, r2
  408214:	607b      	str	r3, [r7, #4]
  408216:	4662      	mov	r2, ip
  408218:	e779      	b.n	40810e <_malloc_r+0x39a>
  40821a:	2301      	movs	r3, #1
  40821c:	6053      	str	r3, [r2, #4]
  40821e:	e729      	b.n	408074 <_malloc_r+0x300>
  408220:	f240 5254 	movw	r2, #1364	; 0x554
  408224:	4293      	cmp	r3, r2
  408226:	d822      	bhi.n	40826e <_malloc_r+0x4fa>
  408228:	0cb3      	lsrs	r3, r6, #18
  40822a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40822e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  408232:	00c3      	lsls	r3, r0, #3
  408234:	e5c0      	b.n	407db8 <_malloc_r+0x44>
  408236:	f103 0b10 	add.w	fp, r3, #16
  40823a:	e6ae      	b.n	407f9a <_malloc_r+0x226>
  40823c:	2a54      	cmp	r2, #84	; 0x54
  40823e:	d829      	bhi.n	408294 <_malloc_r+0x520>
  408240:	0b1a      	lsrs	r2, r3, #12
  408242:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  408246:	00c9      	lsls	r1, r1, #3
  408248:	326e      	adds	r2, #110	; 0x6e
  40824a:	e74d      	b.n	4080e8 <_malloc_r+0x374>
  40824c:	4b20      	ldr	r3, [pc, #128]	; (4082d0 <_malloc_r+0x55c>)
  40824e:	6819      	ldr	r1, [r3, #0]
  408250:	4459      	add	r1, fp
  408252:	6019      	str	r1, [r3, #0]
  408254:	e6b2      	b.n	407fbc <_malloc_r+0x248>
  408256:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40825a:	2800      	cmp	r0, #0
  40825c:	f47f aeae 	bne.w	407fbc <_malloc_r+0x248>
  408260:	eb08 030b 	add.w	r3, r8, fp
  408264:	68ba      	ldr	r2, [r7, #8]
  408266:	f043 0301 	orr.w	r3, r3, #1
  40826a:	6053      	str	r3, [r2, #4]
  40826c:	e6ee      	b.n	40804c <_malloc_r+0x2d8>
  40826e:	207f      	movs	r0, #127	; 0x7f
  408270:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  408274:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  408278:	e59e      	b.n	407db8 <_malloc_r+0x44>
  40827a:	f104 0108 	add.w	r1, r4, #8
  40827e:	4628      	mov	r0, r5
  408280:	9300      	str	r3, [sp, #0]
  408282:	f7ff fa59 	bl	407738 <_free_r>
  408286:	9b00      	ldr	r3, [sp, #0]
  408288:	6819      	ldr	r1, [r3, #0]
  40828a:	e6df      	b.n	40804c <_malloc_r+0x2d8>
  40828c:	2001      	movs	r0, #1
  40828e:	f04f 0900 	mov.w	r9, #0
  408292:	e6bc      	b.n	40800e <_malloc_r+0x29a>
  408294:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408298:	d805      	bhi.n	4082a6 <_malloc_r+0x532>
  40829a:	0bda      	lsrs	r2, r3, #15
  40829c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4082a0:	00c9      	lsls	r1, r1, #3
  4082a2:	3277      	adds	r2, #119	; 0x77
  4082a4:	e720      	b.n	4080e8 <_malloc_r+0x374>
  4082a6:	f240 5154 	movw	r1, #1364	; 0x554
  4082aa:	428a      	cmp	r2, r1
  4082ac:	d805      	bhi.n	4082ba <_malloc_r+0x546>
  4082ae:	0c9a      	lsrs	r2, r3, #18
  4082b0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4082b4:	00c9      	lsls	r1, r1, #3
  4082b6:	327c      	adds	r2, #124	; 0x7c
  4082b8:	e716      	b.n	4080e8 <_malloc_r+0x374>
  4082ba:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4082be:	227e      	movs	r2, #126	; 0x7e
  4082c0:	e712      	b.n	4080e8 <_malloc_r+0x374>
  4082c2:	687b      	ldr	r3, [r7, #4]
  4082c4:	e780      	b.n	4081c8 <_malloc_r+0x454>
  4082c6:	08f0      	lsrs	r0, r6, #3
  4082c8:	f106 0308 	add.w	r3, r6, #8
  4082cc:	e600      	b.n	407ed0 <_malloc_r+0x15c>
  4082ce:	bf00      	nop
  4082d0:	2040aef4 	.word	0x2040aef4

004082d4 <__ascii_mbtowc>:
  4082d4:	b082      	sub	sp, #8
  4082d6:	b149      	cbz	r1, 4082ec <__ascii_mbtowc+0x18>
  4082d8:	b15a      	cbz	r2, 4082f2 <__ascii_mbtowc+0x1e>
  4082da:	b16b      	cbz	r3, 4082f8 <__ascii_mbtowc+0x24>
  4082dc:	7813      	ldrb	r3, [r2, #0]
  4082de:	600b      	str	r3, [r1, #0]
  4082e0:	7812      	ldrb	r2, [r2, #0]
  4082e2:	1c10      	adds	r0, r2, #0
  4082e4:	bf18      	it	ne
  4082e6:	2001      	movne	r0, #1
  4082e8:	b002      	add	sp, #8
  4082ea:	4770      	bx	lr
  4082ec:	a901      	add	r1, sp, #4
  4082ee:	2a00      	cmp	r2, #0
  4082f0:	d1f3      	bne.n	4082da <__ascii_mbtowc+0x6>
  4082f2:	4610      	mov	r0, r2
  4082f4:	b002      	add	sp, #8
  4082f6:	4770      	bx	lr
  4082f8:	f06f 0001 	mvn.w	r0, #1
  4082fc:	e7f4      	b.n	4082e8 <__ascii_mbtowc+0x14>
  4082fe:	bf00      	nop

00408300 <memchr>:
  408300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408304:	2a10      	cmp	r2, #16
  408306:	db2b      	blt.n	408360 <memchr+0x60>
  408308:	f010 0f07 	tst.w	r0, #7
  40830c:	d008      	beq.n	408320 <memchr+0x20>
  40830e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408312:	3a01      	subs	r2, #1
  408314:	428b      	cmp	r3, r1
  408316:	d02d      	beq.n	408374 <memchr+0x74>
  408318:	f010 0f07 	tst.w	r0, #7
  40831c:	b342      	cbz	r2, 408370 <memchr+0x70>
  40831e:	d1f6      	bne.n	40830e <memchr+0xe>
  408320:	b4f0      	push	{r4, r5, r6, r7}
  408322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40832a:	f022 0407 	bic.w	r4, r2, #7
  40832e:	f07f 0700 	mvns.w	r7, #0
  408332:	2300      	movs	r3, #0
  408334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408338:	3c08      	subs	r4, #8
  40833a:	ea85 0501 	eor.w	r5, r5, r1
  40833e:	ea86 0601 	eor.w	r6, r6, r1
  408342:	fa85 f547 	uadd8	r5, r5, r7
  408346:	faa3 f587 	sel	r5, r3, r7
  40834a:	fa86 f647 	uadd8	r6, r6, r7
  40834e:	faa5 f687 	sel	r6, r5, r7
  408352:	b98e      	cbnz	r6, 408378 <memchr+0x78>
  408354:	d1ee      	bne.n	408334 <memchr+0x34>
  408356:	bcf0      	pop	{r4, r5, r6, r7}
  408358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40835c:	f002 0207 	and.w	r2, r2, #7
  408360:	b132      	cbz	r2, 408370 <memchr+0x70>
  408362:	f810 3b01 	ldrb.w	r3, [r0], #1
  408366:	3a01      	subs	r2, #1
  408368:	ea83 0301 	eor.w	r3, r3, r1
  40836c:	b113      	cbz	r3, 408374 <memchr+0x74>
  40836e:	d1f8      	bne.n	408362 <memchr+0x62>
  408370:	2000      	movs	r0, #0
  408372:	4770      	bx	lr
  408374:	3801      	subs	r0, #1
  408376:	4770      	bx	lr
  408378:	2d00      	cmp	r5, #0
  40837a:	bf06      	itte	eq
  40837c:	4635      	moveq	r5, r6
  40837e:	3803      	subeq	r0, #3
  408380:	3807      	subne	r0, #7
  408382:	f015 0f01 	tst.w	r5, #1
  408386:	d107      	bne.n	408398 <memchr+0x98>
  408388:	3001      	adds	r0, #1
  40838a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40838e:	bf02      	ittt	eq
  408390:	3001      	addeq	r0, #1
  408392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408396:	3001      	addeq	r0, #1
  408398:	bcf0      	pop	{r4, r5, r6, r7}
  40839a:	3801      	subs	r0, #1
  40839c:	4770      	bx	lr
  40839e:	bf00      	nop

004083a0 <memmove>:
  4083a0:	4288      	cmp	r0, r1
  4083a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4083a4:	d90d      	bls.n	4083c2 <memmove+0x22>
  4083a6:	188b      	adds	r3, r1, r2
  4083a8:	4298      	cmp	r0, r3
  4083aa:	d20a      	bcs.n	4083c2 <memmove+0x22>
  4083ac:	1884      	adds	r4, r0, r2
  4083ae:	2a00      	cmp	r2, #0
  4083b0:	d051      	beq.n	408456 <memmove+0xb6>
  4083b2:	4622      	mov	r2, r4
  4083b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4083b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4083bc:	4299      	cmp	r1, r3
  4083be:	d1f9      	bne.n	4083b4 <memmove+0x14>
  4083c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4083c2:	2a0f      	cmp	r2, #15
  4083c4:	d948      	bls.n	408458 <memmove+0xb8>
  4083c6:	ea41 0300 	orr.w	r3, r1, r0
  4083ca:	079b      	lsls	r3, r3, #30
  4083cc:	d146      	bne.n	40845c <memmove+0xbc>
  4083ce:	f100 0410 	add.w	r4, r0, #16
  4083d2:	f101 0310 	add.w	r3, r1, #16
  4083d6:	4615      	mov	r5, r2
  4083d8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4083dc:	f844 6c10 	str.w	r6, [r4, #-16]
  4083e0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4083e4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4083e8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4083ec:	f844 6c08 	str.w	r6, [r4, #-8]
  4083f0:	3d10      	subs	r5, #16
  4083f2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4083f6:	f844 6c04 	str.w	r6, [r4, #-4]
  4083fa:	2d0f      	cmp	r5, #15
  4083fc:	f103 0310 	add.w	r3, r3, #16
  408400:	f104 0410 	add.w	r4, r4, #16
  408404:	d8e8      	bhi.n	4083d8 <memmove+0x38>
  408406:	f1a2 0310 	sub.w	r3, r2, #16
  40840a:	f023 030f 	bic.w	r3, r3, #15
  40840e:	f002 0e0f 	and.w	lr, r2, #15
  408412:	3310      	adds	r3, #16
  408414:	f1be 0f03 	cmp.w	lr, #3
  408418:	4419      	add	r1, r3
  40841a:	4403      	add	r3, r0
  40841c:	d921      	bls.n	408462 <memmove+0xc2>
  40841e:	1f1e      	subs	r6, r3, #4
  408420:	460d      	mov	r5, r1
  408422:	4674      	mov	r4, lr
  408424:	3c04      	subs	r4, #4
  408426:	f855 7b04 	ldr.w	r7, [r5], #4
  40842a:	f846 7f04 	str.w	r7, [r6, #4]!
  40842e:	2c03      	cmp	r4, #3
  408430:	d8f8      	bhi.n	408424 <memmove+0x84>
  408432:	f1ae 0404 	sub.w	r4, lr, #4
  408436:	f024 0403 	bic.w	r4, r4, #3
  40843a:	3404      	adds	r4, #4
  40843c:	4421      	add	r1, r4
  40843e:	4423      	add	r3, r4
  408440:	f002 0203 	and.w	r2, r2, #3
  408444:	b162      	cbz	r2, 408460 <memmove+0xc0>
  408446:	3b01      	subs	r3, #1
  408448:	440a      	add	r2, r1
  40844a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40844e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408452:	428a      	cmp	r2, r1
  408454:	d1f9      	bne.n	40844a <memmove+0xaa>
  408456:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408458:	4603      	mov	r3, r0
  40845a:	e7f3      	b.n	408444 <memmove+0xa4>
  40845c:	4603      	mov	r3, r0
  40845e:	e7f2      	b.n	408446 <memmove+0xa6>
  408460:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408462:	4672      	mov	r2, lr
  408464:	e7ee      	b.n	408444 <memmove+0xa4>
  408466:	bf00      	nop

00408468 <__malloc_lock>:
  408468:	4801      	ldr	r0, [pc, #4]	; (408470 <__malloc_lock+0x8>)
  40846a:	f7ff bbff 	b.w	407c6c <__retarget_lock_acquire_recursive>
  40846e:	bf00      	nop
  408470:	20415bc8 	.word	0x20415bc8

00408474 <__malloc_unlock>:
  408474:	4801      	ldr	r0, [pc, #4]	; (40847c <__malloc_unlock+0x8>)
  408476:	f7ff bbfb 	b.w	407c70 <__retarget_lock_release_recursive>
  40847a:	bf00      	nop
  40847c:	20415bc8 	.word	0x20415bc8

00408480 <_realloc_r>:
  408480:	2900      	cmp	r1, #0
  408482:	f000 8095 	beq.w	4085b0 <_realloc_r+0x130>
  408486:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40848a:	460d      	mov	r5, r1
  40848c:	4616      	mov	r6, r2
  40848e:	b083      	sub	sp, #12
  408490:	4680      	mov	r8, r0
  408492:	f106 070b 	add.w	r7, r6, #11
  408496:	f7ff ffe7 	bl	408468 <__malloc_lock>
  40849a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40849e:	2f16      	cmp	r7, #22
  4084a0:	f02e 0403 	bic.w	r4, lr, #3
  4084a4:	f1a5 0908 	sub.w	r9, r5, #8
  4084a8:	d83c      	bhi.n	408524 <_realloc_r+0xa4>
  4084aa:	2210      	movs	r2, #16
  4084ac:	4617      	mov	r7, r2
  4084ae:	42be      	cmp	r6, r7
  4084b0:	d83d      	bhi.n	40852e <_realloc_r+0xae>
  4084b2:	4294      	cmp	r4, r2
  4084b4:	da43      	bge.n	40853e <_realloc_r+0xbe>
  4084b6:	4bc4      	ldr	r3, [pc, #784]	; (4087c8 <_realloc_r+0x348>)
  4084b8:	6899      	ldr	r1, [r3, #8]
  4084ba:	eb09 0004 	add.w	r0, r9, r4
  4084be:	4288      	cmp	r0, r1
  4084c0:	f000 80b4 	beq.w	40862c <_realloc_r+0x1ac>
  4084c4:	6843      	ldr	r3, [r0, #4]
  4084c6:	f023 0101 	bic.w	r1, r3, #1
  4084ca:	4401      	add	r1, r0
  4084cc:	6849      	ldr	r1, [r1, #4]
  4084ce:	07c9      	lsls	r1, r1, #31
  4084d0:	d54c      	bpl.n	40856c <_realloc_r+0xec>
  4084d2:	f01e 0f01 	tst.w	lr, #1
  4084d6:	f000 809b 	beq.w	408610 <_realloc_r+0x190>
  4084da:	4631      	mov	r1, r6
  4084dc:	4640      	mov	r0, r8
  4084de:	f7ff fc49 	bl	407d74 <_malloc_r>
  4084e2:	4606      	mov	r6, r0
  4084e4:	2800      	cmp	r0, #0
  4084e6:	d03a      	beq.n	40855e <_realloc_r+0xde>
  4084e8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4084ec:	f023 0301 	bic.w	r3, r3, #1
  4084f0:	444b      	add	r3, r9
  4084f2:	f1a0 0208 	sub.w	r2, r0, #8
  4084f6:	429a      	cmp	r2, r3
  4084f8:	f000 8121 	beq.w	40873e <_realloc_r+0x2be>
  4084fc:	1f22      	subs	r2, r4, #4
  4084fe:	2a24      	cmp	r2, #36	; 0x24
  408500:	f200 8107 	bhi.w	408712 <_realloc_r+0x292>
  408504:	2a13      	cmp	r2, #19
  408506:	f200 80db 	bhi.w	4086c0 <_realloc_r+0x240>
  40850a:	4603      	mov	r3, r0
  40850c:	462a      	mov	r2, r5
  40850e:	6811      	ldr	r1, [r2, #0]
  408510:	6019      	str	r1, [r3, #0]
  408512:	6851      	ldr	r1, [r2, #4]
  408514:	6059      	str	r1, [r3, #4]
  408516:	6892      	ldr	r2, [r2, #8]
  408518:	609a      	str	r2, [r3, #8]
  40851a:	4629      	mov	r1, r5
  40851c:	4640      	mov	r0, r8
  40851e:	f7ff f90b 	bl	407738 <_free_r>
  408522:	e01c      	b.n	40855e <_realloc_r+0xde>
  408524:	f027 0707 	bic.w	r7, r7, #7
  408528:	2f00      	cmp	r7, #0
  40852a:	463a      	mov	r2, r7
  40852c:	dabf      	bge.n	4084ae <_realloc_r+0x2e>
  40852e:	2600      	movs	r6, #0
  408530:	230c      	movs	r3, #12
  408532:	4630      	mov	r0, r6
  408534:	f8c8 3000 	str.w	r3, [r8]
  408538:	b003      	add	sp, #12
  40853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40853e:	462e      	mov	r6, r5
  408540:	1be3      	subs	r3, r4, r7
  408542:	2b0f      	cmp	r3, #15
  408544:	d81e      	bhi.n	408584 <_realloc_r+0x104>
  408546:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40854a:	f003 0301 	and.w	r3, r3, #1
  40854e:	4323      	orrs	r3, r4
  408550:	444c      	add	r4, r9
  408552:	f8c9 3004 	str.w	r3, [r9, #4]
  408556:	6863      	ldr	r3, [r4, #4]
  408558:	f043 0301 	orr.w	r3, r3, #1
  40855c:	6063      	str	r3, [r4, #4]
  40855e:	4640      	mov	r0, r8
  408560:	f7ff ff88 	bl	408474 <__malloc_unlock>
  408564:	4630      	mov	r0, r6
  408566:	b003      	add	sp, #12
  408568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40856c:	f023 0303 	bic.w	r3, r3, #3
  408570:	18e1      	adds	r1, r4, r3
  408572:	4291      	cmp	r1, r2
  408574:	db1f      	blt.n	4085b6 <_realloc_r+0x136>
  408576:	68c3      	ldr	r3, [r0, #12]
  408578:	6882      	ldr	r2, [r0, #8]
  40857a:	462e      	mov	r6, r5
  40857c:	60d3      	str	r3, [r2, #12]
  40857e:	460c      	mov	r4, r1
  408580:	609a      	str	r2, [r3, #8]
  408582:	e7dd      	b.n	408540 <_realloc_r+0xc0>
  408584:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408588:	eb09 0107 	add.w	r1, r9, r7
  40858c:	f002 0201 	and.w	r2, r2, #1
  408590:	444c      	add	r4, r9
  408592:	f043 0301 	orr.w	r3, r3, #1
  408596:	4317      	orrs	r7, r2
  408598:	f8c9 7004 	str.w	r7, [r9, #4]
  40859c:	604b      	str	r3, [r1, #4]
  40859e:	6863      	ldr	r3, [r4, #4]
  4085a0:	f043 0301 	orr.w	r3, r3, #1
  4085a4:	3108      	adds	r1, #8
  4085a6:	6063      	str	r3, [r4, #4]
  4085a8:	4640      	mov	r0, r8
  4085aa:	f7ff f8c5 	bl	407738 <_free_r>
  4085ae:	e7d6      	b.n	40855e <_realloc_r+0xde>
  4085b0:	4611      	mov	r1, r2
  4085b2:	f7ff bbdf 	b.w	407d74 <_malloc_r>
  4085b6:	f01e 0f01 	tst.w	lr, #1
  4085ba:	d18e      	bne.n	4084da <_realloc_r+0x5a>
  4085bc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4085c0:	eba9 0a01 	sub.w	sl, r9, r1
  4085c4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4085c8:	f021 0103 	bic.w	r1, r1, #3
  4085cc:	440b      	add	r3, r1
  4085ce:	4423      	add	r3, r4
  4085d0:	4293      	cmp	r3, r2
  4085d2:	db25      	blt.n	408620 <_realloc_r+0x1a0>
  4085d4:	68c2      	ldr	r2, [r0, #12]
  4085d6:	6881      	ldr	r1, [r0, #8]
  4085d8:	4656      	mov	r6, sl
  4085da:	60ca      	str	r2, [r1, #12]
  4085dc:	6091      	str	r1, [r2, #8]
  4085de:	f8da 100c 	ldr.w	r1, [sl, #12]
  4085e2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4085e6:	1f22      	subs	r2, r4, #4
  4085e8:	2a24      	cmp	r2, #36	; 0x24
  4085ea:	60c1      	str	r1, [r0, #12]
  4085ec:	6088      	str	r0, [r1, #8]
  4085ee:	f200 8094 	bhi.w	40871a <_realloc_r+0x29a>
  4085f2:	2a13      	cmp	r2, #19
  4085f4:	d96f      	bls.n	4086d6 <_realloc_r+0x256>
  4085f6:	6829      	ldr	r1, [r5, #0]
  4085f8:	f8ca 1008 	str.w	r1, [sl, #8]
  4085fc:	6869      	ldr	r1, [r5, #4]
  4085fe:	f8ca 100c 	str.w	r1, [sl, #12]
  408602:	2a1b      	cmp	r2, #27
  408604:	f200 80a2 	bhi.w	40874c <_realloc_r+0x2cc>
  408608:	3508      	adds	r5, #8
  40860a:	f10a 0210 	add.w	r2, sl, #16
  40860e:	e063      	b.n	4086d8 <_realloc_r+0x258>
  408610:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408614:	eba9 0a03 	sub.w	sl, r9, r3
  408618:	f8da 1004 	ldr.w	r1, [sl, #4]
  40861c:	f021 0103 	bic.w	r1, r1, #3
  408620:	1863      	adds	r3, r4, r1
  408622:	4293      	cmp	r3, r2
  408624:	f6ff af59 	blt.w	4084da <_realloc_r+0x5a>
  408628:	4656      	mov	r6, sl
  40862a:	e7d8      	b.n	4085de <_realloc_r+0x15e>
  40862c:	6841      	ldr	r1, [r0, #4]
  40862e:	f021 0b03 	bic.w	fp, r1, #3
  408632:	44a3      	add	fp, r4
  408634:	f107 0010 	add.w	r0, r7, #16
  408638:	4583      	cmp	fp, r0
  40863a:	da56      	bge.n	4086ea <_realloc_r+0x26a>
  40863c:	f01e 0f01 	tst.w	lr, #1
  408640:	f47f af4b 	bne.w	4084da <_realloc_r+0x5a>
  408644:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408648:	eba9 0a01 	sub.w	sl, r9, r1
  40864c:	f8da 1004 	ldr.w	r1, [sl, #4]
  408650:	f021 0103 	bic.w	r1, r1, #3
  408654:	448b      	add	fp, r1
  408656:	4558      	cmp	r0, fp
  408658:	dce2      	bgt.n	408620 <_realloc_r+0x1a0>
  40865a:	4656      	mov	r6, sl
  40865c:	f8da 100c 	ldr.w	r1, [sl, #12]
  408660:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408664:	1f22      	subs	r2, r4, #4
  408666:	2a24      	cmp	r2, #36	; 0x24
  408668:	60c1      	str	r1, [r0, #12]
  40866a:	6088      	str	r0, [r1, #8]
  40866c:	f200 808f 	bhi.w	40878e <_realloc_r+0x30e>
  408670:	2a13      	cmp	r2, #19
  408672:	f240 808a 	bls.w	40878a <_realloc_r+0x30a>
  408676:	6829      	ldr	r1, [r5, #0]
  408678:	f8ca 1008 	str.w	r1, [sl, #8]
  40867c:	6869      	ldr	r1, [r5, #4]
  40867e:	f8ca 100c 	str.w	r1, [sl, #12]
  408682:	2a1b      	cmp	r2, #27
  408684:	f200 808a 	bhi.w	40879c <_realloc_r+0x31c>
  408688:	3508      	adds	r5, #8
  40868a:	f10a 0210 	add.w	r2, sl, #16
  40868e:	6829      	ldr	r1, [r5, #0]
  408690:	6011      	str	r1, [r2, #0]
  408692:	6869      	ldr	r1, [r5, #4]
  408694:	6051      	str	r1, [r2, #4]
  408696:	68a9      	ldr	r1, [r5, #8]
  408698:	6091      	str	r1, [r2, #8]
  40869a:	eb0a 0107 	add.w	r1, sl, r7
  40869e:	ebab 0207 	sub.w	r2, fp, r7
  4086a2:	f042 0201 	orr.w	r2, r2, #1
  4086a6:	6099      	str	r1, [r3, #8]
  4086a8:	604a      	str	r2, [r1, #4]
  4086aa:	f8da 3004 	ldr.w	r3, [sl, #4]
  4086ae:	f003 0301 	and.w	r3, r3, #1
  4086b2:	431f      	orrs	r7, r3
  4086b4:	4640      	mov	r0, r8
  4086b6:	f8ca 7004 	str.w	r7, [sl, #4]
  4086ba:	f7ff fedb 	bl	408474 <__malloc_unlock>
  4086be:	e751      	b.n	408564 <_realloc_r+0xe4>
  4086c0:	682b      	ldr	r3, [r5, #0]
  4086c2:	6003      	str	r3, [r0, #0]
  4086c4:	686b      	ldr	r3, [r5, #4]
  4086c6:	6043      	str	r3, [r0, #4]
  4086c8:	2a1b      	cmp	r2, #27
  4086ca:	d82d      	bhi.n	408728 <_realloc_r+0x2a8>
  4086cc:	f100 0308 	add.w	r3, r0, #8
  4086d0:	f105 0208 	add.w	r2, r5, #8
  4086d4:	e71b      	b.n	40850e <_realloc_r+0x8e>
  4086d6:	4632      	mov	r2, r6
  4086d8:	6829      	ldr	r1, [r5, #0]
  4086da:	6011      	str	r1, [r2, #0]
  4086dc:	6869      	ldr	r1, [r5, #4]
  4086de:	6051      	str	r1, [r2, #4]
  4086e0:	68a9      	ldr	r1, [r5, #8]
  4086e2:	6091      	str	r1, [r2, #8]
  4086e4:	461c      	mov	r4, r3
  4086e6:	46d1      	mov	r9, sl
  4086e8:	e72a      	b.n	408540 <_realloc_r+0xc0>
  4086ea:	eb09 0107 	add.w	r1, r9, r7
  4086ee:	ebab 0b07 	sub.w	fp, fp, r7
  4086f2:	f04b 0201 	orr.w	r2, fp, #1
  4086f6:	6099      	str	r1, [r3, #8]
  4086f8:	604a      	str	r2, [r1, #4]
  4086fa:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4086fe:	f003 0301 	and.w	r3, r3, #1
  408702:	431f      	orrs	r7, r3
  408704:	4640      	mov	r0, r8
  408706:	f845 7c04 	str.w	r7, [r5, #-4]
  40870a:	f7ff feb3 	bl	408474 <__malloc_unlock>
  40870e:	462e      	mov	r6, r5
  408710:	e728      	b.n	408564 <_realloc_r+0xe4>
  408712:	4629      	mov	r1, r5
  408714:	f7ff fe44 	bl	4083a0 <memmove>
  408718:	e6ff      	b.n	40851a <_realloc_r+0x9a>
  40871a:	4629      	mov	r1, r5
  40871c:	4630      	mov	r0, r6
  40871e:	461c      	mov	r4, r3
  408720:	46d1      	mov	r9, sl
  408722:	f7ff fe3d 	bl	4083a0 <memmove>
  408726:	e70b      	b.n	408540 <_realloc_r+0xc0>
  408728:	68ab      	ldr	r3, [r5, #8]
  40872a:	6083      	str	r3, [r0, #8]
  40872c:	68eb      	ldr	r3, [r5, #12]
  40872e:	60c3      	str	r3, [r0, #12]
  408730:	2a24      	cmp	r2, #36	; 0x24
  408732:	d017      	beq.n	408764 <_realloc_r+0x2e4>
  408734:	f100 0310 	add.w	r3, r0, #16
  408738:	f105 0210 	add.w	r2, r5, #16
  40873c:	e6e7      	b.n	40850e <_realloc_r+0x8e>
  40873e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408742:	f023 0303 	bic.w	r3, r3, #3
  408746:	441c      	add	r4, r3
  408748:	462e      	mov	r6, r5
  40874a:	e6f9      	b.n	408540 <_realloc_r+0xc0>
  40874c:	68a9      	ldr	r1, [r5, #8]
  40874e:	f8ca 1010 	str.w	r1, [sl, #16]
  408752:	68e9      	ldr	r1, [r5, #12]
  408754:	f8ca 1014 	str.w	r1, [sl, #20]
  408758:	2a24      	cmp	r2, #36	; 0x24
  40875a:	d00c      	beq.n	408776 <_realloc_r+0x2f6>
  40875c:	3510      	adds	r5, #16
  40875e:	f10a 0218 	add.w	r2, sl, #24
  408762:	e7b9      	b.n	4086d8 <_realloc_r+0x258>
  408764:	692b      	ldr	r3, [r5, #16]
  408766:	6103      	str	r3, [r0, #16]
  408768:	696b      	ldr	r3, [r5, #20]
  40876a:	6143      	str	r3, [r0, #20]
  40876c:	f105 0218 	add.w	r2, r5, #24
  408770:	f100 0318 	add.w	r3, r0, #24
  408774:	e6cb      	b.n	40850e <_realloc_r+0x8e>
  408776:	692a      	ldr	r2, [r5, #16]
  408778:	f8ca 2018 	str.w	r2, [sl, #24]
  40877c:	696a      	ldr	r2, [r5, #20]
  40877e:	f8ca 201c 	str.w	r2, [sl, #28]
  408782:	3518      	adds	r5, #24
  408784:	f10a 0220 	add.w	r2, sl, #32
  408788:	e7a6      	b.n	4086d8 <_realloc_r+0x258>
  40878a:	4632      	mov	r2, r6
  40878c:	e77f      	b.n	40868e <_realloc_r+0x20e>
  40878e:	4629      	mov	r1, r5
  408790:	4630      	mov	r0, r6
  408792:	9301      	str	r3, [sp, #4]
  408794:	f7ff fe04 	bl	4083a0 <memmove>
  408798:	9b01      	ldr	r3, [sp, #4]
  40879a:	e77e      	b.n	40869a <_realloc_r+0x21a>
  40879c:	68a9      	ldr	r1, [r5, #8]
  40879e:	f8ca 1010 	str.w	r1, [sl, #16]
  4087a2:	68e9      	ldr	r1, [r5, #12]
  4087a4:	f8ca 1014 	str.w	r1, [sl, #20]
  4087a8:	2a24      	cmp	r2, #36	; 0x24
  4087aa:	d003      	beq.n	4087b4 <_realloc_r+0x334>
  4087ac:	3510      	adds	r5, #16
  4087ae:	f10a 0218 	add.w	r2, sl, #24
  4087b2:	e76c      	b.n	40868e <_realloc_r+0x20e>
  4087b4:	692a      	ldr	r2, [r5, #16]
  4087b6:	f8ca 2018 	str.w	r2, [sl, #24]
  4087ba:	696a      	ldr	r2, [r5, #20]
  4087bc:	f8ca 201c 	str.w	r2, [sl, #28]
  4087c0:	3518      	adds	r5, #24
  4087c2:	f10a 0220 	add.w	r2, sl, #32
  4087c6:	e762      	b.n	40868e <_realloc_r+0x20e>
  4087c8:	204005d8 	.word	0x204005d8

004087cc <_sbrk_r>:
  4087cc:	b538      	push	{r3, r4, r5, lr}
  4087ce:	4c07      	ldr	r4, [pc, #28]	; (4087ec <_sbrk_r+0x20>)
  4087d0:	2300      	movs	r3, #0
  4087d2:	4605      	mov	r5, r0
  4087d4:	4608      	mov	r0, r1
  4087d6:	6023      	str	r3, [r4, #0]
  4087d8:	f7fc ff06 	bl	4055e8 <_sbrk>
  4087dc:	1c43      	adds	r3, r0, #1
  4087de:	d000      	beq.n	4087e2 <_sbrk_r+0x16>
  4087e0:	bd38      	pop	{r3, r4, r5, pc}
  4087e2:	6823      	ldr	r3, [r4, #0]
  4087e4:	2b00      	cmp	r3, #0
  4087e6:	d0fb      	beq.n	4087e0 <_sbrk_r+0x14>
  4087e8:	602b      	str	r3, [r5, #0]
  4087ea:	bd38      	pop	{r3, r4, r5, pc}
  4087ec:	20415bdc 	.word	0x20415bdc

004087f0 <__sread>:
  4087f0:	b510      	push	{r4, lr}
  4087f2:	460c      	mov	r4, r1
  4087f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4087f8:	f000 f9f6 	bl	408be8 <_read_r>
  4087fc:	2800      	cmp	r0, #0
  4087fe:	db03      	blt.n	408808 <__sread+0x18>
  408800:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408802:	4403      	add	r3, r0
  408804:	6523      	str	r3, [r4, #80]	; 0x50
  408806:	bd10      	pop	{r4, pc}
  408808:	89a3      	ldrh	r3, [r4, #12]
  40880a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40880e:	81a3      	strh	r3, [r4, #12]
  408810:	bd10      	pop	{r4, pc}
  408812:	bf00      	nop

00408814 <__swrite>:
  408814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408818:	4616      	mov	r6, r2
  40881a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40881e:	461f      	mov	r7, r3
  408820:	05d3      	lsls	r3, r2, #23
  408822:	460c      	mov	r4, r1
  408824:	4605      	mov	r5, r0
  408826:	d507      	bpl.n	408838 <__swrite+0x24>
  408828:	2200      	movs	r2, #0
  40882a:	2302      	movs	r3, #2
  40882c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408830:	f000 f9c4 	bl	408bbc <_lseek_r>
  408834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40883c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408840:	81a2      	strh	r2, [r4, #12]
  408842:	463b      	mov	r3, r7
  408844:	4632      	mov	r2, r6
  408846:	4628      	mov	r0, r5
  408848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40884c:	f000 b8a4 	b.w	408998 <_write_r>

00408850 <__sseek>:
  408850:	b510      	push	{r4, lr}
  408852:	460c      	mov	r4, r1
  408854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408858:	f000 f9b0 	bl	408bbc <_lseek_r>
  40885c:	89a3      	ldrh	r3, [r4, #12]
  40885e:	1c42      	adds	r2, r0, #1
  408860:	bf0e      	itee	eq
  408862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40886a:	6520      	strne	r0, [r4, #80]	; 0x50
  40886c:	81a3      	strh	r3, [r4, #12]
  40886e:	bd10      	pop	{r4, pc}

00408870 <__sclose>:
  408870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408874:	f000 b908 	b.w	408a88 <_close_r>

00408878 <__swbuf_r>:
  408878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40887a:	460d      	mov	r5, r1
  40887c:	4614      	mov	r4, r2
  40887e:	4606      	mov	r6, r0
  408880:	b110      	cbz	r0, 408888 <__swbuf_r+0x10>
  408882:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408884:	2b00      	cmp	r3, #0
  408886:	d04b      	beq.n	408920 <__swbuf_r+0xa8>
  408888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40888c:	69a3      	ldr	r3, [r4, #24]
  40888e:	60a3      	str	r3, [r4, #8]
  408890:	b291      	uxth	r1, r2
  408892:	0708      	lsls	r0, r1, #28
  408894:	d539      	bpl.n	40890a <__swbuf_r+0x92>
  408896:	6923      	ldr	r3, [r4, #16]
  408898:	2b00      	cmp	r3, #0
  40889a:	d036      	beq.n	40890a <__swbuf_r+0x92>
  40889c:	b2ed      	uxtb	r5, r5
  40889e:	0489      	lsls	r1, r1, #18
  4088a0:	462f      	mov	r7, r5
  4088a2:	d515      	bpl.n	4088d0 <__swbuf_r+0x58>
  4088a4:	6822      	ldr	r2, [r4, #0]
  4088a6:	6961      	ldr	r1, [r4, #20]
  4088a8:	1ad3      	subs	r3, r2, r3
  4088aa:	428b      	cmp	r3, r1
  4088ac:	da1c      	bge.n	4088e8 <__swbuf_r+0x70>
  4088ae:	3301      	adds	r3, #1
  4088b0:	68a1      	ldr	r1, [r4, #8]
  4088b2:	1c50      	adds	r0, r2, #1
  4088b4:	3901      	subs	r1, #1
  4088b6:	60a1      	str	r1, [r4, #8]
  4088b8:	6020      	str	r0, [r4, #0]
  4088ba:	7015      	strb	r5, [r2, #0]
  4088bc:	6962      	ldr	r2, [r4, #20]
  4088be:	429a      	cmp	r2, r3
  4088c0:	d01a      	beq.n	4088f8 <__swbuf_r+0x80>
  4088c2:	89a3      	ldrh	r3, [r4, #12]
  4088c4:	07db      	lsls	r3, r3, #31
  4088c6:	d501      	bpl.n	4088cc <__swbuf_r+0x54>
  4088c8:	2d0a      	cmp	r5, #10
  4088ca:	d015      	beq.n	4088f8 <__swbuf_r+0x80>
  4088cc:	4638      	mov	r0, r7
  4088ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4088d0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4088d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4088d6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4088da:	81a2      	strh	r2, [r4, #12]
  4088dc:	6822      	ldr	r2, [r4, #0]
  4088de:	6661      	str	r1, [r4, #100]	; 0x64
  4088e0:	6961      	ldr	r1, [r4, #20]
  4088e2:	1ad3      	subs	r3, r2, r3
  4088e4:	428b      	cmp	r3, r1
  4088e6:	dbe2      	blt.n	4088ae <__swbuf_r+0x36>
  4088e8:	4621      	mov	r1, r4
  4088ea:	4630      	mov	r0, r6
  4088ec:	f7fe fda6 	bl	40743c <_fflush_r>
  4088f0:	b940      	cbnz	r0, 408904 <__swbuf_r+0x8c>
  4088f2:	6822      	ldr	r2, [r4, #0]
  4088f4:	2301      	movs	r3, #1
  4088f6:	e7db      	b.n	4088b0 <__swbuf_r+0x38>
  4088f8:	4621      	mov	r1, r4
  4088fa:	4630      	mov	r0, r6
  4088fc:	f7fe fd9e 	bl	40743c <_fflush_r>
  408900:	2800      	cmp	r0, #0
  408902:	d0e3      	beq.n	4088cc <__swbuf_r+0x54>
  408904:	f04f 37ff 	mov.w	r7, #4294967295
  408908:	e7e0      	b.n	4088cc <__swbuf_r+0x54>
  40890a:	4621      	mov	r1, r4
  40890c:	4630      	mov	r0, r6
  40890e:	f7fe fc81 	bl	407214 <__swsetup_r>
  408912:	2800      	cmp	r0, #0
  408914:	d1f6      	bne.n	408904 <__swbuf_r+0x8c>
  408916:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40891a:	6923      	ldr	r3, [r4, #16]
  40891c:	b291      	uxth	r1, r2
  40891e:	e7bd      	b.n	40889c <__swbuf_r+0x24>
  408920:	f7fe fde4 	bl	4074ec <__sinit>
  408924:	e7b0      	b.n	408888 <__swbuf_r+0x10>
  408926:	bf00      	nop

00408928 <_wcrtomb_r>:
  408928:	b5f0      	push	{r4, r5, r6, r7, lr}
  40892a:	4606      	mov	r6, r0
  40892c:	b085      	sub	sp, #20
  40892e:	461f      	mov	r7, r3
  408930:	b189      	cbz	r1, 408956 <_wcrtomb_r+0x2e>
  408932:	4c10      	ldr	r4, [pc, #64]	; (408974 <_wcrtomb_r+0x4c>)
  408934:	4d10      	ldr	r5, [pc, #64]	; (408978 <_wcrtomb_r+0x50>)
  408936:	6824      	ldr	r4, [r4, #0]
  408938:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40893a:	2c00      	cmp	r4, #0
  40893c:	bf08      	it	eq
  40893e:	462c      	moveq	r4, r5
  408940:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408944:	47a0      	blx	r4
  408946:	1c43      	adds	r3, r0, #1
  408948:	d103      	bne.n	408952 <_wcrtomb_r+0x2a>
  40894a:	2200      	movs	r2, #0
  40894c:	238a      	movs	r3, #138	; 0x8a
  40894e:	603a      	str	r2, [r7, #0]
  408950:	6033      	str	r3, [r6, #0]
  408952:	b005      	add	sp, #20
  408954:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408956:	460c      	mov	r4, r1
  408958:	4906      	ldr	r1, [pc, #24]	; (408974 <_wcrtomb_r+0x4c>)
  40895a:	4a07      	ldr	r2, [pc, #28]	; (408978 <_wcrtomb_r+0x50>)
  40895c:	6809      	ldr	r1, [r1, #0]
  40895e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408960:	2900      	cmp	r1, #0
  408962:	bf08      	it	eq
  408964:	4611      	moveq	r1, r2
  408966:	4622      	mov	r2, r4
  408968:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40896c:	a901      	add	r1, sp, #4
  40896e:	47a0      	blx	r4
  408970:	e7e9      	b.n	408946 <_wcrtomb_r+0x1e>
  408972:	bf00      	nop
  408974:	2040003c 	.word	0x2040003c
  408978:	2040046c 	.word	0x2040046c

0040897c <__ascii_wctomb>:
  40897c:	b121      	cbz	r1, 408988 <__ascii_wctomb+0xc>
  40897e:	2aff      	cmp	r2, #255	; 0xff
  408980:	d804      	bhi.n	40898c <__ascii_wctomb+0x10>
  408982:	700a      	strb	r2, [r1, #0]
  408984:	2001      	movs	r0, #1
  408986:	4770      	bx	lr
  408988:	4608      	mov	r0, r1
  40898a:	4770      	bx	lr
  40898c:	238a      	movs	r3, #138	; 0x8a
  40898e:	6003      	str	r3, [r0, #0]
  408990:	f04f 30ff 	mov.w	r0, #4294967295
  408994:	4770      	bx	lr
  408996:	bf00      	nop

00408998 <_write_r>:
  408998:	b570      	push	{r4, r5, r6, lr}
  40899a:	460d      	mov	r5, r1
  40899c:	4c08      	ldr	r4, [pc, #32]	; (4089c0 <_write_r+0x28>)
  40899e:	4611      	mov	r1, r2
  4089a0:	4606      	mov	r6, r0
  4089a2:	461a      	mov	r2, r3
  4089a4:	4628      	mov	r0, r5
  4089a6:	2300      	movs	r3, #0
  4089a8:	6023      	str	r3, [r4, #0]
  4089aa:	f7fb f99b 	bl	403ce4 <_write>
  4089ae:	1c43      	adds	r3, r0, #1
  4089b0:	d000      	beq.n	4089b4 <_write_r+0x1c>
  4089b2:	bd70      	pop	{r4, r5, r6, pc}
  4089b4:	6823      	ldr	r3, [r4, #0]
  4089b6:	2b00      	cmp	r3, #0
  4089b8:	d0fb      	beq.n	4089b2 <_write_r+0x1a>
  4089ba:	6033      	str	r3, [r6, #0]
  4089bc:	bd70      	pop	{r4, r5, r6, pc}
  4089be:	bf00      	nop
  4089c0:	20415bdc 	.word	0x20415bdc

004089c4 <__register_exitproc>:
  4089c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4089c8:	4d2c      	ldr	r5, [pc, #176]	; (408a7c <__register_exitproc+0xb8>)
  4089ca:	4606      	mov	r6, r0
  4089cc:	6828      	ldr	r0, [r5, #0]
  4089ce:	4698      	mov	r8, r3
  4089d0:	460f      	mov	r7, r1
  4089d2:	4691      	mov	r9, r2
  4089d4:	f7ff f94a 	bl	407c6c <__retarget_lock_acquire_recursive>
  4089d8:	4b29      	ldr	r3, [pc, #164]	; (408a80 <__register_exitproc+0xbc>)
  4089da:	681c      	ldr	r4, [r3, #0]
  4089dc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4089e0:	2b00      	cmp	r3, #0
  4089e2:	d03e      	beq.n	408a62 <__register_exitproc+0x9e>
  4089e4:	685a      	ldr	r2, [r3, #4]
  4089e6:	2a1f      	cmp	r2, #31
  4089e8:	dc1c      	bgt.n	408a24 <__register_exitproc+0x60>
  4089ea:	f102 0e01 	add.w	lr, r2, #1
  4089ee:	b176      	cbz	r6, 408a0e <__register_exitproc+0x4a>
  4089f0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4089f4:	2401      	movs	r4, #1
  4089f6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4089fa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4089fe:	4094      	lsls	r4, r2
  408a00:	4320      	orrs	r0, r4
  408a02:	2e02      	cmp	r6, #2
  408a04:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408a08:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408a0c:	d023      	beq.n	408a56 <__register_exitproc+0x92>
  408a0e:	3202      	adds	r2, #2
  408a10:	f8c3 e004 	str.w	lr, [r3, #4]
  408a14:	6828      	ldr	r0, [r5, #0]
  408a16:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  408a1a:	f7ff f929 	bl	407c70 <__retarget_lock_release_recursive>
  408a1e:	2000      	movs	r0, #0
  408a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408a24:	4b17      	ldr	r3, [pc, #92]	; (408a84 <__register_exitproc+0xc0>)
  408a26:	b30b      	cbz	r3, 408a6c <__register_exitproc+0xa8>
  408a28:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408a2c:	f7ff f99a 	bl	407d64 <malloc>
  408a30:	4603      	mov	r3, r0
  408a32:	b1d8      	cbz	r0, 408a6c <__register_exitproc+0xa8>
  408a34:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408a38:	6002      	str	r2, [r0, #0]
  408a3a:	2100      	movs	r1, #0
  408a3c:	6041      	str	r1, [r0, #4]
  408a3e:	460a      	mov	r2, r1
  408a40:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408a44:	f04f 0e01 	mov.w	lr, #1
  408a48:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  408a4c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408a50:	2e00      	cmp	r6, #0
  408a52:	d0dc      	beq.n	408a0e <__register_exitproc+0x4a>
  408a54:	e7cc      	b.n	4089f0 <__register_exitproc+0x2c>
  408a56:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  408a5a:	430c      	orrs	r4, r1
  408a5c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408a60:	e7d5      	b.n	408a0e <__register_exitproc+0x4a>
  408a62:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408a66:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  408a6a:	e7bb      	b.n	4089e4 <__register_exitproc+0x20>
  408a6c:	6828      	ldr	r0, [r5, #0]
  408a6e:	f7ff f8ff 	bl	407c70 <__retarget_lock_release_recursive>
  408a72:	f04f 30ff 	mov.w	r0, #4294967295
  408a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408a7a:	bf00      	nop
  408a7c:	20400468 	.word	0x20400468
  408a80:	00409070 	.word	0x00409070
  408a84:	00407d65 	.word	0x00407d65

00408a88 <_close_r>:
  408a88:	b538      	push	{r3, r4, r5, lr}
  408a8a:	4c07      	ldr	r4, [pc, #28]	; (408aa8 <_close_r+0x20>)
  408a8c:	2300      	movs	r3, #0
  408a8e:	4605      	mov	r5, r0
  408a90:	4608      	mov	r0, r1
  408a92:	6023      	str	r3, [r4, #0]
  408a94:	f7fc fdd4 	bl	405640 <_close>
  408a98:	1c43      	adds	r3, r0, #1
  408a9a:	d000      	beq.n	408a9e <_close_r+0x16>
  408a9c:	bd38      	pop	{r3, r4, r5, pc}
  408a9e:	6823      	ldr	r3, [r4, #0]
  408aa0:	2b00      	cmp	r3, #0
  408aa2:	d0fb      	beq.n	408a9c <_close_r+0x14>
  408aa4:	602b      	str	r3, [r5, #0]
  408aa6:	bd38      	pop	{r3, r4, r5, pc}
  408aa8:	20415bdc 	.word	0x20415bdc

00408aac <_fclose_r>:
  408aac:	b570      	push	{r4, r5, r6, lr}
  408aae:	b159      	cbz	r1, 408ac8 <_fclose_r+0x1c>
  408ab0:	4605      	mov	r5, r0
  408ab2:	460c      	mov	r4, r1
  408ab4:	b110      	cbz	r0, 408abc <_fclose_r+0x10>
  408ab6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408ab8:	2b00      	cmp	r3, #0
  408aba:	d03c      	beq.n	408b36 <_fclose_r+0x8a>
  408abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408abe:	07d8      	lsls	r0, r3, #31
  408ac0:	d505      	bpl.n	408ace <_fclose_r+0x22>
  408ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ac6:	b92b      	cbnz	r3, 408ad4 <_fclose_r+0x28>
  408ac8:	2600      	movs	r6, #0
  408aca:	4630      	mov	r0, r6
  408acc:	bd70      	pop	{r4, r5, r6, pc}
  408ace:	89a3      	ldrh	r3, [r4, #12]
  408ad0:	0599      	lsls	r1, r3, #22
  408ad2:	d53c      	bpl.n	408b4e <_fclose_r+0xa2>
  408ad4:	4621      	mov	r1, r4
  408ad6:	4628      	mov	r0, r5
  408ad8:	f7fe fc10 	bl	4072fc <__sflush_r>
  408adc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408ade:	4606      	mov	r6, r0
  408ae0:	b133      	cbz	r3, 408af0 <_fclose_r+0x44>
  408ae2:	69e1      	ldr	r1, [r4, #28]
  408ae4:	4628      	mov	r0, r5
  408ae6:	4798      	blx	r3
  408ae8:	2800      	cmp	r0, #0
  408aea:	bfb8      	it	lt
  408aec:	f04f 36ff 	movlt.w	r6, #4294967295
  408af0:	89a3      	ldrh	r3, [r4, #12]
  408af2:	061a      	lsls	r2, r3, #24
  408af4:	d422      	bmi.n	408b3c <_fclose_r+0x90>
  408af6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408af8:	b141      	cbz	r1, 408b0c <_fclose_r+0x60>
  408afa:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408afe:	4299      	cmp	r1, r3
  408b00:	d002      	beq.n	408b08 <_fclose_r+0x5c>
  408b02:	4628      	mov	r0, r5
  408b04:	f7fe fe18 	bl	407738 <_free_r>
  408b08:	2300      	movs	r3, #0
  408b0a:	6323      	str	r3, [r4, #48]	; 0x30
  408b0c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  408b0e:	b121      	cbz	r1, 408b1a <_fclose_r+0x6e>
  408b10:	4628      	mov	r0, r5
  408b12:	f7fe fe11 	bl	407738 <_free_r>
  408b16:	2300      	movs	r3, #0
  408b18:	6463      	str	r3, [r4, #68]	; 0x44
  408b1a:	f7fe fd13 	bl	407544 <__sfp_lock_acquire>
  408b1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408b20:	2200      	movs	r2, #0
  408b22:	07db      	lsls	r3, r3, #31
  408b24:	81a2      	strh	r2, [r4, #12]
  408b26:	d50e      	bpl.n	408b46 <_fclose_r+0x9a>
  408b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408b2a:	f7ff f89d 	bl	407c68 <__retarget_lock_close_recursive>
  408b2e:	f7fe fd0f 	bl	407550 <__sfp_lock_release>
  408b32:	4630      	mov	r0, r6
  408b34:	bd70      	pop	{r4, r5, r6, pc}
  408b36:	f7fe fcd9 	bl	4074ec <__sinit>
  408b3a:	e7bf      	b.n	408abc <_fclose_r+0x10>
  408b3c:	6921      	ldr	r1, [r4, #16]
  408b3e:	4628      	mov	r0, r5
  408b40:	f7fe fdfa 	bl	407738 <_free_r>
  408b44:	e7d7      	b.n	408af6 <_fclose_r+0x4a>
  408b46:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408b48:	f7ff f892 	bl	407c70 <__retarget_lock_release_recursive>
  408b4c:	e7ec      	b.n	408b28 <_fclose_r+0x7c>
  408b4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408b50:	f7ff f88c 	bl	407c6c <__retarget_lock_acquire_recursive>
  408b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408b58:	2b00      	cmp	r3, #0
  408b5a:	d1bb      	bne.n	408ad4 <_fclose_r+0x28>
  408b5c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408b5e:	f016 0601 	ands.w	r6, r6, #1
  408b62:	d1b1      	bne.n	408ac8 <_fclose_r+0x1c>
  408b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408b66:	f7ff f883 	bl	407c70 <__retarget_lock_release_recursive>
  408b6a:	4630      	mov	r0, r6
  408b6c:	bd70      	pop	{r4, r5, r6, pc}
  408b6e:	bf00      	nop

00408b70 <_fstat_r>:
  408b70:	b538      	push	{r3, r4, r5, lr}
  408b72:	460b      	mov	r3, r1
  408b74:	4c07      	ldr	r4, [pc, #28]	; (408b94 <_fstat_r+0x24>)
  408b76:	4605      	mov	r5, r0
  408b78:	4611      	mov	r1, r2
  408b7a:	4618      	mov	r0, r3
  408b7c:	2300      	movs	r3, #0
  408b7e:	6023      	str	r3, [r4, #0]
  408b80:	f7fc fd6a 	bl	405658 <_fstat>
  408b84:	1c43      	adds	r3, r0, #1
  408b86:	d000      	beq.n	408b8a <_fstat_r+0x1a>
  408b88:	bd38      	pop	{r3, r4, r5, pc}
  408b8a:	6823      	ldr	r3, [r4, #0]
  408b8c:	2b00      	cmp	r3, #0
  408b8e:	d0fb      	beq.n	408b88 <_fstat_r+0x18>
  408b90:	602b      	str	r3, [r5, #0]
  408b92:	bd38      	pop	{r3, r4, r5, pc}
  408b94:	20415bdc 	.word	0x20415bdc

00408b98 <_isatty_r>:
  408b98:	b538      	push	{r3, r4, r5, lr}
  408b9a:	4c07      	ldr	r4, [pc, #28]	; (408bb8 <_isatty_r+0x20>)
  408b9c:	2300      	movs	r3, #0
  408b9e:	4605      	mov	r5, r0
  408ba0:	4608      	mov	r0, r1
  408ba2:	6023      	str	r3, [r4, #0]
  408ba4:	f7fc fd68 	bl	405678 <_isatty>
  408ba8:	1c43      	adds	r3, r0, #1
  408baa:	d000      	beq.n	408bae <_isatty_r+0x16>
  408bac:	bd38      	pop	{r3, r4, r5, pc}
  408bae:	6823      	ldr	r3, [r4, #0]
  408bb0:	2b00      	cmp	r3, #0
  408bb2:	d0fb      	beq.n	408bac <_isatty_r+0x14>
  408bb4:	602b      	str	r3, [r5, #0]
  408bb6:	bd38      	pop	{r3, r4, r5, pc}
  408bb8:	20415bdc 	.word	0x20415bdc

00408bbc <_lseek_r>:
  408bbc:	b570      	push	{r4, r5, r6, lr}
  408bbe:	460d      	mov	r5, r1
  408bc0:	4c08      	ldr	r4, [pc, #32]	; (408be4 <_lseek_r+0x28>)
  408bc2:	4611      	mov	r1, r2
  408bc4:	4606      	mov	r6, r0
  408bc6:	461a      	mov	r2, r3
  408bc8:	4628      	mov	r0, r5
  408bca:	2300      	movs	r3, #0
  408bcc:	6023      	str	r3, [r4, #0]
  408bce:	f7fc fd5e 	bl	40568e <_lseek>
  408bd2:	1c43      	adds	r3, r0, #1
  408bd4:	d000      	beq.n	408bd8 <_lseek_r+0x1c>
  408bd6:	bd70      	pop	{r4, r5, r6, pc}
  408bd8:	6823      	ldr	r3, [r4, #0]
  408bda:	2b00      	cmp	r3, #0
  408bdc:	d0fb      	beq.n	408bd6 <_lseek_r+0x1a>
  408bde:	6033      	str	r3, [r6, #0]
  408be0:	bd70      	pop	{r4, r5, r6, pc}
  408be2:	bf00      	nop
  408be4:	20415bdc 	.word	0x20415bdc

00408be8 <_read_r>:
  408be8:	b570      	push	{r4, r5, r6, lr}
  408bea:	460d      	mov	r5, r1
  408bec:	4c08      	ldr	r4, [pc, #32]	; (408c10 <_read_r+0x28>)
  408bee:	4611      	mov	r1, r2
  408bf0:	4606      	mov	r6, r0
  408bf2:	461a      	mov	r2, r3
  408bf4:	4628      	mov	r0, r5
  408bf6:	2300      	movs	r3, #0
  408bf8:	6023      	str	r3, [r4, #0]
  408bfa:	f7fb f849 	bl	403c90 <_read>
  408bfe:	1c43      	adds	r3, r0, #1
  408c00:	d000      	beq.n	408c04 <_read_r+0x1c>
  408c02:	bd70      	pop	{r4, r5, r6, pc}
  408c04:	6823      	ldr	r3, [r4, #0]
  408c06:	2b00      	cmp	r3, #0
  408c08:	d0fb      	beq.n	408c02 <_read_r+0x1a>
  408c0a:	6033      	str	r3, [r6, #0]
  408c0c:	bd70      	pop	{r4, r5, r6, pc}
  408c0e:	bf00      	nop
  408c10:	20415bdc 	.word	0x20415bdc

00408c14 <__aeabi_uldivmod>:
  408c14:	b953      	cbnz	r3, 408c2c <__aeabi_uldivmod+0x18>
  408c16:	b94a      	cbnz	r2, 408c2c <__aeabi_uldivmod+0x18>
  408c18:	2900      	cmp	r1, #0
  408c1a:	bf08      	it	eq
  408c1c:	2800      	cmpeq	r0, #0
  408c1e:	bf1c      	itt	ne
  408c20:	f04f 31ff 	movne.w	r1, #4294967295
  408c24:	f04f 30ff 	movne.w	r0, #4294967295
  408c28:	f000 b97a 	b.w	408f20 <__aeabi_idiv0>
  408c2c:	f1ad 0c08 	sub.w	ip, sp, #8
  408c30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408c34:	f000 f806 	bl	408c44 <__udivmoddi4>
  408c38:	f8dd e004 	ldr.w	lr, [sp, #4]
  408c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408c40:	b004      	add	sp, #16
  408c42:	4770      	bx	lr

00408c44 <__udivmoddi4>:
  408c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408c48:	468c      	mov	ip, r1
  408c4a:	460d      	mov	r5, r1
  408c4c:	4604      	mov	r4, r0
  408c4e:	9e08      	ldr	r6, [sp, #32]
  408c50:	2b00      	cmp	r3, #0
  408c52:	d151      	bne.n	408cf8 <__udivmoddi4+0xb4>
  408c54:	428a      	cmp	r2, r1
  408c56:	4617      	mov	r7, r2
  408c58:	d96d      	bls.n	408d36 <__udivmoddi4+0xf2>
  408c5a:	fab2 fe82 	clz	lr, r2
  408c5e:	f1be 0f00 	cmp.w	lr, #0
  408c62:	d00b      	beq.n	408c7c <__udivmoddi4+0x38>
  408c64:	f1ce 0c20 	rsb	ip, lr, #32
  408c68:	fa01 f50e 	lsl.w	r5, r1, lr
  408c6c:	fa20 fc0c 	lsr.w	ip, r0, ip
  408c70:	fa02 f70e 	lsl.w	r7, r2, lr
  408c74:	ea4c 0c05 	orr.w	ip, ip, r5
  408c78:	fa00 f40e 	lsl.w	r4, r0, lr
  408c7c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408c80:	0c25      	lsrs	r5, r4, #16
  408c82:	fbbc f8fa 	udiv	r8, ip, sl
  408c86:	fa1f f987 	uxth.w	r9, r7
  408c8a:	fb0a cc18 	mls	ip, sl, r8, ip
  408c8e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408c92:	fb08 f309 	mul.w	r3, r8, r9
  408c96:	42ab      	cmp	r3, r5
  408c98:	d90a      	bls.n	408cb0 <__udivmoddi4+0x6c>
  408c9a:	19ed      	adds	r5, r5, r7
  408c9c:	f108 32ff 	add.w	r2, r8, #4294967295
  408ca0:	f080 8123 	bcs.w	408eea <__udivmoddi4+0x2a6>
  408ca4:	42ab      	cmp	r3, r5
  408ca6:	f240 8120 	bls.w	408eea <__udivmoddi4+0x2a6>
  408caa:	f1a8 0802 	sub.w	r8, r8, #2
  408cae:	443d      	add	r5, r7
  408cb0:	1aed      	subs	r5, r5, r3
  408cb2:	b2a4      	uxth	r4, r4
  408cb4:	fbb5 f0fa 	udiv	r0, r5, sl
  408cb8:	fb0a 5510 	mls	r5, sl, r0, r5
  408cbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408cc0:	fb00 f909 	mul.w	r9, r0, r9
  408cc4:	45a1      	cmp	r9, r4
  408cc6:	d909      	bls.n	408cdc <__udivmoddi4+0x98>
  408cc8:	19e4      	adds	r4, r4, r7
  408cca:	f100 33ff 	add.w	r3, r0, #4294967295
  408cce:	f080 810a 	bcs.w	408ee6 <__udivmoddi4+0x2a2>
  408cd2:	45a1      	cmp	r9, r4
  408cd4:	f240 8107 	bls.w	408ee6 <__udivmoddi4+0x2a2>
  408cd8:	3802      	subs	r0, #2
  408cda:	443c      	add	r4, r7
  408cdc:	eba4 0409 	sub.w	r4, r4, r9
  408ce0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408ce4:	2100      	movs	r1, #0
  408ce6:	2e00      	cmp	r6, #0
  408ce8:	d061      	beq.n	408dae <__udivmoddi4+0x16a>
  408cea:	fa24 f40e 	lsr.w	r4, r4, lr
  408cee:	2300      	movs	r3, #0
  408cf0:	6034      	str	r4, [r6, #0]
  408cf2:	6073      	str	r3, [r6, #4]
  408cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408cf8:	428b      	cmp	r3, r1
  408cfa:	d907      	bls.n	408d0c <__udivmoddi4+0xc8>
  408cfc:	2e00      	cmp	r6, #0
  408cfe:	d054      	beq.n	408daa <__udivmoddi4+0x166>
  408d00:	2100      	movs	r1, #0
  408d02:	e886 0021 	stmia.w	r6, {r0, r5}
  408d06:	4608      	mov	r0, r1
  408d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d0c:	fab3 f183 	clz	r1, r3
  408d10:	2900      	cmp	r1, #0
  408d12:	f040 808e 	bne.w	408e32 <__udivmoddi4+0x1ee>
  408d16:	42ab      	cmp	r3, r5
  408d18:	d302      	bcc.n	408d20 <__udivmoddi4+0xdc>
  408d1a:	4282      	cmp	r2, r0
  408d1c:	f200 80fa 	bhi.w	408f14 <__udivmoddi4+0x2d0>
  408d20:	1a84      	subs	r4, r0, r2
  408d22:	eb65 0503 	sbc.w	r5, r5, r3
  408d26:	2001      	movs	r0, #1
  408d28:	46ac      	mov	ip, r5
  408d2a:	2e00      	cmp	r6, #0
  408d2c:	d03f      	beq.n	408dae <__udivmoddi4+0x16a>
  408d2e:	e886 1010 	stmia.w	r6, {r4, ip}
  408d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d36:	b912      	cbnz	r2, 408d3e <__udivmoddi4+0xfa>
  408d38:	2701      	movs	r7, #1
  408d3a:	fbb7 f7f2 	udiv	r7, r7, r2
  408d3e:	fab7 fe87 	clz	lr, r7
  408d42:	f1be 0f00 	cmp.w	lr, #0
  408d46:	d134      	bne.n	408db2 <__udivmoddi4+0x16e>
  408d48:	1beb      	subs	r3, r5, r7
  408d4a:	0c3a      	lsrs	r2, r7, #16
  408d4c:	fa1f fc87 	uxth.w	ip, r7
  408d50:	2101      	movs	r1, #1
  408d52:	fbb3 f8f2 	udiv	r8, r3, r2
  408d56:	0c25      	lsrs	r5, r4, #16
  408d58:	fb02 3318 	mls	r3, r2, r8, r3
  408d5c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408d60:	fb0c f308 	mul.w	r3, ip, r8
  408d64:	42ab      	cmp	r3, r5
  408d66:	d907      	bls.n	408d78 <__udivmoddi4+0x134>
  408d68:	19ed      	adds	r5, r5, r7
  408d6a:	f108 30ff 	add.w	r0, r8, #4294967295
  408d6e:	d202      	bcs.n	408d76 <__udivmoddi4+0x132>
  408d70:	42ab      	cmp	r3, r5
  408d72:	f200 80d1 	bhi.w	408f18 <__udivmoddi4+0x2d4>
  408d76:	4680      	mov	r8, r0
  408d78:	1aed      	subs	r5, r5, r3
  408d7a:	b2a3      	uxth	r3, r4
  408d7c:	fbb5 f0f2 	udiv	r0, r5, r2
  408d80:	fb02 5510 	mls	r5, r2, r0, r5
  408d84:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408d88:	fb0c fc00 	mul.w	ip, ip, r0
  408d8c:	45a4      	cmp	ip, r4
  408d8e:	d907      	bls.n	408da0 <__udivmoddi4+0x15c>
  408d90:	19e4      	adds	r4, r4, r7
  408d92:	f100 33ff 	add.w	r3, r0, #4294967295
  408d96:	d202      	bcs.n	408d9e <__udivmoddi4+0x15a>
  408d98:	45a4      	cmp	ip, r4
  408d9a:	f200 80b8 	bhi.w	408f0e <__udivmoddi4+0x2ca>
  408d9e:	4618      	mov	r0, r3
  408da0:	eba4 040c 	sub.w	r4, r4, ip
  408da4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408da8:	e79d      	b.n	408ce6 <__udivmoddi4+0xa2>
  408daa:	4631      	mov	r1, r6
  408dac:	4630      	mov	r0, r6
  408dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408db2:	f1ce 0420 	rsb	r4, lr, #32
  408db6:	fa05 f30e 	lsl.w	r3, r5, lr
  408dba:	fa07 f70e 	lsl.w	r7, r7, lr
  408dbe:	fa20 f804 	lsr.w	r8, r0, r4
  408dc2:	0c3a      	lsrs	r2, r7, #16
  408dc4:	fa25 f404 	lsr.w	r4, r5, r4
  408dc8:	ea48 0803 	orr.w	r8, r8, r3
  408dcc:	fbb4 f1f2 	udiv	r1, r4, r2
  408dd0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408dd4:	fb02 4411 	mls	r4, r2, r1, r4
  408dd8:	fa1f fc87 	uxth.w	ip, r7
  408ddc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408de0:	fb01 f30c 	mul.w	r3, r1, ip
  408de4:	42ab      	cmp	r3, r5
  408de6:	fa00 f40e 	lsl.w	r4, r0, lr
  408dea:	d909      	bls.n	408e00 <__udivmoddi4+0x1bc>
  408dec:	19ed      	adds	r5, r5, r7
  408dee:	f101 30ff 	add.w	r0, r1, #4294967295
  408df2:	f080 808a 	bcs.w	408f0a <__udivmoddi4+0x2c6>
  408df6:	42ab      	cmp	r3, r5
  408df8:	f240 8087 	bls.w	408f0a <__udivmoddi4+0x2c6>
  408dfc:	3902      	subs	r1, #2
  408dfe:	443d      	add	r5, r7
  408e00:	1aeb      	subs	r3, r5, r3
  408e02:	fa1f f588 	uxth.w	r5, r8
  408e06:	fbb3 f0f2 	udiv	r0, r3, r2
  408e0a:	fb02 3310 	mls	r3, r2, r0, r3
  408e0e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408e12:	fb00 f30c 	mul.w	r3, r0, ip
  408e16:	42ab      	cmp	r3, r5
  408e18:	d907      	bls.n	408e2a <__udivmoddi4+0x1e6>
  408e1a:	19ed      	adds	r5, r5, r7
  408e1c:	f100 38ff 	add.w	r8, r0, #4294967295
  408e20:	d26f      	bcs.n	408f02 <__udivmoddi4+0x2be>
  408e22:	42ab      	cmp	r3, r5
  408e24:	d96d      	bls.n	408f02 <__udivmoddi4+0x2be>
  408e26:	3802      	subs	r0, #2
  408e28:	443d      	add	r5, r7
  408e2a:	1aeb      	subs	r3, r5, r3
  408e2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408e30:	e78f      	b.n	408d52 <__udivmoddi4+0x10e>
  408e32:	f1c1 0720 	rsb	r7, r1, #32
  408e36:	fa22 f807 	lsr.w	r8, r2, r7
  408e3a:	408b      	lsls	r3, r1
  408e3c:	fa05 f401 	lsl.w	r4, r5, r1
  408e40:	ea48 0303 	orr.w	r3, r8, r3
  408e44:	fa20 fe07 	lsr.w	lr, r0, r7
  408e48:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408e4c:	40fd      	lsrs	r5, r7
  408e4e:	ea4e 0e04 	orr.w	lr, lr, r4
  408e52:	fbb5 f9fc 	udiv	r9, r5, ip
  408e56:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408e5a:	fb0c 5519 	mls	r5, ip, r9, r5
  408e5e:	fa1f f883 	uxth.w	r8, r3
  408e62:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408e66:	fb09 f408 	mul.w	r4, r9, r8
  408e6a:	42ac      	cmp	r4, r5
  408e6c:	fa02 f201 	lsl.w	r2, r2, r1
  408e70:	fa00 fa01 	lsl.w	sl, r0, r1
  408e74:	d908      	bls.n	408e88 <__udivmoddi4+0x244>
  408e76:	18ed      	adds	r5, r5, r3
  408e78:	f109 30ff 	add.w	r0, r9, #4294967295
  408e7c:	d243      	bcs.n	408f06 <__udivmoddi4+0x2c2>
  408e7e:	42ac      	cmp	r4, r5
  408e80:	d941      	bls.n	408f06 <__udivmoddi4+0x2c2>
  408e82:	f1a9 0902 	sub.w	r9, r9, #2
  408e86:	441d      	add	r5, r3
  408e88:	1b2d      	subs	r5, r5, r4
  408e8a:	fa1f fe8e 	uxth.w	lr, lr
  408e8e:	fbb5 f0fc 	udiv	r0, r5, ip
  408e92:	fb0c 5510 	mls	r5, ip, r0, r5
  408e96:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  408e9a:	fb00 f808 	mul.w	r8, r0, r8
  408e9e:	45a0      	cmp	r8, r4
  408ea0:	d907      	bls.n	408eb2 <__udivmoddi4+0x26e>
  408ea2:	18e4      	adds	r4, r4, r3
  408ea4:	f100 35ff 	add.w	r5, r0, #4294967295
  408ea8:	d229      	bcs.n	408efe <__udivmoddi4+0x2ba>
  408eaa:	45a0      	cmp	r8, r4
  408eac:	d927      	bls.n	408efe <__udivmoddi4+0x2ba>
  408eae:	3802      	subs	r0, #2
  408eb0:	441c      	add	r4, r3
  408eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408eb6:	eba4 0408 	sub.w	r4, r4, r8
  408eba:	fba0 8902 	umull	r8, r9, r0, r2
  408ebe:	454c      	cmp	r4, r9
  408ec0:	46c6      	mov	lr, r8
  408ec2:	464d      	mov	r5, r9
  408ec4:	d315      	bcc.n	408ef2 <__udivmoddi4+0x2ae>
  408ec6:	d012      	beq.n	408eee <__udivmoddi4+0x2aa>
  408ec8:	b156      	cbz	r6, 408ee0 <__udivmoddi4+0x29c>
  408eca:	ebba 030e 	subs.w	r3, sl, lr
  408ece:	eb64 0405 	sbc.w	r4, r4, r5
  408ed2:	fa04 f707 	lsl.w	r7, r4, r7
  408ed6:	40cb      	lsrs	r3, r1
  408ed8:	431f      	orrs	r7, r3
  408eda:	40cc      	lsrs	r4, r1
  408edc:	6037      	str	r7, [r6, #0]
  408ede:	6074      	str	r4, [r6, #4]
  408ee0:	2100      	movs	r1, #0
  408ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408ee6:	4618      	mov	r0, r3
  408ee8:	e6f8      	b.n	408cdc <__udivmoddi4+0x98>
  408eea:	4690      	mov	r8, r2
  408eec:	e6e0      	b.n	408cb0 <__udivmoddi4+0x6c>
  408eee:	45c2      	cmp	sl, r8
  408ef0:	d2ea      	bcs.n	408ec8 <__udivmoddi4+0x284>
  408ef2:	ebb8 0e02 	subs.w	lr, r8, r2
  408ef6:	eb69 0503 	sbc.w	r5, r9, r3
  408efa:	3801      	subs	r0, #1
  408efc:	e7e4      	b.n	408ec8 <__udivmoddi4+0x284>
  408efe:	4628      	mov	r0, r5
  408f00:	e7d7      	b.n	408eb2 <__udivmoddi4+0x26e>
  408f02:	4640      	mov	r0, r8
  408f04:	e791      	b.n	408e2a <__udivmoddi4+0x1e6>
  408f06:	4681      	mov	r9, r0
  408f08:	e7be      	b.n	408e88 <__udivmoddi4+0x244>
  408f0a:	4601      	mov	r1, r0
  408f0c:	e778      	b.n	408e00 <__udivmoddi4+0x1bc>
  408f0e:	3802      	subs	r0, #2
  408f10:	443c      	add	r4, r7
  408f12:	e745      	b.n	408da0 <__udivmoddi4+0x15c>
  408f14:	4608      	mov	r0, r1
  408f16:	e708      	b.n	408d2a <__udivmoddi4+0xe6>
  408f18:	f1a8 0802 	sub.w	r8, r8, #2
  408f1c:	443d      	add	r5, r7
  408f1e:	e72b      	b.n	408d78 <__udivmoddi4+0x134>

00408f20 <__aeabi_idiv0>:
  408f20:	4770      	bx	lr
  408f22:	bf00      	nop
  408f24:	454c4449 	.word	0x454c4449
  408f28:	00000000 	.word	0x00000000
  408f2c:	00000a0d 	.word	0x00000a0d
  408f30:	09097325 	.word	0x09097325
  408f34:	25096325 	.word	0x25096325
  408f38:	75250975 	.word	0x75250975
  408f3c:	0d752509 	.word	0x0d752509
  408f40:	0000000a 	.word	0x0000000a
  408f44:	20726d54 	.word	0x20726d54
  408f48:	00637653 	.word	0x00637653
  408f4c:	63617473 	.word	0x63617473
  408f50:	766f206b 	.word	0x766f206b
  408f54:	6c667265 	.word	0x6c667265
  408f58:	2520776f 	.word	0x2520776f
  408f5c:	73252078 	.word	0x73252078
  408f60:	00000a0d 	.word	0x00000a0d
  408f64:	0001c200 	.word	0x0001c200
  408f68:	000000c0 	.word	0x000000c0
  408f6c:	00000800 	.word	0x00000800
  408f70:	00000000 	.word	0x00000000
  408f74:	6e696147 	.word	0x6e696147
  408f78:	6425203a 	.word	0x6425203a
  408f7c:	0000000a 	.word	0x0000000a
  408f80:	75746153 	.word	0x75746153
  408f84:	69746172 	.word	0x69746172
  408f88:	203a6e6f 	.word	0x203a6e6f
  408f8c:	000a6425 	.word	0x000a6425
  408f90:	70776f4c 	.word	0x70776f4c
  408f94:	3a737361 	.word	0x3a737361
  408f98:	0a642520 	.word	0x0a642520
  408f9c:	00000000 	.word	0x00000000
  408fa0:	41202d2d 	.word	0x41202d2d
  408fa4:	20434546 	.word	0x20434546
  408fa8:	44204f54 	.word	0x44204f54
  408fac:	41204341 	.word	0x41204341
  408fb0:	4f494455 	.word	0x4f494455
  408fb4:	4f525020 	.word	0x4f525020
  408fb8:	53534543 	.word	0x53534543
  408fbc:	20474e49 	.word	0x20474e49
  408fc0:	0a0d2d2d 	.word	0x0a0d2d2d
  408fc4:	53202d2d 	.word	0x53202d2d
  408fc8:	37454d41 	.word	0x37454d41
  408fcc:	50582d30 	.word	0x50582d30
  408fd0:	2d20444c 	.word	0x2d20444c
  408fd4:	2d0a0d2d 	.word	0x2d0a0d2d
  408fd8:	6f43202d 	.word	0x6f43202d
  408fdc:	6c69706d 	.word	0x6c69706d
  408fe0:	203a6465 	.word	0x203a6465
  408fe4:	206e754a 	.word	0x206e754a
  408fe8:	32203331 	.word	0x32203331
  408fec:	20393130 	.word	0x20393130
  408ff0:	343a3931 	.word	0x343a3931
  408ff4:	38303a30 	.word	0x38303a30
  408ff8:	0d2d2d20 	.word	0x0d2d2d20
  408ffc:	00000000 	.word	0x00000000
  409000:	69647541 	.word	0x69647541
  409004:	7361546f 	.word	0x7361546f
  409008:	0000006b 	.word	0x0000006b
  40900c:	6c696146 	.word	0x6c696146
  409010:	74206465 	.word	0x74206465
  409014:	7263206f 	.word	0x7263206f
  409018:	65746165 	.word	0x65746165
  40901c:	64754120 	.word	0x64754120
  409020:	61546f69 	.word	0x61546f69
  409024:	74206b73 	.word	0x74206b73
  409028:	0d6b7361 	.word	0x0d6b7361
  40902c:	0000000a 	.word	0x0000000a
  409030:	65666645 	.word	0x65666645
  409034:	43737463 	.word	0x43737463
  409038:	72746e6f 	.word	0x72746e6f
  40903c:	656c6c6f 	.word	0x656c6c6f
  409040:	00000072 	.word	0x00000072
  409044:	6c696146 	.word	0x6c696146
  409048:	74206465 	.word	0x74206465
  40904c:	7263206f 	.word	0x7263206f
  409050:	65746165 	.word	0x65746165
  409054:	66664520 	.word	0x66664520
  409058:	73746365 	.word	0x73746365
  40905c:	746e6f43 	.word	0x746e6f43
  409060:	6c6c6f72 	.word	0x6c6c6f72
  409064:	74207265 	.word	0x74207265
  409068:	0d6b7361 	.word	0x0d6b7361
  40906c:	0000000a 	.word	0x0000000a

00409070 <_global_impure_ptr>:
  409070:	20400040 0000000a 33323130 37363534     @.@ ....01234567
  409080:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  409090:	37363534 62613938 66656463 00000000     456789abcdef....
  4090a0:	6c756e28 0000296c                       (null)..

004090a8 <blanks.7217>:
  4090a8:	20202020 20202020 20202020 20202020                     

004090b8 <zeroes.7218>:
  4090b8:	30303030 30303030 30303030 30303030     0000000000000000
  4090c8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004090d8 <_ctype_>:
  4090d8:	20202000 20202020 28282020 20282828     .         ((((( 
  4090e8:	20202020 20202020 20202020 20202020                     
  4090f8:	10108820 10101010 10101010 10101010      ...............
  409108:	04040410 04040404 10040404 10101010     ................
  409118:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409128:	01010101 01010101 01010101 10101010     ................
  409138:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409148:	02020202 02020202 02020202 10101010     ................
  409158:	00000020 00000000 00000000 00000000      ...............
	...

004091dc <_init>:
  4091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4091de:	bf00      	nop
  4091e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4091e2:	bc08      	pop	{r3}
  4091e4:	469e      	mov	lr, r3
  4091e6:	4770      	bx	lr

004091e8 <__init_array_start>:
  4091e8:	004072dd 	.word	0x004072dd

004091ec <__frame_dummy_init_array_entry>:
  4091ec:	00400165                                e.@.

004091f0 <_fini>:
  4091f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4091f2:	bf00      	nop
  4091f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4091f6:	bc08      	pop	{r3}
  4091f8:	469e      	mov	lr, r3
  4091fa:	4770      	bx	lr

004091fc <__fini_array_start>:
  4091fc:	00400141 	.word	0x00400141
