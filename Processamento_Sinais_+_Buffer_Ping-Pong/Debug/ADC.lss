
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009ce0  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409ce0  00409ce0  00019ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e8  20400000  00409ce8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00021a08  204009e8  0040a6d0  000209e8  2**3
                  ALLOC
  4 .stack        00002000  204223f0  0042c0d8  000209e8  2**0
                  ALLOC
  5 .heap         00000200  204243f0  0042e0d8  000209e8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a16  2**0
                  CONTENTS, READONLY
  8 .debug_info   000201b1  00000000  00000000  00020a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e38  00000000  00000000  00040c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ad2f  00000000  00000000  00044a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001338  00000000  00000000  0004f787  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001218  00000000  00000000  00050abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00021c9f  00000000  00000000  00051cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010a3f  00000000  00000000  00073976  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00093560  00000000  00000000  000843b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005f44  00000000  00000000  00117918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 43 42 20 dd 5d 40 00 8d 5e 40 00 8d 5e 40 00     .CB .]@..^@..^@.
  400010:	8d 5e 40 00 8d 5e 40 00 8d 5e 40 00 00 00 00 00     .^@..^@..^@.....
	...
  40002c:	a9 04 40 00 8d 5e 40 00 00 00 00 00 b9 05 40 00     ..@..^@.......@.
  40003c:	0d 06 40 00 8d 5e 40 00 8d 5e 40 00 8d 5e 40 00     ..@..^@..^@..^@.
  40004c:	8d 5e 40 00 8d 5e 40 00 8d 5e 40 00 8d 5e 40 00     .^@..^@..^@..^@.
  40005c:	8d 5e 40 00 8d 5e 40 00 00 00 00 00 51 56 40 00     .^@..^@.....QV@.
  40006c:	69 56 40 00 81 56 40 00 8d 5e 40 00 8d 5e 40 00     iV@..V@..^@..^@.
  40007c:	8d 5e 40 00 99 56 40 00 b1 56 40 00 8d 5e 40 00     .^@..V@..V@..^@.
  40008c:	8d 5e 40 00 8d 5e 40 00 8d 5e 40 00 8d 5e 40 00     .^@..^@..^@..^@.
  40009c:	49 2c 40 00 8d 5e 40 00 8d 5e 40 00 8d 5e 40 00     I,@..^@..^@..^@.
  4000ac:	8d 5e 40 00 8d 5e 40 00 a5 50 40 00 8d 5e 40 00     .^@..^@..P@..^@.
  4000bc:	8d 5e 40 00 8d 5e 40 00 8d 5e 40 00 8d 5e 40 00     .^@..^@..^@..^@.
  4000cc:	8d 5e 40 00 00 00 00 00 8d 5e 40 00 00 00 00 00     .^@......^@.....
  4000dc:	8d 5e 40 00 bd 50 40 00 8d 5e 40 00 8d 5e 40 00     .^@..P@..^@..^@.
  4000ec:	8d 5e 40 00 8d 5e 40 00 8d 5e 40 00 8d 5e 40 00     .^@..^@..^@..^@.
  4000fc:	8d 5e 40 00 8d 5e 40 00 8d 5e 40 00 8d 5e 40 00     .^@..^@..^@..^@.
  40010c:	8d 5e 40 00 8d 5e 40 00 00 00 00 00 00 00 00 00     .^@..^@.........
  40011c:	00 00 00 00 8d 5e 40 00 8d 5e 40 00 8d 5e 40 00     .....^@..^@..^@.
  40012c:	8d 5e 40 00 8d 5e 40 00 00 00 00 00 8d 5e 40 00     .^@..^@......^@.
  40013c:	8d 5e 40 00                                         .^@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009e8 	.word	0x204009e8
  40015c:	00000000 	.word	0x00000000
  400160:	00409ce8 	.word	0x00409ce8

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00409ce8 	.word	0x00409ce8
  4001a0:	204009ec 	.word	0x204009ec
  4001a4:	00409ce8 	.word	0x00409ce8
  4001a8:	00000000 	.word	0x00000000

004001ac <dacc_reset>:
 * \brief Reset DACC.
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2201      	movs	r2, #1
  4001b8:	601a      	str	r2, [r3, #0]
}
  4001ba:	bf00      	nop
  4001bc:	370c      	adds	r7, #12
  4001be:	46bd      	mov	sp, r7
  4001c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001c4:	4770      	bx	lr

004001c6 <dacc_get_interrupt_status>:
 * \param p_dacc Pointer to a DACC instance. 
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
  4001c6:	b480      	push	{r7}
  4001c8:	b083      	sub	sp, #12
  4001ca:	af00      	add	r7, sp, #0
  4001cc:	6078      	str	r0, [r7, #4]
	return p_dacc->DACC_ISR;
  4001ce:	687b      	ldr	r3, [r7, #4]
  4001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4001d2:	4618      	mov	r0, r3
  4001d4:	370c      	adds	r7, #12
  4001d6:	46bd      	mov	sp, r7
  4001d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001dc:	4770      	bx	lr

004001de <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value. 
 * \param channel The channel to convert the data ul_data
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data, uint32_t channel)
{
  4001de:	b480      	push	{r7}
  4001e0:	b085      	sub	sp, #20
  4001e2:	af00      	add	r7, sp, #0
  4001e4:	60f8      	str	r0, [r7, #12]
  4001e6:	60b9      	str	r1, [r7, #8]
  4001e8:	607a      	str	r2, [r7, #4]
	p_dacc->DACC_CDR[channel] = ul_data;
  4001ea:	68fa      	ldr	r2, [r7, #12]
  4001ec:	687b      	ldr	r3, [r7, #4]
  4001ee:	3306      	adds	r3, #6
  4001f0:	009b      	lsls	r3, r3, #2
  4001f2:	4413      	add	r3, r2
  4001f4:	68ba      	ldr	r2, [r7, #8]
  4001f6:	605a      	str	r2, [r3, #4]
}
  4001f8:	bf00      	nop
  4001fa:	3714      	adds	r7, #20
  4001fc:	46bd      	mov	sp, r7
  4001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400202:	4770      	bx	lr

00400204 <dacc_enable_channel>:
 * \param ul_channel The output channel to enable.
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
  400204:	b480      	push	{r7}
  400206:	b083      	sub	sp, #12
  400208:	af00      	add	r7, sp, #0
  40020a:	6078      	str	r0, [r7, #4]
  40020c:	6039      	str	r1, [r7, #0]
	if (ul_channel > MAX_CH_NB)
  40020e:	683b      	ldr	r3, [r7, #0]
  400210:	2b01      	cmp	r3, #1
  400212:	d901      	bls.n	400218 <dacc_enable_channel+0x14>
		return DACC_RC_INVALID_PARAM;
  400214:	2301      	movs	r3, #1
  400216:	e005      	b.n	400224 <dacc_enable_channel+0x20>

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400218:	2201      	movs	r2, #1
  40021a:	683b      	ldr	r3, [r7, #0]
  40021c:	409a      	lsls	r2, r3
  40021e:	687b      	ldr	r3, [r7, #4]
  400220:	611a      	str	r2, [r3, #16]
	return DACC_RC_OK;
  400222:	2300      	movs	r3, #0
}
  400224:	4618      	mov	r0, r3
  400226:	370c      	adds	r7, #12
  400228:	46bd      	mov	sp, r7
  40022a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40022e:	4770      	bx	lr

00400230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  400230:	b480      	push	{r7}
  400232:	b083      	sub	sp, #12
  400234:	af00      	add	r7, sp, #0
  400236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  400238:	687b      	ldr	r3, [r7, #4]
  40023a:	f103 0208 	add.w	r2, r3, #8
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400242:	687b      	ldr	r3, [r7, #4]
  400244:	f04f 32ff 	mov.w	r2, #4294967295
  400248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  40024a:	687b      	ldr	r3, [r7, #4]
  40024c:	f103 0208 	add.w	r2, r3, #8
  400250:	687b      	ldr	r3, [r7, #4]
  400252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  400254:	687b      	ldr	r3, [r7, #4]
  400256:	f103 0208 	add.w	r2, r3, #8
  40025a:	687b      	ldr	r3, [r7, #4]
  40025c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  40025e:	687b      	ldr	r3, [r7, #4]
  400260:	2200      	movs	r2, #0
  400262:	601a      	str	r2, [r3, #0]
}
  400264:	bf00      	nop
  400266:	370c      	adds	r7, #12
  400268:	46bd      	mov	sp, r7
  40026a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40026e:	4770      	bx	lr

00400270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  400270:	b480      	push	{r7}
  400272:	b083      	sub	sp, #12
  400274:	af00      	add	r7, sp, #0
  400276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400278:	687b      	ldr	r3, [r7, #4]
  40027a:	2200      	movs	r2, #0
  40027c:	611a      	str	r2, [r3, #16]
}
  40027e:	bf00      	nop
  400280:	370c      	adds	r7, #12
  400282:	46bd      	mov	sp, r7
  400284:	f85d 7b04 	ldr.w	r7, [sp], #4
  400288:	4770      	bx	lr

0040028a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  40028a:	b480      	push	{r7}
  40028c:	b085      	sub	sp, #20
  40028e:	af00      	add	r7, sp, #0
  400290:	6078      	str	r0, [r7, #4]
  400292:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  400294:	687b      	ldr	r3, [r7, #4]
  400296:	685b      	ldr	r3, [r3, #4]
  400298:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  40029a:	68fb      	ldr	r3, [r7, #12]
  40029c:	685a      	ldr	r2, [r3, #4]
  40029e:	683b      	ldr	r3, [r7, #0]
  4002a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  4002a2:	687b      	ldr	r3, [r7, #4]
  4002a4:	685a      	ldr	r2, [r3, #4]
  4002a6:	683b      	ldr	r3, [r7, #0]
  4002a8:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4002aa:	68fb      	ldr	r3, [r7, #12]
  4002ac:	685b      	ldr	r3, [r3, #4]
  4002ae:	683a      	ldr	r2, [r7, #0]
  4002b0:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  4002b2:	68fb      	ldr	r3, [r7, #12]
  4002b4:	683a      	ldr	r2, [r7, #0]
  4002b6:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  4002b8:	687b      	ldr	r3, [r7, #4]
  4002ba:	683a      	ldr	r2, [r7, #0]
  4002bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4002be:	683b      	ldr	r3, [r7, #0]
  4002c0:	687a      	ldr	r2, [r7, #4]
  4002c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4002c4:	687b      	ldr	r3, [r7, #4]
  4002c6:	681b      	ldr	r3, [r3, #0]
  4002c8:	1c5a      	adds	r2, r3, #1
  4002ca:	687b      	ldr	r3, [r7, #4]
  4002cc:	601a      	str	r2, [r3, #0]
}
  4002ce:	bf00      	nop
  4002d0:	3714      	adds	r7, #20
  4002d2:	46bd      	mov	sp, r7
  4002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d8:	4770      	bx	lr

004002da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  4002da:	b480      	push	{r7}
  4002dc:	b085      	sub	sp, #20
  4002de:	af00      	add	r7, sp, #0
  4002e0:	6078      	str	r0, [r7, #4]
  4002e2:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  4002e4:	683b      	ldr	r3, [r7, #0]
  4002e6:	681b      	ldr	r3, [r3, #0]
  4002e8:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4002ea:	68bb      	ldr	r3, [r7, #8]
  4002ec:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002f0:	d103      	bne.n	4002fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  4002f2:	687b      	ldr	r3, [r7, #4]
  4002f4:	691b      	ldr	r3, [r3, #16]
  4002f6:	60fb      	str	r3, [r7, #12]
  4002f8:	e00c      	b.n	400314 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  4002fa:	687b      	ldr	r3, [r7, #4]
  4002fc:	3308      	adds	r3, #8
  4002fe:	60fb      	str	r3, [r7, #12]
  400300:	e002      	b.n	400308 <vListInsert+0x2e>
  400302:	68fb      	ldr	r3, [r7, #12]
  400304:	685b      	ldr	r3, [r3, #4]
  400306:	60fb      	str	r3, [r7, #12]
  400308:	68fb      	ldr	r3, [r7, #12]
  40030a:	685b      	ldr	r3, [r3, #4]
  40030c:	681a      	ldr	r2, [r3, #0]
  40030e:	68bb      	ldr	r3, [r7, #8]
  400310:	429a      	cmp	r2, r3
  400312:	d9f6      	bls.n	400302 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	685a      	ldr	r2, [r3, #4]
  400318:	683b      	ldr	r3, [r7, #0]
  40031a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  40031c:	683b      	ldr	r3, [r7, #0]
  40031e:	685b      	ldr	r3, [r3, #4]
  400320:	683a      	ldr	r2, [r7, #0]
  400322:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400324:	683b      	ldr	r3, [r7, #0]
  400326:	68fa      	ldr	r2, [r7, #12]
  400328:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  40032a:	68fb      	ldr	r3, [r7, #12]
  40032c:	683a      	ldr	r2, [r7, #0]
  40032e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400330:	683b      	ldr	r3, [r7, #0]
  400332:	687a      	ldr	r2, [r7, #4]
  400334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  400336:	687b      	ldr	r3, [r7, #4]
  400338:	681b      	ldr	r3, [r3, #0]
  40033a:	1c5a      	adds	r2, r3, #1
  40033c:	687b      	ldr	r3, [r7, #4]
  40033e:	601a      	str	r2, [r3, #0]
}
  400340:	bf00      	nop
  400342:	3714      	adds	r7, #20
  400344:	46bd      	mov	sp, r7
  400346:	f85d 7b04 	ldr.w	r7, [sp], #4
  40034a:	4770      	bx	lr

0040034c <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  40034c:	b480      	push	{r7}
  40034e:	b085      	sub	sp, #20
  400350:	af00      	add	r7, sp, #0
  400352:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	685b      	ldr	r3, [r3, #4]
  400358:	687a      	ldr	r2, [r7, #4]
  40035a:	6892      	ldr	r2, [r2, #8]
  40035c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40035e:	687b      	ldr	r3, [r7, #4]
  400360:	689b      	ldr	r3, [r3, #8]
  400362:	687a      	ldr	r2, [r7, #4]
  400364:	6852      	ldr	r2, [r2, #4]
  400366:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  400368:	687b      	ldr	r3, [r7, #4]
  40036a:	691b      	ldr	r3, [r3, #16]
  40036c:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40036e:	68fb      	ldr	r3, [r7, #12]
  400370:	685a      	ldr	r2, [r3, #4]
  400372:	687b      	ldr	r3, [r7, #4]
  400374:	429a      	cmp	r2, r3
  400376:	d103      	bne.n	400380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400378:	687b      	ldr	r3, [r7, #4]
  40037a:	689a      	ldr	r2, [r3, #8]
  40037c:	68fb      	ldr	r3, [r7, #12]
  40037e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  400380:	687b      	ldr	r3, [r7, #4]
  400382:	2200      	movs	r2, #0
  400384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  400386:	68fb      	ldr	r3, [r7, #12]
  400388:	681b      	ldr	r3, [r3, #0]
  40038a:	1e5a      	subs	r2, r3, #1
  40038c:	68fb      	ldr	r3, [r7, #12]
  40038e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400390:	68fb      	ldr	r3, [r7, #12]
  400392:	681b      	ldr	r3, [r3, #0]
}
  400394:	4618      	mov	r0, r3
  400396:	3714      	adds	r7, #20
  400398:	46bd      	mov	sp, r7
  40039a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40039e:	4770      	bx	lr

004003a0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4003a0:	b480      	push	{r7}
  4003a2:	b083      	sub	sp, #12
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4003a8:	687b      	ldr	r3, [r7, #4]
  4003aa:	2b07      	cmp	r3, #7
  4003ac:	d825      	bhi.n	4003fa <osc_get_rate+0x5a>
  4003ae:	a201      	add	r2, pc, #4	; (adr r2, 4003b4 <osc_get_rate+0x14>)
  4003b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4003b4:	004003d5 	.word	0x004003d5
  4003b8:	004003db 	.word	0x004003db
  4003bc:	004003e1 	.word	0x004003e1
  4003c0:	004003e7 	.word	0x004003e7
  4003c4:	004003eb 	.word	0x004003eb
  4003c8:	004003ef 	.word	0x004003ef
  4003cc:	004003f3 	.word	0x004003f3
  4003d0:	004003f7 	.word	0x004003f7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4003d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4003d8:	e010      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4003da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003de:	e00d      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4003e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003e4:	e00a      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4003e6:	4b08      	ldr	r3, [pc, #32]	; (400408 <osc_get_rate+0x68>)
  4003e8:	e008      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4003ea:	4b08      	ldr	r3, [pc, #32]	; (40040c <osc_get_rate+0x6c>)
  4003ec:	e006      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4003ee:	4b08      	ldr	r3, [pc, #32]	; (400410 <osc_get_rate+0x70>)
  4003f0:	e004      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4003f2:	4b07      	ldr	r3, [pc, #28]	; (400410 <osc_get_rate+0x70>)
  4003f4:	e002      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4003f6:	4b06      	ldr	r3, [pc, #24]	; (400410 <osc_get_rate+0x70>)
  4003f8:	e000      	b.n	4003fc <osc_get_rate+0x5c>
	}

	return 0;
  4003fa:	2300      	movs	r3, #0
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	370c      	adds	r7, #12
  400400:	46bd      	mov	sp, r7
  400402:	f85d 7b04 	ldr.w	r7, [sp], #4
  400406:	4770      	bx	lr
  400408:	003d0900 	.word	0x003d0900
  40040c:	007a1200 	.word	0x007a1200
  400410:	00b71b00 	.word	0x00b71b00

00400414 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400414:	b580      	push	{r7, lr}
  400416:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400418:	2006      	movs	r0, #6
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <sysclk_get_main_hz+0x1c>)
  40041c:	4798      	blx	r3
  40041e:	4602      	mov	r2, r0
  400420:	4613      	mov	r3, r2
  400422:	009b      	lsls	r3, r3, #2
  400424:	4413      	add	r3, r2
  400426:	009a      	lsls	r2, r3, #2
  400428:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40042a:	4618      	mov	r0, r3
  40042c:	bd80      	pop	{r7, pc}
  40042e:	bf00      	nop
  400430:	004003a1 	.word	0x004003a1

00400434 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400434:	b580      	push	{r7, lr}
  400436:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <sysclk_get_cpu_hz+0x10>)
  40043a:	4798      	blx	r3
  40043c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40043e:	4618      	mov	r0, r3
  400440:	bd80      	pop	{r7, pc}
  400442:	bf00      	nop
  400444:	00400415 	.word	0x00400415

00400448 <pxPortInitialiseStack>:
/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters )
{
  400448:	b480      	push	{r7}
  40044a:	b085      	sub	sp, #20
  40044c:	af00      	add	r7, sp, #0
  40044e:	60f8      	str	r0, [r7, #12]
  400450:	60b9      	str	r1, [r7, #8]
  400452:	607a      	str	r2, [r7, #4]
	* interrupt. */

	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;
  400454:	68fb      	ldr	r3, [r7, #12]
  400456:	3b04      	subs	r3, #4
  400458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  40045a:	68fb      	ldr	r3, [r7, #12]
  40045c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  400462:	68fb      	ldr	r3, [r7, #12]
  400464:	3b04      	subs	r3, #4
  400466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  400468:	68ba      	ldr	r2, [r7, #8]
  40046a:	68fb      	ldr	r3, [r7, #12]
  40046c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40046e:	68fb      	ldr	r3, [r7, #12]
  400470:	3b04      	subs	r3, #4
  400472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;    /* LR */
  400474:	68fb      	ldr	r3, [r7, #12]
  400476:	2200      	movs	r2, #0
  400478:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
  40047a:	68fb      	ldr	r3, [r7, #12]
  40047c:	3b14      	subs	r3, #20
  40047e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  400480:	687a      	ldr	r2, [r7, #4]
  400482:	68fb      	ldr	r3, [r7, #12]
  400484:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
  400486:	68fb      	ldr	r3, [r7, #12]
  400488:	3b04      	subs	r3, #4
  40048a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40048c:	68fb      	ldr	r3, [r7, #12]
  40048e:	f06f 0202 	mvn.w	r2, #2
  400492:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  400494:	68fb      	ldr	r3, [r7, #12]
  400496:	3b20      	subs	r3, #32
  400498:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  40049a:	68fb      	ldr	r3, [r7, #12]
}
  40049c:	4618      	mov	r0, r3
  40049e:	3714      	adds	r7, #20
  4004a0:	46bd      	mov	sp, r7
  4004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004a6:	4770      	bx	lr

004004a8 <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  4004a8:	4b05      	ldr	r3, [pc, #20]	; (4004c0 <pxCurrentTCBConst2>)
  4004aa:	6819      	ldr	r1, [r3, #0]
  4004ac:	6808      	ldr	r0, [r1, #0]
  4004ae:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004b2:	f380 8809 	msr	PSP, r0
  4004b6:	f04f 0000 	mov.w	r0, #0
  4004ba:	f380 8811 	msr	BASEPRI, r0
  4004be:	4770      	bx	lr

004004c0 <pxCurrentTCBConst2>:
  4004c0:	2040aa14 	.word	0x2040aa14
		" bx r14                          \n"
		"                                   \n"
		" .align 2                        \n"
		"pxCurrentTCBConst2: .word pxCurrentTCB \n"
		);
}
  4004c4:	bf00      	nop
  4004c6:	bf00      	nop

004004c8 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  4004c8:	4804      	ldr	r0, [pc, #16]	; (4004dc <prvPortStartFirstTask+0x14>)
  4004ca:	6800      	ldr	r0, [r0, #0]
  4004cc:	6800      	ldr	r0, [r0, #0]
  4004ce:	f380 8808 	msr	MSP, r0
  4004d2:	b662      	cpsie	i
  4004d4:	df00      	svc	0
  4004d6:	bf00      	nop
		" msr msp, r0             \n"                         /* Set the msp back to the start of the stack. */
		" cpsie i                 \n"                         /* Globally enable interrupts. */
		" svc 0                   \n"                         /* System call to start first task. */
		" nop                     \n"
		);
}
  4004d8:	bf00      	nop
  4004da:	0000      	.short	0x0000
  4004dc:	e000ed08 	.word	0xe000ed08

004004e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  4004e0:	b580      	push	{r7, lr}
  4004e2:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4004e4:	4a0e      	ldr	r2, [pc, #56]	; (400520 <xPortStartScheduler+0x40>)
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <xPortStartScheduler+0x40>)
  4004e8:	681b      	ldr	r3, [r3, #0]
  4004ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4004ee:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4004f0:	4a0b      	ldr	r2, [pc, #44]	; (400520 <xPortStartScheduler+0x40>)
  4004f2:	4b0b      	ldr	r3, [pc, #44]	; (400520 <xPortStartScheduler+0x40>)
  4004f4:	681b      	ldr	r3, [r3, #0]
  4004f6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  4004fa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  4004fc:	4b09      	ldr	r3, [pc, #36]	; (400524 <xPortStartScheduler+0x44>)
  4004fe:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400500:	4b09      	ldr	r3, [pc, #36]	; (400528 <xPortStartScheduler+0x48>)
  400502:	2200      	movs	r2, #0
  400504:	601a      	str	r2, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400506:	4b09      	ldr	r3, [pc, #36]	; (40052c <xPortStartScheduler+0x4c>)
  400508:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  40050a:	4a09      	ldr	r2, [pc, #36]	; (400530 <xPortStartScheduler+0x50>)
  40050c:	4b08      	ldr	r3, [pc, #32]	; (400530 <xPortStartScheduler+0x50>)
  40050e:	681b      	ldr	r3, [r3, #0]
  400510:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400514:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400516:	4b07      	ldr	r3, [pc, #28]	; (400534 <xPortStartScheduler+0x54>)
  400518:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  40051a:	2300      	movs	r3, #0
}
  40051c:	4618      	mov	r0, r3
  40051e:	bd80      	pop	{r7, pc}
  400520:	e000ed20 	.word	0xe000ed20
  400524:	0040063d 	.word	0x0040063d
  400528:	20400000 	.word	0x20400000
  40052c:	00400671 	.word	0x00400671
  400530:	e000ef34 	.word	0xe000ef34
  400534:	004004c9 	.word	0x004004c9

00400538 <vPortYieldFromISR>:
}

/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  400538:	b480      	push	{r7}
  40053a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40053c:	4b04      	ldr	r3, [pc, #16]	; (400550 <vPortYieldFromISR+0x18>)
  40053e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400542:	601a      	str	r2, [r3, #0]
}
  400544:	bf00      	nop
  400546:	46bd      	mov	sp, r7
  400548:	f85d 7b04 	ldr.w	r7, [sp], #4
  40054c:	4770      	bx	lr
  40054e:	bf00      	nop
  400550:	e000ed04 	.word	0xe000ed04

00400554 <vPortEnterCritical>:

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400554:	b580      	push	{r7, lr}
  400556:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  400558:	4b04      	ldr	r3, [pc, #16]	; (40056c <vPortEnterCritical+0x18>)
  40055a:	4798      	blx	r3
	uxCriticalNesting++;
  40055c:	4b04      	ldr	r3, [pc, #16]	; (400570 <vPortEnterCritical+0x1c>)
  40055e:	681b      	ldr	r3, [r3, #0]
  400560:	3301      	adds	r3, #1
  400562:	4a03      	ldr	r2, [pc, #12]	; (400570 <vPortEnterCritical+0x1c>)
  400564:	6013      	str	r3, [r2, #0]
}
  400566:	bf00      	nop
  400568:	bd80      	pop	{r7, pc}
  40056a:	bf00      	nop
  40056c:	0040059d 	.word	0x0040059d
  400570:	20400000 	.word	0x20400000

00400574 <vPortExitCritical>:

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  400574:	b580      	push	{r7, lr}
  400576:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  400578:	4b06      	ldr	r3, [pc, #24]	; (400594 <vPortExitCritical+0x20>)
  40057a:	681b      	ldr	r3, [r3, #0]
  40057c:	3b01      	subs	r3, #1
  40057e:	4a05      	ldr	r2, [pc, #20]	; (400594 <vPortExitCritical+0x20>)
  400580:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  400582:	4b04      	ldr	r3, [pc, #16]	; (400594 <vPortExitCritical+0x20>)
  400584:	681b      	ldr	r3, [r3, #0]
  400586:	2b00      	cmp	r3, #0
  400588:	d102      	bne.n	400590 <vPortExitCritical+0x1c>
		portENABLE_INTERRUPTS();
  40058a:	2000      	movs	r0, #0
  40058c:	4b02      	ldr	r3, [pc, #8]	; (400598 <vPortExitCritical+0x24>)
  40058e:	4798      	blx	r3
	}
}
  400590:	bf00      	nop
  400592:	bd80      	pop	{r7, pc}
  400594:	20400000 	.word	0x20400000
  400598:	004005af 	.word	0x004005af

0040059c <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  40059c:	f3ef 8011 	mrs	r0, BASEPRI
  4005a0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  4005a4:	f381 8811 	msr	BASEPRI, r1
  4005a8:	4770      	bx	lr
		:: "i" (configMAX_SYSCALL_INTERRUPT_PRIORITY) : "r0", "r1" \
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
  4005aa:	2300      	movs	r3, #0
}
  4005ac:	4618      	mov	r0, r3

004005ae <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  4005ae:	f380 8811 	msr	BASEPRI, r0
  4005b2:	4770      	bx	lr
	( \
		" msr basepri, r0                            \n" \
		" bx lr                                      \n" \
		::: "r0" \
	);
}
  4005b4:	bf00      	nop
	...

004005b8 <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  4005b8:	f3ef 8009 	mrs	r0, PSP
  4005bc:	4b11      	ldr	r3, [pc, #68]	; (400604 <pxCurrentTCBConst>)
  4005be:	681a      	ldr	r2, [r3, #0]
  4005c0:	f01e 0f10 	tst.w	lr, #16
  4005c4:	bf08      	it	eq
  4005c6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4005ca:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005ce:	6010      	str	r0, [r2, #0]
  4005d0:	e92d 4008 	stmdb	sp!, {r3, lr}
  4005d4:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  4005d8:	f380 8811 	msr	BASEPRI, r0
  4005dc:	f001 f858 	bl	401690 <vTaskSwitchContext>
  4005e0:	f04f 0000 	mov.w	r0, #0
  4005e4:	f380 8811 	msr	BASEPRI, r0
  4005e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4005ec:	6819      	ldr	r1, [r3, #0]
  4005ee:	6808      	ldr	r0, [r1, #0]
  4005f0:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005f4:	f01e 0f10 	tst.w	lr, #16
  4005f8:	bf08      	it	eq
  4005fa:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4005fe:	f380 8809 	msr	PSP, r0
  400602:	4770      	bx	lr

00400604 <pxCurrentTCBConst>:
  400604:	2040aa14 	.word	0x2040aa14
		"                                       \n"
		"   .align 2                            \n"
		"pxCurrentTCBConst: .word pxCurrentTCB    \n"
		::"i" (configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  400608:	bf00      	nop
  40060a:	bf00      	nop

0040060c <SysTick_Handler>:

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  40060c:	b580      	push	{r7, lr}
  40060e:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400610:	4b06      	ldr	r3, [pc, #24]	; (40062c <SysTick_Handler+0x20>)
  400612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400616:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  400618:	4b05      	ldr	r3, [pc, #20]	; (400630 <SysTick_Handler+0x24>)
  40061a:	4798      	blx	r3
	{
		vTaskIncrementTick();
  40061c:	4b05      	ldr	r3, [pc, #20]	; (400634 <SysTick_Handler+0x28>)
  40061e:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  400620:	2000      	movs	r0, #0
  400622:	4b05      	ldr	r3, [pc, #20]	; (400638 <SysTick_Handler+0x2c>)
  400624:	4798      	blx	r3
}
  400626:	bf00      	nop
  400628:	bd80      	pop	{r7, pc}
  40062a:	bf00      	nop
  40062c:	e000ed04 	.word	0xe000ed04
  400630:	0040059d 	.word	0x0040059d
  400634:	00401545 	.word	0x00401545
  400638:	004005af 	.word	0x004005af

0040063c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
  40063c:	b598      	push	{r3, r4, r7, lr}
  40063e:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
  400640:	4c07      	ldr	r4, [pc, #28]	; (400660 <vPortSetupTimerInterrupt+0x24>)
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  400642:	4b08      	ldr	r3, [pc, #32]	; (400664 <vPortSetupTimerInterrupt+0x28>)
  400644:	4798      	blx	r3
  400646:	4602      	mov	r2, r0
  400648:	4b07      	ldr	r3, [pc, #28]	; (400668 <vPortSetupTimerInterrupt+0x2c>)
  40064a:	fba3 2302 	umull	r2, r3, r3, r2
  40064e:	099b      	lsrs	r3, r3, #6
  400650:	3b01      	subs	r3, #1
  400652:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400654:	4b05      	ldr	r3, [pc, #20]	; (40066c <vPortSetupTimerInterrupt+0x30>)
  400656:	2207      	movs	r2, #7
  400658:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
}
  40065a:	bf00      	nop
  40065c:	bd98      	pop	{r3, r4, r7, pc}
  40065e:	bf00      	nop
  400660:	e000e014 	.word	0xe000e014
  400664:	00400435 	.word	0x00400435
  400668:	10624dd3 	.word	0x10624dd3
  40066c:	e000e010 	.word	0xe000e010

00400670 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400670:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400680 <vPortEnableVFP+0x10>
  400674:	6801      	ldr	r1, [r0, #0]
  400676:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40067a:	6001      	str	r1, [r0, #0]
  40067c:	4770      	bx	lr
		"                            \n"
		" orr r1, r1, #( 0xf << 20 ) \n" /* Enable CP10 and CP11 coprocessors, then save back. */
		" str r1, [r0]               \n"
		" bx r14                     "
	);
}
  40067e:	bf00      	nop
  400680:	e000ed88 	.word	0xe000ed88

00400684 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  400684:	b580      	push	{r7, lr}
  400686:	b086      	sub	sp, #24
  400688:	af00      	add	r7, sp, #0
  40068a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  40068c:	2300      	movs	r3, #0
  40068e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  400690:	4b37      	ldr	r3, [pc, #220]	; (400770 <pvPortMalloc+0xec>)
  400692:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  400694:	4b37      	ldr	r3, [pc, #220]	; (400774 <pvPortMalloc+0xf0>)
  400696:	681b      	ldr	r3, [r3, #0]
  400698:	2b00      	cmp	r3, #0
  40069a:	d101      	bne.n	4006a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  40069c:	4b36      	ldr	r3, [pc, #216]	; (400778 <pvPortMalloc+0xf4>)
  40069e:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  4006a0:	687b      	ldr	r3, [r7, #4]
  4006a2:	2b00      	cmp	r3, #0
  4006a4:	d00e      	beq.n	4006c4 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  4006a6:	2310      	movs	r3, #16
  4006a8:	461a      	mov	r2, r3
  4006aa:	687b      	ldr	r3, [r7, #4]
  4006ac:	4413      	add	r3, r2
  4006ae:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4006b0:	687b      	ldr	r3, [r7, #4]
  4006b2:	f003 0307 	and.w	r3, r3, #7
  4006b6:	2b00      	cmp	r3, #0
  4006b8:	d004      	beq.n	4006c4 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4006ba:	687b      	ldr	r3, [r7, #4]
  4006bc:	f023 0307 	bic.w	r3, r3, #7
  4006c0:	3308      	adds	r3, #8
  4006c2:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4006c4:	687b      	ldr	r3, [r7, #4]
  4006c6:	2b00      	cmp	r3, #0
  4006c8:	d045      	beq.n	400756 <pvPortMalloc+0xd2>
  4006ca:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  4006ce:	687b      	ldr	r3, [r7, #4]
  4006d0:	4293      	cmp	r3, r2
  4006d2:	d240      	bcs.n	400756 <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  4006d4:	4b29      	ldr	r3, [pc, #164]	; (40077c <pvPortMalloc+0xf8>)
  4006d6:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  4006d8:	4b28      	ldr	r3, [pc, #160]	; (40077c <pvPortMalloc+0xf8>)
  4006da:	681b      	ldr	r3, [r3, #0]
  4006dc:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4006de:	e004      	b.n	4006ea <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  4006e0:	697b      	ldr	r3, [r7, #20]
  4006e2:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  4006e4:	697b      	ldr	r3, [r7, #20]
  4006e6:	681b      	ldr	r3, [r3, #0]
  4006e8:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4006ea:	697b      	ldr	r3, [r7, #20]
  4006ec:	685a      	ldr	r2, [r3, #4]
  4006ee:	687b      	ldr	r3, [r7, #4]
  4006f0:	429a      	cmp	r2, r3
  4006f2:	d203      	bcs.n	4006fc <pvPortMalloc+0x78>
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	2b00      	cmp	r3, #0
  4006fa:	d1f1      	bne.n	4006e0 <pvPortMalloc+0x5c>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  4006fc:	4b1d      	ldr	r3, [pc, #116]	; (400774 <pvPortMalloc+0xf0>)
  4006fe:	681b      	ldr	r3, [r3, #0]
  400700:	697a      	ldr	r2, [r7, #20]
  400702:	429a      	cmp	r2, r3
  400704:	d027      	beq.n	400756 <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  400706:	693b      	ldr	r3, [r7, #16]
  400708:	681b      	ldr	r3, [r3, #0]
  40070a:	2210      	movs	r2, #16
  40070c:	4413      	add	r3, r2
  40070e:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400710:	697b      	ldr	r3, [r7, #20]
  400712:	681a      	ldr	r2, [r3, #0]
  400714:	693b      	ldr	r3, [r7, #16]
  400716:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400718:	697b      	ldr	r3, [r7, #20]
  40071a:	685a      	ldr	r2, [r3, #4]
  40071c:	687b      	ldr	r3, [r7, #4]
  40071e:	1ad3      	subs	r3, r2, r3
  400720:	2210      	movs	r2, #16
  400722:	0052      	lsls	r2, r2, #1
  400724:	4293      	cmp	r3, r2
  400726:	d90f      	bls.n	400748 <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  400728:	697a      	ldr	r2, [r7, #20]
  40072a:	687b      	ldr	r3, [r7, #4]
  40072c:	4413      	add	r3, r2
  40072e:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400730:	697b      	ldr	r3, [r7, #20]
  400732:	685a      	ldr	r2, [r3, #4]
  400734:	687b      	ldr	r3, [r7, #4]
  400736:	1ad2      	subs	r2, r2, r3
  400738:	68bb      	ldr	r3, [r7, #8]
  40073a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  40073c:	697b      	ldr	r3, [r7, #20]
  40073e:	687a      	ldr	r2, [r7, #4]
  400740:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400742:	68b8      	ldr	r0, [r7, #8]
  400744:	4b0e      	ldr	r3, [pc, #56]	; (400780 <pvPortMalloc+0xfc>)
  400746:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  400748:	4b0e      	ldr	r3, [pc, #56]	; (400784 <pvPortMalloc+0x100>)
  40074a:	681a      	ldr	r2, [r3, #0]
  40074c:	697b      	ldr	r3, [r7, #20]
  40074e:	685b      	ldr	r3, [r3, #4]
  400750:	1ad3      	subs	r3, r2, r3
  400752:	4a0c      	ldr	r2, [pc, #48]	; (400784 <pvPortMalloc+0x100>)
  400754:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  400756:	4b0c      	ldr	r3, [pc, #48]	; (400788 <pvPortMalloc+0x104>)
  400758:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40075a:	68fb      	ldr	r3, [r7, #12]
  40075c:	2b00      	cmp	r3, #0
  40075e:	d101      	bne.n	400764 <pvPortMalloc+0xe0>
		{
			vApplicationMallocFailedHook();
  400760:	4b0a      	ldr	r3, [pc, #40]	; (40078c <pvPortMalloc+0x108>)
  400762:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  400764:	68fb      	ldr	r3, [r7, #12]
}
  400766:	4618      	mov	r0, r3
  400768:	3718      	adds	r7, #24
  40076a:	46bd      	mov	sp, r7
  40076c:	bd80      	pop	{r7, pc}
  40076e:	bf00      	nop
  400770:	004013dd 	.word	0x004013dd
  400774:	2040aa10 	.word	0x2040aa10
  400778:	004007e5 	.word	0x004007e5
  40077c:	2040aa08 	.word	0x2040aa08
  400780:	00400875 	.word	0x00400875
  400784:	20400004 	.word	0x20400004
  400788:	004013f9 	.word	0x004013f9
  40078c:	00402c39 	.word	0x00402c39

00400790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400790:	b580      	push	{r7, lr}
  400792:	b084      	sub	sp, #16
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  400798:	687b      	ldr	r3, [r7, #4]
  40079a:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  40079c:	687b      	ldr	r3, [r7, #4]
  40079e:	2b00      	cmp	r3, #0
  4007a0:	d014      	beq.n	4007cc <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  4007a2:	2310      	movs	r3, #16
  4007a4:	425b      	negs	r3, r3
  4007a6:	68fa      	ldr	r2, [r7, #12]
  4007a8:	4413      	add	r3, r2
  4007aa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  4007ac:	68fb      	ldr	r3, [r7, #12]
  4007ae:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  4007b0:	4b08      	ldr	r3, [pc, #32]	; (4007d4 <vPortFree+0x44>)
  4007b2:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  4007b4:	68bb      	ldr	r3, [r7, #8]
  4007b6:	685a      	ldr	r2, [r3, #4]
  4007b8:	4b07      	ldr	r3, [pc, #28]	; (4007d8 <vPortFree+0x48>)
  4007ba:	681b      	ldr	r3, [r3, #0]
  4007bc:	4413      	add	r3, r2
  4007be:	4a06      	ldr	r2, [pc, #24]	; (4007d8 <vPortFree+0x48>)
  4007c0:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  4007c2:	68b8      	ldr	r0, [r7, #8]
  4007c4:	4b05      	ldr	r3, [pc, #20]	; (4007dc <vPortFree+0x4c>)
  4007c6:	4798      	blx	r3
		}
		xTaskResumeAll();
  4007c8:	4b05      	ldr	r3, [pc, #20]	; (4007e0 <vPortFree+0x50>)
  4007ca:	4798      	blx	r3
	}
}
  4007cc:	bf00      	nop
  4007ce:	3710      	adds	r7, #16
  4007d0:	46bd      	mov	sp, r7
  4007d2:	bd80      	pop	{r7, pc}
  4007d4:	004013dd 	.word	0x004013dd
  4007d8:	20400004 	.word	0x20400004
  4007dc:	00400875 	.word	0x00400875
  4007e0:	004013f9 	.word	0x004013f9

004007e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  4007e4:	b580      	push	{r7, lr}
  4007e6:	b082      	sub	sp, #8
  4007e8:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  4007ea:	4b1d      	ldr	r3, [pc, #116]	; (400860 <prvHeapInit+0x7c>)
  4007ec:	4a1d      	ldr	r2, [pc, #116]	; (400864 <prvHeapInit+0x80>)
  4007ee:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  4007f0:	4b1b      	ldr	r3, [pc, #108]	; (400860 <prvHeapInit+0x7c>)
  4007f2:	2200      	movs	r2, #0
  4007f4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  4007f6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  4007fa:	4b1a      	ldr	r3, [pc, #104]	; (400864 <prvHeapInit+0x80>)
  4007fc:	4413      	add	r3, r2
  4007fe:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  400800:	2310      	movs	r3, #16
  400802:	425b      	negs	r3, r3
  400804:	687a      	ldr	r2, [r7, #4]
  400806:	4413      	add	r3, r2
  400808:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  40080a:	4a17      	ldr	r2, [pc, #92]	; (400868 <prvHeapInit+0x84>)
  40080c:	687b      	ldr	r3, [r7, #4]
  40080e:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  400810:	4b15      	ldr	r3, [pc, #84]	; (400868 <prvHeapInit+0x84>)
  400812:	681b      	ldr	r3, [r3, #0]
  400814:	f003 0307 	and.w	r3, r3, #7
  400818:	2b00      	cmp	r3, #0
  40081a:	d003      	beq.n	400824 <prvHeapInit+0x40>
  40081c:	4b13      	ldr	r3, [pc, #76]	; (40086c <prvHeapInit+0x88>)
  40081e:	4798      	blx	r3
  400820:	bf00      	nop
  400822:	e7fd      	b.n	400820 <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  400824:	4b10      	ldr	r3, [pc, #64]	; (400868 <prvHeapInit+0x84>)
  400826:	681b      	ldr	r3, [r3, #0]
  400828:	2200      	movs	r2, #0
  40082a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  40082c:	4b0e      	ldr	r3, [pc, #56]	; (400868 <prvHeapInit+0x84>)
  40082e:	681b      	ldr	r3, [r3, #0]
  400830:	2200      	movs	r2, #0
  400832:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  400834:	4b0b      	ldr	r3, [pc, #44]	; (400864 <prvHeapInit+0x80>)
  400836:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  400838:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  40083c:	2210      	movs	r2, #16
  40083e:	1a9a      	subs	r2, r3, r2
  400840:	683b      	ldr	r3, [r7, #0]
  400842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  400844:	4b08      	ldr	r3, [pc, #32]	; (400868 <prvHeapInit+0x84>)
  400846:	681a      	ldr	r2, [r3, #0]
  400848:	683b      	ldr	r3, [r7, #0]
  40084a:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  40084c:	4b08      	ldr	r3, [pc, #32]	; (400870 <prvHeapInit+0x8c>)
  40084e:	681b      	ldr	r3, [r3, #0]
  400850:	2210      	movs	r2, #16
  400852:	1a9b      	subs	r3, r3, r2
  400854:	4a06      	ldr	r2, [pc, #24]	; (400870 <prvHeapInit+0x8c>)
  400856:	6013      	str	r3, [r2, #0]
}
  400858:	bf00      	nop
  40085a:	3708      	adds	r7, #8
  40085c:	46bd      	mov	sp, r7
  40085e:	bd80      	pop	{r7, pc}
  400860:	2040aa08 	.word	0x2040aa08
  400864:	20400a08 	.word	0x20400a08
  400868:	2040aa10 	.word	0x2040aa10
  40086c:	0040059d 	.word	0x0040059d
  400870:	20400004 	.word	0x20400004

00400874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400874:	b480      	push	{r7}
  400876:	b085      	sub	sp, #20
  400878:	af00      	add	r7, sp, #0
  40087a:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40087c:	4b28      	ldr	r3, [pc, #160]	; (400920 <prvInsertBlockIntoFreeList+0xac>)
  40087e:	60fb      	str	r3, [r7, #12]
  400880:	e002      	b.n	400888 <prvInsertBlockIntoFreeList+0x14>
  400882:	68fb      	ldr	r3, [r7, #12]
  400884:	681b      	ldr	r3, [r3, #0]
  400886:	60fb      	str	r3, [r7, #12]
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	681a      	ldr	r2, [r3, #0]
  40088c:	687b      	ldr	r3, [r7, #4]
  40088e:	429a      	cmp	r2, r3
  400890:	d3f7      	bcc.n	400882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  400892:	68fb      	ldr	r3, [r7, #12]
  400894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  400896:	68fb      	ldr	r3, [r7, #12]
  400898:	685b      	ldr	r3, [r3, #4]
  40089a:	68ba      	ldr	r2, [r7, #8]
  40089c:	441a      	add	r2, r3
  40089e:	687b      	ldr	r3, [r7, #4]
  4008a0:	429a      	cmp	r2, r3
  4008a2:	d108      	bne.n	4008b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4008a4:	68fb      	ldr	r3, [r7, #12]
  4008a6:	685a      	ldr	r2, [r3, #4]
  4008a8:	687b      	ldr	r3, [r7, #4]
  4008aa:	685b      	ldr	r3, [r3, #4]
  4008ac:	441a      	add	r2, r3
  4008ae:	68fb      	ldr	r3, [r7, #12]
  4008b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  4008b2:	68fb      	ldr	r3, [r7, #12]
  4008b4:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  4008b6:	687b      	ldr	r3, [r7, #4]
  4008b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  4008ba:	687b      	ldr	r3, [r7, #4]
  4008bc:	685b      	ldr	r3, [r3, #4]
  4008be:	68ba      	ldr	r2, [r7, #8]
  4008c0:	441a      	add	r2, r3
  4008c2:	68fb      	ldr	r3, [r7, #12]
  4008c4:	681b      	ldr	r3, [r3, #0]
  4008c6:	429a      	cmp	r2, r3
  4008c8:	d118      	bne.n	4008fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4008ca:	68fb      	ldr	r3, [r7, #12]
  4008cc:	681a      	ldr	r2, [r3, #0]
  4008ce:	4b15      	ldr	r3, [pc, #84]	; (400924 <prvInsertBlockIntoFreeList+0xb0>)
  4008d0:	681b      	ldr	r3, [r3, #0]
  4008d2:	429a      	cmp	r2, r3
  4008d4:	d00d      	beq.n	4008f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4008d6:	687b      	ldr	r3, [r7, #4]
  4008d8:	685a      	ldr	r2, [r3, #4]
  4008da:	68fb      	ldr	r3, [r7, #12]
  4008dc:	681b      	ldr	r3, [r3, #0]
  4008de:	685b      	ldr	r3, [r3, #4]
  4008e0:	441a      	add	r2, r3
  4008e2:	687b      	ldr	r3, [r7, #4]
  4008e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4008e6:	68fb      	ldr	r3, [r7, #12]
  4008e8:	681b      	ldr	r3, [r3, #0]
  4008ea:	681a      	ldr	r2, [r3, #0]
  4008ec:	687b      	ldr	r3, [r7, #4]
  4008ee:	601a      	str	r2, [r3, #0]
  4008f0:	e008      	b.n	400904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4008f2:	4b0c      	ldr	r3, [pc, #48]	; (400924 <prvInsertBlockIntoFreeList+0xb0>)
  4008f4:	681a      	ldr	r2, [r3, #0]
  4008f6:	687b      	ldr	r3, [r7, #4]
  4008f8:	601a      	str	r2, [r3, #0]
  4008fa:	e003      	b.n	400904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  4008fc:	68fb      	ldr	r3, [r7, #12]
  4008fe:	681a      	ldr	r2, [r3, #0]
  400900:	687b      	ldr	r3, [r7, #4]
  400902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  400904:	68fa      	ldr	r2, [r7, #12]
  400906:	687b      	ldr	r3, [r7, #4]
  400908:	429a      	cmp	r2, r3
  40090a:	d002      	beq.n	400912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  40090c:	68fb      	ldr	r3, [r7, #12]
  40090e:	687a      	ldr	r2, [r7, #4]
  400910:	601a      	str	r2, [r3, #0]
	}
}
  400912:	bf00      	nop
  400914:	3714      	adds	r7, #20
  400916:	46bd      	mov	sp, r7
  400918:	f85d 7b04 	ldr.w	r7, [sp], #4
  40091c:	4770      	bx	lr
  40091e:	bf00      	nop
  400920:	2040aa08 	.word	0x2040aa08
  400924:	2040aa10 	.word	0x2040aa10

00400928 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  400928:	b580      	push	{r7, lr}
  40092a:	b082      	sub	sp, #8
  40092c:	af00      	add	r7, sp, #0
  40092e:	6078      	str	r0, [r7, #4]
  400930:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  400932:	687b      	ldr	r3, [r7, #4]
  400934:	2b00      	cmp	r3, #0
  400936:	d103      	bne.n	400940 <xQueueGenericReset+0x18>
  400938:	4b27      	ldr	r3, [pc, #156]	; (4009d8 <xQueueGenericReset+0xb0>)
  40093a:	4798      	blx	r3
  40093c:	bf00      	nop
  40093e:	e7fd      	b.n	40093c <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  400940:	4b26      	ldr	r3, [pc, #152]	; (4009dc <xQueueGenericReset+0xb4>)
  400942:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400944:	687b      	ldr	r3, [r7, #4]
  400946:	681a      	ldr	r2, [r3, #0]
  400948:	687b      	ldr	r3, [r7, #4]
  40094a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40094c:	6879      	ldr	r1, [r7, #4]
  40094e:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400950:	fb01 f303 	mul.w	r3, r1, r3
  400954:	441a      	add	r2, r3
  400956:	687b      	ldr	r3, [r7, #4]
  400958:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  40095a:	687b      	ldr	r3, [r7, #4]
  40095c:	2200      	movs	r2, #0
  40095e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400960:	687b      	ldr	r3, [r7, #4]
  400962:	681a      	ldr	r2, [r3, #0]
  400964:	687b      	ldr	r3, [r7, #4]
  400966:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  400968:	687b      	ldr	r3, [r7, #4]
  40096a:	681a      	ldr	r2, [r3, #0]
  40096c:	687b      	ldr	r3, [r7, #4]
  40096e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400970:	3b01      	subs	r3, #1
  400972:	6879      	ldr	r1, [r7, #4]
  400974:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400976:	fb01 f303 	mul.w	r3, r1, r3
  40097a:	441a      	add	r2, r3
  40097c:	687b      	ldr	r3, [r7, #4]
  40097e:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400980:	687b      	ldr	r3, [r7, #4]
  400982:	f04f 32ff 	mov.w	r2, #4294967295
  400986:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400988:	687b      	ldr	r3, [r7, #4]
  40098a:	f04f 32ff 	mov.w	r2, #4294967295
  40098e:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  400990:	683b      	ldr	r3, [r7, #0]
  400992:	2b00      	cmp	r3, #0
  400994:	d10e      	bne.n	4009b4 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400996:	687b      	ldr	r3, [r7, #4]
  400998:	691b      	ldr	r3, [r3, #16]
  40099a:	2b00      	cmp	r3, #0
  40099c:	d014      	beq.n	4009c8 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40099e:	687b      	ldr	r3, [r7, #4]
  4009a0:	3310      	adds	r3, #16
  4009a2:	4618      	mov	r0, r3
  4009a4:	4b0e      	ldr	r3, [pc, #56]	; (4009e0 <xQueueGenericReset+0xb8>)
  4009a6:	4798      	blx	r3
  4009a8:	4603      	mov	r3, r0
  4009aa:	2b01      	cmp	r3, #1
  4009ac:	d10c      	bne.n	4009c8 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  4009ae:	4b0d      	ldr	r3, [pc, #52]	; (4009e4 <xQueueGenericReset+0xbc>)
  4009b0:	4798      	blx	r3
  4009b2:	e009      	b.n	4009c8 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4009b4:	687b      	ldr	r3, [r7, #4]
  4009b6:	3310      	adds	r3, #16
  4009b8:	4618      	mov	r0, r3
  4009ba:	4b0b      	ldr	r3, [pc, #44]	; (4009e8 <xQueueGenericReset+0xc0>)
  4009bc:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4009be:	687b      	ldr	r3, [r7, #4]
  4009c0:	3324      	adds	r3, #36	; 0x24
  4009c2:	4618      	mov	r0, r3
  4009c4:	4b08      	ldr	r3, [pc, #32]	; (4009e8 <xQueueGenericReset+0xc0>)
  4009c6:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  4009c8:	4b08      	ldr	r3, [pc, #32]	; (4009ec <xQueueGenericReset+0xc4>)
  4009ca:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  4009cc:	2301      	movs	r3, #1
}
  4009ce:	4618      	mov	r0, r3
  4009d0:	3708      	adds	r7, #8
  4009d2:	46bd      	mov	sp, r7
  4009d4:	bd80      	pop	{r7, pc}
  4009d6:	bf00      	nop
  4009d8:	0040059d 	.word	0x0040059d
  4009dc:	00400555 	.word	0x00400555
  4009e0:	0040181d 	.word	0x0040181d
  4009e4:	00400539 	.word	0x00400539
  4009e8:	00400231 	.word	0x00400231
  4009ec:	00400575 	.word	0x00400575

004009f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  4009f0:	b580      	push	{r7, lr}
  4009f2:	b088      	sub	sp, #32
  4009f4:	af00      	add	r7, sp, #0
  4009f6:	60f8      	str	r0, [r7, #12]
  4009f8:	60b9      	str	r1, [r7, #8]
  4009fa:	4613      	mov	r3, r2
  4009fc:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  4009fe:	2300      	movs	r3, #0
  400a00:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  400a02:	68fb      	ldr	r3, [r7, #12]
  400a04:	2b00      	cmp	r3, #0
  400a06:	d02a      	beq.n	400a5e <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  400a08:	2050      	movs	r0, #80	; 0x50
  400a0a:	4b1b      	ldr	r3, [pc, #108]	; (400a78 <xQueueGenericCreate+0x88>)
  400a0c:	4798      	blx	r3
  400a0e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  400a10:	69bb      	ldr	r3, [r7, #24]
  400a12:	2b00      	cmp	r3, #0
  400a14:	d023      	beq.n	400a5e <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	68ba      	ldr	r2, [r7, #8]
  400a1a:	fb02 f303 	mul.w	r3, r2, r3
  400a1e:	3301      	adds	r3, #1
  400a20:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  400a22:	6978      	ldr	r0, [r7, #20]
  400a24:	4b14      	ldr	r3, [pc, #80]	; (400a78 <xQueueGenericCreate+0x88>)
  400a26:	4798      	blx	r3
  400a28:	4602      	mov	r2, r0
  400a2a:	69bb      	ldr	r3, [r7, #24]
  400a2c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  400a2e:	69bb      	ldr	r3, [r7, #24]
  400a30:	681b      	ldr	r3, [r3, #0]
  400a32:	2b00      	cmp	r3, #0
  400a34:	d010      	beq.n	400a58 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  400a36:	69bb      	ldr	r3, [r7, #24]
  400a38:	68fa      	ldr	r2, [r7, #12]
  400a3a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  400a3c:	69bb      	ldr	r3, [r7, #24]
  400a3e:	68ba      	ldr	r2, [r7, #8]
  400a40:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  400a42:	2101      	movs	r1, #1
  400a44:	69b8      	ldr	r0, [r7, #24]
  400a46:	4b0d      	ldr	r3, [pc, #52]	; (400a7c <xQueueGenericCreate+0x8c>)
  400a48:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  400a4a:	69bb      	ldr	r3, [r7, #24]
  400a4c:	79fa      	ldrb	r2, [r7, #7]
  400a4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  400a52:	69bb      	ldr	r3, [r7, #24]
  400a54:	61fb      	str	r3, [r7, #28]
  400a56:	e002      	b.n	400a5e <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  400a58:	69b8      	ldr	r0, [r7, #24]
  400a5a:	4b09      	ldr	r3, [pc, #36]	; (400a80 <xQueueGenericCreate+0x90>)
  400a5c:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  400a5e:	69fb      	ldr	r3, [r7, #28]
  400a60:	2b00      	cmp	r3, #0
  400a62:	d103      	bne.n	400a6c <xQueueGenericCreate+0x7c>
  400a64:	4b07      	ldr	r3, [pc, #28]	; (400a84 <xQueueGenericCreate+0x94>)
  400a66:	4798      	blx	r3
  400a68:	bf00      	nop
  400a6a:	e7fd      	b.n	400a68 <xQueueGenericCreate+0x78>

	return xReturn;
  400a6c:	69fb      	ldr	r3, [r7, #28]
}
  400a6e:	4618      	mov	r0, r3
  400a70:	3720      	adds	r7, #32
  400a72:	46bd      	mov	sp, r7
  400a74:	bd80      	pop	{r7, pc}
  400a76:	bf00      	nop
  400a78:	00400685 	.word	0x00400685
  400a7c:	00400929 	.word	0x00400929
  400a80:	00400791 	.word	0x00400791
  400a84:	0040059d 	.word	0x0040059d

00400a88 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
  400a88:	b580      	push	{r7, lr}
  400a8a:	b084      	sub	sp, #16
  400a8c:	af00      	add	r7, sp, #0
  400a8e:	6078      	str	r0, [r7, #4]
  400a90:	6039      	str	r1, [r7, #0]
	xQueueHandle pxHandle;

		pxHandle = xQueueGenericCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
  400a92:	2202      	movs	r2, #2
  400a94:	2100      	movs	r1, #0
  400a96:	6878      	ldr	r0, [r7, #4]
  400a98:	4b0a      	ldr	r3, [pc, #40]	; (400ac4 <xQueueCreateCountingSemaphore+0x3c>)
  400a9a:	4798      	blx	r3
  400a9c:	60f8      	str	r0, [r7, #12]

		if( pxHandle != NULL )
  400a9e:	68fb      	ldr	r3, [r7, #12]
  400aa0:	2b00      	cmp	r3, #0
  400aa2:	d002      	beq.n	400aaa <xQueueCreateCountingSemaphore+0x22>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
  400aa4:	68fb      	ldr	r3, [r7, #12]
  400aa6:	683a      	ldr	r2, [r7, #0]
  400aa8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
  400aaa:	68fb      	ldr	r3, [r7, #12]
  400aac:	2b00      	cmp	r3, #0
  400aae:	d103      	bne.n	400ab8 <xQueueCreateCountingSemaphore+0x30>
  400ab0:	4b05      	ldr	r3, [pc, #20]	; (400ac8 <xQueueCreateCountingSemaphore+0x40>)
  400ab2:	4798      	blx	r3
  400ab4:	bf00      	nop
  400ab6:	e7fd      	b.n	400ab4 <xQueueCreateCountingSemaphore+0x2c>
		return pxHandle;
  400ab8:	68fb      	ldr	r3, [r7, #12]
	}
  400aba:	4618      	mov	r0, r3
  400abc:	3710      	adds	r7, #16
  400abe:	46bd      	mov	sp, r7
  400ac0:	bd80      	pop	{r7, pc}
  400ac2:	bf00      	nop
  400ac4:	004009f1 	.word	0x004009f1
  400ac8:	0040059d 	.word	0x0040059d

00400acc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  400acc:	b580      	push	{r7, lr}
  400ace:	b088      	sub	sp, #32
  400ad0:	af00      	add	r7, sp, #0
  400ad2:	60f8      	str	r0, [r7, #12]
  400ad4:	60b9      	str	r1, [r7, #8]
  400ad6:	607a      	str	r2, [r7, #4]
  400ad8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400ada:	2300      	movs	r3, #0
  400adc:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  400ade:	68fb      	ldr	r3, [r7, #12]
  400ae0:	2b00      	cmp	r3, #0
  400ae2:	d103      	bne.n	400aec <xQueueGenericSend+0x20>
  400ae4:	4b46      	ldr	r3, [pc, #280]	; (400c00 <xQueueGenericSend+0x134>)
  400ae6:	4798      	blx	r3
  400ae8:	bf00      	nop
  400aea:	e7fd      	b.n	400ae8 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400aec:	68bb      	ldr	r3, [r7, #8]
  400aee:	2b00      	cmp	r3, #0
  400af0:	d103      	bne.n	400afa <xQueueGenericSend+0x2e>
  400af2:	68fb      	ldr	r3, [r7, #12]
  400af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400af6:	2b00      	cmp	r3, #0
  400af8:	d101      	bne.n	400afe <xQueueGenericSend+0x32>
  400afa:	2301      	movs	r3, #1
  400afc:	e000      	b.n	400b00 <xQueueGenericSend+0x34>
  400afe:	2300      	movs	r3, #0
  400b00:	2b00      	cmp	r3, #0
  400b02:	d103      	bne.n	400b0c <xQueueGenericSend+0x40>
  400b04:	4b3e      	ldr	r3, [pc, #248]	; (400c00 <xQueueGenericSend+0x134>)
  400b06:	4798      	blx	r3
  400b08:	bf00      	nop
  400b0a:	e7fd      	b.n	400b08 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400b0c:	4b3d      	ldr	r3, [pc, #244]	; (400c04 <xQueueGenericSend+0x138>)
  400b0e:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400b10:	68fb      	ldr	r3, [r7, #12]
  400b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400b14:	68fb      	ldr	r3, [r7, #12]
  400b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400b18:	429a      	cmp	r2, r3
  400b1a:	d216      	bcs.n	400b4a <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400b1c:	683a      	ldr	r2, [r7, #0]
  400b1e:	68b9      	ldr	r1, [r7, #8]
  400b20:	68f8      	ldr	r0, [r7, #12]
  400b22:	4b39      	ldr	r3, [pc, #228]	; (400c08 <xQueueGenericSend+0x13c>)
  400b24:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400b26:	68fb      	ldr	r3, [r7, #12]
  400b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400b2a:	2b00      	cmp	r3, #0
  400b2c:	d009      	beq.n	400b42 <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400b2e:	68fb      	ldr	r3, [r7, #12]
  400b30:	3324      	adds	r3, #36	; 0x24
  400b32:	4618      	mov	r0, r3
  400b34:	4b35      	ldr	r3, [pc, #212]	; (400c0c <xQueueGenericSend+0x140>)
  400b36:	4798      	blx	r3
  400b38:	4603      	mov	r3, r0
  400b3a:	2b01      	cmp	r3, #1
  400b3c:	d101      	bne.n	400b42 <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  400b3e:	4b34      	ldr	r3, [pc, #208]	; (400c10 <xQueueGenericSend+0x144>)
  400b40:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  400b42:	4b34      	ldr	r3, [pc, #208]	; (400c14 <xQueueGenericSend+0x148>)
  400b44:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  400b46:	2301      	movs	r3, #1
  400b48:	e056      	b.n	400bf8 <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400b4a:	687b      	ldr	r3, [r7, #4]
  400b4c:	2b00      	cmp	r3, #0
  400b4e:	d103      	bne.n	400b58 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400b50:	4b30      	ldr	r3, [pc, #192]	; (400c14 <xQueueGenericSend+0x148>)
  400b52:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400b54:	2300      	movs	r3, #0
  400b56:	e04f      	b.n	400bf8 <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  400b58:	69fb      	ldr	r3, [r7, #28]
  400b5a:	2b00      	cmp	r3, #0
  400b5c:	d106      	bne.n	400b6c <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400b5e:	f107 0314 	add.w	r3, r7, #20
  400b62:	4618      	mov	r0, r3
  400b64:	4b2c      	ldr	r3, [pc, #176]	; (400c18 <xQueueGenericSend+0x14c>)
  400b66:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400b68:	2301      	movs	r3, #1
  400b6a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400b6c:	4b29      	ldr	r3, [pc, #164]	; (400c14 <xQueueGenericSend+0x148>)
  400b6e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400b70:	4b2a      	ldr	r3, [pc, #168]	; (400c1c <xQueueGenericSend+0x150>)
  400b72:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400b74:	4b23      	ldr	r3, [pc, #140]	; (400c04 <xQueueGenericSend+0x138>)
  400b76:	4798      	blx	r3
  400b78:	68fb      	ldr	r3, [r7, #12]
  400b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b80:	d102      	bne.n	400b88 <xQueueGenericSend+0xbc>
  400b82:	68fb      	ldr	r3, [r7, #12]
  400b84:	2200      	movs	r2, #0
  400b86:	645a      	str	r2, [r3, #68]	; 0x44
  400b88:	68fb      	ldr	r3, [r7, #12]
  400b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b90:	d102      	bne.n	400b98 <xQueueGenericSend+0xcc>
  400b92:	68fb      	ldr	r3, [r7, #12]
  400b94:	2200      	movs	r2, #0
  400b96:	649a      	str	r2, [r3, #72]	; 0x48
  400b98:	4b1e      	ldr	r3, [pc, #120]	; (400c14 <xQueueGenericSend+0x148>)
  400b9a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400b9c:	1d3a      	adds	r2, r7, #4
  400b9e:	f107 0314 	add.w	r3, r7, #20
  400ba2:	4611      	mov	r1, r2
  400ba4:	4618      	mov	r0, r3
  400ba6:	4b1e      	ldr	r3, [pc, #120]	; (400c20 <xQueueGenericSend+0x154>)
  400ba8:	4798      	blx	r3
  400baa:	4603      	mov	r3, r0
  400bac:	2b00      	cmp	r3, #0
  400bae:	d11d      	bne.n	400bec <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400bb0:	68f8      	ldr	r0, [r7, #12]
  400bb2:	4b1c      	ldr	r3, [pc, #112]	; (400c24 <xQueueGenericSend+0x158>)
  400bb4:	4798      	blx	r3
  400bb6:	4603      	mov	r3, r0
  400bb8:	2b00      	cmp	r3, #0
  400bba:	d011      	beq.n	400be0 <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400bbc:	68fb      	ldr	r3, [r7, #12]
  400bbe:	3310      	adds	r3, #16
  400bc0:	687a      	ldr	r2, [r7, #4]
  400bc2:	4611      	mov	r1, r2
  400bc4:	4618      	mov	r0, r3
  400bc6:	4b18      	ldr	r3, [pc, #96]	; (400c28 <xQueueGenericSend+0x15c>)
  400bc8:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400bca:	68f8      	ldr	r0, [r7, #12]
  400bcc:	4b17      	ldr	r3, [pc, #92]	; (400c2c <xQueueGenericSend+0x160>)
  400bce:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400bd0:	4b17      	ldr	r3, [pc, #92]	; (400c30 <xQueueGenericSend+0x164>)
  400bd2:	4798      	blx	r3
  400bd4:	4603      	mov	r3, r0
  400bd6:	2b00      	cmp	r3, #0
  400bd8:	d198      	bne.n	400b0c <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  400bda:	4b0d      	ldr	r3, [pc, #52]	; (400c10 <xQueueGenericSend+0x144>)
  400bdc:	4798      	blx	r3
  400bde:	e795      	b.n	400b0c <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400be0:	68f8      	ldr	r0, [r7, #12]
  400be2:	4b12      	ldr	r3, [pc, #72]	; (400c2c <xQueueGenericSend+0x160>)
  400be4:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400be6:	4b12      	ldr	r3, [pc, #72]	; (400c30 <xQueueGenericSend+0x164>)
  400be8:	4798      	blx	r3
  400bea:	e78f      	b.n	400b0c <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400bec:	68f8      	ldr	r0, [r7, #12]
  400bee:	4b0f      	ldr	r3, [pc, #60]	; (400c2c <xQueueGenericSend+0x160>)
  400bf0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400bf2:	4b0f      	ldr	r3, [pc, #60]	; (400c30 <xQueueGenericSend+0x164>)
  400bf4:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400bf6:	2300      	movs	r3, #0
		}
	}
}
  400bf8:	4618      	mov	r0, r3
  400bfa:	3720      	adds	r7, #32
  400bfc:	46bd      	mov	sp, r7
  400bfe:	bd80      	pop	{r7, pc}
  400c00:	0040059d 	.word	0x0040059d
  400c04:	00400555 	.word	0x00400555
  400c08:	00400ec5 	.word	0x00400ec5
  400c0c:	0040181d 	.word	0x0040181d
  400c10:	00400539 	.word	0x00400539
  400c14:	00400575 	.word	0x00400575
  400c18:	004018d9 	.word	0x004018d9
  400c1c:	004013dd 	.word	0x004013dd
  400c20:	00401915 	.word	0x00401915
  400c24:	004010b1 	.word	0x004010b1
  400c28:	00401735 	.word	0x00401735
  400c2c:	00400fd5 	.word	0x00400fd5
  400c30:	004013f9 	.word	0x004013f9

00400c34 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  400c34:	b580      	push	{r7, lr}
  400c36:	b086      	sub	sp, #24
  400c38:	af00      	add	r7, sp, #0
  400c3a:	60f8      	str	r0, [r7, #12]
  400c3c:	60b9      	str	r1, [r7, #8]
  400c3e:	607a      	str	r2, [r7, #4]
  400c40:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  400c42:	68fb      	ldr	r3, [r7, #12]
  400c44:	2b00      	cmp	r3, #0
  400c46:	d103      	bne.n	400c50 <xQueueGenericSendFromISR+0x1c>
  400c48:	4b25      	ldr	r3, [pc, #148]	; (400ce0 <xQueueGenericSendFromISR+0xac>)
  400c4a:	4798      	blx	r3
  400c4c:	bf00      	nop
  400c4e:	e7fd      	b.n	400c4c <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400c50:	68bb      	ldr	r3, [r7, #8]
  400c52:	2b00      	cmp	r3, #0
  400c54:	d103      	bne.n	400c5e <xQueueGenericSendFromISR+0x2a>
  400c56:	68fb      	ldr	r3, [r7, #12]
  400c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400c5a:	2b00      	cmp	r3, #0
  400c5c:	d101      	bne.n	400c62 <xQueueGenericSendFromISR+0x2e>
  400c5e:	2301      	movs	r3, #1
  400c60:	e000      	b.n	400c64 <xQueueGenericSendFromISR+0x30>
  400c62:	2300      	movs	r3, #0
  400c64:	2b00      	cmp	r3, #0
  400c66:	d103      	bne.n	400c70 <xQueueGenericSendFromISR+0x3c>
  400c68:	4b1d      	ldr	r3, [pc, #116]	; (400ce0 <xQueueGenericSendFromISR+0xac>)
  400c6a:	4798      	blx	r3
  400c6c:	bf00      	nop
  400c6e:	e7fd      	b.n	400c6c <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  400c70:	4b1b      	ldr	r3, [pc, #108]	; (400ce0 <xQueueGenericSendFromISR+0xac>)
  400c72:	4798      	blx	r3
  400c74:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400c76:	68fb      	ldr	r3, [r7, #12]
  400c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400c7a:	68fb      	ldr	r3, [r7, #12]
  400c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400c7e:	429a      	cmp	r2, r3
  400c80:	d224      	bcs.n	400ccc <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400c82:	683a      	ldr	r2, [r7, #0]
  400c84:	68b9      	ldr	r1, [r7, #8]
  400c86:	68f8      	ldr	r0, [r7, #12]
  400c88:	4b16      	ldr	r3, [pc, #88]	; (400ce4 <xQueueGenericSendFromISR+0xb0>)
  400c8a:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400c8c:	68fb      	ldr	r3, [r7, #12]
  400c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400c90:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c94:	d112      	bne.n	400cbc <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c96:	68fb      	ldr	r3, [r7, #12]
  400c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400c9a:	2b00      	cmp	r3, #0
  400c9c:	d013      	beq.n	400cc6 <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c9e:	68fb      	ldr	r3, [r7, #12]
  400ca0:	3324      	adds	r3, #36	; 0x24
  400ca2:	4618      	mov	r0, r3
  400ca4:	4b10      	ldr	r3, [pc, #64]	; (400ce8 <xQueueGenericSendFromISR+0xb4>)
  400ca6:	4798      	blx	r3
  400ca8:	4603      	mov	r3, r0
  400caa:	2b00      	cmp	r3, #0
  400cac:	d00b      	beq.n	400cc6 <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  400cae:	687b      	ldr	r3, [r7, #4]
  400cb0:	2b00      	cmp	r3, #0
  400cb2:	d008      	beq.n	400cc6 <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  400cb4:	687b      	ldr	r3, [r7, #4]
  400cb6:	2201      	movs	r2, #1
  400cb8:	601a      	str	r2, [r3, #0]
  400cba:	e004      	b.n	400cc6 <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400cbc:	68fb      	ldr	r3, [r7, #12]
  400cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400cc0:	1c5a      	adds	r2, r3, #1
  400cc2:	68fb      	ldr	r3, [r7, #12]
  400cc4:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  400cc6:	2301      	movs	r3, #1
  400cc8:	617b      	str	r3, [r7, #20]
  400cca:	e001      	b.n	400cd0 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400ccc:	2300      	movs	r3, #0
  400cce:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  400cd0:	6938      	ldr	r0, [r7, #16]
  400cd2:	4b06      	ldr	r3, [pc, #24]	; (400cec <xQueueGenericSendFromISR+0xb8>)
  400cd4:	4798      	blx	r3

	return xReturn;
  400cd6:	697b      	ldr	r3, [r7, #20]
}
  400cd8:	4618      	mov	r0, r3
  400cda:	3718      	adds	r7, #24
  400cdc:	46bd      	mov	sp, r7
  400cde:	bd80      	pop	{r7, pc}
  400ce0:	0040059d 	.word	0x0040059d
  400ce4:	00400ec5 	.word	0x00400ec5
  400ce8:	0040181d 	.word	0x0040181d
  400cec:	004005af 	.word	0x004005af

00400cf0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  400cf0:	b580      	push	{r7, lr}
  400cf2:	b088      	sub	sp, #32
  400cf4:	af00      	add	r7, sp, #0
  400cf6:	60f8      	str	r0, [r7, #12]
  400cf8:	60b9      	str	r1, [r7, #8]
  400cfa:	607a      	str	r2, [r7, #4]
  400cfc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400cfe:	2300      	movs	r3, #0
  400d00:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  400d02:	68fb      	ldr	r3, [r7, #12]
  400d04:	2b00      	cmp	r3, #0
  400d06:	d103      	bne.n	400d10 <xQueueGenericReceive+0x20>
  400d08:	4b5f      	ldr	r3, [pc, #380]	; (400e88 <xQueueGenericReceive+0x198>)
  400d0a:	4798      	blx	r3
  400d0c:	bf00      	nop
  400d0e:	e7fd      	b.n	400d0c <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400d10:	68bb      	ldr	r3, [r7, #8]
  400d12:	2b00      	cmp	r3, #0
  400d14:	d103      	bne.n	400d1e <xQueueGenericReceive+0x2e>
  400d16:	68fb      	ldr	r3, [r7, #12]
  400d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400d1a:	2b00      	cmp	r3, #0
  400d1c:	d101      	bne.n	400d22 <xQueueGenericReceive+0x32>
  400d1e:	2301      	movs	r3, #1
  400d20:	e000      	b.n	400d24 <xQueueGenericReceive+0x34>
  400d22:	2300      	movs	r3, #0
  400d24:	2b00      	cmp	r3, #0
  400d26:	d103      	bne.n	400d30 <xQueueGenericReceive+0x40>
  400d28:	4b57      	ldr	r3, [pc, #348]	; (400e88 <xQueueGenericReceive+0x198>)
  400d2a:	4798      	blx	r3
  400d2c:	bf00      	nop
  400d2e:	e7fd      	b.n	400d2c <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  400d30:	4b56      	ldr	r3, [pc, #344]	; (400e8c <xQueueGenericReceive+0x19c>)
  400d32:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  400d34:	68fb      	ldr	r3, [r7, #12]
  400d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400d38:	2b00      	cmp	r3, #0
  400d3a:	d03b      	beq.n	400db4 <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  400d3c:	68fb      	ldr	r3, [r7, #12]
  400d3e:	68db      	ldr	r3, [r3, #12]
  400d40:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400d42:	68b9      	ldr	r1, [r7, #8]
  400d44:	68f8      	ldr	r0, [r7, #12]
  400d46:	4b52      	ldr	r3, [pc, #328]	; (400e90 <xQueueGenericReceive+0x1a0>)
  400d48:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  400d4a:	683b      	ldr	r3, [r7, #0]
  400d4c:	2b00      	cmp	r3, #0
  400d4e:	d11c      	bne.n	400d8a <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  400d50:	68fb      	ldr	r3, [r7, #12]
  400d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400d54:	1e5a      	subs	r2, r3, #1
  400d56:	68fb      	ldr	r3, [r7, #12]
  400d58:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400d5a:	68fb      	ldr	r3, [r7, #12]
  400d5c:	681b      	ldr	r3, [r3, #0]
  400d5e:	2b00      	cmp	r3, #0
  400d60:	d104      	bne.n	400d6c <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  400d62:	4b4c      	ldr	r3, [pc, #304]	; (400e94 <xQueueGenericReceive+0x1a4>)
  400d64:	4798      	blx	r3
  400d66:	4602      	mov	r2, r0
  400d68:	68fb      	ldr	r3, [r7, #12]
  400d6a:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d6c:	68fb      	ldr	r3, [r7, #12]
  400d6e:	691b      	ldr	r3, [r3, #16]
  400d70:	2b00      	cmp	r3, #0
  400d72:	d01b      	beq.n	400dac <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400d74:	68fb      	ldr	r3, [r7, #12]
  400d76:	3310      	adds	r3, #16
  400d78:	4618      	mov	r0, r3
  400d7a:	4b47      	ldr	r3, [pc, #284]	; (400e98 <xQueueGenericReceive+0x1a8>)
  400d7c:	4798      	blx	r3
  400d7e:	4603      	mov	r3, r0
  400d80:	2b01      	cmp	r3, #1
  400d82:	d113      	bne.n	400dac <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  400d84:	4b45      	ldr	r3, [pc, #276]	; (400e9c <xQueueGenericReceive+0x1ac>)
  400d86:	4798      	blx	r3
  400d88:	e010      	b.n	400dac <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  400d8a:	68fb      	ldr	r3, [r7, #12]
  400d8c:	69ba      	ldr	r2, [r7, #24]
  400d8e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400d90:	68fb      	ldr	r3, [r7, #12]
  400d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400d94:	2b00      	cmp	r3, #0
  400d96:	d009      	beq.n	400dac <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400d98:	68fb      	ldr	r3, [r7, #12]
  400d9a:	3324      	adds	r3, #36	; 0x24
  400d9c:	4618      	mov	r0, r3
  400d9e:	4b3e      	ldr	r3, [pc, #248]	; (400e98 <xQueueGenericReceive+0x1a8>)
  400da0:	4798      	blx	r3
  400da2:	4603      	mov	r3, r0
  400da4:	2b00      	cmp	r3, #0
  400da6:	d001      	beq.n	400dac <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  400da8:	4b3c      	ldr	r3, [pc, #240]	; (400e9c <xQueueGenericReceive+0x1ac>)
  400daa:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  400dac:	4b3c      	ldr	r3, [pc, #240]	; (400ea0 <xQueueGenericReceive+0x1b0>)
  400dae:	4798      	blx	r3
				return pdPASS;
  400db0:	2301      	movs	r3, #1
  400db2:	e064      	b.n	400e7e <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400db4:	687b      	ldr	r3, [r7, #4]
  400db6:	2b00      	cmp	r3, #0
  400db8:	d103      	bne.n	400dc2 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400dba:	4b39      	ldr	r3, [pc, #228]	; (400ea0 <xQueueGenericReceive+0x1b0>)
  400dbc:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  400dbe:	2300      	movs	r3, #0
  400dc0:	e05d      	b.n	400e7e <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  400dc2:	69fb      	ldr	r3, [r7, #28]
  400dc4:	2b00      	cmp	r3, #0
  400dc6:	d106      	bne.n	400dd6 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400dc8:	f107 0310 	add.w	r3, r7, #16
  400dcc:	4618      	mov	r0, r3
  400dce:	4b35      	ldr	r3, [pc, #212]	; (400ea4 <xQueueGenericReceive+0x1b4>)
  400dd0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400dd2:	2301      	movs	r3, #1
  400dd4:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400dd6:	4b32      	ldr	r3, [pc, #200]	; (400ea0 <xQueueGenericReceive+0x1b0>)
  400dd8:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400dda:	4b33      	ldr	r3, [pc, #204]	; (400ea8 <xQueueGenericReceive+0x1b8>)
  400ddc:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400dde:	4b2b      	ldr	r3, [pc, #172]	; (400e8c <xQueueGenericReceive+0x19c>)
  400de0:	4798      	blx	r3
  400de2:	68fb      	ldr	r3, [r7, #12]
  400de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400de6:	f1b3 3fff 	cmp.w	r3, #4294967295
  400dea:	d102      	bne.n	400df2 <xQueueGenericReceive+0x102>
  400dec:	68fb      	ldr	r3, [r7, #12]
  400dee:	2200      	movs	r2, #0
  400df0:	645a      	str	r2, [r3, #68]	; 0x44
  400df2:	68fb      	ldr	r3, [r7, #12]
  400df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400df6:	f1b3 3fff 	cmp.w	r3, #4294967295
  400dfa:	d102      	bne.n	400e02 <xQueueGenericReceive+0x112>
  400dfc:	68fb      	ldr	r3, [r7, #12]
  400dfe:	2200      	movs	r2, #0
  400e00:	649a      	str	r2, [r3, #72]	; 0x48
  400e02:	4b27      	ldr	r3, [pc, #156]	; (400ea0 <xQueueGenericReceive+0x1b0>)
  400e04:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400e06:	1d3a      	adds	r2, r7, #4
  400e08:	f107 0310 	add.w	r3, r7, #16
  400e0c:	4611      	mov	r1, r2
  400e0e:	4618      	mov	r0, r3
  400e10:	4b26      	ldr	r3, [pc, #152]	; (400eac <xQueueGenericReceive+0x1bc>)
  400e12:	4798      	blx	r3
  400e14:	4603      	mov	r3, r0
  400e16:	2b00      	cmp	r3, #0
  400e18:	d12b      	bne.n	400e72 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400e1a:	68f8      	ldr	r0, [r7, #12]
  400e1c:	4b24      	ldr	r3, [pc, #144]	; (400eb0 <xQueueGenericReceive+0x1c0>)
  400e1e:	4798      	blx	r3
  400e20:	4603      	mov	r3, r0
  400e22:	2b00      	cmp	r3, #0
  400e24:	d01f      	beq.n	400e66 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400e26:	68fb      	ldr	r3, [r7, #12]
  400e28:	681b      	ldr	r3, [r3, #0]
  400e2a:	2b00      	cmp	r3, #0
  400e2c:	d108      	bne.n	400e40 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  400e2e:	4b17      	ldr	r3, [pc, #92]	; (400e8c <xQueueGenericReceive+0x19c>)
  400e30:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400e32:	68fb      	ldr	r3, [r7, #12]
  400e34:	685b      	ldr	r3, [r3, #4]
  400e36:	4618      	mov	r0, r3
  400e38:	4b1e      	ldr	r3, [pc, #120]	; (400eb4 <xQueueGenericReceive+0x1c4>)
  400e3a:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  400e3c:	4b18      	ldr	r3, [pc, #96]	; (400ea0 <xQueueGenericReceive+0x1b0>)
  400e3e:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400e40:	68fb      	ldr	r3, [r7, #12]
  400e42:	3324      	adds	r3, #36	; 0x24
  400e44:	687a      	ldr	r2, [r7, #4]
  400e46:	4611      	mov	r1, r2
  400e48:	4618      	mov	r0, r3
  400e4a:	4b1b      	ldr	r3, [pc, #108]	; (400eb8 <xQueueGenericReceive+0x1c8>)
  400e4c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400e4e:	68f8      	ldr	r0, [r7, #12]
  400e50:	4b1a      	ldr	r3, [pc, #104]	; (400ebc <xQueueGenericReceive+0x1cc>)
  400e52:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400e54:	4b1a      	ldr	r3, [pc, #104]	; (400ec0 <xQueueGenericReceive+0x1d0>)
  400e56:	4798      	blx	r3
  400e58:	4603      	mov	r3, r0
  400e5a:	2b00      	cmp	r3, #0
  400e5c:	f47f af68 	bne.w	400d30 <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  400e60:	4b0e      	ldr	r3, [pc, #56]	; (400e9c <xQueueGenericReceive+0x1ac>)
  400e62:	4798      	blx	r3
  400e64:	e764      	b.n	400d30 <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400e66:	68f8      	ldr	r0, [r7, #12]
  400e68:	4b14      	ldr	r3, [pc, #80]	; (400ebc <xQueueGenericReceive+0x1cc>)
  400e6a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400e6c:	4b14      	ldr	r3, [pc, #80]	; (400ec0 <xQueueGenericReceive+0x1d0>)
  400e6e:	4798      	blx	r3
  400e70:	e75e      	b.n	400d30 <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  400e72:	68f8      	ldr	r0, [r7, #12]
  400e74:	4b11      	ldr	r3, [pc, #68]	; (400ebc <xQueueGenericReceive+0x1cc>)
  400e76:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400e78:	4b11      	ldr	r3, [pc, #68]	; (400ec0 <xQueueGenericReceive+0x1d0>)
  400e7a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  400e7c:	2300      	movs	r3, #0
		}
	}
}
  400e7e:	4618      	mov	r0, r3
  400e80:	3720      	adds	r7, #32
  400e82:	46bd      	mov	sp, r7
  400e84:	bd80      	pop	{r7, pc}
  400e86:	bf00      	nop
  400e88:	0040059d 	.word	0x0040059d
  400e8c:	00400555 	.word	0x00400555
  400e90:	00400f85 	.word	0x00400f85
  400e94:	00401c95 	.word	0x00401c95
  400e98:	0040181d 	.word	0x0040181d
  400e9c:	00400539 	.word	0x00400539
  400ea0:	00400575 	.word	0x00400575
  400ea4:	004018d9 	.word	0x004018d9
  400ea8:	004013dd 	.word	0x004013dd
  400eac:	00401915 	.word	0x00401915
  400eb0:	0040107d 	.word	0x0040107d
  400eb4:	00401cf1 	.word	0x00401cf1
  400eb8:	00401735 	.word	0x00401735
  400ebc:	00400fd5 	.word	0x00400fd5
  400ec0:	004013f9 	.word	0x004013f9

00400ec4 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  400ec4:	b580      	push	{r7, lr}
  400ec6:	b084      	sub	sp, #16
  400ec8:	af00      	add	r7, sp, #0
  400eca:	60f8      	str	r0, [r7, #12]
  400ecc:	60b9      	str	r1, [r7, #8]
  400ece:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  400ed0:	68fb      	ldr	r3, [r7, #12]
  400ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ed4:	2b00      	cmp	r3, #0
  400ed6:	d10c      	bne.n	400ef2 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400ed8:	68fb      	ldr	r3, [r7, #12]
  400eda:	681b      	ldr	r3, [r3, #0]
  400edc:	2b00      	cmp	r3, #0
  400ede:	d143      	bne.n	400f68 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400ee0:	68fb      	ldr	r3, [r7, #12]
  400ee2:	685b      	ldr	r3, [r3, #4]
  400ee4:	4618      	mov	r0, r3
  400ee6:	4b25      	ldr	r3, [pc, #148]	; (400f7c <prvCopyDataToQueue+0xb8>)
  400ee8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400eea:	68fb      	ldr	r3, [r7, #12]
  400eec:	2200      	movs	r2, #0
  400eee:	605a      	str	r2, [r3, #4]
  400ef0:	e03a      	b.n	400f68 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  400ef2:	687b      	ldr	r3, [r7, #4]
  400ef4:	2b00      	cmp	r3, #0
  400ef6:	d119      	bne.n	400f2c <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400ef8:	68fb      	ldr	r3, [r7, #12]
  400efa:	6898      	ldr	r0, [r3, #8]
  400efc:	68fb      	ldr	r3, [r7, #12]
  400efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f00:	461a      	mov	r2, r3
  400f02:	68b9      	ldr	r1, [r7, #8]
  400f04:	4b1e      	ldr	r3, [pc, #120]	; (400f80 <prvCopyDataToQueue+0xbc>)
  400f06:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400f08:	68fb      	ldr	r3, [r7, #12]
  400f0a:	689a      	ldr	r2, [r3, #8]
  400f0c:	68fb      	ldr	r3, [r7, #12]
  400f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f10:	441a      	add	r2, r3
  400f12:	68fb      	ldr	r3, [r7, #12]
  400f14:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  400f16:	68fb      	ldr	r3, [r7, #12]
  400f18:	689a      	ldr	r2, [r3, #8]
  400f1a:	68fb      	ldr	r3, [r7, #12]
  400f1c:	685b      	ldr	r3, [r3, #4]
  400f1e:	429a      	cmp	r2, r3
  400f20:	d322      	bcc.n	400f68 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400f22:	68fb      	ldr	r3, [r7, #12]
  400f24:	681a      	ldr	r2, [r3, #0]
  400f26:	68fb      	ldr	r3, [r7, #12]
  400f28:	609a      	str	r2, [r3, #8]
  400f2a:	e01d      	b.n	400f68 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400f2c:	68fb      	ldr	r3, [r7, #12]
  400f2e:	68d8      	ldr	r0, [r3, #12]
  400f30:	68fb      	ldr	r3, [r7, #12]
  400f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f34:	461a      	mov	r2, r3
  400f36:	68b9      	ldr	r1, [r7, #8]
  400f38:	4b11      	ldr	r3, [pc, #68]	; (400f80 <prvCopyDataToQueue+0xbc>)
  400f3a:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  400f3c:	68fb      	ldr	r3, [r7, #12]
  400f3e:	68da      	ldr	r2, [r3, #12]
  400f40:	68fb      	ldr	r3, [r7, #12]
  400f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f44:	425b      	negs	r3, r3
  400f46:	441a      	add	r2, r3
  400f48:	68fb      	ldr	r3, [r7, #12]
  400f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  400f4c:	68fb      	ldr	r3, [r7, #12]
  400f4e:	68da      	ldr	r2, [r3, #12]
  400f50:	68fb      	ldr	r3, [r7, #12]
  400f52:	681b      	ldr	r3, [r3, #0]
  400f54:	429a      	cmp	r2, r3
  400f56:	d207      	bcs.n	400f68 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400f58:	68fb      	ldr	r3, [r7, #12]
  400f5a:	685a      	ldr	r2, [r3, #4]
  400f5c:	68fb      	ldr	r3, [r7, #12]
  400f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f60:	425b      	negs	r3, r3
  400f62:	441a      	add	r2, r3
  400f64:	68fb      	ldr	r3, [r7, #12]
  400f66:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400f68:	68fb      	ldr	r3, [r7, #12]
  400f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400f6c:	1c5a      	adds	r2, r3, #1
  400f6e:	68fb      	ldr	r3, [r7, #12]
  400f70:	639a      	str	r2, [r3, #56]	; 0x38
}
  400f72:	bf00      	nop
  400f74:	3710      	adds	r7, #16
  400f76:	46bd      	mov	sp, r7
  400f78:	bd80      	pop	{r7, pc}
  400f7a:	bf00      	nop
  400f7c:	00401da5 	.word	0x00401da5
  400f80:	004069c9 	.word	0x004069c9

00400f84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  400f84:	b580      	push	{r7, lr}
  400f86:	b082      	sub	sp, #8
  400f88:	af00      	add	r7, sp, #0
  400f8a:	6078      	str	r0, [r7, #4]
  400f8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  400f8e:	687b      	ldr	r3, [r7, #4]
  400f90:	681b      	ldr	r3, [r3, #0]
  400f92:	2b00      	cmp	r3, #0
  400f94:	d018      	beq.n	400fc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  400f96:	687b      	ldr	r3, [r7, #4]
  400f98:	68da      	ldr	r2, [r3, #12]
  400f9a:	687b      	ldr	r3, [r7, #4]
  400f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f9e:	441a      	add	r2, r3
  400fa0:	687b      	ldr	r3, [r7, #4]
  400fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  400fa4:	687b      	ldr	r3, [r7, #4]
  400fa6:	68da      	ldr	r2, [r3, #12]
  400fa8:	687b      	ldr	r3, [r7, #4]
  400faa:	685b      	ldr	r3, [r3, #4]
  400fac:	429a      	cmp	r2, r3
  400fae:	d303      	bcc.n	400fb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  400fb0:	687b      	ldr	r3, [r7, #4]
  400fb2:	681a      	ldr	r2, [r3, #0]
  400fb4:	687b      	ldr	r3, [r7, #4]
  400fb6:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  400fb8:	687b      	ldr	r3, [r7, #4]
  400fba:	68d9      	ldr	r1, [r3, #12]
  400fbc:	687b      	ldr	r3, [r7, #4]
  400fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400fc0:	461a      	mov	r2, r3
  400fc2:	6838      	ldr	r0, [r7, #0]
  400fc4:	4b02      	ldr	r3, [pc, #8]	; (400fd0 <prvCopyDataFromQueue+0x4c>)
  400fc6:	4798      	blx	r3
	}
}
  400fc8:	bf00      	nop
  400fca:	3708      	adds	r7, #8
  400fcc:	46bd      	mov	sp, r7
  400fce:	bd80      	pop	{r7, pc}
  400fd0:	004069c9 	.word	0x004069c9

00400fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  400fd4:	b580      	push	{r7, lr}
  400fd6:	b082      	sub	sp, #8
  400fd8:	af00      	add	r7, sp, #0
  400fda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400fdc:	4b23      	ldr	r3, [pc, #140]	; (40106c <prvUnlockQueue+0x98>)
  400fde:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400fe0:	e012      	b.n	401008 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400fe2:	687b      	ldr	r3, [r7, #4]
  400fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	d013      	beq.n	401012 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400fea:	687b      	ldr	r3, [r7, #4]
  400fec:	3324      	adds	r3, #36	; 0x24
  400fee:	4618      	mov	r0, r3
  400ff0:	4b1f      	ldr	r3, [pc, #124]	; (401070 <prvUnlockQueue+0x9c>)
  400ff2:	4798      	blx	r3
  400ff4:	4603      	mov	r3, r0
  400ff6:	2b00      	cmp	r3, #0
  400ff8:	d001      	beq.n	400ffe <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  400ffa:	4b1e      	ldr	r3, [pc, #120]	; (401074 <prvUnlockQueue+0xa0>)
  400ffc:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  400ffe:	687b      	ldr	r3, [r7, #4]
  401000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401002:	1e5a      	subs	r2, r3, #1
  401004:	687b      	ldr	r3, [r7, #4]
  401006:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401008:	687b      	ldr	r3, [r7, #4]
  40100a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40100c:	2b00      	cmp	r3, #0
  40100e:	dce8      	bgt.n	400fe2 <prvUnlockQueue+0xe>
  401010:	e000      	b.n	401014 <prvUnlockQueue+0x40>
			}
			else
			{
				break;
  401012:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  401014:	687b      	ldr	r3, [r7, #4]
  401016:	f04f 32ff 	mov.w	r2, #4294967295
  40101a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  40101c:	4b16      	ldr	r3, [pc, #88]	; (401078 <prvUnlockQueue+0xa4>)
  40101e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  401020:	4b12      	ldr	r3, [pc, #72]	; (40106c <prvUnlockQueue+0x98>)
  401022:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401024:	e012      	b.n	40104c <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401026:	687b      	ldr	r3, [r7, #4]
  401028:	691b      	ldr	r3, [r3, #16]
  40102a:	2b00      	cmp	r3, #0
  40102c:	d013      	beq.n	401056 <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40102e:	687b      	ldr	r3, [r7, #4]
  401030:	3310      	adds	r3, #16
  401032:	4618      	mov	r0, r3
  401034:	4b0e      	ldr	r3, [pc, #56]	; (401070 <prvUnlockQueue+0x9c>)
  401036:	4798      	blx	r3
  401038:	4603      	mov	r3, r0
  40103a:	2b00      	cmp	r3, #0
  40103c:	d001      	beq.n	401042 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  40103e:	4b0d      	ldr	r3, [pc, #52]	; (401074 <prvUnlockQueue+0xa0>)
  401040:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  401042:	687b      	ldr	r3, [r7, #4]
  401044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  401046:	1e5a      	subs	r2, r3, #1
  401048:	687b      	ldr	r3, [r7, #4]
  40104a:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40104c:	687b      	ldr	r3, [r7, #4]
  40104e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  401050:	2b00      	cmp	r3, #0
  401052:	dce8      	bgt.n	401026 <prvUnlockQueue+0x52>
  401054:	e000      	b.n	401058 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
  401056:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  401058:	687b      	ldr	r3, [r7, #4]
  40105a:	f04f 32ff 	mov.w	r2, #4294967295
  40105e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  401060:	4b05      	ldr	r3, [pc, #20]	; (401078 <prvUnlockQueue+0xa4>)
  401062:	4798      	blx	r3
}
  401064:	bf00      	nop
  401066:	3708      	adds	r7, #8
  401068:	46bd      	mov	sp, r7
  40106a:	bd80      	pop	{r7, pc}
  40106c:	00400555 	.word	0x00400555
  401070:	0040181d 	.word	0x0040181d
  401074:	004019c9 	.word	0x004019c9
  401078:	00400575 	.word	0x00400575

0040107c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  40107c:	b580      	push	{r7, lr}
  40107e:	b084      	sub	sp, #16
  401080:	af00      	add	r7, sp, #0
  401082:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  401084:	4b08      	ldr	r3, [pc, #32]	; (4010a8 <prvIsQueueEmpty+0x2c>)
  401086:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  401088:	687b      	ldr	r3, [r7, #4]
  40108a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40108c:	2b00      	cmp	r3, #0
  40108e:	bf0c      	ite	eq
  401090:	2301      	moveq	r3, #1
  401092:	2300      	movne	r3, #0
  401094:	b2db      	uxtb	r3, r3
  401096:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  401098:	4b04      	ldr	r3, [pc, #16]	; (4010ac <prvIsQueueEmpty+0x30>)
  40109a:	4798      	blx	r3

	return xReturn;
  40109c:	68fb      	ldr	r3, [r7, #12]
}
  40109e:	4618      	mov	r0, r3
  4010a0:	3710      	adds	r7, #16
  4010a2:	46bd      	mov	sp, r7
  4010a4:	bd80      	pop	{r7, pc}
  4010a6:	bf00      	nop
  4010a8:	00400555 	.word	0x00400555
  4010ac:	00400575 	.word	0x00400575

004010b0 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  4010b0:	b580      	push	{r7, lr}
  4010b2:	b084      	sub	sp, #16
  4010b4:	af00      	add	r7, sp, #0
  4010b6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  4010b8:	4b09      	ldr	r3, [pc, #36]	; (4010e0 <prvIsQueueFull+0x30>)
  4010ba:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  4010bc:	687b      	ldr	r3, [r7, #4]
  4010be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4010c0:	687b      	ldr	r3, [r7, #4]
  4010c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  4010c4:	429a      	cmp	r2, r3
  4010c6:	bf0c      	ite	eq
  4010c8:	2301      	moveq	r3, #1
  4010ca:	2300      	movne	r3, #0
  4010cc:	b2db      	uxtb	r3, r3
  4010ce:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  4010d0:	4b04      	ldr	r3, [pc, #16]	; (4010e4 <prvIsQueueFull+0x34>)
  4010d2:	4798      	blx	r3

	return xReturn;
  4010d4:	68fb      	ldr	r3, [r7, #12]
}
  4010d6:	4618      	mov	r0, r3
  4010d8:	3710      	adds	r7, #16
  4010da:	46bd      	mov	sp, r7
  4010dc:	bd80      	pop	{r7, pc}
  4010de:	bf00      	nop
  4010e0:	00400555 	.word	0x00400555
  4010e4:	00400575 	.word	0x00400575

004010e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  4010e8:	b580      	push	{r7, lr}
  4010ea:	b082      	sub	sp, #8
  4010ec:	af00      	add	r7, sp, #0
  4010ee:	6078      	str	r0, [r7, #4]
  4010f0:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  4010f2:	4b12      	ldr	r3, [pc, #72]	; (40113c <vQueueWaitForMessageRestricted+0x54>)
  4010f4:	4798      	blx	r3
  4010f6:	687b      	ldr	r3, [r7, #4]
  4010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4010fa:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010fe:	d102      	bne.n	401106 <vQueueWaitForMessageRestricted+0x1e>
  401100:	687b      	ldr	r3, [r7, #4]
  401102:	2200      	movs	r2, #0
  401104:	645a      	str	r2, [r3, #68]	; 0x44
  401106:	687b      	ldr	r3, [r7, #4]
  401108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40110a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40110e:	d102      	bne.n	401116 <vQueueWaitForMessageRestricted+0x2e>
  401110:	687b      	ldr	r3, [r7, #4]
  401112:	2200      	movs	r2, #0
  401114:	649a      	str	r2, [r3, #72]	; 0x48
  401116:	4b0a      	ldr	r3, [pc, #40]	; (401140 <vQueueWaitForMessageRestricted+0x58>)
  401118:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  40111a:	687b      	ldr	r3, [r7, #4]
  40111c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40111e:	2b00      	cmp	r3, #0
  401120:	d105      	bne.n	40112e <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401122:	687b      	ldr	r3, [r7, #4]
  401124:	3324      	adds	r3, #36	; 0x24
  401126:	6839      	ldr	r1, [r7, #0]
  401128:	4618      	mov	r0, r3
  40112a:	4b06      	ldr	r3, [pc, #24]	; (401144 <vQueueWaitForMessageRestricted+0x5c>)
  40112c:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  40112e:	6878      	ldr	r0, [r7, #4]
  401130:	4b05      	ldr	r3, [pc, #20]	; (401148 <vQueueWaitForMessageRestricted+0x60>)
  401132:	4798      	blx	r3
	}
  401134:	bf00      	nop
  401136:	3708      	adds	r7, #8
  401138:	46bd      	mov	sp, r7
  40113a:	bd80      	pop	{r7, pc}
  40113c:	00400555 	.word	0x00400555
  401140:	00400575 	.word	0x00400575
  401144:	004017b9 	.word	0x004017b9
  401148:	00400fd5 	.word	0x00400fd5

0040114c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  40114c:	b590      	push	{r4, r7, lr}
  40114e:	b08b      	sub	sp, #44	; 0x2c
  401150:	af02      	add	r7, sp, #8
  401152:	60f8      	str	r0, [r7, #12]
  401154:	60b9      	str	r1, [r7, #8]
  401156:	603b      	str	r3, [r7, #0]
  401158:	4613      	mov	r3, r2
  40115a:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  40115c:	68fb      	ldr	r3, [r7, #12]
  40115e:	2b00      	cmp	r3, #0
  401160:	d103      	bne.n	40116a <xTaskGenericCreate+0x1e>
  401162:	4b54      	ldr	r3, [pc, #336]	; (4012b4 <xTaskGenericCreate+0x168>)
  401164:	4798      	blx	r3
  401166:	bf00      	nop
  401168:	e7fd      	b.n	401166 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  40116a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40116c:	2b04      	cmp	r3, #4
  40116e:	d903      	bls.n	401178 <xTaskGenericCreate+0x2c>
  401170:	4b50      	ldr	r3, [pc, #320]	; (4012b4 <xTaskGenericCreate+0x168>)
  401172:	4798      	blx	r3
  401174:	bf00      	nop
  401176:	e7fd      	b.n	401174 <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  401178:	88fb      	ldrh	r3, [r7, #6]
  40117a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  40117c:	4618      	mov	r0, r3
  40117e:	4b4e      	ldr	r3, [pc, #312]	; (4012b8 <xTaskGenericCreate+0x16c>)
  401180:	4798      	blx	r3
  401182:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  401184:	69bb      	ldr	r3, [r7, #24]
  401186:	2b00      	cmp	r3, #0
  401188:	d07d      	beq.n	401286 <xTaskGenericCreate+0x13a>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  40118a:	69bb      	ldr	r3, [r7, #24]
  40118c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40118e:	88f9      	ldrh	r1, [r7, #6]
  401190:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  401194:	440b      	add	r3, r1
  401196:	009b      	lsls	r3, r3, #2
  401198:	4413      	add	r3, r2
  40119a:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  40119c:	697b      	ldr	r3, [r7, #20]
  40119e:	f023 0307 	bic.w	r3, r3, #7
  4011a2:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  4011a4:	697b      	ldr	r3, [r7, #20]
  4011a6:	f003 0307 	and.w	r3, r3, #7
  4011aa:	2b00      	cmp	r3, #0
  4011ac:	d003      	beq.n	4011b6 <xTaskGenericCreate+0x6a>
  4011ae:	4b41      	ldr	r3, [pc, #260]	; (4012b4 <xTaskGenericCreate+0x168>)
  4011b0:	4798      	blx	r3
  4011b2:	bf00      	nop
  4011b4:	e7fd      	b.n	4011b2 <xTaskGenericCreate+0x66>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  4011b6:	88fb      	ldrh	r3, [r7, #6]
  4011b8:	9300      	str	r3, [sp, #0]
  4011ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4011bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4011be:	68b9      	ldr	r1, [r7, #8]
  4011c0:	69b8      	ldr	r0, [r7, #24]
  4011c2:	4c3e      	ldr	r4, [pc, #248]	; (4012bc <xTaskGenericCreate+0x170>)
  4011c4:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4011c6:	683a      	ldr	r2, [r7, #0]
  4011c8:	68f9      	ldr	r1, [r7, #12]
  4011ca:	6978      	ldr	r0, [r7, #20]
  4011cc:	4b3c      	ldr	r3, [pc, #240]	; (4012c0 <xTaskGenericCreate+0x174>)
  4011ce:	4798      	blx	r3
  4011d0:	4602      	mov	r2, r0
  4011d2:	69bb      	ldr	r3, [r7, #24]
  4011d4:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  4011d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4011d8:	2b00      	cmp	r3, #0
  4011da:	d002      	beq.n	4011e2 <xTaskGenericCreate+0x96>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  4011dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  4011de:	69ba      	ldr	r2, [r7, #24]
  4011e0:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  4011e2:	4b38      	ldr	r3, [pc, #224]	; (4012c4 <xTaskGenericCreate+0x178>)
  4011e4:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4011e6:	4b38      	ldr	r3, [pc, #224]	; (4012c8 <xTaskGenericCreate+0x17c>)
  4011e8:	681b      	ldr	r3, [r3, #0]
  4011ea:	3301      	adds	r3, #1
  4011ec:	4a36      	ldr	r2, [pc, #216]	; (4012c8 <xTaskGenericCreate+0x17c>)
  4011ee:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4011f0:	4b36      	ldr	r3, [pc, #216]	; (4012cc <xTaskGenericCreate+0x180>)
  4011f2:	681b      	ldr	r3, [r3, #0]
  4011f4:	2b00      	cmp	r3, #0
  4011f6:	d109      	bne.n	40120c <xTaskGenericCreate+0xc0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4011f8:	4a34      	ldr	r2, [pc, #208]	; (4012cc <xTaskGenericCreate+0x180>)
  4011fa:	69bb      	ldr	r3, [r7, #24]
  4011fc:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4011fe:	4b32      	ldr	r3, [pc, #200]	; (4012c8 <xTaskGenericCreate+0x17c>)
  401200:	681b      	ldr	r3, [r3, #0]
  401202:	2b01      	cmp	r3, #1
  401204:	d10f      	bne.n	401226 <xTaskGenericCreate+0xda>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  401206:	4b32      	ldr	r3, [pc, #200]	; (4012d0 <xTaskGenericCreate+0x184>)
  401208:	4798      	blx	r3
  40120a:	e00c      	b.n	401226 <xTaskGenericCreate+0xda>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40120c:	4b31      	ldr	r3, [pc, #196]	; (4012d4 <xTaskGenericCreate+0x188>)
  40120e:	681b      	ldr	r3, [r3, #0]
  401210:	2b00      	cmp	r3, #0
  401212:	d108      	bne.n	401226 <xTaskGenericCreate+0xda>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401214:	4b2d      	ldr	r3, [pc, #180]	; (4012cc <xTaskGenericCreate+0x180>)
  401216:	681b      	ldr	r3, [r3, #0]
  401218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40121c:	429a      	cmp	r2, r3
  40121e:	d802      	bhi.n	401226 <xTaskGenericCreate+0xda>
					{
						pxCurrentTCB = pxNewTCB;
  401220:	4a2a      	ldr	r2, [pc, #168]	; (4012cc <xTaskGenericCreate+0x180>)
  401222:	69bb      	ldr	r3, [r7, #24]
  401224:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  401226:	69bb      	ldr	r3, [r7, #24]
  401228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40122a:	4b2b      	ldr	r3, [pc, #172]	; (4012d8 <xTaskGenericCreate+0x18c>)
  40122c:	681b      	ldr	r3, [r3, #0]
  40122e:	429a      	cmp	r2, r3
  401230:	d903      	bls.n	40123a <xTaskGenericCreate+0xee>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  401232:	69bb      	ldr	r3, [r7, #24]
  401234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401236:	4a28      	ldr	r2, [pc, #160]	; (4012d8 <xTaskGenericCreate+0x18c>)
  401238:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40123a:	4b28      	ldr	r3, [pc, #160]	; (4012dc <xTaskGenericCreate+0x190>)
  40123c:	681a      	ldr	r2, [r3, #0]
  40123e:	69bb      	ldr	r3, [r7, #24]
  401240:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  401242:	4b26      	ldr	r3, [pc, #152]	; (4012dc <xTaskGenericCreate+0x190>)
  401244:	681b      	ldr	r3, [r3, #0]
  401246:	3301      	adds	r3, #1
  401248:	4a24      	ldr	r2, [pc, #144]	; (4012dc <xTaskGenericCreate+0x190>)
  40124a:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  40124c:	69bb      	ldr	r3, [r7, #24]
  40124e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401250:	4b23      	ldr	r3, [pc, #140]	; (4012e0 <xTaskGenericCreate+0x194>)
  401252:	681b      	ldr	r3, [r3, #0]
  401254:	429a      	cmp	r2, r3
  401256:	d903      	bls.n	401260 <xTaskGenericCreate+0x114>
  401258:	69bb      	ldr	r3, [r7, #24]
  40125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40125c:	4a20      	ldr	r2, [pc, #128]	; (4012e0 <xTaskGenericCreate+0x194>)
  40125e:	6013      	str	r3, [r2, #0]
  401260:	69bb      	ldr	r3, [r7, #24]
  401262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401264:	4613      	mov	r3, r2
  401266:	009b      	lsls	r3, r3, #2
  401268:	4413      	add	r3, r2
  40126a:	009b      	lsls	r3, r3, #2
  40126c:	4a1d      	ldr	r2, [pc, #116]	; (4012e4 <xTaskGenericCreate+0x198>)
  40126e:	441a      	add	r2, r3
  401270:	69bb      	ldr	r3, [r7, #24]
  401272:	3304      	adds	r3, #4
  401274:	4619      	mov	r1, r3
  401276:	4610      	mov	r0, r2
  401278:	4b1b      	ldr	r3, [pc, #108]	; (4012e8 <xTaskGenericCreate+0x19c>)
  40127a:	4798      	blx	r3

			xReturn = pdPASS;
  40127c:	2301      	movs	r3, #1
  40127e:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401280:	4b1a      	ldr	r3, [pc, #104]	; (4012ec <xTaskGenericCreate+0x1a0>)
  401282:	4798      	blx	r3
  401284:	e002      	b.n	40128c <xTaskGenericCreate+0x140>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401286:	f04f 33ff 	mov.w	r3, #4294967295
  40128a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  40128c:	69fb      	ldr	r3, [r7, #28]
  40128e:	2b01      	cmp	r3, #1
  401290:	d10b      	bne.n	4012aa <xTaskGenericCreate+0x15e>
	{
		if( xSchedulerRunning != pdFALSE )
  401292:	4b10      	ldr	r3, [pc, #64]	; (4012d4 <xTaskGenericCreate+0x188>)
  401294:	681b      	ldr	r3, [r3, #0]
  401296:	2b00      	cmp	r3, #0
  401298:	d007      	beq.n	4012aa <xTaskGenericCreate+0x15e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  40129a:	4b0c      	ldr	r3, [pc, #48]	; (4012cc <xTaskGenericCreate+0x180>)
  40129c:	681b      	ldr	r3, [r3, #0]
  40129e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4012a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4012a2:	429a      	cmp	r2, r3
  4012a4:	d201      	bcs.n	4012aa <xTaskGenericCreate+0x15e>
			{
				portYIELD_WITHIN_API();
  4012a6:	4b12      	ldr	r3, [pc, #72]	; (4012f0 <xTaskGenericCreate+0x1a4>)
  4012a8:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  4012aa:	69fb      	ldr	r3, [r7, #28]
}
  4012ac:	4618      	mov	r0, r3
  4012ae:	3724      	adds	r7, #36	; 0x24
  4012b0:	46bd      	mov	sp, r7
  4012b2:	bd90      	pop	{r4, r7, pc}
  4012b4:	0040059d 	.word	0x0040059d
  4012b8:	00401c01 	.word	0x00401c01
  4012bc:	00401a09 	.word	0x00401a09
  4012c0:	00400449 	.word	0x00400449
  4012c4:	00400555 	.word	0x00400555
  4012c8:	2040aaec 	.word	0x2040aaec
  4012cc:	2040aa14 	.word	0x2040aa14
  4012d0:	00401a7d 	.word	0x00401a7d
  4012d4:	2040aafc 	.word	0x2040aafc
  4012d8:	2040aaf4 	.word	0x2040aaf4
  4012dc:	2040ab10 	.word	0x2040ab10
  4012e0:	2040aaf8 	.word	0x2040aaf8
  4012e4:	2040aa18 	.word	0x2040aa18
  4012e8:	0040028b 	.word	0x0040028b
  4012ec:	00400575 	.word	0x00400575
  4012f0:	00400539 	.word	0x00400539

004012f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  4012f4:	b580      	push	{r7, lr}
  4012f6:	b084      	sub	sp, #16
  4012f8:	af00      	add	r7, sp, #0
  4012fa:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  4012fc:	2300      	movs	r3, #0
  4012fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  401300:	687b      	ldr	r3, [r7, #4]
  401302:	2b00      	cmp	r3, #0
  401304:	d012      	beq.n	40132c <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  401306:	4b0e      	ldr	r3, [pc, #56]	; (401340 <vTaskDelay+0x4c>)
  401308:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  40130a:	4b0e      	ldr	r3, [pc, #56]	; (401344 <vTaskDelay+0x50>)
  40130c:	681a      	ldr	r2, [r3, #0]
  40130e:	687b      	ldr	r3, [r7, #4]
  401310:	4413      	add	r3, r2
  401312:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401314:	4b0c      	ldr	r3, [pc, #48]	; (401348 <vTaskDelay+0x54>)
  401316:	681b      	ldr	r3, [r3, #0]
  401318:	3304      	adds	r3, #4
  40131a:	4618      	mov	r0, r3
  40131c:	4b0b      	ldr	r3, [pc, #44]	; (40134c <vTaskDelay+0x58>)
  40131e:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401320:	68b8      	ldr	r0, [r7, #8]
  401322:	4b0b      	ldr	r3, [pc, #44]	; (401350 <vTaskDelay+0x5c>)
  401324:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  401326:	4b0b      	ldr	r3, [pc, #44]	; (401354 <vTaskDelay+0x60>)
  401328:	4798      	blx	r3
  40132a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  40132c:	68fb      	ldr	r3, [r7, #12]
  40132e:	2b00      	cmp	r3, #0
  401330:	d101      	bne.n	401336 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  401332:	4b09      	ldr	r3, [pc, #36]	; (401358 <vTaskDelay+0x64>)
  401334:	4798      	blx	r3
		}
	}
  401336:	bf00      	nop
  401338:	3710      	adds	r7, #16
  40133a:	46bd      	mov	sp, r7
  40133c:	bd80      	pop	{r7, pc}
  40133e:	bf00      	nop
  401340:	004013dd 	.word	0x004013dd
  401344:	2040aaf0 	.word	0x2040aaf0
  401348:	2040aa14 	.word	0x2040aa14
  40134c:	0040034d 	.word	0x0040034d
  401350:	00401b91 	.word	0x00401b91
  401354:	004013f9 	.word	0x004013f9
  401358:	00400539 	.word	0x00400539

0040135c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  40135c:	b590      	push	{r4, r7, lr}
  40135e:	b087      	sub	sp, #28
  401360:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  401362:	2300      	movs	r3, #0
  401364:	9303      	str	r3, [sp, #12]
  401366:	2300      	movs	r3, #0
  401368:	9302      	str	r3, [sp, #8]
  40136a:	2300      	movs	r3, #0
  40136c:	9301      	str	r3, [sp, #4]
  40136e:	2300      	movs	r3, #0
  401370:	9300      	str	r3, [sp, #0]
  401372:	2300      	movs	r3, #0
  401374:	2282      	movs	r2, #130	; 0x82
  401376:	4911      	ldr	r1, [pc, #68]	; (4013bc <vTaskStartScheduler+0x60>)
  401378:	4811      	ldr	r0, [pc, #68]	; (4013c0 <vTaskStartScheduler+0x64>)
  40137a:	4c12      	ldr	r4, [pc, #72]	; (4013c4 <vTaskStartScheduler+0x68>)
  40137c:	47a0      	blx	r4
  40137e:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401380:	687b      	ldr	r3, [r7, #4]
  401382:	2b01      	cmp	r3, #1
  401384:	d102      	bne.n	40138c <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  401386:	4b10      	ldr	r3, [pc, #64]	; (4013c8 <vTaskStartScheduler+0x6c>)
  401388:	4798      	blx	r3
  40138a:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  40138c:	687b      	ldr	r3, [r7, #4]
  40138e:	2b01      	cmp	r3, #1
  401390:	d109      	bne.n	4013a6 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  401392:	4b0e      	ldr	r3, [pc, #56]	; (4013cc <vTaskStartScheduler+0x70>)
  401394:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  401396:	4b0e      	ldr	r3, [pc, #56]	; (4013d0 <vTaskStartScheduler+0x74>)
  401398:	2201      	movs	r2, #1
  40139a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  40139c:	4b0d      	ldr	r3, [pc, #52]	; (4013d4 <vTaskStartScheduler+0x78>)
  40139e:	2200      	movs	r2, #0
  4013a0:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  4013a2:	4b0d      	ldr	r3, [pc, #52]	; (4013d8 <vTaskStartScheduler+0x7c>)
  4013a4:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  4013a6:	687b      	ldr	r3, [r7, #4]
  4013a8:	2b00      	cmp	r3, #0
  4013aa:	d103      	bne.n	4013b4 <vTaskStartScheduler+0x58>
  4013ac:	4b07      	ldr	r3, [pc, #28]	; (4013cc <vTaskStartScheduler+0x70>)
  4013ae:	4798      	blx	r3
  4013b0:	bf00      	nop
  4013b2:	e7fd      	b.n	4013b0 <vTaskStartScheduler+0x54>
}
  4013b4:	bf00      	nop
  4013b6:	370c      	adds	r7, #12
  4013b8:	46bd      	mov	sp, r7
  4013ba:	bd90      	pop	{r4, r7, pc}
  4013bc:	004099e4 	.word	0x004099e4
  4013c0:	004019e1 	.word	0x004019e1
  4013c4:	0040114d 	.word	0x0040114d
  4013c8:	00401e29 	.word	0x00401e29
  4013cc:	0040059d 	.word	0x0040059d
  4013d0:	2040aafc 	.word	0x2040aafc
  4013d4:	2040aaf0 	.word	0x2040aaf0
  4013d8:	004004e1 	.word	0x004004e1

004013dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  4013dc:	b480      	push	{r7}
  4013de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  4013e0:	4b04      	ldr	r3, [pc, #16]	; (4013f4 <vTaskSuspendAll+0x18>)
  4013e2:	681b      	ldr	r3, [r3, #0]
  4013e4:	3301      	adds	r3, #1
  4013e6:	4a03      	ldr	r2, [pc, #12]	; (4013f4 <vTaskSuspendAll+0x18>)
  4013e8:	6013      	str	r3, [r2, #0]
}
  4013ea:	bf00      	nop
  4013ec:	46bd      	mov	sp, r7
  4013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013f2:	4770      	bx	lr
  4013f4:	2040ab00 	.word	0x2040ab00

004013f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  4013f8:	b590      	push	{r4, r7, lr}
  4013fa:	b083      	sub	sp, #12
  4013fc:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  4013fe:	2300      	movs	r3, #0
  401400:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401402:	4b36      	ldr	r3, [pc, #216]	; (4014dc <xTaskResumeAll+0xe4>)
  401404:	681b      	ldr	r3, [r3, #0]
  401406:	2b00      	cmp	r3, #0
  401408:	d103      	bne.n	401412 <xTaskResumeAll+0x1a>
  40140a:	4b35      	ldr	r3, [pc, #212]	; (4014e0 <xTaskResumeAll+0xe8>)
  40140c:	4798      	blx	r3
  40140e:	bf00      	nop
  401410:	e7fd      	b.n	40140e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401412:	4b34      	ldr	r3, [pc, #208]	; (4014e4 <xTaskResumeAll+0xec>)
  401414:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401416:	4b31      	ldr	r3, [pc, #196]	; (4014dc <xTaskResumeAll+0xe4>)
  401418:	681b      	ldr	r3, [r3, #0]
  40141a:	3b01      	subs	r3, #1
  40141c:	4a2f      	ldr	r2, [pc, #188]	; (4014dc <xTaskResumeAll+0xe4>)
  40141e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401420:	4b2e      	ldr	r3, [pc, #184]	; (4014dc <xTaskResumeAll+0xe4>)
  401422:	681b      	ldr	r3, [r3, #0]
  401424:	2b00      	cmp	r3, #0
  401426:	d152      	bne.n	4014ce <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  401428:	4b2f      	ldr	r3, [pc, #188]	; (4014e8 <xTaskResumeAll+0xf0>)
  40142a:	681b      	ldr	r3, [r3, #0]
  40142c:	2b00      	cmp	r3, #0
  40142e:	d04e      	beq.n	4014ce <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  401430:	2300      	movs	r3, #0
  401432:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  401434:	e027      	b.n	401486 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  401436:	4b2d      	ldr	r3, [pc, #180]	; (4014ec <xTaskResumeAll+0xf4>)
  401438:	68db      	ldr	r3, [r3, #12]
  40143a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  40143c:	f104 0318 	add.w	r3, r4, #24
  401440:	4618      	mov	r0, r3
  401442:	4b2b      	ldr	r3, [pc, #172]	; (4014f0 <xTaskResumeAll+0xf8>)
  401444:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401446:	1d23      	adds	r3, r4, #4
  401448:	4618      	mov	r0, r3
  40144a:	4b29      	ldr	r3, [pc, #164]	; (4014f0 <xTaskResumeAll+0xf8>)
  40144c:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  40144e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401450:	4b28      	ldr	r3, [pc, #160]	; (4014f4 <xTaskResumeAll+0xfc>)
  401452:	681b      	ldr	r3, [r3, #0]
  401454:	429a      	cmp	r2, r3
  401456:	d902      	bls.n	40145e <xTaskResumeAll+0x66>
  401458:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40145a:	4a26      	ldr	r2, [pc, #152]	; (4014f4 <xTaskResumeAll+0xfc>)
  40145c:	6013      	str	r3, [r2, #0]
  40145e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401460:	4613      	mov	r3, r2
  401462:	009b      	lsls	r3, r3, #2
  401464:	4413      	add	r3, r2
  401466:	009b      	lsls	r3, r3, #2
  401468:	4a23      	ldr	r2, [pc, #140]	; (4014f8 <xTaskResumeAll+0x100>)
  40146a:	4413      	add	r3, r2
  40146c:	1d22      	adds	r2, r4, #4
  40146e:	4611      	mov	r1, r2
  401470:	4618      	mov	r0, r3
  401472:	4b22      	ldr	r3, [pc, #136]	; (4014fc <xTaskResumeAll+0x104>)
  401474:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401476:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401478:	4b21      	ldr	r3, [pc, #132]	; (401500 <xTaskResumeAll+0x108>)
  40147a:	681b      	ldr	r3, [r3, #0]
  40147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40147e:	429a      	cmp	r2, r3
  401480:	d301      	bcc.n	401486 <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  401482:	2301      	movs	r3, #1
  401484:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  401486:	4b19      	ldr	r3, [pc, #100]	; (4014ec <xTaskResumeAll+0xf4>)
  401488:	681b      	ldr	r3, [r3, #0]
  40148a:	2b00      	cmp	r3, #0
  40148c:	d1d3      	bne.n	401436 <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40148e:	4b1d      	ldr	r3, [pc, #116]	; (401504 <xTaskResumeAll+0x10c>)
  401490:	681b      	ldr	r3, [r3, #0]
  401492:	2b00      	cmp	r3, #0
  401494:	d00d      	beq.n	4014b2 <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401496:	e006      	b.n	4014a6 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  401498:	4b1b      	ldr	r3, [pc, #108]	; (401508 <xTaskResumeAll+0x110>)
  40149a:	4798      	blx	r3
						--uxMissedTicks;
  40149c:	4b19      	ldr	r3, [pc, #100]	; (401504 <xTaskResumeAll+0x10c>)
  40149e:	681b      	ldr	r3, [r3, #0]
  4014a0:	3b01      	subs	r3, #1
  4014a2:	4a18      	ldr	r2, [pc, #96]	; (401504 <xTaskResumeAll+0x10c>)
  4014a4:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4014a6:	4b17      	ldr	r3, [pc, #92]	; (401504 <xTaskResumeAll+0x10c>)
  4014a8:	681b      	ldr	r3, [r3, #0]
  4014aa:	2b00      	cmp	r3, #0
  4014ac:	d1f4      	bne.n	401498 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  4014ae:	2301      	movs	r3, #1
  4014b0:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  4014b2:	683b      	ldr	r3, [r7, #0]
  4014b4:	2b01      	cmp	r3, #1
  4014b6:	d003      	beq.n	4014c0 <xTaskResumeAll+0xc8>
  4014b8:	4b14      	ldr	r3, [pc, #80]	; (40150c <xTaskResumeAll+0x114>)
  4014ba:	681b      	ldr	r3, [r3, #0]
  4014bc:	2b01      	cmp	r3, #1
  4014be:	d106      	bne.n	4014ce <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  4014c0:	2301      	movs	r3, #1
  4014c2:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  4014c4:	4b11      	ldr	r3, [pc, #68]	; (40150c <xTaskResumeAll+0x114>)
  4014c6:	2200      	movs	r2, #0
  4014c8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  4014ca:	4b11      	ldr	r3, [pc, #68]	; (401510 <xTaskResumeAll+0x118>)
  4014cc:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  4014ce:	4b11      	ldr	r3, [pc, #68]	; (401514 <xTaskResumeAll+0x11c>)
  4014d0:	4798      	blx	r3

	return xAlreadyYielded;
  4014d2:	687b      	ldr	r3, [r7, #4]
}
  4014d4:	4618      	mov	r0, r3
  4014d6:	370c      	adds	r7, #12
  4014d8:	46bd      	mov	sp, r7
  4014da:	bd90      	pop	{r4, r7, pc}
  4014dc:	2040ab00 	.word	0x2040ab00
  4014e0:	0040059d 	.word	0x0040059d
  4014e4:	00400555 	.word	0x00400555
  4014e8:	2040aaec 	.word	0x2040aaec
  4014ec:	2040aaac 	.word	0x2040aaac
  4014f0:	0040034d 	.word	0x0040034d
  4014f4:	2040aaf8 	.word	0x2040aaf8
  4014f8:	2040aa18 	.word	0x2040aa18
  4014fc:	0040028b 	.word	0x0040028b
  401500:	2040aa14 	.word	0x2040aa14
  401504:	2040ab04 	.word	0x2040ab04
  401508:	00401545 	.word	0x00401545
  40150c:	2040ab08 	.word	0x2040ab08
  401510:	00400539 	.word	0x00400539
  401514:	00400575 	.word	0x00400575

00401518 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  401518:	b580      	push	{r7, lr}
  40151a:	b082      	sub	sp, #8
  40151c:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  40151e:	4b06      	ldr	r3, [pc, #24]	; (401538 <xTaskGetTickCount+0x20>)
  401520:	4798      	blx	r3
	{
		xTicks = xTickCount;
  401522:	4b06      	ldr	r3, [pc, #24]	; (40153c <xTaskGetTickCount+0x24>)
  401524:	681b      	ldr	r3, [r3, #0]
  401526:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  401528:	4b05      	ldr	r3, [pc, #20]	; (401540 <xTaskGetTickCount+0x28>)
  40152a:	4798      	blx	r3

	return xTicks;
  40152c:	687b      	ldr	r3, [r7, #4]
}
  40152e:	4618      	mov	r0, r3
  401530:	3708      	adds	r7, #8
  401532:	46bd      	mov	sp, r7
  401534:	bd80      	pop	{r7, pc}
  401536:	bf00      	nop
  401538:	00400555 	.word	0x00400555
  40153c:	2040aaf0 	.word	0x2040aaf0
  401540:	00400575 	.word	0x00400575

00401544 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  401544:	b580      	push	{r7, lr}
  401546:	b084      	sub	sp, #16
  401548:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40154a:	4b45      	ldr	r3, [pc, #276]	; (401660 <vTaskIncrementTick+0x11c>)
  40154c:	681b      	ldr	r3, [r3, #0]
  40154e:	2b00      	cmp	r3, #0
  401550:	d17b      	bne.n	40164a <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  401552:	4b44      	ldr	r3, [pc, #272]	; (401664 <vTaskIncrementTick+0x120>)
  401554:	681b      	ldr	r3, [r3, #0]
  401556:	3301      	adds	r3, #1
  401558:	4a42      	ldr	r2, [pc, #264]	; (401664 <vTaskIncrementTick+0x120>)
  40155a:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  40155c:	4b41      	ldr	r3, [pc, #260]	; (401664 <vTaskIncrementTick+0x120>)
  40155e:	681b      	ldr	r3, [r3, #0]
  401560:	2b00      	cmp	r3, #0
  401562:	d12a      	bne.n	4015ba <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  401564:	4b40      	ldr	r3, [pc, #256]	; (401668 <vTaskIncrementTick+0x124>)
  401566:	681b      	ldr	r3, [r3, #0]
  401568:	681b      	ldr	r3, [r3, #0]
  40156a:	2b00      	cmp	r3, #0
  40156c:	d003      	beq.n	401576 <vTaskIncrementTick+0x32>
  40156e:	4b3f      	ldr	r3, [pc, #252]	; (40166c <vTaskIncrementTick+0x128>)
  401570:	4798      	blx	r3
  401572:	bf00      	nop
  401574:	e7fd      	b.n	401572 <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  401576:	4b3c      	ldr	r3, [pc, #240]	; (401668 <vTaskIncrementTick+0x124>)
  401578:	681b      	ldr	r3, [r3, #0]
  40157a:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  40157c:	4b3c      	ldr	r3, [pc, #240]	; (401670 <vTaskIncrementTick+0x12c>)
  40157e:	681b      	ldr	r3, [r3, #0]
  401580:	4a39      	ldr	r2, [pc, #228]	; (401668 <vTaskIncrementTick+0x124>)
  401582:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  401584:	4a3a      	ldr	r2, [pc, #232]	; (401670 <vTaskIncrementTick+0x12c>)
  401586:	68fb      	ldr	r3, [r7, #12]
  401588:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  40158a:	4b3a      	ldr	r3, [pc, #232]	; (401674 <vTaskIncrementTick+0x130>)
  40158c:	681b      	ldr	r3, [r3, #0]
  40158e:	3301      	adds	r3, #1
  401590:	4a38      	ldr	r2, [pc, #224]	; (401674 <vTaskIncrementTick+0x130>)
  401592:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401594:	4b34      	ldr	r3, [pc, #208]	; (401668 <vTaskIncrementTick+0x124>)
  401596:	681b      	ldr	r3, [r3, #0]
  401598:	681b      	ldr	r3, [r3, #0]
  40159a:	2b00      	cmp	r3, #0
  40159c:	d104      	bne.n	4015a8 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  40159e:	4b36      	ldr	r3, [pc, #216]	; (401678 <vTaskIncrementTick+0x134>)
  4015a0:	f04f 32ff 	mov.w	r2, #4294967295
  4015a4:	601a      	str	r2, [r3, #0]
  4015a6:	e008      	b.n	4015ba <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4015a8:	4b2f      	ldr	r3, [pc, #188]	; (401668 <vTaskIncrementTick+0x124>)
  4015aa:	681b      	ldr	r3, [r3, #0]
  4015ac:	68db      	ldr	r3, [r3, #12]
  4015ae:	68db      	ldr	r3, [r3, #12]
  4015b0:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4015b2:	68bb      	ldr	r3, [r7, #8]
  4015b4:	685b      	ldr	r3, [r3, #4]
  4015b6:	4a30      	ldr	r2, [pc, #192]	; (401678 <vTaskIncrementTick+0x134>)
  4015b8:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  4015ba:	4b2a      	ldr	r3, [pc, #168]	; (401664 <vTaskIncrementTick+0x120>)
  4015bc:	681a      	ldr	r2, [r3, #0]
  4015be:	4b2e      	ldr	r3, [pc, #184]	; (401678 <vTaskIncrementTick+0x134>)
  4015c0:	681b      	ldr	r3, [r3, #0]
  4015c2:	429a      	cmp	r2, r3
  4015c4:	d347      	bcc.n	401656 <vTaskIncrementTick+0x112>
  4015c6:	4b28      	ldr	r3, [pc, #160]	; (401668 <vTaskIncrementTick+0x124>)
  4015c8:	681b      	ldr	r3, [r3, #0]
  4015ca:	681b      	ldr	r3, [r3, #0]
  4015cc:	2b00      	cmp	r3, #0
  4015ce:	d104      	bne.n	4015da <vTaskIncrementTick+0x96>
  4015d0:	4b29      	ldr	r3, [pc, #164]	; (401678 <vTaskIncrementTick+0x134>)
  4015d2:	f04f 32ff 	mov.w	r2, #4294967295
  4015d6:	601a      	str	r2, [r3, #0]
  4015d8:	e03d      	b.n	401656 <vTaskIncrementTick+0x112>
  4015da:	4b23      	ldr	r3, [pc, #140]	; (401668 <vTaskIncrementTick+0x124>)
  4015dc:	681b      	ldr	r3, [r3, #0]
  4015de:	68db      	ldr	r3, [r3, #12]
  4015e0:	68db      	ldr	r3, [r3, #12]
  4015e2:	60bb      	str	r3, [r7, #8]
  4015e4:	68bb      	ldr	r3, [r7, #8]
  4015e6:	685b      	ldr	r3, [r3, #4]
  4015e8:	607b      	str	r3, [r7, #4]
  4015ea:	4b1e      	ldr	r3, [pc, #120]	; (401664 <vTaskIncrementTick+0x120>)
  4015ec:	681a      	ldr	r2, [r3, #0]
  4015ee:	687b      	ldr	r3, [r7, #4]
  4015f0:	429a      	cmp	r2, r3
  4015f2:	d203      	bcs.n	4015fc <vTaskIncrementTick+0xb8>
  4015f4:	4a20      	ldr	r2, [pc, #128]	; (401678 <vTaskIncrementTick+0x134>)
  4015f6:	687b      	ldr	r3, [r7, #4]
  4015f8:	6013      	str	r3, [r2, #0]
  4015fa:	e02c      	b.n	401656 <vTaskIncrementTick+0x112>
  4015fc:	68bb      	ldr	r3, [r7, #8]
  4015fe:	3304      	adds	r3, #4
  401600:	4618      	mov	r0, r3
  401602:	4b1e      	ldr	r3, [pc, #120]	; (40167c <vTaskIncrementTick+0x138>)
  401604:	4798      	blx	r3
  401606:	68bb      	ldr	r3, [r7, #8]
  401608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40160a:	2b00      	cmp	r3, #0
  40160c:	d004      	beq.n	401618 <vTaskIncrementTick+0xd4>
  40160e:	68bb      	ldr	r3, [r7, #8]
  401610:	3318      	adds	r3, #24
  401612:	4618      	mov	r0, r3
  401614:	4b19      	ldr	r3, [pc, #100]	; (40167c <vTaskIncrementTick+0x138>)
  401616:	4798      	blx	r3
  401618:	68bb      	ldr	r3, [r7, #8]
  40161a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40161c:	4b18      	ldr	r3, [pc, #96]	; (401680 <vTaskIncrementTick+0x13c>)
  40161e:	681b      	ldr	r3, [r3, #0]
  401620:	429a      	cmp	r2, r3
  401622:	d903      	bls.n	40162c <vTaskIncrementTick+0xe8>
  401624:	68bb      	ldr	r3, [r7, #8]
  401626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401628:	4a15      	ldr	r2, [pc, #84]	; (401680 <vTaskIncrementTick+0x13c>)
  40162a:	6013      	str	r3, [r2, #0]
  40162c:	68bb      	ldr	r3, [r7, #8]
  40162e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401630:	4613      	mov	r3, r2
  401632:	009b      	lsls	r3, r3, #2
  401634:	4413      	add	r3, r2
  401636:	009b      	lsls	r3, r3, #2
  401638:	4a12      	ldr	r2, [pc, #72]	; (401684 <vTaskIncrementTick+0x140>)
  40163a:	441a      	add	r2, r3
  40163c:	68bb      	ldr	r3, [r7, #8]
  40163e:	3304      	adds	r3, #4
  401640:	4619      	mov	r1, r3
  401642:	4610      	mov	r0, r2
  401644:	4b10      	ldr	r3, [pc, #64]	; (401688 <vTaskIncrementTick+0x144>)
  401646:	4798      	blx	r3
  401648:	e7bd      	b.n	4015c6 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  40164a:	4b10      	ldr	r3, [pc, #64]	; (40168c <vTaskIncrementTick+0x148>)
  40164c:	681b      	ldr	r3, [r3, #0]
  40164e:	3301      	adds	r3, #1
  401650:	4a0e      	ldr	r2, [pc, #56]	; (40168c <vTaskIncrementTick+0x148>)
  401652:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  401654:	e7ff      	b.n	401656 <vTaskIncrementTick+0x112>
  401656:	bf00      	nop
  401658:	3710      	adds	r7, #16
  40165a:	46bd      	mov	sp, r7
  40165c:	bd80      	pop	{r7, pc}
  40165e:	bf00      	nop
  401660:	2040ab00 	.word	0x2040ab00
  401664:	2040aaf0 	.word	0x2040aaf0
  401668:	2040aaa4 	.word	0x2040aaa4
  40166c:	0040059d 	.word	0x0040059d
  401670:	2040aaa8 	.word	0x2040aaa8
  401674:	2040ab0c 	.word	0x2040ab0c
  401678:	20400008 	.word	0x20400008
  40167c:	0040034d 	.word	0x0040034d
  401680:	2040aaf8 	.word	0x2040aaf8
  401684:	2040aa18 	.word	0x2040aa18
  401688:	0040028b 	.word	0x0040028b
  40168c:	2040ab04 	.word	0x2040ab04

00401690 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401690:	b580      	push	{r7, lr}
  401692:	b082      	sub	sp, #8
  401694:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  401696:	4b21      	ldr	r3, [pc, #132]	; (40171c <vTaskSwitchContext+0x8c>)
  401698:	681b      	ldr	r3, [r3, #0]
  40169a:	2b00      	cmp	r3, #0
  40169c:	d010      	beq.n	4016c0 <vTaskSwitchContext+0x30>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  40169e:	4b20      	ldr	r3, [pc, #128]	; (401720 <vTaskSwitchContext+0x90>)
  4016a0:	2201      	movs	r2, #1
  4016a2:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  4016a4:	e035      	b.n	401712 <vTaskSwitchContext+0x82>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4016a6:	4b1f      	ldr	r3, [pc, #124]	; (401724 <vTaskSwitchContext+0x94>)
  4016a8:	681b      	ldr	r3, [r3, #0]
  4016aa:	2b00      	cmp	r3, #0
  4016ac:	d103      	bne.n	4016b6 <vTaskSwitchContext+0x26>
  4016ae:	4b1e      	ldr	r3, [pc, #120]	; (401728 <vTaskSwitchContext+0x98>)
  4016b0:	4798      	blx	r3
  4016b2:	bf00      	nop
  4016b4:	e7fd      	b.n	4016b2 <vTaskSwitchContext+0x22>
  4016b6:	4b1b      	ldr	r3, [pc, #108]	; (401724 <vTaskSwitchContext+0x94>)
  4016b8:	681b      	ldr	r3, [r3, #0]
  4016ba:	3b01      	subs	r3, #1
  4016bc:	4a19      	ldr	r2, [pc, #100]	; (401724 <vTaskSwitchContext+0x94>)
  4016be:	6013      	str	r3, [r2, #0]
  4016c0:	4b18      	ldr	r3, [pc, #96]	; (401724 <vTaskSwitchContext+0x94>)
  4016c2:	681a      	ldr	r2, [r3, #0]
  4016c4:	4919      	ldr	r1, [pc, #100]	; (40172c <vTaskSwitchContext+0x9c>)
  4016c6:	4613      	mov	r3, r2
  4016c8:	009b      	lsls	r3, r3, #2
  4016ca:	4413      	add	r3, r2
  4016cc:	009b      	lsls	r3, r3, #2
  4016ce:	440b      	add	r3, r1
  4016d0:	681b      	ldr	r3, [r3, #0]
  4016d2:	2b00      	cmp	r3, #0
  4016d4:	d0e7      	beq.n	4016a6 <vTaskSwitchContext+0x16>
  4016d6:	4b13      	ldr	r3, [pc, #76]	; (401724 <vTaskSwitchContext+0x94>)
  4016d8:	681a      	ldr	r2, [r3, #0]
  4016da:	4613      	mov	r3, r2
  4016dc:	009b      	lsls	r3, r3, #2
  4016de:	4413      	add	r3, r2
  4016e0:	009b      	lsls	r3, r3, #2
  4016e2:	4a12      	ldr	r2, [pc, #72]	; (40172c <vTaskSwitchContext+0x9c>)
  4016e4:	4413      	add	r3, r2
  4016e6:	607b      	str	r3, [r7, #4]
  4016e8:	687b      	ldr	r3, [r7, #4]
  4016ea:	685b      	ldr	r3, [r3, #4]
  4016ec:	685a      	ldr	r2, [r3, #4]
  4016ee:	687b      	ldr	r3, [r7, #4]
  4016f0:	605a      	str	r2, [r3, #4]
  4016f2:	687b      	ldr	r3, [r7, #4]
  4016f4:	685a      	ldr	r2, [r3, #4]
  4016f6:	687b      	ldr	r3, [r7, #4]
  4016f8:	3308      	adds	r3, #8
  4016fa:	429a      	cmp	r2, r3
  4016fc:	d104      	bne.n	401708 <vTaskSwitchContext+0x78>
  4016fe:	687b      	ldr	r3, [r7, #4]
  401700:	685b      	ldr	r3, [r3, #4]
  401702:	685a      	ldr	r2, [r3, #4]
  401704:	687b      	ldr	r3, [r7, #4]
  401706:	605a      	str	r2, [r3, #4]
  401708:	687b      	ldr	r3, [r7, #4]
  40170a:	685b      	ldr	r3, [r3, #4]
  40170c:	68db      	ldr	r3, [r3, #12]
  40170e:	4a08      	ldr	r2, [pc, #32]	; (401730 <vTaskSwitchContext+0xa0>)
  401710:	6013      	str	r3, [r2, #0]
}
  401712:	bf00      	nop
  401714:	3708      	adds	r7, #8
  401716:	46bd      	mov	sp, r7
  401718:	bd80      	pop	{r7, pc}
  40171a:	bf00      	nop
  40171c:	2040ab00 	.word	0x2040ab00
  401720:	2040ab08 	.word	0x2040ab08
  401724:	2040aaf8 	.word	0x2040aaf8
  401728:	0040059d 	.word	0x0040059d
  40172c:	2040aa18 	.word	0x2040aa18
  401730:	2040aa14 	.word	0x2040aa14

00401734 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  401734:	b580      	push	{r7, lr}
  401736:	b084      	sub	sp, #16
  401738:	af00      	add	r7, sp, #0
  40173a:	6078      	str	r0, [r7, #4]
  40173c:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  40173e:	687b      	ldr	r3, [r7, #4]
  401740:	2b00      	cmp	r3, #0
  401742:	d103      	bne.n	40174c <vTaskPlaceOnEventList+0x18>
  401744:	4b14      	ldr	r3, [pc, #80]	; (401798 <vTaskPlaceOnEventList+0x64>)
  401746:	4798      	blx	r3
  401748:	bf00      	nop
  40174a:	e7fd      	b.n	401748 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  40174c:	4b13      	ldr	r3, [pc, #76]	; (40179c <vTaskPlaceOnEventList+0x68>)
  40174e:	681b      	ldr	r3, [r3, #0]
  401750:	3318      	adds	r3, #24
  401752:	4619      	mov	r1, r3
  401754:	6878      	ldr	r0, [r7, #4]
  401756:	4b12      	ldr	r3, [pc, #72]	; (4017a0 <vTaskPlaceOnEventList+0x6c>)
  401758:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  40175a:	4b10      	ldr	r3, [pc, #64]	; (40179c <vTaskPlaceOnEventList+0x68>)
  40175c:	681b      	ldr	r3, [r3, #0]
  40175e:	3304      	adds	r3, #4
  401760:	4618      	mov	r0, r3
  401762:	4b10      	ldr	r3, [pc, #64]	; (4017a4 <vTaskPlaceOnEventList+0x70>)
  401764:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401766:	683b      	ldr	r3, [r7, #0]
  401768:	f1b3 3fff 	cmp.w	r3, #4294967295
  40176c:	d107      	bne.n	40177e <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40176e:	4b0b      	ldr	r3, [pc, #44]	; (40179c <vTaskPlaceOnEventList+0x68>)
  401770:	681b      	ldr	r3, [r3, #0]
  401772:	3304      	adds	r3, #4
  401774:	4619      	mov	r1, r3
  401776:	480c      	ldr	r0, [pc, #48]	; (4017a8 <vTaskPlaceOnEventList+0x74>)
  401778:	4b0c      	ldr	r3, [pc, #48]	; (4017ac <vTaskPlaceOnEventList+0x78>)
  40177a:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  40177c:	e007      	b.n	40178e <vTaskPlaceOnEventList+0x5a>
			xTimeToWake = xTickCount + xTicksToWait;
  40177e:	4b0c      	ldr	r3, [pc, #48]	; (4017b0 <vTaskPlaceOnEventList+0x7c>)
  401780:	681a      	ldr	r2, [r3, #0]
  401782:	683b      	ldr	r3, [r7, #0]
  401784:	4413      	add	r3, r2
  401786:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401788:	68f8      	ldr	r0, [r7, #12]
  40178a:	4b0a      	ldr	r3, [pc, #40]	; (4017b4 <vTaskPlaceOnEventList+0x80>)
  40178c:	4798      	blx	r3
}
  40178e:	bf00      	nop
  401790:	3710      	adds	r7, #16
  401792:	46bd      	mov	sp, r7
  401794:	bd80      	pop	{r7, pc}
  401796:	bf00      	nop
  401798:	0040059d 	.word	0x0040059d
  40179c:	2040aa14 	.word	0x2040aa14
  4017a0:	004002db 	.word	0x004002db
  4017a4:	0040034d 	.word	0x0040034d
  4017a8:	2040aad8 	.word	0x2040aad8
  4017ac:	0040028b 	.word	0x0040028b
  4017b0:	2040aaf0 	.word	0x2040aaf0
  4017b4:	00401b91 	.word	0x00401b91

004017b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  4017b8:	b580      	push	{r7, lr}
  4017ba:	b084      	sub	sp, #16
  4017bc:	af00      	add	r7, sp, #0
  4017be:	6078      	str	r0, [r7, #4]
  4017c0:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  4017c2:	687b      	ldr	r3, [r7, #4]
  4017c4:	2b00      	cmp	r3, #0
  4017c6:	d103      	bne.n	4017d0 <vTaskPlaceOnEventListRestricted+0x18>
  4017c8:	4b0e      	ldr	r3, [pc, #56]	; (401804 <vTaskPlaceOnEventListRestricted+0x4c>)
  4017ca:	4798      	blx	r3
  4017cc:	bf00      	nop
  4017ce:	e7fd      	b.n	4017cc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4017d0:	4b0d      	ldr	r3, [pc, #52]	; (401808 <vTaskPlaceOnEventListRestricted+0x50>)
  4017d2:	681b      	ldr	r3, [r3, #0]
  4017d4:	3318      	adds	r3, #24
  4017d6:	4619      	mov	r1, r3
  4017d8:	6878      	ldr	r0, [r7, #4]
  4017da:	4b0c      	ldr	r3, [pc, #48]	; (40180c <vTaskPlaceOnEventListRestricted+0x54>)
  4017dc:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4017de:	4b0a      	ldr	r3, [pc, #40]	; (401808 <vTaskPlaceOnEventListRestricted+0x50>)
  4017e0:	681b      	ldr	r3, [r3, #0]
  4017e2:	3304      	adds	r3, #4
  4017e4:	4618      	mov	r0, r3
  4017e6:	4b0a      	ldr	r3, [pc, #40]	; (401810 <vTaskPlaceOnEventListRestricted+0x58>)
  4017e8:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  4017ea:	4b0a      	ldr	r3, [pc, #40]	; (401814 <vTaskPlaceOnEventListRestricted+0x5c>)
  4017ec:	681a      	ldr	r2, [r3, #0]
  4017ee:	683b      	ldr	r3, [r7, #0]
  4017f0:	4413      	add	r3, r2
  4017f2:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  4017f4:	68f8      	ldr	r0, [r7, #12]
  4017f6:	4b08      	ldr	r3, [pc, #32]	; (401818 <vTaskPlaceOnEventListRestricted+0x60>)
  4017f8:	4798      	blx	r3
	}
  4017fa:	bf00      	nop
  4017fc:	3710      	adds	r7, #16
  4017fe:	46bd      	mov	sp, r7
  401800:	bd80      	pop	{r7, pc}
  401802:	bf00      	nop
  401804:	0040059d 	.word	0x0040059d
  401808:	2040aa14 	.word	0x2040aa14
  40180c:	0040028b 	.word	0x0040028b
  401810:	0040034d 	.word	0x0040034d
  401814:	2040aaf0 	.word	0x2040aaf0
  401818:	00401b91 	.word	0x00401b91

0040181c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  40181c:	b580      	push	{r7, lr}
  40181e:	b084      	sub	sp, #16
  401820:	af00      	add	r7, sp, #0
  401822:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401824:	687b      	ldr	r3, [r7, #4]
  401826:	68db      	ldr	r3, [r3, #12]
  401828:	68db      	ldr	r3, [r3, #12]
  40182a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  40182c:	68bb      	ldr	r3, [r7, #8]
  40182e:	2b00      	cmp	r3, #0
  401830:	d103      	bne.n	40183a <xTaskRemoveFromEventList+0x1e>
  401832:	4b21      	ldr	r3, [pc, #132]	; (4018b8 <xTaskRemoveFromEventList+0x9c>)
  401834:	4798      	blx	r3
  401836:	bf00      	nop
  401838:	e7fd      	b.n	401836 <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40183a:	68bb      	ldr	r3, [r7, #8]
  40183c:	3318      	adds	r3, #24
  40183e:	4618      	mov	r0, r3
  401840:	4b1e      	ldr	r3, [pc, #120]	; (4018bc <xTaskRemoveFromEventList+0xa0>)
  401842:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401844:	4b1e      	ldr	r3, [pc, #120]	; (4018c0 <xTaskRemoveFromEventList+0xa4>)
  401846:	681b      	ldr	r3, [r3, #0]
  401848:	2b00      	cmp	r3, #0
  40184a:	d11d      	bne.n	401888 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40184c:	68bb      	ldr	r3, [r7, #8]
  40184e:	3304      	adds	r3, #4
  401850:	4618      	mov	r0, r3
  401852:	4b1a      	ldr	r3, [pc, #104]	; (4018bc <xTaskRemoveFromEventList+0xa0>)
  401854:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  401856:	68bb      	ldr	r3, [r7, #8]
  401858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40185a:	4b1a      	ldr	r3, [pc, #104]	; (4018c4 <xTaskRemoveFromEventList+0xa8>)
  40185c:	681b      	ldr	r3, [r3, #0]
  40185e:	429a      	cmp	r2, r3
  401860:	d903      	bls.n	40186a <xTaskRemoveFromEventList+0x4e>
  401862:	68bb      	ldr	r3, [r7, #8]
  401864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401866:	4a17      	ldr	r2, [pc, #92]	; (4018c4 <xTaskRemoveFromEventList+0xa8>)
  401868:	6013      	str	r3, [r2, #0]
  40186a:	68bb      	ldr	r3, [r7, #8]
  40186c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40186e:	4613      	mov	r3, r2
  401870:	009b      	lsls	r3, r3, #2
  401872:	4413      	add	r3, r2
  401874:	009b      	lsls	r3, r3, #2
  401876:	4a14      	ldr	r2, [pc, #80]	; (4018c8 <xTaskRemoveFromEventList+0xac>)
  401878:	441a      	add	r2, r3
  40187a:	68bb      	ldr	r3, [r7, #8]
  40187c:	3304      	adds	r3, #4
  40187e:	4619      	mov	r1, r3
  401880:	4610      	mov	r0, r2
  401882:	4b12      	ldr	r3, [pc, #72]	; (4018cc <xTaskRemoveFromEventList+0xb0>)
  401884:	4798      	blx	r3
  401886:	e005      	b.n	401894 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401888:	68bb      	ldr	r3, [r7, #8]
  40188a:	3318      	adds	r3, #24
  40188c:	4619      	mov	r1, r3
  40188e:	4810      	ldr	r0, [pc, #64]	; (4018d0 <xTaskRemoveFromEventList+0xb4>)
  401890:	4b0e      	ldr	r3, [pc, #56]	; (4018cc <xTaskRemoveFromEventList+0xb0>)
  401892:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401894:	68bb      	ldr	r3, [r7, #8]
  401896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401898:	4b0e      	ldr	r3, [pc, #56]	; (4018d4 <xTaskRemoveFromEventList+0xb8>)
  40189a:	681b      	ldr	r3, [r3, #0]
  40189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40189e:	429a      	cmp	r2, r3
  4018a0:	d302      	bcc.n	4018a8 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  4018a2:	2301      	movs	r3, #1
  4018a4:	60fb      	str	r3, [r7, #12]
  4018a6:	e001      	b.n	4018ac <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  4018a8:	2300      	movs	r3, #0
  4018aa:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  4018ac:	68fb      	ldr	r3, [r7, #12]
}
  4018ae:	4618      	mov	r0, r3
  4018b0:	3710      	adds	r7, #16
  4018b2:	46bd      	mov	sp, r7
  4018b4:	bd80      	pop	{r7, pc}
  4018b6:	bf00      	nop
  4018b8:	0040059d 	.word	0x0040059d
  4018bc:	0040034d 	.word	0x0040034d
  4018c0:	2040ab00 	.word	0x2040ab00
  4018c4:	2040aaf8 	.word	0x2040aaf8
  4018c8:	2040aa18 	.word	0x2040aa18
  4018cc:	0040028b 	.word	0x0040028b
  4018d0:	2040aaac 	.word	0x2040aaac
  4018d4:	2040aa14 	.word	0x2040aa14

004018d8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  4018d8:	b580      	push	{r7, lr}
  4018da:	b082      	sub	sp, #8
  4018dc:	af00      	add	r7, sp, #0
  4018de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  4018e0:	687b      	ldr	r3, [r7, #4]
  4018e2:	2b00      	cmp	r3, #0
  4018e4:	d103      	bne.n	4018ee <vTaskSetTimeOutState+0x16>
  4018e6:	4b08      	ldr	r3, [pc, #32]	; (401908 <vTaskSetTimeOutState+0x30>)
  4018e8:	4798      	blx	r3
  4018ea:	bf00      	nop
  4018ec:	e7fd      	b.n	4018ea <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4018ee:	4b07      	ldr	r3, [pc, #28]	; (40190c <vTaskSetTimeOutState+0x34>)
  4018f0:	681a      	ldr	r2, [r3, #0]
  4018f2:	687b      	ldr	r3, [r7, #4]
  4018f4:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4018f6:	4b06      	ldr	r3, [pc, #24]	; (401910 <vTaskSetTimeOutState+0x38>)
  4018f8:	681a      	ldr	r2, [r3, #0]
  4018fa:	687b      	ldr	r3, [r7, #4]
  4018fc:	605a      	str	r2, [r3, #4]
}
  4018fe:	bf00      	nop
  401900:	3708      	adds	r7, #8
  401902:	46bd      	mov	sp, r7
  401904:	bd80      	pop	{r7, pc}
  401906:	bf00      	nop
  401908:	0040059d 	.word	0x0040059d
  40190c:	2040ab0c 	.word	0x2040ab0c
  401910:	2040aaf0 	.word	0x2040aaf0

00401914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  401914:	b580      	push	{r7, lr}
  401916:	b084      	sub	sp, #16
  401918:	af00      	add	r7, sp, #0
  40191a:	6078      	str	r0, [r7, #4]
  40191c:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  40191e:	687b      	ldr	r3, [r7, #4]
  401920:	2b00      	cmp	r3, #0
  401922:	d103      	bne.n	40192c <xTaskCheckForTimeOut+0x18>
  401924:	4b22      	ldr	r3, [pc, #136]	; (4019b0 <xTaskCheckForTimeOut+0x9c>)
  401926:	4798      	blx	r3
  401928:	bf00      	nop
  40192a:	e7fd      	b.n	401928 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  40192c:	683b      	ldr	r3, [r7, #0]
  40192e:	2b00      	cmp	r3, #0
  401930:	d103      	bne.n	40193a <xTaskCheckForTimeOut+0x26>
  401932:	4b1f      	ldr	r3, [pc, #124]	; (4019b0 <xTaskCheckForTimeOut+0x9c>)
  401934:	4798      	blx	r3
  401936:	bf00      	nop
  401938:	e7fd      	b.n	401936 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  40193a:	4b1e      	ldr	r3, [pc, #120]	; (4019b4 <xTaskCheckForTimeOut+0xa0>)
  40193c:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  40193e:	683b      	ldr	r3, [r7, #0]
  401940:	681b      	ldr	r3, [r3, #0]
  401942:	f1b3 3fff 	cmp.w	r3, #4294967295
  401946:	d102      	bne.n	40194e <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  401948:	2300      	movs	r3, #0
  40194a:	60fb      	str	r3, [r7, #12]
  40194c:	e029      	b.n	4019a2 <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  40194e:	687b      	ldr	r3, [r7, #4]
  401950:	681a      	ldr	r2, [r3, #0]
  401952:	4b19      	ldr	r3, [pc, #100]	; (4019b8 <xTaskCheckForTimeOut+0xa4>)
  401954:	681b      	ldr	r3, [r3, #0]
  401956:	429a      	cmp	r2, r3
  401958:	d008      	beq.n	40196c <xTaskCheckForTimeOut+0x58>
  40195a:	687b      	ldr	r3, [r7, #4]
  40195c:	685a      	ldr	r2, [r3, #4]
  40195e:	4b17      	ldr	r3, [pc, #92]	; (4019bc <xTaskCheckForTimeOut+0xa8>)
  401960:	681b      	ldr	r3, [r3, #0]
  401962:	429a      	cmp	r2, r3
  401964:	d802      	bhi.n	40196c <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401966:	2301      	movs	r3, #1
  401968:	60fb      	str	r3, [r7, #12]
  40196a:	e01a      	b.n	4019a2 <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  40196c:	4b13      	ldr	r3, [pc, #76]	; (4019bc <xTaskCheckForTimeOut+0xa8>)
  40196e:	681a      	ldr	r2, [r3, #0]
  401970:	687b      	ldr	r3, [r7, #4]
  401972:	685b      	ldr	r3, [r3, #4]
  401974:	1ad2      	subs	r2, r2, r3
  401976:	683b      	ldr	r3, [r7, #0]
  401978:	681b      	ldr	r3, [r3, #0]
  40197a:	429a      	cmp	r2, r3
  40197c:	d20f      	bcs.n	40199e <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  40197e:	4b0f      	ldr	r3, [pc, #60]	; (4019bc <xTaskCheckForTimeOut+0xa8>)
  401980:	681a      	ldr	r2, [r3, #0]
  401982:	687b      	ldr	r3, [r7, #4]
  401984:	685b      	ldr	r3, [r3, #4]
  401986:	1ad3      	subs	r3, r2, r3
  401988:	683a      	ldr	r2, [r7, #0]
  40198a:	6812      	ldr	r2, [r2, #0]
  40198c:	1ad2      	subs	r2, r2, r3
  40198e:	683b      	ldr	r3, [r7, #0]
  401990:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401992:	6878      	ldr	r0, [r7, #4]
  401994:	4b0a      	ldr	r3, [pc, #40]	; (4019c0 <xTaskCheckForTimeOut+0xac>)
  401996:	4798      	blx	r3
			xReturn = pdFALSE;
  401998:	2300      	movs	r3, #0
  40199a:	60fb      	str	r3, [r7, #12]
  40199c:	e001      	b.n	4019a2 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  40199e:	2301      	movs	r3, #1
  4019a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  4019a2:	4b08      	ldr	r3, [pc, #32]	; (4019c4 <xTaskCheckForTimeOut+0xb0>)
  4019a4:	4798      	blx	r3

	return xReturn;
  4019a6:	68fb      	ldr	r3, [r7, #12]
}
  4019a8:	4618      	mov	r0, r3
  4019aa:	3710      	adds	r7, #16
  4019ac:	46bd      	mov	sp, r7
  4019ae:	bd80      	pop	{r7, pc}
  4019b0:	0040059d 	.word	0x0040059d
  4019b4:	00400555 	.word	0x00400555
  4019b8:	2040ab0c 	.word	0x2040ab0c
  4019bc:	2040aaf0 	.word	0x2040aaf0
  4019c0:	004018d9 	.word	0x004018d9
  4019c4:	00400575 	.word	0x00400575

004019c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  4019c8:	b480      	push	{r7}
  4019ca:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  4019cc:	4b03      	ldr	r3, [pc, #12]	; (4019dc <vTaskMissedYield+0x14>)
  4019ce:	2201      	movs	r2, #1
  4019d0:	601a      	str	r2, [r3, #0]
}
  4019d2:	bf00      	nop
  4019d4:	46bd      	mov	sp, r7
  4019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019da:	4770      	bx	lr
  4019dc:	2040ab08 	.word	0x2040ab08

004019e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  4019e0:	b580      	push	{r7, lr}
  4019e2:	b082      	sub	sp, #8
  4019e4:	af00      	add	r7, sp, #0
  4019e6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  4019e8:	4b04      	ldr	r3, [pc, #16]	; (4019fc <prvIdleTask+0x1c>)
  4019ea:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  4019ec:	4b04      	ldr	r3, [pc, #16]	; (401a00 <prvIdleTask+0x20>)
  4019ee:	681b      	ldr	r3, [r3, #0]
  4019f0:	2b01      	cmp	r3, #1
  4019f2:	d9f9      	bls.n	4019e8 <prvIdleTask+0x8>
			{
				taskYIELD();
  4019f4:	4b03      	ldr	r3, [pc, #12]	; (401a04 <prvIdleTask+0x24>)
  4019f6:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
  4019f8:	e7f6      	b.n	4019e8 <prvIdleTask+0x8>
  4019fa:	bf00      	nop
  4019fc:	00401b01 	.word	0x00401b01
  401a00:	2040aa18 	.word	0x2040aa18
  401a04:	00400539 	.word	0x00400539

00401a08 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  401a08:	b580      	push	{r7, lr}
  401a0a:	b084      	sub	sp, #16
  401a0c:	af00      	add	r7, sp, #0
  401a0e:	60f8      	str	r0, [r7, #12]
  401a10:	60b9      	str	r1, [r7, #8]
  401a12:	607a      	str	r2, [r7, #4]
  401a14:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  401a16:	68fb      	ldr	r3, [r7, #12]
  401a18:	3334      	adds	r3, #52	; 0x34
  401a1a:	220a      	movs	r2, #10
  401a1c:	68b9      	ldr	r1, [r7, #8]
  401a1e:	4618      	mov	r0, r3
  401a20:	4b14      	ldr	r3, [pc, #80]	; (401a74 <prvInitialiseTCBVariables+0x6c>)
  401a22:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  401a24:	68fb      	ldr	r3, [r7, #12]
  401a26:	2200      	movs	r2, #0
  401a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  401a2c:	687b      	ldr	r3, [r7, #4]
  401a2e:	2b04      	cmp	r3, #4
  401a30:	d901      	bls.n	401a36 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  401a32:	2304      	movs	r3, #4
  401a34:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  401a36:	68fb      	ldr	r3, [r7, #12]
  401a38:	687a      	ldr	r2, [r7, #4]
  401a3a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  401a3c:	68fb      	ldr	r3, [r7, #12]
  401a3e:	687a      	ldr	r2, [r7, #4]
  401a40:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401a42:	68fb      	ldr	r3, [r7, #12]
  401a44:	3304      	adds	r3, #4
  401a46:	4618      	mov	r0, r3
  401a48:	4b0b      	ldr	r3, [pc, #44]	; (401a78 <prvInitialiseTCBVariables+0x70>)
  401a4a:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401a4c:	68fb      	ldr	r3, [r7, #12]
  401a4e:	3318      	adds	r3, #24
  401a50:	4618      	mov	r0, r3
  401a52:	4b09      	ldr	r3, [pc, #36]	; (401a78 <prvInitialiseTCBVariables+0x70>)
  401a54:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401a56:	68fb      	ldr	r3, [r7, #12]
  401a58:	68fa      	ldr	r2, [r7, #12]
  401a5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  401a5c:	687b      	ldr	r3, [r7, #4]
  401a5e:	f1c3 0205 	rsb	r2, r3, #5
  401a62:	68fb      	ldr	r3, [r7, #12]
  401a64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401a66:	68fb      	ldr	r3, [r7, #12]
  401a68:	68fa      	ldr	r2, [r7, #12]
  401a6a:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  401a6c:	bf00      	nop
  401a6e:	3710      	adds	r7, #16
  401a70:	46bd      	mov	sp, r7
  401a72:	bd80      	pop	{r7, pc}
  401a74:	00406edd 	.word	0x00406edd
  401a78:	00400271 	.word	0x00400271

00401a7c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  401a7c:	b580      	push	{r7, lr}
  401a7e:	b082      	sub	sp, #8
  401a80:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401a82:	2300      	movs	r3, #0
  401a84:	607b      	str	r3, [r7, #4]
  401a86:	e00c      	b.n	401aa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  401a88:	687a      	ldr	r2, [r7, #4]
  401a8a:	4613      	mov	r3, r2
  401a8c:	009b      	lsls	r3, r3, #2
  401a8e:	4413      	add	r3, r2
  401a90:	009b      	lsls	r3, r3, #2
  401a92:	4a12      	ldr	r2, [pc, #72]	; (401adc <prvInitialiseTaskLists+0x60>)
  401a94:	4413      	add	r3, r2
  401a96:	4618      	mov	r0, r3
  401a98:	4b11      	ldr	r3, [pc, #68]	; (401ae0 <prvInitialiseTaskLists+0x64>)
  401a9a:	4798      	blx	r3
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401a9c:	687b      	ldr	r3, [r7, #4]
  401a9e:	3301      	adds	r3, #1
  401aa0:	607b      	str	r3, [r7, #4]
  401aa2:	687b      	ldr	r3, [r7, #4]
  401aa4:	2b04      	cmp	r3, #4
  401aa6:	d9ef      	bls.n	401a88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  401aa8:	480e      	ldr	r0, [pc, #56]	; (401ae4 <prvInitialiseTaskLists+0x68>)
  401aaa:	4b0d      	ldr	r3, [pc, #52]	; (401ae0 <prvInitialiseTaskLists+0x64>)
  401aac:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  401aae:	480e      	ldr	r0, [pc, #56]	; (401ae8 <prvInitialiseTaskLists+0x6c>)
  401ab0:	4b0b      	ldr	r3, [pc, #44]	; (401ae0 <prvInitialiseTaskLists+0x64>)
  401ab2:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  401ab4:	480d      	ldr	r0, [pc, #52]	; (401aec <prvInitialiseTaskLists+0x70>)
  401ab6:	4b0a      	ldr	r3, [pc, #40]	; (401ae0 <prvInitialiseTaskLists+0x64>)
  401ab8:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  401aba:	480d      	ldr	r0, [pc, #52]	; (401af0 <prvInitialiseTaskLists+0x74>)
  401abc:	4b08      	ldr	r3, [pc, #32]	; (401ae0 <prvInitialiseTaskLists+0x64>)
  401abe:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  401ac0:	480c      	ldr	r0, [pc, #48]	; (401af4 <prvInitialiseTaskLists+0x78>)
  401ac2:	4b07      	ldr	r3, [pc, #28]	; (401ae0 <prvInitialiseTaskLists+0x64>)
  401ac4:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401ac6:	4b0c      	ldr	r3, [pc, #48]	; (401af8 <prvInitialiseTaskLists+0x7c>)
  401ac8:	4a06      	ldr	r2, [pc, #24]	; (401ae4 <prvInitialiseTaskLists+0x68>)
  401aca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401acc:	4b0b      	ldr	r3, [pc, #44]	; (401afc <prvInitialiseTaskLists+0x80>)
  401ace:	4a06      	ldr	r2, [pc, #24]	; (401ae8 <prvInitialiseTaskLists+0x6c>)
  401ad0:	601a      	str	r2, [r3, #0]
}
  401ad2:	bf00      	nop
  401ad4:	3708      	adds	r7, #8
  401ad6:	46bd      	mov	sp, r7
  401ad8:	bd80      	pop	{r7, pc}
  401ada:	bf00      	nop
  401adc:	2040aa18 	.word	0x2040aa18
  401ae0:	00400231 	.word	0x00400231
  401ae4:	2040aa7c 	.word	0x2040aa7c
  401ae8:	2040aa90 	.word	0x2040aa90
  401aec:	2040aaac 	.word	0x2040aaac
  401af0:	2040aac0 	.word	0x2040aac0
  401af4:	2040aad8 	.word	0x2040aad8
  401af8:	2040aaa4 	.word	0x2040aaa4
  401afc:	2040aaa8 	.word	0x2040aaa8

00401b00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  401b00:	b580      	push	{r7, lr}
  401b02:	b082      	sub	sp, #8
  401b04:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401b06:	e028      	b.n	401b5a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  401b08:	4b18      	ldr	r3, [pc, #96]	; (401b6c <prvCheckTasksWaitingTermination+0x6c>)
  401b0a:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401b0c:	4b18      	ldr	r3, [pc, #96]	; (401b70 <prvCheckTasksWaitingTermination+0x70>)
  401b0e:	681b      	ldr	r3, [r3, #0]
  401b10:	2b00      	cmp	r3, #0
  401b12:	bf0c      	ite	eq
  401b14:	2301      	moveq	r3, #1
  401b16:	2300      	movne	r3, #0
  401b18:	b2db      	uxtb	r3, r3
  401b1a:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  401b1c:	4b15      	ldr	r3, [pc, #84]	; (401b74 <prvCheckTasksWaitingTermination+0x74>)
  401b1e:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  401b20:	687b      	ldr	r3, [r7, #4]
  401b22:	2b00      	cmp	r3, #0
  401b24:	d119      	bne.n	401b5a <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  401b26:	4b14      	ldr	r3, [pc, #80]	; (401b78 <prvCheckTasksWaitingTermination+0x78>)
  401b28:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  401b2a:	4b11      	ldr	r3, [pc, #68]	; (401b70 <prvCheckTasksWaitingTermination+0x70>)
  401b2c:	68db      	ldr	r3, [r3, #12]
  401b2e:	68db      	ldr	r3, [r3, #12]
  401b30:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401b32:	683b      	ldr	r3, [r7, #0]
  401b34:	3304      	adds	r3, #4
  401b36:	4618      	mov	r0, r3
  401b38:	4b10      	ldr	r3, [pc, #64]	; (401b7c <prvCheckTasksWaitingTermination+0x7c>)
  401b3a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401b3c:	4b10      	ldr	r3, [pc, #64]	; (401b80 <prvCheckTasksWaitingTermination+0x80>)
  401b3e:	681b      	ldr	r3, [r3, #0]
  401b40:	3b01      	subs	r3, #1
  401b42:	4a0f      	ldr	r2, [pc, #60]	; (401b80 <prvCheckTasksWaitingTermination+0x80>)
  401b44:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401b46:	4b0f      	ldr	r3, [pc, #60]	; (401b84 <prvCheckTasksWaitingTermination+0x84>)
  401b48:	681b      	ldr	r3, [r3, #0]
  401b4a:	3b01      	subs	r3, #1
  401b4c:	4a0d      	ldr	r2, [pc, #52]	; (401b84 <prvCheckTasksWaitingTermination+0x84>)
  401b4e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  401b50:	4b0d      	ldr	r3, [pc, #52]	; (401b88 <prvCheckTasksWaitingTermination+0x88>)
  401b52:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  401b54:	6838      	ldr	r0, [r7, #0]
  401b56:	4b0d      	ldr	r3, [pc, #52]	; (401b8c <prvCheckTasksWaitingTermination+0x8c>)
  401b58:	4798      	blx	r3
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401b5a:	4b0a      	ldr	r3, [pc, #40]	; (401b84 <prvCheckTasksWaitingTermination+0x84>)
  401b5c:	681b      	ldr	r3, [r3, #0]
  401b5e:	2b00      	cmp	r3, #0
  401b60:	d1d2      	bne.n	401b08 <prvCheckTasksWaitingTermination+0x8>
			}
		}
	}
	#endif
}
  401b62:	bf00      	nop
  401b64:	3708      	adds	r7, #8
  401b66:	46bd      	mov	sp, r7
  401b68:	bd80      	pop	{r7, pc}
  401b6a:	bf00      	nop
  401b6c:	004013dd 	.word	0x004013dd
  401b70:	2040aac0 	.word	0x2040aac0
  401b74:	004013f9 	.word	0x004013f9
  401b78:	00400555 	.word	0x00400555
  401b7c:	0040034d 	.word	0x0040034d
  401b80:	2040aaec 	.word	0x2040aaec
  401b84:	2040aad4 	.word	0x2040aad4
  401b88:	00400575 	.word	0x00400575
  401b8c:	00401c71 	.word	0x00401c71

00401b90 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  401b90:	b580      	push	{r7, lr}
  401b92:	b082      	sub	sp, #8
  401b94:	af00      	add	r7, sp, #0
  401b96:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401b98:	4b13      	ldr	r3, [pc, #76]	; (401be8 <prvAddCurrentTaskToDelayedList+0x58>)
  401b9a:	681b      	ldr	r3, [r3, #0]
  401b9c:	687a      	ldr	r2, [r7, #4]
  401b9e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  401ba0:	4b12      	ldr	r3, [pc, #72]	; (401bec <prvAddCurrentTaskToDelayedList+0x5c>)
  401ba2:	681b      	ldr	r3, [r3, #0]
  401ba4:	687a      	ldr	r2, [r7, #4]
  401ba6:	429a      	cmp	r2, r3
  401ba8:	d209      	bcs.n	401bbe <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401baa:	4b11      	ldr	r3, [pc, #68]	; (401bf0 <prvAddCurrentTaskToDelayedList+0x60>)
  401bac:	681a      	ldr	r2, [r3, #0]
  401bae:	4b0e      	ldr	r3, [pc, #56]	; (401be8 <prvAddCurrentTaskToDelayedList+0x58>)
  401bb0:	681b      	ldr	r3, [r3, #0]
  401bb2:	3304      	adds	r3, #4
  401bb4:	4619      	mov	r1, r3
  401bb6:	4610      	mov	r0, r2
  401bb8:	4b0e      	ldr	r3, [pc, #56]	; (401bf4 <prvAddCurrentTaskToDelayedList+0x64>)
  401bba:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  401bbc:	e010      	b.n	401be0 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401bbe:	4b0e      	ldr	r3, [pc, #56]	; (401bf8 <prvAddCurrentTaskToDelayedList+0x68>)
  401bc0:	681a      	ldr	r2, [r3, #0]
  401bc2:	4b09      	ldr	r3, [pc, #36]	; (401be8 <prvAddCurrentTaskToDelayedList+0x58>)
  401bc4:	681b      	ldr	r3, [r3, #0]
  401bc6:	3304      	adds	r3, #4
  401bc8:	4619      	mov	r1, r3
  401bca:	4610      	mov	r0, r2
  401bcc:	4b09      	ldr	r3, [pc, #36]	; (401bf4 <prvAddCurrentTaskToDelayedList+0x64>)
  401bce:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401bd0:	4b0a      	ldr	r3, [pc, #40]	; (401bfc <prvAddCurrentTaskToDelayedList+0x6c>)
  401bd2:	681b      	ldr	r3, [r3, #0]
  401bd4:	687a      	ldr	r2, [r7, #4]
  401bd6:	429a      	cmp	r2, r3
  401bd8:	d202      	bcs.n	401be0 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
  401bda:	4a08      	ldr	r2, [pc, #32]	; (401bfc <prvAddCurrentTaskToDelayedList+0x6c>)
  401bdc:	687b      	ldr	r3, [r7, #4]
  401bde:	6013      	str	r3, [r2, #0]
}
  401be0:	bf00      	nop
  401be2:	3708      	adds	r7, #8
  401be4:	46bd      	mov	sp, r7
  401be6:	bd80      	pop	{r7, pc}
  401be8:	2040aa14 	.word	0x2040aa14
  401bec:	2040aaf0 	.word	0x2040aaf0
  401bf0:	2040aaa8 	.word	0x2040aaa8
  401bf4:	004002db 	.word	0x004002db
  401bf8:	2040aaa4 	.word	0x2040aaa4
  401bfc:	20400008 	.word	0x20400008

00401c00 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  401c00:	b580      	push	{r7, lr}
  401c02:	b084      	sub	sp, #16
  401c04:	af00      	add	r7, sp, #0
  401c06:	4603      	mov	r3, r0
  401c08:	6039      	str	r1, [r7, #0]
  401c0a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  401c0c:	204c      	movs	r0, #76	; 0x4c
  401c0e:	4b15      	ldr	r3, [pc, #84]	; (401c64 <prvAllocateTCBAndStack+0x64>)
  401c10:	4798      	blx	r3
  401c12:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  401c14:	68fb      	ldr	r3, [r7, #12]
  401c16:	2b00      	cmp	r3, #0
  401c18:	d01e      	beq.n	401c58 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  401c1a:	683b      	ldr	r3, [r7, #0]
  401c1c:	2b00      	cmp	r3, #0
  401c1e:	d106      	bne.n	401c2e <prvAllocateTCBAndStack+0x2e>
  401c20:	88fb      	ldrh	r3, [r7, #6]
  401c22:	009b      	lsls	r3, r3, #2
  401c24:	4618      	mov	r0, r3
  401c26:	4b0f      	ldr	r3, [pc, #60]	; (401c64 <prvAllocateTCBAndStack+0x64>)
  401c28:	4798      	blx	r3
  401c2a:	4603      	mov	r3, r0
  401c2c:	e000      	b.n	401c30 <prvAllocateTCBAndStack+0x30>
  401c2e:	683b      	ldr	r3, [r7, #0]
  401c30:	68fa      	ldr	r2, [r7, #12]
  401c32:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  401c34:	68fb      	ldr	r3, [r7, #12]
  401c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c38:	2b00      	cmp	r3, #0
  401c3a:	d105      	bne.n	401c48 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  401c3c:	68f8      	ldr	r0, [r7, #12]
  401c3e:	4b0a      	ldr	r3, [pc, #40]	; (401c68 <prvAllocateTCBAndStack+0x68>)
  401c40:	4798      	blx	r3
			pxNewTCB = NULL;
  401c42:	2300      	movs	r3, #0
  401c44:	60fb      	str	r3, [r7, #12]
  401c46:	e007      	b.n	401c58 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  401c48:	68fb      	ldr	r3, [r7, #12]
  401c4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401c4c:	88fb      	ldrh	r3, [r7, #6]
  401c4e:	009b      	lsls	r3, r3, #2
  401c50:	461a      	mov	r2, r3
  401c52:	21a5      	movs	r1, #165	; 0xa5
  401c54:	4b05      	ldr	r3, [pc, #20]	; (401c6c <prvAllocateTCBAndStack+0x6c>)
  401c56:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  401c58:	68fb      	ldr	r3, [r7, #12]
}
  401c5a:	4618      	mov	r0, r3
  401c5c:	3710      	adds	r7, #16
  401c5e:	46bd      	mov	sp, r7
  401c60:	bd80      	pop	{r7, pc}
  401c62:	bf00      	nop
  401c64:	00400685 	.word	0x00400685
  401c68:	00400791 	.word	0x00400791
  401c6c:	00406afd 	.word	0x00406afd

00401c70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  401c70:	b580      	push	{r7, lr}
  401c72:	b082      	sub	sp, #8
  401c74:	af00      	add	r7, sp, #0
  401c76:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401c78:	687b      	ldr	r3, [r7, #4]
  401c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c7c:	4618      	mov	r0, r3
  401c7e:	4b04      	ldr	r3, [pc, #16]	; (401c90 <prvDeleteTCB+0x20>)
  401c80:	4798      	blx	r3
		vPortFree( pxTCB );
  401c82:	6878      	ldr	r0, [r7, #4]
  401c84:	4b02      	ldr	r3, [pc, #8]	; (401c90 <prvDeleteTCB+0x20>)
  401c86:	4798      	blx	r3
	}
  401c88:	bf00      	nop
  401c8a:	3708      	adds	r7, #8
  401c8c:	46bd      	mov	sp, r7
  401c8e:	bd80      	pop	{r7, pc}
  401c90:	00400791 	.word	0x00400791

00401c94 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  401c94:	b480      	push	{r7}
  401c96:	b083      	sub	sp, #12
  401c98:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401c9a:	4b05      	ldr	r3, [pc, #20]	; (401cb0 <xTaskGetCurrentTaskHandle+0x1c>)
  401c9c:	681b      	ldr	r3, [r3, #0]
  401c9e:	607b      	str	r3, [r7, #4]

		return xReturn;
  401ca0:	687b      	ldr	r3, [r7, #4]
	}
  401ca2:	4618      	mov	r0, r3
  401ca4:	370c      	adds	r7, #12
  401ca6:	46bd      	mov	sp, r7
  401ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cac:	4770      	bx	lr
  401cae:	bf00      	nop
  401cb0:	2040aa14 	.word	0x2040aa14

00401cb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  401cb4:	b480      	push	{r7}
  401cb6:	b083      	sub	sp, #12
  401cb8:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  401cba:	4b0b      	ldr	r3, [pc, #44]	; (401ce8 <xTaskGetSchedulerState+0x34>)
  401cbc:	681b      	ldr	r3, [r3, #0]
  401cbe:	2b00      	cmp	r3, #0
  401cc0:	d102      	bne.n	401cc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401cc2:	2300      	movs	r3, #0
  401cc4:	607b      	str	r3, [r7, #4]
  401cc6:	e008      	b.n	401cda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401cc8:	4b08      	ldr	r3, [pc, #32]	; (401cec <xTaskGetSchedulerState+0x38>)
  401cca:	681b      	ldr	r3, [r3, #0]
  401ccc:	2b00      	cmp	r3, #0
  401cce:	d102      	bne.n	401cd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  401cd0:	2301      	movs	r3, #1
  401cd2:	607b      	str	r3, [r7, #4]
  401cd4:	e001      	b.n	401cda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401cd6:	2302      	movs	r3, #2
  401cd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  401cda:	687b      	ldr	r3, [r7, #4]
	}
  401cdc:	4618      	mov	r0, r3
  401cde:	370c      	adds	r7, #12
  401ce0:	46bd      	mov	sp, r7
  401ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ce6:	4770      	bx	lr
  401ce8:	2040aafc 	.word	0x2040aafc
  401cec:	2040ab00 	.word	0x2040ab00

00401cf0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  401cf0:	b580      	push	{r7, lr}
  401cf2:	b084      	sub	sp, #16
  401cf4:	af00      	add	r7, sp, #0
  401cf6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401cf8:	687b      	ldr	r3, [r7, #4]
  401cfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401cfc:	687b      	ldr	r3, [r7, #4]
  401cfe:	2b00      	cmp	r3, #0
  401d00:	d041      	beq.n	401d86 <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401d02:	68fb      	ldr	r3, [r7, #12]
  401d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d06:	4b22      	ldr	r3, [pc, #136]	; (401d90 <vTaskPriorityInherit+0xa0>)
  401d08:	681b      	ldr	r3, [r3, #0]
  401d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d0c:	429a      	cmp	r2, r3
  401d0e:	d23a      	bcs.n	401d86 <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  401d10:	4b1f      	ldr	r3, [pc, #124]	; (401d90 <vTaskPriorityInherit+0xa0>)
  401d12:	681b      	ldr	r3, [r3, #0]
  401d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d16:	f1c3 0205 	rsb	r2, r3, #5
  401d1a:	68fb      	ldr	r3, [r7, #12]
  401d1c:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401d1e:	68fb      	ldr	r3, [r7, #12]
  401d20:	6959      	ldr	r1, [r3, #20]
  401d22:	68fb      	ldr	r3, [r7, #12]
  401d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d26:	4613      	mov	r3, r2
  401d28:	009b      	lsls	r3, r3, #2
  401d2a:	4413      	add	r3, r2
  401d2c:	009b      	lsls	r3, r3, #2
  401d2e:	4a19      	ldr	r2, [pc, #100]	; (401d94 <vTaskPriorityInherit+0xa4>)
  401d30:	4413      	add	r3, r2
  401d32:	4299      	cmp	r1, r3
  401d34:	d122      	bne.n	401d7c <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401d36:	68fb      	ldr	r3, [r7, #12]
  401d38:	3304      	adds	r3, #4
  401d3a:	4618      	mov	r0, r3
  401d3c:	4b16      	ldr	r3, [pc, #88]	; (401d98 <vTaskPriorityInherit+0xa8>)
  401d3e:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401d40:	4b13      	ldr	r3, [pc, #76]	; (401d90 <vTaskPriorityInherit+0xa0>)
  401d42:	681b      	ldr	r3, [r3, #0]
  401d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d46:	68fb      	ldr	r3, [r7, #12]
  401d48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  401d4a:	68fb      	ldr	r3, [r7, #12]
  401d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d4e:	4b13      	ldr	r3, [pc, #76]	; (401d9c <vTaskPriorityInherit+0xac>)
  401d50:	681b      	ldr	r3, [r3, #0]
  401d52:	429a      	cmp	r2, r3
  401d54:	d903      	bls.n	401d5e <vTaskPriorityInherit+0x6e>
  401d56:	68fb      	ldr	r3, [r7, #12]
  401d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d5a:	4a10      	ldr	r2, [pc, #64]	; (401d9c <vTaskPriorityInherit+0xac>)
  401d5c:	6013      	str	r3, [r2, #0]
  401d5e:	68fb      	ldr	r3, [r7, #12]
  401d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d62:	4613      	mov	r3, r2
  401d64:	009b      	lsls	r3, r3, #2
  401d66:	4413      	add	r3, r2
  401d68:	009b      	lsls	r3, r3, #2
  401d6a:	4a0a      	ldr	r2, [pc, #40]	; (401d94 <vTaskPriorityInherit+0xa4>)
  401d6c:	441a      	add	r2, r3
  401d6e:	68fb      	ldr	r3, [r7, #12]
  401d70:	3304      	adds	r3, #4
  401d72:	4619      	mov	r1, r3
  401d74:	4610      	mov	r0, r2
  401d76:	4b0a      	ldr	r3, [pc, #40]	; (401da0 <vTaskPriorityInherit+0xb0>)
  401d78:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  401d7a:	e004      	b.n	401d86 <vTaskPriorityInherit+0x96>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401d7c:	4b04      	ldr	r3, [pc, #16]	; (401d90 <vTaskPriorityInherit+0xa0>)
  401d7e:	681b      	ldr	r3, [r3, #0]
  401d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d82:	68fb      	ldr	r3, [r7, #12]
  401d84:	62da      	str	r2, [r3, #44]	; 0x2c
	}
  401d86:	bf00      	nop
  401d88:	3710      	adds	r7, #16
  401d8a:	46bd      	mov	sp, r7
  401d8c:	bd80      	pop	{r7, pc}
  401d8e:	bf00      	nop
  401d90:	2040aa14 	.word	0x2040aa14
  401d94:	2040aa18 	.word	0x2040aa18
  401d98:	0040034d 	.word	0x0040034d
  401d9c:	2040aaf8 	.word	0x2040aaf8
  401da0:	0040028b 	.word	0x0040028b

00401da4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  401da4:	b580      	push	{r7, lr}
  401da6:	b084      	sub	sp, #16
  401da8:	af00      	add	r7, sp, #0
  401daa:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401dac:	687b      	ldr	r3, [r7, #4]
  401dae:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  401db0:	687b      	ldr	r3, [r7, #4]
  401db2:	2b00      	cmp	r3, #0
  401db4:	d02c      	beq.n	401e10 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401db6:	68fb      	ldr	r3, [r7, #12]
  401db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401dba:	68fb      	ldr	r3, [r7, #12]
  401dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401dbe:	429a      	cmp	r2, r3
  401dc0:	d026      	beq.n	401e10 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401dc2:	68fb      	ldr	r3, [r7, #12]
  401dc4:	3304      	adds	r3, #4
  401dc6:	4618      	mov	r0, r3
  401dc8:	4b13      	ldr	r3, [pc, #76]	; (401e18 <vTaskPriorityDisinherit+0x74>)
  401dca:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  401dcc:	68fb      	ldr	r3, [r7, #12]
  401dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  401dd0:	68fb      	ldr	r3, [r7, #12]
  401dd2:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  401dd4:	68fb      	ldr	r3, [r7, #12]
  401dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401dd8:	f1c3 0205 	rsb	r2, r3, #5
  401ddc:	68fb      	ldr	r3, [r7, #12]
  401dde:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  401de0:	68fb      	ldr	r3, [r7, #12]
  401de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401de4:	4b0d      	ldr	r3, [pc, #52]	; (401e1c <vTaskPriorityDisinherit+0x78>)
  401de6:	681b      	ldr	r3, [r3, #0]
  401de8:	429a      	cmp	r2, r3
  401dea:	d903      	bls.n	401df4 <vTaskPriorityDisinherit+0x50>
  401dec:	68fb      	ldr	r3, [r7, #12]
  401dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401df0:	4a0a      	ldr	r2, [pc, #40]	; (401e1c <vTaskPriorityDisinherit+0x78>)
  401df2:	6013      	str	r3, [r2, #0]
  401df4:	68fb      	ldr	r3, [r7, #12]
  401df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401df8:	4613      	mov	r3, r2
  401dfa:	009b      	lsls	r3, r3, #2
  401dfc:	4413      	add	r3, r2
  401dfe:	009b      	lsls	r3, r3, #2
  401e00:	4a07      	ldr	r2, [pc, #28]	; (401e20 <vTaskPriorityDisinherit+0x7c>)
  401e02:	441a      	add	r2, r3
  401e04:	68fb      	ldr	r3, [r7, #12]
  401e06:	3304      	adds	r3, #4
  401e08:	4619      	mov	r1, r3
  401e0a:	4610      	mov	r0, r2
  401e0c:	4b05      	ldr	r3, [pc, #20]	; (401e24 <vTaskPriorityDisinherit+0x80>)
  401e0e:	4798      	blx	r3
			}
		}
	}
  401e10:	bf00      	nop
  401e12:	3710      	adds	r7, #16
  401e14:	46bd      	mov	sp, r7
  401e16:	bd80      	pop	{r7, pc}
  401e18:	0040034d 	.word	0x0040034d
  401e1c:	2040aaf8 	.word	0x2040aaf8
  401e20:	2040aa18 	.word	0x2040aa18
  401e24:	0040028b 	.word	0x0040028b

00401e28 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  401e28:	b590      	push	{r4, r7, lr}
  401e2a:	b087      	sub	sp, #28
  401e2c:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  401e2e:	2300      	movs	r3, #0
  401e30:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  401e32:	4b11      	ldr	r3, [pc, #68]	; (401e78 <xTimerCreateTimerTask+0x50>)
  401e34:	4798      	blx	r3

	if( xTimerQueue != NULL )
  401e36:	4b11      	ldr	r3, [pc, #68]	; (401e7c <xTimerCreateTimerTask+0x54>)
  401e38:	681b      	ldr	r3, [r3, #0]
  401e3a:	2b00      	cmp	r3, #0
  401e3c:	d00f      	beq.n	401e5e <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401e3e:	2300      	movs	r3, #0
  401e40:	9303      	str	r3, [sp, #12]
  401e42:	2300      	movs	r3, #0
  401e44:	9302      	str	r3, [sp, #8]
  401e46:	2300      	movs	r3, #0
  401e48:	9301      	str	r3, [sp, #4]
  401e4a:	2304      	movs	r3, #4
  401e4c:	9300      	str	r3, [sp, #0]
  401e4e:	2300      	movs	r3, #0
  401e50:	f44f 7282 	mov.w	r2, #260	; 0x104
  401e54:	490a      	ldr	r1, [pc, #40]	; (401e80 <xTimerCreateTimerTask+0x58>)
  401e56:	480b      	ldr	r0, [pc, #44]	; (401e84 <xTimerCreateTimerTask+0x5c>)
  401e58:	4c0b      	ldr	r4, [pc, #44]	; (401e88 <xTimerCreateTimerTask+0x60>)
  401e5a:	47a0      	blx	r4
  401e5c:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  401e5e:	687b      	ldr	r3, [r7, #4]
  401e60:	2b00      	cmp	r3, #0
  401e62:	d103      	bne.n	401e6c <xTimerCreateTimerTask+0x44>
  401e64:	4b09      	ldr	r3, [pc, #36]	; (401e8c <xTimerCreateTimerTask+0x64>)
  401e66:	4798      	blx	r3
  401e68:	bf00      	nop
  401e6a:	e7fd      	b.n	401e68 <xTimerCreateTimerTask+0x40>
	return xReturn;
  401e6c:	687b      	ldr	r3, [r7, #4]
}
  401e6e:	4618      	mov	r0, r3
  401e70:	370c      	adds	r7, #12
  401e72:	46bd      	mov	sp, r7
  401e74:	bd90      	pop	{r4, r7, pc}
  401e76:	bf00      	nop
  401e78:	00402345 	.word	0x00402345
  401e7c:	2040ab44 	.word	0x2040ab44
  401e80:	00409a04 	.word	0x00409a04
  401e84:	00401fa1 	.word	0x00401fa1
  401e88:	0040114d 	.word	0x0040114d
  401e8c:	0040059d 	.word	0x0040059d

00401e90 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  401e90:	b590      	push	{r4, r7, lr}
  401e92:	b089      	sub	sp, #36	; 0x24
  401e94:	af00      	add	r7, sp, #0
  401e96:	60f8      	str	r0, [r7, #12]
  401e98:	60b9      	str	r1, [r7, #8]
  401e9a:	607a      	str	r2, [r7, #4]
  401e9c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  401e9e:	2300      	movs	r3, #0
  401ea0:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401ea2:	4b1a      	ldr	r3, [pc, #104]	; (401f0c <xTimerGenericCommand+0x7c>)
  401ea4:	681b      	ldr	r3, [r3, #0]
  401ea6:	2b00      	cmp	r3, #0
  401ea8:	d02a      	beq.n	401f00 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  401eaa:	68bb      	ldr	r3, [r7, #8]
  401eac:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  401eae:	687b      	ldr	r3, [r7, #4]
  401eb0:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  401eb2:	68fb      	ldr	r3, [r7, #12]
  401eb4:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  401eb6:	683b      	ldr	r3, [r7, #0]
  401eb8:	2b00      	cmp	r3, #0
  401eba:	d118      	bne.n	401eee <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401ebc:	4b14      	ldr	r3, [pc, #80]	; (401f10 <xTimerGenericCommand+0x80>)
  401ebe:	4798      	blx	r3
  401ec0:	4603      	mov	r3, r0
  401ec2:	2b01      	cmp	r3, #1
  401ec4:	d109      	bne.n	401eda <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  401ec6:	4b11      	ldr	r3, [pc, #68]	; (401f0c <xTimerGenericCommand+0x7c>)
  401ec8:	6818      	ldr	r0, [r3, #0]
  401eca:	f107 0110 	add.w	r1, r7, #16
  401ece:	2300      	movs	r3, #0
  401ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401ed2:	4c10      	ldr	r4, [pc, #64]	; (401f14 <xTimerGenericCommand+0x84>)
  401ed4:	47a0      	blx	r4
  401ed6:	61f8      	str	r0, [r7, #28]
  401ed8:	e012      	b.n	401f00 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401eda:	4b0c      	ldr	r3, [pc, #48]	; (401f0c <xTimerGenericCommand+0x7c>)
  401edc:	6818      	ldr	r0, [r3, #0]
  401ede:	f107 0110 	add.w	r1, r7, #16
  401ee2:	2300      	movs	r3, #0
  401ee4:	2200      	movs	r2, #0
  401ee6:	4c0b      	ldr	r4, [pc, #44]	; (401f14 <xTimerGenericCommand+0x84>)
  401ee8:	47a0      	blx	r4
  401eea:	61f8      	str	r0, [r7, #28]
  401eec:	e008      	b.n	401f00 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401eee:	4b07      	ldr	r3, [pc, #28]	; (401f0c <xTimerGenericCommand+0x7c>)
  401ef0:	6818      	ldr	r0, [r3, #0]
  401ef2:	f107 0110 	add.w	r1, r7, #16
  401ef6:	2300      	movs	r3, #0
  401ef8:	683a      	ldr	r2, [r7, #0]
  401efa:	4c07      	ldr	r4, [pc, #28]	; (401f18 <xTimerGenericCommand+0x88>)
  401efc:	47a0      	blx	r4
  401efe:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  401f00:	69fb      	ldr	r3, [r7, #28]
}
  401f02:	4618      	mov	r0, r3
  401f04:	3724      	adds	r7, #36	; 0x24
  401f06:	46bd      	mov	sp, r7
  401f08:	bd90      	pop	{r4, r7, pc}
  401f0a:	bf00      	nop
  401f0c:	2040ab44 	.word	0x2040ab44
  401f10:	00401cb5 	.word	0x00401cb5
  401f14:	00400acd 	.word	0x00400acd
  401f18:	00400c35 	.word	0x00400c35

00401f1c <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  401f1c:	b590      	push	{r4, r7, lr}
  401f1e:	b087      	sub	sp, #28
  401f20:	af02      	add	r7, sp, #8
  401f22:	6078      	str	r0, [r7, #4]
  401f24:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f26:	4b19      	ldr	r3, [pc, #100]	; (401f8c <prvProcessExpiredTimer+0x70>)
  401f28:	681b      	ldr	r3, [r3, #0]
  401f2a:	68db      	ldr	r3, [r3, #12]
  401f2c:	68db      	ldr	r3, [r3, #12]
  401f2e:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  401f30:	68fb      	ldr	r3, [r7, #12]
  401f32:	3304      	adds	r3, #4
  401f34:	4618      	mov	r0, r3
  401f36:	4b16      	ldr	r3, [pc, #88]	; (401f90 <prvProcessExpiredTimer+0x74>)
  401f38:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  401f3a:	68fb      	ldr	r3, [r7, #12]
  401f3c:	69db      	ldr	r3, [r3, #28]
  401f3e:	2b01      	cmp	r3, #1
  401f40:	d11b      	bne.n	401f7a <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401f42:	68fb      	ldr	r3, [r7, #12]
  401f44:	699a      	ldr	r2, [r3, #24]
  401f46:	687b      	ldr	r3, [r7, #4]
  401f48:	18d1      	adds	r1, r2, r3
  401f4a:	687b      	ldr	r3, [r7, #4]
  401f4c:	683a      	ldr	r2, [r7, #0]
  401f4e:	68f8      	ldr	r0, [r7, #12]
  401f50:	4c10      	ldr	r4, [pc, #64]	; (401f94 <prvProcessExpiredTimer+0x78>)
  401f52:	47a0      	blx	r4
  401f54:	4603      	mov	r3, r0
  401f56:	2b01      	cmp	r3, #1
  401f58:	d10f      	bne.n	401f7a <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  401f5a:	2300      	movs	r3, #0
  401f5c:	9300      	str	r3, [sp, #0]
  401f5e:	2300      	movs	r3, #0
  401f60:	687a      	ldr	r2, [r7, #4]
  401f62:	2100      	movs	r1, #0
  401f64:	68f8      	ldr	r0, [r7, #12]
  401f66:	4c0c      	ldr	r4, [pc, #48]	; (401f98 <prvProcessExpiredTimer+0x7c>)
  401f68:	47a0      	blx	r4
  401f6a:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  401f6c:	68bb      	ldr	r3, [r7, #8]
  401f6e:	2b00      	cmp	r3, #0
  401f70:	d103      	bne.n	401f7a <prvProcessExpiredTimer+0x5e>
  401f72:	4b0a      	ldr	r3, [pc, #40]	; (401f9c <prvProcessExpiredTimer+0x80>)
  401f74:	4798      	blx	r3
  401f76:	bf00      	nop
  401f78:	e7fd      	b.n	401f76 <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  401f7a:	68fb      	ldr	r3, [r7, #12]
  401f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401f7e:	68f8      	ldr	r0, [r7, #12]
  401f80:	4798      	blx	r3
}
  401f82:	bf00      	nop
  401f84:	3714      	adds	r7, #20
  401f86:	46bd      	mov	sp, r7
  401f88:	bd90      	pop	{r4, r7, pc}
  401f8a:	bf00      	nop
  401f8c:	2040ab3c 	.word	0x2040ab3c
  401f90:	0040034d 	.word	0x0040034d
  401f94:	004020e9 	.word	0x004020e9
  401f98:	00401e91 	.word	0x00401e91
  401f9c:	0040059d 	.word	0x0040059d

00401fa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  401fa0:	b580      	push	{r7, lr}
  401fa2:	b084      	sub	sp, #16
  401fa4:	af00      	add	r7, sp, #0
  401fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401fa8:	f107 0308 	add.w	r3, r7, #8
  401fac:	4618      	mov	r0, r3
  401fae:	4b05      	ldr	r3, [pc, #20]	; (401fc4 <prvTimerTask+0x24>)
  401fb0:	4798      	blx	r3
  401fb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  401fb4:	68bb      	ldr	r3, [r7, #8]
  401fb6:	4619      	mov	r1, r3
  401fb8:	68f8      	ldr	r0, [r7, #12]
  401fba:	4b03      	ldr	r3, [pc, #12]	; (401fc8 <prvTimerTask+0x28>)
  401fbc:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  401fbe:	4b03      	ldr	r3, [pc, #12]	; (401fcc <prvTimerTask+0x2c>)
  401fc0:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401fc2:	e7f1      	b.n	401fa8 <prvTimerTask+0x8>
  401fc4:	00402055 	.word	0x00402055
  401fc8:	00401fd1 	.word	0x00401fd1
  401fcc:	00402171 	.word	0x00402171

00401fd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  401fd0:	b580      	push	{r7, lr}
  401fd2:	b084      	sub	sp, #16
  401fd4:	af00      	add	r7, sp, #0
  401fd6:	6078      	str	r0, [r7, #4]
  401fd8:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  401fda:	4b17      	ldr	r3, [pc, #92]	; (402038 <prvProcessTimerOrBlockTask+0x68>)
  401fdc:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401fde:	f107 0308 	add.w	r3, r7, #8
  401fe2:	4618      	mov	r0, r3
  401fe4:	4b15      	ldr	r3, [pc, #84]	; (40203c <prvProcessTimerOrBlockTask+0x6c>)
  401fe6:	4798      	blx	r3
  401fe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  401fea:	68bb      	ldr	r3, [r7, #8]
  401fec:	2b00      	cmp	r3, #0
  401fee:	d11d      	bne.n	40202c <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401ff0:	683b      	ldr	r3, [r7, #0]
  401ff2:	2b00      	cmp	r3, #0
  401ff4:	d10a      	bne.n	40200c <prvProcessTimerOrBlockTask+0x3c>
  401ff6:	687a      	ldr	r2, [r7, #4]
  401ff8:	68fb      	ldr	r3, [r7, #12]
  401ffa:	429a      	cmp	r2, r3
  401ffc:	d806      	bhi.n	40200c <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  401ffe:	4b10      	ldr	r3, [pc, #64]	; (402040 <prvProcessTimerOrBlockTask+0x70>)
  402000:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  402002:	68f9      	ldr	r1, [r7, #12]
  402004:	6878      	ldr	r0, [r7, #4]
  402006:	4b0f      	ldr	r3, [pc, #60]	; (402044 <prvProcessTimerOrBlockTask+0x74>)
  402008:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  40200a:	e011      	b.n	402030 <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  40200c:	4b0e      	ldr	r3, [pc, #56]	; (402048 <prvProcessTimerOrBlockTask+0x78>)
  40200e:	6818      	ldr	r0, [r3, #0]
  402010:	687a      	ldr	r2, [r7, #4]
  402012:	68fb      	ldr	r3, [r7, #12]
  402014:	1ad3      	subs	r3, r2, r3
  402016:	4619      	mov	r1, r3
  402018:	4b0c      	ldr	r3, [pc, #48]	; (40204c <prvProcessTimerOrBlockTask+0x7c>)
  40201a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40201c:	4b08      	ldr	r3, [pc, #32]	; (402040 <prvProcessTimerOrBlockTask+0x70>)
  40201e:	4798      	blx	r3
  402020:	4603      	mov	r3, r0
  402022:	2b00      	cmp	r3, #0
  402024:	d104      	bne.n	402030 <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
  402026:	4b0a      	ldr	r3, [pc, #40]	; (402050 <prvProcessTimerOrBlockTask+0x80>)
  402028:	4798      	blx	r3
}
  40202a:	e001      	b.n	402030 <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
  40202c:	4b04      	ldr	r3, [pc, #16]	; (402040 <prvProcessTimerOrBlockTask+0x70>)
  40202e:	4798      	blx	r3
}
  402030:	bf00      	nop
  402032:	3710      	adds	r7, #16
  402034:	46bd      	mov	sp, r7
  402036:	bd80      	pop	{r7, pc}
  402038:	004013dd 	.word	0x004013dd
  40203c:	0040209d 	.word	0x0040209d
  402040:	004013f9 	.word	0x004013f9
  402044:	00401f1d 	.word	0x00401f1d
  402048:	2040ab44 	.word	0x2040ab44
  40204c:	004010e9 	.word	0x004010e9
  402050:	00400539 	.word	0x00400539

00402054 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  402054:	b480      	push	{r7}
  402056:	b085      	sub	sp, #20
  402058:	af00      	add	r7, sp, #0
  40205a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40205c:	4b0e      	ldr	r3, [pc, #56]	; (402098 <prvGetNextExpireTime+0x44>)
  40205e:	681b      	ldr	r3, [r3, #0]
  402060:	681b      	ldr	r3, [r3, #0]
  402062:	2b00      	cmp	r3, #0
  402064:	bf0c      	ite	eq
  402066:	2301      	moveq	r3, #1
  402068:	2300      	movne	r3, #0
  40206a:	b2db      	uxtb	r3, r3
  40206c:	461a      	mov	r2, r3
  40206e:	687b      	ldr	r3, [r7, #4]
  402070:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  402072:	687b      	ldr	r3, [r7, #4]
  402074:	681b      	ldr	r3, [r3, #0]
  402076:	2b00      	cmp	r3, #0
  402078:	d105      	bne.n	402086 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40207a:	4b07      	ldr	r3, [pc, #28]	; (402098 <prvGetNextExpireTime+0x44>)
  40207c:	681b      	ldr	r3, [r3, #0]
  40207e:	68db      	ldr	r3, [r3, #12]
  402080:	681b      	ldr	r3, [r3, #0]
  402082:	60fb      	str	r3, [r7, #12]
  402084:	e001      	b.n	40208a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  402086:	2300      	movs	r3, #0
  402088:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  40208a:	68fb      	ldr	r3, [r7, #12]
}
  40208c:	4618      	mov	r0, r3
  40208e:	3714      	adds	r7, #20
  402090:	46bd      	mov	sp, r7
  402092:	f85d 7b04 	ldr.w	r7, [sp], #4
  402096:	4770      	bx	lr
  402098:	2040ab3c 	.word	0x2040ab3c

0040209c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  40209c:	b580      	push	{r7, lr}
  40209e:	b084      	sub	sp, #16
  4020a0:	af00      	add	r7, sp, #0
  4020a2:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  4020a4:	4b0d      	ldr	r3, [pc, #52]	; (4020dc <prvSampleTimeNow+0x40>)
  4020a6:	4798      	blx	r3
  4020a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  4020aa:	4b0d      	ldr	r3, [pc, #52]	; (4020e0 <prvSampleTimeNow+0x44>)
  4020ac:	681b      	ldr	r3, [r3, #0]
  4020ae:	68fa      	ldr	r2, [r7, #12]
  4020b0:	429a      	cmp	r2, r3
  4020b2:	d208      	bcs.n	4020c6 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  4020b4:	4b0a      	ldr	r3, [pc, #40]	; (4020e0 <prvSampleTimeNow+0x44>)
  4020b6:	681b      	ldr	r3, [r3, #0]
  4020b8:	4618      	mov	r0, r3
  4020ba:	4b0a      	ldr	r3, [pc, #40]	; (4020e4 <prvSampleTimeNow+0x48>)
  4020bc:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  4020be:	687b      	ldr	r3, [r7, #4]
  4020c0:	2201      	movs	r2, #1
  4020c2:	601a      	str	r2, [r3, #0]
  4020c4:	e002      	b.n	4020cc <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  4020c6:	687b      	ldr	r3, [r7, #4]
  4020c8:	2200      	movs	r2, #0
  4020ca:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  4020cc:	4a04      	ldr	r2, [pc, #16]	; (4020e0 <prvSampleTimeNow+0x44>)
  4020ce:	68fb      	ldr	r3, [r7, #12]
  4020d0:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  4020d2:	68fb      	ldr	r3, [r7, #12]
}
  4020d4:	4618      	mov	r0, r3
  4020d6:	3710      	adds	r7, #16
  4020d8:	46bd      	mov	sp, r7
  4020da:	bd80      	pop	{r7, pc}
  4020dc:	00401519 	.word	0x00401519
  4020e0:	2040ab48 	.word	0x2040ab48
  4020e4:	0040227d 	.word	0x0040227d

004020e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  4020e8:	b580      	push	{r7, lr}
  4020ea:	b086      	sub	sp, #24
  4020ec:	af00      	add	r7, sp, #0
  4020ee:	60f8      	str	r0, [r7, #12]
  4020f0:	60b9      	str	r1, [r7, #8]
  4020f2:	607a      	str	r2, [r7, #4]
  4020f4:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  4020f6:	2300      	movs	r3, #0
  4020f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4020fa:	68fb      	ldr	r3, [r7, #12]
  4020fc:	68ba      	ldr	r2, [r7, #8]
  4020fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402100:	68fb      	ldr	r3, [r7, #12]
  402102:	68fa      	ldr	r2, [r7, #12]
  402104:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  402106:	68ba      	ldr	r2, [r7, #8]
  402108:	687b      	ldr	r3, [r7, #4]
  40210a:	429a      	cmp	r2, r3
  40210c:	d812      	bhi.n	402134 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  40210e:	687a      	ldr	r2, [r7, #4]
  402110:	683b      	ldr	r3, [r7, #0]
  402112:	1ad2      	subs	r2, r2, r3
  402114:	68fb      	ldr	r3, [r7, #12]
  402116:	699b      	ldr	r3, [r3, #24]
  402118:	429a      	cmp	r2, r3
  40211a:	d302      	bcc.n	402122 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40211c:	2301      	movs	r3, #1
  40211e:	617b      	str	r3, [r7, #20]
  402120:	e01b      	b.n	40215a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402122:	4b10      	ldr	r3, [pc, #64]	; (402164 <prvInsertTimerInActiveList+0x7c>)
  402124:	681a      	ldr	r2, [r3, #0]
  402126:	68fb      	ldr	r3, [r7, #12]
  402128:	3304      	adds	r3, #4
  40212a:	4619      	mov	r1, r3
  40212c:	4610      	mov	r0, r2
  40212e:	4b0e      	ldr	r3, [pc, #56]	; (402168 <prvInsertTimerInActiveList+0x80>)
  402130:	4798      	blx	r3
  402132:	e012      	b.n	40215a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402134:	687a      	ldr	r2, [r7, #4]
  402136:	683b      	ldr	r3, [r7, #0]
  402138:	429a      	cmp	r2, r3
  40213a:	d206      	bcs.n	40214a <prvInsertTimerInActiveList+0x62>
  40213c:	68ba      	ldr	r2, [r7, #8]
  40213e:	683b      	ldr	r3, [r7, #0]
  402140:	429a      	cmp	r2, r3
  402142:	d302      	bcc.n	40214a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402144:	2301      	movs	r3, #1
  402146:	617b      	str	r3, [r7, #20]
  402148:	e007      	b.n	40215a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40214a:	4b08      	ldr	r3, [pc, #32]	; (40216c <prvInsertTimerInActiveList+0x84>)
  40214c:	681a      	ldr	r2, [r3, #0]
  40214e:	68fb      	ldr	r3, [r7, #12]
  402150:	3304      	adds	r3, #4
  402152:	4619      	mov	r1, r3
  402154:	4610      	mov	r0, r2
  402156:	4b04      	ldr	r3, [pc, #16]	; (402168 <prvInsertTimerInActiveList+0x80>)
  402158:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  40215a:	697b      	ldr	r3, [r7, #20]
}
  40215c:	4618      	mov	r0, r3
  40215e:	3718      	adds	r7, #24
  402160:	46bd      	mov	sp, r7
  402162:	bd80      	pop	{r7, pc}
  402164:	2040ab40 	.word	0x2040ab40
  402168:	004002db 	.word	0x004002db
  40216c:	2040ab3c 	.word	0x2040ab3c

00402170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  402170:	b590      	push	{r4, r7, lr}
  402172:	b08b      	sub	sp, #44	; 0x2c
  402174:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402176:	1d3b      	adds	r3, r7, #4
  402178:	4618      	mov	r0, r3
  40217a:	4b38      	ldr	r3, [pc, #224]	; (40225c <prvProcessReceivedCommands+0xec>)
  40217c:	4798      	blx	r3
  40217e:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  402180:	e05d      	b.n	40223e <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  402182:	693b      	ldr	r3, [r7, #16]
  402184:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  402186:	69bb      	ldr	r3, [r7, #24]
  402188:	2b00      	cmp	r3, #0
  40218a:	d008      	beq.n	40219e <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40218c:	69bb      	ldr	r3, [r7, #24]
  40218e:	695b      	ldr	r3, [r3, #20]
  402190:	2b00      	cmp	r3, #0
  402192:	d004      	beq.n	40219e <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  402194:	69bb      	ldr	r3, [r7, #24]
  402196:	3304      	adds	r3, #4
  402198:	4618      	mov	r0, r3
  40219a:	4b31      	ldr	r3, [pc, #196]	; (402260 <prvProcessReceivedCommands+0xf0>)
  40219c:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  40219e:	68bb      	ldr	r3, [r7, #8]
  4021a0:	2b03      	cmp	r3, #3
  4021a2:	d84b      	bhi.n	40223c <prvProcessReceivedCommands+0xcc>
  4021a4:	a201      	add	r2, pc, #4	; (adr r2, 4021ac <prvProcessReceivedCommands+0x3c>)
  4021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4021aa:	bf00      	nop
  4021ac:	004021bd 	.word	0x004021bd
  4021b0:	0040223f 	.word	0x0040223f
  4021b4:	0040220b 	.word	0x0040220b
  4021b8:	00402235 	.word	0x00402235
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  4021bc:	68fa      	ldr	r2, [r7, #12]
  4021be:	69bb      	ldr	r3, [r7, #24]
  4021c0:	699b      	ldr	r3, [r3, #24]
  4021c2:	18d1      	adds	r1, r2, r3
  4021c4:	68fb      	ldr	r3, [r7, #12]
  4021c6:	69fa      	ldr	r2, [r7, #28]
  4021c8:	69b8      	ldr	r0, [r7, #24]
  4021ca:	4c26      	ldr	r4, [pc, #152]	; (402264 <prvProcessReceivedCommands+0xf4>)
  4021cc:	47a0      	blx	r4
  4021ce:	4603      	mov	r3, r0
  4021d0:	2b01      	cmp	r3, #1
  4021d2:	d134      	bne.n	40223e <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4021d4:	69bb      	ldr	r3, [r7, #24]
  4021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4021d8:	69b8      	ldr	r0, [r7, #24]
  4021da:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4021dc:	69bb      	ldr	r3, [r7, #24]
  4021de:	69db      	ldr	r3, [r3, #28]
  4021e0:	2b01      	cmp	r3, #1
  4021e2:	d12c      	bne.n	40223e <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4021e4:	68fa      	ldr	r2, [r7, #12]
  4021e6:	69bb      	ldr	r3, [r7, #24]
  4021e8:	699b      	ldr	r3, [r3, #24]
  4021ea:	441a      	add	r2, r3
  4021ec:	2300      	movs	r3, #0
  4021ee:	9300      	str	r3, [sp, #0]
  4021f0:	2300      	movs	r3, #0
  4021f2:	2100      	movs	r1, #0
  4021f4:	69b8      	ldr	r0, [r7, #24]
  4021f6:	4c1c      	ldr	r4, [pc, #112]	; (402268 <prvProcessReceivedCommands+0xf8>)
  4021f8:	47a0      	blx	r4
  4021fa:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  4021fc:	697b      	ldr	r3, [r7, #20]
  4021fe:	2b00      	cmp	r3, #0
  402200:	d11d      	bne.n	40223e <prvProcessReceivedCommands+0xce>
  402202:	4b1a      	ldr	r3, [pc, #104]	; (40226c <prvProcessReceivedCommands+0xfc>)
  402204:	4798      	blx	r3
  402206:	bf00      	nop
  402208:	e7fd      	b.n	402206 <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  40220a:	68fa      	ldr	r2, [r7, #12]
  40220c:	69bb      	ldr	r3, [r7, #24]
  40220e:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402210:	69bb      	ldr	r3, [r7, #24]
  402212:	699b      	ldr	r3, [r3, #24]
  402214:	2b00      	cmp	r3, #0
  402216:	d103      	bne.n	402220 <prvProcessReceivedCommands+0xb0>
  402218:	4b14      	ldr	r3, [pc, #80]	; (40226c <prvProcessReceivedCommands+0xfc>)
  40221a:	4798      	blx	r3
  40221c:	bf00      	nop
  40221e:	e7fd      	b.n	40221c <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402220:	69bb      	ldr	r3, [r7, #24]
  402222:	699a      	ldr	r2, [r3, #24]
  402224:	69fb      	ldr	r3, [r7, #28]
  402226:	18d1      	adds	r1, r2, r3
  402228:	69fb      	ldr	r3, [r7, #28]
  40222a:	69fa      	ldr	r2, [r7, #28]
  40222c:	69b8      	ldr	r0, [r7, #24]
  40222e:	4c0d      	ldr	r4, [pc, #52]	; (402264 <prvProcessReceivedCommands+0xf4>)
  402230:	47a0      	blx	r4
				break;
  402232:	e004      	b.n	40223e <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  402234:	69b8      	ldr	r0, [r7, #24]
  402236:	4b0e      	ldr	r3, [pc, #56]	; (402270 <prvProcessReceivedCommands+0x100>)
  402238:	4798      	blx	r3
				break;
  40223a:	e000      	b.n	40223e <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  40223c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40223e:	4b0d      	ldr	r3, [pc, #52]	; (402274 <prvProcessReceivedCommands+0x104>)
  402240:	6818      	ldr	r0, [r3, #0]
  402242:	f107 0108 	add.w	r1, r7, #8
  402246:	2300      	movs	r3, #0
  402248:	2200      	movs	r2, #0
  40224a:	4c0b      	ldr	r4, [pc, #44]	; (402278 <prvProcessReceivedCommands+0x108>)
  40224c:	47a0      	blx	r4
  40224e:	4603      	mov	r3, r0
  402250:	2b00      	cmp	r3, #0
  402252:	d196      	bne.n	402182 <prvProcessReceivedCommands+0x12>
		}
	}
}
  402254:	bf00      	nop
  402256:	3724      	adds	r7, #36	; 0x24
  402258:	46bd      	mov	sp, r7
  40225a:	bd90      	pop	{r4, r7, pc}
  40225c:	0040209d 	.word	0x0040209d
  402260:	0040034d 	.word	0x0040034d
  402264:	004020e9 	.word	0x004020e9
  402268:	00401e91 	.word	0x00401e91
  40226c:	0040059d 	.word	0x0040059d
  402270:	00400791 	.word	0x00400791
  402274:	2040ab44 	.word	0x2040ab44
  402278:	00400cf1 	.word	0x00400cf1

0040227c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  40227c:	b590      	push	{r4, r7, lr}
  40227e:	b08b      	sub	sp, #44	; 0x2c
  402280:	af02      	add	r7, sp, #8
  402282:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402284:	e03e      	b.n	402304 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402286:	4b29      	ldr	r3, [pc, #164]	; (40232c <prvSwitchTimerLists+0xb0>)
  402288:	681b      	ldr	r3, [r3, #0]
  40228a:	68db      	ldr	r3, [r3, #12]
  40228c:	681b      	ldr	r3, [r3, #0]
  40228e:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402290:	4b26      	ldr	r3, [pc, #152]	; (40232c <prvSwitchTimerLists+0xb0>)
  402292:	681b      	ldr	r3, [r3, #0]
  402294:	68db      	ldr	r3, [r3, #12]
  402296:	68db      	ldr	r3, [r3, #12]
  402298:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  40229a:	69bb      	ldr	r3, [r7, #24]
  40229c:	3304      	adds	r3, #4
  40229e:	4618      	mov	r0, r3
  4022a0:	4b23      	ldr	r3, [pc, #140]	; (402330 <prvSwitchTimerLists+0xb4>)
  4022a2:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4022a4:	69bb      	ldr	r3, [r7, #24]
  4022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4022a8:	69b8      	ldr	r0, [r7, #24]
  4022aa:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  4022ac:	69bb      	ldr	r3, [r7, #24]
  4022ae:	69db      	ldr	r3, [r3, #28]
  4022b0:	2b01      	cmp	r3, #1
  4022b2:	d127      	bne.n	402304 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4022b4:	69bb      	ldr	r3, [r7, #24]
  4022b6:	699a      	ldr	r2, [r3, #24]
  4022b8:	69fb      	ldr	r3, [r7, #28]
  4022ba:	4413      	add	r3, r2
  4022bc:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  4022be:	697a      	ldr	r2, [r7, #20]
  4022c0:	69fb      	ldr	r3, [r7, #28]
  4022c2:	429a      	cmp	r2, r3
  4022c4:	d90e      	bls.n	4022e4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4022c6:	69bb      	ldr	r3, [r7, #24]
  4022c8:	697a      	ldr	r2, [r7, #20]
  4022ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4022cc:	69bb      	ldr	r3, [r7, #24]
  4022ce:	69ba      	ldr	r2, [r7, #24]
  4022d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4022d2:	4b16      	ldr	r3, [pc, #88]	; (40232c <prvSwitchTimerLists+0xb0>)
  4022d4:	681a      	ldr	r2, [r3, #0]
  4022d6:	69bb      	ldr	r3, [r7, #24]
  4022d8:	3304      	adds	r3, #4
  4022da:	4619      	mov	r1, r3
  4022dc:	4610      	mov	r0, r2
  4022de:	4b15      	ldr	r3, [pc, #84]	; (402334 <prvSwitchTimerLists+0xb8>)
  4022e0:	4798      	blx	r3
  4022e2:	e00f      	b.n	402304 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4022e4:	2300      	movs	r3, #0
  4022e6:	9300      	str	r3, [sp, #0]
  4022e8:	2300      	movs	r3, #0
  4022ea:	69fa      	ldr	r2, [r7, #28]
  4022ec:	2100      	movs	r1, #0
  4022ee:	69b8      	ldr	r0, [r7, #24]
  4022f0:	4c11      	ldr	r4, [pc, #68]	; (402338 <prvSwitchTimerLists+0xbc>)
  4022f2:	47a0      	blx	r4
  4022f4:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  4022f6:	693b      	ldr	r3, [r7, #16]
  4022f8:	2b00      	cmp	r3, #0
  4022fa:	d103      	bne.n	402304 <prvSwitchTimerLists+0x88>
  4022fc:	4b0f      	ldr	r3, [pc, #60]	; (40233c <prvSwitchTimerLists+0xc0>)
  4022fe:	4798      	blx	r3
  402300:	bf00      	nop
  402302:	e7fd      	b.n	402300 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402304:	4b09      	ldr	r3, [pc, #36]	; (40232c <prvSwitchTimerLists+0xb0>)
  402306:	681b      	ldr	r3, [r3, #0]
  402308:	681b      	ldr	r3, [r3, #0]
  40230a:	2b00      	cmp	r3, #0
  40230c:	d1bb      	bne.n	402286 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  40230e:	4b07      	ldr	r3, [pc, #28]	; (40232c <prvSwitchTimerLists+0xb0>)
  402310:	681b      	ldr	r3, [r3, #0]
  402312:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  402314:	4b0a      	ldr	r3, [pc, #40]	; (402340 <prvSwitchTimerLists+0xc4>)
  402316:	681b      	ldr	r3, [r3, #0]
  402318:	4a04      	ldr	r2, [pc, #16]	; (40232c <prvSwitchTimerLists+0xb0>)
  40231a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  40231c:	4a08      	ldr	r2, [pc, #32]	; (402340 <prvSwitchTimerLists+0xc4>)
  40231e:	68fb      	ldr	r3, [r7, #12]
  402320:	6013      	str	r3, [r2, #0]
}
  402322:	bf00      	nop
  402324:	3724      	adds	r7, #36	; 0x24
  402326:	46bd      	mov	sp, r7
  402328:	bd90      	pop	{r4, r7, pc}
  40232a:	bf00      	nop
  40232c:	2040ab3c 	.word	0x2040ab3c
  402330:	0040034d 	.word	0x0040034d
  402334:	004002db 	.word	0x004002db
  402338:	00401e91 	.word	0x00401e91
  40233c:	0040059d 	.word	0x0040059d
  402340:	2040ab40 	.word	0x2040ab40

00402344 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402344:	b580      	push	{r7, lr}
  402346:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402348:	4b0e      	ldr	r3, [pc, #56]	; (402384 <prvCheckForValidListAndQueue+0x40>)
  40234a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40234c:	4b0e      	ldr	r3, [pc, #56]	; (402388 <prvCheckForValidListAndQueue+0x44>)
  40234e:	681b      	ldr	r3, [r3, #0]
  402350:	2b00      	cmp	r3, #0
  402352:	d113      	bne.n	40237c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  402354:	480d      	ldr	r0, [pc, #52]	; (40238c <prvCheckForValidListAndQueue+0x48>)
  402356:	4b0e      	ldr	r3, [pc, #56]	; (402390 <prvCheckForValidListAndQueue+0x4c>)
  402358:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  40235a:	480e      	ldr	r0, [pc, #56]	; (402394 <prvCheckForValidListAndQueue+0x50>)
  40235c:	4b0c      	ldr	r3, [pc, #48]	; (402390 <prvCheckForValidListAndQueue+0x4c>)
  40235e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  402360:	4b0d      	ldr	r3, [pc, #52]	; (402398 <prvCheckForValidListAndQueue+0x54>)
  402362:	4a0a      	ldr	r2, [pc, #40]	; (40238c <prvCheckForValidListAndQueue+0x48>)
  402364:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402366:	4b0d      	ldr	r3, [pc, #52]	; (40239c <prvCheckForValidListAndQueue+0x58>)
  402368:	4a0a      	ldr	r2, [pc, #40]	; (402394 <prvCheckForValidListAndQueue+0x50>)
  40236a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  40236c:	2200      	movs	r2, #0
  40236e:	210c      	movs	r1, #12
  402370:	2005      	movs	r0, #5
  402372:	4b0b      	ldr	r3, [pc, #44]	; (4023a0 <prvCheckForValidListAndQueue+0x5c>)
  402374:	4798      	blx	r3
  402376:	4602      	mov	r2, r0
  402378:	4b03      	ldr	r3, [pc, #12]	; (402388 <prvCheckForValidListAndQueue+0x44>)
  40237a:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  40237c:	4b09      	ldr	r3, [pc, #36]	; (4023a4 <prvCheckForValidListAndQueue+0x60>)
  40237e:	4798      	blx	r3
}
  402380:	bf00      	nop
  402382:	bd80      	pop	{r7, pc}
  402384:	00400555 	.word	0x00400555
  402388:	2040ab44 	.word	0x2040ab44
  40238c:	2040ab14 	.word	0x2040ab14
  402390:	00400231 	.word	0x00400231
  402394:	2040ab28 	.word	0x2040ab28
  402398:	2040ab3c 	.word	0x2040ab3c
  40239c:	2040ab40 	.word	0x2040ab40
  4023a0:	004009f1 	.word	0x004009f1
  4023a4:	00400575 	.word	0x00400575

004023a8 <ppbuf_insert_active>:

#include <string.h>
#include "PingPong.h"


int ppbuf_insert_active(ppbuf_t *p, void *data, int size){
  4023a8:	b480      	push	{r7}
  4023aa:	b089      	sub	sp, #36	; 0x24
  4023ac:	af00      	add	r7, sp, #0
  4023ae:	60f8      	str	r0, [r7, #12]
  4023b0:	60b9      	str	r1, [r7, #8]
  4023b2:	607a      	str	r2, [r7, #4]
	int ret = 0;
  4023b4:	2300      	movs	r3, #0
  4023b6:	61fb      	str	r3, [r7, #28]
	unsigned int *ptr;

	if(p == NULL || data == NULL || size == 0) {
  4023b8:	68fb      	ldr	r3, [r7, #12]
  4023ba:	2b00      	cmp	r3, #0
  4023bc:	d005      	beq.n	4023ca <ppbuf_insert_active+0x22>
  4023be:	68bb      	ldr	r3, [r7, #8]
  4023c0:	2b00      	cmp	r3, #0
  4023c2:	d002      	beq.n	4023ca <ppbuf_insert_active+0x22>
  4023c4:	687b      	ldr	r3, [r7, #4]
  4023c6:	2b00      	cmp	r3, #0
  4023c8:	d103      	bne.n	4023d2 <ppbuf_insert_active+0x2a>
		/* check your parameters */
		ret = -1;
  4023ca:	f04f 33ff 	mov.w	r3, #4294967295
  4023ce:	61fb      	str	r3, [r7, #28]
  4023d0:	e033      	b.n	40243a <ppbuf_insert_active+0x92>
	} else {
		if(size > (p->buffer_size - p->put_index)) {
  4023d2:	68fb      	ldr	r3, [r7, #12]
  4023d4:	689a      	ldr	r2, [r3, #8]
  4023d6:	68fb      	ldr	r3, [r7, #12]
  4023d8:	68db      	ldr	r3, [r3, #12]
  4023da:	1ad2      	subs	r2, r2, r3
  4023dc:	687b      	ldr	r3, [r7, #4]
  4023de:	429a      	cmp	r2, r3
  4023e0:	da03      	bge.n	4023ea <ppbuf_insert_active+0x42>
			/* not enough room for new samples */
			ret = -1;
  4023e2:	f04f 33ff 	mov.w	r3, #4294967295
  4023e6:	61fb      	str	r3, [r7, #28]
  4023e8:	e027      	b.n	40243a <ppbuf_insert_active+0x92>
		} else {
			/* take the current position */
			int mem_position = ((p->ping) * p->buffer_size) + p->put_index;
  4023ea:	68fb      	ldr	r3, [r7, #12]
  4023ec:	791b      	ldrb	r3, [r3, #4]
  4023ee:	461a      	mov	r2, r3
  4023f0:	68fb      	ldr	r3, [r7, #12]
  4023f2:	689b      	ldr	r3, [r3, #8]
  4023f4:	fb03 f202 	mul.w	r2, r3, r2
  4023f8:	68fb      	ldr	r3, [r7, #12]
  4023fa:	68db      	ldr	r3, [r3, #12]
  4023fc:	4413      	add	r3, r2
  4023fe:	61bb      	str	r3, [r7, #24]
			ptr = (unsigned int *)p->buffer_data; //uint8_t
  402400:	68fb      	ldr	r3, [r7, #12]
  402402:	681b      	ldr	r3, [r3, #0]
  402404:	617b      	str	r3, [r7, #20]

			/* copy the contents */
			memcpy(&ptr[mem_position], data, sizeof(int));
  402406:	69bb      	ldr	r3, [r7, #24]
  402408:	009b      	lsls	r3, r3, #2
  40240a:	697a      	ldr	r2, [r7, #20]
  40240c:	4413      	add	r3, r2
  40240e:	68ba      	ldr	r2, [r7, #8]
  402410:	6812      	ldr	r2, [r2, #0]
  402412:	601a      	str	r2, [r3, #0]

			/* update put index */
			p->put_index += size;
  402414:	68fb      	ldr	r3, [r7, #12]
  402416:	68da      	ldr	r2, [r3, #12]
  402418:	687b      	ldr	r3, [r7, #4]
  40241a:	441a      	add	r2, r3
  40241c:	68fb      	ldr	r3, [r7, #12]
  40241e:	60da      	str	r2, [r3, #12]
			p->full_signal = (p->put_index >= p->buffer_size?true:false);
  402420:	68fb      	ldr	r3, [r7, #12]
  402422:	68da      	ldr	r2, [r3, #12]
  402424:	68fb      	ldr	r3, [r7, #12]
  402426:	689b      	ldr	r3, [r3, #8]
  402428:	429a      	cmp	r2, r3
  40242a:	bfac      	ite	ge
  40242c:	2301      	movge	r3, #1
  40242e:	2300      	movlt	r3, #0
  402430:	b2da      	uxtb	r2, r3
  402432:	68fb      	ldr	r3, [r7, #12]
  402434:	751a      	strb	r2, [r3, #20]

			/* swap will only generated when ppbuf_get_full_signal is called */
			ret = 0;
  402436:	2300      	movs	r3, #0
  402438:	61fb      	str	r3, [r7, #28]
		}
	}
	return(ret);
  40243a:	69fb      	ldr	r3, [r7, #28]
}
  40243c:	4618      	mov	r0, r3
  40243e:	3724      	adds	r7, #36	; 0x24
  402440:	46bd      	mov	sp, r7
  402442:	f85d 7b04 	ldr.w	r7, [sp], #4
  402446:	4770      	bx	lr

00402448 <ppbuf_remove_inactive>:

int ppbuf_remove_inactive(ppbuf_t *p, void *data, int size){
  402448:	b480      	push	{r7}
  40244a:	b089      	sub	sp, #36	; 0x24
  40244c:	af00      	add	r7, sp, #0
  40244e:	60f8      	str	r0, [r7, #12]
  402450:	60b9      	str	r1, [r7, #8]
  402452:	607a      	str	r2, [r7, #4]
	int ret = 0;
  402454:	2300      	movs	r3, #0
  402456:	61fb      	str	r3, [r7, #28]
	unsigned int *ptr;

	if(p == NULL || data == NULL || size == 0) {
  402458:	68fb      	ldr	r3, [r7, #12]
  40245a:	2b00      	cmp	r3, #0
  40245c:	d005      	beq.n	40246a <ppbuf_remove_inactive+0x22>
  40245e:	68bb      	ldr	r3, [r7, #8]
  402460:	2b00      	cmp	r3, #0
  402462:	d002      	beq.n	40246a <ppbuf_remove_inactive+0x22>
  402464:	687b      	ldr	r3, [r7, #4]
  402466:	2b00      	cmp	r3, #0
  402468:	d103      	bne.n	402472 <ppbuf_remove_inactive+0x2a>
		/* check your parameters */
		ret = -1;
  40246a:	f04f 33ff 	mov.w	r3, #4294967295
  40246e:	61fb      	str	r3, [r7, #28]
  402470:	e029      	b.n	4024c6 <ppbuf_remove_inactive+0x7e>
	} else {
		if(size > (p->buffer_size - p->get_index)) {
  402472:	68fb      	ldr	r3, [r7, #12]
  402474:	689a      	ldr	r2, [r3, #8]
  402476:	68fb      	ldr	r3, [r7, #12]
  402478:	691b      	ldr	r3, [r3, #16]
  40247a:	1ad2      	subs	r2, r2, r3
  40247c:	687b      	ldr	r3, [r7, #4]
  40247e:	429a      	cmp	r2, r3
  402480:	da03      	bge.n	40248a <ppbuf_remove_inactive+0x42>
			/* not enough data in sample buffer */
			ret = -1;
  402482:	f04f 33ff 	mov.w	r3, #4294967295
  402486:	61fb      	str	r3, [r7, #28]
  402488:	e01d      	b.n	4024c6 <ppbuf_remove_inactive+0x7e>
		} else {
			/* take the current position */
			int mem_position = ((p->pong) * p->buffer_size) + p->get_index;
  40248a:	68fb      	ldr	r3, [r7, #12]
  40248c:	795b      	ldrb	r3, [r3, #5]
  40248e:	461a      	mov	r2, r3
  402490:	68fb      	ldr	r3, [r7, #12]
  402492:	689b      	ldr	r3, [r3, #8]
  402494:	fb03 f202 	mul.w	r2, r3, r2
  402498:	68fb      	ldr	r3, [r7, #12]
  40249a:	691b      	ldr	r3, [r3, #16]
  40249c:	4413      	add	r3, r2
  40249e:	61bb      	str	r3, [r7, #24]
			ptr = (unsigned int *)p->buffer_data;
  4024a0:	68fb      	ldr	r3, [r7, #12]
  4024a2:	681b      	ldr	r3, [r3, #0]
  4024a4:	617b      	str	r3, [r7, #20]

			/* copy the contents */
			memcpy(data,&ptr[mem_position], sizeof(int));
  4024a6:	69bb      	ldr	r3, [r7, #24]
  4024a8:	009b      	lsls	r3, r3, #2
  4024aa:	697a      	ldr	r2, [r7, #20]
  4024ac:	4413      	add	r3, r2
  4024ae:	681b      	ldr	r3, [r3, #0]
  4024b0:	461a      	mov	r2, r3
  4024b2:	68bb      	ldr	r3, [r7, #8]
  4024b4:	601a      	str	r2, [r3, #0]

			/* update put index */
			p->get_index += size;
  4024b6:	68fb      	ldr	r3, [r7, #12]
  4024b8:	691a      	ldr	r2, [r3, #16]
  4024ba:	687b      	ldr	r3, [r7, #4]
  4024bc:	441a      	add	r2, r3
  4024be:	68fb      	ldr	r3, [r7, #12]
  4024c0:	611a      	str	r2, [r3, #16]

			/* when buffer is empty we are not able to extract anymore data */
			ret = 0;
  4024c2:	2300      	movs	r3, #0
  4024c4:	61fb      	str	r3, [r7, #28]
		}
	}
	return(ret);
  4024c6:	69fb      	ldr	r3, [r7, #28]


}
  4024c8:	4618      	mov	r0, r3
  4024ca:	3724      	adds	r7, #36	; 0x24
  4024cc:	46bd      	mov	sp, r7
  4024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024d2:	4770      	bx	lr

004024d4 <ppbuf_get_full_signal>:
		mem_position = ((p->pong) * p->buffer_size) + i;
		p->buffer_data[mem_position] = b[i];
	}
}

bool ppbuf_get_full_signal(ppbuf_t *p, bool consume) {
  4024d4:	b480      	push	{r7}
  4024d6:	b085      	sub	sp, #20
  4024d8:	af00      	add	r7, sp, #0
  4024da:	6078      	str	r0, [r7, #4]
  4024dc:	460b      	mov	r3, r1
  4024de:	70fb      	strb	r3, [r7, #3]
	/* take the last signaled full occurrence */
	bool ret = (p != NULL ? p->full_signal : false);
  4024e0:	687b      	ldr	r3, [r7, #4]
  4024e2:	2b00      	cmp	r3, #0
  4024e4:	d005      	beq.n	4024f2 <ppbuf_get_full_signal+0x1e>
  4024e6:	687b      	ldr	r3, [r7, #4]
  4024e8:	7d1b      	ldrb	r3, [r3, #20]
  4024ea:	2b00      	cmp	r3, #0
  4024ec:	d001      	beq.n	4024f2 <ppbuf_get_full_signal+0x1e>
  4024ee:	2301      	movs	r3, #1
  4024f0:	e000      	b.n	4024f4 <ppbuf_get_full_signal+0x20>
  4024f2:	2300      	movs	r3, #0
  4024f4:	73fb      	strb	r3, [r7, #15]

	if((consume != false) && (p != NULL) && (ret != false)) {
  4024f6:	78fb      	ldrb	r3, [r7, #3]
  4024f8:	2b00      	cmp	r3, #0
  4024fa:	d026      	beq.n	40254a <ppbuf_get_full_signal+0x76>
  4024fc:	687b      	ldr	r3, [r7, #4]
  4024fe:	2b00      	cmp	r3, #0
  402500:	d023      	beq.n	40254a <ppbuf_get_full_signal+0x76>
  402502:	7bfb      	ldrb	r3, [r7, #15]
  402504:	2b00      	cmp	r3, #0
  402506:	d020      	beq.n	40254a <ppbuf_get_full_signal+0x76>
		p->full_signal = false;
  402508:	687b      	ldr	r3, [r7, #4]
  40250a:	2200      	movs	r2, #0
  40250c:	751a      	strb	r2, [r3, #20]

		/* swap the buffer switches */
		p->ping = p->ping ^ p->pong;
  40250e:	687b      	ldr	r3, [r7, #4]
  402510:	791a      	ldrb	r2, [r3, #4]
  402512:	687b      	ldr	r3, [r7, #4]
  402514:	795b      	ldrb	r3, [r3, #5]
  402516:	4053      	eors	r3, r2
  402518:	b2da      	uxtb	r2, r3
  40251a:	687b      	ldr	r3, [r7, #4]
  40251c:	711a      	strb	r2, [r3, #4]
		p->pong = p->pong ^ p->ping;
  40251e:	687b      	ldr	r3, [r7, #4]
  402520:	795a      	ldrb	r2, [r3, #5]
  402522:	687b      	ldr	r3, [r7, #4]
  402524:	791b      	ldrb	r3, [r3, #4]
  402526:	4053      	eors	r3, r2
  402528:	b2da      	uxtb	r2, r3
  40252a:	687b      	ldr	r3, [r7, #4]
  40252c:	715a      	strb	r2, [r3, #5]
		p->ping = p->ping ^ p->pong;
  40252e:	687b      	ldr	r3, [r7, #4]
  402530:	791a      	ldrb	r2, [r3, #4]
  402532:	687b      	ldr	r3, [r7, #4]
  402534:	795b      	ldrb	r3, [r3, #5]
  402536:	4053      	eors	r3, r2
  402538:	b2da      	uxtb	r2, r3
  40253a:	687b      	ldr	r3, [r7, #4]
  40253c:	711a      	strb	r2, [r3, #4]

		/* resets the buffer position */
		p->get_index = 0;
  40253e:	687b      	ldr	r3, [r7, #4]
  402540:	2200      	movs	r2, #0
  402542:	611a      	str	r2, [r3, #16]
		p->put_index = 0;
  402544:	687b      	ldr	r3, [r7, #4]
  402546:	2200      	movs	r2, #0
  402548:	60da      	str	r2, [r3, #12]
		
		//ppbuf_lowpass(p);
		
	}

	return(ret);
  40254a:	7bfb      	ldrb	r3, [r7, #15]
}
  40254c:	4618      	mov	r0, r3
  40254e:	3714      	adds	r7, #20
  402550:	46bd      	mov	sp, r7
  402552:	f85d 7b04 	ldr.w	r7, [sp], #4
  402556:	4770      	bx	lr

00402558 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  402558:	b480      	push	{r7}
  40255a:	b083      	sub	sp, #12
  40255c:	af00      	add	r7, sp, #0
  40255e:	4603      	mov	r3, r0
  402560:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402562:	4909      	ldr	r1, [pc, #36]	; (402588 <NVIC_EnableIRQ+0x30>)
  402564:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402568:	095b      	lsrs	r3, r3, #5
  40256a:	79fa      	ldrb	r2, [r7, #7]
  40256c:	f002 021f 	and.w	r2, r2, #31
  402570:	2001      	movs	r0, #1
  402572:	fa00 f202 	lsl.w	r2, r0, r2
  402576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40257a:	bf00      	nop
  40257c:	370c      	adds	r7, #12
  40257e:	46bd      	mov	sp, r7
  402580:	f85d 7b04 	ldr.w	r7, [sp], #4
  402584:	4770      	bx	lr
  402586:	bf00      	nop
  402588:	e000e100 	.word	0xe000e100

0040258c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40258c:	b480      	push	{r7}
  40258e:	b083      	sub	sp, #12
  402590:	af00      	add	r7, sp, #0
  402592:	4603      	mov	r3, r0
  402594:	6039      	str	r1, [r7, #0]
  402596:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  402598:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40259c:	2b00      	cmp	r3, #0
  40259e:	da0b      	bge.n	4025b8 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4025a0:	490d      	ldr	r1, [pc, #52]	; (4025d8 <NVIC_SetPriority+0x4c>)
  4025a2:	79fb      	ldrb	r3, [r7, #7]
  4025a4:	f003 030f 	and.w	r3, r3, #15
  4025a8:	3b04      	subs	r3, #4
  4025aa:	683a      	ldr	r2, [r7, #0]
  4025ac:	b2d2      	uxtb	r2, r2
  4025ae:	0152      	lsls	r2, r2, #5
  4025b0:	b2d2      	uxtb	r2, r2
  4025b2:	440b      	add	r3, r1
  4025b4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  4025b6:	e009      	b.n	4025cc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4025b8:	4908      	ldr	r1, [pc, #32]	; (4025dc <NVIC_SetPriority+0x50>)
  4025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4025be:	683a      	ldr	r2, [r7, #0]
  4025c0:	b2d2      	uxtb	r2, r2
  4025c2:	0152      	lsls	r2, r2, #5
  4025c4:	b2d2      	uxtb	r2, r2
  4025c6:	440b      	add	r3, r1
  4025c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4025cc:	bf00      	nop
  4025ce:	370c      	adds	r7, #12
  4025d0:	46bd      	mov	sp, r7
  4025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025d6:	4770      	bx	lr
  4025d8:	e000ed00 	.word	0xe000ed00
  4025dc:	e000e100 	.word	0xe000e100

004025e0 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  4025e0:	b480      	push	{r7}
  4025e2:	b083      	sub	sp, #12
  4025e4:	af00      	add	r7, sp, #0
  4025e6:	6078      	str	r0, [r7, #4]
  4025e8:	460b      	mov	r3, r1
  4025ea:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  4025ec:	bf00      	nop
  4025ee:	370c      	adds	r7, #12
  4025f0:	46bd      	mov	sp, r7
  4025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025f6:	4770      	bx	lr

004025f8 <afec_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
  4025f8:	b480      	push	{r7}
  4025fa:	b085      	sub	sp, #20
  4025fc:	af00      	add	r7, sp, #0
  4025fe:	6078      	str	r0, [r7, #4]
  402600:	460b      	mov	r3, r1
  402602:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = afec->AFEC_MR;
  402604:	687b      	ldr	r3, [r7, #4]
  402606:	685b      	ldr	r3, [r3, #4]
  402608:	60fb      	str	r3, [r7, #12]

	if (trigger == AFEC_TRIG_FREERUN) {
  40260a:	78fb      	ldrb	r3, [r7, #3]
  40260c:	2bff      	cmp	r3, #255	; 0xff
  40260e:	d104      	bne.n	40261a <afec_set_trigger+0x22>
		reg |= AFEC_MR_FREERUN_ON;
  402610:	68fb      	ldr	r3, [r7, #12]
  402612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402616:	60fb      	str	r3, [r7, #12]
  402618:	e007      	b.n	40262a <afec_set_trigger+0x32>
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  40261a:	68fb      	ldr	r3, [r7, #12]
  40261c:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  402620:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  402622:	78fb      	ldrb	r3, [r7, #3]
  402624:	68fa      	ldr	r2, [r7, #12]
  402626:	4313      	orrs	r3, r2
  402628:	60fb      	str	r3, [r7, #12]
	}

	afec->AFEC_MR = reg;
  40262a:	687b      	ldr	r3, [r7, #4]
  40262c:	68fa      	ldr	r2, [r7, #12]
  40262e:	605a      	str	r2, [r3, #4]
}
  402630:	bf00      	nop
  402632:	3714      	adds	r7, #20
  402634:	46bd      	mov	sp, r7
  402636:	f85d 7b04 	ldr.w	r7, [sp], #4
  40263a:	4770      	bx	lr

0040263c <afec_start_software_conversion>:
 * this function can NOT start analog to digital conversion.
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
  40263c:	b480      	push	{r7}
  40263e:	b083      	sub	sp, #12
  402640:	af00      	add	r7, sp, #0
  402642:	6078      	str	r0, [r7, #4]
	afec->AFEC_CR = AFEC_CR_START;
  402644:	687b      	ldr	r3, [r7, #4]
  402646:	2202      	movs	r2, #2
  402648:	601a      	str	r2, [r3, #0]
}
  40264a:	bf00      	nop
  40264c:	370c      	adds	r7, #12
  40264e:	46bd      	mov	sp, r7
  402650:	f85d 7b04 	ldr.w	r7, [sp], #4
  402654:	4770      	bx	lr
	...

00402658 <afec_channel_enable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_enable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  402658:	b580      	push	{r7, lr}
  40265a:	b082      	sub	sp, #8
  40265c:	af00      	add	r7, sp, #0
  40265e:	6078      	str	r0, [r7, #4]
  402660:	460b      	mov	r3, r1
  402662:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  402664:	887b      	ldrh	r3, [r7, #2]
  402666:	f640 72ff 	movw	r2, #4095	; 0xfff
  40266a:	4293      	cmp	r3, r2
  40266c:	d004      	beq.n	402678 <afec_channel_enable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  40266e:	887b      	ldrh	r3, [r7, #2]
  402670:	4619      	mov	r1, r3
  402672:	6878      	ldr	r0, [r7, #4]
  402674:	4b0a      	ldr	r3, [pc, #40]	; (4026a0 <afec_channel_enable+0x48>)
  402676:	4798      	blx	r3
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  402678:	887b      	ldrh	r3, [r7, #2]
  40267a:	f640 72ff 	movw	r2, #4095	; 0xfff
  40267e:	4293      	cmp	r3, r2
  402680:	d005      	beq.n	40268e <afec_channel_enable+0x36>
  402682:	887b      	ldrh	r3, [r7, #2]
  402684:	2201      	movs	r2, #1
  402686:	fa02 f303 	lsl.w	r3, r2, r3
  40268a:	461a      	mov	r2, r3
  40268c:	e001      	b.n	402692 <afec_channel_enable+0x3a>
  40268e:	f640 72ff 	movw	r2, #4095	; 0xfff
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402692:	687b      	ldr	r3, [r7, #4]
  402694:	615a      	str	r2, [r3, #20]
}
  402696:	bf00      	nop
  402698:	3708      	adds	r7, #8
  40269a:	46bd      	mov	sp, r7
  40269c:	bd80      	pop	{r7, pc}
  40269e:	bf00      	nop
  4026a0:	004025e1 	.word	0x004025e1

004026a4 <afec_channel_disable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_disable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  4026a4:	b580      	push	{r7, lr}
  4026a6:	b082      	sub	sp, #8
  4026a8:	af00      	add	r7, sp, #0
  4026aa:	6078      	str	r0, [r7, #4]
  4026ac:	460b      	mov	r3, r1
  4026ae:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  4026b0:	887b      	ldrh	r3, [r7, #2]
  4026b2:	f640 72ff 	movw	r2, #4095	; 0xfff
  4026b6:	4293      	cmp	r3, r2
  4026b8:	d004      	beq.n	4026c4 <afec_channel_disable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  4026ba:	887b      	ldrh	r3, [r7, #2]
  4026bc:	4619      	mov	r1, r3
  4026be:	6878      	ldr	r0, [r7, #4]
  4026c0:	4b0a      	ldr	r3, [pc, #40]	; (4026ec <afec_channel_disable+0x48>)
  4026c2:	4798      	blx	r3
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4026c4:	887b      	ldrh	r3, [r7, #2]
  4026c6:	f640 72ff 	movw	r2, #4095	; 0xfff
  4026ca:	4293      	cmp	r3, r2
  4026cc:	d005      	beq.n	4026da <afec_channel_disable+0x36>
  4026ce:	887b      	ldrh	r3, [r7, #2]
  4026d0:	2201      	movs	r2, #1
  4026d2:	fa02 f303 	lsl.w	r3, r2, r3
  4026d6:	461a      	mov	r2, r3
  4026d8:	e001      	b.n	4026de <afec_channel_disable+0x3a>
  4026da:	f640 72ff 	movw	r2, #4095	; 0xfff
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  4026de:	687b      	ldr	r3, [r7, #4]
  4026e0:	619a      	str	r2, [r3, #24]
}
  4026e2:	bf00      	nop
  4026e4:	3708      	adds	r7, #8
  4026e6:	46bd      	mov	sp, r7
  4026e8:	bd80      	pop	{r7, pc}
  4026ea:	bf00      	nop
  4026ec:	004025e1 	.word	0x004025e1

004026f0 <afec_channel_get_value>:
 *
 * \return AFEC converted value of the selected channel.
 */
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
  4026f0:	b580      	push	{r7, lr}
  4026f2:	b082      	sub	sp, #8
  4026f4:	af00      	add	r7, sp, #0
  4026f6:	6078      	str	r0, [r7, #4]
  4026f8:	460b      	mov	r3, r1
  4026fa:	807b      	strh	r3, [r7, #2]
	afec_ch_sanity_check(afec, afec_ch);
  4026fc:	887b      	ldrh	r3, [r7, #2]
  4026fe:	4619      	mov	r1, r3
  402700:	6878      	ldr	r0, [r7, #4]
  402702:	4b05      	ldr	r3, [pc, #20]	; (402718 <afec_channel_get_value+0x28>)
  402704:	4798      	blx	r3

	afec->AFEC_CSELR = afec_ch;
  402706:	887a      	ldrh	r2, [r7, #2]
  402708:	687b      	ldr	r3, [r7, #4]
  40270a:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  40270c:	687b      	ldr	r3, [r7, #4]
  40270e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
  402710:	4618      	mov	r0, r3
  402712:	3708      	adds	r7, #8
  402714:	46bd      	mov	sp, r7
  402716:	bd80      	pop	{r7, pc}
  402718:	004025e1 	.word	0x004025e1

0040271c <afec_channel_set_analog_offset>:
 * \param afec_ch AFEC channel number.
 * \param aoffset  Analog offset value.
 */
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
  40271c:	b580      	push	{r7, lr}
  40271e:	b082      	sub	sp, #8
  402720:	af00      	add	r7, sp, #0
  402722:	6078      	str	r0, [r7, #4]
  402724:	460b      	mov	r3, r1
  402726:	807b      	strh	r3, [r7, #2]
  402728:	4613      	mov	r3, r2
  40272a:	803b      	strh	r3, [r7, #0]
	afec_ch_sanity_check(afec, afec_ch);
  40272c:	887b      	ldrh	r3, [r7, #2]
  40272e:	4619      	mov	r1, r3
  402730:	6878      	ldr	r0, [r7, #4]
  402732:	4b07      	ldr	r3, [pc, #28]	; (402750 <afec_channel_set_analog_offset+0x34>)
  402734:	4798      	blx	r3

	afec->AFEC_CSELR = afec_ch;
  402736:	887a      	ldrh	r2, [r7, #2]
  402738:	687b      	ldr	r3, [r7, #4]
  40273a:	665a      	str	r2, [r3, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40273c:	883b      	ldrh	r3, [r7, #0]
  40273e:	f3c3 020b 	ubfx	r2, r3, #0, #12
  402742:	687b      	ldr	r3, [r7, #4]
  402744:	66da      	str	r2, [r3, #108]	; 0x6c
}
  402746:	bf00      	nop
  402748:	3708      	adds	r7, #8
  40274a:	46bd      	mov	sp, r7
  40274c:	bd80      	pop	{r7, pc}
  40274e:	bf00      	nop
  402750:	004025e1 	.word	0x004025e1

00402754 <osc_get_rate>:
{
  402754:	b480      	push	{r7}
  402756:	b083      	sub	sp, #12
  402758:	af00      	add	r7, sp, #0
  40275a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40275c:	687b      	ldr	r3, [r7, #4]
  40275e:	2b07      	cmp	r3, #7
  402760:	d825      	bhi.n	4027ae <osc_get_rate+0x5a>
  402762:	a201      	add	r2, pc, #4	; (adr r2, 402768 <osc_get_rate+0x14>)
  402764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402768:	00402789 	.word	0x00402789
  40276c:	0040278f 	.word	0x0040278f
  402770:	00402795 	.word	0x00402795
  402774:	0040279b 	.word	0x0040279b
  402778:	0040279f 	.word	0x0040279f
  40277c:	004027a3 	.word	0x004027a3
  402780:	004027a7 	.word	0x004027a7
  402784:	004027ab 	.word	0x004027ab
		return OSC_SLCK_32K_RC_HZ;
  402788:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40278c:	e010      	b.n	4027b0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40278e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402792:	e00d      	b.n	4027b0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  402794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402798:	e00a      	b.n	4027b0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40279a:	4b08      	ldr	r3, [pc, #32]	; (4027bc <osc_get_rate+0x68>)
  40279c:	e008      	b.n	4027b0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40279e:	4b08      	ldr	r3, [pc, #32]	; (4027c0 <osc_get_rate+0x6c>)
  4027a0:	e006      	b.n	4027b0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4027a2:	4b08      	ldr	r3, [pc, #32]	; (4027c4 <osc_get_rate+0x70>)
  4027a4:	e004      	b.n	4027b0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4027a6:	4b07      	ldr	r3, [pc, #28]	; (4027c4 <osc_get_rate+0x70>)
  4027a8:	e002      	b.n	4027b0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4027aa:	4b06      	ldr	r3, [pc, #24]	; (4027c4 <osc_get_rate+0x70>)
  4027ac:	e000      	b.n	4027b0 <osc_get_rate+0x5c>
	return 0;
  4027ae:	2300      	movs	r3, #0
}
  4027b0:	4618      	mov	r0, r3
  4027b2:	370c      	adds	r7, #12
  4027b4:	46bd      	mov	sp, r7
  4027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027ba:	4770      	bx	lr
  4027bc:	003d0900 	.word	0x003d0900
  4027c0:	007a1200 	.word	0x007a1200
  4027c4:	00b71b00 	.word	0x00b71b00

004027c8 <sysclk_get_main_hz>:
{
  4027c8:	b580      	push	{r7, lr}
  4027ca:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4027cc:	2006      	movs	r0, #6
  4027ce:	4b05      	ldr	r3, [pc, #20]	; (4027e4 <sysclk_get_main_hz+0x1c>)
  4027d0:	4798      	blx	r3
  4027d2:	4602      	mov	r2, r0
  4027d4:	4613      	mov	r3, r2
  4027d6:	009b      	lsls	r3, r3, #2
  4027d8:	4413      	add	r3, r2
  4027da:	009a      	lsls	r2, r3, #2
  4027dc:	4413      	add	r3, r2
}
  4027de:	4618      	mov	r0, r3
  4027e0:	bd80      	pop	{r7, pc}
  4027e2:	bf00      	nop
  4027e4:	00402755 	.word	0x00402755

004027e8 <sysclk_get_cpu_hz>:
{
  4027e8:	b580      	push	{r7, lr}
  4027ea:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4027ec:	4b02      	ldr	r3, [pc, #8]	; (4027f8 <sysclk_get_cpu_hz+0x10>)
  4027ee:	4798      	blx	r3
  4027f0:	4603      	mov	r3, r0
}
  4027f2:	4618      	mov	r0, r3
  4027f4:	bd80      	pop	{r7, pc}
  4027f6:	bf00      	nop
  4027f8:	004027c9 	.word	0x004027c9

004027fc <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  4027fc:	b580      	push	{r7, lr}
  4027fe:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402800:	4b02      	ldr	r3, [pc, #8]	; (40280c <sysclk_get_peripheral_hz+0x10>)
  402802:	4798      	blx	r3
  402804:	4603      	mov	r3, r0
  402806:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  402808:	4618      	mov	r0, r3
  40280a:	bd80      	pop	{r7, pc}
  40280c:	004027c9 	.word	0x004027c9

00402810 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402810:	b580      	push	{r7, lr}
  402812:	b082      	sub	sp, #8
  402814:	af00      	add	r7, sp, #0
  402816:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402818:	6878      	ldr	r0, [r7, #4]
  40281a:	4b03      	ldr	r3, [pc, #12]	; (402828 <sysclk_enable_peripheral_clock+0x18>)
  40281c:	4798      	blx	r3
}
  40281e:	bf00      	nop
  402820:	3708      	adds	r7, #8
  402822:	46bd      	mov	sp, r7
  402824:	bd80      	pop	{r7, pc}
  402826:	bf00      	nop
  402828:	0040598d 	.word	0x0040598d

0040282c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40282c:	b580      	push	{r7, lr}
  40282e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  402830:	200a      	movs	r0, #10
  402832:	4b08      	ldr	r3, [pc, #32]	; (402854 <ioport_init+0x28>)
  402834:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  402836:	200b      	movs	r0, #11
  402838:	4b06      	ldr	r3, [pc, #24]	; (402854 <ioport_init+0x28>)
  40283a:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  40283c:	200c      	movs	r0, #12
  40283e:	4b05      	ldr	r3, [pc, #20]	; (402854 <ioport_init+0x28>)
  402840:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  402842:	2010      	movs	r0, #16
  402844:	4b03      	ldr	r3, [pc, #12]	; (402854 <ioport_init+0x28>)
  402846:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  402848:	2011      	movs	r0, #17
  40284a:	4b02      	ldr	r3, [pc, #8]	; (402854 <ioport_init+0x28>)
  40284c:	4798      	blx	r3
	arch_ioport_init();
}
  40284e:	bf00      	nop
  402850:	bd80      	pop	{r7, pc}
  402852:	bf00      	nop
  402854:	00402811 	.word	0x00402811

00402858 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  402858:	b580      	push	{r7, lr}
  40285a:	b08c      	sub	sp, #48	; 0x30
  40285c:	af00      	add	r7, sp, #0
  40285e:	6078      	str	r0, [r7, #4]
  402860:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  402862:	4b49      	ldr	r3, [pc, #292]	; (402988 <usart_serial_init+0x130>)
  402864:	4798      	blx	r3
  402866:	4603      	mov	r3, r0
  402868:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40286a:	683b      	ldr	r3, [r7, #0]
  40286c:	681b      	ldr	r3, [r3, #0]
  40286e:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  402870:	683b      	ldr	r3, [r7, #0]
  402872:	689b      	ldr	r3, [r3, #8]
  402874:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  402876:	683b      	ldr	r3, [r7, #0]
  402878:	681b      	ldr	r3, [r3, #0]
  40287a:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  40287c:	683b      	ldr	r3, [r7, #0]
  40287e:	685b      	ldr	r3, [r3, #4]
  402880:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  402882:	683b      	ldr	r3, [r7, #0]
  402884:	689b      	ldr	r3, [r3, #8]
  402886:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  402888:	683b      	ldr	r3, [r7, #0]
  40288a:	68db      	ldr	r3, [r3, #12]
  40288c:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40288e:	2300      	movs	r3, #0
  402890:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402892:	687b      	ldr	r3, [r7, #4]
  402894:	4a3d      	ldr	r2, [pc, #244]	; (40298c <usart_serial_init+0x134>)
  402896:	4293      	cmp	r3, r2
  402898:	d108      	bne.n	4028ac <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  40289a:	2007      	movs	r0, #7
  40289c:	4b3c      	ldr	r3, [pc, #240]	; (402990 <usart_serial_init+0x138>)
  40289e:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4028a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4028a4:	4619      	mov	r1, r3
  4028a6:	6878      	ldr	r0, [r7, #4]
  4028a8:	4b3a      	ldr	r3, [pc, #232]	; (402994 <usart_serial_init+0x13c>)
  4028aa:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4028ac:	687b      	ldr	r3, [r7, #4]
  4028ae:	4a3a      	ldr	r2, [pc, #232]	; (402998 <usart_serial_init+0x140>)
  4028b0:	4293      	cmp	r3, r2
  4028b2:	d108      	bne.n	4028c6 <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  4028b4:	2008      	movs	r0, #8
  4028b6:	4b36      	ldr	r3, [pc, #216]	; (402990 <usart_serial_init+0x138>)
  4028b8:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4028ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4028be:	4619      	mov	r1, r3
  4028c0:	6878      	ldr	r0, [r7, #4]
  4028c2:	4b34      	ldr	r3, [pc, #208]	; (402994 <usart_serial_init+0x13c>)
  4028c4:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4028c6:	687b      	ldr	r3, [r7, #4]
  4028c8:	4a34      	ldr	r2, [pc, #208]	; (40299c <usart_serial_init+0x144>)
  4028ca:	4293      	cmp	r3, r2
  4028cc:	d108      	bne.n	4028e0 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  4028ce:	202c      	movs	r0, #44	; 0x2c
  4028d0:	4b2f      	ldr	r3, [pc, #188]	; (402990 <usart_serial_init+0x138>)
  4028d2:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4028d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4028d8:	4619      	mov	r1, r3
  4028da:	6878      	ldr	r0, [r7, #4]
  4028dc:	4b2d      	ldr	r3, [pc, #180]	; (402994 <usart_serial_init+0x13c>)
  4028de:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4028e0:	687b      	ldr	r3, [r7, #4]
  4028e2:	4a2f      	ldr	r2, [pc, #188]	; (4029a0 <usart_serial_init+0x148>)
  4028e4:	4293      	cmp	r3, r2
  4028e6:	d108      	bne.n	4028fa <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  4028e8:	202d      	movs	r0, #45	; 0x2d
  4028ea:	4b29      	ldr	r3, [pc, #164]	; (402990 <usart_serial_init+0x138>)
  4028ec:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4028ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4028f2:	4619      	mov	r1, r3
  4028f4:	6878      	ldr	r0, [r7, #4]
  4028f6:	4b27      	ldr	r3, [pc, #156]	; (402994 <usart_serial_init+0x13c>)
  4028f8:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4028fa:	687b      	ldr	r3, [r7, #4]
  4028fc:	4a29      	ldr	r2, [pc, #164]	; (4029a4 <usart_serial_init+0x14c>)
  4028fe:	4293      	cmp	r3, r2
  402900:	d111      	bne.n	402926 <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  402902:	200d      	movs	r0, #13
  402904:	4b22      	ldr	r3, [pc, #136]	; (402990 <usart_serial_init+0x138>)
  402906:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402908:	4b1f      	ldr	r3, [pc, #124]	; (402988 <usart_serial_init+0x130>)
  40290a:	4798      	blx	r3
  40290c:	4602      	mov	r2, r0
  40290e:	f107 030c 	add.w	r3, r7, #12
  402912:	4619      	mov	r1, r3
  402914:	6878      	ldr	r0, [r7, #4]
  402916:	4b24      	ldr	r3, [pc, #144]	; (4029a8 <usart_serial_init+0x150>)
  402918:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40291a:	6878      	ldr	r0, [r7, #4]
  40291c:	4b23      	ldr	r3, [pc, #140]	; (4029ac <usart_serial_init+0x154>)
  40291e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402920:	6878      	ldr	r0, [r7, #4]
  402922:	4b23      	ldr	r3, [pc, #140]	; (4029b0 <usart_serial_init+0x158>)
  402924:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402926:	687b      	ldr	r3, [r7, #4]
  402928:	4a22      	ldr	r2, [pc, #136]	; (4029b4 <usart_serial_init+0x15c>)
  40292a:	4293      	cmp	r3, r2
  40292c:	d111      	bne.n	402952 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  40292e:	200e      	movs	r0, #14
  402930:	4b17      	ldr	r3, [pc, #92]	; (402990 <usart_serial_init+0x138>)
  402932:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402934:	4b14      	ldr	r3, [pc, #80]	; (402988 <usart_serial_init+0x130>)
  402936:	4798      	blx	r3
  402938:	4602      	mov	r2, r0
  40293a:	f107 030c 	add.w	r3, r7, #12
  40293e:	4619      	mov	r1, r3
  402940:	6878      	ldr	r0, [r7, #4]
  402942:	4b19      	ldr	r3, [pc, #100]	; (4029a8 <usart_serial_init+0x150>)
  402944:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402946:	6878      	ldr	r0, [r7, #4]
  402948:	4b18      	ldr	r3, [pc, #96]	; (4029ac <usart_serial_init+0x154>)
  40294a:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40294c:	6878      	ldr	r0, [r7, #4]
  40294e:	4b18      	ldr	r3, [pc, #96]	; (4029b0 <usart_serial_init+0x158>)
  402950:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402952:	687b      	ldr	r3, [r7, #4]
  402954:	4a18      	ldr	r2, [pc, #96]	; (4029b8 <usart_serial_init+0x160>)
  402956:	4293      	cmp	r3, r2
  402958:	d111      	bne.n	40297e <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  40295a:	200f      	movs	r0, #15
  40295c:	4b0c      	ldr	r3, [pc, #48]	; (402990 <usart_serial_init+0x138>)
  40295e:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402960:	4b09      	ldr	r3, [pc, #36]	; (402988 <usart_serial_init+0x130>)
  402962:	4798      	blx	r3
  402964:	4602      	mov	r2, r0
  402966:	f107 030c 	add.w	r3, r7, #12
  40296a:	4619      	mov	r1, r3
  40296c:	6878      	ldr	r0, [r7, #4]
  40296e:	4b0e      	ldr	r3, [pc, #56]	; (4029a8 <usart_serial_init+0x150>)
  402970:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402972:	6878      	ldr	r0, [r7, #4]
  402974:	4b0d      	ldr	r3, [pc, #52]	; (4029ac <usart_serial_init+0x154>)
  402976:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402978:	6878      	ldr	r0, [r7, #4]
  40297a:	4b0d      	ldr	r3, [pc, #52]	; (4029b0 <usart_serial_init+0x158>)
  40297c:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  40297e:	bf00      	nop
  402980:	3730      	adds	r7, #48	; 0x30
  402982:	46bd      	mov	sp, r7
  402984:	bd80      	pop	{r7, pc}
  402986:	bf00      	nop
  402988:	004027fd 	.word	0x004027fd
  40298c:	400e0800 	.word	0x400e0800
  402990:	00402811 	.word	0x00402811
  402994:	00405a11 	.word	0x00405a11
  402998:	400e0a00 	.word	0x400e0a00
  40299c:	400e1a00 	.word	0x400e1a00
  4029a0:	400e1c00 	.word	0x400e1c00
  4029a4:	40024000 	.word	0x40024000
  4029a8:	00405ba9 	.word	0x00405ba9
  4029ac:	00405c2d 	.word	0x00405c2d
  4029b0:	00405c61 	.word	0x00405c61
  4029b4:	40028000 	.word	0x40028000
  4029b8:	4002c000 	.word	0x4002c000

004029bc <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4029bc:	b580      	push	{r7, lr}
  4029be:	b082      	sub	sp, #8
  4029c0:	af00      	add	r7, sp, #0
  4029c2:	6078      	str	r0, [r7, #4]
  4029c4:	460b      	mov	r3, r1
  4029c6:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4029c8:	687b      	ldr	r3, [r7, #4]
  4029ca:	4a36      	ldr	r2, [pc, #216]	; (402aa4 <usart_serial_putchar+0xe8>)
  4029cc:	4293      	cmp	r3, r2
  4029ce:	d10a      	bne.n	4029e6 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4029d0:	bf00      	nop
  4029d2:	78fb      	ldrb	r3, [r7, #3]
  4029d4:	4619      	mov	r1, r3
  4029d6:	6878      	ldr	r0, [r7, #4]
  4029d8:	4b33      	ldr	r3, [pc, #204]	; (402aa8 <usart_serial_putchar+0xec>)
  4029da:	4798      	blx	r3
  4029dc:	4603      	mov	r3, r0
  4029de:	2b00      	cmp	r3, #0
  4029e0:	d1f7      	bne.n	4029d2 <usart_serial_putchar+0x16>
		return 1;
  4029e2:	2301      	movs	r3, #1
  4029e4:	e05a      	b.n	402a9c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4029e6:	687b      	ldr	r3, [r7, #4]
  4029e8:	4a30      	ldr	r2, [pc, #192]	; (402aac <usart_serial_putchar+0xf0>)
  4029ea:	4293      	cmp	r3, r2
  4029ec:	d10a      	bne.n	402a04 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  4029ee:	bf00      	nop
  4029f0:	78fb      	ldrb	r3, [r7, #3]
  4029f2:	4619      	mov	r1, r3
  4029f4:	6878      	ldr	r0, [r7, #4]
  4029f6:	4b2c      	ldr	r3, [pc, #176]	; (402aa8 <usart_serial_putchar+0xec>)
  4029f8:	4798      	blx	r3
  4029fa:	4603      	mov	r3, r0
  4029fc:	2b00      	cmp	r3, #0
  4029fe:	d1f7      	bne.n	4029f0 <usart_serial_putchar+0x34>
		return 1;
  402a00:	2301      	movs	r3, #1
  402a02:	e04b      	b.n	402a9c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402a04:	687b      	ldr	r3, [r7, #4]
  402a06:	4a2a      	ldr	r2, [pc, #168]	; (402ab0 <usart_serial_putchar+0xf4>)
  402a08:	4293      	cmp	r3, r2
  402a0a:	d10a      	bne.n	402a22 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  402a0c:	bf00      	nop
  402a0e:	78fb      	ldrb	r3, [r7, #3]
  402a10:	4619      	mov	r1, r3
  402a12:	6878      	ldr	r0, [r7, #4]
  402a14:	4b24      	ldr	r3, [pc, #144]	; (402aa8 <usart_serial_putchar+0xec>)
  402a16:	4798      	blx	r3
  402a18:	4603      	mov	r3, r0
  402a1a:	2b00      	cmp	r3, #0
  402a1c:	d1f7      	bne.n	402a0e <usart_serial_putchar+0x52>
		return 1;
  402a1e:	2301      	movs	r3, #1
  402a20:	e03c      	b.n	402a9c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402a22:	687b      	ldr	r3, [r7, #4]
  402a24:	4a23      	ldr	r2, [pc, #140]	; (402ab4 <usart_serial_putchar+0xf8>)
  402a26:	4293      	cmp	r3, r2
  402a28:	d10a      	bne.n	402a40 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  402a2a:	bf00      	nop
  402a2c:	78fb      	ldrb	r3, [r7, #3]
  402a2e:	4619      	mov	r1, r3
  402a30:	6878      	ldr	r0, [r7, #4]
  402a32:	4b1d      	ldr	r3, [pc, #116]	; (402aa8 <usart_serial_putchar+0xec>)
  402a34:	4798      	blx	r3
  402a36:	4603      	mov	r3, r0
  402a38:	2b00      	cmp	r3, #0
  402a3a:	d1f7      	bne.n	402a2c <usart_serial_putchar+0x70>
		return 1;
  402a3c:	2301      	movs	r3, #1
  402a3e:	e02d      	b.n	402a9c <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402a40:	687b      	ldr	r3, [r7, #4]
  402a42:	4a1d      	ldr	r2, [pc, #116]	; (402ab8 <usart_serial_putchar+0xfc>)
  402a44:	4293      	cmp	r3, r2
  402a46:	d10a      	bne.n	402a5e <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  402a48:	bf00      	nop
  402a4a:	78fb      	ldrb	r3, [r7, #3]
  402a4c:	4619      	mov	r1, r3
  402a4e:	6878      	ldr	r0, [r7, #4]
  402a50:	4b1a      	ldr	r3, [pc, #104]	; (402abc <usart_serial_putchar+0x100>)
  402a52:	4798      	blx	r3
  402a54:	4603      	mov	r3, r0
  402a56:	2b00      	cmp	r3, #0
  402a58:	d1f7      	bne.n	402a4a <usart_serial_putchar+0x8e>
		return 1;
  402a5a:	2301      	movs	r3, #1
  402a5c:	e01e      	b.n	402a9c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402a5e:	687b      	ldr	r3, [r7, #4]
  402a60:	4a17      	ldr	r2, [pc, #92]	; (402ac0 <usart_serial_putchar+0x104>)
  402a62:	4293      	cmp	r3, r2
  402a64:	d10a      	bne.n	402a7c <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  402a66:	bf00      	nop
  402a68:	78fb      	ldrb	r3, [r7, #3]
  402a6a:	4619      	mov	r1, r3
  402a6c:	6878      	ldr	r0, [r7, #4]
  402a6e:	4b13      	ldr	r3, [pc, #76]	; (402abc <usart_serial_putchar+0x100>)
  402a70:	4798      	blx	r3
  402a72:	4603      	mov	r3, r0
  402a74:	2b00      	cmp	r3, #0
  402a76:	d1f7      	bne.n	402a68 <usart_serial_putchar+0xac>
		return 1;
  402a78:	2301      	movs	r3, #1
  402a7a:	e00f      	b.n	402a9c <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402a7c:	687b      	ldr	r3, [r7, #4]
  402a7e:	4a11      	ldr	r2, [pc, #68]	; (402ac4 <usart_serial_putchar+0x108>)
  402a80:	4293      	cmp	r3, r2
  402a82:	d10a      	bne.n	402a9a <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  402a84:	bf00      	nop
  402a86:	78fb      	ldrb	r3, [r7, #3]
  402a88:	4619      	mov	r1, r3
  402a8a:	6878      	ldr	r0, [r7, #4]
  402a8c:	4b0b      	ldr	r3, [pc, #44]	; (402abc <usart_serial_putchar+0x100>)
  402a8e:	4798      	blx	r3
  402a90:	4603      	mov	r3, r0
  402a92:	2b00      	cmp	r3, #0
  402a94:	d1f7      	bne.n	402a86 <usart_serial_putchar+0xca>
		return 1;
  402a96:	2301      	movs	r3, #1
  402a98:	e000      	b.n	402a9c <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402a9a:	2300      	movs	r3, #0
}
  402a9c:	4618      	mov	r0, r3
  402a9e:	3708      	adds	r7, #8
  402aa0:	46bd      	mov	sp, r7
  402aa2:	bd80      	pop	{r7, pc}
  402aa4:	400e0800 	.word	0x400e0800
  402aa8:	00405a69 	.word	0x00405a69
  402aac:	400e0a00 	.word	0x400e0a00
  402ab0:	400e1a00 	.word	0x400e1a00
  402ab4:	400e1c00 	.word	0x400e1c00
  402ab8:	40024000 	.word	0x40024000
  402abc:	00405ccd 	.word	0x00405ccd
  402ac0:	40028000 	.word	0x40028000
  402ac4:	4002c000 	.word	0x4002c000

00402ac8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402ac8:	b580      	push	{r7, lr}
  402aca:	b084      	sub	sp, #16
  402acc:	af00      	add	r7, sp, #0
  402ace:	6078      	str	r0, [r7, #4]
  402ad0:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  402ad2:	2300      	movs	r3, #0
  402ad4:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402ad6:	687b      	ldr	r3, [r7, #4]
  402ad8:	4a34      	ldr	r2, [pc, #208]	; (402bac <usart_serial_getchar+0xe4>)
  402ada:	4293      	cmp	r3, r2
  402adc:	d107      	bne.n	402aee <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  402ade:	bf00      	nop
  402ae0:	6839      	ldr	r1, [r7, #0]
  402ae2:	6878      	ldr	r0, [r7, #4]
  402ae4:	4b32      	ldr	r3, [pc, #200]	; (402bb0 <usart_serial_getchar+0xe8>)
  402ae6:	4798      	blx	r3
  402ae8:	4603      	mov	r3, r0
  402aea:	2b00      	cmp	r3, #0
  402aec:	d1f8      	bne.n	402ae0 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402aee:	687b      	ldr	r3, [r7, #4]
  402af0:	4a30      	ldr	r2, [pc, #192]	; (402bb4 <usart_serial_getchar+0xec>)
  402af2:	4293      	cmp	r3, r2
  402af4:	d107      	bne.n	402b06 <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  402af6:	bf00      	nop
  402af8:	6839      	ldr	r1, [r7, #0]
  402afa:	6878      	ldr	r0, [r7, #4]
  402afc:	4b2c      	ldr	r3, [pc, #176]	; (402bb0 <usart_serial_getchar+0xe8>)
  402afe:	4798      	blx	r3
  402b00:	4603      	mov	r3, r0
  402b02:	2b00      	cmp	r3, #0
  402b04:	d1f8      	bne.n	402af8 <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402b06:	687b      	ldr	r3, [r7, #4]
  402b08:	4a2b      	ldr	r2, [pc, #172]	; (402bb8 <usart_serial_getchar+0xf0>)
  402b0a:	4293      	cmp	r3, r2
  402b0c:	d107      	bne.n	402b1e <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  402b0e:	bf00      	nop
  402b10:	6839      	ldr	r1, [r7, #0]
  402b12:	6878      	ldr	r0, [r7, #4]
  402b14:	4b26      	ldr	r3, [pc, #152]	; (402bb0 <usart_serial_getchar+0xe8>)
  402b16:	4798      	blx	r3
  402b18:	4603      	mov	r3, r0
  402b1a:	2b00      	cmp	r3, #0
  402b1c:	d1f8      	bne.n	402b10 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402b1e:	687b      	ldr	r3, [r7, #4]
  402b20:	4a26      	ldr	r2, [pc, #152]	; (402bbc <usart_serial_getchar+0xf4>)
  402b22:	4293      	cmp	r3, r2
  402b24:	d107      	bne.n	402b36 <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  402b26:	bf00      	nop
  402b28:	6839      	ldr	r1, [r7, #0]
  402b2a:	6878      	ldr	r0, [r7, #4]
  402b2c:	4b20      	ldr	r3, [pc, #128]	; (402bb0 <usart_serial_getchar+0xe8>)
  402b2e:	4798      	blx	r3
  402b30:	4603      	mov	r3, r0
  402b32:	2b00      	cmp	r3, #0
  402b34:	d1f8      	bne.n	402b28 <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402b36:	687b      	ldr	r3, [r7, #4]
  402b38:	4a21      	ldr	r2, [pc, #132]	; (402bc0 <usart_serial_getchar+0xf8>)
  402b3a:	4293      	cmp	r3, r2
  402b3c:	d10d      	bne.n	402b5a <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  402b3e:	bf00      	nop
  402b40:	f107 030c 	add.w	r3, r7, #12
  402b44:	4619      	mov	r1, r3
  402b46:	6878      	ldr	r0, [r7, #4]
  402b48:	4b1e      	ldr	r3, [pc, #120]	; (402bc4 <usart_serial_getchar+0xfc>)
  402b4a:	4798      	blx	r3
  402b4c:	4603      	mov	r3, r0
  402b4e:	2b00      	cmp	r3, #0
  402b50:	d1f6      	bne.n	402b40 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  402b52:	68fb      	ldr	r3, [r7, #12]
  402b54:	b2da      	uxtb	r2, r3
  402b56:	683b      	ldr	r3, [r7, #0]
  402b58:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402b5a:	687b      	ldr	r3, [r7, #4]
  402b5c:	4a1a      	ldr	r2, [pc, #104]	; (402bc8 <usart_serial_getchar+0x100>)
  402b5e:	4293      	cmp	r3, r2
  402b60:	d10d      	bne.n	402b7e <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  402b62:	bf00      	nop
  402b64:	f107 030c 	add.w	r3, r7, #12
  402b68:	4619      	mov	r1, r3
  402b6a:	6878      	ldr	r0, [r7, #4]
  402b6c:	4b15      	ldr	r3, [pc, #84]	; (402bc4 <usart_serial_getchar+0xfc>)
  402b6e:	4798      	blx	r3
  402b70:	4603      	mov	r3, r0
  402b72:	2b00      	cmp	r3, #0
  402b74:	d1f6      	bne.n	402b64 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  402b76:	68fb      	ldr	r3, [r7, #12]
  402b78:	b2da      	uxtb	r2, r3
  402b7a:	683b      	ldr	r3, [r7, #0]
  402b7c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402b7e:	687b      	ldr	r3, [r7, #4]
  402b80:	4a12      	ldr	r2, [pc, #72]	; (402bcc <usart_serial_getchar+0x104>)
  402b82:	4293      	cmp	r3, r2
  402b84:	d10d      	bne.n	402ba2 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  402b86:	bf00      	nop
  402b88:	f107 030c 	add.w	r3, r7, #12
  402b8c:	4619      	mov	r1, r3
  402b8e:	6878      	ldr	r0, [r7, #4]
  402b90:	4b0c      	ldr	r3, [pc, #48]	; (402bc4 <usart_serial_getchar+0xfc>)
  402b92:	4798      	blx	r3
  402b94:	4603      	mov	r3, r0
  402b96:	2b00      	cmp	r3, #0
  402b98:	d1f6      	bne.n	402b88 <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  402b9a:	68fb      	ldr	r3, [r7, #12]
  402b9c:	b2da      	uxtb	r2, r3
  402b9e:	683b      	ldr	r3, [r7, #0]
  402ba0:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402ba2:	bf00      	nop
  402ba4:	3710      	adds	r7, #16
  402ba6:	46bd      	mov	sp, r7
  402ba8:	bd80      	pop	{r7, pc}
  402baa:	bf00      	nop
  402bac:	400e0800 	.word	0x400e0800
  402bb0:	00405a99 	.word	0x00405a99
  402bb4:	400e0a00 	.word	0x400e0a00
  402bb8:	400e1a00 	.word	0x400e1a00
  402bbc:	400e1c00 	.word	0x400e1c00
  402bc0:	40024000 	.word	0x40024000
  402bc4:	00405cff 	.word	0x00405cff
  402bc8:	40028000 	.word	0x40028000
  402bcc:	4002c000 	.word	0x4002c000

00402bd0 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  402bd0:	b580      	push	{r7, lr}
  402bd2:	b082      	sub	sp, #8
  402bd4:	af00      	add	r7, sp, #0
  402bd6:	6078      	str	r0, [r7, #4]
  402bd8:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  402bda:	4a0f      	ldr	r2, [pc, #60]	; (402c18 <stdio_serial_init+0x48>)
  402bdc:	687b      	ldr	r3, [r7, #4]
  402bde:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402be0:	4b0e      	ldr	r3, [pc, #56]	; (402c1c <stdio_serial_init+0x4c>)
  402be2:	4a0f      	ldr	r2, [pc, #60]	; (402c20 <stdio_serial_init+0x50>)
  402be4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402be6:	4b0f      	ldr	r3, [pc, #60]	; (402c24 <stdio_serial_init+0x54>)
  402be8:	4a0f      	ldr	r2, [pc, #60]	; (402c28 <stdio_serial_init+0x58>)
  402bea:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  402bec:	6839      	ldr	r1, [r7, #0]
  402bee:	6878      	ldr	r0, [r7, #4]
  402bf0:	4b0e      	ldr	r3, [pc, #56]	; (402c2c <stdio_serial_init+0x5c>)
  402bf2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402bf4:	4b0e      	ldr	r3, [pc, #56]	; (402c30 <stdio_serial_init+0x60>)
  402bf6:	681b      	ldr	r3, [r3, #0]
  402bf8:	689b      	ldr	r3, [r3, #8]
  402bfa:	2100      	movs	r1, #0
  402bfc:	4618      	mov	r0, r3
  402bfe:	4b0d      	ldr	r3, [pc, #52]	; (402c34 <stdio_serial_init+0x64>)
  402c00:	4798      	blx	r3
	setbuf(stdin, NULL);
  402c02:	4b0b      	ldr	r3, [pc, #44]	; (402c30 <stdio_serial_init+0x60>)
  402c04:	681b      	ldr	r3, [r3, #0]
  402c06:	685b      	ldr	r3, [r3, #4]
  402c08:	2100      	movs	r1, #0
  402c0a:	4618      	mov	r0, r3
  402c0c:	4b09      	ldr	r3, [pc, #36]	; (402c34 <stdio_serial_init+0x64>)
  402c0e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  402c10:	bf00      	nop
  402c12:	3708      	adds	r7, #8
  402c14:	46bd      	mov	sp, r7
  402c16:	bd80      	pop	{r7, pc}
  402c18:	20422344 	.word	0x20422344
  402c1c:	20422340 	.word	0x20422340
  402c20:	004029bd 	.word	0x004029bd
  402c24:	2042233c 	.word	0x2042233c
  402c28:	00402ac9 	.word	0x00402ac9
  402c2c:	00402859 	.word	0x00402859
  402c30:	2040003c 	.word	0x2040003c
  402c34:	00406c45 	.word	0x00406c45

00402c38 <vApplicationMallocFailedHook>:
extern void vApplicationTickHook(void)
{
}

extern void vApplicationMallocFailedHook(void)
{
  402c38:	b580      	push	{r7, lr}
  402c3a:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
  402c3c:	4b01      	ldr	r3, [pc, #4]	; (402c44 <vApplicationMallocFailedHook+0xc>)
  402c3e:	4798      	blx	r3
  402c40:	bf00      	nop
  402c42:	e7fd      	b.n	402c40 <vApplicationMallocFailedHook+0x8>
  402c44:	0040059d 	.word	0x0040059d

00402c48 <TC0_Handler>:
/* Callbacks / Handler                                                 */
/************************************************************************/
/**
*  Interrupt handler for TC1 interrupt.
*/
void TC0_Handler(void){
  402c48:	b580      	push	{r7, lr}
  402c4a:	b082      	sub	sp, #8
  402c4c:	af00      	add	r7, sp, #0
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrup��o foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC0, 0);
  402c4e:	2100      	movs	r1, #0
  402c50:	4804      	ldr	r0, [pc, #16]	; (402c64 <TC0_Handler+0x1c>)
  402c52:	4b05      	ldr	r3, [pc, #20]	; (402c68 <TC0_Handler+0x20>)
  402c54:	4798      	blx	r3
  402c56:	4603      	mov	r3, r0
  402c58:	607b      	str	r3, [r7, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  402c5a:	687b      	ldr	r3, [r7, #4]

}
  402c5c:	bf00      	nop
  402c5e:	3708      	adds	r7, #8
  402c60:	46bd      	mov	sp, r7
  402c62:	bd80      	pop	{r7, pc}
  402c64:	4000c000 	.word	0x4000c000
  402c68:	00403ea5 	.word	0x00403ea5

00402c6c <Saturation>:
static void Volume(){
	g_ul_value  = (int) ((float) g_ul_value * volume);

}

static void Saturation(int value) {
  402c6c:	b480      	push	{r7}
  402c6e:	b085      	sub	sp, #20
  402c70:	af00      	add	r7, sp, #0
  402c72:	6078      	str	r0, [r7, #4]
	int sat_value = (int) ((100 - value) * ground / 100) + 20;
  402c74:	687b      	ldr	r3, [r7, #4]
  402c76:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  402c7a:	4a17      	ldr	r2, [pc, #92]	; (402cd8 <Saturation+0x6c>)
  402c7c:	6812      	ldr	r2, [r2, #0]
  402c7e:	fb02 f303 	mul.w	r3, r2, r3
  402c82:	4a16      	ldr	r2, [pc, #88]	; (402cdc <Saturation+0x70>)
  402c84:	fb82 1203 	smull	r1, r2, r2, r3
  402c88:	1152      	asrs	r2, r2, #5
  402c8a:	17db      	asrs	r3, r3, #31
  402c8c:	1ad3      	subs	r3, r2, r3
  402c8e:	3314      	adds	r3, #20
  402c90:	60fb      	str	r3, [r7, #12]
	
	if (g_ul_value > ground + sat_value) g_ul_value = ground + sat_value;
  402c92:	4b11      	ldr	r3, [pc, #68]	; (402cd8 <Saturation+0x6c>)
  402c94:	681a      	ldr	r2, [r3, #0]
  402c96:	68fb      	ldr	r3, [r7, #12]
  402c98:	441a      	add	r2, r3
  402c9a:	4b11      	ldr	r3, [pc, #68]	; (402ce0 <Saturation+0x74>)
  402c9c:	681b      	ldr	r3, [r3, #0]
  402c9e:	429a      	cmp	r2, r3
  402ca0:	da05      	bge.n	402cae <Saturation+0x42>
  402ca2:	4b0d      	ldr	r3, [pc, #52]	; (402cd8 <Saturation+0x6c>)
  402ca4:	681a      	ldr	r2, [r3, #0]
  402ca6:	68fb      	ldr	r3, [r7, #12]
  402ca8:	4413      	add	r3, r2
  402caa:	4a0d      	ldr	r2, [pc, #52]	; (402ce0 <Saturation+0x74>)
  402cac:	6013      	str	r3, [r2, #0]
	if (g_ul_value < ground - sat_value) g_ul_value = ground - sat_value;
  402cae:	4b0a      	ldr	r3, [pc, #40]	; (402cd8 <Saturation+0x6c>)
  402cb0:	681a      	ldr	r2, [r3, #0]
  402cb2:	68fb      	ldr	r3, [r7, #12]
  402cb4:	1ad2      	subs	r2, r2, r3
  402cb6:	4b0a      	ldr	r3, [pc, #40]	; (402ce0 <Saturation+0x74>)
  402cb8:	681b      	ldr	r3, [r3, #0]
  402cba:	429a      	cmp	r2, r3
  402cbc:	dd05      	ble.n	402cca <Saturation+0x5e>
  402cbe:	4b06      	ldr	r3, [pc, #24]	; (402cd8 <Saturation+0x6c>)
  402cc0:	681a      	ldr	r2, [r3, #0]
  402cc2:	68fb      	ldr	r3, [r7, #12]
  402cc4:	1ad3      	subs	r3, r2, r3
  402cc6:	4a06      	ldr	r2, [pc, #24]	; (402ce0 <Saturation+0x74>)
  402cc8:	6013      	str	r3, [r2, #0]
}
  402cca:	bf00      	nop
  402ccc:	3714      	adds	r7, #20
  402cce:	46bd      	mov	sp, r7
  402cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402cd4:	4770      	bx	lr
  402cd6:	bf00      	nop
  402cd8:	20400030 	.word	0x20400030
  402cdc:	51eb851f 	.word	0x51eb851f
  402ce0:	2040ca94 	.word	0x2040ca94

00402ce4 <Gain>:

static void Gain(int value) {
  402ce4:	b480      	push	{r7}
  402ce6:	b085      	sub	sp, #20
  402ce8:	af00      	add	r7, sp, #0
  402cea:	6078      	str	r0, [r7, #4]
	int percent100 = 90;
  402cec:	235a      	movs	r3, #90	; 0x5a
  402cee:	60fb      	str	r3, [r7, #12]
	
	g_ul_value = (int) (((g_ul_value - ground) * value / percent100) + ground);
  402cf0:	4b0a      	ldr	r3, [pc, #40]	; (402d1c <Gain+0x38>)
  402cf2:	681a      	ldr	r2, [r3, #0]
  402cf4:	4b0a      	ldr	r3, [pc, #40]	; (402d20 <Gain+0x3c>)
  402cf6:	681b      	ldr	r3, [r3, #0]
  402cf8:	1ad3      	subs	r3, r2, r3
  402cfa:	687a      	ldr	r2, [r7, #4]
  402cfc:	fb02 f203 	mul.w	r2, r2, r3
  402d00:	68fb      	ldr	r3, [r7, #12]
  402d02:	fb92 f2f3 	sdiv	r2, r2, r3
  402d06:	4b06      	ldr	r3, [pc, #24]	; (402d20 <Gain+0x3c>)
  402d08:	681b      	ldr	r3, [r3, #0]
  402d0a:	4413      	add	r3, r2
  402d0c:	4a03      	ldr	r2, [pc, #12]	; (402d1c <Gain+0x38>)
  402d0e:	6013      	str	r3, [r2, #0]
}
  402d10:	bf00      	nop
  402d12:	3714      	adds	r7, #20
  402d14:	46bd      	mov	sp, r7
  402d16:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d1a:	4770      	bx	lr
  402d1c:	2040ca94 	.word	0x2040ca94
  402d20:	20400030 	.word	0x20400030
  402d24:	00000000 	.word	0x00000000

00402d28 <lowPassFrequency>:

static void lowPassFrequency(int CUTOFF)
{
  402d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402d2c:	b08b      	sub	sp, #44	; 0x2c
  402d2e:	af00      	add	r7, sp, #0
  402d30:	6078      	str	r0, [r7, #4]
	double RC = 1.0/(CUTOFF*2*3.14);
  402d32:	687b      	ldr	r3, [r7, #4]
  402d34:	005a      	lsls	r2, r3, #1
  402d36:	4b42      	ldr	r3, [pc, #264]	; (402e40 <lowPassFrequency+0x118>)
  402d38:	4610      	mov	r0, r2
  402d3a:	4798      	blx	r3
  402d3c:	4c41      	ldr	r4, [pc, #260]	; (402e44 <lowPassFrequency+0x11c>)
  402d3e:	a33c      	add	r3, pc, #240	; (adr r3, 402e30 <lowPassFrequency+0x108>)
  402d40:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d44:	47a0      	blx	r4
  402d46:	4603      	mov	r3, r0
  402d48:	460c      	mov	r4, r1
  402d4a:	461a      	mov	r2, r3
  402d4c:	4623      	mov	r3, r4
  402d4e:	4c3e      	ldr	r4, [pc, #248]	; (402e48 <lowPassFrequency+0x120>)
  402d50:	f04f 0000 	mov.w	r0, #0
  402d54:	493d      	ldr	r1, [pc, #244]	; (402e4c <lowPassFrequency+0x124>)
  402d56:	47a0      	blx	r4
  402d58:	4603      	mov	r3, r0
  402d5a:	460c      	mov	r4, r1
  402d5c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double dt = 1.0/22000;
  402d60:	a435      	add	r4, pc, #212	; (adr r4, 402e38 <lowPassFrequency+0x110>)
  402d62:	e9d4 3400 	ldrd	r3, r4, [r4]
  402d66:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double alpha = dt/(RC+dt);
  402d6a:	4c39      	ldr	r4, [pc, #228]	; (402e50 <lowPassFrequency+0x128>)
  402d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
  402d70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
  402d74:	47a0      	blx	r4
  402d76:	4603      	mov	r3, r0
  402d78:	460c      	mov	r4, r1
  402d7a:	461a      	mov	r2, r3
  402d7c:	4623      	mov	r3, r4
  402d7e:	4c32      	ldr	r4, [pc, #200]	; (402e48 <lowPassFrequency+0x120>)
  402d80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
  402d84:	47a0      	blx	r4
  402d86:	4603      	mov	r3, r0
  402d88:	460c      	mov	r4, r1
  402d8a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	
	int current = g_ul_value - ground;
  402d8e:	4b31      	ldr	r3, [pc, #196]	; (402e54 <lowPassFrequency+0x12c>)
  402d90:	681a      	ldr	r2, [r3, #0]
  402d92:	4b31      	ldr	r3, [pc, #196]	; (402e58 <lowPassFrequency+0x130>)
  402d94:	681b      	ldr	r3, [r3, #0]
  402d96:	1ad3      	subs	r3, r2, r3
  402d98:	60fb      	str	r3, [r7, #12]
	int past = g_ul_value_old - ground;
  402d9a:	4b30      	ldr	r3, [pc, #192]	; (402e5c <lowPassFrequency+0x134>)
  402d9c:	681a      	ldr	r2, [r3, #0]
  402d9e:	4b2e      	ldr	r3, [pc, #184]	; (402e58 <lowPassFrequency+0x130>)
  402da0:	681b      	ldr	r3, [r3, #0]
  402da2:	1ad3      	subs	r3, r2, r3
  402da4:	60bb      	str	r3, [r7, #8]
	
	g_ul_value = (int) ((double) past + (alpha*((double) current - (double) past)) + ground);
  402da6:	4b26      	ldr	r3, [pc, #152]	; (402e40 <lowPassFrequency+0x118>)
  402da8:	68b8      	ldr	r0, [r7, #8]
  402daa:	4798      	blx	r3
  402dac:	4605      	mov	r5, r0
  402dae:	460e      	mov	r6, r1
  402db0:	4b23      	ldr	r3, [pc, #140]	; (402e40 <lowPassFrequency+0x118>)
  402db2:	68f8      	ldr	r0, [r7, #12]
  402db4:	4798      	blx	r3
  402db6:	4680      	mov	r8, r0
  402db8:	4689      	mov	r9, r1
  402dba:	4b21      	ldr	r3, [pc, #132]	; (402e40 <lowPassFrequency+0x118>)
  402dbc:	68b8      	ldr	r0, [r7, #8]
  402dbe:	4798      	blx	r3
  402dc0:	4602      	mov	r2, r0
  402dc2:	460b      	mov	r3, r1
  402dc4:	4c26      	ldr	r4, [pc, #152]	; (402e60 <lowPassFrequency+0x138>)
  402dc6:	4640      	mov	r0, r8
  402dc8:	4649      	mov	r1, r9
  402dca:	47a0      	blx	r4
  402dcc:	4603      	mov	r3, r0
  402dce:	460c      	mov	r4, r1
  402dd0:	4618      	mov	r0, r3
  402dd2:	4621      	mov	r1, r4
  402dd4:	4c1b      	ldr	r4, [pc, #108]	; (402e44 <lowPassFrequency+0x11c>)
  402dd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
  402dda:	47a0      	blx	r4
  402ddc:	4603      	mov	r3, r0
  402dde:	460c      	mov	r4, r1
  402de0:	461a      	mov	r2, r3
  402de2:	4623      	mov	r3, r4
  402de4:	4c1a      	ldr	r4, [pc, #104]	; (402e50 <lowPassFrequency+0x128>)
  402de6:	4628      	mov	r0, r5
  402de8:	4631      	mov	r1, r6
  402dea:	47a0      	blx	r4
  402dec:	4603      	mov	r3, r0
  402dee:	460c      	mov	r4, r1
  402df0:	461d      	mov	r5, r3
  402df2:	4626      	mov	r6, r4
  402df4:	4b18      	ldr	r3, [pc, #96]	; (402e58 <lowPassFrequency+0x130>)
  402df6:	681a      	ldr	r2, [r3, #0]
  402df8:	4b11      	ldr	r3, [pc, #68]	; (402e40 <lowPassFrequency+0x118>)
  402dfa:	4610      	mov	r0, r2
  402dfc:	4798      	blx	r3
  402dfe:	4602      	mov	r2, r0
  402e00:	460b      	mov	r3, r1
  402e02:	4c13      	ldr	r4, [pc, #76]	; (402e50 <lowPassFrequency+0x128>)
  402e04:	4628      	mov	r0, r5
  402e06:	4631      	mov	r1, r6
  402e08:	47a0      	blx	r4
  402e0a:	4603      	mov	r3, r0
  402e0c:	460c      	mov	r4, r1
  402e0e:	4619      	mov	r1, r3
  402e10:	4622      	mov	r2, r4
  402e12:	4b14      	ldr	r3, [pc, #80]	; (402e64 <lowPassFrequency+0x13c>)
  402e14:	4608      	mov	r0, r1
  402e16:	4611      	mov	r1, r2
  402e18:	4798      	blx	r3
  402e1a:	4602      	mov	r2, r0
  402e1c:	4b0d      	ldr	r3, [pc, #52]	; (402e54 <lowPassFrequency+0x12c>)
  402e1e:	601a      	str	r2, [r3, #0]
}
  402e20:	bf00      	nop
  402e22:	372c      	adds	r7, #44	; 0x2c
  402e24:	46bd      	mov	sp, r7
  402e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402e2a:	bf00      	nop
  402e2c:	f3af 8000 	nop.w
  402e30:	51eb851f 	.word	0x51eb851f
  402e34:	40091eb8 	.word	0x40091eb8
  402e38:	4a19b16e 	.word	0x4a19b16e
  402e3c:	3f07d4ce 	.word	0x3f07d4ce
  402e40:	00406411 	.word	0x00406411
  402e44:	004064dd 	.word	0x004064dd
  402e48:	00406731 	.word	0x00406731
  402e4c:	3ff00000 	.word	0x3ff00000
  402e50:	00406179 	.word	0x00406179
  402e54:	2040ca94 	.word	0x2040ca94
  402e58:	20400030 	.word	0x20400030
  402e5c:	2040ca90 	.word	0x2040ca90
  402e60:	00406175 	.word	0x00406175
  402e64:	00406901 	.word	0x00406901

00402e68 <reverb>:

static void reverb(void) {
  402e68:	b5f0      	push	{r4, r5, r6, r7, lr}
  402e6a:	b083      	sub	sp, #12
  402e6c:	af00      	add	r7, sp, #0
	double normal_value = (g_ul_value - ground);
  402e6e:	4ba4      	ldr	r3, [pc, #656]	; (403100 <reverb+0x298>)
  402e70:	681a      	ldr	r2, [r3, #0]
  402e72:	4ba4      	ldr	r3, [pc, #656]	; (403104 <reverb+0x29c>)
  402e74:	681b      	ldr	r3, [r3, #0]
  402e76:	1ad2      	subs	r2, r2, r3
  402e78:	4ba3      	ldr	r3, [pc, #652]	; (403108 <reverb+0x2a0>)
  402e7a:	4610      	mov	r0, r2
  402e7c:	4798      	blx	r3
  402e7e:	4603      	mov	r3, r0
  402e80:	460c      	mov	r4, r1
  402e82:	e9c7 3400 	strd	r3, r4, [r7]

	g_ul_value = (int) (normal_value/3 +
  402e86:	4ca1      	ldr	r4, [pc, #644]	; (40310c <reverb+0x2a4>)
  402e88:	f04f 0200 	mov.w	r2, #0
  402e8c:	4ba0      	ldr	r3, [pc, #640]	; (403110 <reverb+0x2a8>)
  402e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
  402e92:	47a0      	blx	r4
  402e94:	4603      	mov	r3, r0
  402e96:	460c      	mov	r4, r1
  402e98:	461d      	mov	r5, r3
  402e9a:	4626      	mov	r6, r4
		/*old_buffer.values[(old_buffer.p + (old_buffer.maxp/2))%old_buffer.maxp]*(((double) value)/ (max_value*3)) + */
		(old_buffer.values[(old_buffer.p + (old_buffer.maxp/2))%old_buffer.maxp] + 
  402e9c:	4a9d      	ldr	r2, [pc, #628]	; (403114 <reverb+0x2ac>)
  402e9e:	4b9e      	ldr	r3, [pc, #632]	; (403118 <reverb+0x2b0>)
  402ea0:	4413      	add	r3, r2
  402ea2:	681a      	ldr	r2, [r3, #0]
  402ea4:	499b      	ldr	r1, [pc, #620]	; (403114 <reverb+0x2ac>)
  402ea6:	4b9d      	ldr	r3, [pc, #628]	; (40311c <reverb+0x2b4>)
  402ea8:	440b      	add	r3, r1
  402eaa:	681b      	ldr	r3, [r3, #0]
  402eac:	2b00      	cmp	r3, #0
  402eae:	da00      	bge.n	402eb2 <reverb+0x4a>
  402eb0:	3301      	adds	r3, #1
  402eb2:	105b      	asrs	r3, r3, #1
  402eb4:	441a      	add	r2, r3
  402eb6:	4997      	ldr	r1, [pc, #604]	; (403114 <reverb+0x2ac>)
  402eb8:	4b98      	ldr	r3, [pc, #608]	; (40311c <reverb+0x2b4>)
  402eba:	440b      	add	r3, r1
  402ebc:	681b      	ldr	r3, [r3, #0]
  402ebe:	fb92 f1f3 	sdiv	r1, r2, r3
  402ec2:	fb03 f301 	mul.w	r3, r3, r1
  402ec6:	1ad3      	subs	r3, r2, r3
  402ec8:	4a92      	ldr	r2, [pc, #584]	; (403114 <reverb+0x2ac>)
  402eca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/4))%old_buffer.maxp])*0.1666 +
  402ece:	4a91      	ldr	r2, [pc, #580]	; (403114 <reverb+0x2ac>)
  402ed0:	4b91      	ldr	r3, [pc, #580]	; (403118 <reverb+0x2b0>)
  402ed2:	4413      	add	r3, r2
  402ed4:	681a      	ldr	r2, [r3, #0]
  402ed6:	488f      	ldr	r0, [pc, #572]	; (403114 <reverb+0x2ac>)
  402ed8:	4b90      	ldr	r3, [pc, #576]	; (40311c <reverb+0x2b4>)
  402eda:	4403      	add	r3, r0
  402edc:	681b      	ldr	r3, [r3, #0]
  402ede:	2b00      	cmp	r3, #0
  402ee0:	da00      	bge.n	402ee4 <reverb+0x7c>
  402ee2:	3303      	adds	r3, #3
  402ee4:	109b      	asrs	r3, r3, #2
  402ee6:	441a      	add	r2, r3
  402ee8:	488a      	ldr	r0, [pc, #552]	; (403114 <reverb+0x2ac>)
  402eea:	4b8c      	ldr	r3, [pc, #560]	; (40311c <reverb+0x2b4>)
  402eec:	4403      	add	r3, r0
  402eee:	681b      	ldr	r3, [r3, #0]
  402ef0:	fb92 f0f3 	sdiv	r0, r2, r3
  402ef4:	fb03 f300 	mul.w	r3, r3, r0
  402ef8:	1ad3      	subs	r3, r2, r3
  402efa:	4a86      	ldr	r2, [pc, #536]	; (403114 <reverb+0x2ac>)
  402efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		(old_buffer.values[(old_buffer.p + (old_buffer.maxp/2))%old_buffer.maxp] + 
  402f00:	18ca      	adds	r2, r1, r3
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/4))%old_buffer.maxp])*0.1666 +
  402f02:	4b81      	ldr	r3, [pc, #516]	; (403108 <reverb+0x2a0>)
  402f04:	4610      	mov	r0, r2
  402f06:	4798      	blx	r3
  402f08:	4c85      	ldr	r4, [pc, #532]	; (403120 <reverb+0x2b8>)
  402f0a:	a377      	add	r3, pc, #476	; (adr r3, 4030e8 <reverb+0x280>)
  402f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f10:	47a0      	blx	r4
  402f12:	4603      	mov	r3, r0
  402f14:	460c      	mov	r4, r1
  402f16:	461a      	mov	r2, r3
  402f18:	4623      	mov	r3, r4
	g_ul_value = (int) (normal_value/3 +
  402f1a:	4c82      	ldr	r4, [pc, #520]	; (403124 <reverb+0x2bc>)
  402f1c:	4628      	mov	r0, r5
  402f1e:	4631      	mov	r1, r6
  402f20:	47a0      	blx	r4
  402f22:	4603      	mov	r3, r0
  402f24:	460c      	mov	r4, r1
  402f26:	461d      	mov	r5, r3
  402f28:	4626      	mov	r6, r4
		(old_buffer.values[(old_buffer.p + (old_buffer.maxp/8))%old_buffer.maxp] +
  402f2a:	4a7a      	ldr	r2, [pc, #488]	; (403114 <reverb+0x2ac>)
  402f2c:	4b7a      	ldr	r3, [pc, #488]	; (403118 <reverb+0x2b0>)
  402f2e:	4413      	add	r3, r2
  402f30:	681a      	ldr	r2, [r3, #0]
  402f32:	4978      	ldr	r1, [pc, #480]	; (403114 <reverb+0x2ac>)
  402f34:	4b79      	ldr	r3, [pc, #484]	; (40311c <reverb+0x2b4>)
  402f36:	440b      	add	r3, r1
  402f38:	681b      	ldr	r3, [r3, #0]
  402f3a:	2b00      	cmp	r3, #0
  402f3c:	da00      	bge.n	402f40 <reverb+0xd8>
  402f3e:	3307      	adds	r3, #7
  402f40:	10db      	asrs	r3, r3, #3
  402f42:	441a      	add	r2, r3
  402f44:	4973      	ldr	r1, [pc, #460]	; (403114 <reverb+0x2ac>)
  402f46:	4b75      	ldr	r3, [pc, #468]	; (40311c <reverb+0x2b4>)
  402f48:	440b      	add	r3, r1
  402f4a:	681b      	ldr	r3, [r3, #0]
  402f4c:	fb92 f1f3 	sdiv	r1, r2, r3
  402f50:	fb03 f301 	mul.w	r3, r3, r1
  402f54:	1ad3      	subs	r3, r2, r3
  402f56:	4a6f      	ldr	r2, [pc, #444]	; (403114 <reverb+0x2ac>)
  402f58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/16))%old_buffer.maxp])*0.0833 +
  402f5c:	4a6d      	ldr	r2, [pc, #436]	; (403114 <reverb+0x2ac>)
  402f5e:	4b6e      	ldr	r3, [pc, #440]	; (403118 <reverb+0x2b0>)
  402f60:	4413      	add	r3, r2
  402f62:	681a      	ldr	r2, [r3, #0]
  402f64:	486b      	ldr	r0, [pc, #428]	; (403114 <reverb+0x2ac>)
  402f66:	4b6d      	ldr	r3, [pc, #436]	; (40311c <reverb+0x2b4>)
  402f68:	4403      	add	r3, r0
  402f6a:	681b      	ldr	r3, [r3, #0]
  402f6c:	2b00      	cmp	r3, #0
  402f6e:	da00      	bge.n	402f72 <reverb+0x10a>
  402f70:	330f      	adds	r3, #15
  402f72:	111b      	asrs	r3, r3, #4
  402f74:	441a      	add	r2, r3
  402f76:	4867      	ldr	r0, [pc, #412]	; (403114 <reverb+0x2ac>)
  402f78:	4b68      	ldr	r3, [pc, #416]	; (40311c <reverb+0x2b4>)
  402f7a:	4403      	add	r3, r0
  402f7c:	681b      	ldr	r3, [r3, #0]
  402f7e:	fb92 f0f3 	sdiv	r0, r2, r3
  402f82:	fb03 f300 	mul.w	r3, r3, r0
  402f86:	1ad3      	subs	r3, r2, r3
  402f88:	4a62      	ldr	r2, [pc, #392]	; (403114 <reverb+0x2ac>)
  402f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		(old_buffer.values[(old_buffer.p + (old_buffer.maxp/8))%old_buffer.maxp] +
  402f8e:	18ca      	adds	r2, r1, r3
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/16))%old_buffer.maxp])*0.0833 +
  402f90:	4b5d      	ldr	r3, [pc, #372]	; (403108 <reverb+0x2a0>)
  402f92:	4610      	mov	r0, r2
  402f94:	4798      	blx	r3
  402f96:	4c62      	ldr	r4, [pc, #392]	; (403120 <reverb+0x2b8>)
  402f98:	a355      	add	r3, pc, #340	; (adr r3, 4030f0 <reverb+0x288>)
  402f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f9e:	47a0      	blx	r4
  402fa0:	4603      	mov	r3, r0
  402fa2:	460c      	mov	r4, r1
  402fa4:	461a      	mov	r2, r3
  402fa6:	4623      	mov	r3, r4
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/4))%old_buffer.maxp])*0.1666 +
  402fa8:	4c5e      	ldr	r4, [pc, #376]	; (403124 <reverb+0x2bc>)
  402faa:	4628      	mov	r0, r5
  402fac:	4631      	mov	r1, r6
  402fae:	47a0      	blx	r4
  402fb0:	4603      	mov	r3, r0
  402fb2:	460c      	mov	r4, r1
  402fb4:	461d      	mov	r5, r3
  402fb6:	4626      	mov	r6, r4
		(old_buffer.values[(old_buffer.p + (old_buffer.maxp/32))%old_buffer.maxp] +
  402fb8:	4a56      	ldr	r2, [pc, #344]	; (403114 <reverb+0x2ac>)
  402fba:	4b57      	ldr	r3, [pc, #348]	; (403118 <reverb+0x2b0>)
  402fbc:	4413      	add	r3, r2
  402fbe:	681a      	ldr	r2, [r3, #0]
  402fc0:	4954      	ldr	r1, [pc, #336]	; (403114 <reverb+0x2ac>)
  402fc2:	4b56      	ldr	r3, [pc, #344]	; (40311c <reverb+0x2b4>)
  402fc4:	440b      	add	r3, r1
  402fc6:	681b      	ldr	r3, [r3, #0]
  402fc8:	2b00      	cmp	r3, #0
  402fca:	da00      	bge.n	402fce <reverb+0x166>
  402fcc:	331f      	adds	r3, #31
  402fce:	115b      	asrs	r3, r3, #5
  402fd0:	441a      	add	r2, r3
  402fd2:	4950      	ldr	r1, [pc, #320]	; (403114 <reverb+0x2ac>)
  402fd4:	4b51      	ldr	r3, [pc, #324]	; (40311c <reverb+0x2b4>)
  402fd6:	440b      	add	r3, r1
  402fd8:	681b      	ldr	r3, [r3, #0]
  402fda:	fb92 f1f3 	sdiv	r1, r2, r3
  402fde:	fb03 f301 	mul.w	r3, r3, r1
  402fe2:	1ad3      	subs	r3, r2, r3
  402fe4:	4a4b      	ldr	r2, [pc, #300]	; (403114 <reverb+0x2ac>)
  402fe6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/64))%old_buffer.maxp] +
  402fea:	4a4a      	ldr	r2, [pc, #296]	; (403114 <reverb+0x2ac>)
  402fec:	4b4a      	ldr	r3, [pc, #296]	; (403118 <reverb+0x2b0>)
  402fee:	4413      	add	r3, r2
  402ff0:	681a      	ldr	r2, [r3, #0]
  402ff2:	4848      	ldr	r0, [pc, #288]	; (403114 <reverb+0x2ac>)
  402ff4:	4b49      	ldr	r3, [pc, #292]	; (40311c <reverb+0x2b4>)
  402ff6:	4403      	add	r3, r0
  402ff8:	681b      	ldr	r3, [r3, #0]
  402ffa:	2b00      	cmp	r3, #0
  402ffc:	da00      	bge.n	403000 <reverb+0x198>
  402ffe:	333f      	adds	r3, #63	; 0x3f
  403000:	119b      	asrs	r3, r3, #6
  403002:	441a      	add	r2, r3
  403004:	4843      	ldr	r0, [pc, #268]	; (403114 <reverb+0x2ac>)
  403006:	4b45      	ldr	r3, [pc, #276]	; (40311c <reverb+0x2b4>)
  403008:	4403      	add	r3, r0
  40300a:	681b      	ldr	r3, [r3, #0]
  40300c:	fb92 f0f3 	sdiv	r0, r2, r3
  403010:	fb03 f300 	mul.w	r3, r3, r0
  403014:	1ad3      	subs	r3, r2, r3
  403016:	4a3f      	ldr	r2, [pc, #252]	; (403114 <reverb+0x2ac>)
  403018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		(old_buffer.values[(old_buffer.p + (old_buffer.maxp/32))%old_buffer.maxp] +
  40301c:	4419      	add	r1, r3
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/128))%old_buffer.maxp] +
  40301e:	4a3d      	ldr	r2, [pc, #244]	; (403114 <reverb+0x2ac>)
  403020:	4b3d      	ldr	r3, [pc, #244]	; (403118 <reverb+0x2b0>)
  403022:	4413      	add	r3, r2
  403024:	681a      	ldr	r2, [r3, #0]
  403026:	483b      	ldr	r0, [pc, #236]	; (403114 <reverb+0x2ac>)
  403028:	4b3c      	ldr	r3, [pc, #240]	; (40311c <reverb+0x2b4>)
  40302a:	4403      	add	r3, r0
  40302c:	681b      	ldr	r3, [r3, #0]
  40302e:	2b00      	cmp	r3, #0
  403030:	da00      	bge.n	403034 <reverb+0x1cc>
  403032:	337f      	adds	r3, #127	; 0x7f
  403034:	11db      	asrs	r3, r3, #7
  403036:	441a      	add	r2, r3
  403038:	4836      	ldr	r0, [pc, #216]	; (403114 <reverb+0x2ac>)
  40303a:	4b38      	ldr	r3, [pc, #224]	; (40311c <reverb+0x2b4>)
  40303c:	4403      	add	r3, r0
  40303e:	681b      	ldr	r3, [r3, #0]
  403040:	fb92 f0f3 	sdiv	r0, r2, r3
  403044:	fb03 f300 	mul.w	r3, r3, r0
  403048:	1ad3      	subs	r3, r2, r3
  40304a:	4a32      	ldr	r2, [pc, #200]	; (403114 <reverb+0x2ac>)
  40304c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/64))%old_buffer.maxp] +
  403050:	4419      	add	r1, r3
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/256))%old_buffer.maxp])*0.0416 +
  403052:	4a30      	ldr	r2, [pc, #192]	; (403114 <reverb+0x2ac>)
  403054:	4b30      	ldr	r3, [pc, #192]	; (403118 <reverb+0x2b0>)
  403056:	4413      	add	r3, r2
  403058:	681a      	ldr	r2, [r3, #0]
  40305a:	482e      	ldr	r0, [pc, #184]	; (403114 <reverb+0x2ac>)
  40305c:	4b2f      	ldr	r3, [pc, #188]	; (40311c <reverb+0x2b4>)
  40305e:	4403      	add	r3, r0
  403060:	681b      	ldr	r3, [r3, #0]
  403062:	2b00      	cmp	r3, #0
  403064:	da00      	bge.n	403068 <reverb+0x200>
  403066:	33ff      	adds	r3, #255	; 0xff
  403068:	121b      	asrs	r3, r3, #8
  40306a:	441a      	add	r2, r3
  40306c:	4829      	ldr	r0, [pc, #164]	; (403114 <reverb+0x2ac>)
  40306e:	4b2b      	ldr	r3, [pc, #172]	; (40311c <reverb+0x2b4>)
  403070:	4403      	add	r3, r0
  403072:	681b      	ldr	r3, [r3, #0]
  403074:	fb92 f0f3 	sdiv	r0, r2, r3
  403078:	fb03 f300 	mul.w	r3, r3, r0
  40307c:	1ad3      	subs	r3, r2, r3
  40307e:	4a25      	ldr	r2, [pc, #148]	; (403114 <reverb+0x2ac>)
  403080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/128))%old_buffer.maxp] +
  403084:	18ca      	adds	r2, r1, r3
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/256))%old_buffer.maxp])*0.0416 +
  403086:	4b20      	ldr	r3, [pc, #128]	; (403108 <reverb+0x2a0>)
  403088:	4610      	mov	r0, r2
  40308a:	4798      	blx	r3
  40308c:	4c24      	ldr	r4, [pc, #144]	; (403120 <reverb+0x2b8>)
  40308e:	a31a      	add	r3, pc, #104	; (adr r3, 4030f8 <reverb+0x290>)
  403090:	e9d3 2300 	ldrd	r2, r3, [r3]
  403094:	47a0      	blx	r4
  403096:	4603      	mov	r3, r0
  403098:	460c      	mov	r4, r1
  40309a:	461a      	mov	r2, r3
  40309c:	4623      	mov	r3, r4
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/16))%old_buffer.maxp])*0.0833 +
  40309e:	4c21      	ldr	r4, [pc, #132]	; (403124 <reverb+0x2bc>)
  4030a0:	4628      	mov	r0, r5
  4030a2:	4631      	mov	r1, r6
  4030a4:	47a0      	blx	r4
  4030a6:	4603      	mov	r3, r0
  4030a8:	460c      	mov	r4, r1
  4030aa:	461d      	mov	r5, r3
  4030ac:	4626      	mov	r6, r4
		old_buffer.values[(old_buffer.p + (old_buffer.maxp/256))%old_buffer.maxp])*0.0416 +
  4030ae:	4b15      	ldr	r3, [pc, #84]	; (403104 <reverb+0x29c>)
  4030b0:	681a      	ldr	r2, [r3, #0]
  4030b2:	4b15      	ldr	r3, [pc, #84]	; (403108 <reverb+0x2a0>)
  4030b4:	4610      	mov	r0, r2
  4030b6:	4798      	blx	r3
  4030b8:	4602      	mov	r2, r0
  4030ba:	460b      	mov	r3, r1
  4030bc:	4c19      	ldr	r4, [pc, #100]	; (403124 <reverb+0x2bc>)
  4030be:	4628      	mov	r0, r5
  4030c0:	4631      	mov	r1, r6
  4030c2:	47a0      	blx	r4
  4030c4:	4603      	mov	r3, r0
  4030c6:	460c      	mov	r4, r1
  4030c8:	4619      	mov	r1, r3
  4030ca:	4622      	mov	r2, r4
	g_ul_value = (int) (normal_value/3 +
  4030cc:	4b16      	ldr	r3, [pc, #88]	; (403128 <reverb+0x2c0>)
  4030ce:	4608      	mov	r0, r1
  4030d0:	4611      	mov	r1, r2
  4030d2:	4798      	blx	r3
  4030d4:	4602      	mov	r2, r0
  4030d6:	4b0a      	ldr	r3, [pc, #40]	; (403100 <reverb+0x298>)
  4030d8:	601a      	str	r2, [r3, #0]
		ground);

}
  4030da:	bf00      	nop
  4030dc:	370c      	adds	r7, #12
  4030de:	46bd      	mov	sp, r7
  4030e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4030e2:	bf00      	nop
  4030e4:	f3af 8000 	nop.w
  4030e8:	17c1bda5 	.word	0x17c1bda5
  4030ec:	3fc55326 	.word	0x3fc55326
  4030f0:	17c1bda5 	.word	0x17c1bda5
  4030f4:	3fb55326 	.word	0x3fb55326
  4030f8:	5f06f694 	.word	0x5f06f694
  4030fc:	3fa54c98 	.word	0x3fa54c98
  403100:	2040ca94 	.word	0x2040ca94
  403104:	20400030 	.word	0x20400030
  403108:	00406411 	.word	0x00406411
  40310c:	00406731 	.word	0x00406731
  403110:	40080000 	.word	0x40080000
  403114:	2040cb54 	.word	0x2040cb54
  403118:	000157c0 	.word	0x000157c0
  40311c:	000157c4 	.word	0x000157c4
  403120:	004064dd 	.word	0x004064dd
  403124:	00406179 	.word	0x00406179
  403128:	00406901 	.word	0x00406901
  40312c:	00000000 	.word	0x00000000

00403130 <echo>:

static void echo(void) {
  403130:	b5f0      	push	{r4, r5, r6, r7, lr}
  403132:	b083      	sub	sp, #12
  403134:	af00      	add	r7, sp, #0
	double normal_value = (g_ul_value - ground);
  403136:	4b30      	ldr	r3, [pc, #192]	; (4031f8 <echo+0xc8>)
  403138:	681a      	ldr	r2, [r3, #0]
  40313a:	4b30      	ldr	r3, [pc, #192]	; (4031fc <echo+0xcc>)
  40313c:	681b      	ldr	r3, [r3, #0]
  40313e:	1ad2      	subs	r2, r2, r3
  403140:	4b2f      	ldr	r3, [pc, #188]	; (403200 <echo+0xd0>)
  403142:	4610      	mov	r0, r2
  403144:	4798      	blx	r3
  403146:	4603      	mov	r3, r0
  403148:	460c      	mov	r4, r1
  40314a:	e9c7 3400 	strd	r3, r4, [r7]
	
	g_ul_value = (int) (normal_value*2/3 +
  40314e:	e9d7 0100 	ldrd	r0, r1, [r7]
  403152:	4c2c      	ldr	r4, [pc, #176]	; (403204 <echo+0xd4>)
  403154:	4602      	mov	r2, r0
  403156:	460b      	mov	r3, r1
  403158:	47a0      	blx	r4
  40315a:	4603      	mov	r3, r0
  40315c:	460c      	mov	r4, r1
  40315e:	4618      	mov	r0, r3
  403160:	4621      	mov	r1, r4
  403162:	4c29      	ldr	r4, [pc, #164]	; (403208 <echo+0xd8>)
  403164:	f04f 0200 	mov.w	r2, #0
  403168:	4b28      	ldr	r3, [pc, #160]	; (40320c <echo+0xdc>)
  40316a:	47a0      	blx	r4
  40316c:	4603      	mov	r3, r0
  40316e:	460c      	mov	r4, r1
  403170:	461d      	mov	r5, r3
  403172:	4626      	mov	r6, r4
		old_buffer.values[old_buffer.p%old_buffer.maxp]*0.333 +
  403174:	4a26      	ldr	r2, [pc, #152]	; (403210 <echo+0xe0>)
  403176:	4b27      	ldr	r3, [pc, #156]	; (403214 <echo+0xe4>)
  403178:	4413      	add	r3, r2
  40317a:	681a      	ldr	r2, [r3, #0]
  40317c:	4924      	ldr	r1, [pc, #144]	; (403210 <echo+0xe0>)
  40317e:	4b26      	ldr	r3, [pc, #152]	; (403218 <echo+0xe8>)
  403180:	440b      	add	r3, r1
  403182:	681b      	ldr	r3, [r3, #0]
  403184:	fb92 f1f3 	sdiv	r1, r2, r3
  403188:	fb03 f301 	mul.w	r3, r3, r1
  40318c:	1ad3      	subs	r3, r2, r3
  40318e:	4a20      	ldr	r2, [pc, #128]	; (403210 <echo+0xe0>)
  403190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  403194:	4b1a      	ldr	r3, [pc, #104]	; (403200 <echo+0xd0>)
  403196:	4610      	mov	r0, r2
  403198:	4798      	blx	r3
  40319a:	4c20      	ldr	r4, [pc, #128]	; (40321c <echo+0xec>)
  40319c:	a314      	add	r3, pc, #80	; (adr r3, 4031f0 <echo+0xc0>)
  40319e:	e9d3 2300 	ldrd	r2, r3, [r3]
  4031a2:	47a0      	blx	r4
  4031a4:	4603      	mov	r3, r0
  4031a6:	460c      	mov	r4, r1
  4031a8:	461a      	mov	r2, r3
  4031aa:	4623      	mov	r3, r4
	g_ul_value = (int) (normal_value*2/3 +
  4031ac:	4c15      	ldr	r4, [pc, #84]	; (403204 <echo+0xd4>)
  4031ae:	4628      	mov	r0, r5
  4031b0:	4631      	mov	r1, r6
  4031b2:	47a0      	blx	r4
  4031b4:	4603      	mov	r3, r0
  4031b6:	460c      	mov	r4, r1
  4031b8:	461d      	mov	r5, r3
  4031ba:	4626      	mov	r6, r4
		old_buffer.values[old_buffer.p%old_buffer.maxp]*0.333 +
  4031bc:	4b0f      	ldr	r3, [pc, #60]	; (4031fc <echo+0xcc>)
  4031be:	681a      	ldr	r2, [r3, #0]
  4031c0:	4b0f      	ldr	r3, [pc, #60]	; (403200 <echo+0xd0>)
  4031c2:	4610      	mov	r0, r2
  4031c4:	4798      	blx	r3
  4031c6:	4602      	mov	r2, r0
  4031c8:	460b      	mov	r3, r1
  4031ca:	4c0e      	ldr	r4, [pc, #56]	; (403204 <echo+0xd4>)
  4031cc:	4628      	mov	r0, r5
  4031ce:	4631      	mov	r1, r6
  4031d0:	47a0      	blx	r4
  4031d2:	4603      	mov	r3, r0
  4031d4:	460c      	mov	r4, r1
  4031d6:	4619      	mov	r1, r3
  4031d8:	4622      	mov	r2, r4
	g_ul_value = (int) (normal_value*2/3 +
  4031da:	4b11      	ldr	r3, [pc, #68]	; (403220 <echo+0xf0>)
  4031dc:	4608      	mov	r0, r1
  4031de:	4611      	mov	r1, r2
  4031e0:	4798      	blx	r3
  4031e2:	4602      	mov	r2, r0
  4031e4:	4b04      	ldr	r3, [pc, #16]	; (4031f8 <echo+0xc8>)
  4031e6:	601a      	str	r2, [r3, #0]
		ground);

}
  4031e8:	bf00      	nop
  4031ea:	370c      	adds	r7, #12
  4031ec:	46bd      	mov	sp, r7
  4031ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4031f0:	3b645a1d 	.word	0x3b645a1d
  4031f4:	3fd54fdf 	.word	0x3fd54fdf
  4031f8:	2040ca94 	.word	0x2040ca94
  4031fc:	20400030 	.word	0x20400030
  403200:	00406411 	.word	0x00406411
  403204:	00406179 	.word	0x00406179
  403208:	00406731 	.word	0x00406731
  40320c:	40080000 	.word	0x40080000
  403210:	2040cb54 	.word	0x2040cb54
  403214:	000157c0 	.word	0x000157c0
  403218:	000157c4 	.word	0x000157c4
  40321c:	004064dd 	.word	0x004064dd
  403220:	00406901 	.word	0x00406901

00403224 <AFEC_Audio_callback>:

static void AFEC_Audio_callback(void){
  403224:	b580      	push	{r7, lr}
  403226:	af00      	add	r7, sp, #0
	/** The conversion data value */

	// check swap
	if(ppbuf_get_full_signal(&buffer,false) == true) {
  403228:	2100      	movs	r1, #0
  40322a:	4842      	ldr	r0, [pc, #264]	; (403334 <AFEC_Audio_callback+0x110>)
  40322c:	4b42      	ldr	r3, [pc, #264]	; (403338 <AFEC_Audio_callback+0x114>)
  40322e:	4798      	blx	r3
  403230:	4603      	mov	r3, r0
  403232:	2b00      	cmp	r3, #0
  403234:	d006      	beq.n	403244 <AFEC_Audio_callback+0x20>
		ppbuf_get_full_signal(&buffer,true); // swap
  403236:	2101      	movs	r1, #1
  403238:	483e      	ldr	r0, [pc, #248]	; (403334 <AFEC_Audio_callback+0x110>)
  40323a:	4b3f      	ldr	r3, [pc, #252]	; (403338 <AFEC_Audio_callback+0x114>)
  40323c:	4798      	blx	r3
// 		printf("Signal: %d\n", g_ul_value);
// 		printf("Average: %d\n", count/11000);
		count = 0;
  40323e:	4b3f      	ldr	r3, [pc, #252]	; (40333c <AFEC_Audio_callback+0x118>)
  403240:	2200      	movs	r2, #0
  403242:	601a      	str	r2, [r3, #0]
	}
	
	g_ul_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_PIN);
  403244:	2100      	movs	r1, #0
  403246:	483e      	ldr	r0, [pc, #248]	; (403340 <AFEC_Audio_callback+0x11c>)
  403248:	4b3e      	ldr	r3, [pc, #248]	; (403344 <AFEC_Audio_callback+0x120>)
  40324a:	4798      	blx	r3
  40324c:	4603      	mov	r3, r0
  40324e:	461a      	mov	r2, r3
  403250:	4b3d      	ldr	r3, [pc, #244]	; (403348 <AFEC_Audio_callback+0x124>)
  403252:	601a      	str	r2, [r3, #0]
	
	/*        EFFECTS        */
	if (echo_on)
  403254:	4b3d      	ldr	r3, [pc, #244]	; (40334c <AFEC_Audio_callback+0x128>)
  403256:	781b      	ldrb	r3, [r3, #0]
  403258:	b2db      	uxtb	r3, r3
  40325a:	2b00      	cmp	r3, #0
  40325c:	d001      	beq.n	403262 <AFEC_Audio_callback+0x3e>
		echo();
  40325e:	4b3c      	ldr	r3, [pc, #240]	; (403350 <AFEC_Audio_callback+0x12c>)
  403260:	4798      	blx	r3
	if (reverb_on)
  403262:	4b3c      	ldr	r3, [pc, #240]	; (403354 <AFEC_Audio_callback+0x130>)
  403264:	781b      	ldrb	r3, [r3, #0]
  403266:	b2db      	uxtb	r3, r3
  403268:	2b00      	cmp	r3, #0
  40326a:	d001      	beq.n	403270 <AFEC_Audio_callback+0x4c>
		reverb();
  40326c:	4b3a      	ldr	r3, [pc, #232]	; (403358 <AFEC_Audio_callback+0x134>)
  40326e:	4798      	blx	r3
	Saturation(saturation_value);
  403270:	4b3a      	ldr	r3, [pc, #232]	; (40335c <AFEC_Audio_callback+0x138>)
  403272:	681b      	ldr	r3, [r3, #0]
  403274:	4618      	mov	r0, r3
  403276:	4b3a      	ldr	r3, [pc, #232]	; (403360 <AFEC_Audio_callback+0x13c>)
  403278:	4798      	blx	r3
	Gain(gain_value);
  40327a:	4b3a      	ldr	r3, [pc, #232]	; (403364 <AFEC_Audio_callback+0x140>)
  40327c:	681b      	ldr	r3, [r3, #0]
  40327e:	4618      	mov	r0, r3
  403280:	4b39      	ldr	r3, [pc, #228]	; (403368 <AFEC_Audio_callback+0x144>)
  403282:	4798      	blx	r3
	lowPassFrequency(lowpass_value);
  403284:	4b39      	ldr	r3, [pc, #228]	; (40336c <AFEC_Audio_callback+0x148>)
  403286:	681b      	ldr	r3, [r3, #0]
  403288:	4618      	mov	r0, r3
  40328a:	4b39      	ldr	r3, [pc, #228]	; (403370 <AFEC_Audio_callback+0x14c>)
  40328c:	4798      	blx	r3
	
	
	count += g_ul_value;
  40328e:	4b2b      	ldr	r3, [pc, #172]	; (40333c <AFEC_Audio_callback+0x118>)
  403290:	681a      	ldr	r2, [r3, #0]
  403292:	4b2d      	ldr	r3, [pc, #180]	; (403348 <AFEC_Audio_callback+0x124>)
  403294:	681b      	ldr	r3, [r3, #0]
  403296:	4413      	add	r3, r2
  403298:	4a28      	ldr	r2, [pc, #160]	; (40333c <AFEC_Audio_callback+0x118>)
  40329a:	6013      	str	r3, [r2, #0]
	g_ul_value_old = g_ul_value;
  40329c:	4b2a      	ldr	r3, [pc, #168]	; (403348 <AFEC_Audio_callback+0x124>)
  40329e:	681b      	ldr	r3, [r3, #0]
  4032a0:	4a34      	ldr	r2, [pc, #208]	; (403374 <AFEC_Audio_callback+0x150>)
  4032a2:	6013      	str	r3, [r2, #0]
	if (old_buffer.p < old_buffer.maxp) {
  4032a4:	4a34      	ldr	r2, [pc, #208]	; (403378 <AFEC_Audio_callback+0x154>)
  4032a6:	4b35      	ldr	r3, [pc, #212]	; (40337c <AFEC_Audio_callback+0x158>)
  4032a8:	4413      	add	r3, r2
  4032aa:	681a      	ldr	r2, [r3, #0]
  4032ac:	4932      	ldr	r1, [pc, #200]	; (403378 <AFEC_Audio_callback+0x154>)
  4032ae:	4b34      	ldr	r3, [pc, #208]	; (403380 <AFEC_Audio_callback+0x15c>)
  4032b0:	440b      	add	r3, r1
  4032b2:	681b      	ldr	r3, [r3, #0]
  4032b4:	429a      	cmp	r2, r3
  4032b6:	da15      	bge.n	4032e4 <AFEC_Audio_callback+0xc0>
		old_buffer.values[old_buffer.p] = g_ul_value - ground;
  4032b8:	4a2f      	ldr	r2, [pc, #188]	; (403378 <AFEC_Audio_callback+0x154>)
  4032ba:	4b30      	ldr	r3, [pc, #192]	; (40337c <AFEC_Audio_callback+0x158>)
  4032bc:	4413      	add	r3, r2
  4032be:	681b      	ldr	r3, [r3, #0]
  4032c0:	4a21      	ldr	r2, [pc, #132]	; (403348 <AFEC_Audio_callback+0x124>)
  4032c2:	6811      	ldr	r1, [r2, #0]
  4032c4:	4a2f      	ldr	r2, [pc, #188]	; (403384 <AFEC_Audio_callback+0x160>)
  4032c6:	6812      	ldr	r2, [r2, #0]
  4032c8:	1a8a      	subs	r2, r1, r2
  4032ca:	492b      	ldr	r1, [pc, #172]	; (403378 <AFEC_Audio_callback+0x154>)
  4032cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		old_buffer.p += 1;
  4032d0:	4a29      	ldr	r2, [pc, #164]	; (403378 <AFEC_Audio_callback+0x154>)
  4032d2:	4b2a      	ldr	r3, [pc, #168]	; (40337c <AFEC_Audio_callback+0x158>)
  4032d4:	4413      	add	r3, r2
  4032d6:	681b      	ldr	r3, [r3, #0]
  4032d8:	1c5a      	adds	r2, r3, #1
  4032da:	4927      	ldr	r1, [pc, #156]	; (403378 <AFEC_Audio_callback+0x154>)
  4032dc:	4b27      	ldr	r3, [pc, #156]	; (40337c <AFEC_Audio_callback+0x158>)
  4032de:	440b      	add	r3, r1
  4032e0:	601a      	str	r2, [r3, #0]
  4032e2:	e010      	b.n	403306 <AFEC_Audio_callback+0xe2>
	} else {
		old_buffer.values[old_buffer.p] = g_ul_value - ground;
  4032e4:	4a24      	ldr	r2, [pc, #144]	; (403378 <AFEC_Audio_callback+0x154>)
  4032e6:	4b25      	ldr	r3, [pc, #148]	; (40337c <AFEC_Audio_callback+0x158>)
  4032e8:	4413      	add	r3, r2
  4032ea:	681b      	ldr	r3, [r3, #0]
  4032ec:	4a16      	ldr	r2, [pc, #88]	; (403348 <AFEC_Audio_callback+0x124>)
  4032ee:	6811      	ldr	r1, [r2, #0]
  4032f0:	4a24      	ldr	r2, [pc, #144]	; (403384 <AFEC_Audio_callback+0x160>)
  4032f2:	6812      	ldr	r2, [r2, #0]
  4032f4:	1a8a      	subs	r2, r1, r2
  4032f6:	4920      	ldr	r1, [pc, #128]	; (403378 <AFEC_Audio_callback+0x154>)
  4032f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		old_buffer.p = 0;
  4032fc:	4a1e      	ldr	r2, [pc, #120]	; (403378 <AFEC_Audio_callback+0x154>)
  4032fe:	4b1f      	ldr	r3, [pc, #124]	; (40337c <AFEC_Audio_callback+0x158>)
  403300:	4413      	add	r3, r2
  403302:	2200      	movs	r2, #0
  403304:	601a      	str	r2, [r3, #0]
	}
	
	ppbuf_insert_active(&buffer, &g_ul_value, 1);
  403306:	2201      	movs	r2, #1
  403308:	490f      	ldr	r1, [pc, #60]	; (403348 <AFEC_Audio_callback+0x124>)
  40330a:	480a      	ldr	r0, [pc, #40]	; (403334 <AFEC_Audio_callback+0x110>)
  40330c:	4b1e      	ldr	r3, [pc, #120]	; (403388 <AFEC_Audio_callback+0x164>)
  40330e:	4798      	blx	r3
	ppbuf_remove_inactive(&buffer, &buf, 1);	
  403310:	2201      	movs	r2, #1
  403312:	491e      	ldr	r1, [pc, #120]	; (40338c <AFEC_Audio_callback+0x168>)
  403314:	4807      	ldr	r0, [pc, #28]	; (403334 <AFEC_Audio_callback+0x110>)
  403316:	4b1e      	ldr	r3, [pc, #120]	; (403390 <AFEC_Audio_callback+0x16c>)
  403318:	4798      	blx	r3
	
	dacc_get_interrupt_status(DACC_BASE);
  40331a:	481e      	ldr	r0, [pc, #120]	; (403394 <AFEC_Audio_callback+0x170>)
  40331c:	4b1e      	ldr	r3, [pc, #120]	; (403398 <AFEC_Audio_callback+0x174>)
  40331e:	4798      	blx	r3
	dacc_write_conversion_data(DACC_BASE, buf, DACC_CHANNEL);
  403320:	4b1a      	ldr	r3, [pc, #104]	; (40338c <AFEC_Audio_callback+0x168>)
  403322:	681b      	ldr	r3, [r3, #0]
  403324:	2200      	movs	r2, #0
  403326:	4619      	mov	r1, r3
  403328:	481a      	ldr	r0, [pc, #104]	; (403394 <AFEC_Audio_callback+0x170>)
  40332a:	4b1c      	ldr	r3, [pc, #112]	; (40339c <AFEC_Audio_callback+0x178>)
  40332c:	4798      	blx	r3

}
  40332e:	bf00      	nop
  403330:	bd80      	pop	{r7, pc}
  403332:	bf00      	nop
  403334:	2040000c 	.word	0x2040000c
  403338:	004024d5 	.word	0x004024d5
  40333c:	2040ca98 	.word	0x2040ca98
  403340:	4003c000 	.word	0x4003c000
  403344:	004026f1 	.word	0x004026f1
  403348:	2040ca94 	.word	0x2040ca94
  40334c:	2040ca9d 	.word	0x2040ca9d
  403350:	00403131 	.word	0x00403131
  403354:	2040ca9c 	.word	0x2040ca9c
  403358:	00402e69 	.word	0x00402e69
  40335c:	20400024 	.word	0x20400024
  403360:	00402c6d 	.word	0x00402c6d
  403364:	20400028 	.word	0x20400028
  403368:	00402ce5 	.word	0x00402ce5
  40336c:	2040002c 	.word	0x2040002c
  403370:	00402d29 	.word	0x00402d29
  403374:	2040ca90 	.word	0x2040ca90
  403378:	2040cb54 	.word	0x2040cb54
  40337c:	000157c0 	.word	0x000157c0
  403380:	000157c4 	.word	0x000157c4
  403384:	20400030 	.word	0x20400030
  403388:	004023a9 	.word	0x004023a9
  40338c:	2040ca8c 	.word	0x2040ca8c
  403390:	00402449 	.word	0x00402449
  403394:	40040000 	.word	0x40040000
  403398:	004001c7 	.word	0x004001c7
  40339c:	004001df 	.word	0x004001df

004033a0 <convert_adc_to_gain>:

static int32_t convert_adc_to_gain(int32_t ADC_value){
  4033a0:	b480      	push	{r7}
  4033a2:	b085      	sub	sp, #20
  4033a4:	af00      	add	r7, sp, #0
  4033a6:	6078      	str	r0, [r7, #4]

	uint32_t max_gain = 100;
  4033a8:	2364      	movs	r3, #100	; 0x64
  4033aa:	60fb      	str	r3, [r7, #12]
	return (ADC_value*(max_gain) / MAX_DIGITAL);
  4033ac:	687b      	ldr	r3, [r7, #4]
  4033ae:	68fa      	ldr	r2, [r7, #12]
  4033b0:	fb02 f203 	mul.w	r2, r2, r3
  4033b4:	4b06      	ldr	r3, [pc, #24]	; (4033d0 <convert_adc_to_gain+0x30>)
  4033b6:	fba3 1302 	umull	r1, r3, r3, r2
  4033ba:	1ad2      	subs	r2, r2, r3
  4033bc:	0852      	lsrs	r2, r2, #1
  4033be:	4413      	add	r3, r2
  4033c0:	0adb      	lsrs	r3, r3, #11
}
  4033c2:	4618      	mov	r0, r3
  4033c4:	3714      	adds	r7, #20
  4033c6:	46bd      	mov	sp, r7
  4033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4033cc:	4770      	bx	lr
  4033ce:	bf00      	nop
  4033d0:	00100101 	.word	0x00100101

004033d4 <convert_adc_to_saturation>:

static int32_t convert_adc_to_saturation(int32_t ADC_value){
  4033d4:	b480      	push	{r7}
  4033d6:	b085      	sub	sp, #20
  4033d8:	af00      	add	r7, sp, #0
  4033da:	6078      	str	r0, [r7, #4]

	uint32_t max_saturation = 100;
  4033dc:	2364      	movs	r3, #100	; 0x64
  4033de:	60fb      	str	r3, [r7, #12]
	return (ADC_value*(max_saturation) / MAX_DIGITAL);
  4033e0:	687b      	ldr	r3, [r7, #4]
  4033e2:	68fa      	ldr	r2, [r7, #12]
  4033e4:	fb02 f203 	mul.w	r2, r2, r3
  4033e8:	4b06      	ldr	r3, [pc, #24]	; (403404 <convert_adc_to_saturation+0x30>)
  4033ea:	fba3 1302 	umull	r1, r3, r3, r2
  4033ee:	1ad2      	subs	r2, r2, r3
  4033f0:	0852      	lsrs	r2, r2, #1
  4033f2:	4413      	add	r3, r2
  4033f4:	0adb      	lsrs	r3, r3, #11
}
  4033f6:	4618      	mov	r0, r3
  4033f8:	3714      	adds	r7, #20
  4033fa:	46bd      	mov	sp, r7
  4033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  403400:	4770      	bx	lr
  403402:	bf00      	nop
  403404:	00100101 	.word	0x00100101

00403408 <convert_adc_to_lowpass>:

static int32_t convert_adc_to_lowpass(int32_t ADC_value){
  403408:	b5f0      	push	{r4, r5, r6, r7, lr}
  40340a:	b087      	sub	sp, #28
  40340c:	af00      	add	r7, sp, #0
  40340e:	6078      	str	r0, [r7, #4]

	uint32_t max_lowpass = 10000;
  403410:	f242 7310 	movw	r3, #10000	; 0x2710
  403414:	617b      	str	r3, [r7, #20]
	double x = (((double) ADC_value) / MAX_DIGITAL) * (((double) ADC_value) / MAX_DIGITAL);
  403416:	4b20      	ldr	r3, [pc, #128]	; (403498 <convert_adc_to_lowpass+0x90>)
  403418:	6878      	ldr	r0, [r7, #4]
  40341a:	4798      	blx	r3
  40341c:	4c1f      	ldr	r4, [pc, #124]	; (40349c <convert_adc_to_lowpass+0x94>)
  40341e:	a31c      	add	r3, pc, #112	; (adr r3, 403490 <convert_adc_to_lowpass+0x88>)
  403420:	e9d3 2300 	ldrd	r2, r3, [r3]
  403424:	47a0      	blx	r4
  403426:	4603      	mov	r3, r0
  403428:	460c      	mov	r4, r1
  40342a:	461d      	mov	r5, r3
  40342c:	4626      	mov	r6, r4
  40342e:	4b1a      	ldr	r3, [pc, #104]	; (403498 <convert_adc_to_lowpass+0x90>)
  403430:	6878      	ldr	r0, [r7, #4]
  403432:	4798      	blx	r3
  403434:	4c19      	ldr	r4, [pc, #100]	; (40349c <convert_adc_to_lowpass+0x94>)
  403436:	a316      	add	r3, pc, #88	; (adr r3, 403490 <convert_adc_to_lowpass+0x88>)
  403438:	e9d3 2300 	ldrd	r2, r3, [r3]
  40343c:	47a0      	blx	r4
  40343e:	4603      	mov	r3, r0
  403440:	460c      	mov	r4, r1
  403442:	461a      	mov	r2, r3
  403444:	4623      	mov	r3, r4
  403446:	4c16      	ldr	r4, [pc, #88]	; (4034a0 <convert_adc_to_lowpass+0x98>)
  403448:	4628      	mov	r0, r5
  40344a:	4631      	mov	r1, r6
  40344c:	47a0      	blx	r4
  40344e:	4603      	mov	r3, r0
  403450:	460c      	mov	r4, r1
  403452:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return x * max_lowpass + 20;
  403456:	4b13      	ldr	r3, [pc, #76]	; (4034a4 <convert_adc_to_lowpass+0x9c>)
  403458:	6978      	ldr	r0, [r7, #20]
  40345a:	4798      	blx	r3
  40345c:	4c10      	ldr	r4, [pc, #64]	; (4034a0 <convert_adc_to_lowpass+0x98>)
  40345e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
  403462:	47a0      	blx	r4
  403464:	4603      	mov	r3, r0
  403466:	460c      	mov	r4, r1
  403468:	4618      	mov	r0, r3
  40346a:	4621      	mov	r1, r4
  40346c:	4c0e      	ldr	r4, [pc, #56]	; (4034a8 <convert_adc_to_lowpass+0xa0>)
  40346e:	f04f 0200 	mov.w	r2, #0
  403472:	4b0e      	ldr	r3, [pc, #56]	; (4034ac <convert_adc_to_lowpass+0xa4>)
  403474:	47a0      	blx	r4
  403476:	4603      	mov	r3, r0
  403478:	460c      	mov	r4, r1
  40347a:	4619      	mov	r1, r3
  40347c:	4622      	mov	r2, r4
  40347e:	4b0c      	ldr	r3, [pc, #48]	; (4034b0 <convert_adc_to_lowpass+0xa8>)
  403480:	4608      	mov	r0, r1
  403482:	4611      	mov	r1, r2
  403484:	4798      	blx	r3
  403486:	4603      	mov	r3, r0
}
  403488:	4618      	mov	r0, r3
  40348a:	371c      	adds	r7, #28
  40348c:	46bd      	mov	sp, r7
  40348e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403490:	00000000 	.word	0x00000000
  403494:	40affe00 	.word	0x40affe00
  403498:	00406411 	.word	0x00406411
  40349c:	00406731 	.word	0x00406731
  4034a0:	004064dd 	.word	0x004064dd
  4034a4:	004063f1 	.word	0x004063f1
  4034a8:	00406179 	.word	0x00406179
  4034ac:	40340000 	.word	0x40340000
  4034b0:	00406901 	.word	0x00406901

004034b4 <AFEC_Gain_callback>:

static void AFEC_Gain_callback(void){
  4034b4:	b590      	push	{r4, r7, lr}
  4034b6:	b083      	sub	sp, #12
  4034b8:	af00      	add	r7, sp, #0
	uint32_t gain;
	gain = afec_channel_get_value(AFEC1, AFEC_CHANNEL_PIN_GAIN);
  4034ba:	2101      	movs	r1, #1
  4034bc:	480a      	ldr	r0, [pc, #40]	; (4034e8 <AFEC_Gain_callback+0x34>)
  4034be:	4b0b      	ldr	r3, [pc, #44]	; (4034ec <AFEC_Gain_callback+0x38>)
  4034c0:	4798      	blx	r3
  4034c2:	4603      	mov	r3, r0
  4034c4:	607b      	str	r3, [r7, #4]
	gain = convert_adc_to_gain(gain);
  4034c6:	687b      	ldr	r3, [r7, #4]
  4034c8:	4618      	mov	r0, r3
  4034ca:	4b09      	ldr	r3, [pc, #36]	; (4034f0 <AFEC_Gain_callback+0x3c>)
  4034cc:	4798      	blx	r3
  4034ce:	4603      	mov	r3, r0
  4034d0:	607b      	str	r3, [r7, #4]
/*	printf("CALLBACK: %d\n", gain);*/
	xQueueSendFromISR( xQueueGain, &gain, NULL);
  4034d2:	4b08      	ldr	r3, [pc, #32]	; (4034f4 <AFEC_Gain_callback+0x40>)
  4034d4:	6818      	ldr	r0, [r3, #0]
  4034d6:	1d39      	adds	r1, r7, #4
  4034d8:	2300      	movs	r3, #0
  4034da:	2200      	movs	r2, #0
  4034dc:	4c06      	ldr	r4, [pc, #24]	; (4034f8 <AFEC_Gain_callback+0x44>)
  4034de:	47a0      	blx	r4
}
  4034e0:	bf00      	nop
  4034e2:	370c      	adds	r7, #12
  4034e4:	46bd      	mov	sp, r7
  4034e6:	bd90      	pop	{r4, r7, pc}
  4034e8:	40064000 	.word	0x40064000
  4034ec:	004026f1 	.word	0x004026f1
  4034f0:	004033a1 	.word	0x004033a1
  4034f4:	2040cb50 	.word	0x2040cb50
  4034f8:	00400c35 	.word	0x00400c35

004034fc <AFEC_Saturation_callback>:

static void AFEC_Saturation_callback(void){
  4034fc:	b590      	push	{r4, r7, lr}
  4034fe:	b083      	sub	sp, #12
  403500:	af00      	add	r7, sp, #0
	uint32_t saturation;
	saturation = afec_channel_get_value(AFEC1, AFEC_CHANNEL_PIN_SATURATION);
  403502:	2103      	movs	r1, #3
  403504:	480a      	ldr	r0, [pc, #40]	; (403530 <AFEC_Saturation_callback+0x34>)
  403506:	4b0b      	ldr	r3, [pc, #44]	; (403534 <AFEC_Saturation_callback+0x38>)
  403508:	4798      	blx	r3
  40350a:	4603      	mov	r3, r0
  40350c:	607b      	str	r3, [r7, #4]
	saturation = convert_adc_to_saturation(saturation);
  40350e:	687b      	ldr	r3, [r7, #4]
  403510:	4618      	mov	r0, r3
  403512:	4b09      	ldr	r3, [pc, #36]	; (403538 <AFEC_Saturation_callback+0x3c>)
  403514:	4798      	blx	r3
  403516:	4603      	mov	r3, r0
  403518:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR( xQueueSaturation, &saturation, NULL);
  40351a:	4b08      	ldr	r3, [pc, #32]	; (40353c <AFEC_Saturation_callback+0x40>)
  40351c:	6818      	ldr	r0, [r3, #0]
  40351e:	1d39      	adds	r1, r7, #4
  403520:	2300      	movs	r3, #0
  403522:	2200      	movs	r2, #0
  403524:	4c06      	ldr	r4, [pc, #24]	; (403540 <AFEC_Saturation_callback+0x44>)
  403526:	47a0      	blx	r4
}
  403528:	bf00      	nop
  40352a:	370c      	adds	r7, #12
  40352c:	46bd      	mov	sp, r7
  40352e:	bd90      	pop	{r4, r7, pc}
  403530:	40064000 	.word	0x40064000
  403534:	004026f1 	.word	0x004026f1
  403538:	004033d5 	.word	0x004033d5
  40353c:	20422324 	.word	0x20422324
  403540:	00400c35 	.word	0x00400c35

00403544 <AFEC_Lowpass_callback>:

static void AFEC_Lowpass_callback(void){
  403544:	b590      	push	{r4, r7, lr}
  403546:	b083      	sub	sp, #12
  403548:	af00      	add	r7, sp, #0
	uint32_t lowpass;
	lowpass = afec_channel_get_value(AFEC1, AFEC_CHANNEL_PIN_LOWPASS);
  40354a:	2105      	movs	r1, #5
  40354c:	480a      	ldr	r0, [pc, #40]	; (403578 <AFEC_Lowpass_callback+0x34>)
  40354e:	4b0b      	ldr	r3, [pc, #44]	; (40357c <AFEC_Lowpass_callback+0x38>)
  403550:	4798      	blx	r3
  403552:	4603      	mov	r3, r0
  403554:	607b      	str	r3, [r7, #4]
	lowpass = convert_adc_to_lowpass(lowpass);
  403556:	687b      	ldr	r3, [r7, #4]
  403558:	4618      	mov	r0, r3
  40355a:	4b09      	ldr	r3, [pc, #36]	; (403580 <AFEC_Lowpass_callback+0x3c>)
  40355c:	4798      	blx	r3
  40355e:	4603      	mov	r3, r0
  403560:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR( xQueueLowpass, &lowpass, NULL);
  403562:	4b08      	ldr	r3, [pc, #32]	; (403584 <AFEC_Lowpass_callback+0x40>)
  403564:	6818      	ldr	r0, [r3, #0]
  403566:	1d39      	adds	r1, r7, #4
  403568:	2300      	movs	r3, #0
  40356a:	2200      	movs	r2, #0
  40356c:	4c06      	ldr	r4, [pc, #24]	; (403588 <AFEC_Lowpass_callback+0x44>)
  40356e:	47a0      	blx	r4
}
  403570:	bf00      	nop
  403572:	370c      	adds	r7, #12
  403574:	46bd      	mov	sp, r7
  403576:	bd90      	pop	{r4, r7, pc}
  403578:	40064000 	.word	0x40064000
  40357c:	004026f1 	.word	0x004026f1
  403580:	00403409 	.word	0x00403409
  403584:	2042231c 	.word	0x2042231c
  403588:	00400c35 	.word	0x00400c35

0040358c <but1_callback>:

void but1_callback(void)
{
  40358c:	b598      	push	{r3, r4, r7, lr}
  40358e:	af00      	add	r7, sp, #0
	xSemaphoreGiveFromISR(xSemaphoreReverb, 4);
  403590:	4b04      	ldr	r3, [pc, #16]	; (4035a4 <but1_callback+0x18>)
  403592:	6818      	ldr	r0, [r3, #0]
  403594:	2300      	movs	r3, #0
  403596:	2204      	movs	r2, #4
  403598:	2100      	movs	r1, #0
  40359a:	4c03      	ldr	r4, [pc, #12]	; (4035a8 <but1_callback+0x1c>)
  40359c:	47a0      	blx	r4
}
  40359e:	bf00      	nop
  4035a0:	bd98      	pop	{r3, r4, r7, pc}
  4035a2:	bf00      	nop
  4035a4:	20422328 	.word	0x20422328
  4035a8:	00400c35 	.word	0x00400c35

004035ac <but2_callback>:

void but2_callback(void)
{
  4035ac:	b598      	push	{r3, r4, r7, lr}
  4035ae:	af00      	add	r7, sp, #0
	xSemaphoreGiveFromISR(xSemaphoreEcho, 4);
  4035b0:	4b04      	ldr	r3, [pc, #16]	; (4035c4 <but2_callback+0x18>)
  4035b2:	6818      	ldr	r0, [r3, #0]
  4035b4:	2300      	movs	r3, #0
  4035b6:	2204      	movs	r2, #4
  4035b8:	2100      	movs	r1, #0
  4035ba:	4c03      	ldr	r4, [pc, #12]	; (4035c8 <but2_callback+0x1c>)
  4035bc:	47a0      	blx	r4
}
  4035be:	bf00      	nop
  4035c0:	bd98      	pop	{r3, r4, r7, pc}
  4035c2:	bf00      	nop
  4035c4:	20422330 	.word	0x20422330
  4035c8:	00400c35 	.word	0x00400c35

004035cc <but3_callback>:

void but3_callback(void)
{
  4035cc:	b480      	push	{r7}
  4035ce:	af00      	add	r7, sp, #0
	
}
  4035d0:	bf00      	nop
  4035d2:	46bd      	mov	sp, r7
  4035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4035d8:	4770      	bx	lr
	...

004035dc <configure_console>:
 * 8 bits
 * 1 stop bit
 * sem paridade
 */
static void configure_console(void)
{
  4035dc:	b590      	push	{r4, r7, lr}
  4035de:	b085      	sub	sp, #20
  4035e0:	af00      	add	r7, sp, #0
 
	const usart_serial_options_t uart_serial_options = {
  4035e2:	4b08      	ldr	r3, [pc, #32]	; (403604 <configure_console+0x28>)
  4035e4:	463c      	mov	r4, r7
  4035e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4035e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits   = CONF_UART_STOP_BITS,
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  4035ec:	200e      	movs	r0, #14
  4035ee:	4b06      	ldr	r3, [pc, #24]	; (403608 <configure_console+0x2c>)
  4035f0:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  4035f2:	463b      	mov	r3, r7
  4035f4:	4619      	mov	r1, r3
  4035f6:	4805      	ldr	r0, [pc, #20]	; (40360c <configure_console+0x30>)
  4035f8:	4b05      	ldr	r3, [pc, #20]	; (403610 <configure_console+0x34>)
  4035fa:	4798      	blx	r3
}
  4035fc:	bf00      	nop
  4035fe:	3714      	adds	r7, #20
  403600:	46bd      	mov	sp, r7
  403602:	bd90      	pop	{r4, r7, pc}
  403604:	00409a24 	.word	0x00409a24
  403608:	00402811 	.word	0x00402811
  40360c:	40028000 	.word	0x40028000
  403610:	00402bd1 	.word	0x00402bd1

00403614 <config_ADC_AUDIO>:

static void config_ADC_AUDIO(void){
  403614:	b590      	push	{r4, r7, lr}
  403616:	b08b      	sub	sp, #44	; 0x2c
  403618:	af00      	add	r7, sp, #0
/************************************* 
   * Ativa e configura AFEC
   *************************************/  
  /* Ativa AFEC - 0 */
	afec_enable(AFEC0);
  40361a:	4821      	ldr	r0, [pc, #132]	; (4036a0 <config_ADC_AUDIO+0x8c>)
  40361c:	4b21      	ldr	r3, [pc, #132]	; (4036a4 <config_ADC_AUDIO+0x90>)
  40361e:	4798      	blx	r3

	/* struct de configuracao do AFEC */
	struct afec_config afec_cfg;

	/* Carrega parametros padrao */
	afec_get_config_defaults(&afec_cfg);
  403620:	f107 0310 	add.w	r3, r7, #16
  403624:	4618      	mov	r0, r3
  403626:	4b20      	ldr	r3, [pc, #128]	; (4036a8 <config_ADC_AUDIO+0x94>)
  403628:	4798      	blx	r3

	/* Configura AFEC */
	afec_init(AFEC0, &afec_cfg);
  40362a:	f107 0310 	add.w	r3, r7, #16
  40362e:	4619      	mov	r1, r3
  403630:	481b      	ldr	r0, [pc, #108]	; (4036a0 <config_ADC_AUDIO+0x8c>)
  403632:	4b1e      	ldr	r3, [pc, #120]	; (4036ac <config_ADC_AUDIO+0x98>)
  403634:	4798      	blx	r3
  
	/* Configura trigger por software */
	afec_set_trigger(AFEC0, AFEC_TRIG_TIO_CH_0);
  403636:	2103      	movs	r1, #3
  403638:	4819      	ldr	r0, [pc, #100]	; (4036a0 <config_ADC_AUDIO+0x8c>)
  40363a:	4b1d      	ldr	r3, [pc, #116]	; (4036b0 <config_ADC_AUDIO+0x9c>)
  40363c:	4798      	blx	r3
		
	AFEC0->AFEC_MR |= 3;
  40363e:	4a18      	ldr	r2, [pc, #96]	; (4036a0 <config_ADC_AUDIO+0x8c>)
  403640:	4b17      	ldr	r3, [pc, #92]	; (4036a0 <config_ADC_AUDIO+0x8c>)
  403642:	685b      	ldr	r3, [r3, #4]
  403644:	f043 0303 	orr.w	r3, r3, #3
  403648:	6053      	str	r3, [r2, #4]
  
	/* configura call back */
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0,	AFEC_Audio_callback, 1); 
  40364a:	2301      	movs	r3, #1
  40364c:	4a19      	ldr	r2, [pc, #100]	; (4036b4 <config_ADC_AUDIO+0xa0>)
  40364e:	2100      	movs	r1, #0
  403650:	4813      	ldr	r0, [pc, #76]	; (4036a0 <config_ADC_AUDIO+0x8c>)
  403652:	4c19      	ldr	r4, [pc, #100]	; (4036b8 <config_ADC_AUDIO+0xa4>)
  403654:	47a0      	blx	r4
   
	/*** Configuracao espec�fica do canal AFEC ***/
	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  403656:	f107 030c 	add.w	r3, r7, #12
  40365a:	4618      	mov	r0, r3
  40365c:	4b17      	ldr	r3, [pc, #92]	; (4036bc <config_ADC_AUDIO+0xa8>)
  40365e:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  403660:	2300      	movs	r3, #0
  403662:	737b      	strb	r3, [r7, #13]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_PIN, &afec_ch_cfg);
  403664:	f107 030c 	add.w	r3, r7, #12
  403668:	461a      	mov	r2, r3
  40366a:	2100      	movs	r1, #0
  40366c:	480c      	ldr	r0, [pc, #48]	; (4036a0 <config_ADC_AUDIO+0x8c>)
  40366e:	4b14      	ldr	r3, [pc, #80]	; (4036c0 <config_ADC_AUDIO+0xac>)
  403670:	4798      	blx	r3
	* Calibracao:
	* Because the internal ADC offset is 0x200, it should cancel it and shift
	 down to 0.
	 */
	//afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_PIN, 0x1B0);
	afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_PIN, 0x1A0);
  403672:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
  403676:	2100      	movs	r1, #0
  403678:	4809      	ldr	r0, [pc, #36]	; (4036a0 <config_ADC_AUDIO+0x8c>)
  40367a:	4b12      	ldr	r3, [pc, #72]	; (4036c4 <config_ADC_AUDIO+0xb0>)
  40367c:	4798      	blx	r3

	/***  Configura sensor de temperatura ***/
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  40367e:	1d3b      	adds	r3, r7, #4
  403680:	4618      	mov	r0, r3
  403682:	4b11      	ldr	r3, [pc, #68]	; (4036c8 <config_ADC_AUDIO+0xb4>)
  403684:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  403686:	1d3b      	adds	r3, r7, #4
  403688:	4619      	mov	r1, r3
  40368a:	4805      	ldr	r0, [pc, #20]	; (4036a0 <config_ADC_AUDIO+0x8c>)
  40368c:	4b0f      	ldr	r3, [pc, #60]	; (4036cc <config_ADC_AUDIO+0xb8>)
  40368e:	4798      	blx	r3

	/* Selecina canal e inicializa convers�o */  
	afec_channel_enable(AFEC0, AFEC_CHANNEL_PIN);
  403690:	2100      	movs	r1, #0
  403692:	4803      	ldr	r0, [pc, #12]	; (4036a0 <config_ADC_AUDIO+0x8c>)
  403694:	4b0e      	ldr	r3, [pc, #56]	; (4036d0 <config_ADC_AUDIO+0xbc>)
  403696:	4798      	blx	r3
}
  403698:	bf00      	nop
  40369a:	372c      	adds	r7, #44	; 0x2c
  40369c:	46bd      	mov	sp, r7
  40369e:	bd90      	pop	{r4, r7, pc}
  4036a0:	4003c000 	.word	0x4003c000
  4036a4:	004050d5 	.word	0x004050d5
  4036a8:	00404d65 	.word	0x00404d65
  4036ac:	00404e15 	.word	0x00404e15
  4036b0:	004025f9 	.word	0x004025f9
  4036b4:	00403225 	.word	0x00403225
  4036b8:	00404ead 	.word	0x00404ead
  4036bc:	00404dc5 	.word	0x00404dc5
  4036c0:	00404c89 	.word	0x00404c89
  4036c4:	0040271d 	.word	0x0040271d
  4036c8:	00404de5 	.word	0x00404de5
  4036cc:	00404d1d 	.word	0x00404d1d
  4036d0:	00402659 	.word	0x00402659

004036d4 <config_AFEC_EFFECTS>:

static void config_AFEC_EFFECTS(void){
  4036d4:	b590      	push	{r4, r7, lr}
  4036d6:	b08b      	sub	sp, #44	; 0x2c
  4036d8:	af00      	add	r7, sp, #0
/*************************************
   * Ativa e configura AFEC
   *************************************/
  /* Ativa AFEC - 0 */
	afec_enable(AFEC1);
  4036da:	482f      	ldr	r0, [pc, #188]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  4036dc:	4b2f      	ldr	r3, [pc, #188]	; (40379c <config_AFEC_EFFECTS+0xc8>)
  4036de:	4798      	blx	r3

	/* struct de configuracao do AFEC */
	struct afec_config afec_cfg;

	/* Carrega parametros padrao */
	afec_get_config_defaults(&afec_cfg);
  4036e0:	f107 0310 	add.w	r3, r7, #16
  4036e4:	4618      	mov	r0, r3
  4036e6:	4b2e      	ldr	r3, [pc, #184]	; (4037a0 <config_AFEC_EFFECTS+0xcc>)
  4036e8:	4798      	blx	r3

	/* Configura AFEC */
	afec_init(AFEC1, &afec_cfg);
  4036ea:	f107 0310 	add.w	r3, r7, #16
  4036ee:	4619      	mov	r1, r3
  4036f0:	4829      	ldr	r0, [pc, #164]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  4036f2:	4b2c      	ldr	r3, [pc, #176]	; (4037a4 <config_AFEC_EFFECTS+0xd0>)
  4036f4:	4798      	blx	r3

	/* Configura trigger por software */
	afec_set_trigger(AFEC1, AFEC_TRIG_SW);
  4036f6:	2100      	movs	r1, #0
  4036f8:	4827      	ldr	r0, [pc, #156]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  4036fa:	4b2b      	ldr	r3, [pc, #172]	; (4037a8 <config_AFEC_EFFECTS+0xd4>)
  4036fc:	4798      	blx	r3

/*	AFEC1->AFEC_MR |= 3;*/

	/* configura call back */
	afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_3,	AFEC_Saturation_callback, 1);
  4036fe:	2301      	movs	r3, #1
  403700:	4a2a      	ldr	r2, [pc, #168]	; (4037ac <config_AFEC_EFFECTS+0xd8>)
  403702:	2103      	movs	r1, #3
  403704:	4824      	ldr	r0, [pc, #144]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  403706:	4c2a      	ldr	r4, [pc, #168]	; (4037b0 <config_AFEC_EFFECTS+0xdc>)
  403708:	47a0      	blx	r4
	afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_1,	AFEC_Gain_callback, 1);
  40370a:	2301      	movs	r3, #1
  40370c:	4a29      	ldr	r2, [pc, #164]	; (4037b4 <config_AFEC_EFFECTS+0xe0>)
  40370e:	2101      	movs	r1, #1
  403710:	4821      	ldr	r0, [pc, #132]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  403712:	4c27      	ldr	r4, [pc, #156]	; (4037b0 <config_AFEC_EFFECTS+0xdc>)
  403714:	47a0      	blx	r4
	afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_5,	AFEC_Lowpass_callback, 1);
  403716:	2301      	movs	r3, #1
  403718:	4a27      	ldr	r2, [pc, #156]	; (4037b8 <config_AFEC_EFFECTS+0xe4>)
  40371a:	2105      	movs	r1, #5
  40371c:	481e      	ldr	r0, [pc, #120]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  40371e:	4c24      	ldr	r4, [pc, #144]	; (4037b0 <config_AFEC_EFFECTS+0xdc>)
  403720:	47a0      	blx	r4

	/*** Configuracao espec?fica do canal AFEC ***/
	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  403722:	f107 030c 	add.w	r3, r7, #12
  403726:	4618      	mov	r0, r3
  403728:	4b24      	ldr	r3, [pc, #144]	; (4037bc <config_AFEC_EFFECTS+0xe8>)
  40372a:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  40372c:	2300      	movs	r3, #0
  40372e:	737b      	strb	r3, [r7, #13]
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_PIN_GAIN, &afec_ch_cfg);
  403730:	f107 030c 	add.w	r3, r7, #12
  403734:	461a      	mov	r2, r3
  403736:	2101      	movs	r1, #1
  403738:	4817      	ldr	r0, [pc, #92]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  40373a:	4b21      	ldr	r3, [pc, #132]	; (4037c0 <config_AFEC_EFFECTS+0xec>)
  40373c:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_PIN_SATURATION, &afec_ch_cfg);
  40373e:	f107 030c 	add.w	r3, r7, #12
  403742:	461a      	mov	r2, r3
  403744:	2103      	movs	r1, #3
  403746:	4814      	ldr	r0, [pc, #80]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  403748:	4b1d      	ldr	r3, [pc, #116]	; (4037c0 <config_AFEC_EFFECTS+0xec>)
  40374a:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_PIN_LOWPASS, &afec_ch_cfg);
  40374c:	f107 030c 	add.w	r3, r7, #12
  403750:	461a      	mov	r2, r3
  403752:	2105      	movs	r1, #5
  403754:	4810      	ldr	r0, [pc, #64]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  403756:	4b1a      	ldr	r3, [pc, #104]	; (4037c0 <config_AFEC_EFFECTS+0xec>)
  403758:	4798      	blx	r3
	/*
	* Calibracao:
	* Because the internal ADC offset is 0x200, it should cancel it and shift
	 down to 0.
	 */
	afec_channel_set_analog_offset(AFEC1, AFEC_CHANNEL_PIN_GAIN, 0x200);
  40375a:	f44f 7200 	mov.w	r2, #512	; 0x200
  40375e:	2101      	movs	r1, #1
  403760:	480d      	ldr	r0, [pc, #52]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  403762:	4b18      	ldr	r3, [pc, #96]	; (4037c4 <config_AFEC_EFFECTS+0xf0>)
  403764:	4798      	blx	r3
	afec_channel_set_analog_offset(AFEC1, AFEC_CHANNEL_PIN_SATURATION, 0x200);
  403766:	f44f 7200 	mov.w	r2, #512	; 0x200
  40376a:	2103      	movs	r1, #3
  40376c:	480a      	ldr	r0, [pc, #40]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  40376e:	4b15      	ldr	r3, [pc, #84]	; (4037c4 <config_AFEC_EFFECTS+0xf0>)
  403770:	4798      	blx	r3
	afec_channel_set_analog_offset(AFEC1, AFEC_CHANNEL_PIN_LOWPASS, 0x200);
  403772:	f44f 7200 	mov.w	r2, #512	; 0x200
  403776:	2105      	movs	r1, #5
  403778:	4807      	ldr	r0, [pc, #28]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  40377a:	4b12      	ldr	r3, [pc, #72]	; (4037c4 <config_AFEC_EFFECTS+0xf0>)
  40377c:	4798      	blx	r3

	/***  Configura sensor de temperatura ***/
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  40377e:	1d3b      	adds	r3, r7, #4
  403780:	4618      	mov	r0, r3
  403782:	4b11      	ldr	r3, [pc, #68]	; (4037c8 <config_AFEC_EFFECTS+0xf4>)
  403784:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC1, &afec_temp_sensor_cfg);
  403786:	1d3b      	adds	r3, r7, #4
  403788:	4619      	mov	r1, r3
  40378a:	4803      	ldr	r0, [pc, #12]	; (403798 <config_AFEC_EFFECTS+0xc4>)
  40378c:	4b0f      	ldr	r3, [pc, #60]	; (4037cc <config_AFEC_EFFECTS+0xf8>)
  40378e:	4798      	blx	r3
}
  403790:	bf00      	nop
  403792:	372c      	adds	r7, #44	; 0x2c
  403794:	46bd      	mov	sp, r7
  403796:	bd90      	pop	{r4, r7, pc}
  403798:	40064000 	.word	0x40064000
  40379c:	004050d5 	.word	0x004050d5
  4037a0:	00404d65 	.word	0x00404d65
  4037a4:	00404e15 	.word	0x00404e15
  4037a8:	004025f9 	.word	0x004025f9
  4037ac:	004034fd 	.word	0x004034fd
  4037b0:	00404ead 	.word	0x00404ead
  4037b4:	004034b5 	.word	0x004034b5
  4037b8:	00403545 	.word	0x00403545
  4037bc:	00404dc5 	.word	0x00404dc5
  4037c0:	00404c89 	.word	0x00404c89
  4037c4:	0040271d 	.word	0x0040271d
  4037c8:	00404de5 	.word	0x00404de5
  4037cc:	00404d1d 	.word	0x00404d1d

004037d0 <config_DAC>:

static void config_DAC(void){
  4037d0:	b580      	push	{r7, lr}
  4037d2:	af00      	add	r7, sp, #0
	/* Enable clock for DACC */
	sysclk_enable_peripheral_clock(DACC_ID);
  4037d4:	201e      	movs	r0, #30
  4037d6:	4b05      	ldr	r3, [pc, #20]	; (4037ec <config_DAC+0x1c>)
  4037d8:	4798      	blx	r3

	/* Reset DACC registers */
	dacc_reset(DACC_BASE);
  4037da:	4805      	ldr	r0, [pc, #20]	; (4037f0 <config_DAC+0x20>)
  4037dc:	4b05      	ldr	r3, [pc, #20]	; (4037f4 <config_DAC+0x24>)
  4037de:	4798      	blx	r3
	dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  4037e0:	2100      	movs	r1, #0
  4037e2:	4803      	ldr	r0, [pc, #12]	; (4037f0 <config_DAC+0x20>)
  4037e4:	4b04      	ldr	r3, [pc, #16]	; (4037f8 <config_DAC+0x28>)
  4037e6:	4798      	blx	r3
}
  4037e8:	bf00      	nop
  4037ea:	bd80      	pop	{r7, pc}
  4037ec:	00402811 	.word	0x00402811
  4037f0:	40040000 	.word	0x40040000
  4037f4:	004001ad 	.word	0x004001ad
  4037f8:	00400205 	.word	0x00400205

004037fc <TC_init>:

/**
* Configura TimerCounter (TC) para gerar uma interrupcao no canal (ID_TC e TC_CHANNEL)
* na taxa de especificada em freq.
*/
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4037fc:	b590      	push	{r4, r7, lr}
  4037fe:	b08b      	sub	sp, #44	; 0x2c
  403800:	af02      	add	r7, sp, #8
  403802:	60f8      	str	r0, [r7, #12]
  403804:	60b9      	str	r1, [r7, #8]
  403806:	607a      	str	r2, [r7, #4]
  403808:	603b      	str	r3, [r7, #0]
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
  40380a:	4b1f      	ldr	r3, [pc, #124]	; (403888 <TC_init+0x8c>)
  40380c:	4798      	blx	r3
  40380e:	61f8      	str	r0, [r7, #28]

	pmc_enable_periph_clk(ID_TC);
  403810:	68bb      	ldr	r3, [r7, #8]
  403812:	4618      	mov	r0, r3
  403814:	4b1d      	ldr	r3, [pc, #116]	; (40388c <TC_init+0x90>)
  403816:	4798      	blx	r3

	/** Configura o TC para operar em  4Mhz e interrup�c�o no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  403818:	6838      	ldr	r0, [r7, #0]
  40381a:	f107 0114 	add.w	r1, r7, #20
  40381e:	f107 0218 	add.w	r2, r7, #24
  403822:	69fb      	ldr	r3, [r7, #28]
  403824:	9300      	str	r3, [sp, #0]
  403826:	460b      	mov	r3, r1
  403828:	69f9      	ldr	r1, [r7, #28]
  40382a:	4c19      	ldr	r4, [pc, #100]	; (403890 <TC_init+0x94>)
  40382c:	47a0      	blx	r4
	
	//PMC->PMC_SCER = 1 << 14;
	ul_tcclks = 1;
  40382e:	2301      	movs	r3, #1
  403830:	617b      	str	r3, [r7, #20]
	
	tc_init(TC, TC_CHANNEL, ul_tcclks 
  403832:	6879      	ldr	r1, [r7, #4]
  403834:	697b      	ldr	r3, [r7, #20]
  403836:	f443 231c 	orr.w	r3, r3, #638976	; 0x9c000
  40383a:	461a      	mov	r2, r3
  40383c:	68f8      	ldr	r0, [r7, #12]
  40383e:	4b15      	ldr	r3, [pc, #84]	; (403894 <TC_init+0x98>)
  403840:	4798      	blx	r3
							| TC_CMR_ACPA_SET /* RA Compare Effect: set */
							| TC_CMR_ACPC_CLEAR /* RC Compare Effect: clear */
							| TC_CMR_CPCTRG /* UP mode with automatic trigger on RC Compare */
	);
	
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq /8 );
  403842:	6879      	ldr	r1, [r7, #4]
  403844:	69bb      	ldr	r3, [r7, #24]
  403846:	69fa      	ldr	r2, [r7, #28]
  403848:	fbb2 f2f3 	udiv	r2, r2, r3
  40384c:	683b      	ldr	r3, [r7, #0]
  40384e:	fbb2 f3f3 	udiv	r3, r2, r3
  403852:	08db      	lsrs	r3, r3, #3
  403854:	461a      	mov	r2, r3
  403856:	68f8      	ldr	r0, [r7, #12]
  403858:	4b0f      	ldr	r3, [pc, #60]	; (403898 <TC_init+0x9c>)
  40385a:	4798      	blx	r3
	tc_write_ra(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq / 8 / 2);
  40385c:	6879      	ldr	r1, [r7, #4]
  40385e:	69bb      	ldr	r3, [r7, #24]
  403860:	69fa      	ldr	r2, [r7, #28]
  403862:	fbb2 f2f3 	udiv	r2, r2, r3
  403866:	683b      	ldr	r3, [r7, #0]
  403868:	fbb2 f3f3 	udiv	r3, r2, r3
  40386c:	091b      	lsrs	r3, r3, #4
  40386e:	461a      	mov	r2, r3
  403870:	68f8      	ldr	r0, [r7, #12]
  403872:	4b0a      	ldr	r3, [pc, #40]	; (40389c <TC_init+0xa0>)
  403874:	4798      	blx	r3

	tc_start(TC, TC_CHANNEL);
  403876:	687b      	ldr	r3, [r7, #4]
  403878:	4619      	mov	r1, r3
  40387a:	68f8      	ldr	r0, [r7, #12]
  40387c:	4b08      	ldr	r3, [pc, #32]	; (4038a0 <TC_init+0xa4>)
  40387e:	4798      	blx	r3
}
  403880:	bf00      	nop
  403882:	3724      	adds	r7, #36	; 0x24
  403884:	46bd      	mov	sp, r7
  403886:	bd90      	pop	{r4, r7, pc}
  403888:	004027e9 	.word	0x004027e9
  40388c:	0040598d 	.word	0x0040598d
  403890:	00403ec9 	.word	0x00403ec9
  403894:	00403dfd 	.word	0x00403dfd
  403898:	00403e7f 	.word	0x00403e7f
  40389c:	00403e59 	.word	0x00403e59
  4038a0:	00403e37 	.word	0x00403e37

004038a4 <button_init>:

void button_init(void)
{
  4038a4:	b590      	push	{r4, r7, lr}
  4038a6:	b083      	sub	sp, #12
  4038a8:	af02      	add	r7, sp, #8

	// Inicializa clock do perif�rico PIO responsavel pelo botao
	pmc_enable_periph_clk(BUTREVERB_PIO_ID);
  4038aa:	2010      	movs	r0, #16
  4038ac:	4b31      	ldr	r3, [pc, #196]	; (403974 <button_init+0xd0>)
  4038ae:	4798      	blx	r3
	pmc_enable_periph_clk(BUTECHO_PIO_ID);
  4038b0:	200c      	movs	r0, #12
  4038b2:	4b30      	ldr	r3, [pc, #192]	; (403974 <button_init+0xd0>)
  4038b4:	4798      	blx	r3
	pmc_enable_periph_clk(BUT3_PIO_ID);
  4038b6:	200a      	movs	r0, #10
  4038b8:	4b2e      	ldr	r3, [pc, #184]	; (403974 <button_init+0xd0>)
  4038ba:	4798      	blx	r3

	// Configura PIO para lidar com o pino do bot�o como entrada
	// com pull-up
	pio_configure(BUTREVERB_PIO, PIO_INPUT, BUTREVERB_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4038bc:	2309      	movs	r3, #9
  4038be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4038c2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4038c6:	482c      	ldr	r0, [pc, #176]	; (403978 <button_init+0xd4>)
  4038c8:	4c2c      	ldr	r4, [pc, #176]	; (40397c <button_init+0xd8>)
  4038ca:	47a0      	blx	r4
	pio_configure(BUTECHO_PIO, PIO_INPUT, BUTECHO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4038cc:	2309      	movs	r3, #9
  4038ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4038d2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4038d6:	482a      	ldr	r0, [pc, #168]	; (403980 <button_init+0xdc>)
  4038d8:	4c28      	ldr	r4, [pc, #160]	; (40397c <button_init+0xd8>)
  4038da:	47a0      	blx	r4
	pio_configure(BUT3_PIO, PIO_INPUT, BUT3_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4038dc:	2309      	movs	r3, #9
  4038de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4038e2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4038e6:	4827      	ldr	r0, [pc, #156]	; (403984 <button_init+0xe0>)
  4038e8:	4c24      	ldr	r4, [pc, #144]	; (40397c <button_init+0xd8>)
  4038ea:	47a0      	blx	r4

	// Configura interrup��o no pino referente ao botao e associa
	// fun��o de callback caso uma interrup��o for gerada
	// a fun��o de callback � a: but_callback()
	pio_handler_set(BUTREVERB_PIO, BUTREVERB_PIO_ID, BUTREVERB_IDX_MASK, PIO_IT_FALL_EDGE, but1_callback);
  4038ec:	4b26      	ldr	r3, [pc, #152]	; (403988 <button_init+0xe4>)
  4038ee:	9300      	str	r3, [sp, #0]
  4038f0:	2350      	movs	r3, #80	; 0x50
  4038f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4038f6:	2110      	movs	r1, #16
  4038f8:	481f      	ldr	r0, [pc, #124]	; (403978 <button_init+0xd4>)
  4038fa:	4c24      	ldr	r4, [pc, #144]	; (40398c <button_init+0xe8>)
  4038fc:	47a0      	blx	r4
	pio_handler_set(BUTECHO_PIO, BUTECHO_PIO_ID, BUTECHO_IDX_MASK, PIO_IT_FALL_EDGE, but2_callback);
  4038fe:	4b24      	ldr	r3, [pc, #144]	; (403990 <button_init+0xec>)
  403900:	9300      	str	r3, [sp, #0]
  403902:	2350      	movs	r3, #80	; 0x50
  403904:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403908:	210c      	movs	r1, #12
  40390a:	481d      	ldr	r0, [pc, #116]	; (403980 <button_init+0xdc>)
  40390c:	4c1f      	ldr	r4, [pc, #124]	; (40398c <button_init+0xe8>)
  40390e:	47a0      	blx	r4
	pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_IDX_MASK, PIO_IT_FALL_EDGE, but3_callback);
  403910:	4b20      	ldr	r3, [pc, #128]	; (403994 <button_init+0xf0>)
  403912:	9300      	str	r3, [sp, #0]
  403914:	2350      	movs	r3, #80	; 0x50
  403916:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40391a:	210a      	movs	r1, #10
  40391c:	4819      	ldr	r0, [pc, #100]	; (403984 <button_init+0xe0>)
  40391e:	4c1b      	ldr	r4, [pc, #108]	; (40398c <button_init+0xe8>)
  403920:	47a0      	blx	r4


	// Ativa interrup��o
	pio_enable_interrupt(BUTREVERB_PIO, BUTREVERB_IDX_MASK);
  403922:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403926:	4814      	ldr	r0, [pc, #80]	; (403978 <button_init+0xd4>)
  403928:	4b1b      	ldr	r3, [pc, #108]	; (403998 <button_init+0xf4>)
  40392a:	4798      	blx	r3
	pio_enable_interrupt(BUTECHO_PIO, BUTECHO_IDX_MASK);
  40392c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403930:	4813      	ldr	r0, [pc, #76]	; (403980 <button_init+0xdc>)
  403932:	4b19      	ldr	r3, [pc, #100]	; (403998 <button_init+0xf4>)
  403934:	4798      	blx	r3
	pio_enable_interrupt(BUT3_PIO, BUT3_IDX_MASK);
  403936:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40393a:	4812      	ldr	r0, [pc, #72]	; (403984 <button_init+0xe0>)
  40393c:	4b16      	ldr	r3, [pc, #88]	; (403998 <button_init+0xf4>)
  40393e:	4798      	blx	r3

	// Configura NVIC para receber interrupcoes do PIO do botao
	// com prioridade 4 (quanto mais pr�ximo de 0 maior)
	NVIC_EnableIRQ(BUTREVERB_PIO_ID);
  403940:	2010      	movs	r0, #16
  403942:	4b16      	ldr	r3, [pc, #88]	; (40399c <button_init+0xf8>)
  403944:	4798      	blx	r3
	NVIC_SetPriority(BUTREVERB_PIO_ID, 4); // Prioridade 4
  403946:	2104      	movs	r1, #4
  403948:	2010      	movs	r0, #16
  40394a:	4b15      	ldr	r3, [pc, #84]	; (4039a0 <button_init+0xfc>)
  40394c:	4798      	blx	r3
	NVIC_EnableIRQ(BUTECHO_PIO_ID);
  40394e:	200c      	movs	r0, #12
  403950:	4b12      	ldr	r3, [pc, #72]	; (40399c <button_init+0xf8>)
  403952:	4798      	blx	r3
	NVIC_SetPriority(BUTECHO_PIO_ID, 4); // Prioridade 4
  403954:	2104      	movs	r1, #4
  403956:	200c      	movs	r0, #12
  403958:	4b11      	ldr	r3, [pc, #68]	; (4039a0 <button_init+0xfc>)
  40395a:	4798      	blx	r3
	NVIC_EnableIRQ(BUT3_PIO_ID);
  40395c:	200a      	movs	r0, #10
  40395e:	4b0f      	ldr	r3, [pc, #60]	; (40399c <button_init+0xf8>)
  403960:	4798      	blx	r3
	NVIC_SetPriority(BUT3_PIO_ID, 4); // Prioridade 4
  403962:	2104      	movs	r1, #4
  403964:	200a      	movs	r0, #10
  403966:	4b0e      	ldr	r3, [pc, #56]	; (4039a0 <button_init+0xfc>)
  403968:	4798      	blx	r3
}
  40396a:	bf00      	nop
  40396c:	3704      	adds	r7, #4
  40396e:	46bd      	mov	sp, r7
  403970:	bd90      	pop	{r4, r7, pc}
  403972:	bf00      	nop
  403974:	0040598d 	.word	0x0040598d
  403978:	400e1400 	.word	0x400e1400
  40397c:	0040535d 	.word	0x0040535d
  403980:	400e1200 	.word	0x400e1200
  403984:	400e0e00 	.word	0x400e0e00
  403988:	0040358d 	.word	0x0040358d
  40398c:	004055b1 	.word	0x004055b1
  403990:	004035ad 	.word	0x004035ad
  403994:	004035cd 	.word	0x004035cd
  403998:	00405495 	.word	0x00405495
  40399c:	00402559 	.word	0x00402559
  4039a0:	0040258d 	.word	0x0040258d

004039a4 <led_init>:

void led_init(void)
{
  4039a4:	b598      	push	{r3, r4, r7, lr}
  4039a6:	af00      	add	r7, sp, #0
	// Configura led
	pmc_enable_periph_clk(LEDREVERB_PIO_ID);
  4039a8:	200a      	movs	r0, #10
  4039aa:	4b0a      	ldr	r3, [pc, #40]	; (4039d4 <led_init+0x30>)
  4039ac:	4798      	blx	r3
	pmc_enable_periph_clk(LEDECHO_PIO_ID);
  4039ae:	200b      	movs	r0, #11
  4039b0:	4b08      	ldr	r3, [pc, #32]	; (4039d4 <led_init+0x30>)
  4039b2:	4798      	blx	r3

	pio_configure(LEDREVERB_PIO, PIO_OUTPUT_0, LEDREVERB_IDX_MASK, PIO_DEFAULT);
  4039b4:	2300      	movs	r3, #0
  4039b6:	2201      	movs	r2, #1
  4039b8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4039bc:	4806      	ldr	r0, [pc, #24]	; (4039d8 <led_init+0x34>)
  4039be:	4c07      	ldr	r4, [pc, #28]	; (4039dc <led_init+0x38>)
  4039c0:	47a0      	blx	r4
	pio_configure(LEDECHO_PIO, PIO_OUTPUT_0, LEDECHO_IDX_MASK, PIO_DEFAULT);
  4039c2:	2300      	movs	r3, #0
  4039c4:	2204      	movs	r2, #4
  4039c6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4039ca:	4805      	ldr	r0, [pc, #20]	; (4039e0 <led_init+0x3c>)
  4039cc:	4c03      	ldr	r4, [pc, #12]	; (4039dc <led_init+0x38>)
  4039ce:	47a0      	blx	r4
}
  4039d0:	bf00      	nop
  4039d2:	bd98      	pop	{r3, r4, r7, pc}
  4039d4:	0040598d 	.word	0x0040598d
  4039d8:	400e0e00 	.word	0x400e0e00
  4039dc:	0040535d 	.word	0x0040535d
  4039e0:	400e1000 	.word	0x400e1000

004039e4 <task_adc_to_dac>:

static void task_adc_to_dac(void *pvParameters) {
  4039e4:	b590      	push	{r4, r7, lr}
  4039e6:	b087      	sub	sp, #28
  4039e8:	af00      	add	r7, sp, #0
  4039ea:	6078      	str	r0, [r7, #4]

	xQueueEffects = xQueueCreate( 100, sizeof( effects_t ) );
  4039ec:	2200      	movs	r2, #0
  4039ee:	210c      	movs	r1, #12
  4039f0:	2064      	movs	r0, #100	; 0x64
  4039f2:	4b5d      	ldr	r3, [pc, #372]	; (403b68 <task_adc_to_dac+0x184>)
  4039f4:	4798      	blx	r3
  4039f6:	4602      	mov	r2, r0
  4039f8:	4b5c      	ldr	r3, [pc, #368]	; (403b6c <task_adc_to_dac+0x188>)
  4039fa:	601a      	str	r2, [r3, #0]
	xSemaphoreReverb = xSemaphoreCreateCounting(1, 0);
  4039fc:	2100      	movs	r1, #0
  4039fe:	2001      	movs	r0, #1
  403a00:	4b5b      	ldr	r3, [pc, #364]	; (403b70 <task_adc_to_dac+0x18c>)
  403a02:	4798      	blx	r3
  403a04:	4602      	mov	r2, r0
  403a06:	4b5b      	ldr	r3, [pc, #364]	; (403b74 <task_adc_to_dac+0x190>)
  403a08:	601a      	str	r2, [r3, #0]
	xSemaphoreEcho = xSemaphoreCreateCounting(1, 0);
  403a0a:	2100      	movs	r1, #0
  403a0c:	2001      	movs	r0, #1
  403a0e:	4b58      	ldr	r3, [pc, #352]	; (403b70 <task_adc_to_dac+0x18c>)
  403a10:	4798      	blx	r3
  403a12:	4602      	mov	r2, r0
  403a14:	4b58      	ldr	r3, [pc, #352]	; (403b78 <task_adc_to_dac+0x194>)
  403a16:	601a      	str	r2, [r3, #0]
	
	old_buffer.p = 0;
  403a18:	4a58      	ldr	r2, [pc, #352]	; (403b7c <task_adc_to_dac+0x198>)
  403a1a:	4b59      	ldr	r3, [pc, #356]	; (403b80 <task_adc_to_dac+0x19c>)
  403a1c:	4413      	add	r3, r2
  403a1e:	2200      	movs	r2, #0
  403a20:	601a      	str	r2, [r3, #0]
	old_buffer.maxp = 22000;
  403a22:	4a56      	ldr	r2, [pc, #344]	; (403b7c <task_adc_to_dac+0x198>)
  403a24:	4b57      	ldr	r3, [pc, #348]	; (403b84 <task_adc_to_dac+0x1a0>)
  403a26:	4413      	add	r3, r2
  403a28:	f245 52f0 	movw	r2, #22000	; 0x55f0
  403a2c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < old_buffer.maxp; i++) {
  403a2e:	2300      	movs	r3, #0
  403a30:	617b      	str	r3, [r7, #20]
  403a32:	e007      	b.n	403a44 <task_adc_to_dac+0x60>
		old_buffer.values[i] = 0;
  403a34:	4a51      	ldr	r2, [pc, #324]	; (403b7c <task_adc_to_dac+0x198>)
  403a36:	697b      	ldr	r3, [r7, #20]
  403a38:	2100      	movs	r1, #0
  403a3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < old_buffer.maxp; i++) {
  403a3e:	697b      	ldr	r3, [r7, #20]
  403a40:	3301      	adds	r3, #1
  403a42:	617b      	str	r3, [r7, #20]
  403a44:	4a4d      	ldr	r2, [pc, #308]	; (403b7c <task_adc_to_dac+0x198>)
  403a46:	4b4f      	ldr	r3, [pc, #316]	; (403b84 <task_adc_to_dac+0x1a0>)
  403a48:	4413      	add	r3, r2
  403a4a:	681a      	ldr	r2, [r3, #0]
  403a4c:	697b      	ldr	r3, [r7, #20]
  403a4e:	429a      	cmp	r2, r3
  403a50:	dcf0      	bgt.n	403a34 <task_adc_to_dac+0x50>
	}

	config_ADC_AUDIO();
  403a52:	4b4d      	ldr	r3, [pc, #308]	; (403b88 <task_adc_to_dac+0x1a4>)
  403a54:	4798      	blx	r3
	
	TC_init(TC0, ID_TC0, 0, 44000);
  403a56:	f64a 33e0 	movw	r3, #44000	; 0xabe0
  403a5a:	2200      	movs	r2, #0
  403a5c:	2117      	movs	r1, #23
  403a5e:	484b      	ldr	r0, [pc, #300]	; (403b8c <task_adc_to_dac+0x1a8>)
  403a60:	4c4b      	ldr	r4, [pc, #300]	; (403b90 <task_adc_to_dac+0x1ac>)
  403a62:	47a0      	blx	r4

	config_DAC();
  403a64:	4b4b      	ldr	r3, [pc, #300]	; (403b94 <task_adc_to_dac+0x1b0>)
  403a66:	4798      	blx	r3

	led_init();
  403a68:	4b4b      	ldr	r3, [pc, #300]	; (403b98 <task_adc_to_dac+0x1b4>)
  403a6a:	4798      	blx	r3

	pio_clear(LEDREVERB_PIO, LEDREVERB_IDX_MASK);
  403a6c:	2101      	movs	r1, #1
  403a6e:	484b      	ldr	r0, [pc, #300]	; (403b9c <task_adc_to_dac+0x1b8>)
  403a70:	4b4b      	ldr	r3, [pc, #300]	; (403ba0 <task_adc_to_dac+0x1bc>)
  403a72:	4798      	blx	r3
	pio_clear(LEDECHO_PIO, LEDECHO_IDX_MASK);
  403a74:	2104      	movs	r1, #4
  403a76:	484b      	ldr	r0, [pc, #300]	; (403ba4 <task_adc_to_dac+0x1c0>)
  403a78:	4b49      	ldr	r3, [pc, #292]	; (403ba0 <task_adc_to_dac+0x1bc>)
  403a7a:	4798      	blx	r3
	
	saturation_value = 50;
  403a7c:	4b4a      	ldr	r3, [pc, #296]	; (403ba8 <task_adc_to_dac+0x1c4>)
  403a7e:	2232      	movs	r2, #50	; 0x32
  403a80:	601a      	str	r2, [r3, #0]
	gain_value = 70;
  403a82:	4b4a      	ldr	r3, [pc, #296]	; (403bac <task_adc_to_dac+0x1c8>)
  403a84:	2246      	movs	r2, #70	; 0x46
  403a86:	601a      	str	r2, [r3, #0]
	lowpass_value = 10000;
  403a88:	4b49      	ldr	r3, [pc, #292]	; (403bb0 <task_adc_to_dac+0x1cc>)
  403a8a:	f242 7210 	movw	r2, #10000	; 0x2710
  403a8e:	601a      	str	r2, [r3, #0]

	effects_t effects;
	effects.gain = 50;
  403a90:	2332      	movs	r3, #50	; 0x32
  403a92:	60bb      	str	r3, [r7, #8]
	effects.saturation = 0;
  403a94:	2300      	movs	r3, #0
  403a96:	60fb      	str	r3, [r7, #12]
	effects.lowpass = 10000;
  403a98:	f242 7310 	movw	r3, #10000	; 0x2710
  403a9c:	613b      	str	r3, [r7, #16]
	
	while(1) {
		if (xQueueReceive( xQueueEffects, &(effects),  10 / portTICK_RATE_MS)) {
  403a9e:	4b33      	ldr	r3, [pc, #204]	; (403b6c <task_adc_to_dac+0x188>)
  403aa0:	6818      	ldr	r0, [r3, #0]
  403aa2:	f107 0108 	add.w	r1, r7, #8
  403aa6:	2300      	movs	r3, #0
  403aa8:	220a      	movs	r2, #10
  403aaa:	4c42      	ldr	r4, [pc, #264]	; (403bb4 <task_adc_to_dac+0x1d0>)
  403aac:	47a0      	blx	r4
  403aae:	4603      	mov	r3, r0
  403ab0:	2b00      	cmp	r3, #0
  403ab2:	d00b      	beq.n	403acc <task_adc_to_dac+0xe8>
// 			printf("Gain_Value: %d\n", effects.gain);
			gain_value = effects.gain;
  403ab4:	68bb      	ldr	r3, [r7, #8]
  403ab6:	4a3d      	ldr	r2, [pc, #244]	; (403bac <task_adc_to_dac+0x1c8>)
  403ab8:	6013      	str	r3, [r2, #0]
			saturation_value = effects.saturation;
  403aba:	68fb      	ldr	r3, [r7, #12]
  403abc:	4a3a      	ldr	r2, [pc, #232]	; (403ba8 <task_adc_to_dac+0x1c4>)
  403abe:	6013      	str	r3, [r2, #0]
			lowpass_value = effects.lowpass;
  403ac0:	693b      	ldr	r3, [r7, #16]
  403ac2:	4a3b      	ldr	r2, [pc, #236]	; (403bb0 <task_adc_to_dac+0x1cc>)
  403ac4:	6013      	str	r3, [r2, #0]
			vTaskDelay( 100 / portTICK_RATE_MS);
  403ac6:	2064      	movs	r0, #100	; 0x64
  403ac8:	4b3b      	ldr	r3, [pc, #236]	; (403bb8 <task_adc_to_dac+0x1d4>)
  403aca:	4798      	blx	r3
		}
		if (xSemaphoreTake( xSemaphoreReverb,  10 / portTICK_RATE_MS)) {
  403acc:	4b29      	ldr	r3, [pc, #164]	; (403b74 <task_adc_to_dac+0x190>)
  403ace:	6818      	ldr	r0, [r3, #0]
  403ad0:	2300      	movs	r3, #0
  403ad2:	220a      	movs	r2, #10
  403ad4:	2100      	movs	r1, #0
  403ad6:	4c37      	ldr	r4, [pc, #220]	; (403bb4 <task_adc_to_dac+0x1d0>)
  403ad8:	47a0      	blx	r4
  403ada:	4603      	mov	r3, r0
  403adc:	2b00      	cmp	r3, #0
  403ade:	d01b      	beq.n	403b18 <task_adc_to_dac+0x134>
			printf("REVERB PRESSED\n");
  403ae0:	4836      	ldr	r0, [pc, #216]	; (403bbc <task_adc_to_dac+0x1d8>)
  403ae2:	4b37      	ldr	r3, [pc, #220]	; (403bc0 <task_adc_to_dac+0x1dc>)
  403ae4:	4798      	blx	r3
			reverb_on = !reverb_on;
  403ae6:	4b37      	ldr	r3, [pc, #220]	; (403bc4 <task_adc_to_dac+0x1e0>)
  403ae8:	781b      	ldrb	r3, [r3, #0]
  403aea:	b2db      	uxtb	r3, r3
  403aec:	2b00      	cmp	r3, #0
  403aee:	bf0c      	ite	eq
  403af0:	2301      	moveq	r3, #1
  403af2:	2300      	movne	r3, #0
  403af4:	b2db      	uxtb	r3, r3
  403af6:	461a      	mov	r2, r3
  403af8:	4b32      	ldr	r3, [pc, #200]	; (403bc4 <task_adc_to_dac+0x1e0>)
  403afa:	701a      	strb	r2, [r3, #0]
			if (reverb_on)
  403afc:	4b31      	ldr	r3, [pc, #196]	; (403bc4 <task_adc_to_dac+0x1e0>)
  403afe:	781b      	ldrb	r3, [r3, #0]
  403b00:	b2db      	uxtb	r3, r3
  403b02:	2b00      	cmp	r3, #0
  403b04:	d004      	beq.n	403b10 <task_adc_to_dac+0x12c>
				pio_clear(LEDREVERB_PIO, LEDREVERB_IDX_MASK);
  403b06:	2101      	movs	r1, #1
  403b08:	4824      	ldr	r0, [pc, #144]	; (403b9c <task_adc_to_dac+0x1b8>)
  403b0a:	4b25      	ldr	r3, [pc, #148]	; (403ba0 <task_adc_to_dac+0x1bc>)
  403b0c:	4798      	blx	r3
  403b0e:	e003      	b.n	403b18 <task_adc_to_dac+0x134>
			else
				pio_set(LEDREVERB_PIO, LEDREVERB_IDX_MASK);
  403b10:	2101      	movs	r1, #1
  403b12:	4822      	ldr	r0, [pc, #136]	; (403b9c <task_adc_to_dac+0x1b8>)
  403b14:	4b2c      	ldr	r3, [pc, #176]	; (403bc8 <task_adc_to_dac+0x1e4>)
  403b16:	4798      	blx	r3
		}
		if (xSemaphoreTake( xSemaphoreEcho,  10 / portTICK_RATE_MS)) {
  403b18:	4b17      	ldr	r3, [pc, #92]	; (403b78 <task_adc_to_dac+0x194>)
  403b1a:	6818      	ldr	r0, [r3, #0]
  403b1c:	2300      	movs	r3, #0
  403b1e:	220a      	movs	r2, #10
  403b20:	2100      	movs	r1, #0
  403b22:	4c24      	ldr	r4, [pc, #144]	; (403bb4 <task_adc_to_dac+0x1d0>)
  403b24:	47a0      	blx	r4
  403b26:	4603      	mov	r3, r0
  403b28:	2b00      	cmp	r3, #0
  403b2a:	d0b8      	beq.n	403a9e <task_adc_to_dac+0xba>
			printf("ECHO PRESSED\n");
  403b2c:	4827      	ldr	r0, [pc, #156]	; (403bcc <task_adc_to_dac+0x1e8>)
  403b2e:	4b24      	ldr	r3, [pc, #144]	; (403bc0 <task_adc_to_dac+0x1dc>)
  403b30:	4798      	blx	r3
			echo_on = !echo_on;
  403b32:	4b27      	ldr	r3, [pc, #156]	; (403bd0 <task_adc_to_dac+0x1ec>)
  403b34:	781b      	ldrb	r3, [r3, #0]
  403b36:	b2db      	uxtb	r3, r3
  403b38:	2b00      	cmp	r3, #0
  403b3a:	bf0c      	ite	eq
  403b3c:	2301      	moveq	r3, #1
  403b3e:	2300      	movne	r3, #0
  403b40:	b2db      	uxtb	r3, r3
  403b42:	461a      	mov	r2, r3
  403b44:	4b22      	ldr	r3, [pc, #136]	; (403bd0 <task_adc_to_dac+0x1ec>)
  403b46:	701a      	strb	r2, [r3, #0]
			if (echo_on)
  403b48:	4b21      	ldr	r3, [pc, #132]	; (403bd0 <task_adc_to_dac+0x1ec>)
  403b4a:	781b      	ldrb	r3, [r3, #0]
  403b4c:	b2db      	uxtb	r3, r3
  403b4e:	2b00      	cmp	r3, #0
  403b50:	d004      	beq.n	403b5c <task_adc_to_dac+0x178>
				pio_clear(LEDECHO_PIO, LEDECHO_IDX_MASK);
  403b52:	2104      	movs	r1, #4
  403b54:	4813      	ldr	r0, [pc, #76]	; (403ba4 <task_adc_to_dac+0x1c0>)
  403b56:	4b12      	ldr	r3, [pc, #72]	; (403ba0 <task_adc_to_dac+0x1bc>)
  403b58:	4798      	blx	r3
  403b5a:	e7a0      	b.n	403a9e <task_adc_to_dac+0xba>
			else
				pio_set(LEDECHO_PIO, LEDECHO_IDX_MASK);
  403b5c:	2104      	movs	r1, #4
  403b5e:	4811      	ldr	r0, [pc, #68]	; (403ba4 <task_adc_to_dac+0x1c0>)
  403b60:	4b19      	ldr	r3, [pc, #100]	; (403bc8 <task_adc_to_dac+0x1e4>)
  403b62:	4798      	blx	r3
		if (xQueueReceive( xQueueEffects, &(effects),  10 / portTICK_RATE_MS)) {
  403b64:	e79b      	b.n	403a9e <task_adc_to_dac+0xba>
  403b66:	bf00      	nop
  403b68:	004009f1 	.word	0x004009f1
  403b6c:	2042232c 	.word	0x2042232c
  403b70:	00400a89 	.word	0x00400a89
  403b74:	20422328 	.word	0x20422328
  403b78:	20422330 	.word	0x20422330
  403b7c:	2040cb54 	.word	0x2040cb54
  403b80:	000157c0 	.word	0x000157c0
  403b84:	000157c4 	.word	0x000157c4
  403b88:	00403615 	.word	0x00403615
  403b8c:	4000c000 	.word	0x4000c000
  403b90:	004037fd 	.word	0x004037fd
  403b94:	004037d1 	.word	0x004037d1
  403b98:	004039a5 	.word	0x004039a5
  403b9c:	400e0e00 	.word	0x400e0e00
  403ba0:	0040514d 	.word	0x0040514d
  403ba4:	400e1000 	.word	0x400e1000
  403ba8:	20400024 	.word	0x20400024
  403bac:	20400028 	.word	0x20400028
  403bb0:	2040002c 	.word	0x2040002c
  403bb4:	00400cf1 	.word	0x00400cf1
  403bb8:	004012f5 	.word	0x004012f5
  403bbc:	00409a34 	.word	0x00409a34
  403bc0:	004069a1 	.word	0x004069a1
  403bc4:	2040ca9c 	.word	0x2040ca9c
  403bc8:	00405131 	.word	0x00405131
  403bcc:	00409a44 	.word	0x00409a44
  403bd0:	2040ca9d 	.word	0x2040ca9d

00403bd4 <task_effects_controller>:
		}
	}
}

void task_effects_controller(void) {
  403bd4:	b590      	push	{r4, r7, lr}
  403bd6:	b087      	sub	sp, #28
  403bd8:	af00      	add	r7, sp, #0

	xQueueGain = xQueueCreate( 100, sizeof( uint32_t ) );
  403bda:	2200      	movs	r2, #0
  403bdc:	2104      	movs	r1, #4
  403bde:	2064      	movs	r0, #100	; 0x64
  403be0:	4b47      	ldr	r3, [pc, #284]	; (403d00 <task_effects_controller+0x12c>)
  403be2:	4798      	blx	r3
  403be4:	4602      	mov	r2, r0
  403be6:	4b47      	ldr	r3, [pc, #284]	; (403d04 <task_effects_controller+0x130>)
  403be8:	601a      	str	r2, [r3, #0]
	xQueueSaturation = xQueueCreate( 100, sizeof( uint32_t ) );
  403bea:	2200      	movs	r2, #0
  403bec:	2104      	movs	r1, #4
  403bee:	2064      	movs	r0, #100	; 0x64
  403bf0:	4b43      	ldr	r3, [pc, #268]	; (403d00 <task_effects_controller+0x12c>)
  403bf2:	4798      	blx	r3
  403bf4:	4602      	mov	r2, r0
  403bf6:	4b44      	ldr	r3, [pc, #272]	; (403d08 <task_effects_controller+0x134>)
  403bf8:	601a      	str	r2, [r3, #0]
	xQueueLowpass = xQueueCreate( 100, sizeof( uint32_t ) );
  403bfa:	2200      	movs	r2, #0
  403bfc:	2104      	movs	r1, #4
  403bfe:	2064      	movs	r0, #100	; 0x64
  403c00:	4b3f      	ldr	r3, [pc, #252]	; (403d00 <task_effects_controller+0x12c>)
  403c02:	4798      	blx	r3
  403c04:	4602      	mov	r2, r0
  403c06:	4b41      	ldr	r3, [pc, #260]	; (403d0c <task_effects_controller+0x138>)
  403c08:	601a      	str	r2, [r3, #0]

	config_AFEC_EFFECTS();
  403c0a:	4b41      	ldr	r3, [pc, #260]	; (403d10 <task_effects_controller+0x13c>)
  403c0c:	4798      	blx	r3

	button_init();
  403c0e:	4b41      	ldr	r3, [pc, #260]	; (403d14 <task_effects_controller+0x140>)
  403c10:	4798      	blx	r3
	
	int saturation = 0;
  403c12:	2300      	movs	r3, #0
  403c14:	617b      	str	r3, [r7, #20]
	int gain = 50;
  403c16:	2332      	movs	r3, #50	; 0x32
  403c18:	613b      	str	r3, [r7, #16]
	int lowpass = 10000;
  403c1a:	f242 7310 	movw	r3, #10000	; 0x2710
  403c1e:	60fb      	str	r3, [r7, #12]

	effects_t effects;
	effects.gain = gain;
  403c20:	693b      	ldr	r3, [r7, #16]
  403c22:	603b      	str	r3, [r7, #0]
	effects.saturation = saturation;
  403c24:	697b      	ldr	r3, [r7, #20]
  403c26:	607b      	str	r3, [r7, #4]
	effects.lowpass = lowpass;
  403c28:	68fb      	ldr	r3, [r7, #12]
  403c2a:	60bb      	str	r3, [r7, #8]

	afec_channel_enable(AFEC1, AFEC_CHANNEL_PIN_GAIN);
  403c2c:	2101      	movs	r1, #1
  403c2e:	483a      	ldr	r0, [pc, #232]	; (403d18 <task_effects_controller+0x144>)
  403c30:	4b3a      	ldr	r3, [pc, #232]	; (403d1c <task_effects_controller+0x148>)
  403c32:	4798      	blx	r3

	afec_start_software_conversion(AFEC1);
  403c34:	4838      	ldr	r0, [pc, #224]	; (403d18 <task_effects_controller+0x144>)
  403c36:	4b3a      	ldr	r3, [pc, #232]	; (403d20 <task_effects_controller+0x14c>)
  403c38:	4798      	blx	r3

// 	printf("Teste: %d\n", gain);
	
	while(1) {
		if (xQueueReceive( xQueueGain, &(gain),  10 / portTICK_RATE_MS)) {
  403c3a:	4b32      	ldr	r3, [pc, #200]	; (403d04 <task_effects_controller+0x130>)
  403c3c:	6818      	ldr	r0, [r3, #0]
  403c3e:	f107 0110 	add.w	r1, r7, #16
  403c42:	2300      	movs	r3, #0
  403c44:	220a      	movs	r2, #10
  403c46:	4c37      	ldr	r4, [pc, #220]	; (403d24 <task_effects_controller+0x150>)
  403c48:	47a0      	blx	r4
  403c4a:	4603      	mov	r3, r0
  403c4c:	2b00      	cmp	r3, #0
  403c4e:	d011      	beq.n	403c74 <task_effects_controller+0xa0>
			printf("Gain: %d\n", gain);
  403c50:	693b      	ldr	r3, [r7, #16]
  403c52:	4619      	mov	r1, r3
  403c54:	4834      	ldr	r0, [pc, #208]	; (403d28 <task_effects_controller+0x154>)
  403c56:	4b35      	ldr	r3, [pc, #212]	; (403d2c <task_effects_controller+0x158>)
  403c58:	4798      	blx	r3
			effects.gain = gain;
  403c5a:	693b      	ldr	r3, [r7, #16]
  403c5c:	603b      	str	r3, [r7, #0]
			
			afec_channel_disable(AFEC1, AFEC_CHANNEL_PIN_GAIN);
  403c5e:	2101      	movs	r1, #1
  403c60:	482d      	ldr	r0, [pc, #180]	; (403d18 <task_effects_controller+0x144>)
  403c62:	4b33      	ldr	r3, [pc, #204]	; (403d30 <task_effects_controller+0x15c>)
  403c64:	4798      	blx	r3
			afec_channel_enable(AFEC1, AFEC_CHANNEL_PIN_SATURATION);
  403c66:	2103      	movs	r1, #3
  403c68:	482b      	ldr	r0, [pc, #172]	; (403d18 <task_effects_controller+0x144>)
  403c6a:	4b2c      	ldr	r3, [pc, #176]	; (403d1c <task_effects_controller+0x148>)
  403c6c:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  403c6e:	482a      	ldr	r0, [pc, #168]	; (403d18 <task_effects_controller+0x144>)
  403c70:	4b2b      	ldr	r3, [pc, #172]	; (403d20 <task_effects_controller+0x14c>)
  403c72:	4798      	blx	r3
		}
		if (xQueueReceive( xQueueSaturation, &(saturation), 10 / portTICK_RATE_MS)) {
  403c74:	4b24      	ldr	r3, [pc, #144]	; (403d08 <task_effects_controller+0x134>)
  403c76:	6818      	ldr	r0, [r3, #0]
  403c78:	f107 0114 	add.w	r1, r7, #20
  403c7c:	2300      	movs	r3, #0
  403c7e:	220a      	movs	r2, #10
  403c80:	4c28      	ldr	r4, [pc, #160]	; (403d24 <task_effects_controller+0x150>)
  403c82:	47a0      	blx	r4
  403c84:	4603      	mov	r3, r0
  403c86:	2b00      	cmp	r3, #0
  403c88:	d011      	beq.n	403cae <task_effects_controller+0xda>
			printf("Saturation: %d\n", saturation);
  403c8a:	697b      	ldr	r3, [r7, #20]
  403c8c:	4619      	mov	r1, r3
  403c8e:	4829      	ldr	r0, [pc, #164]	; (403d34 <task_effects_controller+0x160>)
  403c90:	4b26      	ldr	r3, [pc, #152]	; (403d2c <task_effects_controller+0x158>)
  403c92:	4798      	blx	r3
			effects.saturation = saturation;
  403c94:	697b      	ldr	r3, [r7, #20]
  403c96:	607b      	str	r3, [r7, #4]
			
			afec_channel_disable(AFEC1, AFEC_CHANNEL_PIN_SATURATION);
  403c98:	2103      	movs	r1, #3
  403c9a:	481f      	ldr	r0, [pc, #124]	; (403d18 <task_effects_controller+0x144>)
  403c9c:	4b24      	ldr	r3, [pc, #144]	; (403d30 <task_effects_controller+0x15c>)
  403c9e:	4798      	blx	r3
			afec_channel_enable(AFEC1, AFEC_CHANNEL_PIN_LOWPASS);
  403ca0:	2105      	movs	r1, #5
  403ca2:	481d      	ldr	r0, [pc, #116]	; (403d18 <task_effects_controller+0x144>)
  403ca4:	4b1d      	ldr	r3, [pc, #116]	; (403d1c <task_effects_controller+0x148>)
  403ca6:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  403ca8:	481b      	ldr	r0, [pc, #108]	; (403d18 <task_effects_controller+0x144>)
  403caa:	4b1d      	ldr	r3, [pc, #116]	; (403d20 <task_effects_controller+0x14c>)
  403cac:	4798      	blx	r3
		}
		if (xQueueReceive( xQueueLowpass, &(lowpass), 10 / portTICK_RATE_MS)) {
  403cae:	4b17      	ldr	r3, [pc, #92]	; (403d0c <task_effects_controller+0x138>)
  403cb0:	6818      	ldr	r0, [r3, #0]
  403cb2:	f107 010c 	add.w	r1, r7, #12
  403cb6:	2300      	movs	r3, #0
  403cb8:	220a      	movs	r2, #10
  403cba:	4c1a      	ldr	r4, [pc, #104]	; (403d24 <task_effects_controller+0x150>)
  403cbc:	47a0      	blx	r4
  403cbe:	4603      	mov	r3, r0
  403cc0:	2b00      	cmp	r3, #0
  403cc2:	d011      	beq.n	403ce8 <task_effects_controller+0x114>
			printf("Lowpass: %d\n", lowpass);
  403cc4:	68fb      	ldr	r3, [r7, #12]
  403cc6:	4619      	mov	r1, r3
  403cc8:	481b      	ldr	r0, [pc, #108]	; (403d38 <task_effects_controller+0x164>)
  403cca:	4b18      	ldr	r3, [pc, #96]	; (403d2c <task_effects_controller+0x158>)
  403ccc:	4798      	blx	r3
			effects.lowpass = lowpass;
  403cce:	68fb      	ldr	r3, [r7, #12]
  403cd0:	60bb      	str	r3, [r7, #8]

			afec_channel_disable(AFEC1, AFEC_CHANNEL_PIN_LOWPASS);
  403cd2:	2105      	movs	r1, #5
  403cd4:	4810      	ldr	r0, [pc, #64]	; (403d18 <task_effects_controller+0x144>)
  403cd6:	4b16      	ldr	r3, [pc, #88]	; (403d30 <task_effects_controller+0x15c>)
  403cd8:	4798      	blx	r3
			afec_channel_enable(AFEC1, AFEC_CHANNEL_PIN_GAIN);
  403cda:	2101      	movs	r1, #1
  403cdc:	480e      	ldr	r0, [pc, #56]	; (403d18 <task_effects_controller+0x144>)
  403cde:	4b0f      	ldr	r3, [pc, #60]	; (403d1c <task_effects_controller+0x148>)
  403ce0:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  403ce2:	480d      	ldr	r0, [pc, #52]	; (403d18 <task_effects_controller+0x144>)
  403ce4:	4b0e      	ldr	r3, [pc, #56]	; (403d20 <task_effects_controller+0x14c>)
  403ce6:	4798      	blx	r3
		}
		xQueueSend( xQueueEffects, &effects, NULL);
  403ce8:	4b14      	ldr	r3, [pc, #80]	; (403d3c <task_effects_controller+0x168>)
  403cea:	6818      	ldr	r0, [r3, #0]
  403cec:	4639      	mov	r1, r7
  403cee:	2300      	movs	r3, #0
  403cf0:	2200      	movs	r2, #0
  403cf2:	4c13      	ldr	r4, [pc, #76]	; (403d40 <task_effects_controller+0x16c>)
  403cf4:	47a0      	blx	r4
		vTaskDelay(500 / portTICK_RATE_MS);
  403cf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  403cfa:	4b12      	ldr	r3, [pc, #72]	; (403d44 <task_effects_controller+0x170>)
  403cfc:	4798      	blx	r3
		if (xQueueReceive( xQueueGain, &(gain),  10 / portTICK_RATE_MS)) {
  403cfe:	e79c      	b.n	403c3a <task_effects_controller+0x66>
  403d00:	004009f1 	.word	0x004009f1
  403d04:	2040cb50 	.word	0x2040cb50
  403d08:	20422324 	.word	0x20422324
  403d0c:	2042231c 	.word	0x2042231c
  403d10:	004036d5 	.word	0x004036d5
  403d14:	004038a5 	.word	0x004038a5
  403d18:	40064000 	.word	0x40064000
  403d1c:	00402659 	.word	0x00402659
  403d20:	0040263d 	.word	0x0040263d
  403d24:	00400cf1 	.word	0x00400cf1
  403d28:	00409a54 	.word	0x00409a54
  403d2c:	004069a1 	.word	0x004069a1
  403d30:	004026a5 	.word	0x004026a5
  403d34:	00409a60 	.word	0x00409a60
  403d38:	00409a70 	.word	0x00409a70
  403d3c:	2042232c 	.word	0x2042232c
  403d40:	00400acd 	.word	0x00400acd
  403d44:	004012f5 	.word	0x004012f5

00403d48 <main>:

/************************************************************************/
/* Main                                                                 */
/************************************************************************/
int main(void)
{
  403d48:	b590      	push	{r4, r7, lr}
  403d4a:	b085      	sub	sp, #20
  403d4c:	af04      	add	r7, sp, #16

	/* Initialize the SAM system. */
	sysclk_init();
  403d4e:	4b1c      	ldr	r3, [pc, #112]	; (403dc0 <main+0x78>)
  403d50:	4798      	blx	r3
	ioport_init();
  403d52:	4b1c      	ldr	r3, [pc, #112]	; (403dc4 <main+0x7c>)
  403d54:	4798      	blx	r3
	board_init();
  403d56:	4b1c      	ldr	r3, [pc, #112]	; (403dc8 <main+0x80>)
  403d58:	4798      	blx	r3
  
	/* inicializa delay */
	delay_init(sysclk_get_cpu_hz());

	/* inicializa console (printf) */
	configure_console();
  403d5a:	4b1c      	ldr	r3, [pc, #112]	; (403dcc <main+0x84>)
  403d5c:	4798      	blx	r3
  
	/* Output example information. */
	puts(STRING_HEADER);
  403d5e:	481c      	ldr	r0, [pc, #112]	; (403dd0 <main+0x88>)
  403d60:	4b1c      	ldr	r3, [pc, #112]	; (403dd4 <main+0x8c>)
  403d62:	4798      	blx	r3
	
	/*BUT_init();*/
	
	if (xTaskCreate(task_adc_to_dac, "AudioTask", TASK_TRIGGER_STACK_SIZE, NULL,
  403d64:	2300      	movs	r3, #0
  403d66:	9303      	str	r3, [sp, #12]
  403d68:	2300      	movs	r3, #0
  403d6a:	9302      	str	r3, [sp, #8]
  403d6c:	2300      	movs	r3, #0
  403d6e:	9301      	str	r3, [sp, #4]
  403d70:	2300      	movs	r3, #0
  403d72:	9300      	str	r3, [sp, #0]
  403d74:	2300      	movs	r3, #0
  403d76:	f44f 7280 	mov.w	r2, #256	; 0x100
  403d7a:	4917      	ldr	r1, [pc, #92]	; (403dd8 <main+0x90>)
  403d7c:	4817      	ldr	r0, [pc, #92]	; (403ddc <main+0x94>)
  403d7e:	4c18      	ldr	r4, [pc, #96]	; (403de0 <main+0x98>)
  403d80:	47a0      	blx	r4
  403d82:	4603      	mov	r3, r0
  403d84:	2b01      	cmp	r3, #1
  403d86:	d002      	beq.n	403d8e <main+0x46>
	TASK_TRIGGER_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create AudioTask task\r\n");
  403d88:	4816      	ldr	r0, [pc, #88]	; (403de4 <main+0x9c>)
  403d8a:	4b17      	ldr	r3, [pc, #92]	; (403de8 <main+0xa0>)
  403d8c:	4798      	blx	r3
	}

	if (xTaskCreate(task_effects_controller, "EffectsController", TASK_TRIGGER_STACK_SIZE, NULL,
  403d8e:	2300      	movs	r3, #0
  403d90:	9303      	str	r3, [sp, #12]
  403d92:	2300      	movs	r3, #0
  403d94:	9302      	str	r3, [sp, #8]
  403d96:	2300      	movs	r3, #0
  403d98:	9301      	str	r3, [sp, #4]
  403d9a:	2300      	movs	r3, #0
  403d9c:	9300      	str	r3, [sp, #0]
  403d9e:	2300      	movs	r3, #0
  403da0:	f44f 7280 	mov.w	r2, #256	; 0x100
  403da4:	4911      	ldr	r1, [pc, #68]	; (403dec <main+0xa4>)
  403da6:	4812      	ldr	r0, [pc, #72]	; (403df0 <main+0xa8>)
  403da8:	4c0d      	ldr	r4, [pc, #52]	; (403de0 <main+0x98>)
  403daa:	47a0      	blx	r4
  403dac:	4603      	mov	r3, r0
  403dae:	2b01      	cmp	r3, #1
  403db0:	d002      	beq.n	403db8 <main+0x70>
	TASK_TRIGGER_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create EffectsController task\r\n");
  403db2:	4810      	ldr	r0, [pc, #64]	; (403df4 <main+0xac>)
  403db4:	4b0c      	ldr	r3, [pc, #48]	; (403de8 <main+0xa0>)
  403db6:	4798      	blx	r3
	}
	
	vTaskStartScheduler();
  403db8:	4b0f      	ldr	r3, [pc, #60]	; (403df8 <main+0xb0>)
  403dba:	4798      	blx	r3

	while (1) {
  403dbc:	e7fe      	b.n	403dbc <main+0x74>
  403dbe:	bf00      	nop
  403dc0:	00404271 	.word	0x00404271
  403dc4:	0040282d 	.word	0x0040282d
  403dc8:	00404841 	.word	0x00404841
  403dcc:	004035dd 	.word	0x004035dd
  403dd0:	00409a80 	.word	0x00409a80
  403dd4:	00406c35 	.word	0x00406c35
  403dd8:	00409ae0 	.word	0x00409ae0
  403ddc:	004039e5 	.word	0x004039e5
  403de0:	0040114d 	.word	0x0040114d
  403de4:	00409aec 	.word	0x00409aec
  403de8:	004069a1 	.word	0x004069a1
  403dec:	00409b10 	.word	0x00409b10
  403df0:	00403bd5 	.word	0x00403bd5
  403df4:	00409b24 	.word	0x00409b24
  403df8:	0040135d 	.word	0x0040135d

00403dfc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  403dfc:	b480      	push	{r7}
  403dfe:	b087      	sub	sp, #28
  403e00:	af00      	add	r7, sp, #0
  403e02:	60f8      	str	r0, [r7, #12]
  403e04:	60b9      	str	r1, [r7, #8]
  403e06:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  403e08:	68fa      	ldr	r2, [r7, #12]
  403e0a:	68bb      	ldr	r3, [r7, #8]
  403e0c:	019b      	lsls	r3, r3, #6
  403e0e:	4413      	add	r3, r2
  403e10:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  403e12:	697b      	ldr	r3, [r7, #20]
  403e14:	2202      	movs	r2, #2
  403e16:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  403e18:	697b      	ldr	r3, [r7, #20]
  403e1a:	f04f 32ff 	mov.w	r2, #4294967295
  403e1e:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  403e20:	697b      	ldr	r3, [r7, #20]
  403e22:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  403e24:	697b      	ldr	r3, [r7, #20]
  403e26:	687a      	ldr	r2, [r7, #4]
  403e28:	605a      	str	r2, [r3, #4]
}
  403e2a:	bf00      	nop
  403e2c:	371c      	adds	r7, #28
  403e2e:	46bd      	mov	sp, r7
  403e30:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e34:	4770      	bx	lr

00403e36 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  403e36:	b480      	push	{r7}
  403e38:	b083      	sub	sp, #12
  403e3a:	af00      	add	r7, sp, #0
  403e3c:	6078      	str	r0, [r7, #4]
  403e3e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  403e40:	687a      	ldr	r2, [r7, #4]
  403e42:	683b      	ldr	r3, [r7, #0]
  403e44:	019b      	lsls	r3, r3, #6
  403e46:	4413      	add	r3, r2
  403e48:	2205      	movs	r2, #5
  403e4a:	601a      	str	r2, [r3, #0]
}
  403e4c:	bf00      	nop
  403e4e:	370c      	adds	r7, #12
  403e50:	46bd      	mov	sp, r7
  403e52:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e56:	4770      	bx	lr

00403e58 <tc_write_ra>:
 */
void tc_write_ra(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  403e58:	b480      	push	{r7}
  403e5a:	b085      	sub	sp, #20
  403e5c:	af00      	add	r7, sp, #0
  403e5e:	60f8      	str	r0, [r7, #12]
  403e60:	60b9      	str	r1, [r7, #8]
  403e62:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  403e64:	68fa      	ldr	r2, [r7, #12]
  403e66:	68bb      	ldr	r3, [r7, #8]
  403e68:	019b      	lsls	r3, r3, #6
  403e6a:	4413      	add	r3, r2
  403e6c:	3314      	adds	r3, #20
  403e6e:	687a      	ldr	r2, [r7, #4]
  403e70:	601a      	str	r2, [r3, #0]
}
  403e72:	bf00      	nop
  403e74:	3714      	adds	r7, #20
  403e76:	46bd      	mov	sp, r7
  403e78:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e7c:	4770      	bx	lr

00403e7e <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  403e7e:	b480      	push	{r7}
  403e80:	b085      	sub	sp, #20
  403e82:	af00      	add	r7, sp, #0
  403e84:	60f8      	str	r0, [r7, #12]
  403e86:	60b9      	str	r1, [r7, #8]
  403e88:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  403e8a:	68fa      	ldr	r2, [r7, #12]
  403e8c:	68bb      	ldr	r3, [r7, #8]
  403e8e:	019b      	lsls	r3, r3, #6
  403e90:	4413      	add	r3, r2
  403e92:	331c      	adds	r3, #28
  403e94:	687a      	ldr	r2, [r7, #4]
  403e96:	601a      	str	r2, [r3, #0]
}
  403e98:	bf00      	nop
  403e9a:	3714      	adds	r7, #20
  403e9c:	46bd      	mov	sp, r7
  403e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ea2:	4770      	bx	lr

00403ea4 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  403ea4:	b480      	push	{r7}
  403ea6:	b085      	sub	sp, #20
  403ea8:	af00      	add	r7, sp, #0
  403eaa:	6078      	str	r0, [r7, #4]
  403eac:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  403eae:	687a      	ldr	r2, [r7, #4]
  403eb0:	683b      	ldr	r3, [r7, #0]
  403eb2:	019b      	lsls	r3, r3, #6
  403eb4:	4413      	add	r3, r2
  403eb6:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  403eb8:	68fb      	ldr	r3, [r7, #12]
  403eba:	6a1b      	ldr	r3, [r3, #32]
}
  403ebc:	4618      	mov	r0, r3
  403ebe:	3714      	adds	r7, #20
  403ec0:	46bd      	mov	sp, r7
  403ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ec6:	4770      	bx	lr

00403ec8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  403ec8:	b480      	push	{r7}
  403eca:	b08d      	sub	sp, #52	; 0x34
  403ecc:	af00      	add	r7, sp, #0
  403ece:	60f8      	str	r0, [r7, #12]
  403ed0:	60b9      	str	r1, [r7, #8]
  403ed2:	607a      	str	r2, [r7, #4]
  403ed4:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  403ed6:	2302      	movs	r3, #2
  403ed8:	613b      	str	r3, [r7, #16]
  403eda:	2308      	movs	r3, #8
  403edc:	617b      	str	r3, [r7, #20]
  403ede:	2320      	movs	r3, #32
  403ee0:	61bb      	str	r3, [r7, #24]
  403ee2:	2380      	movs	r3, #128	; 0x80
  403ee4:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  403ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403ee8:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  403eea:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  403eec:	2300      	movs	r3, #0
  403eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  403ef0:	e01a      	b.n	403f28 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  403ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403ef4:	009b      	lsls	r3, r3, #2
  403ef6:	f107 0230 	add.w	r2, r7, #48	; 0x30
  403efa:	4413      	add	r3, r2
  403efc:	f853 3c20 	ldr.w	r3, [r3, #-32]
  403f00:	68ba      	ldr	r2, [r7, #8]
  403f02:	fbb2 f3f3 	udiv	r3, r2, r3
  403f06:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  403f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403f0a:	0c1b      	lsrs	r3, r3, #16
  403f0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  403f0e:	68fa      	ldr	r2, [r7, #12]
  403f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403f12:	429a      	cmp	r2, r3
  403f14:	d901      	bls.n	403f1a <tc_find_mck_divisor+0x52>
			return 0;
  403f16:	2300      	movs	r3, #0
  403f18:	e023      	b.n	403f62 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  403f1a:	68fa      	ldr	r2, [r7, #12]
  403f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403f1e:	429a      	cmp	r2, r3
  403f20:	d206      	bcs.n	403f30 <tc_find_mck_divisor+0x68>
			ul_index++) {
  403f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403f24:	3301      	adds	r3, #1
  403f26:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  403f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403f2a:	2b04      	cmp	r3, #4
  403f2c:	d9e1      	bls.n	403ef2 <tc_find_mck_divisor+0x2a>
  403f2e:	e000      	b.n	403f32 <tc_find_mck_divisor+0x6a>
			break;
  403f30:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  403f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403f34:	2b04      	cmp	r3, #4
  403f36:	d901      	bls.n	403f3c <tc_find_mck_divisor+0x74>
		return 0;
  403f38:	2300      	movs	r3, #0
  403f3a:	e012      	b.n	403f62 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  403f3c:	687b      	ldr	r3, [r7, #4]
  403f3e:	2b00      	cmp	r3, #0
  403f40:	d008      	beq.n	403f54 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  403f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403f44:	009b      	lsls	r3, r3, #2
  403f46:	f107 0230 	add.w	r2, r7, #48	; 0x30
  403f4a:	4413      	add	r3, r2
  403f4c:	f853 2c20 	ldr.w	r2, [r3, #-32]
  403f50:	687b      	ldr	r3, [r7, #4]
  403f52:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  403f54:	683b      	ldr	r3, [r7, #0]
  403f56:	2b00      	cmp	r3, #0
  403f58:	d002      	beq.n	403f60 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  403f5a:	683b      	ldr	r3, [r7, #0]
  403f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  403f5e:	601a      	str	r2, [r3, #0]
	}

	return 1;
  403f60:	2301      	movs	r3, #1
}
  403f62:	4618      	mov	r0, r3
  403f64:	3734      	adds	r7, #52	; 0x34
  403f66:	46bd      	mov	sp, r7
  403f68:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f6c:	4770      	bx	lr
	...

00403f70 <osc_enable>:
{
  403f70:	b580      	push	{r7, lr}
  403f72:	b082      	sub	sp, #8
  403f74:	af00      	add	r7, sp, #0
  403f76:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403f78:	687b      	ldr	r3, [r7, #4]
  403f7a:	2b07      	cmp	r3, #7
  403f7c:	d831      	bhi.n	403fe2 <osc_enable+0x72>
  403f7e:	a201      	add	r2, pc, #4	; (adr r2, 403f84 <osc_enable+0x14>)
  403f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403f84:	00403fe1 	.word	0x00403fe1
  403f88:	00403fa5 	.word	0x00403fa5
  403f8c:	00403fad 	.word	0x00403fad
  403f90:	00403fb5 	.word	0x00403fb5
  403f94:	00403fbd 	.word	0x00403fbd
  403f98:	00403fc5 	.word	0x00403fc5
  403f9c:	00403fcd 	.word	0x00403fcd
  403fa0:	00403fd7 	.word	0x00403fd7
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  403fa4:	2000      	movs	r0, #0
  403fa6:	4b11      	ldr	r3, [pc, #68]	; (403fec <osc_enable+0x7c>)
  403fa8:	4798      	blx	r3
		break;
  403faa:	e01a      	b.n	403fe2 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  403fac:	2001      	movs	r0, #1
  403fae:	4b0f      	ldr	r3, [pc, #60]	; (403fec <osc_enable+0x7c>)
  403fb0:	4798      	blx	r3
		break;
  403fb2:	e016      	b.n	403fe2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  403fb4:	2000      	movs	r0, #0
  403fb6:	4b0e      	ldr	r3, [pc, #56]	; (403ff0 <osc_enable+0x80>)
  403fb8:	4798      	blx	r3
		break;
  403fba:	e012      	b.n	403fe2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  403fbc:	2010      	movs	r0, #16
  403fbe:	4b0c      	ldr	r3, [pc, #48]	; (403ff0 <osc_enable+0x80>)
  403fc0:	4798      	blx	r3
		break;
  403fc2:	e00e      	b.n	403fe2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  403fc4:	2020      	movs	r0, #32
  403fc6:	4b0a      	ldr	r3, [pc, #40]	; (403ff0 <osc_enable+0x80>)
  403fc8:	4798      	blx	r3
		break;
  403fca:	e00a      	b.n	403fe2 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  403fcc:	213e      	movs	r1, #62	; 0x3e
  403fce:	2000      	movs	r0, #0
  403fd0:	4b08      	ldr	r3, [pc, #32]	; (403ff4 <osc_enable+0x84>)
  403fd2:	4798      	blx	r3
		break;
  403fd4:	e005      	b.n	403fe2 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  403fd6:	213e      	movs	r1, #62	; 0x3e
  403fd8:	2001      	movs	r0, #1
  403fda:	4b06      	ldr	r3, [pc, #24]	; (403ff4 <osc_enable+0x84>)
  403fdc:	4798      	blx	r3
		break;
  403fde:	e000      	b.n	403fe2 <osc_enable+0x72>
		break;
  403fe0:	bf00      	nop
}
  403fe2:	bf00      	nop
  403fe4:	3708      	adds	r7, #8
  403fe6:	46bd      	mov	sp, r7
  403fe8:	bd80      	pop	{r7, pc}
  403fea:	bf00      	nop
  403fec:	004057c9 	.word	0x004057c9
  403ff0:	00405835 	.word	0x00405835
  403ff4:	004058a5 	.word	0x004058a5

00403ff8 <osc_is_ready>:
{
  403ff8:	b580      	push	{r7, lr}
  403ffa:	b082      	sub	sp, #8
  403ffc:	af00      	add	r7, sp, #0
  403ffe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404000:	687b      	ldr	r3, [r7, #4]
  404002:	2b07      	cmp	r3, #7
  404004:	d826      	bhi.n	404054 <osc_is_ready+0x5c>
  404006:	a201      	add	r2, pc, #4	; (adr r2, 40400c <osc_is_ready+0x14>)
  404008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40400c:	0040402d 	.word	0x0040402d
  404010:	00404031 	.word	0x00404031
  404014:	00404031 	.word	0x00404031
  404018:	00404043 	.word	0x00404043
  40401c:	00404043 	.word	0x00404043
  404020:	00404043 	.word	0x00404043
  404024:	00404043 	.word	0x00404043
  404028:	00404043 	.word	0x00404043
		return 1;
  40402c:	2301      	movs	r3, #1
  40402e:	e012      	b.n	404056 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  404030:	4b0b      	ldr	r3, [pc, #44]	; (404060 <osc_is_ready+0x68>)
  404032:	4798      	blx	r3
  404034:	4603      	mov	r3, r0
  404036:	2b00      	cmp	r3, #0
  404038:	bf14      	ite	ne
  40403a:	2301      	movne	r3, #1
  40403c:	2300      	moveq	r3, #0
  40403e:	b2db      	uxtb	r3, r3
  404040:	e009      	b.n	404056 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  404042:	4b08      	ldr	r3, [pc, #32]	; (404064 <osc_is_ready+0x6c>)
  404044:	4798      	blx	r3
  404046:	4603      	mov	r3, r0
  404048:	2b00      	cmp	r3, #0
  40404a:	bf14      	ite	ne
  40404c:	2301      	movne	r3, #1
  40404e:	2300      	moveq	r3, #0
  404050:	b2db      	uxtb	r3, r3
  404052:	e000      	b.n	404056 <osc_is_ready+0x5e>
	return 0;
  404054:	2300      	movs	r3, #0
}
  404056:	4618      	mov	r0, r3
  404058:	3708      	adds	r7, #8
  40405a:	46bd      	mov	sp, r7
  40405c:	bd80      	pop	{r7, pc}
  40405e:	bf00      	nop
  404060:	00405801 	.word	0x00405801
  404064:	0040591d 	.word	0x0040591d

00404068 <osc_get_rate>:
{
  404068:	b480      	push	{r7}
  40406a:	b083      	sub	sp, #12
  40406c:	af00      	add	r7, sp, #0
  40406e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404070:	687b      	ldr	r3, [r7, #4]
  404072:	2b07      	cmp	r3, #7
  404074:	d825      	bhi.n	4040c2 <osc_get_rate+0x5a>
  404076:	a201      	add	r2, pc, #4	; (adr r2, 40407c <osc_get_rate+0x14>)
  404078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40407c:	0040409d 	.word	0x0040409d
  404080:	004040a3 	.word	0x004040a3
  404084:	004040a9 	.word	0x004040a9
  404088:	004040af 	.word	0x004040af
  40408c:	004040b3 	.word	0x004040b3
  404090:	004040b7 	.word	0x004040b7
  404094:	004040bb 	.word	0x004040bb
  404098:	004040bf 	.word	0x004040bf
		return OSC_SLCK_32K_RC_HZ;
  40409c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4040a0:	e010      	b.n	4040c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4040a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4040a6:	e00d      	b.n	4040c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4040a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4040ac:	e00a      	b.n	4040c4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4040ae:	4b08      	ldr	r3, [pc, #32]	; (4040d0 <osc_get_rate+0x68>)
  4040b0:	e008      	b.n	4040c4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4040b2:	4b08      	ldr	r3, [pc, #32]	; (4040d4 <osc_get_rate+0x6c>)
  4040b4:	e006      	b.n	4040c4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4040b6:	4b08      	ldr	r3, [pc, #32]	; (4040d8 <osc_get_rate+0x70>)
  4040b8:	e004      	b.n	4040c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4040ba:	4b07      	ldr	r3, [pc, #28]	; (4040d8 <osc_get_rate+0x70>)
  4040bc:	e002      	b.n	4040c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4040be:	4b06      	ldr	r3, [pc, #24]	; (4040d8 <osc_get_rate+0x70>)
  4040c0:	e000      	b.n	4040c4 <osc_get_rate+0x5c>
	return 0;
  4040c2:	2300      	movs	r3, #0
}
  4040c4:	4618      	mov	r0, r3
  4040c6:	370c      	adds	r7, #12
  4040c8:	46bd      	mov	sp, r7
  4040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4040ce:	4770      	bx	lr
  4040d0:	003d0900 	.word	0x003d0900
  4040d4:	007a1200 	.word	0x007a1200
  4040d8:	00b71b00 	.word	0x00b71b00

004040dc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4040dc:	b580      	push	{r7, lr}
  4040de:	b082      	sub	sp, #8
  4040e0:	af00      	add	r7, sp, #0
  4040e2:	4603      	mov	r3, r0
  4040e4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4040e6:	bf00      	nop
  4040e8:	79fb      	ldrb	r3, [r7, #7]
  4040ea:	4618      	mov	r0, r3
  4040ec:	4b05      	ldr	r3, [pc, #20]	; (404104 <osc_wait_ready+0x28>)
  4040ee:	4798      	blx	r3
  4040f0:	4603      	mov	r3, r0
  4040f2:	f083 0301 	eor.w	r3, r3, #1
  4040f6:	b2db      	uxtb	r3, r3
  4040f8:	2b00      	cmp	r3, #0
  4040fa:	d1f5      	bne.n	4040e8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4040fc:	bf00      	nop
  4040fe:	3708      	adds	r7, #8
  404100:	46bd      	mov	sp, r7
  404102:	bd80      	pop	{r7, pc}
  404104:	00403ff9 	.word	0x00403ff9

00404108 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  404108:	b580      	push	{r7, lr}
  40410a:	b086      	sub	sp, #24
  40410c:	af00      	add	r7, sp, #0
  40410e:	60f8      	str	r0, [r7, #12]
  404110:	607a      	str	r2, [r7, #4]
  404112:	603b      	str	r3, [r7, #0]
  404114:	460b      	mov	r3, r1
  404116:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  404118:	687b      	ldr	r3, [r7, #4]
  40411a:	2b00      	cmp	r3, #0
  40411c:	d107      	bne.n	40412e <pll_config_init+0x26>
  40411e:	683b      	ldr	r3, [r7, #0]
  404120:	2b00      	cmp	r3, #0
  404122:	d104      	bne.n	40412e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  404124:	68fb      	ldr	r3, [r7, #12]
  404126:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  40412a:	601a      	str	r2, [r3, #0]
  40412c:	e019      	b.n	404162 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40412e:	7afb      	ldrb	r3, [r7, #11]
  404130:	4618      	mov	r0, r3
  404132:	4b0e      	ldr	r3, [pc, #56]	; (40416c <pll_config_init+0x64>)
  404134:	4798      	blx	r3
  404136:	4602      	mov	r2, r0
  404138:	687b      	ldr	r3, [r7, #4]
  40413a:	fbb2 f3f3 	udiv	r3, r2, r3
  40413e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  404140:	697b      	ldr	r3, [r7, #20]
  404142:	683a      	ldr	r2, [r7, #0]
  404144:	fb02 f303 	mul.w	r3, r2, r3
  404148:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40414a:	683b      	ldr	r3, [r7, #0]
  40414c:	3b01      	subs	r3, #1
  40414e:	041a      	lsls	r2, r3, #16
  404150:	4b07      	ldr	r3, [pc, #28]	; (404170 <pll_config_init+0x68>)
  404152:	4013      	ands	r3, r2
  404154:	687a      	ldr	r2, [r7, #4]
  404156:	b2d2      	uxtb	r2, r2
  404158:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40415a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40415e:	68fb      	ldr	r3, [r7, #12]
  404160:	601a      	str	r2, [r3, #0]
	}
}
  404162:	bf00      	nop
  404164:	3718      	adds	r7, #24
  404166:	46bd      	mov	sp, r7
  404168:	bd80      	pop	{r7, pc}
  40416a:	bf00      	nop
  40416c:	00404069 	.word	0x00404069
  404170:	07ff0000 	.word	0x07ff0000

00404174 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  404174:	b580      	push	{r7, lr}
  404176:	b082      	sub	sp, #8
  404178:	af00      	add	r7, sp, #0
  40417a:	6078      	str	r0, [r7, #4]
  40417c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40417e:	683b      	ldr	r3, [r7, #0]
  404180:	2b00      	cmp	r3, #0
  404182:	d108      	bne.n	404196 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  404184:	4b09      	ldr	r3, [pc, #36]	; (4041ac <pll_enable+0x38>)
  404186:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  404188:	4a09      	ldr	r2, [pc, #36]	; (4041b0 <pll_enable+0x3c>)
  40418a:	687b      	ldr	r3, [r7, #4]
  40418c:	681b      	ldr	r3, [r3, #0]
  40418e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  404192:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  404194:	e005      	b.n	4041a2 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  404196:	4a06      	ldr	r2, [pc, #24]	; (4041b0 <pll_enable+0x3c>)
  404198:	687b      	ldr	r3, [r7, #4]
  40419a:	681b      	ldr	r3, [r3, #0]
  40419c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4041a0:	61d3      	str	r3, [r2, #28]
}
  4041a2:	bf00      	nop
  4041a4:	3708      	adds	r7, #8
  4041a6:	46bd      	mov	sp, r7
  4041a8:	bd80      	pop	{r7, pc}
  4041aa:	bf00      	nop
  4041ac:	00405939 	.word	0x00405939
  4041b0:	400e0600 	.word	0x400e0600

004041b4 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4041b4:	b580      	push	{r7, lr}
  4041b6:	b082      	sub	sp, #8
  4041b8:	af00      	add	r7, sp, #0
  4041ba:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4041bc:	687b      	ldr	r3, [r7, #4]
  4041be:	2b00      	cmp	r3, #0
  4041c0:	d103      	bne.n	4041ca <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4041c2:	4b05      	ldr	r3, [pc, #20]	; (4041d8 <pll_is_locked+0x24>)
  4041c4:	4798      	blx	r3
  4041c6:	4603      	mov	r3, r0
  4041c8:	e002      	b.n	4041d0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4041ca:	4b04      	ldr	r3, [pc, #16]	; (4041dc <pll_is_locked+0x28>)
  4041cc:	4798      	blx	r3
  4041ce:	4603      	mov	r3, r0
	}
}
  4041d0:	4618      	mov	r0, r3
  4041d2:	3708      	adds	r7, #8
  4041d4:	46bd      	mov	sp, r7
  4041d6:	bd80      	pop	{r7, pc}
  4041d8:	00405955 	.word	0x00405955
  4041dc:	00405971 	.word	0x00405971

004041e0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4041e0:	b580      	push	{r7, lr}
  4041e2:	b082      	sub	sp, #8
  4041e4:	af00      	add	r7, sp, #0
  4041e6:	4603      	mov	r3, r0
  4041e8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4041ea:	79fb      	ldrb	r3, [r7, #7]
  4041ec:	3b03      	subs	r3, #3
  4041ee:	2b04      	cmp	r3, #4
  4041f0:	d808      	bhi.n	404204 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4041f2:	79fb      	ldrb	r3, [r7, #7]
  4041f4:	4618      	mov	r0, r3
  4041f6:	4b06      	ldr	r3, [pc, #24]	; (404210 <pll_enable_source+0x30>)
  4041f8:	4798      	blx	r3
		osc_wait_ready(e_src);
  4041fa:	79fb      	ldrb	r3, [r7, #7]
  4041fc:	4618      	mov	r0, r3
  4041fe:	4b05      	ldr	r3, [pc, #20]	; (404214 <pll_enable_source+0x34>)
  404200:	4798      	blx	r3
		break;
  404202:	e000      	b.n	404206 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  404204:	bf00      	nop
	}
}
  404206:	bf00      	nop
  404208:	3708      	adds	r7, #8
  40420a:	46bd      	mov	sp, r7
  40420c:	bd80      	pop	{r7, pc}
  40420e:	bf00      	nop
  404210:	00403f71 	.word	0x00403f71
  404214:	004040dd 	.word	0x004040dd

00404218 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  404218:	b580      	push	{r7, lr}
  40421a:	b082      	sub	sp, #8
  40421c:	af00      	add	r7, sp, #0
  40421e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  404220:	bf00      	nop
  404222:	6878      	ldr	r0, [r7, #4]
  404224:	4b04      	ldr	r3, [pc, #16]	; (404238 <pll_wait_for_lock+0x20>)
  404226:	4798      	blx	r3
  404228:	4603      	mov	r3, r0
  40422a:	2b00      	cmp	r3, #0
  40422c:	d0f9      	beq.n	404222 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40422e:	2300      	movs	r3, #0
}
  404230:	4618      	mov	r0, r3
  404232:	3708      	adds	r7, #8
  404234:	46bd      	mov	sp, r7
  404236:	bd80      	pop	{r7, pc}
  404238:	004041b5 	.word	0x004041b5

0040423c <sysclk_get_main_hz>:
{
  40423c:	b580      	push	{r7, lr}
  40423e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  404240:	2006      	movs	r0, #6
  404242:	4b05      	ldr	r3, [pc, #20]	; (404258 <sysclk_get_main_hz+0x1c>)
  404244:	4798      	blx	r3
  404246:	4602      	mov	r2, r0
  404248:	4613      	mov	r3, r2
  40424a:	009b      	lsls	r3, r3, #2
  40424c:	4413      	add	r3, r2
  40424e:	009a      	lsls	r2, r3, #2
  404250:	4413      	add	r3, r2
}
  404252:	4618      	mov	r0, r3
  404254:	bd80      	pop	{r7, pc}
  404256:	bf00      	nop
  404258:	00404069 	.word	0x00404069

0040425c <sysclk_get_cpu_hz>:
{
  40425c:	b580      	push	{r7, lr}
  40425e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  404260:	4b02      	ldr	r3, [pc, #8]	; (40426c <sysclk_get_cpu_hz+0x10>)
  404262:	4798      	blx	r3
  404264:	4603      	mov	r3, r0
}
  404266:	4618      	mov	r0, r3
  404268:	bd80      	pop	{r7, pc}
  40426a:	bf00      	nop
  40426c:	0040423d 	.word	0x0040423d

00404270 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404270:	b590      	push	{r4, r7, lr}
  404272:	b083      	sub	sp, #12
  404274:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  404276:	4813      	ldr	r0, [pc, #76]	; (4042c4 <sysclk_init+0x54>)
  404278:	4b13      	ldr	r3, [pc, #76]	; (4042c8 <sysclk_init+0x58>)
  40427a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  40427c:	2006      	movs	r0, #6
  40427e:	4b13      	ldr	r3, [pc, #76]	; (4042cc <sysclk_init+0x5c>)
  404280:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  404282:	1d38      	adds	r0, r7, #4
  404284:	2319      	movs	r3, #25
  404286:	2201      	movs	r2, #1
  404288:	2106      	movs	r1, #6
  40428a:	4c11      	ldr	r4, [pc, #68]	; (4042d0 <sysclk_init+0x60>)
  40428c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40428e:	1d3b      	adds	r3, r7, #4
  404290:	2100      	movs	r1, #0
  404292:	4618      	mov	r0, r3
  404294:	4b0f      	ldr	r3, [pc, #60]	; (4042d4 <sysclk_init+0x64>)
  404296:	4798      	blx	r3
		pll_wait_for_lock(0);
  404298:	2000      	movs	r0, #0
  40429a:	4b0f      	ldr	r3, [pc, #60]	; (4042d8 <sysclk_init+0x68>)
  40429c:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40429e:	2002      	movs	r0, #2
  4042a0:	4b0e      	ldr	r3, [pc, #56]	; (4042dc <sysclk_init+0x6c>)
  4042a2:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4042a4:	2000      	movs	r0, #0
  4042a6:	4b0e      	ldr	r3, [pc, #56]	; (4042e0 <sysclk_init+0x70>)
  4042a8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4042aa:	4b0e      	ldr	r3, [pc, #56]	; (4042e4 <sysclk_init+0x74>)
  4042ac:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4042ae:	4b0e      	ldr	r3, [pc, #56]	; (4042e8 <sysclk_init+0x78>)
  4042b0:	4798      	blx	r3
  4042b2:	4603      	mov	r3, r0
  4042b4:	4618      	mov	r0, r3
  4042b6:	4b04      	ldr	r3, [pc, #16]	; (4042c8 <sysclk_init+0x58>)
  4042b8:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4042ba:	bf00      	nop
  4042bc:	370c      	adds	r7, #12
  4042be:	46bd      	mov	sp, r7
  4042c0:	bd90      	pop	{r4, r7, pc}
  4042c2:	bf00      	nop
  4042c4:	11e1a300 	.word	0x11e1a300
  4042c8:	00405ffd 	.word	0x00405ffd
  4042cc:	004041e1 	.word	0x004041e1
  4042d0:	00404109 	.word	0x00404109
  4042d4:	00404175 	.word	0x00404175
  4042d8:	00404219 	.word	0x00404219
  4042dc:	004056c9 	.word	0x004056c9
  4042e0:	00405745 	.word	0x00405745
  4042e4:	00405e95 	.word	0x00405e95
  4042e8:	0040425d 	.word	0x0040425d

004042ec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4042ec:	b580      	push	{r7, lr}
  4042ee:	b086      	sub	sp, #24
  4042f0:	af00      	add	r7, sp, #0
  4042f2:	60f8      	str	r0, [r7, #12]
  4042f4:	60b9      	str	r1, [r7, #8]
  4042f6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4042f8:	2300      	movs	r3, #0
  4042fa:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  4042fc:	68fb      	ldr	r3, [r7, #12]
  4042fe:	2b00      	cmp	r3, #0
  404300:	d012      	beq.n	404328 <_read+0x3c>
		return -1;
  404302:	f04f 33ff 	mov.w	r3, #4294967295
  404306:	e013      	b.n	404330 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  404308:	4b0b      	ldr	r3, [pc, #44]	; (404338 <_read+0x4c>)
  40430a:	681b      	ldr	r3, [r3, #0]
  40430c:	4a0b      	ldr	r2, [pc, #44]	; (40433c <_read+0x50>)
  40430e:	6812      	ldr	r2, [r2, #0]
  404310:	68b9      	ldr	r1, [r7, #8]
  404312:	4610      	mov	r0, r2
  404314:	4798      	blx	r3
		ptr++;
  404316:	68bb      	ldr	r3, [r7, #8]
  404318:	3301      	adds	r3, #1
  40431a:	60bb      	str	r3, [r7, #8]
		nChars++;
  40431c:	697b      	ldr	r3, [r7, #20]
  40431e:	3301      	adds	r3, #1
  404320:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  404322:	687b      	ldr	r3, [r7, #4]
  404324:	3b01      	subs	r3, #1
  404326:	607b      	str	r3, [r7, #4]
  404328:	687b      	ldr	r3, [r7, #4]
  40432a:	2b00      	cmp	r3, #0
  40432c:	dcec      	bgt.n	404308 <_read+0x1c>
	}
	return nChars;
  40432e:	697b      	ldr	r3, [r7, #20]
}
  404330:	4618      	mov	r0, r3
  404332:	3718      	adds	r7, #24
  404334:	46bd      	mov	sp, r7
  404336:	bd80      	pop	{r7, pc}
  404338:	2042233c 	.word	0x2042233c
  40433c:	20422344 	.word	0x20422344

00404340 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  404340:	b580      	push	{r7, lr}
  404342:	b086      	sub	sp, #24
  404344:	af00      	add	r7, sp, #0
  404346:	60f8      	str	r0, [r7, #12]
  404348:	60b9      	str	r1, [r7, #8]
  40434a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40434c:	2300      	movs	r3, #0
  40434e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  404350:	68fb      	ldr	r3, [r7, #12]
  404352:	2b01      	cmp	r3, #1
  404354:	d01e      	beq.n	404394 <_write+0x54>
  404356:	68fb      	ldr	r3, [r7, #12]
  404358:	2b02      	cmp	r3, #2
  40435a:	d01b      	beq.n	404394 <_write+0x54>
  40435c:	68fb      	ldr	r3, [r7, #12]
  40435e:	2b03      	cmp	r3, #3
  404360:	d018      	beq.n	404394 <_write+0x54>
		return -1;
  404362:	f04f 33ff 	mov.w	r3, #4294967295
  404366:	e019      	b.n	40439c <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  404368:	4b0e      	ldr	r3, [pc, #56]	; (4043a4 <_write+0x64>)
  40436a:	681a      	ldr	r2, [r3, #0]
  40436c:	4b0e      	ldr	r3, [pc, #56]	; (4043a8 <_write+0x68>)
  40436e:	6818      	ldr	r0, [r3, #0]
  404370:	68bb      	ldr	r3, [r7, #8]
  404372:	1c59      	adds	r1, r3, #1
  404374:	60b9      	str	r1, [r7, #8]
  404376:	781b      	ldrb	r3, [r3, #0]
  404378:	4619      	mov	r1, r3
  40437a:	4790      	blx	r2
  40437c:	4603      	mov	r3, r0
  40437e:	2b00      	cmp	r3, #0
  404380:	da02      	bge.n	404388 <_write+0x48>
			return -1;
  404382:	f04f 33ff 	mov.w	r3, #4294967295
  404386:	e009      	b.n	40439c <_write+0x5c>
		}
		++nChars;
  404388:	697b      	ldr	r3, [r7, #20]
  40438a:	3301      	adds	r3, #1
  40438c:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  40438e:	687b      	ldr	r3, [r7, #4]
  404390:	3b01      	subs	r3, #1
  404392:	607b      	str	r3, [r7, #4]
  404394:	687b      	ldr	r3, [r7, #4]
  404396:	2b00      	cmp	r3, #0
  404398:	d1e6      	bne.n	404368 <_write+0x28>
	}
	return nChars;
  40439a:	697b      	ldr	r3, [r7, #20]
}
  40439c:	4618      	mov	r0, r3
  40439e:	3718      	adds	r7, #24
  4043a0:	46bd      	mov	sp, r7
  4043a2:	bd80      	pop	{r7, pc}
  4043a4:	20422340 	.word	0x20422340
  4043a8:	20422344 	.word	0x20422344

004043ac <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  4043ac:	b480      	push	{r7}
  4043ae:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4043b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4043b4:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4043b8:	4b09      	ldr	r3, [pc, #36]	; (4043e0 <SCB_EnableICache+0x34>)
  4043ba:	2200      	movs	r2, #0
  4043bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4043c0:	4a07      	ldr	r2, [pc, #28]	; (4043e0 <SCB_EnableICache+0x34>)
  4043c2:	4b07      	ldr	r3, [pc, #28]	; (4043e0 <SCB_EnableICache+0x34>)
  4043c4:	695b      	ldr	r3, [r3, #20]
  4043c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  4043ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  4043cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4043d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  4043d4:	bf00      	nop
  4043d6:	46bd      	mov	sp, r7
  4043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043dc:	4770      	bx	lr
  4043de:	bf00      	nop
  4043e0:	e000ed00 	.word	0xe000ed00

004043e4 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  4043e4:	b480      	push	{r7}
  4043e6:	b08b      	sub	sp, #44	; 0x2c
  4043e8:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4043ea:	4b26      	ldr	r3, [pc, #152]	; (404484 <SCB_EnableDCache+0xa0>)
  4043ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  4043f0:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  4043f2:	69fb      	ldr	r3, [r7, #28]
  4043f4:	0b5b      	lsrs	r3, r3, #13
  4043f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
  4043fa:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4043fc:	69fb      	ldr	r3, [r7, #28]
  4043fe:	f003 0307 	and.w	r3, r3, #7
  404402:	3304      	adds	r3, #4
  404404:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  404406:	69fb      	ldr	r3, [r7, #28]
  404408:	08db      	lsrs	r3, r3, #3
  40440a:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40440e:	617b      	str	r3, [r7, #20]
  404410:	697b      	ldr	r3, [r7, #20]
  404412:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404414:	68bb      	ldr	r3, [r7, #8]
  404416:	fab3 f383 	clz	r3, r3
  40441a:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  40441c:	687b      	ldr	r3, [r7, #4]
  40441e:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  404420:	f003 031f 	and.w	r3, r3, #31
  404424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  404426:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  40442a:	697b      	ldr	r3, [r7, #20]
  40442c:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40442e:	6a3a      	ldr	r2, [r7, #32]
  404430:	693b      	ldr	r3, [r7, #16]
  404432:	fa02 f303 	lsl.w	r3, r2, r3
  404436:	4619      	mov	r1, r3
  404438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40443a:	69bb      	ldr	r3, [r7, #24]
  40443c:	fa02 f303 	lsl.w	r3, r2, r3
  404440:	430b      	orrs	r3, r1
  404442:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  404444:	4a0f      	ldr	r2, [pc, #60]	; (404484 <SCB_EnableDCache+0xa0>)
  404446:	68fb      	ldr	r3, [r7, #12]
  404448:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  40444c:	6a3b      	ldr	r3, [r7, #32]
  40444e:	1e5a      	subs	r2, r3, #1
  404450:	623a      	str	r2, [r7, #32]
  404452:	2b00      	cmp	r3, #0
  404454:	d1eb      	bne.n	40442e <SCB_EnableDCache+0x4a>
        } while(sets--);
  404456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404458:	1e5a      	subs	r2, r3, #1
  40445a:	627a      	str	r2, [r7, #36]	; 0x24
  40445c:	2b00      	cmp	r3, #0
  40445e:	d1e4      	bne.n	40442a <SCB_EnableDCache+0x46>
  404460:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  404464:	4a07      	ldr	r2, [pc, #28]	; (404484 <SCB_EnableDCache+0xa0>)
  404466:	4b07      	ldr	r3, [pc, #28]	; (404484 <SCB_EnableDCache+0xa0>)
  404468:	695b      	ldr	r3, [r3, #20]
  40446a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40446e:	6153      	str	r3, [r2, #20]
  404470:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404474:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  404478:	bf00      	nop
  40447a:	372c      	adds	r7, #44	; 0x2c
  40447c:	46bd      	mov	sp, r7
  40447e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404482:	4770      	bx	lr
  404484:	e000ed00 	.word	0xe000ed00

00404488 <sysclk_enable_peripheral_clock>:
{
  404488:	b580      	push	{r7, lr}
  40448a:	b082      	sub	sp, #8
  40448c:	af00      	add	r7, sp, #0
  40448e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  404490:	6878      	ldr	r0, [r7, #4]
  404492:	4b03      	ldr	r3, [pc, #12]	; (4044a0 <sysclk_enable_peripheral_clock+0x18>)
  404494:	4798      	blx	r3
}
  404496:	bf00      	nop
  404498:	3708      	adds	r7, #8
  40449a:	46bd      	mov	sp, r7
  40449c:	bd80      	pop	{r7, pc}
  40449e:	bf00      	nop
  4044a0:	0040598d 	.word	0x0040598d

004044a4 <ioport_init>:
{
  4044a4:	b580      	push	{r7, lr}
  4044a6:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  4044a8:	200a      	movs	r0, #10
  4044aa:	4b08      	ldr	r3, [pc, #32]	; (4044cc <ioport_init+0x28>)
  4044ac:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  4044ae:	200b      	movs	r0, #11
  4044b0:	4b06      	ldr	r3, [pc, #24]	; (4044cc <ioport_init+0x28>)
  4044b2:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  4044b4:	200c      	movs	r0, #12
  4044b6:	4b05      	ldr	r3, [pc, #20]	; (4044cc <ioport_init+0x28>)
  4044b8:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  4044ba:	2010      	movs	r0, #16
  4044bc:	4b03      	ldr	r3, [pc, #12]	; (4044cc <ioport_init+0x28>)
  4044be:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  4044c0:	2011      	movs	r0, #17
  4044c2:	4b02      	ldr	r3, [pc, #8]	; (4044cc <ioport_init+0x28>)
  4044c4:	4798      	blx	r3
}
  4044c6:	bf00      	nop
  4044c8:	bd80      	pop	{r7, pc}
  4044ca:	bf00      	nop
  4044cc:	00404489 	.word	0x00404489

004044d0 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  4044d0:	b480      	push	{r7}
  4044d2:	b089      	sub	sp, #36	; 0x24
  4044d4:	af00      	add	r7, sp, #0
  4044d6:	6078      	str	r0, [r7, #4]
  4044d8:	687b      	ldr	r3, [r7, #4]
  4044da:	61fb      	str	r3, [r7, #28]
  4044dc:	69fb      	ldr	r3, [r7, #28]
  4044de:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4044e0:	69bb      	ldr	r3, [r7, #24]
  4044e2:	095a      	lsrs	r2, r3, #5
  4044e4:	69fb      	ldr	r3, [r7, #28]
  4044e6:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4044e8:	697b      	ldr	r3, [r7, #20]
  4044ea:	f003 031f 	and.w	r3, r3, #31
  4044ee:	2101      	movs	r1, #1
  4044f0:	fa01 f303 	lsl.w	r3, r1, r3
  4044f4:	613a      	str	r2, [r7, #16]
  4044f6:	60fb      	str	r3, [r7, #12]
  4044f8:	693b      	ldr	r3, [r7, #16]
  4044fa:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4044fc:	68ba      	ldr	r2, [r7, #8]
  4044fe:	4b06      	ldr	r3, [pc, #24]	; (404518 <ioport_disable_pin+0x48>)
  404500:	4413      	add	r3, r2
  404502:	025b      	lsls	r3, r3, #9
  404504:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404506:	68fb      	ldr	r3, [r7, #12]
  404508:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40450a:	bf00      	nop
  40450c:	3724      	adds	r7, #36	; 0x24
  40450e:	46bd      	mov	sp, r7
  404510:	f85d 7b04 	ldr.w	r7, [sp], #4
  404514:	4770      	bx	lr
  404516:	bf00      	nop
  404518:	00200707 	.word	0x00200707

0040451c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  40451c:	b480      	push	{r7}
  40451e:	b08d      	sub	sp, #52	; 0x34
  404520:	af00      	add	r7, sp, #0
  404522:	6078      	str	r0, [r7, #4]
  404524:	6039      	str	r1, [r7, #0]
  404526:	687b      	ldr	r3, [r7, #4]
  404528:	62fb      	str	r3, [r7, #44]	; 0x2c
  40452a:	683b      	ldr	r3, [r7, #0]
  40452c:	62bb      	str	r3, [r7, #40]	; 0x28
  40452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404530:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  404532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404534:	095a      	lsrs	r2, r3, #5
  404536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404538:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40453a:	6a3b      	ldr	r3, [r7, #32]
  40453c:	f003 031f 	and.w	r3, r3, #31
  404540:	2101      	movs	r1, #1
  404542:	fa01 f303 	lsl.w	r3, r1, r3
  404546:	61fa      	str	r2, [r7, #28]
  404548:	61bb      	str	r3, [r7, #24]
  40454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40454c:	617b      	str	r3, [r7, #20]
  40454e:	69fb      	ldr	r3, [r7, #28]
  404550:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404552:	693a      	ldr	r2, [r7, #16]
  404554:	4b37      	ldr	r3, [pc, #220]	; (404634 <ioport_set_pin_mode+0x118>)
  404556:	4413      	add	r3, r2
  404558:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  40455a:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  40455c:	697b      	ldr	r3, [r7, #20]
  40455e:	f003 0308 	and.w	r3, r3, #8
  404562:	2b00      	cmp	r3, #0
  404564:	d003      	beq.n	40456e <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  404566:	68fb      	ldr	r3, [r7, #12]
  404568:	69ba      	ldr	r2, [r7, #24]
  40456a:	665a      	str	r2, [r3, #100]	; 0x64
  40456c:	e002      	b.n	404574 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  40456e:	68fb      	ldr	r3, [r7, #12]
  404570:	69ba      	ldr	r2, [r7, #24]
  404572:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  404574:	697b      	ldr	r3, [r7, #20]
  404576:	f003 0310 	and.w	r3, r3, #16
  40457a:	2b00      	cmp	r3, #0
  40457c:	d004      	beq.n	404588 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  40457e:	68fb      	ldr	r3, [r7, #12]
  404580:	69ba      	ldr	r2, [r7, #24]
  404582:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  404586:	e003      	b.n	404590 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  404588:	68fb      	ldr	r3, [r7, #12]
  40458a:	69ba      	ldr	r2, [r7, #24]
  40458c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  404590:	697b      	ldr	r3, [r7, #20]
  404592:	f003 0320 	and.w	r3, r3, #32
  404596:	2b00      	cmp	r3, #0
  404598:	d003      	beq.n	4045a2 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40459a:	68fb      	ldr	r3, [r7, #12]
  40459c:	69ba      	ldr	r2, [r7, #24]
  40459e:	651a      	str	r2, [r3, #80]	; 0x50
  4045a0:	e002      	b.n	4045a8 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  4045a2:	68fb      	ldr	r3, [r7, #12]
  4045a4:	69ba      	ldr	r2, [r7, #24]
  4045a6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4045a8:	697b      	ldr	r3, [r7, #20]
  4045aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4045ae:	2b00      	cmp	r3, #0
  4045b0:	d003      	beq.n	4045ba <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  4045b2:	68fb      	ldr	r3, [r7, #12]
  4045b4:	69ba      	ldr	r2, [r7, #24]
  4045b6:	621a      	str	r2, [r3, #32]
  4045b8:	e002      	b.n	4045c0 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  4045ba:	68fb      	ldr	r3, [r7, #12]
  4045bc:	69ba      	ldr	r2, [r7, #24]
  4045be:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  4045c0:	697b      	ldr	r3, [r7, #20]
  4045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4045c6:	2b00      	cmp	r3, #0
  4045c8:	d004      	beq.n	4045d4 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  4045ca:	68fb      	ldr	r3, [r7, #12]
  4045cc:	69ba      	ldr	r2, [r7, #24]
  4045ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4045d2:	e003      	b.n	4045dc <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4045d4:	68fb      	ldr	r3, [r7, #12]
  4045d6:	69ba      	ldr	r2, [r7, #24]
  4045d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4045dc:	697b      	ldr	r3, [r7, #20]
  4045de:	f003 0301 	and.w	r3, r3, #1
  4045e2:	2b00      	cmp	r3, #0
  4045e4:	d006      	beq.n	4045f4 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  4045e6:	68fb      	ldr	r3, [r7, #12]
  4045e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4045ea:	69bb      	ldr	r3, [r7, #24]
  4045ec:	431a      	orrs	r2, r3
  4045ee:	68fb      	ldr	r3, [r7, #12]
  4045f0:	671a      	str	r2, [r3, #112]	; 0x70
  4045f2:	e006      	b.n	404602 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4045f4:	68fb      	ldr	r3, [r7, #12]
  4045f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4045f8:	69bb      	ldr	r3, [r7, #24]
  4045fa:	43db      	mvns	r3, r3
  4045fc:	401a      	ands	r2, r3
  4045fe:	68fb      	ldr	r3, [r7, #12]
  404600:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  404602:	697b      	ldr	r3, [r7, #20]
  404604:	f003 0302 	and.w	r3, r3, #2
  404608:	2b00      	cmp	r3, #0
  40460a:	d006      	beq.n	40461a <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  40460c:	68fb      	ldr	r3, [r7, #12]
  40460e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  404610:	69bb      	ldr	r3, [r7, #24]
  404612:	431a      	orrs	r2, r3
  404614:	68fb      	ldr	r3, [r7, #12]
  404616:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  404618:	e006      	b.n	404628 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40461a:	68fb      	ldr	r3, [r7, #12]
  40461c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40461e:	69bb      	ldr	r3, [r7, #24]
  404620:	43db      	mvns	r3, r3
  404622:	401a      	ands	r2, r3
  404624:	68fb      	ldr	r3, [r7, #12]
  404626:	675a      	str	r2, [r3, #116]	; 0x74
  404628:	bf00      	nop
  40462a:	3734      	adds	r7, #52	; 0x34
  40462c:	46bd      	mov	sp, r7
  40462e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404632:	4770      	bx	lr
  404634:	00200707 	.word	0x00200707

00404638 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  404638:	b480      	push	{r7}
  40463a:	b08d      	sub	sp, #52	; 0x34
  40463c:	af00      	add	r7, sp, #0
  40463e:	6078      	str	r0, [r7, #4]
  404640:	460b      	mov	r3, r1
  404642:	70fb      	strb	r3, [r7, #3]
  404644:	687b      	ldr	r3, [r7, #4]
  404646:	62fb      	str	r3, [r7, #44]	; 0x2c
  404648:	78fb      	ldrb	r3, [r7, #3]
  40464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404650:	627b      	str	r3, [r7, #36]	; 0x24
  404652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404654:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  404656:	6a3b      	ldr	r3, [r7, #32]
  404658:	095b      	lsrs	r3, r3, #5
  40465a:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40465c:	69fa      	ldr	r2, [r7, #28]
  40465e:	4b17      	ldr	r3, [pc, #92]	; (4046bc <ioport_set_pin_dir+0x84>)
  404660:	4413      	add	r3, r2
  404662:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  404664:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  404666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40466a:	2b01      	cmp	r3, #1
  40466c:	d109      	bne.n	404682 <ioport_set_pin_dir+0x4a>
  40466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404670:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  404672:	697b      	ldr	r3, [r7, #20]
  404674:	f003 031f 	and.w	r3, r3, #31
  404678:	2201      	movs	r2, #1
  40467a:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40467c:	69bb      	ldr	r3, [r7, #24]
  40467e:	611a      	str	r2, [r3, #16]
  404680:	e00c      	b.n	40469c <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  404682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  404686:	2b00      	cmp	r3, #0
  404688:	d108      	bne.n	40469c <ioport_set_pin_dir+0x64>
  40468a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40468c:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  40468e:	693b      	ldr	r3, [r7, #16]
  404690:	f003 031f 	and.w	r3, r3, #31
  404694:	2201      	movs	r2, #1
  404696:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404698:	69bb      	ldr	r3, [r7, #24]
  40469a:	615a      	str	r2, [r3, #20]
  40469c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40469e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4046a0:	68fb      	ldr	r3, [r7, #12]
  4046a2:	f003 031f 	and.w	r3, r3, #31
  4046a6:	2201      	movs	r2, #1
  4046a8:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4046aa:	69bb      	ldr	r3, [r7, #24]
  4046ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4046b0:	bf00      	nop
  4046b2:	3734      	adds	r7, #52	; 0x34
  4046b4:	46bd      	mov	sp, r7
  4046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4046ba:	4770      	bx	lr
  4046bc:	00200707 	.word	0x00200707

004046c0 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  4046c0:	b480      	push	{r7}
  4046c2:	b08b      	sub	sp, #44	; 0x2c
  4046c4:	af00      	add	r7, sp, #0
  4046c6:	6078      	str	r0, [r7, #4]
  4046c8:	460b      	mov	r3, r1
  4046ca:	70fb      	strb	r3, [r7, #3]
  4046cc:	687b      	ldr	r3, [r7, #4]
  4046ce:	627b      	str	r3, [r7, #36]	; 0x24
  4046d0:	78fb      	ldrb	r3, [r7, #3]
  4046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046d8:	61fb      	str	r3, [r7, #28]
  4046da:	69fb      	ldr	r3, [r7, #28]
  4046dc:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4046de:	69bb      	ldr	r3, [r7, #24]
  4046e0:	095b      	lsrs	r3, r3, #5
  4046e2:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4046e4:	697a      	ldr	r2, [r7, #20]
  4046e6:	4b10      	ldr	r3, [pc, #64]	; (404728 <ioport_set_pin_level+0x68>)
  4046e8:	4413      	add	r3, r2
  4046ea:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4046ec:	613b      	str	r3, [r7, #16]

	if (level) {
  4046ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4046f2:	2b00      	cmp	r3, #0
  4046f4:	d009      	beq.n	40470a <ioport_set_pin_level+0x4a>
  4046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046f8:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4046fa:	68fb      	ldr	r3, [r7, #12]
  4046fc:	f003 031f 	and.w	r3, r3, #31
  404700:	2201      	movs	r2, #1
  404702:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404704:	693b      	ldr	r3, [r7, #16]
  404706:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  404708:	e008      	b.n	40471c <ioport_set_pin_level+0x5c>
  40470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40470c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40470e:	68bb      	ldr	r3, [r7, #8]
  404710:	f003 031f 	and.w	r3, r3, #31
  404714:	2201      	movs	r2, #1
  404716:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  404718:	693b      	ldr	r3, [r7, #16]
  40471a:	635a      	str	r2, [r3, #52]	; 0x34
  40471c:	bf00      	nop
  40471e:	372c      	adds	r7, #44	; 0x2c
  404720:	46bd      	mov	sp, r7
  404722:	f85d 7b04 	ldr.w	r7, [sp], #4
  404726:	4770      	bx	lr
  404728:	00200707 	.word	0x00200707

0040472c <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  40472c:	b480      	push	{r7}
  40472e:	b08d      	sub	sp, #52	; 0x34
  404730:	af00      	add	r7, sp, #0
  404732:	6078      	str	r0, [r7, #4]
  404734:	460b      	mov	r3, r1
  404736:	70fb      	strb	r3, [r7, #3]
  404738:	687b      	ldr	r3, [r7, #4]
  40473a:	62fb      	str	r3, [r7, #44]	; 0x2c
  40473c:	78fb      	ldrb	r3, [r7, #3]
  40473e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  404742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  404744:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  404746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404748:	095a      	lsrs	r2, r3, #5
  40474a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40474c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40474e:	6a3b      	ldr	r3, [r7, #32]
  404750:	f003 031f 	and.w	r3, r3, #31
  404754:	2101      	movs	r1, #1
  404756:	fa01 f303 	lsl.w	r3, r1, r3
  40475a:	61fa      	str	r2, [r7, #28]
  40475c:	61bb      	str	r3, [r7, #24]
  40475e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  404762:	75fb      	strb	r3, [r7, #23]
  404764:	69fb      	ldr	r3, [r7, #28]
  404766:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  404768:	693a      	ldr	r2, [r7, #16]
  40476a:	4b23      	ldr	r3, [pc, #140]	; (4047f8 <ioport_set_pin_sense_mode+0xcc>)
  40476c:	4413      	add	r3, r2
  40476e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  404770:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  404772:	7dfb      	ldrb	r3, [r7, #23]
  404774:	3b01      	subs	r3, #1
  404776:	2b03      	cmp	r3, #3
  404778:	d82e      	bhi.n	4047d8 <ioport_set_pin_sense_mode+0xac>
  40477a:	a201      	add	r2, pc, #4	; (adr r2, 404780 <ioport_set_pin_sense_mode+0x54>)
  40477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404780:	004047b5 	.word	0x004047b5
  404784:	004047c7 	.word	0x004047c7
  404788:	00404791 	.word	0x00404791
  40478c:	004047a3 	.word	0x004047a3
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  404790:	68fb      	ldr	r3, [r7, #12]
  404792:	69ba      	ldr	r2, [r7, #24]
  404794:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  404798:	68fb      	ldr	r3, [r7, #12]
  40479a:	69ba      	ldr	r2, [r7, #24]
  40479c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4047a0:	e01f      	b.n	4047e2 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  4047a2:	68fb      	ldr	r3, [r7, #12]
  4047a4:	69ba      	ldr	r2, [r7, #24]
  4047a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4047aa:	68fb      	ldr	r3, [r7, #12]
  4047ac:	69ba      	ldr	r2, [r7, #24]
  4047ae:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4047b2:	e016      	b.n	4047e2 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  4047b4:	68fb      	ldr	r3, [r7, #12]
  4047b6:	69ba      	ldr	r2, [r7, #24]
  4047b8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4047bc:	68fb      	ldr	r3, [r7, #12]
  4047be:	69ba      	ldr	r2, [r7, #24]
  4047c0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4047c4:	e00d      	b.n	4047e2 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4047c6:	68fb      	ldr	r3, [r7, #12]
  4047c8:	69ba      	ldr	r2, [r7, #24]
  4047ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4047ce:	68fb      	ldr	r3, [r7, #12]
  4047d0:	69ba      	ldr	r2, [r7, #24]
  4047d2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4047d6:	e004      	b.n	4047e2 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  4047d8:	68fb      	ldr	r3, [r7, #12]
  4047da:	69ba      	ldr	r2, [r7, #24]
  4047dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  4047e0:	e003      	b.n	4047ea <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  4047e2:	68fb      	ldr	r3, [r7, #12]
  4047e4:	69ba      	ldr	r2, [r7, #24]
  4047e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4047ea:	bf00      	nop
  4047ec:	3734      	adds	r7, #52	; 0x34
  4047ee:	46bd      	mov	sp, r7
  4047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4047f4:	4770      	bx	lr
  4047f6:	bf00      	nop
  4047f8:	00200707 	.word	0x00200707

004047fc <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  4047fc:	b480      	push	{r7}
  4047fe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  404800:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404804:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  404808:	4a0c      	ldr	r2, [pc, #48]	; (40483c <tcm_disable+0x40>)
  40480a:	4b0c      	ldr	r3, [pc, #48]	; (40483c <tcm_disable+0x40>)
  40480c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  404810:	f023 0301 	bic.w	r3, r3, #1
  404814:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  404818:	4a08      	ldr	r2, [pc, #32]	; (40483c <tcm_disable+0x40>)
  40481a:	4b08      	ldr	r3, [pc, #32]	; (40483c <tcm_disable+0x40>)
  40481c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  404820:	f023 0301 	bic.w	r3, r3, #1
  404824:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  404828:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40482c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  404830:	bf00      	nop
  404832:	46bd      	mov	sp, r7
  404834:	f85d 7b04 	ldr.w	r7, [sp], #4
  404838:	4770      	bx	lr
  40483a:	bf00      	nop
  40483c:	e000ed00 	.word	0xe000ed00

00404840 <board_init>:
#endif

void board_init(void)
{
  404840:	b580      	push	{r7, lr}
  404842:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404844:	4b1e      	ldr	r3, [pc, #120]	; (4048c0 <board_init+0x80>)
  404846:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40484a:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  40484c:	4b1d      	ldr	r3, [pc, #116]	; (4048c4 <board_init+0x84>)
  40484e:	4798      	blx	r3
	SCB_EnableDCache();
  404850:	4b1d      	ldr	r3, [pc, #116]	; (4048c8 <board_init+0x88>)
  404852:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404854:	4b1d      	ldr	r3, [pc, #116]	; (4048cc <board_init+0x8c>)
  404856:	4a1e      	ldr	r2, [pc, #120]	; (4048d0 <board_init+0x90>)
  404858:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40485a:	4b1c      	ldr	r3, [pc, #112]	; (4048cc <board_init+0x8c>)
  40485c:	4a1d      	ldr	r2, [pc, #116]	; (4048d4 <board_init+0x94>)
  40485e:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  404860:	4b1d      	ldr	r3, [pc, #116]	; (4048d8 <board_init+0x98>)
  404862:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  404864:	4b1d      	ldr	r3, [pc, #116]	; (4048dc <board_init+0x9c>)
  404866:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  404868:	2101      	movs	r1, #1
  40486a:	2048      	movs	r0, #72	; 0x48
  40486c:	4b1c      	ldr	r3, [pc, #112]	; (4048e0 <board_init+0xa0>)
  40486e:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  404870:	2101      	movs	r1, #1
  404872:	2048      	movs	r0, #72	; 0x48
  404874:	4b1b      	ldr	r3, [pc, #108]	; (4048e4 <board_init+0xa4>)
  404876:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  404878:	2100      	movs	r1, #0
  40487a:	200b      	movs	r0, #11
  40487c:	4b18      	ldr	r3, [pc, #96]	; (4048e0 <board_init+0xa0>)
  40487e:	4798      	blx	r3
  404880:	2188      	movs	r1, #136	; 0x88
  404882:	200b      	movs	r0, #11
  404884:	4b18      	ldr	r3, [pc, #96]	; (4048e8 <board_init+0xa8>)
  404886:	4798      	blx	r3
  404888:	2102      	movs	r1, #2
  40488a:	200b      	movs	r0, #11
  40488c:	4b17      	ldr	r3, [pc, #92]	; (4048ec <board_init+0xac>)
  40488e:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  404890:	2100      	movs	r1, #0
  404892:	2015      	movs	r0, #21
  404894:	4b14      	ldr	r3, [pc, #80]	; (4048e8 <board_init+0xa8>)
  404896:	4798      	blx	r3
  404898:	2015      	movs	r0, #21
  40489a:	4b15      	ldr	r3, [pc, #84]	; (4048f0 <board_init+0xb0>)
  40489c:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40489e:	4a15      	ldr	r2, [pc, #84]	; (4048f4 <board_init+0xb4>)
  4048a0:	4b14      	ldr	r3, [pc, #80]	; (4048f4 <board_init+0xb4>)
  4048a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  4048a6:	f043 0310 	orr.w	r3, r3, #16
  4048aa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  4048ae:	2103      	movs	r1, #3
  4048b0:	2024      	movs	r0, #36	; 0x24
  4048b2:	4b0d      	ldr	r3, [pc, #52]	; (4048e8 <board_init+0xa8>)
  4048b4:	4798      	blx	r3
  4048b6:	2024      	movs	r0, #36	; 0x24
  4048b8:	4b0d      	ldr	r3, [pc, #52]	; (4048f0 <board_init+0xb0>)
  4048ba:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  4048bc:	bf00      	nop
  4048be:	bd80      	pop	{r7, pc}
  4048c0:	400e1850 	.word	0x400e1850
  4048c4:	004043ad 	.word	0x004043ad
  4048c8:	004043e5 	.word	0x004043e5
  4048cc:	400e0c00 	.word	0x400e0c00
  4048d0:	5a00080c 	.word	0x5a00080c
  4048d4:	5a00070c 	.word	0x5a00070c
  4048d8:	004047fd 	.word	0x004047fd
  4048dc:	004044a5 	.word	0x004044a5
  4048e0:	00404639 	.word	0x00404639
  4048e4:	004046c1 	.word	0x004046c1
  4048e8:	0040451d 	.word	0x0040451d
  4048ec:	0040472d 	.word	0x0040472d
  4048f0:	004044d1 	.word	0x004044d1
  4048f4:	40088000 	.word	0x40088000

004048f8 <NVIC_EnableIRQ>:
{
  4048f8:	b480      	push	{r7}
  4048fa:	b083      	sub	sp, #12
  4048fc:	af00      	add	r7, sp, #0
  4048fe:	4603      	mov	r3, r0
  404900:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404902:	4909      	ldr	r1, [pc, #36]	; (404928 <NVIC_EnableIRQ+0x30>)
  404904:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404908:	095b      	lsrs	r3, r3, #5
  40490a:	79fa      	ldrb	r2, [r7, #7]
  40490c:	f002 021f 	and.w	r2, r2, #31
  404910:	2001      	movs	r0, #1
  404912:	fa00 f202 	lsl.w	r2, r0, r2
  404916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40491a:	bf00      	nop
  40491c:	370c      	adds	r7, #12
  40491e:	46bd      	mov	sp, r7
  404920:	f85d 7b04 	ldr.w	r7, [sp], #4
  404924:	4770      	bx	lr
  404926:	bf00      	nop
  404928:	e000e100 	.word	0xe000e100

0040492c <NVIC_ClearPendingIRQ>:
{
  40492c:	b480      	push	{r7}
  40492e:	b083      	sub	sp, #12
  404930:	af00      	add	r7, sp, #0
  404932:	4603      	mov	r3, r0
  404934:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  404936:	4909      	ldr	r1, [pc, #36]	; (40495c <NVIC_ClearPendingIRQ+0x30>)
  404938:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40493c:	095b      	lsrs	r3, r3, #5
  40493e:	79fa      	ldrb	r2, [r7, #7]
  404940:	f002 021f 	and.w	r2, r2, #31
  404944:	2001      	movs	r0, #1
  404946:	fa00 f202 	lsl.w	r2, r0, r2
  40494a:	3360      	adds	r3, #96	; 0x60
  40494c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404950:	bf00      	nop
  404952:	370c      	adds	r7, #12
  404954:	46bd      	mov	sp, r7
  404956:	f85d 7b04 	ldr.w	r7, [sp], #4
  40495a:	4770      	bx	lr
  40495c:	e000e100 	.word	0xe000e100

00404960 <NVIC_SetPriority>:
{
  404960:	b480      	push	{r7}
  404962:	b083      	sub	sp, #12
  404964:	af00      	add	r7, sp, #0
  404966:	4603      	mov	r3, r0
  404968:	6039      	str	r1, [r7, #0]
  40496a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40496c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404970:	2b00      	cmp	r3, #0
  404972:	da0b      	bge.n	40498c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404974:	490d      	ldr	r1, [pc, #52]	; (4049ac <NVIC_SetPriority+0x4c>)
  404976:	79fb      	ldrb	r3, [r7, #7]
  404978:	f003 030f 	and.w	r3, r3, #15
  40497c:	3b04      	subs	r3, #4
  40497e:	683a      	ldr	r2, [r7, #0]
  404980:	b2d2      	uxtb	r2, r2
  404982:	0152      	lsls	r2, r2, #5
  404984:	b2d2      	uxtb	r2, r2
  404986:	440b      	add	r3, r1
  404988:	761a      	strb	r2, [r3, #24]
}
  40498a:	e009      	b.n	4049a0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40498c:	4908      	ldr	r1, [pc, #32]	; (4049b0 <NVIC_SetPriority+0x50>)
  40498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404992:	683a      	ldr	r2, [r7, #0]
  404994:	b2d2      	uxtb	r2, r2
  404996:	0152      	lsls	r2, r2, #5
  404998:	b2d2      	uxtb	r2, r2
  40499a:	440b      	add	r3, r1
  40499c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4049a0:	bf00      	nop
  4049a2:	370c      	adds	r7, #12
  4049a4:	46bd      	mov	sp, r7
  4049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049aa:	4770      	bx	lr
  4049ac:	e000ed00 	.word	0xe000ed00
  4049b0:	e000e100 	.word	0xe000e100

004049b4 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4049b4:	b480      	push	{r7}
  4049b6:	b083      	sub	sp, #12
  4049b8:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4049ba:	f3ef 8310 	mrs	r3, PRIMASK
  4049be:	607b      	str	r3, [r7, #4]
  return(result);
  4049c0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4049c2:	2b00      	cmp	r3, #0
  4049c4:	bf0c      	ite	eq
  4049c6:	2301      	moveq	r3, #1
  4049c8:	2300      	movne	r3, #0
  4049ca:	b2db      	uxtb	r3, r3
  4049cc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4049ce:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4049d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4049d4:	4b04      	ldr	r3, [pc, #16]	; (4049e8 <cpu_irq_save+0x34>)
  4049d6:	2200      	movs	r2, #0
  4049d8:	701a      	strb	r2, [r3, #0]
	return flags;
  4049da:	683b      	ldr	r3, [r7, #0]
}
  4049dc:	4618      	mov	r0, r3
  4049de:	370c      	adds	r7, #12
  4049e0:	46bd      	mov	sp, r7
  4049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4049e6:	4770      	bx	lr
  4049e8:	20400034 	.word	0x20400034

004049ec <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4049ec:	b480      	push	{r7}
  4049ee:	b083      	sub	sp, #12
  4049f0:	af00      	add	r7, sp, #0
  4049f2:	6078      	str	r0, [r7, #4]
	return (flags);
  4049f4:	687b      	ldr	r3, [r7, #4]
  4049f6:	2b00      	cmp	r3, #0
  4049f8:	bf14      	ite	ne
  4049fa:	2301      	movne	r3, #1
  4049fc:	2300      	moveq	r3, #0
  4049fe:	b2db      	uxtb	r3, r3
}
  404a00:	4618      	mov	r0, r3
  404a02:	370c      	adds	r7, #12
  404a04:	46bd      	mov	sp, r7
  404a06:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a0a:	4770      	bx	lr

00404a0c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  404a0c:	b580      	push	{r7, lr}
  404a0e:	b082      	sub	sp, #8
  404a10:	af00      	add	r7, sp, #0
  404a12:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  404a14:	6878      	ldr	r0, [r7, #4]
  404a16:	4b07      	ldr	r3, [pc, #28]	; (404a34 <cpu_irq_restore+0x28>)
  404a18:	4798      	blx	r3
  404a1a:	4603      	mov	r3, r0
  404a1c:	2b00      	cmp	r3, #0
  404a1e:	d005      	beq.n	404a2c <cpu_irq_restore+0x20>
		cpu_irq_enable();
  404a20:	4b05      	ldr	r3, [pc, #20]	; (404a38 <cpu_irq_restore+0x2c>)
  404a22:	2201      	movs	r2, #1
  404a24:	701a      	strb	r2, [r3, #0]
  404a26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404a2a:	b662      	cpsie	i
}
  404a2c:	bf00      	nop
  404a2e:	3708      	adds	r7, #8
  404a30:	46bd      	mov	sp, r7
  404a32:	bd80      	pop	{r7, pc}
  404a34:	004049ed 	.word	0x004049ed
  404a38:	20400034 	.word	0x20400034

00404a3c <afec_ch_sanity_check>:
{
  404a3c:	b480      	push	{r7}
  404a3e:	b083      	sub	sp, #12
  404a40:	af00      	add	r7, sp, #0
  404a42:	6078      	str	r0, [r7, #4]
  404a44:	460b      	mov	r3, r1
  404a46:	807b      	strh	r3, [r7, #2]
}
  404a48:	bf00      	nop
  404a4a:	370c      	adds	r7, #12
  404a4c:	46bd      	mov	sp, r7
  404a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a52:	4770      	bx	lr

00404a54 <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  404a54:	b480      	push	{r7}
  404a56:	b083      	sub	sp, #12
  404a58:	af00      	add	r7, sp, #0
  404a5a:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  404a5c:	687b      	ldr	r3, [r7, #4]
  404a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  404a60:	4618      	mov	r0, r3
  404a62:	370c      	adds	r7, #12
  404a64:	46bd      	mov	sp, r7
  404a66:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a6a:	4770      	bx	lr

00404a6c <afec_get_interrupt_mask>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
  404a6c:	b480      	push	{r7}
  404a6e:	b083      	sub	sp, #12
  404a70:	af00      	add	r7, sp, #0
  404a72:	6078      	str	r0, [r7, #4]
	return afec->AFEC_IMR;
  404a74:	687b      	ldr	r3, [r7, #4]
  404a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  404a78:	4618      	mov	r0, r3
  404a7a:	370c      	adds	r7, #12
  404a7c:	46bd      	mov	sp, r7
  404a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a82:	4770      	bx	lr

00404a84 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  404a84:	b580      	push	{r7, lr}
  404a86:	b084      	sub	sp, #16
  404a88:	af00      	add	r7, sp, #0
  404a8a:	4603      	mov	r3, r0
  404a8c:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  404a8e:	79fb      	ldrb	r3, [r7, #7]
  404a90:	4a0a      	ldr	r2, [pc, #40]	; (404abc <sleepmgr_lock_mode+0x38>)
  404a92:	5cd3      	ldrb	r3, [r2, r3]
  404a94:	2bff      	cmp	r3, #255	; 0xff
  404a96:	d100      	bne.n	404a9a <sleepmgr_lock_mode+0x16>
		while (true) {
  404a98:	e7fe      	b.n	404a98 <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  404a9a:	4b09      	ldr	r3, [pc, #36]	; (404ac0 <sleepmgr_lock_mode+0x3c>)
  404a9c:	4798      	blx	r3
  404a9e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  404aa0:	79fb      	ldrb	r3, [r7, #7]
  404aa2:	4a06      	ldr	r2, [pc, #24]	; (404abc <sleepmgr_lock_mode+0x38>)
  404aa4:	5cd2      	ldrb	r2, [r2, r3]
  404aa6:	3201      	adds	r2, #1
  404aa8:	b2d1      	uxtb	r1, r2
  404aaa:	4a04      	ldr	r2, [pc, #16]	; (404abc <sleepmgr_lock_mode+0x38>)
  404aac:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  404aae:	68f8      	ldr	r0, [r7, #12]
  404ab0:	4b04      	ldr	r3, [pc, #16]	; (404ac4 <sleepmgr_lock_mode+0x40>)
  404ab2:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  404ab4:	bf00      	nop
  404ab6:	3710      	adds	r7, #16
  404ab8:	46bd      	mov	sp, r7
  404aba:	bd80      	pop	{r7, pc}
  404abc:	20422334 	.word	0x20422334
  404ac0:	004049b5 	.word	0x004049b5
  404ac4:	00404a0d 	.word	0x00404a0d

00404ac8 <osc_get_rate>:
{
  404ac8:	b480      	push	{r7}
  404aca:	b083      	sub	sp, #12
  404acc:	af00      	add	r7, sp, #0
  404ace:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  404ad0:	687b      	ldr	r3, [r7, #4]
  404ad2:	2b07      	cmp	r3, #7
  404ad4:	d825      	bhi.n	404b22 <osc_get_rate+0x5a>
  404ad6:	a201      	add	r2, pc, #4	; (adr r2, 404adc <osc_get_rate+0x14>)
  404ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404adc:	00404afd 	.word	0x00404afd
  404ae0:	00404b03 	.word	0x00404b03
  404ae4:	00404b09 	.word	0x00404b09
  404ae8:	00404b0f 	.word	0x00404b0f
  404aec:	00404b13 	.word	0x00404b13
  404af0:	00404b17 	.word	0x00404b17
  404af4:	00404b1b 	.word	0x00404b1b
  404af8:	00404b1f 	.word	0x00404b1f
		return OSC_SLCK_32K_RC_HZ;
  404afc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  404b00:	e010      	b.n	404b24 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  404b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404b06:	e00d      	b.n	404b24 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  404b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404b0c:	e00a      	b.n	404b24 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  404b0e:	4b08      	ldr	r3, [pc, #32]	; (404b30 <osc_get_rate+0x68>)
  404b10:	e008      	b.n	404b24 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  404b12:	4b08      	ldr	r3, [pc, #32]	; (404b34 <osc_get_rate+0x6c>)
  404b14:	e006      	b.n	404b24 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  404b16:	4b08      	ldr	r3, [pc, #32]	; (404b38 <osc_get_rate+0x70>)
  404b18:	e004      	b.n	404b24 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  404b1a:	4b07      	ldr	r3, [pc, #28]	; (404b38 <osc_get_rate+0x70>)
  404b1c:	e002      	b.n	404b24 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  404b1e:	4b06      	ldr	r3, [pc, #24]	; (404b38 <osc_get_rate+0x70>)
  404b20:	e000      	b.n	404b24 <osc_get_rate+0x5c>
	return 0;
  404b22:	2300      	movs	r3, #0
}
  404b24:	4618      	mov	r0, r3
  404b26:	370c      	adds	r7, #12
  404b28:	46bd      	mov	sp, r7
  404b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b2e:	4770      	bx	lr
  404b30:	003d0900 	.word	0x003d0900
  404b34:	007a1200 	.word	0x007a1200
  404b38:	00b71b00 	.word	0x00b71b00

00404b3c <sysclk_get_main_hz>:
{
  404b3c:	b580      	push	{r7, lr}
  404b3e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  404b40:	2006      	movs	r0, #6
  404b42:	4b05      	ldr	r3, [pc, #20]	; (404b58 <sysclk_get_main_hz+0x1c>)
  404b44:	4798      	blx	r3
  404b46:	4602      	mov	r2, r0
  404b48:	4613      	mov	r3, r2
  404b4a:	009b      	lsls	r3, r3, #2
  404b4c:	4413      	add	r3, r2
  404b4e:	009a      	lsls	r2, r3, #2
  404b50:	4413      	add	r3, r2
}
  404b52:	4618      	mov	r0, r3
  404b54:	bd80      	pop	{r7, pc}
  404b56:	bf00      	nop
  404b58:	00404ac9 	.word	0x00404ac9

00404b5c <sysclk_get_cpu_hz>:
{
  404b5c:	b580      	push	{r7, lr}
  404b5e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  404b60:	4b02      	ldr	r3, [pc, #8]	; (404b6c <sysclk_get_cpu_hz+0x10>)
  404b62:	4798      	blx	r3
  404b64:	4603      	mov	r3, r0
}
  404b66:	4618      	mov	r0, r3
  404b68:	bd80      	pop	{r7, pc}
  404b6a:	bf00      	nop
  404b6c:	00404b3d 	.word	0x00404b3d

00404b70 <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  404b70:	b480      	push	{r7}
  404b72:	b083      	sub	sp, #12
  404b74:	af00      	add	r7, sp, #0
  404b76:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  404b78:	687b      	ldr	r3, [r7, #4]
  404b7a:	4a09      	ldr	r2, [pc, #36]	; (404ba0 <afec_find_inst_num+0x30>)
  404b7c:	4293      	cmp	r3, r2
  404b7e:	d101      	bne.n	404b84 <afec_find_inst_num+0x14>
		return 1;
  404b80:	2301      	movs	r3, #1
  404b82:	e006      	b.n	404b92 <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  404b84:	687b      	ldr	r3, [r7, #4]
  404b86:	4a07      	ldr	r2, [pc, #28]	; (404ba4 <afec_find_inst_num+0x34>)
  404b88:	4293      	cmp	r3, r2
  404b8a:	d101      	bne.n	404b90 <afec_find_inst_num+0x20>
		return 0;
  404b8c:	2300      	movs	r3, #0
  404b8e:	e000      	b.n	404b92 <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  404b90:	2300      	movs	r3, #0
}
  404b92:	4618      	mov	r0, r3
  404b94:	370c      	adds	r7, #12
  404b96:	46bd      	mov	sp, r7
  404b98:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b9c:	4770      	bx	lr
  404b9e:	bf00      	nop
  404ba0:	40064000 	.word	0x40064000
  404ba4:	4003c000 	.word	0x4003c000

00404ba8 <afec_find_pid>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
  404ba8:	b480      	push	{r7}
  404baa:	b083      	sub	sp, #12
  404bac:	af00      	add	r7, sp, #0
  404bae:	6078      	str	r0, [r7, #4]
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  404bb0:	687b      	ldr	r3, [r7, #4]
  404bb2:	4a09      	ldr	r2, [pc, #36]	; (404bd8 <afec_find_pid+0x30>)
  404bb4:	4293      	cmp	r3, r2
  404bb6:	d101      	bne.n	404bbc <afec_find_pid+0x14>
		return ID_AFEC1;
  404bb8:	2328      	movs	r3, #40	; 0x28
  404bba:	e006      	b.n	404bca <afec_find_pid+0x22>
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
  404bbc:	687b      	ldr	r3, [r7, #4]
  404bbe:	4a07      	ldr	r2, [pc, #28]	; (404bdc <afec_find_pid+0x34>)
  404bc0:	4293      	cmp	r3, r2
  404bc2:	d101      	bne.n	404bc8 <afec_find_pid+0x20>
		return ID_AFEC0;
  404bc4:	231d      	movs	r3, #29
  404bc6:	e000      	b.n	404bca <afec_find_pid+0x22>
	}
#endif
	return ID_AFEC0;
  404bc8:	231d      	movs	r3, #29
}
  404bca:	4618      	mov	r0, r3
  404bcc:	370c      	adds	r7, #12
  404bce:	46bd      	mov	sp, r7
  404bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
  404bd4:	4770      	bx	lr
  404bd6:	bf00      	nop
  404bd8:	40064000 	.word	0x40064000
  404bdc:	4003c000 	.word	0x4003c000

00404be0 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  404be0:	b480      	push	{r7}
  404be2:	b085      	sub	sp, #20
  404be4:	af00      	add	r7, sp, #0
  404be6:	6078      	str	r0, [r7, #4]
  404be8:	6039      	str	r1, [r7, #0]
	uint32_t reg = 0;
  404bea:	2300      	movs	r3, #0
  404bec:	60fb      	str	r3, [r7, #12]

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  404bee:	683b      	ldr	r3, [r7, #0]
  404bf0:	7cdb      	ldrb	r3, [r3, #19]
  404bf2:	2b00      	cmp	r3, #0
  404bf4:	d002      	beq.n	404bfc <afec_set_config+0x1c>
  404bf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  404bfa:	e000      	b.n	404bfe <afec_set_config+0x1e>
  404bfc:	2200      	movs	r2, #0
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  404bfe:	683b      	ldr	r3, [r7, #0]
  404c00:	6859      	ldr	r1, [r3, #4]
  404c02:	683b      	ldr	r3, [r7, #0]
  404c04:	689b      	ldr	r3, [r3, #8]
  404c06:	fbb1 f3f3 	udiv	r3, r1, r3
  404c0a:	3b01      	subs	r3, #1
  404c0c:	021b      	lsls	r3, r3, #8
  404c0e:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  404c10:	431a      	orrs	r2, r3
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  404c12:	683b      	ldr	r3, [r7, #0]
  404c14:	7c1b      	ldrb	r3, [r3, #16]
  404c16:	061b      	lsls	r3, r3, #24
  404c18:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
			AFEC_MR_ONE |
  404c1c:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
  404c1e:	683b      	ldr	r3, [r7, #0]
  404c20:	7c5b      	ldrb	r3, [r3, #17]
  404c22:	071b      	lsls	r3, r3, #28
  404c24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
			AFEC_MR_TRACKTIM(config->tracktim) |
  404c28:	431a      	orrs	r2, r3
			(config->startup_time);
  404c2a:	683b      	ldr	r3, [r7, #0]
  404c2c:	68db      	ldr	r3, [r3, #12]
			AFEC_MR_TRANSFER(config->transfer) |
  404c2e:	4313      	orrs	r3, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  404c30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  404c34:	60fb      	str	r3, [r7, #12]

	afec->AFEC_MR = reg;
  404c36:	687b      	ldr	r3, [r7, #4]
  404c38:	68fa      	ldr	r2, [r7, #12]
  404c3a:	605a      	str	r2, [r3, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  404c3c:	683b      	ldr	r3, [r7, #0]
  404c3e:	7d1b      	ldrb	r3, [r3, #20]
  404c40:	2b00      	cmp	r3, #0
  404c42:	d002      	beq.n	404c4a <afec_set_config+0x6a>
  404c44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  404c48:	e000      	b.n	404c4c <afec_set_config+0x6c>
  404c4a:	2200      	movs	r2, #0
			(config->resolution) |
  404c4c:	683b      	ldr	r3, [r7, #0]
  404c4e:	681b      	ldr	r3, [r3, #0]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  404c50:	431a      	orrs	r2, r3
			(config->stm ? AFEC_EMR_STM : 0);
  404c52:	683b      	ldr	r3, [r7, #0]
  404c54:	7d5b      	ldrb	r3, [r3, #21]
  404c56:	2b00      	cmp	r3, #0
  404c58:	d002      	beq.n	404c60 <afec_set_config+0x80>
  404c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  404c5e:	e000      	b.n	404c62 <afec_set_config+0x82>
  404c60:	2300      	movs	r3, #0
			(config->resolution) |
  404c62:	431a      	orrs	r2, r3
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  404c64:	687b      	ldr	r3, [r7, #4]
  404c66:	609a      	str	r2, [r3, #8]
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  404c68:	683b      	ldr	r3, [r7, #0]
  404c6a:	7d9b      	ldrb	r3, [r3, #22]
  404c6c:	021b      	lsls	r3, r3, #8
  404c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404c72:	f043 020c 	orr.w	r2, r3, #12
  404c76:	687b      	ldr	r3, [r7, #4]
  404c78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  404c7c:	bf00      	nop
  404c7e:	3714      	adds	r7, #20
  404c80:	46bd      	mov	sp, r7
  404c82:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c86:	4770      	bx	lr

00404c88 <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  404c88:	b580      	push	{r7, lr}
  404c8a:	b086      	sub	sp, #24
  404c8c:	af00      	add	r7, sp, #0
  404c8e:	60f8      	str	r0, [r7, #12]
  404c90:	460b      	mov	r3, r1
  404c92:	607a      	str	r2, [r7, #4]
  404c94:	817b      	strh	r3, [r7, #10]
	afec_ch_sanity_check(afec, channel);
  404c96:	897b      	ldrh	r3, [r7, #10]
  404c98:	4619      	mov	r1, r3
  404c9a:	68f8      	ldr	r0, [r7, #12]
  404c9c:	4b1e      	ldr	r3, [pc, #120]	; (404d18 <afec_ch_set_config+0x90>)
  404c9e:	4798      	blx	r3
	uint32_t reg = 0;
  404ca0:	2300      	movs	r3, #0
  404ca2:	617b      	str	r3, [r7, #20]

	reg = afec->AFEC_DIFFR;
  404ca4:	68fb      	ldr	r3, [r7, #12]
  404ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  404ca8:	617b      	str	r3, [r7, #20]
	reg &= ~(0x1u << channel);
  404caa:	897b      	ldrh	r3, [r7, #10]
  404cac:	2201      	movs	r2, #1
  404cae:	fa02 f303 	lsl.w	r3, r2, r3
  404cb2:	43db      	mvns	r3, r3
  404cb4:	697a      	ldr	r2, [r7, #20]
  404cb6:	4013      	ands	r3, r2
  404cb8:	617b      	str	r3, [r7, #20]
	reg |= (config->diff) ? (0x1u << channel) : 0;
  404cba:	687b      	ldr	r3, [r7, #4]
  404cbc:	781b      	ldrb	r3, [r3, #0]
  404cbe:	2b00      	cmp	r3, #0
  404cc0:	d004      	beq.n	404ccc <afec_ch_set_config+0x44>
  404cc2:	897b      	ldrh	r3, [r7, #10]
  404cc4:	2201      	movs	r2, #1
  404cc6:	fa02 f303 	lsl.w	r3, r2, r3
  404cca:	e000      	b.n	404cce <afec_ch_set_config+0x46>
  404ccc:	2300      	movs	r3, #0
  404cce:	697a      	ldr	r2, [r7, #20]
  404cd0:	4313      	orrs	r3, r2
  404cd2:	617b      	str	r3, [r7, #20]
	afec->AFEC_DIFFR = reg;
  404cd4:	68fb      	ldr	r3, [r7, #12]
  404cd6:	697a      	ldr	r2, [r7, #20]
  404cd8:	661a      	str	r2, [r3, #96]	; 0x60

	reg = afec->AFEC_CGR;
  404cda:	68fb      	ldr	r3, [r7, #12]
  404cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  404cde:	617b      	str	r3, [r7, #20]
	reg &= ~(0x03u << (2 * channel));
  404ce0:	897b      	ldrh	r3, [r7, #10]
  404ce2:	005b      	lsls	r3, r3, #1
  404ce4:	2203      	movs	r2, #3
  404ce6:	fa02 f303 	lsl.w	r3, r2, r3
  404cea:	43db      	mvns	r3, r3
  404cec:	697a      	ldr	r2, [r7, #20]
  404cee:	4013      	ands	r3, r2
  404cf0:	617b      	str	r3, [r7, #20]
	reg |= (config->gain) << (2 * channel);
  404cf2:	687b      	ldr	r3, [r7, #4]
  404cf4:	785b      	ldrb	r3, [r3, #1]
  404cf6:	461a      	mov	r2, r3
  404cf8:	897b      	ldrh	r3, [r7, #10]
  404cfa:	005b      	lsls	r3, r3, #1
  404cfc:	fa02 f303 	lsl.w	r3, r2, r3
  404d00:	461a      	mov	r2, r3
  404d02:	697b      	ldr	r3, [r7, #20]
  404d04:	4313      	orrs	r3, r2
  404d06:	617b      	str	r3, [r7, #20]
	afec->AFEC_CGR = reg;
  404d08:	68fb      	ldr	r3, [r7, #12]
  404d0a:	697a      	ldr	r2, [r7, #20]
  404d0c:	655a      	str	r2, [r3, #84]	; 0x54
}
  404d0e:	bf00      	nop
  404d10:	3718      	adds	r7, #24
  404d12:	46bd      	mov	sp, r7
  404d14:	bd80      	pop	{r7, pc}
  404d16:	bf00      	nop
  404d18:	00404a3d 	.word	0x00404a3d

00404d1c <afec_temp_sensor_set_config>:
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC temperature sensor
 */
void afec_temp_sensor_set_config(Afec *const afec,
		struct afec_temp_sensor_config *config)
{
  404d1c:	b480      	push	{r7}
  404d1e:	b085      	sub	sp, #20
  404d20:	af00      	add	r7, sp, #0
  404d22:	6078      	str	r0, [r7, #4]
  404d24:	6039      	str	r1, [r7, #0]
	Assert(afec == AFEC0);

	uint32_t reg = 0;
  404d26:	2300      	movs	r3, #0
  404d28:	60fb      	str	r3, [r7, #12]

	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  404d2a:	683b      	ldr	r3, [r7, #0]
  404d2c:	781b      	ldrb	r3, [r3, #0]
  404d2e:	2b00      	cmp	r3, #0
  404d30:	d001      	beq.n	404d36 <afec_temp_sensor_set_config+0x1a>
  404d32:	2301      	movs	r3, #1
  404d34:	e000      	b.n	404d38 <afec_temp_sensor_set_config+0x1c>
  404d36:	2300      	movs	r3, #0
  404d38:	683a      	ldr	r2, [r7, #0]
  404d3a:	7852      	ldrb	r2, [r2, #1]
  404d3c:	4313      	orrs	r3, r2
  404d3e:	60fb      	str	r3, [r7, #12]
	afec->AFEC_TEMPMR = reg;
  404d40:	687b      	ldr	r3, [r7, #4]
  404d42:	68fa      	ldr	r2, [r7, #12]
  404d44:	671a      	str	r2, [r3, #112]	; 0x70

	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  404d46:	683b      	ldr	r3, [r7, #0]
  404d48:	885b      	ldrh	r3, [r3, #2]
  404d4a:	461a      	mov	r2, r3
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  404d4c:	683b      	ldr	r3, [r7, #0]
  404d4e:	889b      	ldrh	r3, [r3, #4]
  404d50:	041b      	lsls	r3, r3, #16
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  404d52:	431a      	orrs	r2, r3
  404d54:	687b      	ldr	r3, [r7, #4]
  404d56:	675a      	str	r2, [r3, #116]	; 0x74
			
}
  404d58:	bf00      	nop
  404d5a:	3714      	adds	r7, #20
  404d5c:	46bd      	mov	sp, r7
  404d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d62:	4770      	bx	lr

00404d64 <afec_get_config_defaults>:
 * - AFE Bias Current Control value is 1
 *
 * \param cfg Pointer to configuration structure to be initiated.
 */
void afec_get_config_defaults(struct afec_config *const cfg)
{
  404d64:	b580      	push	{r7, lr}
  404d66:	b082      	sub	sp, #8
  404d68:	af00      	add	r7, sp, #0
  404d6a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  404d6c:	687b      	ldr	r3, [r7, #4]
  404d6e:	2200      	movs	r2, #0
  404d70:	601a      	str	r2, [r3, #0]
	cfg->mck = sysclk_get_cpu_hz();
  404d72:	4b12      	ldr	r3, [pc, #72]	; (404dbc <afec_get_config_defaults+0x58>)
  404d74:	4798      	blx	r3
  404d76:	4602      	mov	r2, r0
  404d78:	687b      	ldr	r3, [r7, #4]
  404d7a:	605a      	str	r2, [r3, #4]
		cfg->afec_clock = 6000000UL;
  404d7c:	687b      	ldr	r3, [r7, #4]
  404d7e:	4a10      	ldr	r2, [pc, #64]	; (404dc0 <afec_get_config_defaults+0x5c>)
  404d80:	609a      	str	r2, [r3, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  404d82:	687b      	ldr	r3, [r7, #4]
  404d84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  404d88:	60da      	str	r2, [r3, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  404d8a:	687b      	ldr	r3, [r7, #4]
  404d8c:	2202      	movs	r2, #2
  404d8e:	741a      	strb	r2, [r3, #16]
		cfg->transfer = 1;
  404d90:	687b      	ldr	r3, [r7, #4]
  404d92:	2201      	movs	r2, #1
  404d94:	745a      	strb	r2, [r3, #17]
		cfg->anach = true;
  404d96:	687b      	ldr	r3, [r7, #4]
  404d98:	2201      	movs	r2, #1
  404d9a:	749a      	strb	r2, [r3, #18]
		cfg->useq = false;
  404d9c:	687b      	ldr	r3, [r7, #4]
  404d9e:	2200      	movs	r2, #0
  404da0:	74da      	strb	r2, [r3, #19]
		cfg->tag = true;
  404da2:	687b      	ldr	r3, [r7, #4]
  404da4:	2201      	movs	r2, #1
  404da6:	751a      	strb	r2, [r3, #20]
		cfg->stm = true;
  404da8:	687b      	ldr	r3, [r7, #4]
  404daa:	2201      	movs	r2, #1
  404dac:	755a      	strb	r2, [r3, #21]
		cfg->ibctl = 1;
  404dae:	687b      	ldr	r3, [r7, #4]
  404db0:	2201      	movs	r2, #1
  404db2:	759a      	strb	r2, [r3, #22]
}
  404db4:	bf00      	nop
  404db6:	3708      	adds	r7, #8
  404db8:	46bd      	mov	sp, r7
  404dba:	bd80      	pop	{r7, pc}
  404dbc:	00404b5d 	.word	0x00404b5d
  404dc0:	005b8d80 	.word	0x005b8d80

00404dc4 <afec_ch_get_config_defaults>:
 * - Gain value is 1
 *
 * \param cfg Pointer to channel configuration structure to be initiated.
 */
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
  404dc4:	b480      	push	{r7}
  404dc6:	b083      	sub	sp, #12
  404dc8:	af00      	add	r7, sp, #0
  404dca:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  404dcc:	687b      	ldr	r3, [r7, #4]
  404dce:	2200      	movs	r2, #0
  404dd0:	701a      	strb	r2, [r3, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  404dd2:	687b      	ldr	r3, [r7, #4]
  404dd4:	2201      	movs	r2, #1
  404dd6:	705a      	strb	r2, [r3, #1]

}
  404dd8:	bf00      	nop
  404dda:	370c      	adds	r7, #12
  404ddc:	46bd      	mov	sp, r7
  404dde:	f85d 7b04 	ldr.w	r7, [sp], #4
  404de2:	4770      	bx	lr

00404de4 <afec_temp_sensor_get_config_defaults>:
 * \param cfg Pointer to temperature sensor configuration structure
 *        to be initiated.
 */
void afec_temp_sensor_get_config_defaults(
		struct afec_temp_sensor_config *const cfg)
{
  404de4:	b480      	push	{r7}
  404de6:	b083      	sub	sp, #12
  404de8:	af00      	add	r7, sp, #0
  404dea:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->rctc = false;
  404dec:	687b      	ldr	r3, [r7, #4]
  404dee:	2200      	movs	r2, #0
  404df0:	701a      	strb	r2, [r3, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  404df2:	687b      	ldr	r3, [r7, #4]
  404df4:	2220      	movs	r2, #32
  404df6:	705a      	strb	r2, [r3, #1]
	cfg->low_threshold= 0xFF;
  404df8:	687b      	ldr	r3, [r7, #4]
  404dfa:	22ff      	movs	r2, #255	; 0xff
  404dfc:	805a      	strh	r2, [r3, #2]
	cfg->high_threshold= 0xFFF;
  404dfe:	687b      	ldr	r3, [r7, #4]
  404e00:	f640 72ff 	movw	r2, #4095	; 0xfff
  404e04:	809a      	strh	r2, [r3, #4]
}
  404e06:	bf00      	nop
  404e08:	370c      	adds	r7, #12
  404e0a:	46bd      	mov	sp, r7
  404e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e10:	4770      	bx	lr
	...

00404e14 <afec_init>:
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  404e14:	b580      	push	{r7, lr}
  404e16:	b084      	sub	sp, #16
  404e18:	af00      	add	r7, sp, #0
  404e1a:	6078      	str	r0, [r7, #4]
  404e1c:	6039      	str	r1, [r7, #0]
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  404e1e:	6878      	ldr	r0, [r7, #4]
  404e20:	4b1d      	ldr	r3, [pc, #116]	; (404e98 <afec_init+0x84>)
  404e22:	4798      	blx	r3
  404e24:	4603      	mov	r3, r0
  404e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  404e2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  404e2e:	d101      	bne.n	404e34 <afec_init+0x20>
		return STATUS_ERR_BUSY;
  404e30:	2319      	movs	r3, #25
  404e32:	e02c      	b.n	404e8e <afec_init+0x7a>
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  404e34:	687b      	ldr	r3, [r7, #4]
  404e36:	2201      	movs	r2, #1
  404e38:	601a      	str	r2, [r3, #0]
	afec_set_config(afec, config);
  404e3a:	6839      	ldr	r1, [r7, #0]
  404e3c:	6878      	ldr	r0, [r7, #4]
  404e3e:	4b17      	ldr	r3, [pc, #92]	; (404e9c <afec_init+0x88>)
  404e40:	4798      	blx	r3

	uint32_t i;
	if(afec == AFEC0) {
  404e42:	687b      	ldr	r3, [r7, #4]
  404e44:	4a16      	ldr	r2, [pc, #88]	; (404ea0 <afec_init+0x8c>)
  404e46:	4293      	cmp	r3, r2
  404e48:	d10d      	bne.n	404e66 <afec_init+0x52>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  404e4a:	2300      	movs	r3, #0
  404e4c:	60fb      	str	r3, [r7, #12]
  404e4e:	e007      	b.n	404e60 <afec_init+0x4c>
			afec_callback_pointer[0][i] = 0;
  404e50:	4a14      	ldr	r2, [pc, #80]	; (404ea4 <afec_init+0x90>)
  404e52:	68fb      	ldr	r3, [r7, #12]
  404e54:	2100      	movs	r1, #0
  404e56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  404e5a:	68fb      	ldr	r3, [r7, #12]
  404e5c:	3301      	adds	r3, #1
  404e5e:	60fb      	str	r3, [r7, #12]
  404e60:	68fb      	ldr	r3, [r7, #12]
  404e62:	2b0f      	cmp	r3, #15
  404e64:	d9f4      	bls.n	404e50 <afec_init+0x3c>
		}
	}
	if(afec == AFEC1) {
  404e66:	687b      	ldr	r3, [r7, #4]
  404e68:	4a0f      	ldr	r2, [pc, #60]	; (404ea8 <afec_init+0x94>)
  404e6a:	4293      	cmp	r3, r2
  404e6c:	d10e      	bne.n	404e8c <afec_init+0x78>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  404e6e:	2300      	movs	r3, #0
  404e70:	60fb      	str	r3, [r7, #12]
  404e72:	e008      	b.n	404e86 <afec_init+0x72>
			afec_callback_pointer[1][i] = 0;
  404e74:	4a0b      	ldr	r2, [pc, #44]	; (404ea4 <afec_init+0x90>)
  404e76:	68fb      	ldr	r3, [r7, #12]
  404e78:	3310      	adds	r3, #16
  404e7a:	2100      	movs	r1, #0
  404e7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  404e80:	68fb      	ldr	r3, [r7, #12]
  404e82:	3301      	adds	r3, #1
  404e84:	60fb      	str	r3, [r7, #12]
  404e86:	68fb      	ldr	r3, [r7, #12]
  404e88:	2b0f      	cmp	r3, #15
  404e8a:	d9f3      	bls.n	404e74 <afec_init+0x60>
		}
	}

	return STATUS_OK;
  404e8c:	2300      	movs	r3, #0
}
  404e8e:	4618      	mov	r0, r3
  404e90:	3710      	adds	r7, #16
  404e92:	46bd      	mov	sp, r7
  404e94:	bd80      	pop	{r7, pc}
  404e96:	bf00      	nop
  404e98:	00404a55 	.word	0x00404a55
  404e9c:	00404be1 	.word	0x00404be1
  404ea0:	4003c000 	.word	0x4003c000
  404ea4:	20422348 	.word	0x20422348
  404ea8:	40064000 	.word	0x40064000

00404eac <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  404eac:	b580      	push	{r7, lr}
  404eae:	b086      	sub	sp, #24
  404eb0:	af00      	add	r7, sp, #0
  404eb2:	60f8      	str	r0, [r7, #12]
  404eb4:	60b9      	str	r1, [r7, #8]
  404eb6:	607a      	str	r2, [r7, #4]
  404eb8:	70fb      	strb	r3, [r7, #3]
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
  404eba:	68f8      	ldr	r0, [r7, #12]
  404ebc:	4b17      	ldr	r3, [pc, #92]	; (404f1c <afec_set_callback+0x70>)
  404ebe:	4798      	blx	r3
  404ec0:	6178      	str	r0, [r7, #20]
	afec_callback_pointer[i][source] = callback;
  404ec2:	4917      	ldr	r1, [pc, #92]	; (404f20 <afec_set_callback+0x74>)
  404ec4:	697b      	ldr	r3, [r7, #20]
  404ec6:	011a      	lsls	r2, r3, #4
  404ec8:	68bb      	ldr	r3, [r7, #8]
  404eca:	4413      	add	r3, r2
  404ecc:	687a      	ldr	r2, [r7, #4]
  404ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!i) {
  404ed2:	697b      	ldr	r3, [r7, #20]
  404ed4:	2b00      	cmp	r3, #0
  404ed6:	d10b      	bne.n	404ef0 <afec_set_callback+0x44>
		irq_register_handler(AFEC0_IRQn, irq_level);
  404ed8:	201d      	movs	r0, #29
  404eda:	4b12      	ldr	r3, [pc, #72]	; (404f24 <afec_set_callback+0x78>)
  404edc:	4798      	blx	r3
  404ede:	78fb      	ldrb	r3, [r7, #3]
  404ee0:	4619      	mov	r1, r3
  404ee2:	201d      	movs	r0, #29
  404ee4:	4b10      	ldr	r3, [pc, #64]	; (404f28 <afec_set_callback+0x7c>)
  404ee6:	4798      	blx	r3
  404ee8:	201d      	movs	r0, #29
  404eea:	4b10      	ldr	r3, [pc, #64]	; (404f2c <afec_set_callback+0x80>)
  404eec:	4798      	blx	r3
  404eee:	e00d      	b.n	404f0c <afec_set_callback+0x60>
	} else if (i == 1) {
  404ef0:	697b      	ldr	r3, [r7, #20]
  404ef2:	2b01      	cmp	r3, #1
  404ef4:	d10a      	bne.n	404f0c <afec_set_callback+0x60>
		irq_register_handler(AFEC1_IRQn, irq_level);
  404ef6:	2028      	movs	r0, #40	; 0x28
  404ef8:	4b0a      	ldr	r3, [pc, #40]	; (404f24 <afec_set_callback+0x78>)
  404efa:	4798      	blx	r3
  404efc:	78fb      	ldrb	r3, [r7, #3]
  404efe:	4619      	mov	r1, r3
  404f00:	2028      	movs	r0, #40	; 0x28
  404f02:	4b09      	ldr	r3, [pc, #36]	; (404f28 <afec_set_callback+0x7c>)
  404f04:	4798      	blx	r3
  404f06:	2028      	movs	r0, #40	; 0x28
  404f08:	4b08      	ldr	r3, [pc, #32]	; (404f2c <afec_set_callback+0x80>)
  404f0a:	4798      	blx	r3
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  404f0c:	68b9      	ldr	r1, [r7, #8]
  404f0e:	68f8      	ldr	r0, [r7, #12]
  404f10:	4b07      	ldr	r3, [pc, #28]	; (404f30 <afec_set_callback+0x84>)
  404f12:	4798      	blx	r3
}
  404f14:	bf00      	nop
  404f16:	3718      	adds	r7, #24
  404f18:	46bd      	mov	sp, r7
  404f1a:	bd80      	pop	{r7, pc}
  404f1c:	00404b71 	.word	0x00404b71
  404f20:	20422348 	.word	0x20422348
  404f24:	0040492d 	.word	0x0040492d
  404f28:	00404961 	.word	0x00404961
  404f2c:	004048f9 	.word	0x004048f9
  404f30:	00404f35 	.word	0x00404f35

00404f34 <afec_enable_interrupt>:
 * \param afec  Base address of the AFEC.
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
  404f34:	b480      	push	{r7}
  404f36:	b083      	sub	sp, #12
  404f38:	af00      	add	r7, sp, #0
  404f3a:	6078      	str	r0, [r7, #4]
  404f3c:	6039      	str	r1, [r7, #0]
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  404f3e:	683b      	ldr	r3, [r7, #0]
  404f40:	4a19      	ldr	r2, [pc, #100]	; (404fa8 <afec_enable_interrupt+0x74>)
  404f42:	4293      	cmp	r3, r2
  404f44:	d103      	bne.n	404f4e <afec_enable_interrupt+0x1a>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  404f46:	687b      	ldr	r3, [r7, #4]
  404f48:	4a17      	ldr	r2, [pc, #92]	; (404fa8 <afec_enable_interrupt+0x74>)
  404f4a:	625a      	str	r2, [r3, #36]	; 0x24
		return;
  404f4c:	e026      	b.n	404f9c <afec_enable_interrupt+0x68>
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  404f4e:	683b      	ldr	r3, [r7, #0]
  404f50:	2b0b      	cmp	r3, #11
  404f52:	d80f      	bhi.n	404f74 <afec_enable_interrupt+0x40>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  404f54:	683b      	ldr	r3, [r7, #0]
  404f56:	2b0b      	cmp	r3, #11
  404f58:	d104      	bne.n	404f64 <afec_enable_interrupt+0x30>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  404f5a:	687b      	ldr	r3, [r7, #4]
  404f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404f60:	625a      	str	r2, [r3, #36]	; 0x24
  404f62:	e01b      	b.n	404f9c <afec_enable_interrupt+0x68>
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  404f64:	2201      	movs	r2, #1
  404f66:	683b      	ldr	r3, [r7, #0]
  404f68:	fa02 f303 	lsl.w	r3, r2, r3
  404f6c:	461a      	mov	r2, r3
  404f6e:	687b      	ldr	r3, [r7, #4]
  404f70:	625a      	str	r2, [r3, #36]	; 0x24
  404f72:	e013      	b.n	404f9c <afec_enable_interrupt+0x68>
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  404f74:	683b      	ldr	r3, [r7, #0]
  404f76:	2b0e      	cmp	r3, #14
  404f78:	d808      	bhi.n	404f8c <afec_enable_interrupt+0x58>
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  404f7a:	683b      	ldr	r3, [r7, #0]
  404f7c:	330c      	adds	r3, #12
  404f7e:	2201      	movs	r2, #1
  404f80:	fa02 f303 	lsl.w	r3, r2, r3
  404f84:	461a      	mov	r2, r3
  404f86:	687b      	ldr	r3, [r7, #4]
  404f88:	625a      	str	r2, [r3, #36]	; 0x24
  404f8a:	e007      	b.n	404f9c <afec_enable_interrupt+0x68>
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
				+ AFEC_INTERRUPT_GAP2);
  404f8c:	683b      	ldr	r3, [r7, #0]
  404f8e:	330f      	adds	r3, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  404f90:	2201      	movs	r2, #1
  404f92:	fa02 f303 	lsl.w	r3, r2, r3
  404f96:	461a      	mov	r2, r3
  404f98:	687b      	ldr	r3, [r7, #4]
  404f9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
  404f9c:	370c      	adds	r7, #12
  404f9e:	46bd      	mov	sp, r7
  404fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fa4:	4770      	bx	lr
  404fa6:	bf00      	nop
  404fa8:	47000fff 	.word	0x47000fff

00404fac <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  404fac:	b580      	push	{r7, lr}
  404fae:	b082      	sub	sp, #8
  404fb0:	af00      	add	r7, sp, #0
  404fb2:	4603      	mov	r3, r0
  404fb4:	6039      	str	r1, [r7, #0]
  404fb6:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  404fb8:	79fb      	ldrb	r3, [r7, #7]
  404fba:	490a      	ldr	r1, [pc, #40]	; (404fe4 <afec_interrupt+0x38>)
  404fbc:	011a      	lsls	r2, r3, #4
  404fbe:	683b      	ldr	r3, [r7, #0]
  404fc0:	4413      	add	r3, r2
  404fc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  404fc6:	2b00      	cmp	r3, #0
  404fc8:	d007      	beq.n	404fda <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  404fca:	79fb      	ldrb	r3, [r7, #7]
  404fcc:	4905      	ldr	r1, [pc, #20]	; (404fe4 <afec_interrupt+0x38>)
  404fce:	011a      	lsls	r2, r3, #4
  404fd0:	683b      	ldr	r3, [r7, #0]
  404fd2:	4413      	add	r3, r2
  404fd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  404fd8:	4798      	blx	r3
	}
}
  404fda:	bf00      	nop
  404fdc:	3708      	adds	r7, #8
  404fde:	46bd      	mov	sp, r7
  404fe0:	bd80      	pop	{r7, pc}
  404fe2:	bf00      	nop
  404fe4:	20422348 	.word	0x20422348

00404fe8 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  404fe8:	b590      	push	{r4, r7, lr}
  404fea:	b087      	sub	sp, #28
  404fec:	af00      	add	r7, sp, #0
  404fee:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  404ff0:	6878      	ldr	r0, [r7, #4]
  404ff2:	4b28      	ldr	r3, [pc, #160]	; (405094 <afec_process_callback+0xac>)
  404ff4:	4798      	blx	r3
  404ff6:	4604      	mov	r4, r0
  404ff8:	6878      	ldr	r0, [r7, #4]
  404ffa:	4b27      	ldr	r3, [pc, #156]	; (405098 <afec_process_callback+0xb0>)
  404ffc:	4798      	blx	r3
  404ffe:	4603      	mov	r3, r0
  405000:	4023      	ands	r3, r4
  405002:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  405004:	6878      	ldr	r0, [r7, #4]
  405006:	4b25      	ldr	r3, [pc, #148]	; (40509c <afec_process_callback+0xb4>)
  405008:	4798      	blx	r3
  40500a:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40500c:	2300      	movs	r3, #0
  40500e:	617b      	str	r3, [r7, #20]
  405010:	e039      	b.n	405086 <afec_process_callback+0x9e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  405012:	697b      	ldr	r3, [r7, #20]
  405014:	2b0b      	cmp	r3, #11
  405016:	d80f      	bhi.n	405038 <afec_process_callback+0x50>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  405018:	2201      	movs	r2, #1
  40501a:	697b      	ldr	r3, [r7, #20]
  40501c:	fa02 f303 	lsl.w	r3, r2, r3
  405020:	461a      	mov	r2, r3
  405022:	68fb      	ldr	r3, [r7, #12]
  405024:	4013      	ands	r3, r2
  405026:	2b00      	cmp	r3, #0
  405028:	d02a      	beq.n	405080 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40502a:	693b      	ldr	r3, [r7, #16]
  40502c:	b2db      	uxtb	r3, r3
  40502e:	6979      	ldr	r1, [r7, #20]
  405030:	4618      	mov	r0, r3
  405032:	4b1b      	ldr	r3, [pc, #108]	; (4050a0 <afec_process_callback+0xb8>)
  405034:	4798      	blx	r3
  405036:	e023      	b.n	405080 <afec_process_callback+0x98>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  405038:	697b      	ldr	r3, [r7, #20]
  40503a:	2b0e      	cmp	r3, #14
  40503c:	d810      	bhi.n	405060 <afec_process_callback+0x78>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40503e:	697b      	ldr	r3, [r7, #20]
  405040:	330c      	adds	r3, #12
  405042:	2201      	movs	r2, #1
  405044:	fa02 f303 	lsl.w	r3, r2, r3
  405048:	461a      	mov	r2, r3
  40504a:	68fb      	ldr	r3, [r7, #12]
  40504c:	4013      	ands	r3, r2
  40504e:	2b00      	cmp	r3, #0
  405050:	d016      	beq.n	405080 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  405052:	693b      	ldr	r3, [r7, #16]
  405054:	b2db      	uxtb	r3, r3
  405056:	6979      	ldr	r1, [r7, #20]
  405058:	4618      	mov	r0, r3
  40505a:	4b11      	ldr	r3, [pc, #68]	; (4050a0 <afec_process_callback+0xb8>)
  40505c:	4798      	blx	r3
  40505e:	e00f      	b.n	405080 <afec_process_callback+0x98>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  405060:	697b      	ldr	r3, [r7, #20]
  405062:	330f      	adds	r3, #15
  405064:	2201      	movs	r2, #1
  405066:	fa02 f303 	lsl.w	r3, r2, r3
  40506a:	461a      	mov	r2, r3
  40506c:	68fb      	ldr	r3, [r7, #12]
  40506e:	4013      	ands	r3, r2
  405070:	2b00      	cmp	r3, #0
  405072:	d005      	beq.n	405080 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  405074:	693b      	ldr	r3, [r7, #16]
  405076:	b2db      	uxtb	r3, r3
  405078:	6979      	ldr	r1, [r7, #20]
  40507a:	4618      	mov	r0, r3
  40507c:	4b08      	ldr	r3, [pc, #32]	; (4050a0 <afec_process_callback+0xb8>)
  40507e:	4798      	blx	r3
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  405080:	697b      	ldr	r3, [r7, #20]
  405082:	3301      	adds	r3, #1
  405084:	617b      	str	r3, [r7, #20]
  405086:	697b      	ldr	r3, [r7, #20]
  405088:	2b0f      	cmp	r3, #15
  40508a:	d9c2      	bls.n	405012 <afec_process_callback+0x2a>
			}
		}
	}
}
  40508c:	bf00      	nop
  40508e:	371c      	adds	r7, #28
  405090:	46bd      	mov	sp, r7
  405092:	bd90      	pop	{r4, r7, pc}
  405094:	00404a55 	.word	0x00404a55
  405098:	00404a6d 	.word	0x00404a6d
  40509c:	00404b71 	.word	0x00404b71
  4050a0:	00404fad 	.word	0x00404fad

004050a4 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4050a4:	b580      	push	{r7, lr}
  4050a6:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  4050a8:	4802      	ldr	r0, [pc, #8]	; (4050b4 <AFEC0_Handler+0x10>)
  4050aa:	4b03      	ldr	r3, [pc, #12]	; (4050b8 <AFEC0_Handler+0x14>)
  4050ac:	4798      	blx	r3
}
  4050ae:	bf00      	nop
  4050b0:	bd80      	pop	{r7, pc}
  4050b2:	bf00      	nop
  4050b4:	4003c000 	.word	0x4003c000
  4050b8:	00404fe9 	.word	0x00404fe9

004050bc <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4050bc:	b580      	push	{r7, lr}
  4050be:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  4050c0:	4802      	ldr	r0, [pc, #8]	; (4050cc <AFEC1_Handler+0x10>)
  4050c2:	4b03      	ldr	r3, [pc, #12]	; (4050d0 <AFEC1_Handler+0x14>)
  4050c4:	4798      	blx	r3
}
  4050c6:	bf00      	nop
  4050c8:	bd80      	pop	{r7, pc}
  4050ca:	bf00      	nop
  4050cc:	40064000 	.word	0x40064000
  4050d0:	00404fe9 	.word	0x00404fe9

004050d4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4050d4:	b580      	push	{r7, lr}
  4050d6:	b084      	sub	sp, #16
  4050d8:	af00      	add	r7, sp, #0
  4050da:	6078      	str	r0, [r7, #4]
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  4050dc:	6878      	ldr	r0, [r7, #4]
  4050de:	4b06      	ldr	r3, [pc, #24]	; (4050f8 <afec_enable+0x24>)
  4050e0:	4798      	blx	r3
  4050e2:	60f8      	str	r0, [r7, #12]
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4050e4:	68f8      	ldr	r0, [r7, #12]
  4050e6:	4b05      	ldr	r3, [pc, #20]	; (4050fc <afec_enable+0x28>)
  4050e8:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
  4050ea:	2002      	movs	r0, #2
  4050ec:	4b04      	ldr	r3, [pc, #16]	; (405100 <afec_enable+0x2c>)
  4050ee:	4798      	blx	r3
}
  4050f0:	bf00      	nop
  4050f2:	3710      	adds	r7, #16
  4050f4:	46bd      	mov	sp, r7
  4050f6:	bd80      	pop	{r7, pc}
  4050f8:	00404ba9 	.word	0x00404ba9
  4050fc:	0040598d 	.word	0x0040598d
  405100:	00404a85 	.word	0x00404a85

00405104 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  405104:	b480      	push	{r7}
  405106:	b085      	sub	sp, #20
  405108:	af00      	add	r7, sp, #0
  40510a:	60f8      	str	r0, [r7, #12]
  40510c:	60b9      	str	r1, [r7, #8]
  40510e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  405110:	687b      	ldr	r3, [r7, #4]
  405112:	2b00      	cmp	r3, #0
  405114:	d003      	beq.n	40511e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  405116:	68fb      	ldr	r3, [r7, #12]
  405118:	68ba      	ldr	r2, [r7, #8]
  40511a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  40511c:	e002      	b.n	405124 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  40511e:	68fb      	ldr	r3, [r7, #12]
  405120:	68ba      	ldr	r2, [r7, #8]
  405122:	661a      	str	r2, [r3, #96]	; 0x60
}
  405124:	bf00      	nop
  405126:	3714      	adds	r7, #20
  405128:	46bd      	mov	sp, r7
  40512a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40512e:	4770      	bx	lr

00405130 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  405130:	b480      	push	{r7}
  405132:	b083      	sub	sp, #12
  405134:	af00      	add	r7, sp, #0
  405136:	6078      	str	r0, [r7, #4]
  405138:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  40513a:	687b      	ldr	r3, [r7, #4]
  40513c:	683a      	ldr	r2, [r7, #0]
  40513e:	631a      	str	r2, [r3, #48]	; 0x30
}
  405140:	bf00      	nop
  405142:	370c      	adds	r7, #12
  405144:	46bd      	mov	sp, r7
  405146:	f85d 7b04 	ldr.w	r7, [sp], #4
  40514a:	4770      	bx	lr

0040514c <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  40514c:	b480      	push	{r7}
  40514e:	b083      	sub	sp, #12
  405150:	af00      	add	r7, sp, #0
  405152:	6078      	str	r0, [r7, #4]
  405154:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  405156:	687b      	ldr	r3, [r7, #4]
  405158:	683a      	ldr	r2, [r7, #0]
  40515a:	635a      	str	r2, [r3, #52]	; 0x34
}
  40515c:	bf00      	nop
  40515e:	370c      	adds	r7, #12
  405160:	46bd      	mov	sp, r7
  405162:	f85d 7b04 	ldr.w	r7, [sp], #4
  405166:	4770      	bx	lr

00405168 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  405168:	b480      	push	{r7}
  40516a:	b087      	sub	sp, #28
  40516c:	af00      	add	r7, sp, #0
  40516e:	60f8      	str	r0, [r7, #12]
  405170:	60b9      	str	r1, [r7, #8]
  405172:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  405174:	68fb      	ldr	r3, [r7, #12]
  405176:	687a      	ldr	r2, [r7, #4]
  405178:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40517a:	68bb      	ldr	r3, [r7, #8]
  40517c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405180:	d04a      	beq.n	405218 <pio_set_peripheral+0xb0>
  405182:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405186:	d808      	bhi.n	40519a <pio_set_peripheral+0x32>
  405188:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40518c:	d016      	beq.n	4051bc <pio_set_peripheral+0x54>
  40518e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  405192:	d02c      	beq.n	4051ee <pio_set_peripheral+0x86>
  405194:	2b00      	cmp	r3, #0
  405196:	d069      	beq.n	40526c <pio_set_peripheral+0x104>
  405198:	e064      	b.n	405264 <pio_set_peripheral+0xfc>
  40519a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40519e:	d065      	beq.n	40526c <pio_set_peripheral+0x104>
  4051a0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4051a4:	d803      	bhi.n	4051ae <pio_set_peripheral+0x46>
  4051a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4051aa:	d04a      	beq.n	405242 <pio_set_peripheral+0xda>
  4051ac:	e05a      	b.n	405264 <pio_set_peripheral+0xfc>
  4051ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4051b2:	d05b      	beq.n	40526c <pio_set_peripheral+0x104>
  4051b4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4051b8:	d058      	beq.n	40526c <pio_set_peripheral+0x104>
  4051ba:	e053      	b.n	405264 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4051bc:	68fb      	ldr	r3, [r7, #12]
  4051be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4051c0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4051c2:	68fb      	ldr	r3, [r7, #12]
  4051c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4051c6:	687b      	ldr	r3, [r7, #4]
  4051c8:	43d9      	mvns	r1, r3
  4051ca:	697b      	ldr	r3, [r7, #20]
  4051cc:	400b      	ands	r3, r1
  4051ce:	401a      	ands	r2, r3
  4051d0:	68fb      	ldr	r3, [r7, #12]
  4051d2:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4051d4:	68fb      	ldr	r3, [r7, #12]
  4051d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4051d8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4051da:	68fb      	ldr	r3, [r7, #12]
  4051dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4051de:	687b      	ldr	r3, [r7, #4]
  4051e0:	43d9      	mvns	r1, r3
  4051e2:	697b      	ldr	r3, [r7, #20]
  4051e4:	400b      	ands	r3, r1
  4051e6:	401a      	ands	r2, r3
  4051e8:	68fb      	ldr	r3, [r7, #12]
  4051ea:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4051ec:	e03a      	b.n	405264 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4051ee:	68fb      	ldr	r3, [r7, #12]
  4051f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4051f2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4051f4:	687a      	ldr	r2, [r7, #4]
  4051f6:	697b      	ldr	r3, [r7, #20]
  4051f8:	431a      	orrs	r2, r3
  4051fa:	68fb      	ldr	r3, [r7, #12]
  4051fc:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4051fe:	68fb      	ldr	r3, [r7, #12]
  405200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405202:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  405204:	68fb      	ldr	r3, [r7, #12]
  405206:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  405208:	687b      	ldr	r3, [r7, #4]
  40520a:	43d9      	mvns	r1, r3
  40520c:	697b      	ldr	r3, [r7, #20]
  40520e:	400b      	ands	r3, r1
  405210:	401a      	ands	r2, r3
  405212:	68fb      	ldr	r3, [r7, #12]
  405214:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405216:	e025      	b.n	405264 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405218:	68fb      	ldr	r3, [r7, #12]
  40521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40521c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40521e:	68fb      	ldr	r3, [r7, #12]
  405220:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  405222:	687b      	ldr	r3, [r7, #4]
  405224:	43d9      	mvns	r1, r3
  405226:	697b      	ldr	r3, [r7, #20]
  405228:	400b      	ands	r3, r1
  40522a:	401a      	ands	r2, r3
  40522c:	68fb      	ldr	r3, [r7, #12]
  40522e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405230:	68fb      	ldr	r3, [r7, #12]
  405232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405234:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  405236:	687a      	ldr	r2, [r7, #4]
  405238:	697b      	ldr	r3, [r7, #20]
  40523a:	431a      	orrs	r2, r3
  40523c:	68fb      	ldr	r3, [r7, #12]
  40523e:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405240:	e010      	b.n	405264 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  405242:	68fb      	ldr	r3, [r7, #12]
  405244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  405246:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  405248:	687a      	ldr	r2, [r7, #4]
  40524a:	697b      	ldr	r3, [r7, #20]
  40524c:	431a      	orrs	r2, r3
  40524e:	68fb      	ldr	r3, [r7, #12]
  405250:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  405252:	68fb      	ldr	r3, [r7, #12]
  405254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  405256:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  405258:	687a      	ldr	r2, [r7, #4]
  40525a:	697b      	ldr	r3, [r7, #20]
  40525c:	431a      	orrs	r2, r3
  40525e:	68fb      	ldr	r3, [r7, #12]
  405260:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  405262:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  405264:	68fb      	ldr	r3, [r7, #12]
  405266:	687a      	ldr	r2, [r7, #4]
  405268:	605a      	str	r2, [r3, #4]
  40526a:	e000      	b.n	40526e <pio_set_peripheral+0x106>
		return;
  40526c:	bf00      	nop
}
  40526e:	371c      	adds	r7, #28
  405270:	46bd      	mov	sp, r7
  405272:	f85d 7b04 	ldr.w	r7, [sp], #4
  405276:	4770      	bx	lr

00405278 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  405278:	b580      	push	{r7, lr}
  40527a:	b084      	sub	sp, #16
  40527c:	af00      	add	r7, sp, #0
  40527e:	60f8      	str	r0, [r7, #12]
  405280:	60b9      	str	r1, [r7, #8]
  405282:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  405284:	68b9      	ldr	r1, [r7, #8]
  405286:	68f8      	ldr	r0, [r7, #12]
  405288:	4b19      	ldr	r3, [pc, #100]	; (4052f0 <pio_set_input+0x78>)
  40528a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  40528c:	687b      	ldr	r3, [r7, #4]
  40528e:	f003 0301 	and.w	r3, r3, #1
  405292:	461a      	mov	r2, r3
  405294:	68b9      	ldr	r1, [r7, #8]
  405296:	68f8      	ldr	r0, [r7, #12]
  405298:	4b16      	ldr	r3, [pc, #88]	; (4052f4 <pio_set_input+0x7c>)
  40529a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40529c:	687b      	ldr	r3, [r7, #4]
  40529e:	f003 030a 	and.w	r3, r3, #10
  4052a2:	2b00      	cmp	r3, #0
  4052a4:	d003      	beq.n	4052ae <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  4052a6:	68fb      	ldr	r3, [r7, #12]
  4052a8:	68ba      	ldr	r2, [r7, #8]
  4052aa:	621a      	str	r2, [r3, #32]
  4052ac:	e002      	b.n	4052b4 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4052ae:	68fb      	ldr	r3, [r7, #12]
  4052b0:	68ba      	ldr	r2, [r7, #8]
  4052b2:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4052b4:	687b      	ldr	r3, [r7, #4]
  4052b6:	f003 0302 	and.w	r3, r3, #2
  4052ba:	2b00      	cmp	r3, #0
  4052bc:	d004      	beq.n	4052c8 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  4052be:	68fb      	ldr	r3, [r7, #12]
  4052c0:	68ba      	ldr	r2, [r7, #8]
  4052c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  4052c6:	e008      	b.n	4052da <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4052c8:	687b      	ldr	r3, [r7, #4]
  4052ca:	f003 0308 	and.w	r3, r3, #8
  4052ce:	2b00      	cmp	r3, #0
  4052d0:	d003      	beq.n	4052da <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  4052d2:	68fb      	ldr	r3, [r7, #12]
  4052d4:	68ba      	ldr	r2, [r7, #8]
  4052d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4052da:	68fb      	ldr	r3, [r7, #12]
  4052dc:	68ba      	ldr	r2, [r7, #8]
  4052de:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  4052e0:	68fb      	ldr	r3, [r7, #12]
  4052e2:	68ba      	ldr	r2, [r7, #8]
  4052e4:	601a      	str	r2, [r3, #0]
}
  4052e6:	bf00      	nop
  4052e8:	3710      	adds	r7, #16
  4052ea:	46bd      	mov	sp, r7
  4052ec:	bd80      	pop	{r7, pc}
  4052ee:	bf00      	nop
  4052f0:	004054b1 	.word	0x004054b1
  4052f4:	00405105 	.word	0x00405105

004052f8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4052f8:	b580      	push	{r7, lr}
  4052fa:	b084      	sub	sp, #16
  4052fc:	af00      	add	r7, sp, #0
  4052fe:	60f8      	str	r0, [r7, #12]
  405300:	60b9      	str	r1, [r7, #8]
  405302:	607a      	str	r2, [r7, #4]
  405304:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  405306:	68b9      	ldr	r1, [r7, #8]
  405308:	68f8      	ldr	r0, [r7, #12]
  40530a:	4b12      	ldr	r3, [pc, #72]	; (405354 <pio_set_output+0x5c>)
  40530c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40530e:	69ba      	ldr	r2, [r7, #24]
  405310:	68b9      	ldr	r1, [r7, #8]
  405312:	68f8      	ldr	r0, [r7, #12]
  405314:	4b10      	ldr	r3, [pc, #64]	; (405358 <pio_set_output+0x60>)
  405316:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  405318:	683b      	ldr	r3, [r7, #0]
  40531a:	2b00      	cmp	r3, #0
  40531c:	d003      	beq.n	405326 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40531e:	68fb      	ldr	r3, [r7, #12]
  405320:	68ba      	ldr	r2, [r7, #8]
  405322:	651a      	str	r2, [r3, #80]	; 0x50
  405324:	e002      	b.n	40532c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  405326:	68fb      	ldr	r3, [r7, #12]
  405328:	68ba      	ldr	r2, [r7, #8]
  40532a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40532c:	687b      	ldr	r3, [r7, #4]
  40532e:	2b00      	cmp	r3, #0
  405330:	d003      	beq.n	40533a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  405332:	68fb      	ldr	r3, [r7, #12]
  405334:	68ba      	ldr	r2, [r7, #8]
  405336:	631a      	str	r2, [r3, #48]	; 0x30
  405338:	e002      	b.n	405340 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40533a:	68fb      	ldr	r3, [r7, #12]
  40533c:	68ba      	ldr	r2, [r7, #8]
  40533e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  405340:	68fb      	ldr	r3, [r7, #12]
  405342:	68ba      	ldr	r2, [r7, #8]
  405344:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  405346:	68fb      	ldr	r3, [r7, #12]
  405348:	68ba      	ldr	r2, [r7, #8]
  40534a:	601a      	str	r2, [r3, #0]
}
  40534c:	bf00      	nop
  40534e:	3710      	adds	r7, #16
  405350:	46bd      	mov	sp, r7
  405352:	bd80      	pop	{r7, pc}
  405354:	004054b1 	.word	0x004054b1
  405358:	00405105 	.word	0x00405105

0040535c <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  40535c:	b590      	push	{r4, r7, lr}
  40535e:	b087      	sub	sp, #28
  405360:	af02      	add	r7, sp, #8
  405362:	60f8      	str	r0, [r7, #12]
  405364:	60b9      	str	r1, [r7, #8]
  405366:	607a      	str	r2, [r7, #4]
  405368:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  40536a:	68bb      	ldr	r3, [r7, #8]
  40536c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  405370:	d016      	beq.n	4053a0 <pio_configure+0x44>
  405372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  405376:	d809      	bhi.n	40538c <pio_configure+0x30>
  405378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40537c:	d010      	beq.n	4053a0 <pio_configure+0x44>
  40537e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  405382:	d00d      	beq.n	4053a0 <pio_configure+0x44>
  405384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  405388:	d00a      	beq.n	4053a0 <pio_configure+0x44>
  40538a:	e03d      	b.n	405408 <pio_configure+0xac>
  40538c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  405390:	d01a      	beq.n	4053c8 <pio_configure+0x6c>
  405392:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  405396:	d017      	beq.n	4053c8 <pio_configure+0x6c>
  405398:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40539c:	d00e      	beq.n	4053bc <pio_configure+0x60>
  40539e:	e033      	b.n	405408 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4053a0:	687a      	ldr	r2, [r7, #4]
  4053a2:	68b9      	ldr	r1, [r7, #8]
  4053a4:	68f8      	ldr	r0, [r7, #12]
  4053a6:	4b1c      	ldr	r3, [pc, #112]	; (405418 <pio_configure+0xbc>)
  4053a8:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  4053aa:	683b      	ldr	r3, [r7, #0]
  4053ac:	f003 0301 	and.w	r3, r3, #1
  4053b0:	461a      	mov	r2, r3
  4053b2:	6879      	ldr	r1, [r7, #4]
  4053b4:	68f8      	ldr	r0, [r7, #12]
  4053b6:	4b19      	ldr	r3, [pc, #100]	; (40541c <pio_configure+0xc0>)
  4053b8:	4798      	blx	r3
		break;
  4053ba:	e027      	b.n	40540c <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4053bc:	683a      	ldr	r2, [r7, #0]
  4053be:	6879      	ldr	r1, [r7, #4]
  4053c0:	68f8      	ldr	r0, [r7, #12]
  4053c2:	4b17      	ldr	r3, [pc, #92]	; (405420 <pio_configure+0xc4>)
  4053c4:	4798      	blx	r3
		break;
  4053c6:	e021      	b.n	40540c <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4053c8:	68bb      	ldr	r3, [r7, #8]
  4053ca:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4053ce:	bf0c      	ite	eq
  4053d0:	2301      	moveq	r3, #1
  4053d2:	2300      	movne	r3, #0
  4053d4:	b2db      	uxtb	r3, r3
  4053d6:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  4053d8:	683b      	ldr	r3, [r7, #0]
  4053da:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4053de:	2b00      	cmp	r3, #0
  4053e0:	bf14      	ite	ne
  4053e2:	2301      	movne	r3, #1
  4053e4:	2300      	moveq	r3, #0
  4053e6:	b2db      	uxtb	r3, r3
  4053e8:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  4053ea:	683b      	ldr	r3, [r7, #0]
  4053ec:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4053f0:	2b00      	cmp	r3, #0
  4053f2:	bf14      	ite	ne
  4053f4:	2301      	movne	r3, #1
  4053f6:	2300      	moveq	r3, #0
  4053f8:	b2db      	uxtb	r3, r3
  4053fa:	9300      	str	r3, [sp, #0]
  4053fc:	460b      	mov	r3, r1
  4053fe:	6879      	ldr	r1, [r7, #4]
  405400:	68f8      	ldr	r0, [r7, #12]
  405402:	4c08      	ldr	r4, [pc, #32]	; (405424 <pio_configure+0xc8>)
  405404:	47a0      	blx	r4
		break;
  405406:	e001      	b.n	40540c <pio_configure+0xb0>

	default:
		return 0;
  405408:	2300      	movs	r3, #0
  40540a:	e000      	b.n	40540e <pio_configure+0xb2>
	}

	return 1;
  40540c:	2301      	movs	r3, #1
}
  40540e:	4618      	mov	r0, r3
  405410:	3714      	adds	r7, #20
  405412:	46bd      	mov	sp, r7
  405414:	bd90      	pop	{r4, r7, pc}
  405416:	bf00      	nop
  405418:	00405169 	.word	0x00405169
  40541c:	00405105 	.word	0x00405105
  405420:	00405279 	.word	0x00405279
  405424:	004052f9 	.word	0x004052f9

00405428 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  405428:	b480      	push	{r7}
  40542a:	b085      	sub	sp, #20
  40542c:	af00      	add	r7, sp, #0
  40542e:	60f8      	str	r0, [r7, #12]
  405430:	60b9      	str	r1, [r7, #8]
  405432:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  405434:	687b      	ldr	r3, [r7, #4]
  405436:	f003 0310 	and.w	r3, r3, #16
  40543a:	2b00      	cmp	r3, #0
  40543c:	d020      	beq.n	405480 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40543e:	68fb      	ldr	r3, [r7, #12]
  405440:	68ba      	ldr	r2, [r7, #8]
  405442:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  405446:	687b      	ldr	r3, [r7, #4]
  405448:	f003 0320 	and.w	r3, r3, #32
  40544c:	2b00      	cmp	r3, #0
  40544e:	d004      	beq.n	40545a <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  405450:	68fb      	ldr	r3, [r7, #12]
  405452:	68ba      	ldr	r2, [r7, #8]
  405454:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  405458:	e003      	b.n	405462 <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40545a:	68fb      	ldr	r3, [r7, #12]
  40545c:	68ba      	ldr	r2, [r7, #8]
  40545e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  405462:	687b      	ldr	r3, [r7, #4]
  405464:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405468:	2b00      	cmp	r3, #0
  40546a:	d004      	beq.n	405476 <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  40546c:	68fb      	ldr	r3, [r7, #12]
  40546e:	68ba      	ldr	r2, [r7, #8]
  405470:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  405474:	e008      	b.n	405488 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  405476:	68fb      	ldr	r3, [r7, #12]
  405478:	68ba      	ldr	r2, [r7, #8]
  40547a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  40547e:	e003      	b.n	405488 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  405480:	68fb      	ldr	r3, [r7, #12]
  405482:	68ba      	ldr	r2, [r7, #8]
  405484:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  405488:	bf00      	nop
  40548a:	3714      	adds	r7, #20
  40548c:	46bd      	mov	sp, r7
  40548e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405492:	4770      	bx	lr

00405494 <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  405494:	b480      	push	{r7}
  405496:	b083      	sub	sp, #12
  405498:	af00      	add	r7, sp, #0
  40549a:	6078      	str	r0, [r7, #4]
  40549c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  40549e:	687b      	ldr	r3, [r7, #4]
  4054a0:	683a      	ldr	r2, [r7, #0]
  4054a2:	641a      	str	r2, [r3, #64]	; 0x40
}
  4054a4:	bf00      	nop
  4054a6:	370c      	adds	r7, #12
  4054a8:	46bd      	mov	sp, r7
  4054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054ae:	4770      	bx	lr

004054b0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4054b0:	b480      	push	{r7}
  4054b2:	b083      	sub	sp, #12
  4054b4:	af00      	add	r7, sp, #0
  4054b6:	6078      	str	r0, [r7, #4]
  4054b8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4054ba:	687b      	ldr	r3, [r7, #4]
  4054bc:	683a      	ldr	r2, [r7, #0]
  4054be:	645a      	str	r2, [r3, #68]	; 0x44
}
  4054c0:	bf00      	nop
  4054c2:	370c      	adds	r7, #12
  4054c4:	46bd      	mov	sp, r7
  4054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054ca:	4770      	bx	lr

004054cc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4054cc:	b480      	push	{r7}
  4054ce:	b083      	sub	sp, #12
  4054d0:	af00      	add	r7, sp, #0
  4054d2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4054d4:	687b      	ldr	r3, [r7, #4]
  4054d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4054d8:	4618      	mov	r0, r3
  4054da:	370c      	adds	r7, #12
  4054dc:	46bd      	mov	sp, r7
  4054de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054e2:	4770      	bx	lr

004054e4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4054e4:	b480      	push	{r7}
  4054e6:	b083      	sub	sp, #12
  4054e8:	af00      	add	r7, sp, #0
  4054ea:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4054ec:	687b      	ldr	r3, [r7, #4]
  4054ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4054f0:	4618      	mov	r0, r3
  4054f2:	370c      	adds	r7, #12
  4054f4:	46bd      	mov	sp, r7
  4054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054fa:	4770      	bx	lr

004054fc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4054fc:	b580      	push	{r7, lr}
  4054fe:	b084      	sub	sp, #16
  405500:	af00      	add	r7, sp, #0
  405502:	6078      	str	r0, [r7, #4]
  405504:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  405506:	6878      	ldr	r0, [r7, #4]
  405508:	4b26      	ldr	r3, [pc, #152]	; (4055a4 <pio_handler_process+0xa8>)
  40550a:	4798      	blx	r3
  40550c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  40550e:	6878      	ldr	r0, [r7, #4]
  405510:	4b25      	ldr	r3, [pc, #148]	; (4055a8 <pio_handler_process+0xac>)
  405512:	4798      	blx	r3
  405514:	4602      	mov	r2, r0
  405516:	68fb      	ldr	r3, [r7, #12]
  405518:	4013      	ands	r3, r2
  40551a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  40551c:	68fb      	ldr	r3, [r7, #12]
  40551e:	2b00      	cmp	r3, #0
  405520:	d03c      	beq.n	40559c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  405522:	2300      	movs	r3, #0
  405524:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  405526:	e034      	b.n	405592 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  405528:	4a20      	ldr	r2, [pc, #128]	; (4055ac <pio_handler_process+0xb0>)
  40552a:	68bb      	ldr	r3, [r7, #8]
  40552c:	011b      	lsls	r3, r3, #4
  40552e:	4413      	add	r3, r2
  405530:	681a      	ldr	r2, [r3, #0]
  405532:	683b      	ldr	r3, [r7, #0]
  405534:	429a      	cmp	r2, r3
  405536:	d126      	bne.n	405586 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  405538:	4a1c      	ldr	r2, [pc, #112]	; (4055ac <pio_handler_process+0xb0>)
  40553a:	68bb      	ldr	r3, [r7, #8]
  40553c:	011b      	lsls	r3, r3, #4
  40553e:	4413      	add	r3, r2
  405540:	3304      	adds	r3, #4
  405542:	681a      	ldr	r2, [r3, #0]
  405544:	68fb      	ldr	r3, [r7, #12]
  405546:	4013      	ands	r3, r2
  405548:	2b00      	cmp	r3, #0
  40554a:	d01c      	beq.n	405586 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40554c:	4a17      	ldr	r2, [pc, #92]	; (4055ac <pio_handler_process+0xb0>)
  40554e:	68bb      	ldr	r3, [r7, #8]
  405550:	011b      	lsls	r3, r3, #4
  405552:	4413      	add	r3, r2
  405554:	330c      	adds	r3, #12
  405556:	681b      	ldr	r3, [r3, #0]
  405558:	4914      	ldr	r1, [pc, #80]	; (4055ac <pio_handler_process+0xb0>)
  40555a:	68ba      	ldr	r2, [r7, #8]
  40555c:	0112      	lsls	r2, r2, #4
  40555e:	440a      	add	r2, r1
  405560:	6810      	ldr	r0, [r2, #0]
  405562:	4912      	ldr	r1, [pc, #72]	; (4055ac <pio_handler_process+0xb0>)
  405564:	68ba      	ldr	r2, [r7, #8]
  405566:	0112      	lsls	r2, r2, #4
  405568:	440a      	add	r2, r1
  40556a:	3204      	adds	r2, #4
  40556c:	6812      	ldr	r2, [r2, #0]
  40556e:	4611      	mov	r1, r2
  405570:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  405572:	4a0e      	ldr	r2, [pc, #56]	; (4055ac <pio_handler_process+0xb0>)
  405574:	68bb      	ldr	r3, [r7, #8]
  405576:	011b      	lsls	r3, r3, #4
  405578:	4413      	add	r3, r2
  40557a:	3304      	adds	r3, #4
  40557c:	681b      	ldr	r3, [r3, #0]
  40557e:	43db      	mvns	r3, r3
  405580:	68fa      	ldr	r2, [r7, #12]
  405582:	4013      	ands	r3, r2
  405584:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  405586:	68bb      	ldr	r3, [r7, #8]
  405588:	3301      	adds	r3, #1
  40558a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  40558c:	68bb      	ldr	r3, [r7, #8]
  40558e:	2b06      	cmp	r3, #6
  405590:	d803      	bhi.n	40559a <pio_handler_process+0x9e>
		while (status != 0) {
  405592:	68fb      	ldr	r3, [r7, #12]
  405594:	2b00      	cmp	r3, #0
  405596:	d1c7      	bne.n	405528 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  405598:	e000      	b.n	40559c <pio_handler_process+0xa0>
				break;
  40559a:	bf00      	nop
}
  40559c:	bf00      	nop
  40559e:	3710      	adds	r7, #16
  4055a0:	46bd      	mov	sp, r7
  4055a2:	bd80      	pop	{r7, pc}
  4055a4:	004054cd 	.word	0x004054cd
  4055a8:	004054e5 	.word	0x004054e5
  4055ac:	2040caa0 	.word	0x2040caa0

004055b0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4055b0:	b580      	push	{r7, lr}
  4055b2:	b086      	sub	sp, #24
  4055b4:	af00      	add	r7, sp, #0
  4055b6:	60f8      	str	r0, [r7, #12]
  4055b8:	60b9      	str	r1, [r7, #8]
  4055ba:	607a      	str	r2, [r7, #4]
  4055bc:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4055be:	4b21      	ldr	r3, [pc, #132]	; (405644 <pio_handler_set+0x94>)
  4055c0:	681b      	ldr	r3, [r3, #0]
  4055c2:	2b06      	cmp	r3, #6
  4055c4:	d901      	bls.n	4055ca <pio_handler_set+0x1a>
		return 1;
  4055c6:	2301      	movs	r3, #1
  4055c8:	e038      	b.n	40563c <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4055ca:	2300      	movs	r3, #0
  4055cc:	75fb      	strb	r3, [r7, #23]
  4055ce:	e011      	b.n	4055f4 <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  4055d0:	7dfb      	ldrb	r3, [r7, #23]
  4055d2:	011b      	lsls	r3, r3, #4
  4055d4:	4a1c      	ldr	r2, [pc, #112]	; (405648 <pio_handler_set+0x98>)
  4055d6:	4413      	add	r3, r2
  4055d8:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4055da:	693b      	ldr	r3, [r7, #16]
  4055dc:	681a      	ldr	r2, [r3, #0]
  4055de:	68bb      	ldr	r3, [r7, #8]
  4055e0:	429a      	cmp	r2, r3
  4055e2:	d104      	bne.n	4055ee <pio_handler_set+0x3e>
  4055e4:	693b      	ldr	r3, [r7, #16]
  4055e6:	685a      	ldr	r2, [r3, #4]
  4055e8:	687b      	ldr	r3, [r7, #4]
  4055ea:	429a      	cmp	r2, r3
  4055ec:	d008      	beq.n	405600 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4055ee:	7dfb      	ldrb	r3, [r7, #23]
  4055f0:	3301      	adds	r3, #1
  4055f2:	75fb      	strb	r3, [r7, #23]
  4055f4:	7dfa      	ldrb	r2, [r7, #23]
  4055f6:	4b13      	ldr	r3, [pc, #76]	; (405644 <pio_handler_set+0x94>)
  4055f8:	681b      	ldr	r3, [r3, #0]
  4055fa:	429a      	cmp	r2, r3
  4055fc:	d9e8      	bls.n	4055d0 <pio_handler_set+0x20>
  4055fe:	e000      	b.n	405602 <pio_handler_set+0x52>
			break;
  405600:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  405602:	693b      	ldr	r3, [r7, #16]
  405604:	68ba      	ldr	r2, [r7, #8]
  405606:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  405608:	693b      	ldr	r3, [r7, #16]
  40560a:	687a      	ldr	r2, [r7, #4]
  40560c:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  40560e:	693b      	ldr	r3, [r7, #16]
  405610:	683a      	ldr	r2, [r7, #0]
  405612:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  405614:	693b      	ldr	r3, [r7, #16]
  405616:	6a3a      	ldr	r2, [r7, #32]
  405618:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  40561a:	7dfa      	ldrb	r2, [r7, #23]
  40561c:	4b09      	ldr	r3, [pc, #36]	; (405644 <pio_handler_set+0x94>)
  40561e:	681b      	ldr	r3, [r3, #0]
  405620:	3301      	adds	r3, #1
  405622:	429a      	cmp	r2, r3
  405624:	d104      	bne.n	405630 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  405626:	4b07      	ldr	r3, [pc, #28]	; (405644 <pio_handler_set+0x94>)
  405628:	681b      	ldr	r3, [r3, #0]
  40562a:	3301      	adds	r3, #1
  40562c:	4a05      	ldr	r2, [pc, #20]	; (405644 <pio_handler_set+0x94>)
  40562e:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  405630:	683a      	ldr	r2, [r7, #0]
  405632:	6879      	ldr	r1, [r7, #4]
  405634:	68f8      	ldr	r0, [r7, #12]
  405636:	4b05      	ldr	r3, [pc, #20]	; (40564c <pio_handler_set+0x9c>)
  405638:	4798      	blx	r3

	return 0;
  40563a:	2300      	movs	r3, #0
}
  40563c:	4618      	mov	r0, r3
  40563e:	3718      	adds	r7, #24
  405640:	46bd      	mov	sp, r7
  405642:	bd80      	pop	{r7, pc}
  405644:	2040cb10 	.word	0x2040cb10
  405648:	2040caa0 	.word	0x2040caa0
  40564c:	00405429 	.word	0x00405429

00405650 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  405650:	b580      	push	{r7, lr}
  405652:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  405654:	210a      	movs	r1, #10
  405656:	4802      	ldr	r0, [pc, #8]	; (405660 <PIOA_Handler+0x10>)
  405658:	4b02      	ldr	r3, [pc, #8]	; (405664 <PIOA_Handler+0x14>)
  40565a:	4798      	blx	r3
}
  40565c:	bf00      	nop
  40565e:	bd80      	pop	{r7, pc}
  405660:	400e0e00 	.word	0x400e0e00
  405664:	004054fd 	.word	0x004054fd

00405668 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  405668:	b580      	push	{r7, lr}
  40566a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  40566c:	210b      	movs	r1, #11
  40566e:	4802      	ldr	r0, [pc, #8]	; (405678 <PIOB_Handler+0x10>)
  405670:	4b02      	ldr	r3, [pc, #8]	; (40567c <PIOB_Handler+0x14>)
  405672:	4798      	blx	r3
}
  405674:	bf00      	nop
  405676:	bd80      	pop	{r7, pc}
  405678:	400e1000 	.word	0x400e1000
  40567c:	004054fd 	.word	0x004054fd

00405680 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  405680:	b580      	push	{r7, lr}
  405682:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  405684:	210c      	movs	r1, #12
  405686:	4802      	ldr	r0, [pc, #8]	; (405690 <PIOC_Handler+0x10>)
  405688:	4b02      	ldr	r3, [pc, #8]	; (405694 <PIOC_Handler+0x14>)
  40568a:	4798      	blx	r3
}
  40568c:	bf00      	nop
  40568e:	bd80      	pop	{r7, pc}
  405690:	400e1200 	.word	0x400e1200
  405694:	004054fd 	.word	0x004054fd

00405698 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  405698:	b580      	push	{r7, lr}
  40569a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  40569c:	2110      	movs	r1, #16
  40569e:	4802      	ldr	r0, [pc, #8]	; (4056a8 <PIOD_Handler+0x10>)
  4056a0:	4b02      	ldr	r3, [pc, #8]	; (4056ac <PIOD_Handler+0x14>)
  4056a2:	4798      	blx	r3
}
  4056a4:	bf00      	nop
  4056a6:	bd80      	pop	{r7, pc}
  4056a8:	400e1400 	.word	0x400e1400
  4056ac:	004054fd 	.word	0x004054fd

004056b0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4056b0:	b580      	push	{r7, lr}
  4056b2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4056b4:	2111      	movs	r1, #17
  4056b6:	4802      	ldr	r0, [pc, #8]	; (4056c0 <PIOE_Handler+0x10>)
  4056b8:	4b02      	ldr	r3, [pc, #8]	; (4056c4 <PIOE_Handler+0x14>)
  4056ba:	4798      	blx	r3
}
  4056bc:	bf00      	nop
  4056be:	bd80      	pop	{r7, pc}
  4056c0:	400e1600 	.word	0x400e1600
  4056c4:	004054fd 	.word	0x004054fd

004056c8 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4056c8:	b480      	push	{r7}
  4056ca:	b083      	sub	sp, #12
  4056cc:	af00      	add	r7, sp, #0
  4056ce:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4056d0:	687b      	ldr	r3, [r7, #4]
  4056d2:	3b01      	subs	r3, #1
  4056d4:	2b03      	cmp	r3, #3
  4056d6:	d81a      	bhi.n	40570e <pmc_mck_set_division+0x46>
  4056d8:	a201      	add	r2, pc, #4	; (adr r2, 4056e0 <pmc_mck_set_division+0x18>)
  4056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4056de:	bf00      	nop
  4056e0:	004056f1 	.word	0x004056f1
  4056e4:	004056f7 	.word	0x004056f7
  4056e8:	004056ff 	.word	0x004056ff
  4056ec:	00405707 	.word	0x00405707
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4056f0:	2300      	movs	r3, #0
  4056f2:	607b      	str	r3, [r7, #4]
			break;
  4056f4:	e00e      	b.n	405714 <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4056f6:	f44f 7380 	mov.w	r3, #256	; 0x100
  4056fa:	607b      	str	r3, [r7, #4]
			break;
  4056fc:	e00a      	b.n	405714 <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4056fe:	f44f 7340 	mov.w	r3, #768	; 0x300
  405702:	607b      	str	r3, [r7, #4]
			break;
  405704:	e006      	b.n	405714 <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  405706:	f44f 7300 	mov.w	r3, #512	; 0x200
  40570a:	607b      	str	r3, [r7, #4]
			break;
  40570c:	e002      	b.n	405714 <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40570e:	2300      	movs	r3, #0
  405710:	607b      	str	r3, [r7, #4]
			break;
  405712:	bf00      	nop
	}
	PMC->PMC_MCKR =
  405714:	490a      	ldr	r1, [pc, #40]	; (405740 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  405716:	4b0a      	ldr	r3, [pc, #40]	; (405740 <pmc_mck_set_division+0x78>)
  405718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40571a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  40571e:	687b      	ldr	r3, [r7, #4]
  405720:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  405722:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  405724:	bf00      	nop
  405726:	4b06      	ldr	r3, [pc, #24]	; (405740 <pmc_mck_set_division+0x78>)
  405728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40572a:	f003 0308 	and.w	r3, r3, #8
  40572e:	2b00      	cmp	r3, #0
  405730:	d0f9      	beq.n	405726 <pmc_mck_set_division+0x5e>
}
  405732:	bf00      	nop
  405734:	370c      	adds	r7, #12
  405736:	46bd      	mov	sp, r7
  405738:	f85d 7b04 	ldr.w	r7, [sp], #4
  40573c:	4770      	bx	lr
  40573e:	bf00      	nop
  405740:	400e0600 	.word	0x400e0600

00405744 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  405744:	b480      	push	{r7}
  405746:	b085      	sub	sp, #20
  405748:	af00      	add	r7, sp, #0
  40574a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40574c:	491d      	ldr	r1, [pc, #116]	; (4057c4 <pmc_switch_mck_to_pllack+0x80>)
  40574e:	4b1d      	ldr	r3, [pc, #116]	; (4057c4 <pmc_switch_mck_to_pllack+0x80>)
  405750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405752:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  405756:	687b      	ldr	r3, [r7, #4]
  405758:	4313      	orrs	r3, r2
  40575a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40575c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  405760:	60fb      	str	r3, [r7, #12]
  405762:	e007      	b.n	405774 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405764:	68fb      	ldr	r3, [r7, #12]
  405766:	2b00      	cmp	r3, #0
  405768:	d101      	bne.n	40576e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  40576a:	2301      	movs	r3, #1
  40576c:	e023      	b.n	4057b6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40576e:	68fb      	ldr	r3, [r7, #12]
  405770:	3b01      	subs	r3, #1
  405772:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405774:	4b13      	ldr	r3, [pc, #76]	; (4057c4 <pmc_switch_mck_to_pllack+0x80>)
  405776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405778:	f003 0308 	and.w	r3, r3, #8
  40577c:	2b00      	cmp	r3, #0
  40577e:	d0f1      	beq.n	405764 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  405780:	4a10      	ldr	r2, [pc, #64]	; (4057c4 <pmc_switch_mck_to_pllack+0x80>)
  405782:	4b10      	ldr	r3, [pc, #64]	; (4057c4 <pmc_switch_mck_to_pllack+0x80>)
  405784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405786:	f023 0303 	bic.w	r3, r3, #3
  40578a:	f043 0302 	orr.w	r3, r3, #2
  40578e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  405794:	60fb      	str	r3, [r7, #12]
  405796:	e007      	b.n	4057a8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  405798:	68fb      	ldr	r3, [r7, #12]
  40579a:	2b00      	cmp	r3, #0
  40579c:	d101      	bne.n	4057a2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40579e:	2301      	movs	r3, #1
  4057a0:	e009      	b.n	4057b6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4057a2:	68fb      	ldr	r3, [r7, #12]
  4057a4:	3b01      	subs	r3, #1
  4057a6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4057a8:	4b06      	ldr	r3, [pc, #24]	; (4057c4 <pmc_switch_mck_to_pllack+0x80>)
  4057aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4057ac:	f003 0308 	and.w	r3, r3, #8
  4057b0:	2b00      	cmp	r3, #0
  4057b2:	d0f1      	beq.n	405798 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4057b4:	2300      	movs	r3, #0
}
  4057b6:	4618      	mov	r0, r3
  4057b8:	3714      	adds	r7, #20
  4057ba:	46bd      	mov	sp, r7
  4057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057c0:	4770      	bx	lr
  4057c2:	bf00      	nop
  4057c4:	400e0600 	.word	0x400e0600

004057c8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4057c8:	b480      	push	{r7}
  4057ca:	b083      	sub	sp, #12
  4057cc:	af00      	add	r7, sp, #0
  4057ce:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4057d0:	687b      	ldr	r3, [r7, #4]
  4057d2:	2b01      	cmp	r3, #1
  4057d4:	d105      	bne.n	4057e2 <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4057d6:	4907      	ldr	r1, [pc, #28]	; (4057f4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4057d8:	4b06      	ldr	r3, [pc, #24]	; (4057f4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4057da:	689a      	ldr	r2, [r3, #8]
  4057dc:	4b06      	ldr	r3, [pc, #24]	; (4057f8 <pmc_switch_sclk_to_32kxtal+0x30>)
  4057de:	4313      	orrs	r3, r2
  4057e0:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4057e2:	4b04      	ldr	r3, [pc, #16]	; (4057f4 <pmc_switch_sclk_to_32kxtal+0x2c>)
  4057e4:	4a05      	ldr	r2, [pc, #20]	; (4057fc <pmc_switch_sclk_to_32kxtal+0x34>)
  4057e6:	601a      	str	r2, [r3, #0]
}
  4057e8:	bf00      	nop
  4057ea:	370c      	adds	r7, #12
  4057ec:	46bd      	mov	sp, r7
  4057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057f2:	4770      	bx	lr
  4057f4:	400e1810 	.word	0x400e1810
  4057f8:	a5100000 	.word	0xa5100000
  4057fc:	a5000008 	.word	0xa5000008

00405800 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  405800:	b480      	push	{r7}
  405802:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  405804:	4b09      	ldr	r3, [pc, #36]	; (40582c <pmc_osc_is_ready_32kxtal+0x2c>)
  405806:	695b      	ldr	r3, [r3, #20]
  405808:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  40580c:	2b00      	cmp	r3, #0
  40580e:	d007      	beq.n	405820 <pmc_osc_is_ready_32kxtal+0x20>
  405810:	4b07      	ldr	r3, [pc, #28]	; (405830 <pmc_osc_is_ready_32kxtal+0x30>)
  405812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405814:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405818:	2b00      	cmp	r3, #0
  40581a:	d001      	beq.n	405820 <pmc_osc_is_ready_32kxtal+0x20>
  40581c:	2301      	movs	r3, #1
  40581e:	e000      	b.n	405822 <pmc_osc_is_ready_32kxtal+0x22>
  405820:	2300      	movs	r3, #0
}
  405822:	4618      	mov	r0, r3
  405824:	46bd      	mov	sp, r7
  405826:	f85d 7b04 	ldr.w	r7, [sp], #4
  40582a:	4770      	bx	lr
  40582c:	400e1810 	.word	0x400e1810
  405830:	400e0600 	.word	0x400e0600

00405834 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  405834:	b480      	push	{r7}
  405836:	b083      	sub	sp, #12
  405838:	af00      	add	r7, sp, #0
  40583a:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40583c:	4915      	ldr	r1, [pc, #84]	; (405894 <pmc_switch_mainck_to_fastrc+0x60>)
  40583e:	4b15      	ldr	r3, [pc, #84]	; (405894 <pmc_switch_mainck_to_fastrc+0x60>)
  405840:	6a1a      	ldr	r2, [r3, #32]
  405842:	4b15      	ldr	r3, [pc, #84]	; (405898 <pmc_switch_mainck_to_fastrc+0x64>)
  405844:	4313      	orrs	r3, r2
  405846:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  405848:	bf00      	nop
  40584a:	4b12      	ldr	r3, [pc, #72]	; (405894 <pmc_switch_mainck_to_fastrc+0x60>)
  40584c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  405852:	2b00      	cmp	r3, #0
  405854:	d0f9      	beq.n	40584a <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  405856:	490f      	ldr	r1, [pc, #60]	; (405894 <pmc_switch_mainck_to_fastrc+0x60>)
  405858:	4b0e      	ldr	r3, [pc, #56]	; (405894 <pmc_switch_mainck_to_fastrc+0x60>)
  40585a:	6a1a      	ldr	r2, [r3, #32]
  40585c:	4b0f      	ldr	r3, [pc, #60]	; (40589c <pmc_switch_mainck_to_fastrc+0x68>)
  40585e:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  405860:	687a      	ldr	r2, [r7, #4]
  405862:	4313      	orrs	r3, r2
  405864:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  405868:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40586a:	bf00      	nop
  40586c:	4b09      	ldr	r3, [pc, #36]	; (405894 <pmc_switch_mainck_to_fastrc+0x60>)
  40586e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  405874:	2b00      	cmp	r3, #0
  405876:	d0f9      	beq.n	40586c <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  405878:	4906      	ldr	r1, [pc, #24]	; (405894 <pmc_switch_mainck_to_fastrc+0x60>)
  40587a:	4b06      	ldr	r3, [pc, #24]	; (405894 <pmc_switch_mainck_to_fastrc+0x60>)
  40587c:	6a1a      	ldr	r2, [r3, #32]
  40587e:	4b08      	ldr	r3, [pc, #32]	; (4058a0 <pmc_switch_mainck_to_fastrc+0x6c>)
  405880:	4013      	ands	r3, r2
  405882:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  405886:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  405888:	bf00      	nop
  40588a:	370c      	adds	r7, #12
  40588c:	46bd      	mov	sp, r7
  40588e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405892:	4770      	bx	lr
  405894:	400e0600 	.word	0x400e0600
  405898:	00370008 	.word	0x00370008
  40589c:	ffc8ff8f 	.word	0xffc8ff8f
  4058a0:	fec8ffff 	.word	0xfec8ffff

004058a4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4058a4:	b480      	push	{r7}
  4058a6:	b083      	sub	sp, #12
  4058a8:	af00      	add	r7, sp, #0
  4058aa:	6078      	str	r0, [r7, #4]
  4058ac:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4058ae:	687b      	ldr	r3, [r7, #4]
  4058b0:	2b00      	cmp	r3, #0
  4058b2:	d008      	beq.n	4058c6 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4058b4:	4913      	ldr	r1, [pc, #76]	; (405904 <pmc_switch_mainck_to_xtal+0x60>)
  4058b6:	4b13      	ldr	r3, [pc, #76]	; (405904 <pmc_switch_mainck_to_xtal+0x60>)
  4058b8:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4058ba:	4a13      	ldr	r2, [pc, #76]	; (405908 <pmc_switch_mainck_to_xtal+0x64>)
  4058bc:	401a      	ands	r2, r3
  4058be:	4b13      	ldr	r3, [pc, #76]	; (40590c <pmc_switch_mainck_to_xtal+0x68>)
  4058c0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4058c2:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4058c4:	e018      	b.n	4058f8 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4058c6:	490f      	ldr	r1, [pc, #60]	; (405904 <pmc_switch_mainck_to_xtal+0x60>)
  4058c8:	4b0e      	ldr	r3, [pc, #56]	; (405904 <pmc_switch_mainck_to_xtal+0x60>)
  4058ca:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4058cc:	4b10      	ldr	r3, [pc, #64]	; (405910 <pmc_switch_mainck_to_xtal+0x6c>)
  4058ce:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4058d0:	683a      	ldr	r2, [r7, #0]
  4058d2:	0212      	lsls	r2, r2, #8
  4058d4:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4058d6:	431a      	orrs	r2, r3
  4058d8:	4b0e      	ldr	r3, [pc, #56]	; (405914 <pmc_switch_mainck_to_xtal+0x70>)
  4058da:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4058dc:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4058de:	bf00      	nop
  4058e0:	4b08      	ldr	r3, [pc, #32]	; (405904 <pmc_switch_mainck_to_xtal+0x60>)
  4058e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4058e4:	f003 0301 	and.w	r3, r3, #1
  4058e8:	2b00      	cmp	r3, #0
  4058ea:	d0f9      	beq.n	4058e0 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4058ec:	4905      	ldr	r1, [pc, #20]	; (405904 <pmc_switch_mainck_to_xtal+0x60>)
  4058ee:	4b05      	ldr	r3, [pc, #20]	; (405904 <pmc_switch_mainck_to_xtal+0x60>)
  4058f0:	6a1a      	ldr	r2, [r3, #32]
  4058f2:	4b09      	ldr	r3, [pc, #36]	; (405918 <pmc_switch_mainck_to_xtal+0x74>)
  4058f4:	4313      	orrs	r3, r2
  4058f6:	620b      	str	r3, [r1, #32]
}
  4058f8:	bf00      	nop
  4058fa:	370c      	adds	r7, #12
  4058fc:	46bd      	mov	sp, r7
  4058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  405902:	4770      	bx	lr
  405904:	400e0600 	.word	0x400e0600
  405908:	fec8fffc 	.word	0xfec8fffc
  40590c:	01370002 	.word	0x01370002
  405910:	ffc8fffc 	.word	0xffc8fffc
  405914:	00370001 	.word	0x00370001
  405918:	01370000 	.word	0x01370000

0040591c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  40591c:	b480      	push	{r7}
  40591e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  405920:	4b04      	ldr	r3, [pc, #16]	; (405934 <pmc_osc_is_ready_mainck+0x18>)
  405922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  405928:	4618      	mov	r0, r3
  40592a:	46bd      	mov	sp, r7
  40592c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405930:	4770      	bx	lr
  405932:	bf00      	nop
  405934:	400e0600 	.word	0x400e0600

00405938 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  405938:	b480      	push	{r7}
  40593a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40593c:	4b04      	ldr	r3, [pc, #16]	; (405950 <pmc_disable_pllack+0x18>)
  40593e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  405942:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  405944:	bf00      	nop
  405946:	46bd      	mov	sp, r7
  405948:	f85d 7b04 	ldr.w	r7, [sp], #4
  40594c:	4770      	bx	lr
  40594e:	bf00      	nop
  405950:	400e0600 	.word	0x400e0600

00405954 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  405954:	b480      	push	{r7}
  405956:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  405958:	4b04      	ldr	r3, [pc, #16]	; (40596c <pmc_is_locked_pllack+0x18>)
  40595a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40595c:	f003 0302 	and.w	r3, r3, #2
}
  405960:	4618      	mov	r0, r3
  405962:	46bd      	mov	sp, r7
  405964:	f85d 7b04 	ldr.w	r7, [sp], #4
  405968:	4770      	bx	lr
  40596a:	bf00      	nop
  40596c:	400e0600 	.word	0x400e0600

00405970 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  405970:	b480      	push	{r7}
  405972:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  405974:	4b04      	ldr	r3, [pc, #16]	; (405988 <pmc_is_locked_upll+0x18>)
  405976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  405978:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  40597c:	4618      	mov	r0, r3
  40597e:	46bd      	mov	sp, r7
  405980:	f85d 7b04 	ldr.w	r7, [sp], #4
  405984:	4770      	bx	lr
  405986:	bf00      	nop
  405988:	400e0600 	.word	0x400e0600

0040598c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40598c:	b480      	push	{r7}
  40598e:	b083      	sub	sp, #12
  405990:	af00      	add	r7, sp, #0
  405992:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  405994:	687b      	ldr	r3, [r7, #4]
  405996:	2b3f      	cmp	r3, #63	; 0x3f
  405998:	d901      	bls.n	40599e <pmc_enable_periph_clk+0x12>
		return 1;
  40599a:	2301      	movs	r3, #1
  40599c:	e02f      	b.n	4059fe <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40599e:	687b      	ldr	r3, [r7, #4]
  4059a0:	2b1f      	cmp	r3, #31
  4059a2:	d813      	bhi.n	4059cc <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4059a4:	4b19      	ldr	r3, [pc, #100]	; (405a0c <pmc_enable_periph_clk+0x80>)
  4059a6:	699a      	ldr	r2, [r3, #24]
  4059a8:	2101      	movs	r1, #1
  4059aa:	687b      	ldr	r3, [r7, #4]
  4059ac:	fa01 f303 	lsl.w	r3, r1, r3
  4059b0:	401a      	ands	r2, r3
  4059b2:	2101      	movs	r1, #1
  4059b4:	687b      	ldr	r3, [r7, #4]
  4059b6:	fa01 f303 	lsl.w	r3, r1, r3
  4059ba:	429a      	cmp	r2, r3
  4059bc:	d01e      	beq.n	4059fc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4059be:	4a13      	ldr	r2, [pc, #76]	; (405a0c <pmc_enable_periph_clk+0x80>)
  4059c0:	2101      	movs	r1, #1
  4059c2:	687b      	ldr	r3, [r7, #4]
  4059c4:	fa01 f303 	lsl.w	r3, r1, r3
  4059c8:	6113      	str	r3, [r2, #16]
  4059ca:	e017      	b.n	4059fc <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4059cc:	687b      	ldr	r3, [r7, #4]
  4059ce:	3b20      	subs	r3, #32
  4059d0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4059d2:	4b0e      	ldr	r3, [pc, #56]	; (405a0c <pmc_enable_periph_clk+0x80>)
  4059d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4059d8:	2101      	movs	r1, #1
  4059da:	687b      	ldr	r3, [r7, #4]
  4059dc:	fa01 f303 	lsl.w	r3, r1, r3
  4059e0:	401a      	ands	r2, r3
  4059e2:	2101      	movs	r1, #1
  4059e4:	687b      	ldr	r3, [r7, #4]
  4059e6:	fa01 f303 	lsl.w	r3, r1, r3
  4059ea:	429a      	cmp	r2, r3
  4059ec:	d006      	beq.n	4059fc <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4059ee:	4a07      	ldr	r2, [pc, #28]	; (405a0c <pmc_enable_periph_clk+0x80>)
  4059f0:	2101      	movs	r1, #1
  4059f2:	687b      	ldr	r3, [r7, #4]
  4059f4:	fa01 f303 	lsl.w	r3, r1, r3
  4059f8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4059fc:	2300      	movs	r3, #0
}
  4059fe:	4618      	mov	r0, r3
  405a00:	370c      	adds	r7, #12
  405a02:	46bd      	mov	sp, r7
  405a04:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a08:	4770      	bx	lr
  405a0a:	bf00      	nop
  405a0c:	400e0600 	.word	0x400e0600

00405a10 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  405a10:	b480      	push	{r7}
  405a12:	b085      	sub	sp, #20
  405a14:	af00      	add	r7, sp, #0
  405a16:	6078      	str	r0, [r7, #4]
  405a18:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  405a1a:	2300      	movs	r3, #0
  405a1c:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  405a1e:	687b      	ldr	r3, [r7, #4]
  405a20:	22ac      	movs	r2, #172	; 0xac
  405a22:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  405a24:	683b      	ldr	r3, [r7, #0]
  405a26:	681a      	ldr	r2, [r3, #0]
  405a28:	683b      	ldr	r3, [r7, #0]
  405a2a:	685b      	ldr	r3, [r3, #4]
  405a2c:	fbb2 f3f3 	udiv	r3, r2, r3
  405a30:	091b      	lsrs	r3, r3, #4
  405a32:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  405a34:	68fb      	ldr	r3, [r7, #12]
  405a36:	2b00      	cmp	r3, #0
  405a38:	d003      	beq.n	405a42 <uart_init+0x32>
  405a3a:	68fb      	ldr	r3, [r7, #12]
  405a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  405a40:	d301      	bcc.n	405a46 <uart_init+0x36>
		return 1;
  405a42:	2301      	movs	r3, #1
  405a44:	e00a      	b.n	405a5c <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  405a46:	687b      	ldr	r3, [r7, #4]
  405a48:	68fa      	ldr	r2, [r7, #12]
  405a4a:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  405a4c:	683b      	ldr	r3, [r7, #0]
  405a4e:	689a      	ldr	r2, [r3, #8]
  405a50:	687b      	ldr	r3, [r7, #4]
  405a52:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  405a54:	687b      	ldr	r3, [r7, #4]
  405a56:	2250      	movs	r2, #80	; 0x50
  405a58:	601a      	str	r2, [r3, #0]

	return 0;
  405a5a:	2300      	movs	r3, #0
}
  405a5c:	4618      	mov	r0, r3
  405a5e:	3714      	adds	r7, #20
  405a60:	46bd      	mov	sp, r7
  405a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a66:	4770      	bx	lr

00405a68 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  405a68:	b480      	push	{r7}
  405a6a:	b083      	sub	sp, #12
  405a6c:	af00      	add	r7, sp, #0
  405a6e:	6078      	str	r0, [r7, #4]
  405a70:	460b      	mov	r3, r1
  405a72:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  405a74:	687b      	ldr	r3, [r7, #4]
  405a76:	695b      	ldr	r3, [r3, #20]
  405a78:	f003 0302 	and.w	r3, r3, #2
  405a7c:	2b00      	cmp	r3, #0
  405a7e:	d101      	bne.n	405a84 <uart_write+0x1c>
		return 1;
  405a80:	2301      	movs	r3, #1
  405a82:	e003      	b.n	405a8c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  405a84:	78fa      	ldrb	r2, [r7, #3]
  405a86:	687b      	ldr	r3, [r7, #4]
  405a88:	61da      	str	r2, [r3, #28]
	return 0;
  405a8a:	2300      	movs	r3, #0
}
  405a8c:	4618      	mov	r0, r3
  405a8e:	370c      	adds	r7, #12
  405a90:	46bd      	mov	sp, r7
  405a92:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a96:	4770      	bx	lr

00405a98 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  405a98:	b480      	push	{r7}
  405a9a:	b083      	sub	sp, #12
  405a9c:	af00      	add	r7, sp, #0
  405a9e:	6078      	str	r0, [r7, #4]
  405aa0:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  405aa2:	687b      	ldr	r3, [r7, #4]
  405aa4:	695b      	ldr	r3, [r3, #20]
  405aa6:	f003 0301 	and.w	r3, r3, #1
  405aaa:	2b00      	cmp	r3, #0
  405aac:	d101      	bne.n	405ab2 <uart_read+0x1a>
		return 1;
  405aae:	2301      	movs	r3, #1
  405ab0:	e005      	b.n	405abe <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  405ab2:	687b      	ldr	r3, [r7, #4]
  405ab4:	699b      	ldr	r3, [r3, #24]
  405ab6:	b2da      	uxtb	r2, r3
  405ab8:	683b      	ldr	r3, [r7, #0]
  405aba:	701a      	strb	r2, [r3, #0]
	return 0;
  405abc:	2300      	movs	r3, #0
}
  405abe:	4618      	mov	r0, r3
  405ac0:	370c      	adds	r7, #12
  405ac2:	46bd      	mov	sp, r7
  405ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ac8:	4770      	bx	lr

00405aca <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  405aca:	b480      	push	{r7}
  405acc:	b089      	sub	sp, #36	; 0x24
  405ace:	af00      	add	r7, sp, #0
  405ad0:	60f8      	str	r0, [r7, #12]
  405ad2:	60b9      	str	r1, [r7, #8]
  405ad4:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  405ad6:	68bb      	ldr	r3, [r7, #8]
  405ad8:	011a      	lsls	r2, r3, #4
  405ada:	687b      	ldr	r3, [r7, #4]
  405adc:	429a      	cmp	r2, r3
  405ade:	d802      	bhi.n	405ae6 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  405ae0:	2310      	movs	r3, #16
  405ae2:	61fb      	str	r3, [r7, #28]
  405ae4:	e001      	b.n	405aea <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  405ae6:	2308      	movs	r3, #8
  405ae8:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  405aea:	687b      	ldr	r3, [r7, #4]
  405aec:	00da      	lsls	r2, r3, #3
  405aee:	69fb      	ldr	r3, [r7, #28]
  405af0:	68b9      	ldr	r1, [r7, #8]
  405af2:	fb01 f303 	mul.w	r3, r1, r3
  405af6:	085b      	lsrs	r3, r3, #1
  405af8:	441a      	add	r2, r3
  405afa:	69fb      	ldr	r3, [r7, #28]
  405afc:	68b9      	ldr	r1, [r7, #8]
  405afe:	fb01 f303 	mul.w	r3, r1, r3
  405b02:	fbb2 f3f3 	udiv	r3, r2, r3
  405b06:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  405b08:	69bb      	ldr	r3, [r7, #24]
  405b0a:	08db      	lsrs	r3, r3, #3
  405b0c:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  405b0e:	69bb      	ldr	r3, [r7, #24]
  405b10:	f003 0307 	and.w	r3, r3, #7
  405b14:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  405b16:	697b      	ldr	r3, [r7, #20]
  405b18:	2b00      	cmp	r3, #0
  405b1a:	d003      	beq.n	405b24 <usart_set_async_baudrate+0x5a>
  405b1c:	697b      	ldr	r3, [r7, #20]
  405b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  405b22:	d301      	bcc.n	405b28 <usart_set_async_baudrate+0x5e>
		return 1;
  405b24:	2301      	movs	r3, #1
  405b26:	e00f      	b.n	405b48 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  405b28:	69fb      	ldr	r3, [r7, #28]
  405b2a:	2b08      	cmp	r3, #8
  405b2c:	d105      	bne.n	405b3a <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  405b2e:	68fb      	ldr	r3, [r7, #12]
  405b30:	685b      	ldr	r3, [r3, #4]
  405b32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  405b36:	68fb      	ldr	r3, [r7, #12]
  405b38:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  405b3a:	693b      	ldr	r3, [r7, #16]
  405b3c:	041a      	lsls	r2, r3, #16
  405b3e:	697b      	ldr	r3, [r7, #20]
  405b40:	431a      	orrs	r2, r3
  405b42:	68fb      	ldr	r3, [r7, #12]
  405b44:	621a      	str	r2, [r3, #32]

	return 0;
  405b46:	2300      	movs	r3, #0
}
  405b48:	4618      	mov	r0, r3
  405b4a:	3724      	adds	r7, #36	; 0x24
  405b4c:	46bd      	mov	sp, r7
  405b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b52:	4770      	bx	lr

00405b54 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  405b54:	b580      	push	{r7, lr}
  405b56:	b082      	sub	sp, #8
  405b58:	af00      	add	r7, sp, #0
  405b5a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  405b5c:	6878      	ldr	r0, [r7, #4]
  405b5e:	4b0d      	ldr	r3, [pc, #52]	; (405b94 <usart_reset+0x40>)
  405b60:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  405b62:	687b      	ldr	r3, [r7, #4]
  405b64:	2200      	movs	r2, #0
  405b66:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  405b68:	687b      	ldr	r3, [r7, #4]
  405b6a:	2200      	movs	r2, #0
  405b6c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  405b6e:	687b      	ldr	r3, [r7, #4]
  405b70:	2200      	movs	r2, #0
  405b72:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  405b74:	6878      	ldr	r0, [r7, #4]
  405b76:	4b08      	ldr	r3, [pc, #32]	; (405b98 <usart_reset+0x44>)
  405b78:	4798      	blx	r3
	usart_reset_rx(p_usart);
  405b7a:	6878      	ldr	r0, [r7, #4]
  405b7c:	4b07      	ldr	r3, [pc, #28]	; (405b9c <usart_reset+0x48>)
  405b7e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  405b80:	6878      	ldr	r0, [r7, #4]
  405b82:	4b07      	ldr	r3, [pc, #28]	; (405ba0 <usart_reset+0x4c>)
  405b84:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  405b86:	6878      	ldr	r0, [r7, #4]
  405b88:	4b06      	ldr	r3, [pc, #24]	; (405ba4 <usart_reset+0x50>)
  405b8a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  405b8c:	bf00      	nop
  405b8e:	3708      	adds	r7, #8
  405b90:	46bd      	mov	sp, r7
  405b92:	bd80      	pop	{r7, pc}
  405b94:	00405d35 	.word	0x00405d35
  405b98:	00405c47 	.word	0x00405c47
  405b9c:	00405c7b 	.word	0x00405c7b
  405ba0:	00405c95 	.word	0x00405c95
  405ba4:	00405cb1 	.word	0x00405cb1

00405ba8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  405ba8:	b580      	push	{r7, lr}
  405baa:	b084      	sub	sp, #16
  405bac:	af00      	add	r7, sp, #0
  405bae:	60f8      	str	r0, [r7, #12]
  405bb0:	60b9      	str	r1, [r7, #8]
  405bb2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  405bb4:	68f8      	ldr	r0, [r7, #12]
  405bb6:	4b1a      	ldr	r3, [pc, #104]	; (405c20 <usart_init_rs232+0x78>)
  405bb8:	4798      	blx	r3

	ul_reg_val = 0;
  405bba:	4b1a      	ldr	r3, [pc, #104]	; (405c24 <usart_init_rs232+0x7c>)
  405bbc:	2200      	movs	r2, #0
  405bbe:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  405bc0:	68bb      	ldr	r3, [r7, #8]
  405bc2:	2b00      	cmp	r3, #0
  405bc4:	d009      	beq.n	405bda <usart_init_rs232+0x32>
  405bc6:	68bb      	ldr	r3, [r7, #8]
  405bc8:	681b      	ldr	r3, [r3, #0]
  405bca:	687a      	ldr	r2, [r7, #4]
  405bcc:	4619      	mov	r1, r3
  405bce:	68f8      	ldr	r0, [r7, #12]
  405bd0:	4b15      	ldr	r3, [pc, #84]	; (405c28 <usart_init_rs232+0x80>)
  405bd2:	4798      	blx	r3
  405bd4:	4603      	mov	r3, r0
  405bd6:	2b00      	cmp	r3, #0
  405bd8:	d001      	beq.n	405bde <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  405bda:	2301      	movs	r3, #1
  405bdc:	e01b      	b.n	405c16 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405bde:	68bb      	ldr	r3, [r7, #8]
  405be0:	685a      	ldr	r2, [r3, #4]
  405be2:	68bb      	ldr	r3, [r7, #8]
  405be4:	689b      	ldr	r3, [r3, #8]
  405be6:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  405be8:	68bb      	ldr	r3, [r7, #8]
  405bea:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405bec:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  405bee:	68bb      	ldr	r3, [r7, #8]
  405bf0:	68db      	ldr	r3, [r3, #12]
  405bf2:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  405bf4:	4b0b      	ldr	r3, [pc, #44]	; (405c24 <usart_init_rs232+0x7c>)
  405bf6:	681b      	ldr	r3, [r3, #0]
  405bf8:	4313      	orrs	r3, r2
  405bfa:	4a0a      	ldr	r2, [pc, #40]	; (405c24 <usart_init_rs232+0x7c>)
  405bfc:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  405bfe:	4b09      	ldr	r3, [pc, #36]	; (405c24 <usart_init_rs232+0x7c>)
  405c00:	681b      	ldr	r3, [r3, #0]
  405c02:	4a08      	ldr	r2, [pc, #32]	; (405c24 <usart_init_rs232+0x7c>)
  405c04:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  405c06:	68fb      	ldr	r3, [r7, #12]
  405c08:	685a      	ldr	r2, [r3, #4]
  405c0a:	4b06      	ldr	r3, [pc, #24]	; (405c24 <usart_init_rs232+0x7c>)
  405c0c:	681b      	ldr	r3, [r3, #0]
  405c0e:	431a      	orrs	r2, r3
  405c10:	68fb      	ldr	r3, [r7, #12]
  405c12:	605a      	str	r2, [r3, #4]

	return 0;
  405c14:	2300      	movs	r3, #0
}
  405c16:	4618      	mov	r0, r3
  405c18:	3710      	adds	r7, #16
  405c1a:	46bd      	mov	sp, r7
  405c1c:	bd80      	pop	{r7, pc}
  405c1e:	bf00      	nop
  405c20:	00405b55 	.word	0x00405b55
  405c24:	2040cb14 	.word	0x2040cb14
  405c28:	00405acb 	.word	0x00405acb

00405c2c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  405c2c:	b480      	push	{r7}
  405c2e:	b083      	sub	sp, #12
  405c30:	af00      	add	r7, sp, #0
  405c32:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  405c34:	687b      	ldr	r3, [r7, #4]
  405c36:	2240      	movs	r2, #64	; 0x40
  405c38:	601a      	str	r2, [r3, #0]
}
  405c3a:	bf00      	nop
  405c3c:	370c      	adds	r7, #12
  405c3e:	46bd      	mov	sp, r7
  405c40:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c44:	4770      	bx	lr

00405c46 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  405c46:	b480      	push	{r7}
  405c48:	b083      	sub	sp, #12
  405c4a:	af00      	add	r7, sp, #0
  405c4c:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  405c4e:	687b      	ldr	r3, [r7, #4]
  405c50:	2288      	movs	r2, #136	; 0x88
  405c52:	601a      	str	r2, [r3, #0]
}
  405c54:	bf00      	nop
  405c56:	370c      	adds	r7, #12
  405c58:	46bd      	mov	sp, r7
  405c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c5e:	4770      	bx	lr

00405c60 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  405c60:	b480      	push	{r7}
  405c62:	b083      	sub	sp, #12
  405c64:	af00      	add	r7, sp, #0
  405c66:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  405c68:	687b      	ldr	r3, [r7, #4]
  405c6a:	2210      	movs	r2, #16
  405c6c:	601a      	str	r2, [r3, #0]
}
  405c6e:	bf00      	nop
  405c70:	370c      	adds	r7, #12
  405c72:	46bd      	mov	sp, r7
  405c74:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c78:	4770      	bx	lr

00405c7a <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  405c7a:	b480      	push	{r7}
  405c7c:	b083      	sub	sp, #12
  405c7e:	af00      	add	r7, sp, #0
  405c80:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  405c82:	687b      	ldr	r3, [r7, #4]
  405c84:	2224      	movs	r2, #36	; 0x24
  405c86:	601a      	str	r2, [r3, #0]
}
  405c88:	bf00      	nop
  405c8a:	370c      	adds	r7, #12
  405c8c:	46bd      	mov	sp, r7
  405c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c92:	4770      	bx	lr

00405c94 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  405c94:	b480      	push	{r7}
  405c96:	b083      	sub	sp, #12
  405c98:	af00      	add	r7, sp, #0
  405c9a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  405c9c:	687b      	ldr	r3, [r7, #4]
  405c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
  405ca2:	601a      	str	r2, [r3, #0]
}
  405ca4:	bf00      	nop
  405ca6:	370c      	adds	r7, #12
  405ca8:	46bd      	mov	sp, r7
  405caa:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cae:	4770      	bx	lr

00405cb0 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  405cb0:	b480      	push	{r7}
  405cb2:	b083      	sub	sp, #12
  405cb4:	af00      	add	r7, sp, #0
  405cb6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  405cb8:	687b      	ldr	r3, [r7, #4]
  405cba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405cbe:	601a      	str	r2, [r3, #0]
}
  405cc0:	bf00      	nop
  405cc2:	370c      	adds	r7, #12
  405cc4:	46bd      	mov	sp, r7
  405cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cca:	4770      	bx	lr

00405ccc <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  405ccc:	b480      	push	{r7}
  405cce:	b083      	sub	sp, #12
  405cd0:	af00      	add	r7, sp, #0
  405cd2:	6078      	str	r0, [r7, #4]
  405cd4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  405cd6:	687b      	ldr	r3, [r7, #4]
  405cd8:	695b      	ldr	r3, [r3, #20]
  405cda:	f003 0302 	and.w	r3, r3, #2
  405cde:	2b00      	cmp	r3, #0
  405ce0:	d101      	bne.n	405ce6 <usart_write+0x1a>
		return 1;
  405ce2:	2301      	movs	r3, #1
  405ce4:	e005      	b.n	405cf2 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  405ce6:	683b      	ldr	r3, [r7, #0]
  405ce8:	f3c3 0208 	ubfx	r2, r3, #0, #9
  405cec:	687b      	ldr	r3, [r7, #4]
  405cee:	61da      	str	r2, [r3, #28]
	return 0;
  405cf0:	2300      	movs	r3, #0
}
  405cf2:	4618      	mov	r0, r3
  405cf4:	370c      	adds	r7, #12
  405cf6:	46bd      	mov	sp, r7
  405cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cfc:	4770      	bx	lr

00405cfe <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  405cfe:	b480      	push	{r7}
  405d00:	b083      	sub	sp, #12
  405d02:	af00      	add	r7, sp, #0
  405d04:	6078      	str	r0, [r7, #4]
  405d06:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  405d08:	687b      	ldr	r3, [r7, #4]
  405d0a:	695b      	ldr	r3, [r3, #20]
  405d0c:	f003 0301 	and.w	r3, r3, #1
  405d10:	2b00      	cmp	r3, #0
  405d12:	d101      	bne.n	405d18 <usart_read+0x1a>
		return 1;
  405d14:	2301      	movs	r3, #1
  405d16:	e006      	b.n	405d26 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  405d18:	687b      	ldr	r3, [r7, #4]
  405d1a:	699b      	ldr	r3, [r3, #24]
  405d1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
  405d20:	683b      	ldr	r3, [r7, #0]
  405d22:	601a      	str	r2, [r3, #0]

	return 0;
  405d24:	2300      	movs	r3, #0
}
  405d26:	4618      	mov	r0, r3
  405d28:	370c      	adds	r7, #12
  405d2a:	46bd      	mov	sp, r7
  405d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d30:	4770      	bx	lr
	...

00405d34 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  405d34:	b480      	push	{r7}
  405d36:	b083      	sub	sp, #12
  405d38:	af00      	add	r7, sp, #0
  405d3a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  405d3c:	687b      	ldr	r3, [r7, #4]
  405d3e:	4a04      	ldr	r2, [pc, #16]	; (405d50 <usart_disable_writeprotect+0x1c>)
  405d40:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  405d44:	bf00      	nop
  405d46:	370c      	adds	r7, #12
  405d48:	46bd      	mov	sp, r7
  405d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d4e:	4770      	bx	lr
  405d50:	55534100 	.word	0x55534100

00405d54 <cpu_irq_save>:
{
  405d54:	b480      	push	{r7}
  405d56:	b083      	sub	sp, #12
  405d58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405d5a:	f3ef 8310 	mrs	r3, PRIMASK
  405d5e:	607b      	str	r3, [r7, #4]
  return(result);
  405d60:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  405d62:	2b00      	cmp	r3, #0
  405d64:	bf0c      	ite	eq
  405d66:	2301      	moveq	r3, #1
  405d68:	2300      	movne	r3, #0
  405d6a:	b2db      	uxtb	r3, r3
  405d6c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  405d6e:	b672      	cpsid	i
  405d70:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405d74:	4b04      	ldr	r3, [pc, #16]	; (405d88 <cpu_irq_save+0x34>)
  405d76:	2200      	movs	r2, #0
  405d78:	701a      	strb	r2, [r3, #0]
	return flags;
  405d7a:	683b      	ldr	r3, [r7, #0]
}
  405d7c:	4618      	mov	r0, r3
  405d7e:	370c      	adds	r7, #12
  405d80:	46bd      	mov	sp, r7
  405d82:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d86:	4770      	bx	lr
  405d88:	20400034 	.word	0x20400034

00405d8c <cpu_irq_is_enabled_flags>:
{
  405d8c:	b480      	push	{r7}
  405d8e:	b083      	sub	sp, #12
  405d90:	af00      	add	r7, sp, #0
  405d92:	6078      	str	r0, [r7, #4]
	return (flags);
  405d94:	687b      	ldr	r3, [r7, #4]
  405d96:	2b00      	cmp	r3, #0
  405d98:	bf14      	ite	ne
  405d9a:	2301      	movne	r3, #1
  405d9c:	2300      	moveq	r3, #0
  405d9e:	b2db      	uxtb	r3, r3
}
  405da0:	4618      	mov	r0, r3
  405da2:	370c      	adds	r7, #12
  405da4:	46bd      	mov	sp, r7
  405da6:	f85d 7b04 	ldr.w	r7, [sp], #4
  405daa:	4770      	bx	lr

00405dac <cpu_irq_restore>:
{
  405dac:	b580      	push	{r7, lr}
  405dae:	b082      	sub	sp, #8
  405db0:	af00      	add	r7, sp, #0
  405db2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  405db4:	6878      	ldr	r0, [r7, #4]
  405db6:	4b07      	ldr	r3, [pc, #28]	; (405dd4 <cpu_irq_restore+0x28>)
  405db8:	4798      	blx	r3
  405dba:	4603      	mov	r3, r0
  405dbc:	2b00      	cmp	r3, #0
  405dbe:	d005      	beq.n	405dcc <cpu_irq_restore+0x20>
		cpu_irq_enable();
  405dc0:	4b05      	ldr	r3, [pc, #20]	; (405dd8 <cpu_irq_restore+0x2c>)
  405dc2:	2201      	movs	r2, #1
  405dc4:	701a      	strb	r2, [r3, #0]
  405dc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405dca:	b662      	cpsie	i
}
  405dcc:	bf00      	nop
  405dce:	3708      	adds	r7, #8
  405dd0:	46bd      	mov	sp, r7
  405dd2:	bd80      	pop	{r7, pc}
  405dd4:	00405d8d 	.word	0x00405d8d
  405dd8:	20400034 	.word	0x20400034

00405ddc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  405ddc:	b580      	push	{r7, lr}
  405dde:	b084      	sub	sp, #16
  405de0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  405de2:	4b1e      	ldr	r3, [pc, #120]	; (405e5c <Reset_Handler+0x80>)
  405de4:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  405de6:	4b1e      	ldr	r3, [pc, #120]	; (405e60 <Reset_Handler+0x84>)
  405de8:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  405dea:	68fa      	ldr	r2, [r7, #12]
  405dec:	68bb      	ldr	r3, [r7, #8]
  405dee:	429a      	cmp	r2, r3
  405df0:	d00c      	beq.n	405e0c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  405df2:	e007      	b.n	405e04 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  405df4:	68bb      	ldr	r3, [r7, #8]
  405df6:	1d1a      	adds	r2, r3, #4
  405df8:	60ba      	str	r2, [r7, #8]
  405dfa:	68fa      	ldr	r2, [r7, #12]
  405dfc:	1d11      	adds	r1, r2, #4
  405dfe:	60f9      	str	r1, [r7, #12]
  405e00:	6812      	ldr	r2, [r2, #0]
  405e02:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  405e04:	68bb      	ldr	r3, [r7, #8]
  405e06:	4a17      	ldr	r2, [pc, #92]	; (405e64 <Reset_Handler+0x88>)
  405e08:	4293      	cmp	r3, r2
  405e0a:	d3f3      	bcc.n	405df4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  405e0c:	4b16      	ldr	r3, [pc, #88]	; (405e68 <Reset_Handler+0x8c>)
  405e0e:	60bb      	str	r3, [r7, #8]
  405e10:	e004      	b.n	405e1c <Reset_Handler+0x40>
                *pDest++ = 0;
  405e12:	68bb      	ldr	r3, [r7, #8]
  405e14:	1d1a      	adds	r2, r3, #4
  405e16:	60ba      	str	r2, [r7, #8]
  405e18:	2200      	movs	r2, #0
  405e1a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  405e1c:	68bb      	ldr	r3, [r7, #8]
  405e1e:	4a13      	ldr	r2, [pc, #76]	; (405e6c <Reset_Handler+0x90>)
  405e20:	4293      	cmp	r3, r2
  405e22:	d3f6      	bcc.n	405e12 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  405e24:	4b12      	ldr	r3, [pc, #72]	; (405e70 <Reset_Handler+0x94>)
  405e26:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  405e28:	4a12      	ldr	r2, [pc, #72]	; (405e74 <Reset_Handler+0x98>)
  405e2a:	68fb      	ldr	r3, [r7, #12]
  405e2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405e30:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  405e32:	4b11      	ldr	r3, [pc, #68]	; (405e78 <Reset_Handler+0x9c>)
  405e34:	4798      	blx	r3
  405e36:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  405e38:	4a10      	ldr	r2, [pc, #64]	; (405e7c <Reset_Handler+0xa0>)
  405e3a:	4b10      	ldr	r3, [pc, #64]	; (405e7c <Reset_Handler+0xa0>)
  405e3c:	681b      	ldr	r3, [r3, #0]
  405e3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  405e42:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  405e44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  405e48:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  405e4c:	6878      	ldr	r0, [r7, #4]
  405e4e:	4b0c      	ldr	r3, [pc, #48]	; (405e80 <Reset_Handler+0xa4>)
  405e50:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  405e52:	4b0c      	ldr	r3, [pc, #48]	; (405e84 <Reset_Handler+0xa8>)
  405e54:	4798      	blx	r3

        /* Branch to main function */
        main();
  405e56:	4b0c      	ldr	r3, [pc, #48]	; (405e88 <Reset_Handler+0xac>)
  405e58:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  405e5a:	e7fe      	b.n	405e5a <Reset_Handler+0x7e>
  405e5c:	00409ce8 	.word	0x00409ce8
  405e60:	20400000 	.word	0x20400000
  405e64:	204009e8 	.word	0x204009e8
  405e68:	204009e8 	.word	0x204009e8
  405e6c:	204223f0 	.word	0x204223f0
  405e70:	00400000 	.word	0x00400000
  405e74:	e000ed00 	.word	0xe000ed00
  405e78:	00405d55 	.word	0x00405d55
  405e7c:	e000ed88 	.word	0xe000ed88
  405e80:	00405dad 	.word	0x00405dad
  405e84:	00406951 	.word	0x00406951
  405e88:	00403d49 	.word	0x00403d49

00405e8c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  405e8c:	b480      	push	{r7}
  405e8e:	af00      	add	r7, sp, #0
        while (1) {
  405e90:	e7fe      	b.n	405e90 <Dummy_Handler+0x4>
	...

00405e94 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  405e94:	b480      	push	{r7}
  405e96:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  405e98:	4b52      	ldr	r3, [pc, #328]	; (405fe4 <SystemCoreClockUpdate+0x150>)
  405e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405e9c:	f003 0303 	and.w	r3, r3, #3
  405ea0:	2b01      	cmp	r3, #1
  405ea2:	d014      	beq.n	405ece <SystemCoreClockUpdate+0x3a>
  405ea4:	2b01      	cmp	r3, #1
  405ea6:	d302      	bcc.n	405eae <SystemCoreClockUpdate+0x1a>
  405ea8:	2b02      	cmp	r3, #2
  405eaa:	d038      	beq.n	405f1e <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  405eac:	e07a      	b.n	405fa4 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  405eae:	4b4e      	ldr	r3, [pc, #312]	; (405fe8 <SystemCoreClockUpdate+0x154>)
  405eb0:	695b      	ldr	r3, [r3, #20]
  405eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405eb6:	2b00      	cmp	r3, #0
  405eb8:	d004      	beq.n	405ec4 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  405eba:	4b4c      	ldr	r3, [pc, #304]	; (405fec <SystemCoreClockUpdate+0x158>)
  405ebc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405ec0:	601a      	str	r2, [r3, #0]
    break;
  405ec2:	e06f      	b.n	405fa4 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405ec4:	4b49      	ldr	r3, [pc, #292]	; (405fec <SystemCoreClockUpdate+0x158>)
  405ec6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  405eca:	601a      	str	r2, [r3, #0]
    break;
  405ecc:	e06a      	b.n	405fa4 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405ece:	4b45      	ldr	r3, [pc, #276]	; (405fe4 <SystemCoreClockUpdate+0x150>)
  405ed0:	6a1b      	ldr	r3, [r3, #32]
  405ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  405ed6:	2b00      	cmp	r3, #0
  405ed8:	d003      	beq.n	405ee2 <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  405eda:	4b44      	ldr	r3, [pc, #272]	; (405fec <SystemCoreClockUpdate+0x158>)
  405edc:	4a44      	ldr	r2, [pc, #272]	; (405ff0 <SystemCoreClockUpdate+0x15c>)
  405ede:	601a      	str	r2, [r3, #0]
    break;
  405ee0:	e060      	b.n	405fa4 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405ee2:	4b42      	ldr	r3, [pc, #264]	; (405fec <SystemCoreClockUpdate+0x158>)
  405ee4:	4a43      	ldr	r2, [pc, #268]	; (405ff4 <SystemCoreClockUpdate+0x160>)
  405ee6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405ee8:	4b3e      	ldr	r3, [pc, #248]	; (405fe4 <SystemCoreClockUpdate+0x150>)
  405eea:	6a1b      	ldr	r3, [r3, #32]
  405eec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405ef0:	2b10      	cmp	r3, #16
  405ef2:	d004      	beq.n	405efe <SystemCoreClockUpdate+0x6a>
  405ef4:	2b20      	cmp	r3, #32
  405ef6:	d008      	beq.n	405f0a <SystemCoreClockUpdate+0x76>
  405ef8:	2b00      	cmp	r3, #0
  405efa:	d00e      	beq.n	405f1a <SystemCoreClockUpdate+0x86>
          break;
  405efc:	e00e      	b.n	405f1c <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  405efe:	4b3b      	ldr	r3, [pc, #236]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f00:	681b      	ldr	r3, [r3, #0]
  405f02:	005b      	lsls	r3, r3, #1
  405f04:	4a39      	ldr	r2, [pc, #228]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f06:	6013      	str	r3, [r2, #0]
          break;
  405f08:	e008      	b.n	405f1c <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  405f0a:	4b38      	ldr	r3, [pc, #224]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f0c:	681a      	ldr	r2, [r3, #0]
  405f0e:	4613      	mov	r3, r2
  405f10:	005b      	lsls	r3, r3, #1
  405f12:	4413      	add	r3, r2
  405f14:	4a35      	ldr	r2, [pc, #212]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f16:	6013      	str	r3, [r2, #0]
          break;
  405f18:	e000      	b.n	405f1c <SystemCoreClockUpdate+0x88>
          break;
  405f1a:	bf00      	nop
    break;
  405f1c:	e042      	b.n	405fa4 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405f1e:	4b31      	ldr	r3, [pc, #196]	; (405fe4 <SystemCoreClockUpdate+0x150>)
  405f20:	6a1b      	ldr	r3, [r3, #32]
  405f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  405f26:	2b00      	cmp	r3, #0
  405f28:	d003      	beq.n	405f32 <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  405f2a:	4b30      	ldr	r3, [pc, #192]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f2c:	4a30      	ldr	r2, [pc, #192]	; (405ff0 <SystemCoreClockUpdate+0x15c>)
  405f2e:	601a      	str	r2, [r3, #0]
  405f30:	e01c      	b.n	405f6c <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405f32:	4b2e      	ldr	r3, [pc, #184]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f34:	4a2f      	ldr	r2, [pc, #188]	; (405ff4 <SystemCoreClockUpdate+0x160>)
  405f36:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405f38:	4b2a      	ldr	r3, [pc, #168]	; (405fe4 <SystemCoreClockUpdate+0x150>)
  405f3a:	6a1b      	ldr	r3, [r3, #32]
  405f3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405f40:	2b10      	cmp	r3, #16
  405f42:	d004      	beq.n	405f4e <SystemCoreClockUpdate+0xba>
  405f44:	2b20      	cmp	r3, #32
  405f46:	d008      	beq.n	405f5a <SystemCoreClockUpdate+0xc6>
  405f48:	2b00      	cmp	r3, #0
  405f4a:	d00e      	beq.n	405f6a <SystemCoreClockUpdate+0xd6>
          break;
  405f4c:	e00e      	b.n	405f6c <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  405f4e:	4b27      	ldr	r3, [pc, #156]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f50:	681b      	ldr	r3, [r3, #0]
  405f52:	005b      	lsls	r3, r3, #1
  405f54:	4a25      	ldr	r2, [pc, #148]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f56:	6013      	str	r3, [r2, #0]
          break;
  405f58:	e008      	b.n	405f6c <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  405f5a:	4b24      	ldr	r3, [pc, #144]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f5c:	681a      	ldr	r2, [r3, #0]
  405f5e:	4613      	mov	r3, r2
  405f60:	005b      	lsls	r3, r3, #1
  405f62:	4413      	add	r3, r2
  405f64:	4a21      	ldr	r2, [pc, #132]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f66:	6013      	str	r3, [r2, #0]
          break;
  405f68:	e000      	b.n	405f6c <SystemCoreClockUpdate+0xd8>
          break;
  405f6a:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  405f6c:	4b1d      	ldr	r3, [pc, #116]	; (405fe4 <SystemCoreClockUpdate+0x150>)
  405f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405f70:	f003 0303 	and.w	r3, r3, #3
  405f74:	2b02      	cmp	r3, #2
  405f76:	d114      	bne.n	405fa2 <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405f78:	4b1a      	ldr	r3, [pc, #104]	; (405fe4 <SystemCoreClockUpdate+0x150>)
  405f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  405f7c:	0c1b      	lsrs	r3, r3, #16
  405f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
  405f82:	3301      	adds	r3, #1
  405f84:	4a19      	ldr	r2, [pc, #100]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f86:	6812      	ldr	r2, [r2, #0]
  405f88:	fb02 f303 	mul.w	r3, r2, r3
  405f8c:	4a17      	ldr	r2, [pc, #92]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f8e:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405f90:	4b14      	ldr	r3, [pc, #80]	; (405fe4 <SystemCoreClockUpdate+0x150>)
  405f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  405f94:	b2db      	uxtb	r3, r3
  405f96:	4a15      	ldr	r2, [pc, #84]	; (405fec <SystemCoreClockUpdate+0x158>)
  405f98:	6812      	ldr	r2, [r2, #0]
  405f9a:	fbb2 f3f3 	udiv	r3, r2, r3
  405f9e:	4a13      	ldr	r2, [pc, #76]	; (405fec <SystemCoreClockUpdate+0x158>)
  405fa0:	6013      	str	r3, [r2, #0]
    break;
  405fa2:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  405fa4:	4b0f      	ldr	r3, [pc, #60]	; (405fe4 <SystemCoreClockUpdate+0x150>)
  405fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405fac:	2b70      	cmp	r3, #112	; 0x70
  405fae:	d108      	bne.n	405fc2 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  405fb0:	4b0e      	ldr	r3, [pc, #56]	; (405fec <SystemCoreClockUpdate+0x158>)
  405fb2:	681b      	ldr	r3, [r3, #0]
  405fb4:	4a10      	ldr	r2, [pc, #64]	; (405ff8 <SystemCoreClockUpdate+0x164>)
  405fb6:	fba2 2303 	umull	r2, r3, r2, r3
  405fba:	085b      	lsrs	r3, r3, #1
  405fbc:	4a0b      	ldr	r2, [pc, #44]	; (405fec <SystemCoreClockUpdate+0x158>)
  405fbe:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  405fc0:	e00a      	b.n	405fd8 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  405fc2:	4b08      	ldr	r3, [pc, #32]	; (405fe4 <SystemCoreClockUpdate+0x150>)
  405fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405fc6:	091b      	lsrs	r3, r3, #4
  405fc8:	f003 0307 	and.w	r3, r3, #7
  405fcc:	4a07      	ldr	r2, [pc, #28]	; (405fec <SystemCoreClockUpdate+0x158>)
  405fce:	6812      	ldr	r2, [r2, #0]
  405fd0:	fa22 f303 	lsr.w	r3, r2, r3
  405fd4:	4a05      	ldr	r2, [pc, #20]	; (405fec <SystemCoreClockUpdate+0x158>)
  405fd6:	6013      	str	r3, [r2, #0]
}
  405fd8:	bf00      	nop
  405fda:	46bd      	mov	sp, r7
  405fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405fe0:	4770      	bx	lr
  405fe2:	bf00      	nop
  405fe4:	400e0600 	.word	0x400e0600
  405fe8:	400e1810 	.word	0x400e1810
  405fec:	20400038 	.word	0x20400038
  405ff0:	00b71b00 	.word	0x00b71b00
  405ff4:	003d0900 	.word	0x003d0900
  405ff8:	aaaaaaab 	.word	0xaaaaaaab

00405ffc <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  405ffc:	b480      	push	{r7}
  405ffe:	b083      	sub	sp, #12
  406000:	af00      	add	r7, sp, #0
  406002:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  406004:	687b      	ldr	r3, [r7, #4]
  406006:	4a1d      	ldr	r2, [pc, #116]	; (40607c <system_init_flash+0x80>)
  406008:	4293      	cmp	r3, r2
  40600a:	d804      	bhi.n	406016 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40600c:	4b1c      	ldr	r3, [pc, #112]	; (406080 <system_init_flash+0x84>)
  40600e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  406012:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  406014:	e02b      	b.n	40606e <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  406016:	687b      	ldr	r3, [r7, #4]
  406018:	4a1a      	ldr	r2, [pc, #104]	; (406084 <system_init_flash+0x88>)
  40601a:	4293      	cmp	r3, r2
  40601c:	d803      	bhi.n	406026 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40601e:	4b18      	ldr	r3, [pc, #96]	; (406080 <system_init_flash+0x84>)
  406020:	4a19      	ldr	r2, [pc, #100]	; (406088 <system_init_flash+0x8c>)
  406022:	601a      	str	r2, [r3, #0]
}
  406024:	e023      	b.n	40606e <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  406026:	687b      	ldr	r3, [r7, #4]
  406028:	4a18      	ldr	r2, [pc, #96]	; (40608c <system_init_flash+0x90>)
  40602a:	4293      	cmp	r3, r2
  40602c:	d803      	bhi.n	406036 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40602e:	4b14      	ldr	r3, [pc, #80]	; (406080 <system_init_flash+0x84>)
  406030:	4a17      	ldr	r2, [pc, #92]	; (406090 <system_init_flash+0x94>)
  406032:	601a      	str	r2, [r3, #0]
}
  406034:	e01b      	b.n	40606e <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  406036:	687b      	ldr	r3, [r7, #4]
  406038:	4a16      	ldr	r2, [pc, #88]	; (406094 <system_init_flash+0x98>)
  40603a:	4293      	cmp	r3, r2
  40603c:	d803      	bhi.n	406046 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40603e:	4b10      	ldr	r3, [pc, #64]	; (406080 <system_init_flash+0x84>)
  406040:	4a15      	ldr	r2, [pc, #84]	; (406098 <system_init_flash+0x9c>)
  406042:	601a      	str	r2, [r3, #0]
}
  406044:	e013      	b.n	40606e <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  406046:	687b      	ldr	r3, [r7, #4]
  406048:	4a14      	ldr	r2, [pc, #80]	; (40609c <system_init_flash+0xa0>)
  40604a:	4293      	cmp	r3, r2
  40604c:	d804      	bhi.n	406058 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40604e:	4b0c      	ldr	r3, [pc, #48]	; (406080 <system_init_flash+0x84>)
  406050:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  406054:	601a      	str	r2, [r3, #0]
}
  406056:	e00a      	b.n	40606e <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  406058:	687b      	ldr	r3, [r7, #4]
  40605a:	4a11      	ldr	r2, [pc, #68]	; (4060a0 <system_init_flash+0xa4>)
  40605c:	4293      	cmp	r3, r2
  40605e:	d803      	bhi.n	406068 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  406060:	4b07      	ldr	r3, [pc, #28]	; (406080 <system_init_flash+0x84>)
  406062:	4a10      	ldr	r2, [pc, #64]	; (4060a4 <system_init_flash+0xa8>)
  406064:	601a      	str	r2, [r3, #0]
}
  406066:	e002      	b.n	40606e <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  406068:	4b05      	ldr	r3, [pc, #20]	; (406080 <system_init_flash+0x84>)
  40606a:	4a0f      	ldr	r2, [pc, #60]	; (4060a8 <system_init_flash+0xac>)
  40606c:	601a      	str	r2, [r3, #0]
}
  40606e:	bf00      	nop
  406070:	370c      	adds	r7, #12
  406072:	46bd      	mov	sp, r7
  406074:	f85d 7b04 	ldr.w	r7, [sp], #4
  406078:	4770      	bx	lr
  40607a:	bf00      	nop
  40607c:	015ef3bf 	.word	0x015ef3bf
  406080:	400e0c00 	.word	0x400e0c00
  406084:	02bde77f 	.word	0x02bde77f
  406088:	04000100 	.word	0x04000100
  40608c:	041cdb3f 	.word	0x041cdb3f
  406090:	04000200 	.word	0x04000200
  406094:	057bceff 	.word	0x057bceff
  406098:	04000300 	.word	0x04000300
  40609c:	06dac2bf 	.word	0x06dac2bf
  4060a0:	0839b67f 	.word	0x0839b67f
  4060a4:	04000500 	.word	0x04000500
  4060a8:	04000600 	.word	0x04000600

004060ac <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4060ac:	b480      	push	{r7}
  4060ae:	b085      	sub	sp, #20
  4060b0:	af00      	add	r7, sp, #0
  4060b2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4060b4:	4b10      	ldr	r3, [pc, #64]	; (4060f8 <_sbrk+0x4c>)
  4060b6:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4060b8:	4b10      	ldr	r3, [pc, #64]	; (4060fc <_sbrk+0x50>)
  4060ba:	681b      	ldr	r3, [r3, #0]
  4060bc:	2b00      	cmp	r3, #0
  4060be:	d102      	bne.n	4060c6 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4060c0:	4b0e      	ldr	r3, [pc, #56]	; (4060fc <_sbrk+0x50>)
  4060c2:	4a0f      	ldr	r2, [pc, #60]	; (406100 <_sbrk+0x54>)
  4060c4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4060c6:	4b0d      	ldr	r3, [pc, #52]	; (4060fc <_sbrk+0x50>)
  4060c8:	681b      	ldr	r3, [r3, #0]
  4060ca:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4060cc:	68ba      	ldr	r2, [r7, #8]
  4060ce:	687b      	ldr	r3, [r7, #4]
  4060d0:	441a      	add	r2, r3
  4060d2:	68fb      	ldr	r3, [r7, #12]
  4060d4:	429a      	cmp	r2, r3
  4060d6:	dd02      	ble.n	4060de <_sbrk+0x32>
		return (caddr_t) -1;	
  4060d8:	f04f 33ff 	mov.w	r3, #4294967295
  4060dc:	e006      	b.n	4060ec <_sbrk+0x40>
	}

	heap += incr;
  4060de:	4b07      	ldr	r3, [pc, #28]	; (4060fc <_sbrk+0x50>)
  4060e0:	681a      	ldr	r2, [r3, #0]
  4060e2:	687b      	ldr	r3, [r7, #4]
  4060e4:	4413      	add	r3, r2
  4060e6:	4a05      	ldr	r2, [pc, #20]	; (4060fc <_sbrk+0x50>)
  4060e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4060ea:	68bb      	ldr	r3, [r7, #8]
}
  4060ec:	4618      	mov	r0, r3
  4060ee:	3714      	adds	r7, #20
  4060f0:	46bd      	mov	sp, r7
  4060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4060f6:	4770      	bx	lr
  4060f8:	2045fffc 	.word	0x2045fffc
  4060fc:	2040cb18 	.word	0x2040cb18
  406100:	204245f0 	.word	0x204245f0

00406104 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  406104:	b480      	push	{r7}
  406106:	b083      	sub	sp, #12
  406108:	af00      	add	r7, sp, #0
  40610a:	6078      	str	r0, [r7, #4]
	return -1;
  40610c:	f04f 33ff 	mov.w	r3, #4294967295
}
  406110:	4618      	mov	r0, r3
  406112:	370c      	adds	r7, #12
  406114:	46bd      	mov	sp, r7
  406116:	f85d 7b04 	ldr.w	r7, [sp], #4
  40611a:	4770      	bx	lr

0040611c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  40611c:	b480      	push	{r7}
  40611e:	b083      	sub	sp, #12
  406120:	af00      	add	r7, sp, #0
  406122:	6078      	str	r0, [r7, #4]
  406124:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  406126:	683b      	ldr	r3, [r7, #0]
  406128:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40612c:	605a      	str	r2, [r3, #4]

	return 0;
  40612e:	2300      	movs	r3, #0
}
  406130:	4618      	mov	r0, r3
  406132:	370c      	adds	r7, #12
  406134:	46bd      	mov	sp, r7
  406136:	f85d 7b04 	ldr.w	r7, [sp], #4
  40613a:	4770      	bx	lr

0040613c <_isatty>:

extern int _isatty(int file)
{
  40613c:	b480      	push	{r7}
  40613e:	b083      	sub	sp, #12
  406140:	af00      	add	r7, sp, #0
  406142:	6078      	str	r0, [r7, #4]
	return 1;
  406144:	2301      	movs	r3, #1
}
  406146:	4618      	mov	r0, r3
  406148:	370c      	adds	r7, #12
  40614a:	46bd      	mov	sp, r7
  40614c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406150:	4770      	bx	lr

00406152 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  406152:	b480      	push	{r7}
  406154:	b085      	sub	sp, #20
  406156:	af00      	add	r7, sp, #0
  406158:	60f8      	str	r0, [r7, #12]
  40615a:	60b9      	str	r1, [r7, #8]
  40615c:	607a      	str	r2, [r7, #4]
	return 0;
  40615e:	2300      	movs	r3, #0
}
  406160:	4618      	mov	r0, r3
  406162:	3714      	adds	r7, #20
  406164:	46bd      	mov	sp, r7
  406166:	f85d 7b04 	ldr.w	r7, [sp], #4
  40616a:	4770      	bx	lr

0040616c <__aeabi_drsub>:
  40616c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406170:	e002      	b.n	406178 <__adddf3>
  406172:	bf00      	nop

00406174 <__aeabi_dsub>:
  406174:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406178 <__adddf3>:
  406178:	b530      	push	{r4, r5, lr}
  40617a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40617e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406182:	ea94 0f05 	teq	r4, r5
  406186:	bf08      	it	eq
  406188:	ea90 0f02 	teqeq	r0, r2
  40618c:	bf1f      	itttt	ne
  40618e:	ea54 0c00 	orrsne.w	ip, r4, r0
  406192:	ea55 0c02 	orrsne.w	ip, r5, r2
  406196:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40619a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40619e:	f000 80e2 	beq.w	406366 <__adddf3+0x1ee>
  4061a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4061a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4061aa:	bfb8      	it	lt
  4061ac:	426d      	neglt	r5, r5
  4061ae:	dd0c      	ble.n	4061ca <__adddf3+0x52>
  4061b0:	442c      	add	r4, r5
  4061b2:	ea80 0202 	eor.w	r2, r0, r2
  4061b6:	ea81 0303 	eor.w	r3, r1, r3
  4061ba:	ea82 0000 	eor.w	r0, r2, r0
  4061be:	ea83 0101 	eor.w	r1, r3, r1
  4061c2:	ea80 0202 	eor.w	r2, r0, r2
  4061c6:	ea81 0303 	eor.w	r3, r1, r3
  4061ca:	2d36      	cmp	r5, #54	; 0x36
  4061cc:	bf88      	it	hi
  4061ce:	bd30      	pophi	{r4, r5, pc}
  4061d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4061d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4061d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4061dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4061e0:	d002      	beq.n	4061e8 <__adddf3+0x70>
  4061e2:	4240      	negs	r0, r0
  4061e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4061e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4061ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4061f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4061f4:	d002      	beq.n	4061fc <__adddf3+0x84>
  4061f6:	4252      	negs	r2, r2
  4061f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4061fc:	ea94 0f05 	teq	r4, r5
  406200:	f000 80a7 	beq.w	406352 <__adddf3+0x1da>
  406204:	f1a4 0401 	sub.w	r4, r4, #1
  406208:	f1d5 0e20 	rsbs	lr, r5, #32
  40620c:	db0d      	blt.n	40622a <__adddf3+0xb2>
  40620e:	fa02 fc0e 	lsl.w	ip, r2, lr
  406212:	fa22 f205 	lsr.w	r2, r2, r5
  406216:	1880      	adds	r0, r0, r2
  406218:	f141 0100 	adc.w	r1, r1, #0
  40621c:	fa03 f20e 	lsl.w	r2, r3, lr
  406220:	1880      	adds	r0, r0, r2
  406222:	fa43 f305 	asr.w	r3, r3, r5
  406226:	4159      	adcs	r1, r3
  406228:	e00e      	b.n	406248 <__adddf3+0xd0>
  40622a:	f1a5 0520 	sub.w	r5, r5, #32
  40622e:	f10e 0e20 	add.w	lr, lr, #32
  406232:	2a01      	cmp	r2, #1
  406234:	fa03 fc0e 	lsl.w	ip, r3, lr
  406238:	bf28      	it	cs
  40623a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40623e:	fa43 f305 	asr.w	r3, r3, r5
  406242:	18c0      	adds	r0, r0, r3
  406244:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406248:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40624c:	d507      	bpl.n	40625e <__adddf3+0xe6>
  40624e:	f04f 0e00 	mov.w	lr, #0
  406252:	f1dc 0c00 	rsbs	ip, ip, #0
  406256:	eb7e 0000 	sbcs.w	r0, lr, r0
  40625a:	eb6e 0101 	sbc.w	r1, lr, r1
  40625e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406262:	d31b      	bcc.n	40629c <__adddf3+0x124>
  406264:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406268:	d30c      	bcc.n	406284 <__adddf3+0x10c>
  40626a:	0849      	lsrs	r1, r1, #1
  40626c:	ea5f 0030 	movs.w	r0, r0, rrx
  406270:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406274:	f104 0401 	add.w	r4, r4, #1
  406278:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40627c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406280:	f080 809a 	bcs.w	4063b8 <__adddf3+0x240>
  406284:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406288:	bf08      	it	eq
  40628a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40628e:	f150 0000 	adcs.w	r0, r0, #0
  406292:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406296:	ea41 0105 	orr.w	r1, r1, r5
  40629a:	bd30      	pop	{r4, r5, pc}
  40629c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4062a0:	4140      	adcs	r0, r0
  4062a2:	eb41 0101 	adc.w	r1, r1, r1
  4062a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4062aa:	f1a4 0401 	sub.w	r4, r4, #1
  4062ae:	d1e9      	bne.n	406284 <__adddf3+0x10c>
  4062b0:	f091 0f00 	teq	r1, #0
  4062b4:	bf04      	itt	eq
  4062b6:	4601      	moveq	r1, r0
  4062b8:	2000      	moveq	r0, #0
  4062ba:	fab1 f381 	clz	r3, r1
  4062be:	bf08      	it	eq
  4062c0:	3320      	addeq	r3, #32
  4062c2:	f1a3 030b 	sub.w	r3, r3, #11
  4062c6:	f1b3 0220 	subs.w	r2, r3, #32
  4062ca:	da0c      	bge.n	4062e6 <__adddf3+0x16e>
  4062cc:	320c      	adds	r2, #12
  4062ce:	dd08      	ble.n	4062e2 <__adddf3+0x16a>
  4062d0:	f102 0c14 	add.w	ip, r2, #20
  4062d4:	f1c2 020c 	rsb	r2, r2, #12
  4062d8:	fa01 f00c 	lsl.w	r0, r1, ip
  4062dc:	fa21 f102 	lsr.w	r1, r1, r2
  4062e0:	e00c      	b.n	4062fc <__adddf3+0x184>
  4062e2:	f102 0214 	add.w	r2, r2, #20
  4062e6:	bfd8      	it	le
  4062e8:	f1c2 0c20 	rsble	ip, r2, #32
  4062ec:	fa01 f102 	lsl.w	r1, r1, r2
  4062f0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4062f4:	bfdc      	itt	le
  4062f6:	ea41 010c 	orrle.w	r1, r1, ip
  4062fa:	4090      	lslle	r0, r2
  4062fc:	1ae4      	subs	r4, r4, r3
  4062fe:	bfa2      	ittt	ge
  406300:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406304:	4329      	orrge	r1, r5
  406306:	bd30      	popge	{r4, r5, pc}
  406308:	ea6f 0404 	mvn.w	r4, r4
  40630c:	3c1f      	subs	r4, #31
  40630e:	da1c      	bge.n	40634a <__adddf3+0x1d2>
  406310:	340c      	adds	r4, #12
  406312:	dc0e      	bgt.n	406332 <__adddf3+0x1ba>
  406314:	f104 0414 	add.w	r4, r4, #20
  406318:	f1c4 0220 	rsb	r2, r4, #32
  40631c:	fa20 f004 	lsr.w	r0, r0, r4
  406320:	fa01 f302 	lsl.w	r3, r1, r2
  406324:	ea40 0003 	orr.w	r0, r0, r3
  406328:	fa21 f304 	lsr.w	r3, r1, r4
  40632c:	ea45 0103 	orr.w	r1, r5, r3
  406330:	bd30      	pop	{r4, r5, pc}
  406332:	f1c4 040c 	rsb	r4, r4, #12
  406336:	f1c4 0220 	rsb	r2, r4, #32
  40633a:	fa20 f002 	lsr.w	r0, r0, r2
  40633e:	fa01 f304 	lsl.w	r3, r1, r4
  406342:	ea40 0003 	orr.w	r0, r0, r3
  406346:	4629      	mov	r1, r5
  406348:	bd30      	pop	{r4, r5, pc}
  40634a:	fa21 f004 	lsr.w	r0, r1, r4
  40634e:	4629      	mov	r1, r5
  406350:	bd30      	pop	{r4, r5, pc}
  406352:	f094 0f00 	teq	r4, #0
  406356:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40635a:	bf06      	itte	eq
  40635c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406360:	3401      	addeq	r4, #1
  406362:	3d01      	subne	r5, #1
  406364:	e74e      	b.n	406204 <__adddf3+0x8c>
  406366:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40636a:	bf18      	it	ne
  40636c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406370:	d029      	beq.n	4063c6 <__adddf3+0x24e>
  406372:	ea94 0f05 	teq	r4, r5
  406376:	bf08      	it	eq
  406378:	ea90 0f02 	teqeq	r0, r2
  40637c:	d005      	beq.n	40638a <__adddf3+0x212>
  40637e:	ea54 0c00 	orrs.w	ip, r4, r0
  406382:	bf04      	itt	eq
  406384:	4619      	moveq	r1, r3
  406386:	4610      	moveq	r0, r2
  406388:	bd30      	pop	{r4, r5, pc}
  40638a:	ea91 0f03 	teq	r1, r3
  40638e:	bf1e      	ittt	ne
  406390:	2100      	movne	r1, #0
  406392:	2000      	movne	r0, #0
  406394:	bd30      	popne	{r4, r5, pc}
  406396:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40639a:	d105      	bne.n	4063a8 <__adddf3+0x230>
  40639c:	0040      	lsls	r0, r0, #1
  40639e:	4149      	adcs	r1, r1
  4063a0:	bf28      	it	cs
  4063a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4063a6:	bd30      	pop	{r4, r5, pc}
  4063a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4063ac:	bf3c      	itt	cc
  4063ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4063b2:	bd30      	popcc	{r4, r5, pc}
  4063b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4063b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4063bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4063c0:	f04f 0000 	mov.w	r0, #0
  4063c4:	bd30      	pop	{r4, r5, pc}
  4063c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4063ca:	bf1a      	itte	ne
  4063cc:	4619      	movne	r1, r3
  4063ce:	4610      	movne	r0, r2
  4063d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4063d4:	bf1c      	itt	ne
  4063d6:	460b      	movne	r3, r1
  4063d8:	4602      	movne	r2, r0
  4063da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4063de:	bf06      	itte	eq
  4063e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4063e4:	ea91 0f03 	teqeq	r1, r3
  4063e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4063ec:	bd30      	pop	{r4, r5, pc}
  4063ee:	bf00      	nop

004063f0 <__aeabi_ui2d>:
  4063f0:	f090 0f00 	teq	r0, #0
  4063f4:	bf04      	itt	eq
  4063f6:	2100      	moveq	r1, #0
  4063f8:	4770      	bxeq	lr
  4063fa:	b530      	push	{r4, r5, lr}
  4063fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406400:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406404:	f04f 0500 	mov.w	r5, #0
  406408:	f04f 0100 	mov.w	r1, #0
  40640c:	e750      	b.n	4062b0 <__adddf3+0x138>
  40640e:	bf00      	nop

00406410 <__aeabi_i2d>:
  406410:	f090 0f00 	teq	r0, #0
  406414:	bf04      	itt	eq
  406416:	2100      	moveq	r1, #0
  406418:	4770      	bxeq	lr
  40641a:	b530      	push	{r4, r5, lr}
  40641c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406420:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406424:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406428:	bf48      	it	mi
  40642a:	4240      	negmi	r0, r0
  40642c:	f04f 0100 	mov.w	r1, #0
  406430:	e73e      	b.n	4062b0 <__adddf3+0x138>
  406432:	bf00      	nop

00406434 <__aeabi_f2d>:
  406434:	0042      	lsls	r2, r0, #1
  406436:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40643a:	ea4f 0131 	mov.w	r1, r1, rrx
  40643e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  406442:	bf1f      	itttt	ne
  406444:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406448:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40644c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406450:	4770      	bxne	lr
  406452:	f092 0f00 	teq	r2, #0
  406456:	bf14      	ite	ne
  406458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40645c:	4770      	bxeq	lr
  40645e:	b530      	push	{r4, r5, lr}
  406460:	f44f 7460 	mov.w	r4, #896	; 0x380
  406464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40646c:	e720      	b.n	4062b0 <__adddf3+0x138>
  40646e:	bf00      	nop

00406470 <__aeabi_ul2d>:
  406470:	ea50 0201 	orrs.w	r2, r0, r1
  406474:	bf08      	it	eq
  406476:	4770      	bxeq	lr
  406478:	b530      	push	{r4, r5, lr}
  40647a:	f04f 0500 	mov.w	r5, #0
  40647e:	e00a      	b.n	406496 <__aeabi_l2d+0x16>

00406480 <__aeabi_l2d>:
  406480:	ea50 0201 	orrs.w	r2, r0, r1
  406484:	bf08      	it	eq
  406486:	4770      	bxeq	lr
  406488:	b530      	push	{r4, r5, lr}
  40648a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40648e:	d502      	bpl.n	406496 <__aeabi_l2d+0x16>
  406490:	4240      	negs	r0, r0
  406492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406496:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40649a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40649e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4064a2:	f43f aedc 	beq.w	40625e <__adddf3+0xe6>
  4064a6:	f04f 0203 	mov.w	r2, #3
  4064aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4064ae:	bf18      	it	ne
  4064b0:	3203      	addne	r2, #3
  4064b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4064b6:	bf18      	it	ne
  4064b8:	3203      	addne	r2, #3
  4064ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4064be:	f1c2 0320 	rsb	r3, r2, #32
  4064c2:	fa00 fc03 	lsl.w	ip, r0, r3
  4064c6:	fa20 f002 	lsr.w	r0, r0, r2
  4064ca:	fa01 fe03 	lsl.w	lr, r1, r3
  4064ce:	ea40 000e 	orr.w	r0, r0, lr
  4064d2:	fa21 f102 	lsr.w	r1, r1, r2
  4064d6:	4414      	add	r4, r2
  4064d8:	e6c1      	b.n	40625e <__adddf3+0xe6>
  4064da:	bf00      	nop

004064dc <__aeabi_dmul>:
  4064dc:	b570      	push	{r4, r5, r6, lr}
  4064de:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4064e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4064e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4064ea:	bf1d      	ittte	ne
  4064ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4064f0:	ea94 0f0c 	teqne	r4, ip
  4064f4:	ea95 0f0c 	teqne	r5, ip
  4064f8:	f000 f8de 	bleq	4066b8 <__aeabi_dmul+0x1dc>
  4064fc:	442c      	add	r4, r5
  4064fe:	ea81 0603 	eor.w	r6, r1, r3
  406502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  406506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40650a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40650e:	bf18      	it	ne
  406510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  406514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40651c:	d038      	beq.n	406590 <__aeabi_dmul+0xb4>
  40651e:	fba0 ce02 	umull	ip, lr, r0, r2
  406522:	f04f 0500 	mov.w	r5, #0
  406526:	fbe1 e502 	umlal	lr, r5, r1, r2
  40652a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40652e:	fbe0 e503 	umlal	lr, r5, r0, r3
  406532:	f04f 0600 	mov.w	r6, #0
  406536:	fbe1 5603 	umlal	r5, r6, r1, r3
  40653a:	f09c 0f00 	teq	ip, #0
  40653e:	bf18      	it	ne
  406540:	f04e 0e01 	orrne.w	lr, lr, #1
  406544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  406548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40654c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  406550:	d204      	bcs.n	40655c <__aeabi_dmul+0x80>
  406552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  406556:	416d      	adcs	r5, r5
  406558:	eb46 0606 	adc.w	r6, r6, r6
  40655c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  406560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  406564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  406568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40656c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  406570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406574:	bf88      	it	hi
  406576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40657a:	d81e      	bhi.n	4065ba <__aeabi_dmul+0xde>
  40657c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  406580:	bf08      	it	eq
  406582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  406586:	f150 0000 	adcs.w	r0, r0, #0
  40658a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40658e:	bd70      	pop	{r4, r5, r6, pc}
  406590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  406594:	ea46 0101 	orr.w	r1, r6, r1
  406598:	ea40 0002 	orr.w	r0, r0, r2
  40659c:	ea81 0103 	eor.w	r1, r1, r3
  4065a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4065a4:	bfc2      	ittt	gt
  4065a6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4065aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4065ae:	bd70      	popgt	{r4, r5, r6, pc}
  4065b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4065b4:	f04f 0e00 	mov.w	lr, #0
  4065b8:	3c01      	subs	r4, #1
  4065ba:	f300 80ab 	bgt.w	406714 <__aeabi_dmul+0x238>
  4065be:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4065c2:	bfde      	ittt	le
  4065c4:	2000      	movle	r0, #0
  4065c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4065ca:	bd70      	pople	{r4, r5, r6, pc}
  4065cc:	f1c4 0400 	rsb	r4, r4, #0
  4065d0:	3c20      	subs	r4, #32
  4065d2:	da35      	bge.n	406640 <__aeabi_dmul+0x164>
  4065d4:	340c      	adds	r4, #12
  4065d6:	dc1b      	bgt.n	406610 <__aeabi_dmul+0x134>
  4065d8:	f104 0414 	add.w	r4, r4, #20
  4065dc:	f1c4 0520 	rsb	r5, r4, #32
  4065e0:	fa00 f305 	lsl.w	r3, r0, r5
  4065e4:	fa20 f004 	lsr.w	r0, r0, r4
  4065e8:	fa01 f205 	lsl.w	r2, r1, r5
  4065ec:	ea40 0002 	orr.w	r0, r0, r2
  4065f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4065f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4065f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4065fc:	fa21 f604 	lsr.w	r6, r1, r4
  406600:	eb42 0106 	adc.w	r1, r2, r6
  406604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406608:	bf08      	it	eq
  40660a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40660e:	bd70      	pop	{r4, r5, r6, pc}
  406610:	f1c4 040c 	rsb	r4, r4, #12
  406614:	f1c4 0520 	rsb	r5, r4, #32
  406618:	fa00 f304 	lsl.w	r3, r0, r4
  40661c:	fa20 f005 	lsr.w	r0, r0, r5
  406620:	fa01 f204 	lsl.w	r2, r1, r4
  406624:	ea40 0002 	orr.w	r0, r0, r2
  406628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40662c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406630:	f141 0100 	adc.w	r1, r1, #0
  406634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406638:	bf08      	it	eq
  40663a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40663e:	bd70      	pop	{r4, r5, r6, pc}
  406640:	f1c4 0520 	rsb	r5, r4, #32
  406644:	fa00 f205 	lsl.w	r2, r0, r5
  406648:	ea4e 0e02 	orr.w	lr, lr, r2
  40664c:	fa20 f304 	lsr.w	r3, r0, r4
  406650:	fa01 f205 	lsl.w	r2, r1, r5
  406654:	ea43 0302 	orr.w	r3, r3, r2
  406658:	fa21 f004 	lsr.w	r0, r1, r4
  40665c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406660:	fa21 f204 	lsr.w	r2, r1, r4
  406664:	ea20 0002 	bic.w	r0, r0, r2
  406668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40666c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406670:	bf08      	it	eq
  406672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406676:	bd70      	pop	{r4, r5, r6, pc}
  406678:	f094 0f00 	teq	r4, #0
  40667c:	d10f      	bne.n	40669e <__aeabi_dmul+0x1c2>
  40667e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  406682:	0040      	lsls	r0, r0, #1
  406684:	eb41 0101 	adc.w	r1, r1, r1
  406688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40668c:	bf08      	it	eq
  40668e:	3c01      	subeq	r4, #1
  406690:	d0f7      	beq.n	406682 <__aeabi_dmul+0x1a6>
  406692:	ea41 0106 	orr.w	r1, r1, r6
  406696:	f095 0f00 	teq	r5, #0
  40669a:	bf18      	it	ne
  40669c:	4770      	bxne	lr
  40669e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4066a2:	0052      	lsls	r2, r2, #1
  4066a4:	eb43 0303 	adc.w	r3, r3, r3
  4066a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4066ac:	bf08      	it	eq
  4066ae:	3d01      	subeq	r5, #1
  4066b0:	d0f7      	beq.n	4066a2 <__aeabi_dmul+0x1c6>
  4066b2:	ea43 0306 	orr.w	r3, r3, r6
  4066b6:	4770      	bx	lr
  4066b8:	ea94 0f0c 	teq	r4, ip
  4066bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4066c0:	bf18      	it	ne
  4066c2:	ea95 0f0c 	teqne	r5, ip
  4066c6:	d00c      	beq.n	4066e2 <__aeabi_dmul+0x206>
  4066c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4066cc:	bf18      	it	ne
  4066ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4066d2:	d1d1      	bne.n	406678 <__aeabi_dmul+0x19c>
  4066d4:	ea81 0103 	eor.w	r1, r1, r3
  4066d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4066dc:	f04f 0000 	mov.w	r0, #0
  4066e0:	bd70      	pop	{r4, r5, r6, pc}
  4066e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4066e6:	bf06      	itte	eq
  4066e8:	4610      	moveq	r0, r2
  4066ea:	4619      	moveq	r1, r3
  4066ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4066f0:	d019      	beq.n	406726 <__aeabi_dmul+0x24a>
  4066f2:	ea94 0f0c 	teq	r4, ip
  4066f6:	d102      	bne.n	4066fe <__aeabi_dmul+0x222>
  4066f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4066fc:	d113      	bne.n	406726 <__aeabi_dmul+0x24a>
  4066fe:	ea95 0f0c 	teq	r5, ip
  406702:	d105      	bne.n	406710 <__aeabi_dmul+0x234>
  406704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406708:	bf1c      	itt	ne
  40670a:	4610      	movne	r0, r2
  40670c:	4619      	movne	r1, r3
  40670e:	d10a      	bne.n	406726 <__aeabi_dmul+0x24a>
  406710:	ea81 0103 	eor.w	r1, r1, r3
  406714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40671c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406720:	f04f 0000 	mov.w	r0, #0
  406724:	bd70      	pop	{r4, r5, r6, pc}
  406726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40672a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40672e:	bd70      	pop	{r4, r5, r6, pc}

00406730 <__aeabi_ddiv>:
  406730:	b570      	push	{r4, r5, r6, lr}
  406732:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40673a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40673e:	bf1d      	ittte	ne
  406740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406744:	ea94 0f0c 	teqne	r4, ip
  406748:	ea95 0f0c 	teqne	r5, ip
  40674c:	f000 f8a7 	bleq	40689e <__aeabi_ddiv+0x16e>
  406750:	eba4 0405 	sub.w	r4, r4, r5
  406754:	ea81 0e03 	eor.w	lr, r1, r3
  406758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40675c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406760:	f000 8088 	beq.w	406874 <__aeabi_ddiv+0x144>
  406764:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40676c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  406774:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40677c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406780:	ea4f 2600 	mov.w	r6, r0, lsl #8
  406784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406788:	429d      	cmp	r5, r3
  40678a:	bf08      	it	eq
  40678c:	4296      	cmpeq	r6, r2
  40678e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  406792:	f504 7440 	add.w	r4, r4, #768	; 0x300
  406796:	d202      	bcs.n	40679e <__aeabi_ddiv+0x6e>
  406798:	085b      	lsrs	r3, r3, #1
  40679a:	ea4f 0232 	mov.w	r2, r2, rrx
  40679e:	1ab6      	subs	r6, r6, r2
  4067a0:	eb65 0503 	sbc.w	r5, r5, r3
  4067a4:	085b      	lsrs	r3, r3, #1
  4067a6:	ea4f 0232 	mov.w	r2, r2, rrx
  4067aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4067ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4067b2:	ebb6 0e02 	subs.w	lr, r6, r2
  4067b6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4067ba:	bf22      	ittt	cs
  4067bc:	1ab6      	subcs	r6, r6, r2
  4067be:	4675      	movcs	r5, lr
  4067c0:	ea40 000c 	orrcs.w	r0, r0, ip
  4067c4:	085b      	lsrs	r3, r3, #1
  4067c6:	ea4f 0232 	mov.w	r2, r2, rrx
  4067ca:	ebb6 0e02 	subs.w	lr, r6, r2
  4067ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  4067d2:	bf22      	ittt	cs
  4067d4:	1ab6      	subcs	r6, r6, r2
  4067d6:	4675      	movcs	r5, lr
  4067d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4067dc:	085b      	lsrs	r3, r3, #1
  4067de:	ea4f 0232 	mov.w	r2, r2, rrx
  4067e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4067e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4067ea:	bf22      	ittt	cs
  4067ec:	1ab6      	subcs	r6, r6, r2
  4067ee:	4675      	movcs	r5, lr
  4067f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4067f4:	085b      	lsrs	r3, r3, #1
  4067f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4067fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4067fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  406802:	bf22      	ittt	cs
  406804:	1ab6      	subcs	r6, r6, r2
  406806:	4675      	movcs	r5, lr
  406808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40680c:	ea55 0e06 	orrs.w	lr, r5, r6
  406810:	d018      	beq.n	406844 <__aeabi_ddiv+0x114>
  406812:	ea4f 1505 	mov.w	r5, r5, lsl #4
  406816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40681a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40681e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  406822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  406826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40682a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40682e:	d1c0      	bne.n	4067b2 <__aeabi_ddiv+0x82>
  406830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406834:	d10b      	bne.n	40684e <__aeabi_ddiv+0x11e>
  406836:	ea41 0100 	orr.w	r1, r1, r0
  40683a:	f04f 0000 	mov.w	r0, #0
  40683e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  406842:	e7b6      	b.n	4067b2 <__aeabi_ddiv+0x82>
  406844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406848:	bf04      	itt	eq
  40684a:	4301      	orreq	r1, r0
  40684c:	2000      	moveq	r0, #0
  40684e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406852:	bf88      	it	hi
  406854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406858:	f63f aeaf 	bhi.w	4065ba <__aeabi_dmul+0xde>
  40685c:	ebb5 0c03 	subs.w	ip, r5, r3
  406860:	bf04      	itt	eq
  406862:	ebb6 0c02 	subseq.w	ip, r6, r2
  406866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40686a:	f150 0000 	adcs.w	r0, r0, #0
  40686e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406872:	bd70      	pop	{r4, r5, r6, pc}
  406874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40687c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406880:	bfc2      	ittt	gt
  406882:	ebd4 050c 	rsbsgt	r5, r4, ip
  406886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40688a:	bd70      	popgt	{r4, r5, r6, pc}
  40688c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406890:	f04f 0e00 	mov.w	lr, #0
  406894:	3c01      	subs	r4, #1
  406896:	e690      	b.n	4065ba <__aeabi_dmul+0xde>
  406898:	ea45 0e06 	orr.w	lr, r5, r6
  40689c:	e68d      	b.n	4065ba <__aeabi_dmul+0xde>
  40689e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4068a2:	ea94 0f0c 	teq	r4, ip
  4068a6:	bf08      	it	eq
  4068a8:	ea95 0f0c 	teqeq	r5, ip
  4068ac:	f43f af3b 	beq.w	406726 <__aeabi_dmul+0x24a>
  4068b0:	ea94 0f0c 	teq	r4, ip
  4068b4:	d10a      	bne.n	4068cc <__aeabi_ddiv+0x19c>
  4068b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4068ba:	f47f af34 	bne.w	406726 <__aeabi_dmul+0x24a>
  4068be:	ea95 0f0c 	teq	r5, ip
  4068c2:	f47f af25 	bne.w	406710 <__aeabi_dmul+0x234>
  4068c6:	4610      	mov	r0, r2
  4068c8:	4619      	mov	r1, r3
  4068ca:	e72c      	b.n	406726 <__aeabi_dmul+0x24a>
  4068cc:	ea95 0f0c 	teq	r5, ip
  4068d0:	d106      	bne.n	4068e0 <__aeabi_ddiv+0x1b0>
  4068d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4068d6:	f43f aefd 	beq.w	4066d4 <__aeabi_dmul+0x1f8>
  4068da:	4610      	mov	r0, r2
  4068dc:	4619      	mov	r1, r3
  4068de:	e722      	b.n	406726 <__aeabi_dmul+0x24a>
  4068e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4068e4:	bf18      	it	ne
  4068e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4068ea:	f47f aec5 	bne.w	406678 <__aeabi_dmul+0x19c>
  4068ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4068f2:	f47f af0d 	bne.w	406710 <__aeabi_dmul+0x234>
  4068f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4068fa:	f47f aeeb 	bne.w	4066d4 <__aeabi_dmul+0x1f8>
  4068fe:	e712      	b.n	406726 <__aeabi_dmul+0x24a>

00406900 <__aeabi_d2iz>:
  406900:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406908:	d215      	bcs.n	406936 <__aeabi_d2iz+0x36>
  40690a:	d511      	bpl.n	406930 <__aeabi_d2iz+0x30>
  40690c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406914:	d912      	bls.n	40693c <__aeabi_d2iz+0x3c>
  406916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40691a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40691e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406922:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406926:	fa23 f002 	lsr.w	r0, r3, r2
  40692a:	bf18      	it	ne
  40692c:	4240      	negne	r0, r0
  40692e:	4770      	bx	lr
  406930:	f04f 0000 	mov.w	r0, #0
  406934:	4770      	bx	lr
  406936:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40693a:	d105      	bne.n	406948 <__aeabi_d2iz+0x48>
  40693c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406940:	bf08      	it	eq
  406942:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  406946:	4770      	bx	lr
  406948:	f04f 0000 	mov.w	r0, #0
  40694c:	4770      	bx	lr
  40694e:	bf00      	nop

00406950 <__libc_init_array>:
  406950:	b570      	push	{r4, r5, r6, lr}
  406952:	4e0f      	ldr	r6, [pc, #60]	; (406990 <__libc_init_array+0x40>)
  406954:	4d0f      	ldr	r5, [pc, #60]	; (406994 <__libc_init_array+0x44>)
  406956:	1b76      	subs	r6, r6, r5
  406958:	10b6      	asrs	r6, r6, #2
  40695a:	bf18      	it	ne
  40695c:	2400      	movne	r4, #0
  40695e:	d005      	beq.n	40696c <__libc_init_array+0x1c>
  406960:	3401      	adds	r4, #1
  406962:	f855 3b04 	ldr.w	r3, [r5], #4
  406966:	4798      	blx	r3
  406968:	42a6      	cmp	r6, r4
  40696a:	d1f9      	bne.n	406960 <__libc_init_array+0x10>
  40696c:	4e0a      	ldr	r6, [pc, #40]	; (406998 <__libc_init_array+0x48>)
  40696e:	4d0b      	ldr	r5, [pc, #44]	; (40699c <__libc_init_array+0x4c>)
  406970:	1b76      	subs	r6, r6, r5
  406972:	f003 f9a3 	bl	409cbc <_init>
  406976:	10b6      	asrs	r6, r6, #2
  406978:	bf18      	it	ne
  40697a:	2400      	movne	r4, #0
  40697c:	d006      	beq.n	40698c <__libc_init_array+0x3c>
  40697e:	3401      	adds	r4, #1
  406980:	f855 3b04 	ldr.w	r3, [r5], #4
  406984:	4798      	blx	r3
  406986:	42a6      	cmp	r6, r4
  406988:	d1f9      	bne.n	40697e <__libc_init_array+0x2e>
  40698a:	bd70      	pop	{r4, r5, r6, pc}
  40698c:	bd70      	pop	{r4, r5, r6, pc}
  40698e:	bf00      	nop
  406990:	00409cc8 	.word	0x00409cc8
  406994:	00409cc8 	.word	0x00409cc8
  406998:	00409cd0 	.word	0x00409cd0
  40699c:	00409cc8 	.word	0x00409cc8

004069a0 <iprintf>:
  4069a0:	b40f      	push	{r0, r1, r2, r3}
  4069a2:	b500      	push	{lr}
  4069a4:	4907      	ldr	r1, [pc, #28]	; (4069c4 <iprintf+0x24>)
  4069a6:	b083      	sub	sp, #12
  4069a8:	ab04      	add	r3, sp, #16
  4069aa:	6808      	ldr	r0, [r1, #0]
  4069ac:	f853 2b04 	ldr.w	r2, [r3], #4
  4069b0:	6881      	ldr	r1, [r0, #8]
  4069b2:	9301      	str	r3, [sp, #4]
  4069b4:	f000 fb04 	bl	406fc0 <_vfiprintf_r>
  4069b8:	b003      	add	sp, #12
  4069ba:	f85d eb04 	ldr.w	lr, [sp], #4
  4069be:	b004      	add	sp, #16
  4069c0:	4770      	bx	lr
  4069c2:	bf00      	nop
  4069c4:	2040003c 	.word	0x2040003c

004069c8 <memcpy>:
  4069c8:	4684      	mov	ip, r0
  4069ca:	ea41 0300 	orr.w	r3, r1, r0
  4069ce:	f013 0303 	ands.w	r3, r3, #3
  4069d2:	d16d      	bne.n	406ab0 <memcpy+0xe8>
  4069d4:	3a40      	subs	r2, #64	; 0x40
  4069d6:	d341      	bcc.n	406a5c <memcpy+0x94>
  4069d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069dc:	f840 3b04 	str.w	r3, [r0], #4
  4069e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069e4:	f840 3b04 	str.w	r3, [r0], #4
  4069e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069ec:	f840 3b04 	str.w	r3, [r0], #4
  4069f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4069f4:	f840 3b04 	str.w	r3, [r0], #4
  4069f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4069fc:	f840 3b04 	str.w	r3, [r0], #4
  406a00:	f851 3b04 	ldr.w	r3, [r1], #4
  406a04:	f840 3b04 	str.w	r3, [r0], #4
  406a08:	f851 3b04 	ldr.w	r3, [r1], #4
  406a0c:	f840 3b04 	str.w	r3, [r0], #4
  406a10:	f851 3b04 	ldr.w	r3, [r1], #4
  406a14:	f840 3b04 	str.w	r3, [r0], #4
  406a18:	f851 3b04 	ldr.w	r3, [r1], #4
  406a1c:	f840 3b04 	str.w	r3, [r0], #4
  406a20:	f851 3b04 	ldr.w	r3, [r1], #4
  406a24:	f840 3b04 	str.w	r3, [r0], #4
  406a28:	f851 3b04 	ldr.w	r3, [r1], #4
  406a2c:	f840 3b04 	str.w	r3, [r0], #4
  406a30:	f851 3b04 	ldr.w	r3, [r1], #4
  406a34:	f840 3b04 	str.w	r3, [r0], #4
  406a38:	f851 3b04 	ldr.w	r3, [r1], #4
  406a3c:	f840 3b04 	str.w	r3, [r0], #4
  406a40:	f851 3b04 	ldr.w	r3, [r1], #4
  406a44:	f840 3b04 	str.w	r3, [r0], #4
  406a48:	f851 3b04 	ldr.w	r3, [r1], #4
  406a4c:	f840 3b04 	str.w	r3, [r0], #4
  406a50:	f851 3b04 	ldr.w	r3, [r1], #4
  406a54:	f840 3b04 	str.w	r3, [r0], #4
  406a58:	3a40      	subs	r2, #64	; 0x40
  406a5a:	d2bd      	bcs.n	4069d8 <memcpy+0x10>
  406a5c:	3230      	adds	r2, #48	; 0x30
  406a5e:	d311      	bcc.n	406a84 <memcpy+0xbc>
  406a60:	f851 3b04 	ldr.w	r3, [r1], #4
  406a64:	f840 3b04 	str.w	r3, [r0], #4
  406a68:	f851 3b04 	ldr.w	r3, [r1], #4
  406a6c:	f840 3b04 	str.w	r3, [r0], #4
  406a70:	f851 3b04 	ldr.w	r3, [r1], #4
  406a74:	f840 3b04 	str.w	r3, [r0], #4
  406a78:	f851 3b04 	ldr.w	r3, [r1], #4
  406a7c:	f840 3b04 	str.w	r3, [r0], #4
  406a80:	3a10      	subs	r2, #16
  406a82:	d2ed      	bcs.n	406a60 <memcpy+0x98>
  406a84:	320c      	adds	r2, #12
  406a86:	d305      	bcc.n	406a94 <memcpy+0xcc>
  406a88:	f851 3b04 	ldr.w	r3, [r1], #4
  406a8c:	f840 3b04 	str.w	r3, [r0], #4
  406a90:	3a04      	subs	r2, #4
  406a92:	d2f9      	bcs.n	406a88 <memcpy+0xc0>
  406a94:	3204      	adds	r2, #4
  406a96:	d008      	beq.n	406aaa <memcpy+0xe2>
  406a98:	07d2      	lsls	r2, r2, #31
  406a9a:	bf1c      	itt	ne
  406a9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406aa0:	f800 3b01 	strbne.w	r3, [r0], #1
  406aa4:	d301      	bcc.n	406aaa <memcpy+0xe2>
  406aa6:	880b      	ldrh	r3, [r1, #0]
  406aa8:	8003      	strh	r3, [r0, #0]
  406aaa:	4660      	mov	r0, ip
  406aac:	4770      	bx	lr
  406aae:	bf00      	nop
  406ab0:	2a08      	cmp	r2, #8
  406ab2:	d313      	bcc.n	406adc <memcpy+0x114>
  406ab4:	078b      	lsls	r3, r1, #30
  406ab6:	d08d      	beq.n	4069d4 <memcpy+0xc>
  406ab8:	f010 0303 	ands.w	r3, r0, #3
  406abc:	d08a      	beq.n	4069d4 <memcpy+0xc>
  406abe:	f1c3 0304 	rsb	r3, r3, #4
  406ac2:	1ad2      	subs	r2, r2, r3
  406ac4:	07db      	lsls	r3, r3, #31
  406ac6:	bf1c      	itt	ne
  406ac8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406acc:	f800 3b01 	strbne.w	r3, [r0], #1
  406ad0:	d380      	bcc.n	4069d4 <memcpy+0xc>
  406ad2:	f831 3b02 	ldrh.w	r3, [r1], #2
  406ad6:	f820 3b02 	strh.w	r3, [r0], #2
  406ada:	e77b      	b.n	4069d4 <memcpy+0xc>
  406adc:	3a04      	subs	r2, #4
  406ade:	d3d9      	bcc.n	406a94 <memcpy+0xcc>
  406ae0:	3a01      	subs	r2, #1
  406ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
  406ae6:	f800 3b01 	strb.w	r3, [r0], #1
  406aea:	d2f9      	bcs.n	406ae0 <memcpy+0x118>
  406aec:	780b      	ldrb	r3, [r1, #0]
  406aee:	7003      	strb	r3, [r0, #0]
  406af0:	784b      	ldrb	r3, [r1, #1]
  406af2:	7043      	strb	r3, [r0, #1]
  406af4:	788b      	ldrb	r3, [r1, #2]
  406af6:	7083      	strb	r3, [r0, #2]
  406af8:	4660      	mov	r0, ip
  406afa:	4770      	bx	lr

00406afc <memset>:
  406afc:	b470      	push	{r4, r5, r6}
  406afe:	0786      	lsls	r6, r0, #30
  406b00:	d046      	beq.n	406b90 <memset+0x94>
  406b02:	1e54      	subs	r4, r2, #1
  406b04:	2a00      	cmp	r2, #0
  406b06:	d041      	beq.n	406b8c <memset+0x90>
  406b08:	b2ca      	uxtb	r2, r1
  406b0a:	4603      	mov	r3, r0
  406b0c:	e002      	b.n	406b14 <memset+0x18>
  406b0e:	f114 34ff 	adds.w	r4, r4, #4294967295
  406b12:	d33b      	bcc.n	406b8c <memset+0x90>
  406b14:	f803 2b01 	strb.w	r2, [r3], #1
  406b18:	079d      	lsls	r5, r3, #30
  406b1a:	d1f8      	bne.n	406b0e <memset+0x12>
  406b1c:	2c03      	cmp	r4, #3
  406b1e:	d92e      	bls.n	406b7e <memset+0x82>
  406b20:	b2cd      	uxtb	r5, r1
  406b22:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406b26:	2c0f      	cmp	r4, #15
  406b28:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406b2c:	d919      	bls.n	406b62 <memset+0x66>
  406b2e:	f103 0210 	add.w	r2, r3, #16
  406b32:	4626      	mov	r6, r4
  406b34:	3e10      	subs	r6, #16
  406b36:	2e0f      	cmp	r6, #15
  406b38:	f842 5c10 	str.w	r5, [r2, #-16]
  406b3c:	f842 5c0c 	str.w	r5, [r2, #-12]
  406b40:	f842 5c08 	str.w	r5, [r2, #-8]
  406b44:	f842 5c04 	str.w	r5, [r2, #-4]
  406b48:	f102 0210 	add.w	r2, r2, #16
  406b4c:	d8f2      	bhi.n	406b34 <memset+0x38>
  406b4e:	f1a4 0210 	sub.w	r2, r4, #16
  406b52:	f022 020f 	bic.w	r2, r2, #15
  406b56:	f004 040f 	and.w	r4, r4, #15
  406b5a:	3210      	adds	r2, #16
  406b5c:	2c03      	cmp	r4, #3
  406b5e:	4413      	add	r3, r2
  406b60:	d90d      	bls.n	406b7e <memset+0x82>
  406b62:	461e      	mov	r6, r3
  406b64:	4622      	mov	r2, r4
  406b66:	3a04      	subs	r2, #4
  406b68:	2a03      	cmp	r2, #3
  406b6a:	f846 5b04 	str.w	r5, [r6], #4
  406b6e:	d8fa      	bhi.n	406b66 <memset+0x6a>
  406b70:	1f22      	subs	r2, r4, #4
  406b72:	f022 0203 	bic.w	r2, r2, #3
  406b76:	3204      	adds	r2, #4
  406b78:	4413      	add	r3, r2
  406b7a:	f004 0403 	and.w	r4, r4, #3
  406b7e:	b12c      	cbz	r4, 406b8c <memset+0x90>
  406b80:	b2c9      	uxtb	r1, r1
  406b82:	441c      	add	r4, r3
  406b84:	f803 1b01 	strb.w	r1, [r3], #1
  406b88:	429c      	cmp	r4, r3
  406b8a:	d1fb      	bne.n	406b84 <memset+0x88>
  406b8c:	bc70      	pop	{r4, r5, r6}
  406b8e:	4770      	bx	lr
  406b90:	4614      	mov	r4, r2
  406b92:	4603      	mov	r3, r0
  406b94:	e7c2      	b.n	406b1c <memset+0x20>
  406b96:	bf00      	nop

00406b98 <_puts_r>:
  406b98:	b5f0      	push	{r4, r5, r6, r7, lr}
  406b9a:	4605      	mov	r5, r0
  406b9c:	b089      	sub	sp, #36	; 0x24
  406b9e:	4608      	mov	r0, r1
  406ba0:	460c      	mov	r4, r1
  406ba2:	f000 f92d 	bl	406e00 <strlen>
  406ba6:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406ba8:	4f21      	ldr	r7, [pc, #132]	; (406c30 <_puts_r+0x98>)
  406baa:	9404      	str	r4, [sp, #16]
  406bac:	2601      	movs	r6, #1
  406bae:	1c44      	adds	r4, r0, #1
  406bb0:	a904      	add	r1, sp, #16
  406bb2:	2202      	movs	r2, #2
  406bb4:	9403      	str	r4, [sp, #12]
  406bb6:	9005      	str	r0, [sp, #20]
  406bb8:	68ac      	ldr	r4, [r5, #8]
  406bba:	9706      	str	r7, [sp, #24]
  406bbc:	9607      	str	r6, [sp, #28]
  406bbe:	9101      	str	r1, [sp, #4]
  406bc0:	9202      	str	r2, [sp, #8]
  406bc2:	b353      	cbz	r3, 406c1a <_puts_r+0x82>
  406bc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406bc6:	f013 0f01 	tst.w	r3, #1
  406bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406bce:	b29a      	uxth	r2, r3
  406bd0:	d101      	bne.n	406bd6 <_puts_r+0x3e>
  406bd2:	0590      	lsls	r0, r2, #22
  406bd4:	d525      	bpl.n	406c22 <_puts_r+0x8a>
  406bd6:	0491      	lsls	r1, r2, #18
  406bd8:	d406      	bmi.n	406be8 <_puts_r+0x50>
  406bda:	6e62      	ldr	r2, [r4, #100]	; 0x64
  406bdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  406be4:	81a3      	strh	r3, [r4, #12]
  406be6:	6662      	str	r2, [r4, #100]	; 0x64
  406be8:	4628      	mov	r0, r5
  406bea:	aa01      	add	r2, sp, #4
  406bec:	4621      	mov	r1, r4
  406bee:	f001 fbe9 	bl	4083c4 <__sfvwrite_r>
  406bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406bf4:	2800      	cmp	r0, #0
  406bf6:	bf0c      	ite	eq
  406bf8:	250a      	moveq	r5, #10
  406bfa:	f04f 35ff 	movne.w	r5, #4294967295
  406bfe:	07da      	lsls	r2, r3, #31
  406c00:	d402      	bmi.n	406c08 <_puts_r+0x70>
  406c02:	89a3      	ldrh	r3, [r4, #12]
  406c04:	059b      	lsls	r3, r3, #22
  406c06:	d502      	bpl.n	406c0e <_puts_r+0x76>
  406c08:	4628      	mov	r0, r5
  406c0a:	b009      	add	sp, #36	; 0x24
  406c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c10:	f001 fd8e 	bl	408730 <__retarget_lock_release_recursive>
  406c14:	4628      	mov	r0, r5
  406c16:	b009      	add	sp, #36	; 0x24
  406c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406c1a:	4628      	mov	r0, r5
  406c1c:	f001 f9c6 	bl	407fac <__sinit>
  406c20:	e7d0      	b.n	406bc4 <_puts_r+0x2c>
  406c22:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c24:	f001 fd82 	bl	40872c <__retarget_lock_acquire_recursive>
  406c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c2c:	b29a      	uxth	r2, r3
  406c2e:	e7d2      	b.n	406bd6 <_puts_r+0x3e>
  406c30:	00409b54 	.word	0x00409b54

00406c34 <puts>:
  406c34:	4b02      	ldr	r3, [pc, #8]	; (406c40 <puts+0xc>)
  406c36:	4601      	mov	r1, r0
  406c38:	6818      	ldr	r0, [r3, #0]
  406c3a:	f7ff bfad 	b.w	406b98 <_puts_r>
  406c3e:	bf00      	nop
  406c40:	2040003c 	.word	0x2040003c

00406c44 <setbuf>:
  406c44:	2900      	cmp	r1, #0
  406c46:	bf0c      	ite	eq
  406c48:	2202      	moveq	r2, #2
  406c4a:	2200      	movne	r2, #0
  406c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406c50:	f000 b800 	b.w	406c54 <setvbuf>

00406c54 <setvbuf>:
  406c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406c58:	4c61      	ldr	r4, [pc, #388]	; (406de0 <setvbuf+0x18c>)
  406c5a:	6825      	ldr	r5, [r4, #0]
  406c5c:	b083      	sub	sp, #12
  406c5e:	4604      	mov	r4, r0
  406c60:	460f      	mov	r7, r1
  406c62:	4690      	mov	r8, r2
  406c64:	461e      	mov	r6, r3
  406c66:	b115      	cbz	r5, 406c6e <setvbuf+0x1a>
  406c68:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406c6a:	2b00      	cmp	r3, #0
  406c6c:	d064      	beq.n	406d38 <setvbuf+0xe4>
  406c6e:	f1b8 0f02 	cmp.w	r8, #2
  406c72:	d006      	beq.n	406c82 <setvbuf+0x2e>
  406c74:	f1b8 0f01 	cmp.w	r8, #1
  406c78:	f200 809f 	bhi.w	406dba <setvbuf+0x166>
  406c7c:	2e00      	cmp	r6, #0
  406c7e:	f2c0 809c 	blt.w	406dba <setvbuf+0x166>
  406c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406c84:	07d8      	lsls	r0, r3, #31
  406c86:	d534      	bpl.n	406cf2 <setvbuf+0x9e>
  406c88:	4621      	mov	r1, r4
  406c8a:	4628      	mov	r0, r5
  406c8c:	f001 f936 	bl	407efc <_fflush_r>
  406c90:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406c92:	b141      	cbz	r1, 406ca6 <setvbuf+0x52>
  406c94:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406c98:	4299      	cmp	r1, r3
  406c9a:	d002      	beq.n	406ca2 <setvbuf+0x4e>
  406c9c:	4628      	mov	r0, r5
  406c9e:	f001 faab 	bl	4081f8 <_free_r>
  406ca2:	2300      	movs	r3, #0
  406ca4:	6323      	str	r3, [r4, #48]	; 0x30
  406ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406caa:	2200      	movs	r2, #0
  406cac:	61a2      	str	r2, [r4, #24]
  406cae:	6062      	str	r2, [r4, #4]
  406cb0:	061a      	lsls	r2, r3, #24
  406cb2:	d43a      	bmi.n	406d2a <setvbuf+0xd6>
  406cb4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  406cb8:	f023 0303 	bic.w	r3, r3, #3
  406cbc:	f1b8 0f02 	cmp.w	r8, #2
  406cc0:	81a3      	strh	r3, [r4, #12]
  406cc2:	d01d      	beq.n	406d00 <setvbuf+0xac>
  406cc4:	ab01      	add	r3, sp, #4
  406cc6:	466a      	mov	r2, sp
  406cc8:	4621      	mov	r1, r4
  406cca:	4628      	mov	r0, r5
  406ccc:	f001 fd32 	bl	408734 <__swhatbuf_r>
  406cd0:	89a3      	ldrh	r3, [r4, #12]
  406cd2:	4318      	orrs	r0, r3
  406cd4:	81a0      	strh	r0, [r4, #12]
  406cd6:	2e00      	cmp	r6, #0
  406cd8:	d132      	bne.n	406d40 <setvbuf+0xec>
  406cda:	9e00      	ldr	r6, [sp, #0]
  406cdc:	4630      	mov	r0, r6
  406cde:	f001 fda1 	bl	408824 <malloc>
  406ce2:	4607      	mov	r7, r0
  406ce4:	2800      	cmp	r0, #0
  406ce6:	d06b      	beq.n	406dc0 <setvbuf+0x16c>
  406ce8:	89a3      	ldrh	r3, [r4, #12]
  406cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406cee:	81a3      	strh	r3, [r4, #12]
  406cf0:	e028      	b.n	406d44 <setvbuf+0xf0>
  406cf2:	89a3      	ldrh	r3, [r4, #12]
  406cf4:	0599      	lsls	r1, r3, #22
  406cf6:	d4c7      	bmi.n	406c88 <setvbuf+0x34>
  406cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406cfa:	f001 fd17 	bl	40872c <__retarget_lock_acquire_recursive>
  406cfe:	e7c3      	b.n	406c88 <setvbuf+0x34>
  406d00:	2500      	movs	r5, #0
  406d02:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406d04:	2600      	movs	r6, #0
  406d06:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406d0a:	f043 0302 	orr.w	r3, r3, #2
  406d0e:	2001      	movs	r0, #1
  406d10:	60a6      	str	r6, [r4, #8]
  406d12:	07ce      	lsls	r6, r1, #31
  406d14:	81a3      	strh	r3, [r4, #12]
  406d16:	6022      	str	r2, [r4, #0]
  406d18:	6122      	str	r2, [r4, #16]
  406d1a:	6160      	str	r0, [r4, #20]
  406d1c:	d401      	bmi.n	406d22 <setvbuf+0xce>
  406d1e:	0598      	lsls	r0, r3, #22
  406d20:	d53e      	bpl.n	406da0 <setvbuf+0x14c>
  406d22:	4628      	mov	r0, r5
  406d24:	b003      	add	sp, #12
  406d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406d2a:	6921      	ldr	r1, [r4, #16]
  406d2c:	4628      	mov	r0, r5
  406d2e:	f001 fa63 	bl	4081f8 <_free_r>
  406d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406d36:	e7bd      	b.n	406cb4 <setvbuf+0x60>
  406d38:	4628      	mov	r0, r5
  406d3a:	f001 f937 	bl	407fac <__sinit>
  406d3e:	e796      	b.n	406c6e <setvbuf+0x1a>
  406d40:	2f00      	cmp	r7, #0
  406d42:	d0cb      	beq.n	406cdc <setvbuf+0x88>
  406d44:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406d46:	2b00      	cmp	r3, #0
  406d48:	d033      	beq.n	406db2 <setvbuf+0x15e>
  406d4a:	9b00      	ldr	r3, [sp, #0]
  406d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406d50:	6027      	str	r7, [r4, #0]
  406d52:	429e      	cmp	r6, r3
  406d54:	bf1c      	itt	ne
  406d56:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  406d5a:	81a2      	strhne	r2, [r4, #12]
  406d5c:	f1b8 0f01 	cmp.w	r8, #1
  406d60:	bf04      	itt	eq
  406d62:	f042 0201 	orreq.w	r2, r2, #1
  406d66:	81a2      	strheq	r2, [r4, #12]
  406d68:	b292      	uxth	r2, r2
  406d6a:	f012 0308 	ands.w	r3, r2, #8
  406d6e:	6127      	str	r7, [r4, #16]
  406d70:	6166      	str	r6, [r4, #20]
  406d72:	d00e      	beq.n	406d92 <setvbuf+0x13e>
  406d74:	07d1      	lsls	r1, r2, #31
  406d76:	d51a      	bpl.n	406dae <setvbuf+0x15a>
  406d78:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406d7a:	4276      	negs	r6, r6
  406d7c:	2300      	movs	r3, #0
  406d7e:	f015 0501 	ands.w	r5, r5, #1
  406d82:	61a6      	str	r6, [r4, #24]
  406d84:	60a3      	str	r3, [r4, #8]
  406d86:	d009      	beq.n	406d9c <setvbuf+0x148>
  406d88:	2500      	movs	r5, #0
  406d8a:	4628      	mov	r0, r5
  406d8c:	b003      	add	sp, #12
  406d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406d92:	60a3      	str	r3, [r4, #8]
  406d94:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406d96:	f015 0501 	ands.w	r5, r5, #1
  406d9a:	d1f5      	bne.n	406d88 <setvbuf+0x134>
  406d9c:	0593      	lsls	r3, r2, #22
  406d9e:	d4c0      	bmi.n	406d22 <setvbuf+0xce>
  406da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406da2:	f001 fcc5 	bl	408730 <__retarget_lock_release_recursive>
  406da6:	4628      	mov	r0, r5
  406da8:	b003      	add	sp, #12
  406daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406dae:	60a6      	str	r6, [r4, #8]
  406db0:	e7f0      	b.n	406d94 <setvbuf+0x140>
  406db2:	4628      	mov	r0, r5
  406db4:	f001 f8fa 	bl	407fac <__sinit>
  406db8:	e7c7      	b.n	406d4a <setvbuf+0xf6>
  406dba:	f04f 35ff 	mov.w	r5, #4294967295
  406dbe:	e7b0      	b.n	406d22 <setvbuf+0xce>
  406dc0:	f8dd 9000 	ldr.w	r9, [sp]
  406dc4:	45b1      	cmp	r9, r6
  406dc6:	d004      	beq.n	406dd2 <setvbuf+0x17e>
  406dc8:	4648      	mov	r0, r9
  406dca:	f001 fd2b 	bl	408824 <malloc>
  406dce:	4607      	mov	r7, r0
  406dd0:	b920      	cbnz	r0, 406ddc <setvbuf+0x188>
  406dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406dd6:	f04f 35ff 	mov.w	r5, #4294967295
  406dda:	e792      	b.n	406d02 <setvbuf+0xae>
  406ddc:	464e      	mov	r6, r9
  406dde:	e783      	b.n	406ce8 <setvbuf+0x94>
  406de0:	2040003c 	.word	0x2040003c
	...

00406e00 <strlen>:
  406e00:	f890 f000 	pld	[r0]
  406e04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406e08:	f020 0107 	bic.w	r1, r0, #7
  406e0c:	f06f 0c00 	mvn.w	ip, #0
  406e10:	f010 0407 	ands.w	r4, r0, #7
  406e14:	f891 f020 	pld	[r1, #32]
  406e18:	f040 8049 	bne.w	406eae <strlen+0xae>
  406e1c:	f04f 0400 	mov.w	r4, #0
  406e20:	f06f 0007 	mvn.w	r0, #7
  406e24:	e9d1 2300 	ldrd	r2, r3, [r1]
  406e28:	f891 f040 	pld	[r1, #64]	; 0x40
  406e2c:	f100 0008 	add.w	r0, r0, #8
  406e30:	fa82 f24c 	uadd8	r2, r2, ip
  406e34:	faa4 f28c 	sel	r2, r4, ip
  406e38:	fa83 f34c 	uadd8	r3, r3, ip
  406e3c:	faa2 f38c 	sel	r3, r2, ip
  406e40:	bb4b      	cbnz	r3, 406e96 <strlen+0x96>
  406e42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406e46:	fa82 f24c 	uadd8	r2, r2, ip
  406e4a:	f100 0008 	add.w	r0, r0, #8
  406e4e:	faa4 f28c 	sel	r2, r4, ip
  406e52:	fa83 f34c 	uadd8	r3, r3, ip
  406e56:	faa2 f38c 	sel	r3, r2, ip
  406e5a:	b9e3      	cbnz	r3, 406e96 <strlen+0x96>
  406e5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  406e60:	fa82 f24c 	uadd8	r2, r2, ip
  406e64:	f100 0008 	add.w	r0, r0, #8
  406e68:	faa4 f28c 	sel	r2, r4, ip
  406e6c:	fa83 f34c 	uadd8	r3, r3, ip
  406e70:	faa2 f38c 	sel	r3, r2, ip
  406e74:	b97b      	cbnz	r3, 406e96 <strlen+0x96>
  406e76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  406e7a:	f101 0120 	add.w	r1, r1, #32
  406e7e:	fa82 f24c 	uadd8	r2, r2, ip
  406e82:	f100 0008 	add.w	r0, r0, #8
  406e86:	faa4 f28c 	sel	r2, r4, ip
  406e8a:	fa83 f34c 	uadd8	r3, r3, ip
  406e8e:	faa2 f38c 	sel	r3, r2, ip
  406e92:	2b00      	cmp	r3, #0
  406e94:	d0c6      	beq.n	406e24 <strlen+0x24>
  406e96:	2a00      	cmp	r2, #0
  406e98:	bf04      	itt	eq
  406e9a:	3004      	addeq	r0, #4
  406e9c:	461a      	moveq	r2, r3
  406e9e:	ba12      	rev	r2, r2
  406ea0:	fab2 f282 	clz	r2, r2
  406ea4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406ea8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  406eac:	4770      	bx	lr
  406eae:	e9d1 2300 	ldrd	r2, r3, [r1]
  406eb2:	f004 0503 	and.w	r5, r4, #3
  406eb6:	f1c4 0000 	rsb	r0, r4, #0
  406eba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  406ebe:	f014 0f04 	tst.w	r4, #4
  406ec2:	f891 f040 	pld	[r1, #64]	; 0x40
  406ec6:	fa0c f505 	lsl.w	r5, ip, r5
  406eca:	ea62 0205 	orn	r2, r2, r5
  406ece:	bf1c      	itt	ne
  406ed0:	ea63 0305 	ornne	r3, r3, r5
  406ed4:	4662      	movne	r2, ip
  406ed6:	f04f 0400 	mov.w	r4, #0
  406eda:	e7a9      	b.n	406e30 <strlen+0x30>

00406edc <strncpy>:
  406edc:	ea40 0301 	orr.w	r3, r0, r1
  406ee0:	f013 0f03 	tst.w	r3, #3
  406ee4:	b470      	push	{r4, r5, r6}
  406ee6:	4603      	mov	r3, r0
  406ee8:	d024      	beq.n	406f34 <strncpy+0x58>
  406eea:	b1a2      	cbz	r2, 406f16 <strncpy+0x3a>
  406eec:	780c      	ldrb	r4, [r1, #0]
  406eee:	701c      	strb	r4, [r3, #0]
  406ef0:	3a01      	subs	r2, #1
  406ef2:	3301      	adds	r3, #1
  406ef4:	3101      	adds	r1, #1
  406ef6:	b13c      	cbz	r4, 406f08 <strncpy+0x2c>
  406ef8:	b16a      	cbz	r2, 406f16 <strncpy+0x3a>
  406efa:	f811 4b01 	ldrb.w	r4, [r1], #1
  406efe:	f803 4b01 	strb.w	r4, [r3], #1
  406f02:	3a01      	subs	r2, #1
  406f04:	2c00      	cmp	r4, #0
  406f06:	d1f7      	bne.n	406ef8 <strncpy+0x1c>
  406f08:	b12a      	cbz	r2, 406f16 <strncpy+0x3a>
  406f0a:	441a      	add	r2, r3
  406f0c:	2100      	movs	r1, #0
  406f0e:	f803 1b01 	strb.w	r1, [r3], #1
  406f12:	429a      	cmp	r2, r3
  406f14:	d1fb      	bne.n	406f0e <strncpy+0x32>
  406f16:	bc70      	pop	{r4, r5, r6}
  406f18:	4770      	bx	lr
  406f1a:	460e      	mov	r6, r1
  406f1c:	f851 5b04 	ldr.w	r5, [r1], #4
  406f20:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  406f24:	ea24 0405 	bic.w	r4, r4, r5
  406f28:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  406f2c:	d105      	bne.n	406f3a <strncpy+0x5e>
  406f2e:	f843 5b04 	str.w	r5, [r3], #4
  406f32:	3a04      	subs	r2, #4
  406f34:	2a03      	cmp	r2, #3
  406f36:	d8f0      	bhi.n	406f1a <strncpy+0x3e>
  406f38:	e7d7      	b.n	406eea <strncpy+0xe>
  406f3a:	4631      	mov	r1, r6
  406f3c:	e7d6      	b.n	406eec <strncpy+0x10>
  406f3e:	bf00      	nop

00406f40 <__sprint_r.part.0>:
  406f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f44:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  406f46:	049c      	lsls	r4, r3, #18
  406f48:	4693      	mov	fp, r2
  406f4a:	d52f      	bpl.n	406fac <__sprint_r.part.0+0x6c>
  406f4c:	6893      	ldr	r3, [r2, #8]
  406f4e:	6812      	ldr	r2, [r2, #0]
  406f50:	b353      	cbz	r3, 406fa8 <__sprint_r.part.0+0x68>
  406f52:	460e      	mov	r6, r1
  406f54:	4607      	mov	r7, r0
  406f56:	f102 0908 	add.w	r9, r2, #8
  406f5a:	e919 0420 	ldmdb	r9, {r5, sl}
  406f5e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  406f62:	d017      	beq.n	406f94 <__sprint_r.part.0+0x54>
  406f64:	3d04      	subs	r5, #4
  406f66:	2400      	movs	r4, #0
  406f68:	e001      	b.n	406f6e <__sprint_r.part.0+0x2e>
  406f6a:	45a0      	cmp	r8, r4
  406f6c:	d010      	beq.n	406f90 <__sprint_r.part.0+0x50>
  406f6e:	4632      	mov	r2, r6
  406f70:	f855 1f04 	ldr.w	r1, [r5, #4]!
  406f74:	4638      	mov	r0, r7
  406f76:	f001 f8bb 	bl	4080f0 <_fputwc_r>
  406f7a:	1c43      	adds	r3, r0, #1
  406f7c:	f104 0401 	add.w	r4, r4, #1
  406f80:	d1f3      	bne.n	406f6a <__sprint_r.part.0+0x2a>
  406f82:	2300      	movs	r3, #0
  406f84:	f8cb 3008 	str.w	r3, [fp, #8]
  406f88:	f8cb 3004 	str.w	r3, [fp, #4]
  406f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f90:	f8db 3008 	ldr.w	r3, [fp, #8]
  406f94:	f02a 0a03 	bic.w	sl, sl, #3
  406f98:	eba3 030a 	sub.w	r3, r3, sl
  406f9c:	f8cb 3008 	str.w	r3, [fp, #8]
  406fa0:	f109 0908 	add.w	r9, r9, #8
  406fa4:	2b00      	cmp	r3, #0
  406fa6:	d1d8      	bne.n	406f5a <__sprint_r.part.0+0x1a>
  406fa8:	2000      	movs	r0, #0
  406faa:	e7ea      	b.n	406f82 <__sprint_r.part.0+0x42>
  406fac:	f001 fa0a 	bl	4083c4 <__sfvwrite_r>
  406fb0:	2300      	movs	r3, #0
  406fb2:	f8cb 3008 	str.w	r3, [fp, #8]
  406fb6:	f8cb 3004 	str.w	r3, [fp, #4]
  406fba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406fbe:	bf00      	nop

00406fc0 <_vfiprintf_r>:
  406fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406fc4:	b0ad      	sub	sp, #180	; 0xb4
  406fc6:	461d      	mov	r5, r3
  406fc8:	468b      	mov	fp, r1
  406fca:	4690      	mov	r8, r2
  406fcc:	9307      	str	r3, [sp, #28]
  406fce:	9006      	str	r0, [sp, #24]
  406fd0:	b118      	cbz	r0, 406fda <_vfiprintf_r+0x1a>
  406fd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406fd4:	2b00      	cmp	r3, #0
  406fd6:	f000 80f3 	beq.w	4071c0 <_vfiprintf_r+0x200>
  406fda:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406fde:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  406fe2:	07df      	lsls	r7, r3, #31
  406fe4:	b281      	uxth	r1, r0
  406fe6:	d402      	bmi.n	406fee <_vfiprintf_r+0x2e>
  406fe8:	058e      	lsls	r6, r1, #22
  406fea:	f140 80fc 	bpl.w	4071e6 <_vfiprintf_r+0x226>
  406fee:	048c      	lsls	r4, r1, #18
  406ff0:	d40a      	bmi.n	407008 <_vfiprintf_r+0x48>
  406ff2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406ff6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  406ffa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  406ffe:	f8ab 100c 	strh.w	r1, [fp, #12]
  407002:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  407006:	b289      	uxth	r1, r1
  407008:	0708      	lsls	r0, r1, #28
  40700a:	f140 80b3 	bpl.w	407174 <_vfiprintf_r+0x1b4>
  40700e:	f8db 3010 	ldr.w	r3, [fp, #16]
  407012:	2b00      	cmp	r3, #0
  407014:	f000 80ae 	beq.w	407174 <_vfiprintf_r+0x1b4>
  407018:	f001 031a 	and.w	r3, r1, #26
  40701c:	2b0a      	cmp	r3, #10
  40701e:	f000 80b5 	beq.w	40718c <_vfiprintf_r+0x1cc>
  407022:	2300      	movs	r3, #0
  407024:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  407028:	930b      	str	r3, [sp, #44]	; 0x2c
  40702a:	9311      	str	r3, [sp, #68]	; 0x44
  40702c:	9310      	str	r3, [sp, #64]	; 0x40
  40702e:	9303      	str	r3, [sp, #12]
  407030:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  407034:	46ca      	mov	sl, r9
  407036:	f8cd b010 	str.w	fp, [sp, #16]
  40703a:	f898 3000 	ldrb.w	r3, [r8]
  40703e:	4644      	mov	r4, r8
  407040:	b1fb      	cbz	r3, 407082 <_vfiprintf_r+0xc2>
  407042:	2b25      	cmp	r3, #37	; 0x25
  407044:	d102      	bne.n	40704c <_vfiprintf_r+0x8c>
  407046:	e01c      	b.n	407082 <_vfiprintf_r+0xc2>
  407048:	2b25      	cmp	r3, #37	; 0x25
  40704a:	d003      	beq.n	407054 <_vfiprintf_r+0x94>
  40704c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  407050:	2b00      	cmp	r3, #0
  407052:	d1f9      	bne.n	407048 <_vfiprintf_r+0x88>
  407054:	eba4 0508 	sub.w	r5, r4, r8
  407058:	b19d      	cbz	r5, 407082 <_vfiprintf_r+0xc2>
  40705a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40705c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40705e:	f8ca 8000 	str.w	r8, [sl]
  407062:	3301      	adds	r3, #1
  407064:	442a      	add	r2, r5
  407066:	2b07      	cmp	r3, #7
  407068:	f8ca 5004 	str.w	r5, [sl, #4]
  40706c:	9211      	str	r2, [sp, #68]	; 0x44
  40706e:	9310      	str	r3, [sp, #64]	; 0x40
  407070:	dd7a      	ble.n	407168 <_vfiprintf_r+0x1a8>
  407072:	2a00      	cmp	r2, #0
  407074:	f040 84b0 	bne.w	4079d8 <_vfiprintf_r+0xa18>
  407078:	9b03      	ldr	r3, [sp, #12]
  40707a:	9210      	str	r2, [sp, #64]	; 0x40
  40707c:	442b      	add	r3, r5
  40707e:	46ca      	mov	sl, r9
  407080:	9303      	str	r3, [sp, #12]
  407082:	7823      	ldrb	r3, [r4, #0]
  407084:	2b00      	cmp	r3, #0
  407086:	f000 83e0 	beq.w	40784a <_vfiprintf_r+0x88a>
  40708a:	2000      	movs	r0, #0
  40708c:	f04f 0300 	mov.w	r3, #0
  407090:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  407094:	f104 0801 	add.w	r8, r4, #1
  407098:	7862      	ldrb	r2, [r4, #1]
  40709a:	4605      	mov	r5, r0
  40709c:	4606      	mov	r6, r0
  40709e:	4603      	mov	r3, r0
  4070a0:	f04f 34ff 	mov.w	r4, #4294967295
  4070a4:	f108 0801 	add.w	r8, r8, #1
  4070a8:	f1a2 0120 	sub.w	r1, r2, #32
  4070ac:	2958      	cmp	r1, #88	; 0x58
  4070ae:	f200 82de 	bhi.w	40766e <_vfiprintf_r+0x6ae>
  4070b2:	e8df f011 	tbh	[pc, r1, lsl #1]
  4070b6:	0221      	.short	0x0221
  4070b8:	02dc02dc 	.word	0x02dc02dc
  4070bc:	02dc0229 	.word	0x02dc0229
  4070c0:	02dc02dc 	.word	0x02dc02dc
  4070c4:	02dc02dc 	.word	0x02dc02dc
  4070c8:	028902dc 	.word	0x028902dc
  4070cc:	02dc0295 	.word	0x02dc0295
  4070d0:	02bd00a2 	.word	0x02bd00a2
  4070d4:	019f02dc 	.word	0x019f02dc
  4070d8:	01a401a4 	.word	0x01a401a4
  4070dc:	01a401a4 	.word	0x01a401a4
  4070e0:	01a401a4 	.word	0x01a401a4
  4070e4:	01a401a4 	.word	0x01a401a4
  4070e8:	02dc01a4 	.word	0x02dc01a4
  4070ec:	02dc02dc 	.word	0x02dc02dc
  4070f0:	02dc02dc 	.word	0x02dc02dc
  4070f4:	02dc02dc 	.word	0x02dc02dc
  4070f8:	02dc02dc 	.word	0x02dc02dc
  4070fc:	01b202dc 	.word	0x01b202dc
  407100:	02dc02dc 	.word	0x02dc02dc
  407104:	02dc02dc 	.word	0x02dc02dc
  407108:	02dc02dc 	.word	0x02dc02dc
  40710c:	02dc02dc 	.word	0x02dc02dc
  407110:	02dc02dc 	.word	0x02dc02dc
  407114:	02dc0197 	.word	0x02dc0197
  407118:	02dc02dc 	.word	0x02dc02dc
  40711c:	02dc02dc 	.word	0x02dc02dc
  407120:	02dc019b 	.word	0x02dc019b
  407124:	025302dc 	.word	0x025302dc
  407128:	02dc02dc 	.word	0x02dc02dc
  40712c:	02dc02dc 	.word	0x02dc02dc
  407130:	02dc02dc 	.word	0x02dc02dc
  407134:	02dc02dc 	.word	0x02dc02dc
  407138:	02dc02dc 	.word	0x02dc02dc
  40713c:	021b025a 	.word	0x021b025a
  407140:	02dc02dc 	.word	0x02dc02dc
  407144:	026e02dc 	.word	0x026e02dc
  407148:	02dc021b 	.word	0x02dc021b
  40714c:	027302dc 	.word	0x027302dc
  407150:	01f502dc 	.word	0x01f502dc
  407154:	02090182 	.word	0x02090182
  407158:	02dc02d7 	.word	0x02dc02d7
  40715c:	02dc029a 	.word	0x02dc029a
  407160:	02dc00a7 	.word	0x02dc00a7
  407164:	022e02dc 	.word	0x022e02dc
  407168:	f10a 0a08 	add.w	sl, sl, #8
  40716c:	9b03      	ldr	r3, [sp, #12]
  40716e:	442b      	add	r3, r5
  407170:	9303      	str	r3, [sp, #12]
  407172:	e786      	b.n	407082 <_vfiprintf_r+0xc2>
  407174:	4659      	mov	r1, fp
  407176:	9806      	ldr	r0, [sp, #24]
  407178:	f000 fdac 	bl	407cd4 <__swsetup_r>
  40717c:	bb18      	cbnz	r0, 4071c6 <_vfiprintf_r+0x206>
  40717e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  407182:	f001 031a 	and.w	r3, r1, #26
  407186:	2b0a      	cmp	r3, #10
  407188:	f47f af4b 	bne.w	407022 <_vfiprintf_r+0x62>
  40718c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  407190:	2b00      	cmp	r3, #0
  407192:	f6ff af46 	blt.w	407022 <_vfiprintf_r+0x62>
  407196:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40719a:	07db      	lsls	r3, r3, #31
  40719c:	d405      	bmi.n	4071aa <_vfiprintf_r+0x1ea>
  40719e:	058f      	lsls	r7, r1, #22
  4071a0:	d403      	bmi.n	4071aa <_vfiprintf_r+0x1ea>
  4071a2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4071a6:	f001 fac3 	bl	408730 <__retarget_lock_release_recursive>
  4071aa:	462b      	mov	r3, r5
  4071ac:	4642      	mov	r2, r8
  4071ae:	4659      	mov	r1, fp
  4071b0:	9806      	ldr	r0, [sp, #24]
  4071b2:	f000 fd4d 	bl	407c50 <__sbprintf>
  4071b6:	9003      	str	r0, [sp, #12]
  4071b8:	9803      	ldr	r0, [sp, #12]
  4071ba:	b02d      	add	sp, #180	; 0xb4
  4071bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4071c0:	f000 fef4 	bl	407fac <__sinit>
  4071c4:	e709      	b.n	406fda <_vfiprintf_r+0x1a>
  4071c6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4071ca:	07d9      	lsls	r1, r3, #31
  4071cc:	d404      	bmi.n	4071d8 <_vfiprintf_r+0x218>
  4071ce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4071d2:	059a      	lsls	r2, r3, #22
  4071d4:	f140 84aa 	bpl.w	407b2c <_vfiprintf_r+0xb6c>
  4071d8:	f04f 33ff 	mov.w	r3, #4294967295
  4071dc:	9303      	str	r3, [sp, #12]
  4071de:	9803      	ldr	r0, [sp, #12]
  4071e0:	b02d      	add	sp, #180	; 0xb4
  4071e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4071e6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4071ea:	f001 fa9f 	bl	40872c <__retarget_lock_acquire_recursive>
  4071ee:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4071f2:	b281      	uxth	r1, r0
  4071f4:	e6fb      	b.n	406fee <_vfiprintf_r+0x2e>
  4071f6:	4276      	negs	r6, r6
  4071f8:	9207      	str	r2, [sp, #28]
  4071fa:	f043 0304 	orr.w	r3, r3, #4
  4071fe:	f898 2000 	ldrb.w	r2, [r8]
  407202:	e74f      	b.n	4070a4 <_vfiprintf_r+0xe4>
  407204:	9608      	str	r6, [sp, #32]
  407206:	069e      	lsls	r6, r3, #26
  407208:	f100 8450 	bmi.w	407aac <_vfiprintf_r+0xaec>
  40720c:	9907      	ldr	r1, [sp, #28]
  40720e:	06dd      	lsls	r5, r3, #27
  407210:	460a      	mov	r2, r1
  407212:	f100 83ef 	bmi.w	4079f4 <_vfiprintf_r+0xa34>
  407216:	0658      	lsls	r0, r3, #25
  407218:	f140 83ec 	bpl.w	4079f4 <_vfiprintf_r+0xa34>
  40721c:	880e      	ldrh	r6, [r1, #0]
  40721e:	3104      	adds	r1, #4
  407220:	2700      	movs	r7, #0
  407222:	2201      	movs	r2, #1
  407224:	9107      	str	r1, [sp, #28]
  407226:	f04f 0100 	mov.w	r1, #0
  40722a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40722e:	2500      	movs	r5, #0
  407230:	1c61      	adds	r1, r4, #1
  407232:	f000 8116 	beq.w	407462 <_vfiprintf_r+0x4a2>
  407236:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40723a:	9102      	str	r1, [sp, #8]
  40723c:	ea56 0107 	orrs.w	r1, r6, r7
  407240:	f040 8114 	bne.w	40746c <_vfiprintf_r+0x4ac>
  407244:	2c00      	cmp	r4, #0
  407246:	f040 835c 	bne.w	407902 <_vfiprintf_r+0x942>
  40724a:	2a00      	cmp	r2, #0
  40724c:	f040 83b7 	bne.w	4079be <_vfiprintf_r+0x9fe>
  407250:	f013 0301 	ands.w	r3, r3, #1
  407254:	9305      	str	r3, [sp, #20]
  407256:	f000 8457 	beq.w	407b08 <_vfiprintf_r+0xb48>
  40725a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40725e:	2330      	movs	r3, #48	; 0x30
  407260:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  407264:	9b05      	ldr	r3, [sp, #20]
  407266:	42a3      	cmp	r3, r4
  407268:	bfb8      	it	lt
  40726a:	4623      	movlt	r3, r4
  40726c:	9301      	str	r3, [sp, #4]
  40726e:	b10d      	cbz	r5, 407274 <_vfiprintf_r+0x2b4>
  407270:	3301      	adds	r3, #1
  407272:	9301      	str	r3, [sp, #4]
  407274:	9b02      	ldr	r3, [sp, #8]
  407276:	f013 0302 	ands.w	r3, r3, #2
  40727a:	9309      	str	r3, [sp, #36]	; 0x24
  40727c:	d002      	beq.n	407284 <_vfiprintf_r+0x2c4>
  40727e:	9b01      	ldr	r3, [sp, #4]
  407280:	3302      	adds	r3, #2
  407282:	9301      	str	r3, [sp, #4]
  407284:	9b02      	ldr	r3, [sp, #8]
  407286:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40728a:	930a      	str	r3, [sp, #40]	; 0x28
  40728c:	f040 8217 	bne.w	4076be <_vfiprintf_r+0x6fe>
  407290:	9b08      	ldr	r3, [sp, #32]
  407292:	9a01      	ldr	r2, [sp, #4]
  407294:	1a9d      	subs	r5, r3, r2
  407296:	2d00      	cmp	r5, #0
  407298:	f340 8211 	ble.w	4076be <_vfiprintf_r+0x6fe>
  40729c:	2d10      	cmp	r5, #16
  40729e:	f340 8490 	ble.w	407bc2 <_vfiprintf_r+0xc02>
  4072a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4072a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4072a6:	4ec4      	ldr	r6, [pc, #784]	; (4075b8 <_vfiprintf_r+0x5f8>)
  4072a8:	46d6      	mov	lr, sl
  4072aa:	2710      	movs	r7, #16
  4072ac:	46a2      	mov	sl, r4
  4072ae:	4619      	mov	r1, r3
  4072b0:	9c06      	ldr	r4, [sp, #24]
  4072b2:	e007      	b.n	4072c4 <_vfiprintf_r+0x304>
  4072b4:	f101 0c02 	add.w	ip, r1, #2
  4072b8:	f10e 0e08 	add.w	lr, lr, #8
  4072bc:	4601      	mov	r1, r0
  4072be:	3d10      	subs	r5, #16
  4072c0:	2d10      	cmp	r5, #16
  4072c2:	dd11      	ble.n	4072e8 <_vfiprintf_r+0x328>
  4072c4:	1c48      	adds	r0, r1, #1
  4072c6:	3210      	adds	r2, #16
  4072c8:	2807      	cmp	r0, #7
  4072ca:	9211      	str	r2, [sp, #68]	; 0x44
  4072cc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4072d0:	9010      	str	r0, [sp, #64]	; 0x40
  4072d2:	ddef      	ble.n	4072b4 <_vfiprintf_r+0x2f4>
  4072d4:	2a00      	cmp	r2, #0
  4072d6:	f040 81e4 	bne.w	4076a2 <_vfiprintf_r+0x6e2>
  4072da:	3d10      	subs	r5, #16
  4072dc:	2d10      	cmp	r5, #16
  4072de:	4611      	mov	r1, r2
  4072e0:	f04f 0c01 	mov.w	ip, #1
  4072e4:	46ce      	mov	lr, r9
  4072e6:	dced      	bgt.n	4072c4 <_vfiprintf_r+0x304>
  4072e8:	4654      	mov	r4, sl
  4072ea:	4661      	mov	r1, ip
  4072ec:	46f2      	mov	sl, lr
  4072ee:	442a      	add	r2, r5
  4072f0:	2907      	cmp	r1, #7
  4072f2:	9211      	str	r2, [sp, #68]	; 0x44
  4072f4:	f8ca 6000 	str.w	r6, [sl]
  4072f8:	f8ca 5004 	str.w	r5, [sl, #4]
  4072fc:	9110      	str	r1, [sp, #64]	; 0x40
  4072fe:	f300 82ec 	bgt.w	4078da <_vfiprintf_r+0x91a>
  407302:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407306:	f10a 0a08 	add.w	sl, sl, #8
  40730a:	1c48      	adds	r0, r1, #1
  40730c:	2d00      	cmp	r5, #0
  40730e:	f040 81de 	bne.w	4076ce <_vfiprintf_r+0x70e>
  407312:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407314:	2b00      	cmp	r3, #0
  407316:	f000 81f8 	beq.w	40770a <_vfiprintf_r+0x74a>
  40731a:	3202      	adds	r2, #2
  40731c:	a90e      	add	r1, sp, #56	; 0x38
  40731e:	2302      	movs	r3, #2
  407320:	2807      	cmp	r0, #7
  407322:	9211      	str	r2, [sp, #68]	; 0x44
  407324:	9010      	str	r0, [sp, #64]	; 0x40
  407326:	e88a 000a 	stmia.w	sl, {r1, r3}
  40732a:	f340 81ea 	ble.w	407702 <_vfiprintf_r+0x742>
  40732e:	2a00      	cmp	r2, #0
  407330:	f040 838c 	bne.w	407a4c <_vfiprintf_r+0xa8c>
  407334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407336:	2b80      	cmp	r3, #128	; 0x80
  407338:	f04f 0001 	mov.w	r0, #1
  40733c:	4611      	mov	r1, r2
  40733e:	46ca      	mov	sl, r9
  407340:	f040 81e7 	bne.w	407712 <_vfiprintf_r+0x752>
  407344:	9b08      	ldr	r3, [sp, #32]
  407346:	9d01      	ldr	r5, [sp, #4]
  407348:	1b5e      	subs	r6, r3, r5
  40734a:	2e00      	cmp	r6, #0
  40734c:	f340 81e1 	ble.w	407712 <_vfiprintf_r+0x752>
  407350:	2e10      	cmp	r6, #16
  407352:	4d9a      	ldr	r5, [pc, #616]	; (4075bc <_vfiprintf_r+0x5fc>)
  407354:	f340 8450 	ble.w	407bf8 <_vfiprintf_r+0xc38>
  407358:	46d4      	mov	ip, sl
  40735a:	2710      	movs	r7, #16
  40735c:	46a2      	mov	sl, r4
  40735e:	9c06      	ldr	r4, [sp, #24]
  407360:	e007      	b.n	407372 <_vfiprintf_r+0x3b2>
  407362:	f101 0e02 	add.w	lr, r1, #2
  407366:	f10c 0c08 	add.w	ip, ip, #8
  40736a:	4601      	mov	r1, r0
  40736c:	3e10      	subs	r6, #16
  40736e:	2e10      	cmp	r6, #16
  407370:	dd11      	ble.n	407396 <_vfiprintf_r+0x3d6>
  407372:	1c48      	adds	r0, r1, #1
  407374:	3210      	adds	r2, #16
  407376:	2807      	cmp	r0, #7
  407378:	9211      	str	r2, [sp, #68]	; 0x44
  40737a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40737e:	9010      	str	r0, [sp, #64]	; 0x40
  407380:	ddef      	ble.n	407362 <_vfiprintf_r+0x3a2>
  407382:	2a00      	cmp	r2, #0
  407384:	f040 829d 	bne.w	4078c2 <_vfiprintf_r+0x902>
  407388:	3e10      	subs	r6, #16
  40738a:	2e10      	cmp	r6, #16
  40738c:	f04f 0e01 	mov.w	lr, #1
  407390:	4611      	mov	r1, r2
  407392:	46cc      	mov	ip, r9
  407394:	dced      	bgt.n	407372 <_vfiprintf_r+0x3b2>
  407396:	4654      	mov	r4, sl
  407398:	46e2      	mov	sl, ip
  40739a:	4432      	add	r2, r6
  40739c:	f1be 0f07 	cmp.w	lr, #7
  4073a0:	9211      	str	r2, [sp, #68]	; 0x44
  4073a2:	e88a 0060 	stmia.w	sl, {r5, r6}
  4073a6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4073aa:	f300 8369 	bgt.w	407a80 <_vfiprintf_r+0xac0>
  4073ae:	f10a 0a08 	add.w	sl, sl, #8
  4073b2:	f10e 0001 	add.w	r0, lr, #1
  4073b6:	4671      	mov	r1, lr
  4073b8:	e1ab      	b.n	407712 <_vfiprintf_r+0x752>
  4073ba:	9608      	str	r6, [sp, #32]
  4073bc:	f013 0220 	ands.w	r2, r3, #32
  4073c0:	f040 838c 	bne.w	407adc <_vfiprintf_r+0xb1c>
  4073c4:	f013 0110 	ands.w	r1, r3, #16
  4073c8:	f040 831a 	bne.w	407a00 <_vfiprintf_r+0xa40>
  4073cc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4073d0:	f000 8316 	beq.w	407a00 <_vfiprintf_r+0xa40>
  4073d4:	9807      	ldr	r0, [sp, #28]
  4073d6:	460a      	mov	r2, r1
  4073d8:	4601      	mov	r1, r0
  4073da:	3104      	adds	r1, #4
  4073dc:	8806      	ldrh	r6, [r0, #0]
  4073de:	9107      	str	r1, [sp, #28]
  4073e0:	2700      	movs	r7, #0
  4073e2:	e720      	b.n	407226 <_vfiprintf_r+0x266>
  4073e4:	9608      	str	r6, [sp, #32]
  4073e6:	f043 0310 	orr.w	r3, r3, #16
  4073ea:	e7e7      	b.n	4073bc <_vfiprintf_r+0x3fc>
  4073ec:	9608      	str	r6, [sp, #32]
  4073ee:	f043 0310 	orr.w	r3, r3, #16
  4073f2:	e708      	b.n	407206 <_vfiprintf_r+0x246>
  4073f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4073f8:	f898 2000 	ldrb.w	r2, [r8]
  4073fc:	e652      	b.n	4070a4 <_vfiprintf_r+0xe4>
  4073fe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407402:	2600      	movs	r6, #0
  407404:	f818 2b01 	ldrb.w	r2, [r8], #1
  407408:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40740c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  407410:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407414:	2909      	cmp	r1, #9
  407416:	d9f5      	bls.n	407404 <_vfiprintf_r+0x444>
  407418:	e646      	b.n	4070a8 <_vfiprintf_r+0xe8>
  40741a:	9608      	str	r6, [sp, #32]
  40741c:	2800      	cmp	r0, #0
  40741e:	f040 8408 	bne.w	407c32 <_vfiprintf_r+0xc72>
  407422:	f043 0310 	orr.w	r3, r3, #16
  407426:	069e      	lsls	r6, r3, #26
  407428:	f100 834c 	bmi.w	407ac4 <_vfiprintf_r+0xb04>
  40742c:	06dd      	lsls	r5, r3, #27
  40742e:	f100 82f3 	bmi.w	407a18 <_vfiprintf_r+0xa58>
  407432:	0658      	lsls	r0, r3, #25
  407434:	f140 82f0 	bpl.w	407a18 <_vfiprintf_r+0xa58>
  407438:	9d07      	ldr	r5, [sp, #28]
  40743a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40743e:	462a      	mov	r2, r5
  407440:	17f7      	asrs	r7, r6, #31
  407442:	3204      	adds	r2, #4
  407444:	4630      	mov	r0, r6
  407446:	4639      	mov	r1, r7
  407448:	9207      	str	r2, [sp, #28]
  40744a:	2800      	cmp	r0, #0
  40744c:	f171 0200 	sbcs.w	r2, r1, #0
  407450:	f2c0 835d 	blt.w	407b0e <_vfiprintf_r+0xb4e>
  407454:	1c61      	adds	r1, r4, #1
  407456:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40745a:	f04f 0201 	mov.w	r2, #1
  40745e:	f47f aeea 	bne.w	407236 <_vfiprintf_r+0x276>
  407462:	ea56 0107 	orrs.w	r1, r6, r7
  407466:	f000 824d 	beq.w	407904 <_vfiprintf_r+0x944>
  40746a:	9302      	str	r3, [sp, #8]
  40746c:	2a01      	cmp	r2, #1
  40746e:	f000 828c 	beq.w	40798a <_vfiprintf_r+0x9ca>
  407472:	2a02      	cmp	r2, #2
  407474:	f040 825c 	bne.w	407930 <_vfiprintf_r+0x970>
  407478:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40747a:	46cb      	mov	fp, r9
  40747c:	0933      	lsrs	r3, r6, #4
  40747e:	f006 010f 	and.w	r1, r6, #15
  407482:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  407486:	093a      	lsrs	r2, r7, #4
  407488:	461e      	mov	r6, r3
  40748a:	4617      	mov	r7, r2
  40748c:	5c43      	ldrb	r3, [r0, r1]
  40748e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  407492:	ea56 0307 	orrs.w	r3, r6, r7
  407496:	d1f1      	bne.n	40747c <_vfiprintf_r+0x4bc>
  407498:	eba9 030b 	sub.w	r3, r9, fp
  40749c:	9305      	str	r3, [sp, #20]
  40749e:	e6e1      	b.n	407264 <_vfiprintf_r+0x2a4>
  4074a0:	2800      	cmp	r0, #0
  4074a2:	f040 83c0 	bne.w	407c26 <_vfiprintf_r+0xc66>
  4074a6:	0699      	lsls	r1, r3, #26
  4074a8:	f100 8367 	bmi.w	407b7a <_vfiprintf_r+0xbba>
  4074ac:	06da      	lsls	r2, r3, #27
  4074ae:	f100 80f1 	bmi.w	407694 <_vfiprintf_r+0x6d4>
  4074b2:	065b      	lsls	r3, r3, #25
  4074b4:	f140 80ee 	bpl.w	407694 <_vfiprintf_r+0x6d4>
  4074b8:	9a07      	ldr	r2, [sp, #28]
  4074ba:	6813      	ldr	r3, [r2, #0]
  4074bc:	3204      	adds	r2, #4
  4074be:	9207      	str	r2, [sp, #28]
  4074c0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4074c4:	801a      	strh	r2, [r3, #0]
  4074c6:	e5b8      	b.n	40703a <_vfiprintf_r+0x7a>
  4074c8:	9807      	ldr	r0, [sp, #28]
  4074ca:	4a3d      	ldr	r2, [pc, #244]	; (4075c0 <_vfiprintf_r+0x600>)
  4074cc:	9608      	str	r6, [sp, #32]
  4074ce:	920b      	str	r2, [sp, #44]	; 0x2c
  4074d0:	6806      	ldr	r6, [r0, #0]
  4074d2:	2278      	movs	r2, #120	; 0x78
  4074d4:	2130      	movs	r1, #48	; 0x30
  4074d6:	3004      	adds	r0, #4
  4074d8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4074dc:	f043 0302 	orr.w	r3, r3, #2
  4074e0:	9007      	str	r0, [sp, #28]
  4074e2:	2700      	movs	r7, #0
  4074e4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4074e8:	2202      	movs	r2, #2
  4074ea:	e69c      	b.n	407226 <_vfiprintf_r+0x266>
  4074ec:	9608      	str	r6, [sp, #32]
  4074ee:	2800      	cmp	r0, #0
  4074f0:	d099      	beq.n	407426 <_vfiprintf_r+0x466>
  4074f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4074f6:	e796      	b.n	407426 <_vfiprintf_r+0x466>
  4074f8:	f898 2000 	ldrb.w	r2, [r8]
  4074fc:	2d00      	cmp	r5, #0
  4074fe:	f47f add1 	bne.w	4070a4 <_vfiprintf_r+0xe4>
  407502:	2001      	movs	r0, #1
  407504:	2520      	movs	r5, #32
  407506:	e5cd      	b.n	4070a4 <_vfiprintf_r+0xe4>
  407508:	f043 0301 	orr.w	r3, r3, #1
  40750c:	f898 2000 	ldrb.w	r2, [r8]
  407510:	e5c8      	b.n	4070a4 <_vfiprintf_r+0xe4>
  407512:	9608      	str	r6, [sp, #32]
  407514:	2800      	cmp	r0, #0
  407516:	f040 8393 	bne.w	407c40 <_vfiprintf_r+0xc80>
  40751a:	4929      	ldr	r1, [pc, #164]	; (4075c0 <_vfiprintf_r+0x600>)
  40751c:	910b      	str	r1, [sp, #44]	; 0x2c
  40751e:	069f      	lsls	r7, r3, #26
  407520:	f100 82e8 	bmi.w	407af4 <_vfiprintf_r+0xb34>
  407524:	9807      	ldr	r0, [sp, #28]
  407526:	06de      	lsls	r6, r3, #27
  407528:	4601      	mov	r1, r0
  40752a:	f100 8270 	bmi.w	407a0e <_vfiprintf_r+0xa4e>
  40752e:	065d      	lsls	r5, r3, #25
  407530:	f140 826d 	bpl.w	407a0e <_vfiprintf_r+0xa4e>
  407534:	3104      	adds	r1, #4
  407536:	8806      	ldrh	r6, [r0, #0]
  407538:	9107      	str	r1, [sp, #28]
  40753a:	2700      	movs	r7, #0
  40753c:	07d8      	lsls	r0, r3, #31
  40753e:	f140 8222 	bpl.w	407986 <_vfiprintf_r+0x9c6>
  407542:	ea56 0107 	orrs.w	r1, r6, r7
  407546:	f000 821e 	beq.w	407986 <_vfiprintf_r+0x9c6>
  40754a:	2130      	movs	r1, #48	; 0x30
  40754c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  407550:	f043 0302 	orr.w	r3, r3, #2
  407554:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  407558:	2202      	movs	r2, #2
  40755a:	e664      	b.n	407226 <_vfiprintf_r+0x266>
  40755c:	9608      	str	r6, [sp, #32]
  40755e:	2800      	cmp	r0, #0
  407560:	f040 836b 	bne.w	407c3a <_vfiprintf_r+0xc7a>
  407564:	4917      	ldr	r1, [pc, #92]	; (4075c4 <_vfiprintf_r+0x604>)
  407566:	910b      	str	r1, [sp, #44]	; 0x2c
  407568:	e7d9      	b.n	40751e <_vfiprintf_r+0x55e>
  40756a:	9907      	ldr	r1, [sp, #28]
  40756c:	9608      	str	r6, [sp, #32]
  40756e:	680a      	ldr	r2, [r1, #0]
  407570:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  407574:	f04f 0000 	mov.w	r0, #0
  407578:	460a      	mov	r2, r1
  40757a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40757e:	3204      	adds	r2, #4
  407580:	2001      	movs	r0, #1
  407582:	9001      	str	r0, [sp, #4]
  407584:	9207      	str	r2, [sp, #28]
  407586:	9005      	str	r0, [sp, #20]
  407588:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40758c:	9302      	str	r3, [sp, #8]
  40758e:	2400      	movs	r4, #0
  407590:	e670      	b.n	407274 <_vfiprintf_r+0x2b4>
  407592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407596:	f898 2000 	ldrb.w	r2, [r8]
  40759a:	e583      	b.n	4070a4 <_vfiprintf_r+0xe4>
  40759c:	f898 2000 	ldrb.w	r2, [r8]
  4075a0:	2a6c      	cmp	r2, #108	; 0x6c
  4075a2:	bf03      	ittte	eq
  4075a4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4075a8:	f043 0320 	orreq.w	r3, r3, #32
  4075ac:	f108 0801 	addeq.w	r8, r8, #1
  4075b0:	f043 0310 	orrne.w	r3, r3, #16
  4075b4:	e576      	b.n	4070a4 <_vfiprintf_r+0xe4>
  4075b6:	bf00      	nop
  4075b8:	00409b88 	.word	0x00409b88
  4075bc:	00409b98 	.word	0x00409b98
  4075c0:	00409b6c 	.word	0x00409b6c
  4075c4:	00409b58 	.word	0x00409b58
  4075c8:	9907      	ldr	r1, [sp, #28]
  4075ca:	680e      	ldr	r6, [r1, #0]
  4075cc:	460a      	mov	r2, r1
  4075ce:	2e00      	cmp	r6, #0
  4075d0:	f102 0204 	add.w	r2, r2, #4
  4075d4:	f6ff ae0f 	blt.w	4071f6 <_vfiprintf_r+0x236>
  4075d8:	9207      	str	r2, [sp, #28]
  4075da:	f898 2000 	ldrb.w	r2, [r8]
  4075de:	e561      	b.n	4070a4 <_vfiprintf_r+0xe4>
  4075e0:	f898 2000 	ldrb.w	r2, [r8]
  4075e4:	2001      	movs	r0, #1
  4075e6:	252b      	movs	r5, #43	; 0x2b
  4075e8:	e55c      	b.n	4070a4 <_vfiprintf_r+0xe4>
  4075ea:	9907      	ldr	r1, [sp, #28]
  4075ec:	9608      	str	r6, [sp, #32]
  4075ee:	f8d1 b000 	ldr.w	fp, [r1]
  4075f2:	f04f 0200 	mov.w	r2, #0
  4075f6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4075fa:	1d0e      	adds	r6, r1, #4
  4075fc:	f1bb 0f00 	cmp.w	fp, #0
  407600:	f000 82e5 	beq.w	407bce <_vfiprintf_r+0xc0e>
  407604:	1c67      	adds	r7, r4, #1
  407606:	f000 82c4 	beq.w	407b92 <_vfiprintf_r+0xbd2>
  40760a:	4622      	mov	r2, r4
  40760c:	2100      	movs	r1, #0
  40760e:	4658      	mov	r0, fp
  407610:	9301      	str	r3, [sp, #4]
  407612:	f001 fbd5 	bl	408dc0 <memchr>
  407616:	9b01      	ldr	r3, [sp, #4]
  407618:	2800      	cmp	r0, #0
  40761a:	f000 82e5 	beq.w	407be8 <_vfiprintf_r+0xc28>
  40761e:	eba0 020b 	sub.w	r2, r0, fp
  407622:	9205      	str	r2, [sp, #20]
  407624:	9607      	str	r6, [sp, #28]
  407626:	9302      	str	r3, [sp, #8]
  407628:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40762c:	2400      	movs	r4, #0
  40762e:	e619      	b.n	407264 <_vfiprintf_r+0x2a4>
  407630:	f898 2000 	ldrb.w	r2, [r8]
  407634:	2a2a      	cmp	r2, #42	; 0x2a
  407636:	f108 0701 	add.w	r7, r8, #1
  40763a:	f000 82e9 	beq.w	407c10 <_vfiprintf_r+0xc50>
  40763e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407642:	2909      	cmp	r1, #9
  407644:	46b8      	mov	r8, r7
  407646:	f04f 0400 	mov.w	r4, #0
  40764a:	f63f ad2d 	bhi.w	4070a8 <_vfiprintf_r+0xe8>
  40764e:	f818 2b01 	ldrb.w	r2, [r8], #1
  407652:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407656:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40765a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40765e:	2909      	cmp	r1, #9
  407660:	d9f5      	bls.n	40764e <_vfiprintf_r+0x68e>
  407662:	e521      	b.n	4070a8 <_vfiprintf_r+0xe8>
  407664:	f043 0320 	orr.w	r3, r3, #32
  407668:	f898 2000 	ldrb.w	r2, [r8]
  40766c:	e51a      	b.n	4070a4 <_vfiprintf_r+0xe4>
  40766e:	9608      	str	r6, [sp, #32]
  407670:	2800      	cmp	r0, #0
  407672:	f040 82db 	bne.w	407c2c <_vfiprintf_r+0xc6c>
  407676:	2a00      	cmp	r2, #0
  407678:	f000 80e7 	beq.w	40784a <_vfiprintf_r+0x88a>
  40767c:	2101      	movs	r1, #1
  40767e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  407682:	f04f 0200 	mov.w	r2, #0
  407686:	9101      	str	r1, [sp, #4]
  407688:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40768c:	9105      	str	r1, [sp, #20]
  40768e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  407692:	e77b      	b.n	40758c <_vfiprintf_r+0x5cc>
  407694:	9a07      	ldr	r2, [sp, #28]
  407696:	6813      	ldr	r3, [r2, #0]
  407698:	3204      	adds	r2, #4
  40769a:	9207      	str	r2, [sp, #28]
  40769c:	9a03      	ldr	r2, [sp, #12]
  40769e:	601a      	str	r2, [r3, #0]
  4076a0:	e4cb      	b.n	40703a <_vfiprintf_r+0x7a>
  4076a2:	aa0f      	add	r2, sp, #60	; 0x3c
  4076a4:	9904      	ldr	r1, [sp, #16]
  4076a6:	4620      	mov	r0, r4
  4076a8:	f7ff fc4a 	bl	406f40 <__sprint_r.part.0>
  4076ac:	2800      	cmp	r0, #0
  4076ae:	f040 8139 	bne.w	407924 <_vfiprintf_r+0x964>
  4076b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4076b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4076b6:	f101 0c01 	add.w	ip, r1, #1
  4076ba:	46ce      	mov	lr, r9
  4076bc:	e5ff      	b.n	4072be <_vfiprintf_r+0x2fe>
  4076be:	9910      	ldr	r1, [sp, #64]	; 0x40
  4076c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4076c2:	1c48      	adds	r0, r1, #1
  4076c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4076c8:	2d00      	cmp	r5, #0
  4076ca:	f43f ae22 	beq.w	407312 <_vfiprintf_r+0x352>
  4076ce:	3201      	adds	r2, #1
  4076d0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4076d4:	2101      	movs	r1, #1
  4076d6:	2807      	cmp	r0, #7
  4076d8:	9211      	str	r2, [sp, #68]	; 0x44
  4076da:	9010      	str	r0, [sp, #64]	; 0x40
  4076dc:	f8ca 5000 	str.w	r5, [sl]
  4076e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4076e4:	f340 8108 	ble.w	4078f8 <_vfiprintf_r+0x938>
  4076e8:	2a00      	cmp	r2, #0
  4076ea:	f040 81bc 	bne.w	407a66 <_vfiprintf_r+0xaa6>
  4076ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4076f0:	2b00      	cmp	r3, #0
  4076f2:	f43f ae1f 	beq.w	407334 <_vfiprintf_r+0x374>
  4076f6:	ab0e      	add	r3, sp, #56	; 0x38
  4076f8:	2202      	movs	r2, #2
  4076fa:	4608      	mov	r0, r1
  4076fc:	931c      	str	r3, [sp, #112]	; 0x70
  4076fe:	921d      	str	r2, [sp, #116]	; 0x74
  407700:	46ca      	mov	sl, r9
  407702:	4601      	mov	r1, r0
  407704:	f10a 0a08 	add.w	sl, sl, #8
  407708:	3001      	adds	r0, #1
  40770a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40770c:	2b80      	cmp	r3, #128	; 0x80
  40770e:	f43f ae19 	beq.w	407344 <_vfiprintf_r+0x384>
  407712:	9b05      	ldr	r3, [sp, #20]
  407714:	1ae4      	subs	r4, r4, r3
  407716:	2c00      	cmp	r4, #0
  407718:	dd2e      	ble.n	407778 <_vfiprintf_r+0x7b8>
  40771a:	2c10      	cmp	r4, #16
  40771c:	4db3      	ldr	r5, [pc, #716]	; (4079ec <_vfiprintf_r+0xa2c>)
  40771e:	dd1e      	ble.n	40775e <_vfiprintf_r+0x79e>
  407720:	46d6      	mov	lr, sl
  407722:	2610      	movs	r6, #16
  407724:	9f06      	ldr	r7, [sp, #24]
  407726:	f8dd a010 	ldr.w	sl, [sp, #16]
  40772a:	e006      	b.n	40773a <_vfiprintf_r+0x77a>
  40772c:	1c88      	adds	r0, r1, #2
  40772e:	f10e 0e08 	add.w	lr, lr, #8
  407732:	4619      	mov	r1, r3
  407734:	3c10      	subs	r4, #16
  407736:	2c10      	cmp	r4, #16
  407738:	dd10      	ble.n	40775c <_vfiprintf_r+0x79c>
  40773a:	1c4b      	adds	r3, r1, #1
  40773c:	3210      	adds	r2, #16
  40773e:	2b07      	cmp	r3, #7
  407740:	9211      	str	r2, [sp, #68]	; 0x44
  407742:	e88e 0060 	stmia.w	lr, {r5, r6}
  407746:	9310      	str	r3, [sp, #64]	; 0x40
  407748:	ddf0      	ble.n	40772c <_vfiprintf_r+0x76c>
  40774a:	2a00      	cmp	r2, #0
  40774c:	d165      	bne.n	40781a <_vfiprintf_r+0x85a>
  40774e:	3c10      	subs	r4, #16
  407750:	2c10      	cmp	r4, #16
  407752:	f04f 0001 	mov.w	r0, #1
  407756:	4611      	mov	r1, r2
  407758:	46ce      	mov	lr, r9
  40775a:	dcee      	bgt.n	40773a <_vfiprintf_r+0x77a>
  40775c:	46f2      	mov	sl, lr
  40775e:	4422      	add	r2, r4
  407760:	2807      	cmp	r0, #7
  407762:	9211      	str	r2, [sp, #68]	; 0x44
  407764:	f8ca 5000 	str.w	r5, [sl]
  407768:	f8ca 4004 	str.w	r4, [sl, #4]
  40776c:	9010      	str	r0, [sp, #64]	; 0x40
  40776e:	f300 8085 	bgt.w	40787c <_vfiprintf_r+0x8bc>
  407772:	f10a 0a08 	add.w	sl, sl, #8
  407776:	3001      	adds	r0, #1
  407778:	9905      	ldr	r1, [sp, #20]
  40777a:	f8ca b000 	str.w	fp, [sl]
  40777e:	440a      	add	r2, r1
  407780:	2807      	cmp	r0, #7
  407782:	9211      	str	r2, [sp, #68]	; 0x44
  407784:	f8ca 1004 	str.w	r1, [sl, #4]
  407788:	9010      	str	r0, [sp, #64]	; 0x40
  40778a:	f340 8082 	ble.w	407892 <_vfiprintf_r+0x8d2>
  40778e:	2a00      	cmp	r2, #0
  407790:	f040 8118 	bne.w	4079c4 <_vfiprintf_r+0xa04>
  407794:	9b02      	ldr	r3, [sp, #8]
  407796:	9210      	str	r2, [sp, #64]	; 0x40
  407798:	0758      	lsls	r0, r3, #29
  40779a:	d535      	bpl.n	407808 <_vfiprintf_r+0x848>
  40779c:	9b08      	ldr	r3, [sp, #32]
  40779e:	9901      	ldr	r1, [sp, #4]
  4077a0:	1a5c      	subs	r4, r3, r1
  4077a2:	2c00      	cmp	r4, #0
  4077a4:	f340 80e7 	ble.w	407976 <_vfiprintf_r+0x9b6>
  4077a8:	46ca      	mov	sl, r9
  4077aa:	2c10      	cmp	r4, #16
  4077ac:	f340 8218 	ble.w	407be0 <_vfiprintf_r+0xc20>
  4077b0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4077b2:	4e8f      	ldr	r6, [pc, #572]	; (4079f0 <_vfiprintf_r+0xa30>)
  4077b4:	9f06      	ldr	r7, [sp, #24]
  4077b6:	f8dd b010 	ldr.w	fp, [sp, #16]
  4077ba:	2510      	movs	r5, #16
  4077bc:	e006      	b.n	4077cc <_vfiprintf_r+0x80c>
  4077be:	1c88      	adds	r0, r1, #2
  4077c0:	f10a 0a08 	add.w	sl, sl, #8
  4077c4:	4619      	mov	r1, r3
  4077c6:	3c10      	subs	r4, #16
  4077c8:	2c10      	cmp	r4, #16
  4077ca:	dd11      	ble.n	4077f0 <_vfiprintf_r+0x830>
  4077cc:	1c4b      	adds	r3, r1, #1
  4077ce:	3210      	adds	r2, #16
  4077d0:	2b07      	cmp	r3, #7
  4077d2:	9211      	str	r2, [sp, #68]	; 0x44
  4077d4:	f8ca 6000 	str.w	r6, [sl]
  4077d8:	f8ca 5004 	str.w	r5, [sl, #4]
  4077dc:	9310      	str	r3, [sp, #64]	; 0x40
  4077de:	ddee      	ble.n	4077be <_vfiprintf_r+0x7fe>
  4077e0:	bb42      	cbnz	r2, 407834 <_vfiprintf_r+0x874>
  4077e2:	3c10      	subs	r4, #16
  4077e4:	2c10      	cmp	r4, #16
  4077e6:	f04f 0001 	mov.w	r0, #1
  4077ea:	4611      	mov	r1, r2
  4077ec:	46ca      	mov	sl, r9
  4077ee:	dced      	bgt.n	4077cc <_vfiprintf_r+0x80c>
  4077f0:	4422      	add	r2, r4
  4077f2:	2807      	cmp	r0, #7
  4077f4:	9211      	str	r2, [sp, #68]	; 0x44
  4077f6:	f8ca 6000 	str.w	r6, [sl]
  4077fa:	f8ca 4004 	str.w	r4, [sl, #4]
  4077fe:	9010      	str	r0, [sp, #64]	; 0x40
  407800:	dd51      	ble.n	4078a6 <_vfiprintf_r+0x8e6>
  407802:	2a00      	cmp	r2, #0
  407804:	f040 819b 	bne.w	407b3e <_vfiprintf_r+0xb7e>
  407808:	9b03      	ldr	r3, [sp, #12]
  40780a:	9a08      	ldr	r2, [sp, #32]
  40780c:	9901      	ldr	r1, [sp, #4]
  40780e:	428a      	cmp	r2, r1
  407810:	bfac      	ite	ge
  407812:	189b      	addge	r3, r3, r2
  407814:	185b      	addlt	r3, r3, r1
  407816:	9303      	str	r3, [sp, #12]
  407818:	e04e      	b.n	4078b8 <_vfiprintf_r+0x8f8>
  40781a:	aa0f      	add	r2, sp, #60	; 0x3c
  40781c:	4651      	mov	r1, sl
  40781e:	4638      	mov	r0, r7
  407820:	f7ff fb8e 	bl	406f40 <__sprint_r.part.0>
  407824:	2800      	cmp	r0, #0
  407826:	f040 813f 	bne.w	407aa8 <_vfiprintf_r+0xae8>
  40782a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40782c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40782e:	1c48      	adds	r0, r1, #1
  407830:	46ce      	mov	lr, r9
  407832:	e77f      	b.n	407734 <_vfiprintf_r+0x774>
  407834:	aa0f      	add	r2, sp, #60	; 0x3c
  407836:	4659      	mov	r1, fp
  407838:	4638      	mov	r0, r7
  40783a:	f7ff fb81 	bl	406f40 <__sprint_r.part.0>
  40783e:	b960      	cbnz	r0, 40785a <_vfiprintf_r+0x89a>
  407840:	9910      	ldr	r1, [sp, #64]	; 0x40
  407842:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407844:	1c48      	adds	r0, r1, #1
  407846:	46ca      	mov	sl, r9
  407848:	e7bd      	b.n	4077c6 <_vfiprintf_r+0x806>
  40784a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40784c:	f8dd b010 	ldr.w	fp, [sp, #16]
  407850:	2b00      	cmp	r3, #0
  407852:	f040 81d4 	bne.w	407bfe <_vfiprintf_r+0xc3e>
  407856:	2300      	movs	r3, #0
  407858:	9310      	str	r3, [sp, #64]	; 0x40
  40785a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40785e:	f013 0f01 	tst.w	r3, #1
  407862:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407866:	d102      	bne.n	40786e <_vfiprintf_r+0x8ae>
  407868:	059a      	lsls	r2, r3, #22
  40786a:	f140 80de 	bpl.w	407a2a <_vfiprintf_r+0xa6a>
  40786e:	065b      	lsls	r3, r3, #25
  407870:	f53f acb2 	bmi.w	4071d8 <_vfiprintf_r+0x218>
  407874:	9803      	ldr	r0, [sp, #12]
  407876:	b02d      	add	sp, #180	; 0xb4
  407878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40787c:	2a00      	cmp	r2, #0
  40787e:	f040 8106 	bne.w	407a8e <_vfiprintf_r+0xace>
  407882:	9a05      	ldr	r2, [sp, #20]
  407884:	921d      	str	r2, [sp, #116]	; 0x74
  407886:	2301      	movs	r3, #1
  407888:	9211      	str	r2, [sp, #68]	; 0x44
  40788a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40788e:	9310      	str	r3, [sp, #64]	; 0x40
  407890:	46ca      	mov	sl, r9
  407892:	f10a 0a08 	add.w	sl, sl, #8
  407896:	9b02      	ldr	r3, [sp, #8]
  407898:	0759      	lsls	r1, r3, #29
  40789a:	d504      	bpl.n	4078a6 <_vfiprintf_r+0x8e6>
  40789c:	9b08      	ldr	r3, [sp, #32]
  40789e:	9901      	ldr	r1, [sp, #4]
  4078a0:	1a5c      	subs	r4, r3, r1
  4078a2:	2c00      	cmp	r4, #0
  4078a4:	dc81      	bgt.n	4077aa <_vfiprintf_r+0x7ea>
  4078a6:	9b03      	ldr	r3, [sp, #12]
  4078a8:	9908      	ldr	r1, [sp, #32]
  4078aa:	9801      	ldr	r0, [sp, #4]
  4078ac:	4281      	cmp	r1, r0
  4078ae:	bfac      	ite	ge
  4078b0:	185b      	addge	r3, r3, r1
  4078b2:	181b      	addlt	r3, r3, r0
  4078b4:	9303      	str	r3, [sp, #12]
  4078b6:	bb72      	cbnz	r2, 407916 <_vfiprintf_r+0x956>
  4078b8:	2300      	movs	r3, #0
  4078ba:	9310      	str	r3, [sp, #64]	; 0x40
  4078bc:	46ca      	mov	sl, r9
  4078be:	f7ff bbbc 	b.w	40703a <_vfiprintf_r+0x7a>
  4078c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4078c4:	9904      	ldr	r1, [sp, #16]
  4078c6:	4620      	mov	r0, r4
  4078c8:	f7ff fb3a 	bl	406f40 <__sprint_r.part.0>
  4078cc:	bb50      	cbnz	r0, 407924 <_vfiprintf_r+0x964>
  4078ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4078d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4078d2:	f101 0e01 	add.w	lr, r1, #1
  4078d6:	46cc      	mov	ip, r9
  4078d8:	e548      	b.n	40736c <_vfiprintf_r+0x3ac>
  4078da:	2a00      	cmp	r2, #0
  4078dc:	f040 8140 	bne.w	407b60 <_vfiprintf_r+0xba0>
  4078e0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4078e4:	2900      	cmp	r1, #0
  4078e6:	f000 811b 	beq.w	407b20 <_vfiprintf_r+0xb60>
  4078ea:	2201      	movs	r2, #1
  4078ec:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4078f0:	4610      	mov	r0, r2
  4078f2:	921d      	str	r2, [sp, #116]	; 0x74
  4078f4:	911c      	str	r1, [sp, #112]	; 0x70
  4078f6:	46ca      	mov	sl, r9
  4078f8:	4601      	mov	r1, r0
  4078fa:	f10a 0a08 	add.w	sl, sl, #8
  4078fe:	3001      	adds	r0, #1
  407900:	e507      	b.n	407312 <_vfiprintf_r+0x352>
  407902:	9b02      	ldr	r3, [sp, #8]
  407904:	2a01      	cmp	r2, #1
  407906:	f000 8098 	beq.w	407a3a <_vfiprintf_r+0xa7a>
  40790a:	2a02      	cmp	r2, #2
  40790c:	d10d      	bne.n	40792a <_vfiprintf_r+0x96a>
  40790e:	9302      	str	r3, [sp, #8]
  407910:	2600      	movs	r6, #0
  407912:	2700      	movs	r7, #0
  407914:	e5b0      	b.n	407478 <_vfiprintf_r+0x4b8>
  407916:	aa0f      	add	r2, sp, #60	; 0x3c
  407918:	9904      	ldr	r1, [sp, #16]
  40791a:	9806      	ldr	r0, [sp, #24]
  40791c:	f7ff fb10 	bl	406f40 <__sprint_r.part.0>
  407920:	2800      	cmp	r0, #0
  407922:	d0c9      	beq.n	4078b8 <_vfiprintf_r+0x8f8>
  407924:	f8dd b010 	ldr.w	fp, [sp, #16]
  407928:	e797      	b.n	40785a <_vfiprintf_r+0x89a>
  40792a:	9302      	str	r3, [sp, #8]
  40792c:	2600      	movs	r6, #0
  40792e:	2700      	movs	r7, #0
  407930:	4649      	mov	r1, r9
  407932:	e000      	b.n	407936 <_vfiprintf_r+0x976>
  407934:	4659      	mov	r1, fp
  407936:	08f2      	lsrs	r2, r6, #3
  407938:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40793c:	08f8      	lsrs	r0, r7, #3
  40793e:	f006 0307 	and.w	r3, r6, #7
  407942:	4607      	mov	r7, r0
  407944:	4616      	mov	r6, r2
  407946:	3330      	adds	r3, #48	; 0x30
  407948:	ea56 0207 	orrs.w	r2, r6, r7
  40794c:	f801 3c01 	strb.w	r3, [r1, #-1]
  407950:	f101 3bff 	add.w	fp, r1, #4294967295
  407954:	d1ee      	bne.n	407934 <_vfiprintf_r+0x974>
  407956:	9a02      	ldr	r2, [sp, #8]
  407958:	07d6      	lsls	r6, r2, #31
  40795a:	f57f ad9d 	bpl.w	407498 <_vfiprintf_r+0x4d8>
  40795e:	2b30      	cmp	r3, #48	; 0x30
  407960:	f43f ad9a 	beq.w	407498 <_vfiprintf_r+0x4d8>
  407964:	3902      	subs	r1, #2
  407966:	2330      	movs	r3, #48	; 0x30
  407968:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40796c:	eba9 0301 	sub.w	r3, r9, r1
  407970:	9305      	str	r3, [sp, #20]
  407972:	468b      	mov	fp, r1
  407974:	e476      	b.n	407264 <_vfiprintf_r+0x2a4>
  407976:	9b03      	ldr	r3, [sp, #12]
  407978:	9a08      	ldr	r2, [sp, #32]
  40797a:	428a      	cmp	r2, r1
  40797c:	bfac      	ite	ge
  40797e:	189b      	addge	r3, r3, r2
  407980:	185b      	addlt	r3, r3, r1
  407982:	9303      	str	r3, [sp, #12]
  407984:	e798      	b.n	4078b8 <_vfiprintf_r+0x8f8>
  407986:	2202      	movs	r2, #2
  407988:	e44d      	b.n	407226 <_vfiprintf_r+0x266>
  40798a:	2f00      	cmp	r7, #0
  40798c:	bf08      	it	eq
  40798e:	2e0a      	cmpeq	r6, #10
  407990:	d352      	bcc.n	407a38 <_vfiprintf_r+0xa78>
  407992:	46cb      	mov	fp, r9
  407994:	4630      	mov	r0, r6
  407996:	4639      	mov	r1, r7
  407998:	220a      	movs	r2, #10
  40799a:	2300      	movs	r3, #0
  40799c:	f001 fe9a 	bl	4096d4 <__aeabi_uldivmod>
  4079a0:	3230      	adds	r2, #48	; 0x30
  4079a2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4079a6:	4630      	mov	r0, r6
  4079a8:	4639      	mov	r1, r7
  4079aa:	2300      	movs	r3, #0
  4079ac:	220a      	movs	r2, #10
  4079ae:	f001 fe91 	bl	4096d4 <__aeabi_uldivmod>
  4079b2:	4606      	mov	r6, r0
  4079b4:	460f      	mov	r7, r1
  4079b6:	ea56 0307 	orrs.w	r3, r6, r7
  4079ba:	d1eb      	bne.n	407994 <_vfiprintf_r+0x9d4>
  4079bc:	e56c      	b.n	407498 <_vfiprintf_r+0x4d8>
  4079be:	9405      	str	r4, [sp, #20]
  4079c0:	46cb      	mov	fp, r9
  4079c2:	e44f      	b.n	407264 <_vfiprintf_r+0x2a4>
  4079c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4079c6:	9904      	ldr	r1, [sp, #16]
  4079c8:	9806      	ldr	r0, [sp, #24]
  4079ca:	f7ff fab9 	bl	406f40 <__sprint_r.part.0>
  4079ce:	2800      	cmp	r0, #0
  4079d0:	d1a8      	bne.n	407924 <_vfiprintf_r+0x964>
  4079d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4079d4:	46ca      	mov	sl, r9
  4079d6:	e75e      	b.n	407896 <_vfiprintf_r+0x8d6>
  4079d8:	aa0f      	add	r2, sp, #60	; 0x3c
  4079da:	9904      	ldr	r1, [sp, #16]
  4079dc:	9806      	ldr	r0, [sp, #24]
  4079de:	f7ff faaf 	bl	406f40 <__sprint_r.part.0>
  4079e2:	2800      	cmp	r0, #0
  4079e4:	d19e      	bne.n	407924 <_vfiprintf_r+0x964>
  4079e6:	46ca      	mov	sl, r9
  4079e8:	f7ff bbc0 	b.w	40716c <_vfiprintf_r+0x1ac>
  4079ec:	00409b98 	.word	0x00409b98
  4079f0:	00409b88 	.word	0x00409b88
  4079f4:	3104      	adds	r1, #4
  4079f6:	6816      	ldr	r6, [r2, #0]
  4079f8:	9107      	str	r1, [sp, #28]
  4079fa:	2201      	movs	r2, #1
  4079fc:	2700      	movs	r7, #0
  4079fe:	e412      	b.n	407226 <_vfiprintf_r+0x266>
  407a00:	9807      	ldr	r0, [sp, #28]
  407a02:	4601      	mov	r1, r0
  407a04:	3104      	adds	r1, #4
  407a06:	6806      	ldr	r6, [r0, #0]
  407a08:	9107      	str	r1, [sp, #28]
  407a0a:	2700      	movs	r7, #0
  407a0c:	e40b      	b.n	407226 <_vfiprintf_r+0x266>
  407a0e:	680e      	ldr	r6, [r1, #0]
  407a10:	3104      	adds	r1, #4
  407a12:	9107      	str	r1, [sp, #28]
  407a14:	2700      	movs	r7, #0
  407a16:	e591      	b.n	40753c <_vfiprintf_r+0x57c>
  407a18:	9907      	ldr	r1, [sp, #28]
  407a1a:	680e      	ldr	r6, [r1, #0]
  407a1c:	460a      	mov	r2, r1
  407a1e:	17f7      	asrs	r7, r6, #31
  407a20:	3204      	adds	r2, #4
  407a22:	9207      	str	r2, [sp, #28]
  407a24:	4630      	mov	r0, r6
  407a26:	4639      	mov	r1, r7
  407a28:	e50f      	b.n	40744a <_vfiprintf_r+0x48a>
  407a2a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407a2e:	f000 fe7f 	bl	408730 <__retarget_lock_release_recursive>
  407a32:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407a36:	e71a      	b.n	40786e <_vfiprintf_r+0x8ae>
  407a38:	9b02      	ldr	r3, [sp, #8]
  407a3a:	9302      	str	r3, [sp, #8]
  407a3c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  407a40:	3630      	adds	r6, #48	; 0x30
  407a42:	2301      	movs	r3, #1
  407a44:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  407a48:	9305      	str	r3, [sp, #20]
  407a4a:	e40b      	b.n	407264 <_vfiprintf_r+0x2a4>
  407a4c:	aa0f      	add	r2, sp, #60	; 0x3c
  407a4e:	9904      	ldr	r1, [sp, #16]
  407a50:	9806      	ldr	r0, [sp, #24]
  407a52:	f7ff fa75 	bl	406f40 <__sprint_r.part.0>
  407a56:	2800      	cmp	r0, #0
  407a58:	f47f af64 	bne.w	407924 <_vfiprintf_r+0x964>
  407a5c:	9910      	ldr	r1, [sp, #64]	; 0x40
  407a5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407a60:	1c48      	adds	r0, r1, #1
  407a62:	46ca      	mov	sl, r9
  407a64:	e651      	b.n	40770a <_vfiprintf_r+0x74a>
  407a66:	aa0f      	add	r2, sp, #60	; 0x3c
  407a68:	9904      	ldr	r1, [sp, #16]
  407a6a:	9806      	ldr	r0, [sp, #24]
  407a6c:	f7ff fa68 	bl	406f40 <__sprint_r.part.0>
  407a70:	2800      	cmp	r0, #0
  407a72:	f47f af57 	bne.w	407924 <_vfiprintf_r+0x964>
  407a76:	9910      	ldr	r1, [sp, #64]	; 0x40
  407a78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407a7a:	1c48      	adds	r0, r1, #1
  407a7c:	46ca      	mov	sl, r9
  407a7e:	e448      	b.n	407312 <_vfiprintf_r+0x352>
  407a80:	2a00      	cmp	r2, #0
  407a82:	f040 8091 	bne.w	407ba8 <_vfiprintf_r+0xbe8>
  407a86:	2001      	movs	r0, #1
  407a88:	4611      	mov	r1, r2
  407a8a:	46ca      	mov	sl, r9
  407a8c:	e641      	b.n	407712 <_vfiprintf_r+0x752>
  407a8e:	aa0f      	add	r2, sp, #60	; 0x3c
  407a90:	9904      	ldr	r1, [sp, #16]
  407a92:	9806      	ldr	r0, [sp, #24]
  407a94:	f7ff fa54 	bl	406f40 <__sprint_r.part.0>
  407a98:	2800      	cmp	r0, #0
  407a9a:	f47f af43 	bne.w	407924 <_vfiprintf_r+0x964>
  407a9e:	9810      	ldr	r0, [sp, #64]	; 0x40
  407aa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407aa2:	3001      	adds	r0, #1
  407aa4:	46ca      	mov	sl, r9
  407aa6:	e667      	b.n	407778 <_vfiprintf_r+0x7b8>
  407aa8:	46d3      	mov	fp, sl
  407aaa:	e6d6      	b.n	40785a <_vfiprintf_r+0x89a>
  407aac:	9e07      	ldr	r6, [sp, #28]
  407aae:	3607      	adds	r6, #7
  407ab0:	f026 0207 	bic.w	r2, r6, #7
  407ab4:	f102 0108 	add.w	r1, r2, #8
  407ab8:	e9d2 6700 	ldrd	r6, r7, [r2]
  407abc:	9107      	str	r1, [sp, #28]
  407abe:	2201      	movs	r2, #1
  407ac0:	f7ff bbb1 	b.w	407226 <_vfiprintf_r+0x266>
  407ac4:	9e07      	ldr	r6, [sp, #28]
  407ac6:	3607      	adds	r6, #7
  407ac8:	f026 0607 	bic.w	r6, r6, #7
  407acc:	e9d6 0100 	ldrd	r0, r1, [r6]
  407ad0:	f106 0208 	add.w	r2, r6, #8
  407ad4:	9207      	str	r2, [sp, #28]
  407ad6:	4606      	mov	r6, r0
  407ad8:	460f      	mov	r7, r1
  407ada:	e4b6      	b.n	40744a <_vfiprintf_r+0x48a>
  407adc:	9e07      	ldr	r6, [sp, #28]
  407ade:	3607      	adds	r6, #7
  407ae0:	f026 0207 	bic.w	r2, r6, #7
  407ae4:	f102 0108 	add.w	r1, r2, #8
  407ae8:	e9d2 6700 	ldrd	r6, r7, [r2]
  407aec:	9107      	str	r1, [sp, #28]
  407aee:	2200      	movs	r2, #0
  407af0:	f7ff bb99 	b.w	407226 <_vfiprintf_r+0x266>
  407af4:	9e07      	ldr	r6, [sp, #28]
  407af6:	3607      	adds	r6, #7
  407af8:	f026 0107 	bic.w	r1, r6, #7
  407afc:	f101 0008 	add.w	r0, r1, #8
  407b00:	9007      	str	r0, [sp, #28]
  407b02:	e9d1 6700 	ldrd	r6, r7, [r1]
  407b06:	e519      	b.n	40753c <_vfiprintf_r+0x57c>
  407b08:	46cb      	mov	fp, r9
  407b0a:	f7ff bbab 	b.w	407264 <_vfiprintf_r+0x2a4>
  407b0e:	252d      	movs	r5, #45	; 0x2d
  407b10:	4276      	negs	r6, r6
  407b12:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  407b16:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407b1a:	2201      	movs	r2, #1
  407b1c:	f7ff bb88 	b.w	407230 <_vfiprintf_r+0x270>
  407b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407b22:	b9b3      	cbnz	r3, 407b52 <_vfiprintf_r+0xb92>
  407b24:	4611      	mov	r1, r2
  407b26:	2001      	movs	r0, #1
  407b28:	46ca      	mov	sl, r9
  407b2a:	e5f2      	b.n	407712 <_vfiprintf_r+0x752>
  407b2c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407b30:	f000 fdfe 	bl	408730 <__retarget_lock_release_recursive>
  407b34:	f04f 33ff 	mov.w	r3, #4294967295
  407b38:	9303      	str	r3, [sp, #12]
  407b3a:	f7ff bb50 	b.w	4071de <_vfiprintf_r+0x21e>
  407b3e:	aa0f      	add	r2, sp, #60	; 0x3c
  407b40:	9904      	ldr	r1, [sp, #16]
  407b42:	9806      	ldr	r0, [sp, #24]
  407b44:	f7ff f9fc 	bl	406f40 <__sprint_r.part.0>
  407b48:	2800      	cmp	r0, #0
  407b4a:	f47f aeeb 	bne.w	407924 <_vfiprintf_r+0x964>
  407b4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407b50:	e6a9      	b.n	4078a6 <_vfiprintf_r+0x8e6>
  407b52:	ab0e      	add	r3, sp, #56	; 0x38
  407b54:	2202      	movs	r2, #2
  407b56:	931c      	str	r3, [sp, #112]	; 0x70
  407b58:	921d      	str	r2, [sp, #116]	; 0x74
  407b5a:	2001      	movs	r0, #1
  407b5c:	46ca      	mov	sl, r9
  407b5e:	e5d0      	b.n	407702 <_vfiprintf_r+0x742>
  407b60:	aa0f      	add	r2, sp, #60	; 0x3c
  407b62:	9904      	ldr	r1, [sp, #16]
  407b64:	9806      	ldr	r0, [sp, #24]
  407b66:	f7ff f9eb 	bl	406f40 <__sprint_r.part.0>
  407b6a:	2800      	cmp	r0, #0
  407b6c:	f47f aeda 	bne.w	407924 <_vfiprintf_r+0x964>
  407b70:	9910      	ldr	r1, [sp, #64]	; 0x40
  407b72:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407b74:	1c48      	adds	r0, r1, #1
  407b76:	46ca      	mov	sl, r9
  407b78:	e5a4      	b.n	4076c4 <_vfiprintf_r+0x704>
  407b7a:	9a07      	ldr	r2, [sp, #28]
  407b7c:	9903      	ldr	r1, [sp, #12]
  407b7e:	6813      	ldr	r3, [r2, #0]
  407b80:	17cd      	asrs	r5, r1, #31
  407b82:	4608      	mov	r0, r1
  407b84:	3204      	adds	r2, #4
  407b86:	4629      	mov	r1, r5
  407b88:	9207      	str	r2, [sp, #28]
  407b8a:	e9c3 0100 	strd	r0, r1, [r3]
  407b8e:	f7ff ba54 	b.w	40703a <_vfiprintf_r+0x7a>
  407b92:	4658      	mov	r0, fp
  407b94:	9607      	str	r6, [sp, #28]
  407b96:	9302      	str	r3, [sp, #8]
  407b98:	f7ff f932 	bl	406e00 <strlen>
  407b9c:	2400      	movs	r4, #0
  407b9e:	9005      	str	r0, [sp, #20]
  407ba0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407ba4:	f7ff bb5e 	b.w	407264 <_vfiprintf_r+0x2a4>
  407ba8:	aa0f      	add	r2, sp, #60	; 0x3c
  407baa:	9904      	ldr	r1, [sp, #16]
  407bac:	9806      	ldr	r0, [sp, #24]
  407bae:	f7ff f9c7 	bl	406f40 <__sprint_r.part.0>
  407bb2:	2800      	cmp	r0, #0
  407bb4:	f47f aeb6 	bne.w	407924 <_vfiprintf_r+0x964>
  407bb8:	9910      	ldr	r1, [sp, #64]	; 0x40
  407bba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407bbc:	1c48      	adds	r0, r1, #1
  407bbe:	46ca      	mov	sl, r9
  407bc0:	e5a7      	b.n	407712 <_vfiprintf_r+0x752>
  407bc2:	9910      	ldr	r1, [sp, #64]	; 0x40
  407bc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407bc6:	4e20      	ldr	r6, [pc, #128]	; (407c48 <_vfiprintf_r+0xc88>)
  407bc8:	3101      	adds	r1, #1
  407bca:	f7ff bb90 	b.w	4072ee <_vfiprintf_r+0x32e>
  407bce:	2c06      	cmp	r4, #6
  407bd0:	bf28      	it	cs
  407bd2:	2406      	movcs	r4, #6
  407bd4:	9405      	str	r4, [sp, #20]
  407bd6:	9607      	str	r6, [sp, #28]
  407bd8:	9401      	str	r4, [sp, #4]
  407bda:	f8df b070 	ldr.w	fp, [pc, #112]	; 407c4c <_vfiprintf_r+0xc8c>
  407bde:	e4d5      	b.n	40758c <_vfiprintf_r+0x5cc>
  407be0:	9810      	ldr	r0, [sp, #64]	; 0x40
  407be2:	4e19      	ldr	r6, [pc, #100]	; (407c48 <_vfiprintf_r+0xc88>)
  407be4:	3001      	adds	r0, #1
  407be6:	e603      	b.n	4077f0 <_vfiprintf_r+0x830>
  407be8:	9405      	str	r4, [sp, #20]
  407bea:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407bee:	9607      	str	r6, [sp, #28]
  407bf0:	9302      	str	r3, [sp, #8]
  407bf2:	4604      	mov	r4, r0
  407bf4:	f7ff bb36 	b.w	407264 <_vfiprintf_r+0x2a4>
  407bf8:	4686      	mov	lr, r0
  407bfa:	f7ff bbce 	b.w	40739a <_vfiprintf_r+0x3da>
  407bfe:	9806      	ldr	r0, [sp, #24]
  407c00:	aa0f      	add	r2, sp, #60	; 0x3c
  407c02:	4659      	mov	r1, fp
  407c04:	f7ff f99c 	bl	406f40 <__sprint_r.part.0>
  407c08:	2800      	cmp	r0, #0
  407c0a:	f43f ae24 	beq.w	407856 <_vfiprintf_r+0x896>
  407c0e:	e624      	b.n	40785a <_vfiprintf_r+0x89a>
  407c10:	9907      	ldr	r1, [sp, #28]
  407c12:	f898 2001 	ldrb.w	r2, [r8, #1]
  407c16:	680c      	ldr	r4, [r1, #0]
  407c18:	3104      	adds	r1, #4
  407c1a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  407c1e:	46b8      	mov	r8, r7
  407c20:	9107      	str	r1, [sp, #28]
  407c22:	f7ff ba3f 	b.w	4070a4 <_vfiprintf_r+0xe4>
  407c26:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407c2a:	e43c      	b.n	4074a6 <_vfiprintf_r+0x4e6>
  407c2c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407c30:	e521      	b.n	407676 <_vfiprintf_r+0x6b6>
  407c32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407c36:	f7ff bbf4 	b.w	407422 <_vfiprintf_r+0x462>
  407c3a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407c3e:	e491      	b.n	407564 <_vfiprintf_r+0x5a4>
  407c40:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407c44:	e469      	b.n	40751a <_vfiprintf_r+0x55a>
  407c46:	bf00      	nop
  407c48:	00409b88 	.word	0x00409b88
  407c4c:	00409b80 	.word	0x00409b80

00407c50 <__sbprintf>:
  407c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407c54:	460c      	mov	r4, r1
  407c56:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  407c5a:	8989      	ldrh	r1, [r1, #12]
  407c5c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  407c5e:	89e5      	ldrh	r5, [r4, #14]
  407c60:	9619      	str	r6, [sp, #100]	; 0x64
  407c62:	f021 0102 	bic.w	r1, r1, #2
  407c66:	4606      	mov	r6, r0
  407c68:	69e0      	ldr	r0, [r4, #28]
  407c6a:	f8ad 100c 	strh.w	r1, [sp, #12]
  407c6e:	4617      	mov	r7, r2
  407c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
  407c74:	6a62      	ldr	r2, [r4, #36]	; 0x24
  407c76:	f8ad 500e 	strh.w	r5, [sp, #14]
  407c7a:	4698      	mov	r8, r3
  407c7c:	ad1a      	add	r5, sp, #104	; 0x68
  407c7e:	2300      	movs	r3, #0
  407c80:	9007      	str	r0, [sp, #28]
  407c82:	a816      	add	r0, sp, #88	; 0x58
  407c84:	9209      	str	r2, [sp, #36]	; 0x24
  407c86:	9306      	str	r3, [sp, #24]
  407c88:	9500      	str	r5, [sp, #0]
  407c8a:	9504      	str	r5, [sp, #16]
  407c8c:	9102      	str	r1, [sp, #8]
  407c8e:	9105      	str	r1, [sp, #20]
  407c90:	f000 fd48 	bl	408724 <__retarget_lock_init_recursive>
  407c94:	4643      	mov	r3, r8
  407c96:	463a      	mov	r2, r7
  407c98:	4669      	mov	r1, sp
  407c9a:	4630      	mov	r0, r6
  407c9c:	f7ff f990 	bl	406fc0 <_vfiprintf_r>
  407ca0:	1e05      	subs	r5, r0, #0
  407ca2:	db07      	blt.n	407cb4 <__sbprintf+0x64>
  407ca4:	4630      	mov	r0, r6
  407ca6:	4669      	mov	r1, sp
  407ca8:	f000 f928 	bl	407efc <_fflush_r>
  407cac:	2800      	cmp	r0, #0
  407cae:	bf18      	it	ne
  407cb0:	f04f 35ff 	movne.w	r5, #4294967295
  407cb4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407cb8:	065b      	lsls	r3, r3, #25
  407cba:	d503      	bpl.n	407cc4 <__sbprintf+0x74>
  407cbc:	89a3      	ldrh	r3, [r4, #12]
  407cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407cc2:	81a3      	strh	r3, [r4, #12]
  407cc4:	9816      	ldr	r0, [sp, #88]	; 0x58
  407cc6:	f000 fd2f 	bl	408728 <__retarget_lock_close_recursive>
  407cca:	4628      	mov	r0, r5
  407ccc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  407cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407cd4 <__swsetup_r>:
  407cd4:	b538      	push	{r3, r4, r5, lr}
  407cd6:	4b30      	ldr	r3, [pc, #192]	; (407d98 <__swsetup_r+0xc4>)
  407cd8:	681b      	ldr	r3, [r3, #0]
  407cda:	4605      	mov	r5, r0
  407cdc:	460c      	mov	r4, r1
  407cde:	b113      	cbz	r3, 407ce6 <__swsetup_r+0x12>
  407ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407ce2:	2a00      	cmp	r2, #0
  407ce4:	d038      	beq.n	407d58 <__swsetup_r+0x84>
  407ce6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407cea:	b293      	uxth	r3, r2
  407cec:	0718      	lsls	r0, r3, #28
  407cee:	d50c      	bpl.n	407d0a <__swsetup_r+0x36>
  407cf0:	6920      	ldr	r0, [r4, #16]
  407cf2:	b1a8      	cbz	r0, 407d20 <__swsetup_r+0x4c>
  407cf4:	f013 0201 	ands.w	r2, r3, #1
  407cf8:	d01e      	beq.n	407d38 <__swsetup_r+0x64>
  407cfa:	6963      	ldr	r3, [r4, #20]
  407cfc:	2200      	movs	r2, #0
  407cfe:	425b      	negs	r3, r3
  407d00:	61a3      	str	r3, [r4, #24]
  407d02:	60a2      	str	r2, [r4, #8]
  407d04:	b1f0      	cbz	r0, 407d44 <__swsetup_r+0x70>
  407d06:	2000      	movs	r0, #0
  407d08:	bd38      	pop	{r3, r4, r5, pc}
  407d0a:	06d9      	lsls	r1, r3, #27
  407d0c:	d53c      	bpl.n	407d88 <__swsetup_r+0xb4>
  407d0e:	0758      	lsls	r0, r3, #29
  407d10:	d426      	bmi.n	407d60 <__swsetup_r+0x8c>
  407d12:	6920      	ldr	r0, [r4, #16]
  407d14:	f042 0308 	orr.w	r3, r2, #8
  407d18:	81a3      	strh	r3, [r4, #12]
  407d1a:	b29b      	uxth	r3, r3
  407d1c:	2800      	cmp	r0, #0
  407d1e:	d1e9      	bne.n	407cf4 <__swsetup_r+0x20>
  407d20:	f403 7220 	and.w	r2, r3, #640	; 0x280
  407d24:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407d28:	d0e4      	beq.n	407cf4 <__swsetup_r+0x20>
  407d2a:	4628      	mov	r0, r5
  407d2c:	4621      	mov	r1, r4
  407d2e:	f000 fd2f 	bl	408790 <__smakebuf_r>
  407d32:	89a3      	ldrh	r3, [r4, #12]
  407d34:	6920      	ldr	r0, [r4, #16]
  407d36:	e7dd      	b.n	407cf4 <__swsetup_r+0x20>
  407d38:	0799      	lsls	r1, r3, #30
  407d3a:	bf58      	it	pl
  407d3c:	6962      	ldrpl	r2, [r4, #20]
  407d3e:	60a2      	str	r2, [r4, #8]
  407d40:	2800      	cmp	r0, #0
  407d42:	d1e0      	bne.n	407d06 <__swsetup_r+0x32>
  407d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407d48:	061a      	lsls	r2, r3, #24
  407d4a:	d5dd      	bpl.n	407d08 <__swsetup_r+0x34>
  407d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407d50:	81a3      	strh	r3, [r4, #12]
  407d52:	f04f 30ff 	mov.w	r0, #4294967295
  407d56:	bd38      	pop	{r3, r4, r5, pc}
  407d58:	4618      	mov	r0, r3
  407d5a:	f000 f927 	bl	407fac <__sinit>
  407d5e:	e7c2      	b.n	407ce6 <__swsetup_r+0x12>
  407d60:	6b21      	ldr	r1, [r4, #48]	; 0x30
  407d62:	b151      	cbz	r1, 407d7a <__swsetup_r+0xa6>
  407d64:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407d68:	4299      	cmp	r1, r3
  407d6a:	d004      	beq.n	407d76 <__swsetup_r+0xa2>
  407d6c:	4628      	mov	r0, r5
  407d6e:	f000 fa43 	bl	4081f8 <_free_r>
  407d72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407d76:	2300      	movs	r3, #0
  407d78:	6323      	str	r3, [r4, #48]	; 0x30
  407d7a:	2300      	movs	r3, #0
  407d7c:	6920      	ldr	r0, [r4, #16]
  407d7e:	6063      	str	r3, [r4, #4]
  407d80:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407d84:	6020      	str	r0, [r4, #0]
  407d86:	e7c5      	b.n	407d14 <__swsetup_r+0x40>
  407d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407d8c:	2309      	movs	r3, #9
  407d8e:	602b      	str	r3, [r5, #0]
  407d90:	f04f 30ff 	mov.w	r0, #4294967295
  407d94:	81a2      	strh	r2, [r4, #12]
  407d96:	bd38      	pop	{r3, r4, r5, pc}
  407d98:	2040003c 	.word	0x2040003c

00407d9c <register_fini>:
  407d9c:	4b02      	ldr	r3, [pc, #8]	; (407da8 <register_fini+0xc>)
  407d9e:	b113      	cbz	r3, 407da6 <register_fini+0xa>
  407da0:	4802      	ldr	r0, [pc, #8]	; (407dac <register_fini+0x10>)
  407da2:	f000 b805 	b.w	407db0 <atexit>
  407da6:	4770      	bx	lr
  407da8:	00000000 	.word	0x00000000
  407dac:	0040801d 	.word	0x0040801d

00407db0 <atexit>:
  407db0:	2300      	movs	r3, #0
  407db2:	4601      	mov	r1, r0
  407db4:	461a      	mov	r2, r3
  407db6:	4618      	mov	r0, r3
  407db8:	f001 bb64 	b.w	409484 <__register_exitproc>

00407dbc <__sflush_r>:
  407dbc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407dc0:	b29a      	uxth	r2, r3
  407dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407dc6:	460d      	mov	r5, r1
  407dc8:	0711      	lsls	r1, r2, #28
  407dca:	4680      	mov	r8, r0
  407dcc:	d43a      	bmi.n	407e44 <__sflush_r+0x88>
  407dce:	686a      	ldr	r2, [r5, #4]
  407dd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407dd4:	2a00      	cmp	r2, #0
  407dd6:	81ab      	strh	r3, [r5, #12]
  407dd8:	dd6f      	ble.n	407eba <__sflush_r+0xfe>
  407dda:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407ddc:	2c00      	cmp	r4, #0
  407dde:	d049      	beq.n	407e74 <__sflush_r+0xb8>
  407de0:	2200      	movs	r2, #0
  407de2:	b29b      	uxth	r3, r3
  407de4:	f8d8 6000 	ldr.w	r6, [r8]
  407de8:	f8c8 2000 	str.w	r2, [r8]
  407dec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407df0:	d067      	beq.n	407ec2 <__sflush_r+0x106>
  407df2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407df4:	075f      	lsls	r7, r3, #29
  407df6:	d505      	bpl.n	407e04 <__sflush_r+0x48>
  407df8:	6869      	ldr	r1, [r5, #4]
  407dfa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407dfc:	1a52      	subs	r2, r2, r1
  407dfe:	b10b      	cbz	r3, 407e04 <__sflush_r+0x48>
  407e00:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407e02:	1ad2      	subs	r2, r2, r3
  407e04:	2300      	movs	r3, #0
  407e06:	69e9      	ldr	r1, [r5, #28]
  407e08:	4640      	mov	r0, r8
  407e0a:	47a0      	blx	r4
  407e0c:	1c44      	adds	r4, r0, #1
  407e0e:	d03c      	beq.n	407e8a <__sflush_r+0xce>
  407e10:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407e14:	692a      	ldr	r2, [r5, #16]
  407e16:	602a      	str	r2, [r5, #0]
  407e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407e1c:	2200      	movs	r2, #0
  407e1e:	81ab      	strh	r3, [r5, #12]
  407e20:	04db      	lsls	r3, r3, #19
  407e22:	606a      	str	r2, [r5, #4]
  407e24:	d447      	bmi.n	407eb6 <__sflush_r+0xfa>
  407e26:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407e28:	f8c8 6000 	str.w	r6, [r8]
  407e2c:	b311      	cbz	r1, 407e74 <__sflush_r+0xb8>
  407e2e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  407e32:	4299      	cmp	r1, r3
  407e34:	d002      	beq.n	407e3c <__sflush_r+0x80>
  407e36:	4640      	mov	r0, r8
  407e38:	f000 f9de 	bl	4081f8 <_free_r>
  407e3c:	2000      	movs	r0, #0
  407e3e:	6328      	str	r0, [r5, #48]	; 0x30
  407e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407e44:	692e      	ldr	r6, [r5, #16]
  407e46:	b1ae      	cbz	r6, 407e74 <__sflush_r+0xb8>
  407e48:	682c      	ldr	r4, [r5, #0]
  407e4a:	602e      	str	r6, [r5, #0]
  407e4c:	0791      	lsls	r1, r2, #30
  407e4e:	bf0c      	ite	eq
  407e50:	696b      	ldreq	r3, [r5, #20]
  407e52:	2300      	movne	r3, #0
  407e54:	1ba4      	subs	r4, r4, r6
  407e56:	60ab      	str	r3, [r5, #8]
  407e58:	e00a      	b.n	407e70 <__sflush_r+0xb4>
  407e5a:	4623      	mov	r3, r4
  407e5c:	4632      	mov	r2, r6
  407e5e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407e60:	69e9      	ldr	r1, [r5, #28]
  407e62:	4640      	mov	r0, r8
  407e64:	47b8      	blx	r7
  407e66:	2800      	cmp	r0, #0
  407e68:	eba4 0400 	sub.w	r4, r4, r0
  407e6c:	4406      	add	r6, r0
  407e6e:	dd04      	ble.n	407e7a <__sflush_r+0xbe>
  407e70:	2c00      	cmp	r4, #0
  407e72:	dcf2      	bgt.n	407e5a <__sflush_r+0x9e>
  407e74:	2000      	movs	r0, #0
  407e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407e7a:	89ab      	ldrh	r3, [r5, #12]
  407e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407e80:	81ab      	strh	r3, [r5, #12]
  407e82:	f04f 30ff 	mov.w	r0, #4294967295
  407e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407e8a:	f8d8 4000 	ldr.w	r4, [r8]
  407e8e:	2c1d      	cmp	r4, #29
  407e90:	d8f3      	bhi.n	407e7a <__sflush_r+0xbe>
  407e92:	4b19      	ldr	r3, [pc, #100]	; (407ef8 <__sflush_r+0x13c>)
  407e94:	40e3      	lsrs	r3, r4
  407e96:	43db      	mvns	r3, r3
  407e98:	f013 0301 	ands.w	r3, r3, #1
  407e9c:	d1ed      	bne.n	407e7a <__sflush_r+0xbe>
  407e9e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  407ea2:	606b      	str	r3, [r5, #4]
  407ea4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407ea8:	6929      	ldr	r1, [r5, #16]
  407eaa:	81ab      	strh	r3, [r5, #12]
  407eac:	04da      	lsls	r2, r3, #19
  407eae:	6029      	str	r1, [r5, #0]
  407eb0:	d5b9      	bpl.n	407e26 <__sflush_r+0x6a>
  407eb2:	2c00      	cmp	r4, #0
  407eb4:	d1b7      	bne.n	407e26 <__sflush_r+0x6a>
  407eb6:	6528      	str	r0, [r5, #80]	; 0x50
  407eb8:	e7b5      	b.n	407e26 <__sflush_r+0x6a>
  407eba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407ebc:	2a00      	cmp	r2, #0
  407ebe:	dc8c      	bgt.n	407dda <__sflush_r+0x1e>
  407ec0:	e7d8      	b.n	407e74 <__sflush_r+0xb8>
  407ec2:	2301      	movs	r3, #1
  407ec4:	69e9      	ldr	r1, [r5, #28]
  407ec6:	4640      	mov	r0, r8
  407ec8:	47a0      	blx	r4
  407eca:	1c43      	adds	r3, r0, #1
  407ecc:	4602      	mov	r2, r0
  407ece:	d002      	beq.n	407ed6 <__sflush_r+0x11a>
  407ed0:	89ab      	ldrh	r3, [r5, #12]
  407ed2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407ed4:	e78e      	b.n	407df4 <__sflush_r+0x38>
  407ed6:	f8d8 3000 	ldr.w	r3, [r8]
  407eda:	2b00      	cmp	r3, #0
  407edc:	d0f8      	beq.n	407ed0 <__sflush_r+0x114>
  407ede:	2b1d      	cmp	r3, #29
  407ee0:	d001      	beq.n	407ee6 <__sflush_r+0x12a>
  407ee2:	2b16      	cmp	r3, #22
  407ee4:	d102      	bne.n	407eec <__sflush_r+0x130>
  407ee6:	f8c8 6000 	str.w	r6, [r8]
  407eea:	e7c3      	b.n	407e74 <__sflush_r+0xb8>
  407eec:	89ab      	ldrh	r3, [r5, #12]
  407eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407ef2:	81ab      	strh	r3, [r5, #12]
  407ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407ef8:	20400001 	.word	0x20400001

00407efc <_fflush_r>:
  407efc:	b538      	push	{r3, r4, r5, lr}
  407efe:	460d      	mov	r5, r1
  407f00:	4604      	mov	r4, r0
  407f02:	b108      	cbz	r0, 407f08 <_fflush_r+0xc>
  407f04:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407f06:	b1bb      	cbz	r3, 407f38 <_fflush_r+0x3c>
  407f08:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  407f0c:	b188      	cbz	r0, 407f32 <_fflush_r+0x36>
  407f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407f10:	07db      	lsls	r3, r3, #31
  407f12:	d401      	bmi.n	407f18 <_fflush_r+0x1c>
  407f14:	0581      	lsls	r1, r0, #22
  407f16:	d517      	bpl.n	407f48 <_fflush_r+0x4c>
  407f18:	4620      	mov	r0, r4
  407f1a:	4629      	mov	r1, r5
  407f1c:	f7ff ff4e 	bl	407dbc <__sflush_r>
  407f20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407f22:	07da      	lsls	r2, r3, #31
  407f24:	4604      	mov	r4, r0
  407f26:	d402      	bmi.n	407f2e <_fflush_r+0x32>
  407f28:	89ab      	ldrh	r3, [r5, #12]
  407f2a:	059b      	lsls	r3, r3, #22
  407f2c:	d507      	bpl.n	407f3e <_fflush_r+0x42>
  407f2e:	4620      	mov	r0, r4
  407f30:	bd38      	pop	{r3, r4, r5, pc}
  407f32:	4604      	mov	r4, r0
  407f34:	4620      	mov	r0, r4
  407f36:	bd38      	pop	{r3, r4, r5, pc}
  407f38:	f000 f838 	bl	407fac <__sinit>
  407f3c:	e7e4      	b.n	407f08 <_fflush_r+0xc>
  407f3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407f40:	f000 fbf6 	bl	408730 <__retarget_lock_release_recursive>
  407f44:	4620      	mov	r0, r4
  407f46:	bd38      	pop	{r3, r4, r5, pc}
  407f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407f4a:	f000 fbef 	bl	40872c <__retarget_lock_acquire_recursive>
  407f4e:	e7e3      	b.n	407f18 <_fflush_r+0x1c>

00407f50 <_cleanup_r>:
  407f50:	4901      	ldr	r1, [pc, #4]	; (407f58 <_cleanup_r+0x8>)
  407f52:	f000 bbaf 	b.w	4086b4 <_fwalk_reent>
  407f56:	bf00      	nop
  407f58:	0040956d 	.word	0x0040956d

00407f5c <std.isra.0>:
  407f5c:	b510      	push	{r4, lr}
  407f5e:	2300      	movs	r3, #0
  407f60:	4604      	mov	r4, r0
  407f62:	8181      	strh	r1, [r0, #12]
  407f64:	81c2      	strh	r2, [r0, #14]
  407f66:	6003      	str	r3, [r0, #0]
  407f68:	6043      	str	r3, [r0, #4]
  407f6a:	6083      	str	r3, [r0, #8]
  407f6c:	6643      	str	r3, [r0, #100]	; 0x64
  407f6e:	6103      	str	r3, [r0, #16]
  407f70:	6143      	str	r3, [r0, #20]
  407f72:	6183      	str	r3, [r0, #24]
  407f74:	4619      	mov	r1, r3
  407f76:	2208      	movs	r2, #8
  407f78:	305c      	adds	r0, #92	; 0x5c
  407f7a:	f7fe fdbf 	bl	406afc <memset>
  407f7e:	4807      	ldr	r0, [pc, #28]	; (407f9c <std.isra.0+0x40>)
  407f80:	4907      	ldr	r1, [pc, #28]	; (407fa0 <std.isra.0+0x44>)
  407f82:	4a08      	ldr	r2, [pc, #32]	; (407fa4 <std.isra.0+0x48>)
  407f84:	4b08      	ldr	r3, [pc, #32]	; (407fa8 <std.isra.0+0x4c>)
  407f86:	6220      	str	r0, [r4, #32]
  407f88:	61e4      	str	r4, [r4, #28]
  407f8a:	6261      	str	r1, [r4, #36]	; 0x24
  407f8c:	62a2      	str	r2, [r4, #40]	; 0x28
  407f8e:	62e3      	str	r3, [r4, #44]	; 0x2c
  407f90:	f104 0058 	add.w	r0, r4, #88	; 0x58
  407f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407f98:	f000 bbc4 	b.w	408724 <__retarget_lock_init_recursive>
  407f9c:	004092b1 	.word	0x004092b1
  407fa0:	004092d5 	.word	0x004092d5
  407fa4:	00409311 	.word	0x00409311
  407fa8:	00409331 	.word	0x00409331

00407fac <__sinit>:
  407fac:	b510      	push	{r4, lr}
  407fae:	4604      	mov	r4, r0
  407fb0:	4812      	ldr	r0, [pc, #72]	; (407ffc <__sinit+0x50>)
  407fb2:	f000 fbbb 	bl	40872c <__retarget_lock_acquire_recursive>
  407fb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407fb8:	b9d2      	cbnz	r2, 407ff0 <__sinit+0x44>
  407fba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  407fbe:	4810      	ldr	r0, [pc, #64]	; (408000 <__sinit+0x54>)
  407fc0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407fc4:	2103      	movs	r1, #3
  407fc6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  407fca:	63e0      	str	r0, [r4, #60]	; 0x3c
  407fcc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407fd0:	6860      	ldr	r0, [r4, #4]
  407fd2:	2104      	movs	r1, #4
  407fd4:	f7ff ffc2 	bl	407f5c <std.isra.0>
  407fd8:	2201      	movs	r2, #1
  407fda:	2109      	movs	r1, #9
  407fdc:	68a0      	ldr	r0, [r4, #8]
  407fde:	f7ff ffbd 	bl	407f5c <std.isra.0>
  407fe2:	2202      	movs	r2, #2
  407fe4:	2112      	movs	r1, #18
  407fe6:	68e0      	ldr	r0, [r4, #12]
  407fe8:	f7ff ffb8 	bl	407f5c <std.isra.0>
  407fec:	2301      	movs	r3, #1
  407fee:	63a3      	str	r3, [r4, #56]	; 0x38
  407ff0:	4802      	ldr	r0, [pc, #8]	; (407ffc <__sinit+0x50>)
  407ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407ff6:	f000 bb9b 	b.w	408730 <__retarget_lock_release_recursive>
  407ffa:	bf00      	nop
  407ffc:	204223d4 	.word	0x204223d4
  408000:	00407f51 	.word	0x00407f51

00408004 <__sfp_lock_acquire>:
  408004:	4801      	ldr	r0, [pc, #4]	; (40800c <__sfp_lock_acquire+0x8>)
  408006:	f000 bb91 	b.w	40872c <__retarget_lock_acquire_recursive>
  40800a:	bf00      	nop
  40800c:	204223e8 	.word	0x204223e8

00408010 <__sfp_lock_release>:
  408010:	4801      	ldr	r0, [pc, #4]	; (408018 <__sfp_lock_release+0x8>)
  408012:	f000 bb8d 	b.w	408730 <__retarget_lock_release_recursive>
  408016:	bf00      	nop
  408018:	204223e8 	.word	0x204223e8

0040801c <__libc_fini_array>:
  40801c:	b538      	push	{r3, r4, r5, lr}
  40801e:	4c0a      	ldr	r4, [pc, #40]	; (408048 <__libc_fini_array+0x2c>)
  408020:	4d0a      	ldr	r5, [pc, #40]	; (40804c <__libc_fini_array+0x30>)
  408022:	1b64      	subs	r4, r4, r5
  408024:	10a4      	asrs	r4, r4, #2
  408026:	d00a      	beq.n	40803e <__libc_fini_array+0x22>
  408028:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40802c:	3b01      	subs	r3, #1
  40802e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  408032:	3c01      	subs	r4, #1
  408034:	f855 3904 	ldr.w	r3, [r5], #-4
  408038:	4798      	blx	r3
  40803a:	2c00      	cmp	r4, #0
  40803c:	d1f9      	bne.n	408032 <__libc_fini_array+0x16>
  40803e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408042:	f001 be45 	b.w	409cd0 <_fini>
  408046:	bf00      	nop
  408048:	00409ce0 	.word	0x00409ce0
  40804c:	00409cdc 	.word	0x00409cdc

00408050 <__fputwc>:
  408050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408054:	b082      	sub	sp, #8
  408056:	4680      	mov	r8, r0
  408058:	4689      	mov	r9, r1
  40805a:	4614      	mov	r4, r2
  40805c:	f000 fb54 	bl	408708 <__locale_mb_cur_max>
  408060:	2801      	cmp	r0, #1
  408062:	d036      	beq.n	4080d2 <__fputwc+0x82>
  408064:	464a      	mov	r2, r9
  408066:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40806a:	a901      	add	r1, sp, #4
  40806c:	4640      	mov	r0, r8
  40806e:	f001 f9bb 	bl	4093e8 <_wcrtomb_r>
  408072:	1c42      	adds	r2, r0, #1
  408074:	4606      	mov	r6, r0
  408076:	d025      	beq.n	4080c4 <__fputwc+0x74>
  408078:	b3a8      	cbz	r0, 4080e6 <__fputwc+0x96>
  40807a:	f89d e004 	ldrb.w	lr, [sp, #4]
  40807e:	2500      	movs	r5, #0
  408080:	f10d 0a04 	add.w	sl, sp, #4
  408084:	e009      	b.n	40809a <__fputwc+0x4a>
  408086:	6823      	ldr	r3, [r4, #0]
  408088:	1c5a      	adds	r2, r3, #1
  40808a:	6022      	str	r2, [r4, #0]
  40808c:	f883 e000 	strb.w	lr, [r3]
  408090:	3501      	adds	r5, #1
  408092:	42b5      	cmp	r5, r6
  408094:	d227      	bcs.n	4080e6 <__fputwc+0x96>
  408096:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40809a:	68a3      	ldr	r3, [r4, #8]
  40809c:	3b01      	subs	r3, #1
  40809e:	2b00      	cmp	r3, #0
  4080a0:	60a3      	str	r3, [r4, #8]
  4080a2:	daf0      	bge.n	408086 <__fputwc+0x36>
  4080a4:	69a7      	ldr	r7, [r4, #24]
  4080a6:	42bb      	cmp	r3, r7
  4080a8:	4671      	mov	r1, lr
  4080aa:	4622      	mov	r2, r4
  4080ac:	4640      	mov	r0, r8
  4080ae:	db02      	blt.n	4080b6 <__fputwc+0x66>
  4080b0:	f1be 0f0a 	cmp.w	lr, #10
  4080b4:	d1e7      	bne.n	408086 <__fputwc+0x36>
  4080b6:	f001 f93f 	bl	409338 <__swbuf_r>
  4080ba:	1c43      	adds	r3, r0, #1
  4080bc:	d1e8      	bne.n	408090 <__fputwc+0x40>
  4080be:	b002      	add	sp, #8
  4080c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4080c4:	89a3      	ldrh	r3, [r4, #12]
  4080c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4080ca:	81a3      	strh	r3, [r4, #12]
  4080cc:	b002      	add	sp, #8
  4080ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4080d2:	f109 33ff 	add.w	r3, r9, #4294967295
  4080d6:	2bfe      	cmp	r3, #254	; 0xfe
  4080d8:	d8c4      	bhi.n	408064 <__fputwc+0x14>
  4080da:	fa5f fe89 	uxtb.w	lr, r9
  4080de:	4606      	mov	r6, r0
  4080e0:	f88d e004 	strb.w	lr, [sp, #4]
  4080e4:	e7cb      	b.n	40807e <__fputwc+0x2e>
  4080e6:	4648      	mov	r0, r9
  4080e8:	b002      	add	sp, #8
  4080ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4080ee:	bf00      	nop

004080f0 <_fputwc_r>:
  4080f0:	b530      	push	{r4, r5, lr}
  4080f2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4080f4:	f013 0f01 	tst.w	r3, #1
  4080f8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4080fc:	4614      	mov	r4, r2
  4080fe:	b083      	sub	sp, #12
  408100:	4605      	mov	r5, r0
  408102:	b29a      	uxth	r2, r3
  408104:	d101      	bne.n	40810a <_fputwc_r+0x1a>
  408106:	0590      	lsls	r0, r2, #22
  408108:	d51c      	bpl.n	408144 <_fputwc_r+0x54>
  40810a:	0490      	lsls	r0, r2, #18
  40810c:	d406      	bmi.n	40811c <_fputwc_r+0x2c>
  40810e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  408110:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408118:	81a3      	strh	r3, [r4, #12]
  40811a:	6662      	str	r2, [r4, #100]	; 0x64
  40811c:	4628      	mov	r0, r5
  40811e:	4622      	mov	r2, r4
  408120:	f7ff ff96 	bl	408050 <__fputwc>
  408124:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408126:	07da      	lsls	r2, r3, #31
  408128:	4605      	mov	r5, r0
  40812a:	d402      	bmi.n	408132 <_fputwc_r+0x42>
  40812c:	89a3      	ldrh	r3, [r4, #12]
  40812e:	059b      	lsls	r3, r3, #22
  408130:	d502      	bpl.n	408138 <_fputwc_r+0x48>
  408132:	4628      	mov	r0, r5
  408134:	b003      	add	sp, #12
  408136:	bd30      	pop	{r4, r5, pc}
  408138:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40813a:	f000 faf9 	bl	408730 <__retarget_lock_release_recursive>
  40813e:	4628      	mov	r0, r5
  408140:	b003      	add	sp, #12
  408142:	bd30      	pop	{r4, r5, pc}
  408144:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408146:	9101      	str	r1, [sp, #4]
  408148:	f000 faf0 	bl	40872c <__retarget_lock_acquire_recursive>
  40814c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408150:	9901      	ldr	r1, [sp, #4]
  408152:	b29a      	uxth	r2, r3
  408154:	e7d9      	b.n	40810a <_fputwc_r+0x1a>
  408156:	bf00      	nop

00408158 <_malloc_trim_r>:
  408158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40815a:	4f24      	ldr	r7, [pc, #144]	; (4081ec <_malloc_trim_r+0x94>)
  40815c:	460c      	mov	r4, r1
  40815e:	4606      	mov	r6, r0
  408160:	f000 fee2 	bl	408f28 <__malloc_lock>
  408164:	68bb      	ldr	r3, [r7, #8]
  408166:	685d      	ldr	r5, [r3, #4]
  408168:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40816c:	310f      	adds	r1, #15
  40816e:	f025 0503 	bic.w	r5, r5, #3
  408172:	4429      	add	r1, r5
  408174:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408178:	f021 010f 	bic.w	r1, r1, #15
  40817c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  408180:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408184:	db07      	blt.n	408196 <_malloc_trim_r+0x3e>
  408186:	2100      	movs	r1, #0
  408188:	4630      	mov	r0, r6
  40818a:	f001 f87f 	bl	40928c <_sbrk_r>
  40818e:	68bb      	ldr	r3, [r7, #8]
  408190:	442b      	add	r3, r5
  408192:	4298      	cmp	r0, r3
  408194:	d004      	beq.n	4081a0 <_malloc_trim_r+0x48>
  408196:	4630      	mov	r0, r6
  408198:	f000 fecc 	bl	408f34 <__malloc_unlock>
  40819c:	2000      	movs	r0, #0
  40819e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4081a0:	4261      	negs	r1, r4
  4081a2:	4630      	mov	r0, r6
  4081a4:	f001 f872 	bl	40928c <_sbrk_r>
  4081a8:	3001      	adds	r0, #1
  4081aa:	d00d      	beq.n	4081c8 <_malloc_trim_r+0x70>
  4081ac:	4b10      	ldr	r3, [pc, #64]	; (4081f0 <_malloc_trim_r+0x98>)
  4081ae:	68ba      	ldr	r2, [r7, #8]
  4081b0:	6819      	ldr	r1, [r3, #0]
  4081b2:	1b2d      	subs	r5, r5, r4
  4081b4:	f045 0501 	orr.w	r5, r5, #1
  4081b8:	4630      	mov	r0, r6
  4081ba:	1b09      	subs	r1, r1, r4
  4081bc:	6055      	str	r5, [r2, #4]
  4081be:	6019      	str	r1, [r3, #0]
  4081c0:	f000 feb8 	bl	408f34 <__malloc_unlock>
  4081c4:	2001      	movs	r0, #1
  4081c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4081c8:	2100      	movs	r1, #0
  4081ca:	4630      	mov	r0, r6
  4081cc:	f001 f85e 	bl	40928c <_sbrk_r>
  4081d0:	68ba      	ldr	r2, [r7, #8]
  4081d2:	1a83      	subs	r3, r0, r2
  4081d4:	2b0f      	cmp	r3, #15
  4081d6:	ddde      	ble.n	408196 <_malloc_trim_r+0x3e>
  4081d8:	4c06      	ldr	r4, [pc, #24]	; (4081f4 <_malloc_trim_r+0x9c>)
  4081da:	4905      	ldr	r1, [pc, #20]	; (4081f0 <_malloc_trim_r+0x98>)
  4081dc:	6824      	ldr	r4, [r4, #0]
  4081de:	f043 0301 	orr.w	r3, r3, #1
  4081e2:	1b00      	subs	r0, r0, r4
  4081e4:	6053      	str	r3, [r2, #4]
  4081e6:	6008      	str	r0, [r1, #0]
  4081e8:	e7d5      	b.n	408196 <_malloc_trim_r+0x3e>
  4081ea:	bf00      	nop
  4081ec:	204005d8 	.word	0x204005d8
  4081f0:	2040cb1c 	.word	0x2040cb1c
  4081f4:	204009e0 	.word	0x204009e0

004081f8 <_free_r>:
  4081f8:	2900      	cmp	r1, #0
  4081fa:	d044      	beq.n	408286 <_free_r+0x8e>
  4081fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408200:	460d      	mov	r5, r1
  408202:	4680      	mov	r8, r0
  408204:	f000 fe90 	bl	408f28 <__malloc_lock>
  408208:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40820c:	4969      	ldr	r1, [pc, #420]	; (4083b4 <_free_r+0x1bc>)
  40820e:	f027 0301 	bic.w	r3, r7, #1
  408212:	f1a5 0408 	sub.w	r4, r5, #8
  408216:	18e2      	adds	r2, r4, r3
  408218:	688e      	ldr	r6, [r1, #8]
  40821a:	6850      	ldr	r0, [r2, #4]
  40821c:	42b2      	cmp	r2, r6
  40821e:	f020 0003 	bic.w	r0, r0, #3
  408222:	d05e      	beq.n	4082e2 <_free_r+0xea>
  408224:	07fe      	lsls	r6, r7, #31
  408226:	6050      	str	r0, [r2, #4]
  408228:	d40b      	bmi.n	408242 <_free_r+0x4a>
  40822a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40822e:	1be4      	subs	r4, r4, r7
  408230:	f101 0e08 	add.w	lr, r1, #8
  408234:	68a5      	ldr	r5, [r4, #8]
  408236:	4575      	cmp	r5, lr
  408238:	443b      	add	r3, r7
  40823a:	d06d      	beq.n	408318 <_free_r+0x120>
  40823c:	68e7      	ldr	r7, [r4, #12]
  40823e:	60ef      	str	r7, [r5, #12]
  408240:	60bd      	str	r5, [r7, #8]
  408242:	1815      	adds	r5, r2, r0
  408244:	686d      	ldr	r5, [r5, #4]
  408246:	07ed      	lsls	r5, r5, #31
  408248:	d53e      	bpl.n	4082c8 <_free_r+0xd0>
  40824a:	f043 0201 	orr.w	r2, r3, #1
  40824e:	6062      	str	r2, [r4, #4]
  408250:	50e3      	str	r3, [r4, r3]
  408252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408256:	d217      	bcs.n	408288 <_free_r+0x90>
  408258:	08db      	lsrs	r3, r3, #3
  40825a:	1c58      	adds	r0, r3, #1
  40825c:	109a      	asrs	r2, r3, #2
  40825e:	684d      	ldr	r5, [r1, #4]
  408260:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408264:	60a7      	str	r7, [r4, #8]
  408266:	2301      	movs	r3, #1
  408268:	4093      	lsls	r3, r2
  40826a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40826e:	432b      	orrs	r3, r5
  408270:	3a08      	subs	r2, #8
  408272:	60e2      	str	r2, [r4, #12]
  408274:	604b      	str	r3, [r1, #4]
  408276:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40827a:	60fc      	str	r4, [r7, #12]
  40827c:	4640      	mov	r0, r8
  40827e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408282:	f000 be57 	b.w	408f34 <__malloc_unlock>
  408286:	4770      	bx	lr
  408288:	0a5a      	lsrs	r2, r3, #9
  40828a:	2a04      	cmp	r2, #4
  40828c:	d852      	bhi.n	408334 <_free_r+0x13c>
  40828e:	099a      	lsrs	r2, r3, #6
  408290:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408294:	00ff      	lsls	r7, r7, #3
  408296:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40829a:	19c8      	adds	r0, r1, r7
  40829c:	59ca      	ldr	r2, [r1, r7]
  40829e:	3808      	subs	r0, #8
  4082a0:	4290      	cmp	r0, r2
  4082a2:	d04f      	beq.n	408344 <_free_r+0x14c>
  4082a4:	6851      	ldr	r1, [r2, #4]
  4082a6:	f021 0103 	bic.w	r1, r1, #3
  4082aa:	428b      	cmp	r3, r1
  4082ac:	d232      	bcs.n	408314 <_free_r+0x11c>
  4082ae:	6892      	ldr	r2, [r2, #8]
  4082b0:	4290      	cmp	r0, r2
  4082b2:	d1f7      	bne.n	4082a4 <_free_r+0xac>
  4082b4:	68c3      	ldr	r3, [r0, #12]
  4082b6:	60a0      	str	r0, [r4, #8]
  4082b8:	60e3      	str	r3, [r4, #12]
  4082ba:	609c      	str	r4, [r3, #8]
  4082bc:	60c4      	str	r4, [r0, #12]
  4082be:	4640      	mov	r0, r8
  4082c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4082c4:	f000 be36 	b.w	408f34 <__malloc_unlock>
  4082c8:	6895      	ldr	r5, [r2, #8]
  4082ca:	4f3b      	ldr	r7, [pc, #236]	; (4083b8 <_free_r+0x1c0>)
  4082cc:	42bd      	cmp	r5, r7
  4082ce:	4403      	add	r3, r0
  4082d0:	d040      	beq.n	408354 <_free_r+0x15c>
  4082d2:	68d0      	ldr	r0, [r2, #12]
  4082d4:	60e8      	str	r0, [r5, #12]
  4082d6:	f043 0201 	orr.w	r2, r3, #1
  4082da:	6085      	str	r5, [r0, #8]
  4082dc:	6062      	str	r2, [r4, #4]
  4082de:	50e3      	str	r3, [r4, r3]
  4082e0:	e7b7      	b.n	408252 <_free_r+0x5a>
  4082e2:	07ff      	lsls	r7, r7, #31
  4082e4:	4403      	add	r3, r0
  4082e6:	d407      	bmi.n	4082f8 <_free_r+0x100>
  4082e8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4082ec:	1aa4      	subs	r4, r4, r2
  4082ee:	4413      	add	r3, r2
  4082f0:	68a0      	ldr	r0, [r4, #8]
  4082f2:	68e2      	ldr	r2, [r4, #12]
  4082f4:	60c2      	str	r2, [r0, #12]
  4082f6:	6090      	str	r0, [r2, #8]
  4082f8:	4a30      	ldr	r2, [pc, #192]	; (4083bc <_free_r+0x1c4>)
  4082fa:	6812      	ldr	r2, [r2, #0]
  4082fc:	f043 0001 	orr.w	r0, r3, #1
  408300:	4293      	cmp	r3, r2
  408302:	6060      	str	r0, [r4, #4]
  408304:	608c      	str	r4, [r1, #8]
  408306:	d3b9      	bcc.n	40827c <_free_r+0x84>
  408308:	4b2d      	ldr	r3, [pc, #180]	; (4083c0 <_free_r+0x1c8>)
  40830a:	4640      	mov	r0, r8
  40830c:	6819      	ldr	r1, [r3, #0]
  40830e:	f7ff ff23 	bl	408158 <_malloc_trim_r>
  408312:	e7b3      	b.n	40827c <_free_r+0x84>
  408314:	4610      	mov	r0, r2
  408316:	e7cd      	b.n	4082b4 <_free_r+0xbc>
  408318:	1811      	adds	r1, r2, r0
  40831a:	6849      	ldr	r1, [r1, #4]
  40831c:	07c9      	lsls	r1, r1, #31
  40831e:	d444      	bmi.n	4083aa <_free_r+0x1b2>
  408320:	6891      	ldr	r1, [r2, #8]
  408322:	68d2      	ldr	r2, [r2, #12]
  408324:	60ca      	str	r2, [r1, #12]
  408326:	4403      	add	r3, r0
  408328:	f043 0001 	orr.w	r0, r3, #1
  40832c:	6091      	str	r1, [r2, #8]
  40832e:	6060      	str	r0, [r4, #4]
  408330:	50e3      	str	r3, [r4, r3]
  408332:	e7a3      	b.n	40827c <_free_r+0x84>
  408334:	2a14      	cmp	r2, #20
  408336:	d816      	bhi.n	408366 <_free_r+0x16e>
  408338:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40833c:	00ff      	lsls	r7, r7, #3
  40833e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  408342:	e7aa      	b.n	40829a <_free_r+0xa2>
  408344:	10aa      	asrs	r2, r5, #2
  408346:	2301      	movs	r3, #1
  408348:	684d      	ldr	r5, [r1, #4]
  40834a:	4093      	lsls	r3, r2
  40834c:	432b      	orrs	r3, r5
  40834e:	604b      	str	r3, [r1, #4]
  408350:	4603      	mov	r3, r0
  408352:	e7b0      	b.n	4082b6 <_free_r+0xbe>
  408354:	f043 0201 	orr.w	r2, r3, #1
  408358:	614c      	str	r4, [r1, #20]
  40835a:	610c      	str	r4, [r1, #16]
  40835c:	60e5      	str	r5, [r4, #12]
  40835e:	60a5      	str	r5, [r4, #8]
  408360:	6062      	str	r2, [r4, #4]
  408362:	50e3      	str	r3, [r4, r3]
  408364:	e78a      	b.n	40827c <_free_r+0x84>
  408366:	2a54      	cmp	r2, #84	; 0x54
  408368:	d806      	bhi.n	408378 <_free_r+0x180>
  40836a:	0b1a      	lsrs	r2, r3, #12
  40836c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  408370:	00ff      	lsls	r7, r7, #3
  408372:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408376:	e790      	b.n	40829a <_free_r+0xa2>
  408378:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40837c:	d806      	bhi.n	40838c <_free_r+0x194>
  40837e:	0bda      	lsrs	r2, r3, #15
  408380:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408384:	00ff      	lsls	r7, r7, #3
  408386:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40838a:	e786      	b.n	40829a <_free_r+0xa2>
  40838c:	f240 5054 	movw	r0, #1364	; 0x554
  408390:	4282      	cmp	r2, r0
  408392:	d806      	bhi.n	4083a2 <_free_r+0x1aa>
  408394:	0c9a      	lsrs	r2, r3, #18
  408396:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40839a:	00ff      	lsls	r7, r7, #3
  40839c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4083a0:	e77b      	b.n	40829a <_free_r+0xa2>
  4083a2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4083a6:	257e      	movs	r5, #126	; 0x7e
  4083a8:	e777      	b.n	40829a <_free_r+0xa2>
  4083aa:	f043 0101 	orr.w	r1, r3, #1
  4083ae:	6061      	str	r1, [r4, #4]
  4083b0:	6013      	str	r3, [r2, #0]
  4083b2:	e763      	b.n	40827c <_free_r+0x84>
  4083b4:	204005d8 	.word	0x204005d8
  4083b8:	204005e0 	.word	0x204005e0
  4083bc:	204009e4 	.word	0x204009e4
  4083c0:	2040cb4c 	.word	0x2040cb4c

004083c4 <__sfvwrite_r>:
  4083c4:	6893      	ldr	r3, [r2, #8]
  4083c6:	2b00      	cmp	r3, #0
  4083c8:	d073      	beq.n	4084b2 <__sfvwrite_r+0xee>
  4083ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083ce:	898b      	ldrh	r3, [r1, #12]
  4083d0:	b083      	sub	sp, #12
  4083d2:	460c      	mov	r4, r1
  4083d4:	0719      	lsls	r1, r3, #28
  4083d6:	9000      	str	r0, [sp, #0]
  4083d8:	4616      	mov	r6, r2
  4083da:	d526      	bpl.n	40842a <__sfvwrite_r+0x66>
  4083dc:	6922      	ldr	r2, [r4, #16]
  4083de:	b322      	cbz	r2, 40842a <__sfvwrite_r+0x66>
  4083e0:	f013 0002 	ands.w	r0, r3, #2
  4083e4:	6835      	ldr	r5, [r6, #0]
  4083e6:	d02c      	beq.n	408442 <__sfvwrite_r+0x7e>
  4083e8:	f04f 0900 	mov.w	r9, #0
  4083ec:	4fb0      	ldr	r7, [pc, #704]	; (4086b0 <__sfvwrite_r+0x2ec>)
  4083ee:	46c8      	mov	r8, r9
  4083f0:	46b2      	mov	sl, r6
  4083f2:	45b8      	cmp	r8, r7
  4083f4:	4643      	mov	r3, r8
  4083f6:	464a      	mov	r2, r9
  4083f8:	bf28      	it	cs
  4083fa:	463b      	movcs	r3, r7
  4083fc:	9800      	ldr	r0, [sp, #0]
  4083fe:	f1b8 0f00 	cmp.w	r8, #0
  408402:	d050      	beq.n	4084a6 <__sfvwrite_r+0xe2>
  408404:	69e1      	ldr	r1, [r4, #28]
  408406:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408408:	47b0      	blx	r6
  40840a:	2800      	cmp	r0, #0
  40840c:	dd58      	ble.n	4084c0 <__sfvwrite_r+0xfc>
  40840e:	f8da 3008 	ldr.w	r3, [sl, #8]
  408412:	1a1b      	subs	r3, r3, r0
  408414:	4481      	add	r9, r0
  408416:	eba8 0800 	sub.w	r8, r8, r0
  40841a:	f8ca 3008 	str.w	r3, [sl, #8]
  40841e:	2b00      	cmp	r3, #0
  408420:	d1e7      	bne.n	4083f2 <__sfvwrite_r+0x2e>
  408422:	2000      	movs	r0, #0
  408424:	b003      	add	sp, #12
  408426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40842a:	4621      	mov	r1, r4
  40842c:	9800      	ldr	r0, [sp, #0]
  40842e:	f7ff fc51 	bl	407cd4 <__swsetup_r>
  408432:	2800      	cmp	r0, #0
  408434:	f040 8133 	bne.w	40869e <__sfvwrite_r+0x2da>
  408438:	89a3      	ldrh	r3, [r4, #12]
  40843a:	6835      	ldr	r5, [r6, #0]
  40843c:	f013 0002 	ands.w	r0, r3, #2
  408440:	d1d2      	bne.n	4083e8 <__sfvwrite_r+0x24>
  408442:	f013 0901 	ands.w	r9, r3, #1
  408446:	d145      	bne.n	4084d4 <__sfvwrite_r+0x110>
  408448:	464f      	mov	r7, r9
  40844a:	9601      	str	r6, [sp, #4]
  40844c:	b337      	cbz	r7, 40849c <__sfvwrite_r+0xd8>
  40844e:	059a      	lsls	r2, r3, #22
  408450:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408454:	f140 8083 	bpl.w	40855e <__sfvwrite_r+0x19a>
  408458:	4547      	cmp	r7, r8
  40845a:	46c3      	mov	fp, r8
  40845c:	f0c0 80ab 	bcc.w	4085b6 <__sfvwrite_r+0x1f2>
  408460:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408464:	f040 80ac 	bne.w	4085c0 <__sfvwrite_r+0x1fc>
  408468:	6820      	ldr	r0, [r4, #0]
  40846a:	46ba      	mov	sl, r7
  40846c:	465a      	mov	r2, fp
  40846e:	4649      	mov	r1, r9
  408470:	f000 fcf6 	bl	408e60 <memmove>
  408474:	68a2      	ldr	r2, [r4, #8]
  408476:	6823      	ldr	r3, [r4, #0]
  408478:	eba2 0208 	sub.w	r2, r2, r8
  40847c:	445b      	add	r3, fp
  40847e:	60a2      	str	r2, [r4, #8]
  408480:	6023      	str	r3, [r4, #0]
  408482:	9a01      	ldr	r2, [sp, #4]
  408484:	6893      	ldr	r3, [r2, #8]
  408486:	eba3 030a 	sub.w	r3, r3, sl
  40848a:	44d1      	add	r9, sl
  40848c:	eba7 070a 	sub.w	r7, r7, sl
  408490:	6093      	str	r3, [r2, #8]
  408492:	2b00      	cmp	r3, #0
  408494:	d0c5      	beq.n	408422 <__sfvwrite_r+0x5e>
  408496:	89a3      	ldrh	r3, [r4, #12]
  408498:	2f00      	cmp	r7, #0
  40849a:	d1d8      	bne.n	40844e <__sfvwrite_r+0x8a>
  40849c:	f8d5 9000 	ldr.w	r9, [r5]
  4084a0:	686f      	ldr	r7, [r5, #4]
  4084a2:	3508      	adds	r5, #8
  4084a4:	e7d2      	b.n	40844c <__sfvwrite_r+0x88>
  4084a6:	f8d5 9000 	ldr.w	r9, [r5]
  4084aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4084ae:	3508      	adds	r5, #8
  4084b0:	e79f      	b.n	4083f2 <__sfvwrite_r+0x2e>
  4084b2:	2000      	movs	r0, #0
  4084b4:	4770      	bx	lr
  4084b6:	4621      	mov	r1, r4
  4084b8:	9800      	ldr	r0, [sp, #0]
  4084ba:	f7ff fd1f 	bl	407efc <_fflush_r>
  4084be:	b370      	cbz	r0, 40851e <__sfvwrite_r+0x15a>
  4084c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4084c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4084c8:	f04f 30ff 	mov.w	r0, #4294967295
  4084cc:	81a3      	strh	r3, [r4, #12]
  4084ce:	b003      	add	sp, #12
  4084d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4084d4:	4681      	mov	r9, r0
  4084d6:	4633      	mov	r3, r6
  4084d8:	464e      	mov	r6, r9
  4084da:	46a8      	mov	r8, r5
  4084dc:	469a      	mov	sl, r3
  4084de:	464d      	mov	r5, r9
  4084e0:	b34e      	cbz	r6, 408536 <__sfvwrite_r+0x172>
  4084e2:	b380      	cbz	r0, 408546 <__sfvwrite_r+0x182>
  4084e4:	6820      	ldr	r0, [r4, #0]
  4084e6:	6923      	ldr	r3, [r4, #16]
  4084e8:	6962      	ldr	r2, [r4, #20]
  4084ea:	45b1      	cmp	r9, r6
  4084ec:	46cb      	mov	fp, r9
  4084ee:	bf28      	it	cs
  4084f0:	46b3      	movcs	fp, r6
  4084f2:	4298      	cmp	r0, r3
  4084f4:	465f      	mov	r7, fp
  4084f6:	d904      	bls.n	408502 <__sfvwrite_r+0x13e>
  4084f8:	68a3      	ldr	r3, [r4, #8]
  4084fa:	4413      	add	r3, r2
  4084fc:	459b      	cmp	fp, r3
  4084fe:	f300 80a6 	bgt.w	40864e <__sfvwrite_r+0x28a>
  408502:	4593      	cmp	fp, r2
  408504:	db4b      	blt.n	40859e <__sfvwrite_r+0x1da>
  408506:	4613      	mov	r3, r2
  408508:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40850a:	69e1      	ldr	r1, [r4, #28]
  40850c:	9800      	ldr	r0, [sp, #0]
  40850e:	462a      	mov	r2, r5
  408510:	47b8      	blx	r7
  408512:	1e07      	subs	r7, r0, #0
  408514:	ddd4      	ble.n	4084c0 <__sfvwrite_r+0xfc>
  408516:	ebb9 0907 	subs.w	r9, r9, r7
  40851a:	d0cc      	beq.n	4084b6 <__sfvwrite_r+0xf2>
  40851c:	2001      	movs	r0, #1
  40851e:	f8da 3008 	ldr.w	r3, [sl, #8]
  408522:	1bdb      	subs	r3, r3, r7
  408524:	443d      	add	r5, r7
  408526:	1bf6      	subs	r6, r6, r7
  408528:	f8ca 3008 	str.w	r3, [sl, #8]
  40852c:	2b00      	cmp	r3, #0
  40852e:	f43f af78 	beq.w	408422 <__sfvwrite_r+0x5e>
  408532:	2e00      	cmp	r6, #0
  408534:	d1d5      	bne.n	4084e2 <__sfvwrite_r+0x11e>
  408536:	f108 0308 	add.w	r3, r8, #8
  40853a:	e913 0060 	ldmdb	r3, {r5, r6}
  40853e:	4698      	mov	r8, r3
  408540:	3308      	adds	r3, #8
  408542:	2e00      	cmp	r6, #0
  408544:	d0f9      	beq.n	40853a <__sfvwrite_r+0x176>
  408546:	4632      	mov	r2, r6
  408548:	210a      	movs	r1, #10
  40854a:	4628      	mov	r0, r5
  40854c:	f000 fc38 	bl	408dc0 <memchr>
  408550:	2800      	cmp	r0, #0
  408552:	f000 80a1 	beq.w	408698 <__sfvwrite_r+0x2d4>
  408556:	3001      	adds	r0, #1
  408558:	eba0 0905 	sub.w	r9, r0, r5
  40855c:	e7c2      	b.n	4084e4 <__sfvwrite_r+0x120>
  40855e:	6820      	ldr	r0, [r4, #0]
  408560:	6923      	ldr	r3, [r4, #16]
  408562:	4298      	cmp	r0, r3
  408564:	d802      	bhi.n	40856c <__sfvwrite_r+0x1a8>
  408566:	6963      	ldr	r3, [r4, #20]
  408568:	429f      	cmp	r7, r3
  40856a:	d25d      	bcs.n	408628 <__sfvwrite_r+0x264>
  40856c:	45b8      	cmp	r8, r7
  40856e:	bf28      	it	cs
  408570:	46b8      	movcs	r8, r7
  408572:	4642      	mov	r2, r8
  408574:	4649      	mov	r1, r9
  408576:	f000 fc73 	bl	408e60 <memmove>
  40857a:	68a3      	ldr	r3, [r4, #8]
  40857c:	6822      	ldr	r2, [r4, #0]
  40857e:	eba3 0308 	sub.w	r3, r3, r8
  408582:	4442      	add	r2, r8
  408584:	60a3      	str	r3, [r4, #8]
  408586:	6022      	str	r2, [r4, #0]
  408588:	b10b      	cbz	r3, 40858e <__sfvwrite_r+0x1ca>
  40858a:	46c2      	mov	sl, r8
  40858c:	e779      	b.n	408482 <__sfvwrite_r+0xbe>
  40858e:	4621      	mov	r1, r4
  408590:	9800      	ldr	r0, [sp, #0]
  408592:	f7ff fcb3 	bl	407efc <_fflush_r>
  408596:	2800      	cmp	r0, #0
  408598:	d192      	bne.n	4084c0 <__sfvwrite_r+0xfc>
  40859a:	46c2      	mov	sl, r8
  40859c:	e771      	b.n	408482 <__sfvwrite_r+0xbe>
  40859e:	465a      	mov	r2, fp
  4085a0:	4629      	mov	r1, r5
  4085a2:	f000 fc5d 	bl	408e60 <memmove>
  4085a6:	68a2      	ldr	r2, [r4, #8]
  4085a8:	6823      	ldr	r3, [r4, #0]
  4085aa:	eba2 020b 	sub.w	r2, r2, fp
  4085ae:	445b      	add	r3, fp
  4085b0:	60a2      	str	r2, [r4, #8]
  4085b2:	6023      	str	r3, [r4, #0]
  4085b4:	e7af      	b.n	408516 <__sfvwrite_r+0x152>
  4085b6:	6820      	ldr	r0, [r4, #0]
  4085b8:	46b8      	mov	r8, r7
  4085ba:	46ba      	mov	sl, r7
  4085bc:	46bb      	mov	fp, r7
  4085be:	e755      	b.n	40846c <__sfvwrite_r+0xa8>
  4085c0:	6962      	ldr	r2, [r4, #20]
  4085c2:	6820      	ldr	r0, [r4, #0]
  4085c4:	6921      	ldr	r1, [r4, #16]
  4085c6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4085ca:	eba0 0a01 	sub.w	sl, r0, r1
  4085ce:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4085d2:	f10a 0001 	add.w	r0, sl, #1
  4085d6:	ea4f 0868 	mov.w	r8, r8, asr #1
  4085da:	4438      	add	r0, r7
  4085dc:	4540      	cmp	r0, r8
  4085de:	4642      	mov	r2, r8
  4085e0:	bf84      	itt	hi
  4085e2:	4680      	movhi	r8, r0
  4085e4:	4642      	movhi	r2, r8
  4085e6:	055b      	lsls	r3, r3, #21
  4085e8:	d544      	bpl.n	408674 <__sfvwrite_r+0x2b0>
  4085ea:	4611      	mov	r1, r2
  4085ec:	9800      	ldr	r0, [sp, #0]
  4085ee:	f000 f921 	bl	408834 <_malloc_r>
  4085f2:	4683      	mov	fp, r0
  4085f4:	2800      	cmp	r0, #0
  4085f6:	d055      	beq.n	4086a4 <__sfvwrite_r+0x2e0>
  4085f8:	4652      	mov	r2, sl
  4085fa:	6921      	ldr	r1, [r4, #16]
  4085fc:	f7fe f9e4 	bl	4069c8 <memcpy>
  408600:	89a3      	ldrh	r3, [r4, #12]
  408602:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  408606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40860a:	81a3      	strh	r3, [r4, #12]
  40860c:	eb0b 000a 	add.w	r0, fp, sl
  408610:	eba8 030a 	sub.w	r3, r8, sl
  408614:	f8c4 b010 	str.w	fp, [r4, #16]
  408618:	f8c4 8014 	str.w	r8, [r4, #20]
  40861c:	6020      	str	r0, [r4, #0]
  40861e:	60a3      	str	r3, [r4, #8]
  408620:	46b8      	mov	r8, r7
  408622:	46ba      	mov	sl, r7
  408624:	46bb      	mov	fp, r7
  408626:	e721      	b.n	40846c <__sfvwrite_r+0xa8>
  408628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40862c:	42b9      	cmp	r1, r7
  40862e:	bf28      	it	cs
  408630:	4639      	movcs	r1, r7
  408632:	464a      	mov	r2, r9
  408634:	fb91 f1f3 	sdiv	r1, r1, r3
  408638:	9800      	ldr	r0, [sp, #0]
  40863a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40863c:	fb03 f301 	mul.w	r3, r3, r1
  408640:	69e1      	ldr	r1, [r4, #28]
  408642:	47b0      	blx	r6
  408644:	f1b0 0a00 	subs.w	sl, r0, #0
  408648:	f73f af1b 	bgt.w	408482 <__sfvwrite_r+0xbe>
  40864c:	e738      	b.n	4084c0 <__sfvwrite_r+0xfc>
  40864e:	461a      	mov	r2, r3
  408650:	4629      	mov	r1, r5
  408652:	9301      	str	r3, [sp, #4]
  408654:	f000 fc04 	bl	408e60 <memmove>
  408658:	6822      	ldr	r2, [r4, #0]
  40865a:	9b01      	ldr	r3, [sp, #4]
  40865c:	9800      	ldr	r0, [sp, #0]
  40865e:	441a      	add	r2, r3
  408660:	6022      	str	r2, [r4, #0]
  408662:	4621      	mov	r1, r4
  408664:	f7ff fc4a 	bl	407efc <_fflush_r>
  408668:	9b01      	ldr	r3, [sp, #4]
  40866a:	2800      	cmp	r0, #0
  40866c:	f47f af28 	bne.w	4084c0 <__sfvwrite_r+0xfc>
  408670:	461f      	mov	r7, r3
  408672:	e750      	b.n	408516 <__sfvwrite_r+0x152>
  408674:	9800      	ldr	r0, [sp, #0]
  408676:	f000 fc63 	bl	408f40 <_realloc_r>
  40867a:	4683      	mov	fp, r0
  40867c:	2800      	cmp	r0, #0
  40867e:	d1c5      	bne.n	40860c <__sfvwrite_r+0x248>
  408680:	9d00      	ldr	r5, [sp, #0]
  408682:	6921      	ldr	r1, [r4, #16]
  408684:	4628      	mov	r0, r5
  408686:	f7ff fdb7 	bl	4081f8 <_free_r>
  40868a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40868e:	220c      	movs	r2, #12
  408690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408694:	602a      	str	r2, [r5, #0]
  408696:	e715      	b.n	4084c4 <__sfvwrite_r+0x100>
  408698:	f106 0901 	add.w	r9, r6, #1
  40869c:	e722      	b.n	4084e4 <__sfvwrite_r+0x120>
  40869e:	f04f 30ff 	mov.w	r0, #4294967295
  4086a2:	e6bf      	b.n	408424 <__sfvwrite_r+0x60>
  4086a4:	9a00      	ldr	r2, [sp, #0]
  4086a6:	230c      	movs	r3, #12
  4086a8:	6013      	str	r3, [r2, #0]
  4086aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4086ae:	e709      	b.n	4084c4 <__sfvwrite_r+0x100>
  4086b0:	7ffffc00 	.word	0x7ffffc00

004086b4 <_fwalk_reent>:
  4086b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4086b8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4086bc:	d01f      	beq.n	4086fe <_fwalk_reent+0x4a>
  4086be:	4688      	mov	r8, r1
  4086c0:	4606      	mov	r6, r0
  4086c2:	f04f 0900 	mov.w	r9, #0
  4086c6:	687d      	ldr	r5, [r7, #4]
  4086c8:	68bc      	ldr	r4, [r7, #8]
  4086ca:	3d01      	subs	r5, #1
  4086cc:	d411      	bmi.n	4086f2 <_fwalk_reent+0x3e>
  4086ce:	89a3      	ldrh	r3, [r4, #12]
  4086d0:	2b01      	cmp	r3, #1
  4086d2:	f105 35ff 	add.w	r5, r5, #4294967295
  4086d6:	d908      	bls.n	4086ea <_fwalk_reent+0x36>
  4086d8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4086dc:	3301      	adds	r3, #1
  4086de:	4621      	mov	r1, r4
  4086e0:	4630      	mov	r0, r6
  4086e2:	d002      	beq.n	4086ea <_fwalk_reent+0x36>
  4086e4:	47c0      	blx	r8
  4086e6:	ea49 0900 	orr.w	r9, r9, r0
  4086ea:	1c6b      	adds	r3, r5, #1
  4086ec:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4086f0:	d1ed      	bne.n	4086ce <_fwalk_reent+0x1a>
  4086f2:	683f      	ldr	r7, [r7, #0]
  4086f4:	2f00      	cmp	r7, #0
  4086f6:	d1e6      	bne.n	4086c6 <_fwalk_reent+0x12>
  4086f8:	4648      	mov	r0, r9
  4086fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4086fe:	46b9      	mov	r9, r7
  408700:	4648      	mov	r0, r9
  408702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408706:	bf00      	nop

00408708 <__locale_mb_cur_max>:
  408708:	4b04      	ldr	r3, [pc, #16]	; (40871c <__locale_mb_cur_max+0x14>)
  40870a:	4a05      	ldr	r2, [pc, #20]	; (408720 <__locale_mb_cur_max+0x18>)
  40870c:	681b      	ldr	r3, [r3, #0]
  40870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408710:	2b00      	cmp	r3, #0
  408712:	bf08      	it	eq
  408714:	4613      	moveq	r3, r2
  408716:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40871a:	4770      	bx	lr
  40871c:	2040003c 	.word	0x2040003c
  408720:	2040046c 	.word	0x2040046c

00408724 <__retarget_lock_init_recursive>:
  408724:	4770      	bx	lr
  408726:	bf00      	nop

00408728 <__retarget_lock_close_recursive>:
  408728:	4770      	bx	lr
  40872a:	bf00      	nop

0040872c <__retarget_lock_acquire_recursive>:
  40872c:	4770      	bx	lr
  40872e:	bf00      	nop

00408730 <__retarget_lock_release_recursive>:
  408730:	4770      	bx	lr
  408732:	bf00      	nop

00408734 <__swhatbuf_r>:
  408734:	b570      	push	{r4, r5, r6, lr}
  408736:	460c      	mov	r4, r1
  408738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40873c:	2900      	cmp	r1, #0
  40873e:	b090      	sub	sp, #64	; 0x40
  408740:	4615      	mov	r5, r2
  408742:	461e      	mov	r6, r3
  408744:	db14      	blt.n	408770 <__swhatbuf_r+0x3c>
  408746:	aa01      	add	r2, sp, #4
  408748:	f000 ff72 	bl	409630 <_fstat_r>
  40874c:	2800      	cmp	r0, #0
  40874e:	db0f      	blt.n	408770 <__swhatbuf_r+0x3c>
  408750:	9a02      	ldr	r2, [sp, #8]
  408752:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  408756:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40875a:	fab2 f282 	clz	r2, r2
  40875e:	0952      	lsrs	r2, r2, #5
  408760:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408764:	f44f 6000 	mov.w	r0, #2048	; 0x800
  408768:	6032      	str	r2, [r6, #0]
  40876a:	602b      	str	r3, [r5, #0]
  40876c:	b010      	add	sp, #64	; 0x40
  40876e:	bd70      	pop	{r4, r5, r6, pc}
  408770:	89a2      	ldrh	r2, [r4, #12]
  408772:	2300      	movs	r3, #0
  408774:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  408778:	6033      	str	r3, [r6, #0]
  40877a:	d004      	beq.n	408786 <__swhatbuf_r+0x52>
  40877c:	2240      	movs	r2, #64	; 0x40
  40877e:	4618      	mov	r0, r3
  408780:	602a      	str	r2, [r5, #0]
  408782:	b010      	add	sp, #64	; 0x40
  408784:	bd70      	pop	{r4, r5, r6, pc}
  408786:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40878a:	602b      	str	r3, [r5, #0]
  40878c:	b010      	add	sp, #64	; 0x40
  40878e:	bd70      	pop	{r4, r5, r6, pc}

00408790 <__smakebuf_r>:
  408790:	898a      	ldrh	r2, [r1, #12]
  408792:	0792      	lsls	r2, r2, #30
  408794:	460b      	mov	r3, r1
  408796:	d506      	bpl.n	4087a6 <__smakebuf_r+0x16>
  408798:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40879c:	2101      	movs	r1, #1
  40879e:	601a      	str	r2, [r3, #0]
  4087a0:	611a      	str	r2, [r3, #16]
  4087a2:	6159      	str	r1, [r3, #20]
  4087a4:	4770      	bx	lr
  4087a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4087a8:	b083      	sub	sp, #12
  4087aa:	ab01      	add	r3, sp, #4
  4087ac:	466a      	mov	r2, sp
  4087ae:	460c      	mov	r4, r1
  4087b0:	4606      	mov	r6, r0
  4087b2:	f7ff ffbf 	bl	408734 <__swhatbuf_r>
  4087b6:	9900      	ldr	r1, [sp, #0]
  4087b8:	4605      	mov	r5, r0
  4087ba:	4630      	mov	r0, r6
  4087bc:	f000 f83a 	bl	408834 <_malloc_r>
  4087c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4087c4:	b1d8      	cbz	r0, 4087fe <__smakebuf_r+0x6e>
  4087c6:	9a01      	ldr	r2, [sp, #4]
  4087c8:	4f15      	ldr	r7, [pc, #84]	; (408820 <__smakebuf_r+0x90>)
  4087ca:	9900      	ldr	r1, [sp, #0]
  4087cc:	63f7      	str	r7, [r6, #60]	; 0x3c
  4087ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4087d2:	81a3      	strh	r3, [r4, #12]
  4087d4:	6020      	str	r0, [r4, #0]
  4087d6:	6120      	str	r0, [r4, #16]
  4087d8:	6161      	str	r1, [r4, #20]
  4087da:	b91a      	cbnz	r2, 4087e4 <__smakebuf_r+0x54>
  4087dc:	432b      	orrs	r3, r5
  4087de:	81a3      	strh	r3, [r4, #12]
  4087e0:	b003      	add	sp, #12
  4087e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4087e4:	4630      	mov	r0, r6
  4087e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4087ea:	f000 ff35 	bl	409658 <_isatty_r>
  4087ee:	b1a0      	cbz	r0, 40881a <__smakebuf_r+0x8a>
  4087f0:	89a3      	ldrh	r3, [r4, #12]
  4087f2:	f023 0303 	bic.w	r3, r3, #3
  4087f6:	f043 0301 	orr.w	r3, r3, #1
  4087fa:	b21b      	sxth	r3, r3
  4087fc:	e7ee      	b.n	4087dc <__smakebuf_r+0x4c>
  4087fe:	059a      	lsls	r2, r3, #22
  408800:	d4ee      	bmi.n	4087e0 <__smakebuf_r+0x50>
  408802:	f023 0303 	bic.w	r3, r3, #3
  408806:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40880a:	f043 0302 	orr.w	r3, r3, #2
  40880e:	2101      	movs	r1, #1
  408810:	81a3      	strh	r3, [r4, #12]
  408812:	6022      	str	r2, [r4, #0]
  408814:	6122      	str	r2, [r4, #16]
  408816:	6161      	str	r1, [r4, #20]
  408818:	e7e2      	b.n	4087e0 <__smakebuf_r+0x50>
  40881a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40881e:	e7dd      	b.n	4087dc <__smakebuf_r+0x4c>
  408820:	00407f51 	.word	0x00407f51

00408824 <malloc>:
  408824:	4b02      	ldr	r3, [pc, #8]	; (408830 <malloc+0xc>)
  408826:	4601      	mov	r1, r0
  408828:	6818      	ldr	r0, [r3, #0]
  40882a:	f000 b803 	b.w	408834 <_malloc_r>
  40882e:	bf00      	nop
  408830:	2040003c 	.word	0x2040003c

00408834 <_malloc_r>:
  408834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408838:	f101 060b 	add.w	r6, r1, #11
  40883c:	2e16      	cmp	r6, #22
  40883e:	b083      	sub	sp, #12
  408840:	4605      	mov	r5, r0
  408842:	f240 809e 	bls.w	408982 <_malloc_r+0x14e>
  408846:	f036 0607 	bics.w	r6, r6, #7
  40884a:	f100 80bd 	bmi.w	4089c8 <_malloc_r+0x194>
  40884e:	42b1      	cmp	r1, r6
  408850:	f200 80ba 	bhi.w	4089c8 <_malloc_r+0x194>
  408854:	f000 fb68 	bl	408f28 <__malloc_lock>
  408858:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40885c:	f0c0 8293 	bcc.w	408d86 <_malloc_r+0x552>
  408860:	0a73      	lsrs	r3, r6, #9
  408862:	f000 80b8 	beq.w	4089d6 <_malloc_r+0x1a2>
  408866:	2b04      	cmp	r3, #4
  408868:	f200 8179 	bhi.w	408b5e <_malloc_r+0x32a>
  40886c:	09b3      	lsrs	r3, r6, #6
  40886e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  408872:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  408876:	00c3      	lsls	r3, r0, #3
  408878:	4fbf      	ldr	r7, [pc, #764]	; (408b78 <_malloc_r+0x344>)
  40887a:	443b      	add	r3, r7
  40887c:	f1a3 0108 	sub.w	r1, r3, #8
  408880:	685c      	ldr	r4, [r3, #4]
  408882:	42a1      	cmp	r1, r4
  408884:	d106      	bne.n	408894 <_malloc_r+0x60>
  408886:	e00c      	b.n	4088a2 <_malloc_r+0x6e>
  408888:	2a00      	cmp	r2, #0
  40888a:	f280 80aa 	bge.w	4089e2 <_malloc_r+0x1ae>
  40888e:	68e4      	ldr	r4, [r4, #12]
  408890:	42a1      	cmp	r1, r4
  408892:	d006      	beq.n	4088a2 <_malloc_r+0x6e>
  408894:	6863      	ldr	r3, [r4, #4]
  408896:	f023 0303 	bic.w	r3, r3, #3
  40889a:	1b9a      	subs	r2, r3, r6
  40889c:	2a0f      	cmp	r2, #15
  40889e:	ddf3      	ble.n	408888 <_malloc_r+0x54>
  4088a0:	4670      	mov	r0, lr
  4088a2:	693c      	ldr	r4, [r7, #16]
  4088a4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 408b8c <_malloc_r+0x358>
  4088a8:	4574      	cmp	r4, lr
  4088aa:	f000 81ab 	beq.w	408c04 <_malloc_r+0x3d0>
  4088ae:	6863      	ldr	r3, [r4, #4]
  4088b0:	f023 0303 	bic.w	r3, r3, #3
  4088b4:	1b9a      	subs	r2, r3, r6
  4088b6:	2a0f      	cmp	r2, #15
  4088b8:	f300 8190 	bgt.w	408bdc <_malloc_r+0x3a8>
  4088bc:	2a00      	cmp	r2, #0
  4088be:	f8c7 e014 	str.w	lr, [r7, #20]
  4088c2:	f8c7 e010 	str.w	lr, [r7, #16]
  4088c6:	f280 809d 	bge.w	408a04 <_malloc_r+0x1d0>
  4088ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4088ce:	f080 8161 	bcs.w	408b94 <_malloc_r+0x360>
  4088d2:	08db      	lsrs	r3, r3, #3
  4088d4:	f103 0c01 	add.w	ip, r3, #1
  4088d8:	1099      	asrs	r1, r3, #2
  4088da:	687a      	ldr	r2, [r7, #4]
  4088dc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4088e0:	f8c4 8008 	str.w	r8, [r4, #8]
  4088e4:	2301      	movs	r3, #1
  4088e6:	408b      	lsls	r3, r1
  4088e8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4088ec:	4313      	orrs	r3, r2
  4088ee:	3908      	subs	r1, #8
  4088f0:	60e1      	str	r1, [r4, #12]
  4088f2:	607b      	str	r3, [r7, #4]
  4088f4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4088f8:	f8c8 400c 	str.w	r4, [r8, #12]
  4088fc:	1082      	asrs	r2, r0, #2
  4088fe:	2401      	movs	r4, #1
  408900:	4094      	lsls	r4, r2
  408902:	429c      	cmp	r4, r3
  408904:	f200 808b 	bhi.w	408a1e <_malloc_r+0x1ea>
  408908:	421c      	tst	r4, r3
  40890a:	d106      	bne.n	40891a <_malloc_r+0xe6>
  40890c:	f020 0003 	bic.w	r0, r0, #3
  408910:	0064      	lsls	r4, r4, #1
  408912:	421c      	tst	r4, r3
  408914:	f100 0004 	add.w	r0, r0, #4
  408918:	d0fa      	beq.n	408910 <_malloc_r+0xdc>
  40891a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40891e:	46cc      	mov	ip, r9
  408920:	4680      	mov	r8, r0
  408922:	f8dc 300c 	ldr.w	r3, [ip, #12]
  408926:	459c      	cmp	ip, r3
  408928:	d107      	bne.n	40893a <_malloc_r+0x106>
  40892a:	e16d      	b.n	408c08 <_malloc_r+0x3d4>
  40892c:	2a00      	cmp	r2, #0
  40892e:	f280 817b 	bge.w	408c28 <_malloc_r+0x3f4>
  408932:	68db      	ldr	r3, [r3, #12]
  408934:	459c      	cmp	ip, r3
  408936:	f000 8167 	beq.w	408c08 <_malloc_r+0x3d4>
  40893a:	6859      	ldr	r1, [r3, #4]
  40893c:	f021 0103 	bic.w	r1, r1, #3
  408940:	1b8a      	subs	r2, r1, r6
  408942:	2a0f      	cmp	r2, #15
  408944:	ddf2      	ble.n	40892c <_malloc_r+0xf8>
  408946:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40894a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40894e:	9300      	str	r3, [sp, #0]
  408950:	199c      	adds	r4, r3, r6
  408952:	4628      	mov	r0, r5
  408954:	f046 0601 	orr.w	r6, r6, #1
  408958:	f042 0501 	orr.w	r5, r2, #1
  40895c:	605e      	str	r6, [r3, #4]
  40895e:	f8c8 c00c 	str.w	ip, [r8, #12]
  408962:	f8cc 8008 	str.w	r8, [ip, #8]
  408966:	617c      	str	r4, [r7, #20]
  408968:	613c      	str	r4, [r7, #16]
  40896a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40896e:	f8c4 e008 	str.w	lr, [r4, #8]
  408972:	6065      	str	r5, [r4, #4]
  408974:	505a      	str	r2, [r3, r1]
  408976:	f000 fadd 	bl	408f34 <__malloc_unlock>
  40897a:	9b00      	ldr	r3, [sp, #0]
  40897c:	f103 0408 	add.w	r4, r3, #8
  408980:	e01e      	b.n	4089c0 <_malloc_r+0x18c>
  408982:	2910      	cmp	r1, #16
  408984:	d820      	bhi.n	4089c8 <_malloc_r+0x194>
  408986:	f000 facf 	bl	408f28 <__malloc_lock>
  40898a:	2610      	movs	r6, #16
  40898c:	2318      	movs	r3, #24
  40898e:	2002      	movs	r0, #2
  408990:	4f79      	ldr	r7, [pc, #484]	; (408b78 <_malloc_r+0x344>)
  408992:	443b      	add	r3, r7
  408994:	f1a3 0208 	sub.w	r2, r3, #8
  408998:	685c      	ldr	r4, [r3, #4]
  40899a:	4294      	cmp	r4, r2
  40899c:	f000 813d 	beq.w	408c1a <_malloc_r+0x3e6>
  4089a0:	6863      	ldr	r3, [r4, #4]
  4089a2:	68e1      	ldr	r1, [r4, #12]
  4089a4:	68a6      	ldr	r6, [r4, #8]
  4089a6:	f023 0303 	bic.w	r3, r3, #3
  4089aa:	4423      	add	r3, r4
  4089ac:	4628      	mov	r0, r5
  4089ae:	685a      	ldr	r2, [r3, #4]
  4089b0:	60f1      	str	r1, [r6, #12]
  4089b2:	f042 0201 	orr.w	r2, r2, #1
  4089b6:	608e      	str	r6, [r1, #8]
  4089b8:	605a      	str	r2, [r3, #4]
  4089ba:	f000 fabb 	bl	408f34 <__malloc_unlock>
  4089be:	3408      	adds	r4, #8
  4089c0:	4620      	mov	r0, r4
  4089c2:	b003      	add	sp, #12
  4089c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4089c8:	2400      	movs	r4, #0
  4089ca:	230c      	movs	r3, #12
  4089cc:	4620      	mov	r0, r4
  4089ce:	602b      	str	r3, [r5, #0]
  4089d0:	b003      	add	sp, #12
  4089d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4089d6:	2040      	movs	r0, #64	; 0x40
  4089d8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4089dc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4089e0:	e74a      	b.n	408878 <_malloc_r+0x44>
  4089e2:	4423      	add	r3, r4
  4089e4:	68e1      	ldr	r1, [r4, #12]
  4089e6:	685a      	ldr	r2, [r3, #4]
  4089e8:	68a6      	ldr	r6, [r4, #8]
  4089ea:	f042 0201 	orr.w	r2, r2, #1
  4089ee:	60f1      	str	r1, [r6, #12]
  4089f0:	4628      	mov	r0, r5
  4089f2:	608e      	str	r6, [r1, #8]
  4089f4:	605a      	str	r2, [r3, #4]
  4089f6:	f000 fa9d 	bl	408f34 <__malloc_unlock>
  4089fa:	3408      	adds	r4, #8
  4089fc:	4620      	mov	r0, r4
  4089fe:	b003      	add	sp, #12
  408a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a04:	4423      	add	r3, r4
  408a06:	4628      	mov	r0, r5
  408a08:	685a      	ldr	r2, [r3, #4]
  408a0a:	f042 0201 	orr.w	r2, r2, #1
  408a0e:	605a      	str	r2, [r3, #4]
  408a10:	f000 fa90 	bl	408f34 <__malloc_unlock>
  408a14:	3408      	adds	r4, #8
  408a16:	4620      	mov	r0, r4
  408a18:	b003      	add	sp, #12
  408a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408a1e:	68bc      	ldr	r4, [r7, #8]
  408a20:	6863      	ldr	r3, [r4, #4]
  408a22:	f023 0803 	bic.w	r8, r3, #3
  408a26:	45b0      	cmp	r8, r6
  408a28:	d304      	bcc.n	408a34 <_malloc_r+0x200>
  408a2a:	eba8 0306 	sub.w	r3, r8, r6
  408a2e:	2b0f      	cmp	r3, #15
  408a30:	f300 8085 	bgt.w	408b3e <_malloc_r+0x30a>
  408a34:	f8df 9158 	ldr.w	r9, [pc, #344]	; 408b90 <_malloc_r+0x35c>
  408a38:	4b50      	ldr	r3, [pc, #320]	; (408b7c <_malloc_r+0x348>)
  408a3a:	f8d9 2000 	ldr.w	r2, [r9]
  408a3e:	681b      	ldr	r3, [r3, #0]
  408a40:	3201      	adds	r2, #1
  408a42:	4433      	add	r3, r6
  408a44:	eb04 0a08 	add.w	sl, r4, r8
  408a48:	f000 8155 	beq.w	408cf6 <_malloc_r+0x4c2>
  408a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  408a50:	330f      	adds	r3, #15
  408a52:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  408a56:	f02b 0b0f 	bic.w	fp, fp, #15
  408a5a:	4659      	mov	r1, fp
  408a5c:	4628      	mov	r0, r5
  408a5e:	f000 fc15 	bl	40928c <_sbrk_r>
  408a62:	1c41      	adds	r1, r0, #1
  408a64:	4602      	mov	r2, r0
  408a66:	f000 80fc 	beq.w	408c62 <_malloc_r+0x42e>
  408a6a:	4582      	cmp	sl, r0
  408a6c:	f200 80f7 	bhi.w	408c5e <_malloc_r+0x42a>
  408a70:	4b43      	ldr	r3, [pc, #268]	; (408b80 <_malloc_r+0x34c>)
  408a72:	6819      	ldr	r1, [r3, #0]
  408a74:	4459      	add	r1, fp
  408a76:	6019      	str	r1, [r3, #0]
  408a78:	f000 814d 	beq.w	408d16 <_malloc_r+0x4e2>
  408a7c:	f8d9 0000 	ldr.w	r0, [r9]
  408a80:	3001      	adds	r0, #1
  408a82:	bf1b      	ittet	ne
  408a84:	eba2 0a0a 	subne.w	sl, r2, sl
  408a88:	4451      	addne	r1, sl
  408a8a:	f8c9 2000 	streq.w	r2, [r9]
  408a8e:	6019      	strne	r1, [r3, #0]
  408a90:	f012 0107 	ands.w	r1, r2, #7
  408a94:	f000 8115 	beq.w	408cc2 <_malloc_r+0x48e>
  408a98:	f1c1 0008 	rsb	r0, r1, #8
  408a9c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  408aa0:	4402      	add	r2, r0
  408aa2:	3108      	adds	r1, #8
  408aa4:	eb02 090b 	add.w	r9, r2, fp
  408aa8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  408aac:	eba1 0909 	sub.w	r9, r1, r9
  408ab0:	4649      	mov	r1, r9
  408ab2:	4628      	mov	r0, r5
  408ab4:	9301      	str	r3, [sp, #4]
  408ab6:	9200      	str	r2, [sp, #0]
  408ab8:	f000 fbe8 	bl	40928c <_sbrk_r>
  408abc:	1c43      	adds	r3, r0, #1
  408abe:	e89d 000c 	ldmia.w	sp, {r2, r3}
  408ac2:	f000 8143 	beq.w	408d4c <_malloc_r+0x518>
  408ac6:	1a80      	subs	r0, r0, r2
  408ac8:	4448      	add	r0, r9
  408aca:	f040 0001 	orr.w	r0, r0, #1
  408ace:	6819      	ldr	r1, [r3, #0]
  408ad0:	60ba      	str	r2, [r7, #8]
  408ad2:	4449      	add	r1, r9
  408ad4:	42bc      	cmp	r4, r7
  408ad6:	6050      	str	r0, [r2, #4]
  408ad8:	6019      	str	r1, [r3, #0]
  408ada:	d017      	beq.n	408b0c <_malloc_r+0x2d8>
  408adc:	f1b8 0f0f 	cmp.w	r8, #15
  408ae0:	f240 80fb 	bls.w	408cda <_malloc_r+0x4a6>
  408ae4:	6860      	ldr	r0, [r4, #4]
  408ae6:	f1a8 020c 	sub.w	r2, r8, #12
  408aea:	f022 0207 	bic.w	r2, r2, #7
  408aee:	eb04 0e02 	add.w	lr, r4, r2
  408af2:	f000 0001 	and.w	r0, r0, #1
  408af6:	f04f 0c05 	mov.w	ip, #5
  408afa:	4310      	orrs	r0, r2
  408afc:	2a0f      	cmp	r2, #15
  408afe:	6060      	str	r0, [r4, #4]
  408b00:	f8ce c004 	str.w	ip, [lr, #4]
  408b04:	f8ce c008 	str.w	ip, [lr, #8]
  408b08:	f200 8117 	bhi.w	408d3a <_malloc_r+0x506>
  408b0c:	4b1d      	ldr	r3, [pc, #116]	; (408b84 <_malloc_r+0x350>)
  408b0e:	68bc      	ldr	r4, [r7, #8]
  408b10:	681a      	ldr	r2, [r3, #0]
  408b12:	4291      	cmp	r1, r2
  408b14:	bf88      	it	hi
  408b16:	6019      	strhi	r1, [r3, #0]
  408b18:	4b1b      	ldr	r3, [pc, #108]	; (408b88 <_malloc_r+0x354>)
  408b1a:	681a      	ldr	r2, [r3, #0]
  408b1c:	4291      	cmp	r1, r2
  408b1e:	6862      	ldr	r2, [r4, #4]
  408b20:	bf88      	it	hi
  408b22:	6019      	strhi	r1, [r3, #0]
  408b24:	f022 0203 	bic.w	r2, r2, #3
  408b28:	4296      	cmp	r6, r2
  408b2a:	eba2 0306 	sub.w	r3, r2, r6
  408b2e:	d801      	bhi.n	408b34 <_malloc_r+0x300>
  408b30:	2b0f      	cmp	r3, #15
  408b32:	dc04      	bgt.n	408b3e <_malloc_r+0x30a>
  408b34:	4628      	mov	r0, r5
  408b36:	f000 f9fd 	bl	408f34 <__malloc_unlock>
  408b3a:	2400      	movs	r4, #0
  408b3c:	e740      	b.n	4089c0 <_malloc_r+0x18c>
  408b3e:	19a2      	adds	r2, r4, r6
  408b40:	f043 0301 	orr.w	r3, r3, #1
  408b44:	f046 0601 	orr.w	r6, r6, #1
  408b48:	6066      	str	r6, [r4, #4]
  408b4a:	4628      	mov	r0, r5
  408b4c:	60ba      	str	r2, [r7, #8]
  408b4e:	6053      	str	r3, [r2, #4]
  408b50:	f000 f9f0 	bl	408f34 <__malloc_unlock>
  408b54:	3408      	adds	r4, #8
  408b56:	4620      	mov	r0, r4
  408b58:	b003      	add	sp, #12
  408b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408b5e:	2b14      	cmp	r3, #20
  408b60:	d971      	bls.n	408c46 <_malloc_r+0x412>
  408b62:	2b54      	cmp	r3, #84	; 0x54
  408b64:	f200 80a3 	bhi.w	408cae <_malloc_r+0x47a>
  408b68:	0b33      	lsrs	r3, r6, #12
  408b6a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  408b6e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  408b72:	00c3      	lsls	r3, r0, #3
  408b74:	e680      	b.n	408878 <_malloc_r+0x44>
  408b76:	bf00      	nop
  408b78:	204005d8 	.word	0x204005d8
  408b7c:	2040cb4c 	.word	0x2040cb4c
  408b80:	2040cb1c 	.word	0x2040cb1c
  408b84:	2040cb44 	.word	0x2040cb44
  408b88:	2040cb48 	.word	0x2040cb48
  408b8c:	204005e0 	.word	0x204005e0
  408b90:	204009e0 	.word	0x204009e0
  408b94:	0a5a      	lsrs	r2, r3, #9
  408b96:	2a04      	cmp	r2, #4
  408b98:	d95b      	bls.n	408c52 <_malloc_r+0x41e>
  408b9a:	2a14      	cmp	r2, #20
  408b9c:	f200 80ae 	bhi.w	408cfc <_malloc_r+0x4c8>
  408ba0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  408ba4:	00c9      	lsls	r1, r1, #3
  408ba6:	325b      	adds	r2, #91	; 0x5b
  408ba8:	eb07 0c01 	add.w	ip, r7, r1
  408bac:	5879      	ldr	r1, [r7, r1]
  408bae:	f1ac 0c08 	sub.w	ip, ip, #8
  408bb2:	458c      	cmp	ip, r1
  408bb4:	f000 8088 	beq.w	408cc8 <_malloc_r+0x494>
  408bb8:	684a      	ldr	r2, [r1, #4]
  408bba:	f022 0203 	bic.w	r2, r2, #3
  408bbe:	4293      	cmp	r3, r2
  408bc0:	d273      	bcs.n	408caa <_malloc_r+0x476>
  408bc2:	6889      	ldr	r1, [r1, #8]
  408bc4:	458c      	cmp	ip, r1
  408bc6:	d1f7      	bne.n	408bb8 <_malloc_r+0x384>
  408bc8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  408bcc:	687b      	ldr	r3, [r7, #4]
  408bce:	60e2      	str	r2, [r4, #12]
  408bd0:	f8c4 c008 	str.w	ip, [r4, #8]
  408bd4:	6094      	str	r4, [r2, #8]
  408bd6:	f8cc 400c 	str.w	r4, [ip, #12]
  408bda:	e68f      	b.n	4088fc <_malloc_r+0xc8>
  408bdc:	19a1      	adds	r1, r4, r6
  408bde:	f046 0c01 	orr.w	ip, r6, #1
  408be2:	f042 0601 	orr.w	r6, r2, #1
  408be6:	f8c4 c004 	str.w	ip, [r4, #4]
  408bea:	4628      	mov	r0, r5
  408bec:	6179      	str	r1, [r7, #20]
  408bee:	6139      	str	r1, [r7, #16]
  408bf0:	f8c1 e00c 	str.w	lr, [r1, #12]
  408bf4:	f8c1 e008 	str.w	lr, [r1, #8]
  408bf8:	604e      	str	r6, [r1, #4]
  408bfa:	50e2      	str	r2, [r4, r3]
  408bfc:	f000 f99a 	bl	408f34 <__malloc_unlock>
  408c00:	3408      	adds	r4, #8
  408c02:	e6dd      	b.n	4089c0 <_malloc_r+0x18c>
  408c04:	687b      	ldr	r3, [r7, #4]
  408c06:	e679      	b.n	4088fc <_malloc_r+0xc8>
  408c08:	f108 0801 	add.w	r8, r8, #1
  408c0c:	f018 0f03 	tst.w	r8, #3
  408c10:	f10c 0c08 	add.w	ip, ip, #8
  408c14:	f47f ae85 	bne.w	408922 <_malloc_r+0xee>
  408c18:	e02d      	b.n	408c76 <_malloc_r+0x442>
  408c1a:	68dc      	ldr	r4, [r3, #12]
  408c1c:	42a3      	cmp	r3, r4
  408c1e:	bf08      	it	eq
  408c20:	3002      	addeq	r0, #2
  408c22:	f43f ae3e 	beq.w	4088a2 <_malloc_r+0x6e>
  408c26:	e6bb      	b.n	4089a0 <_malloc_r+0x16c>
  408c28:	4419      	add	r1, r3
  408c2a:	461c      	mov	r4, r3
  408c2c:	684a      	ldr	r2, [r1, #4]
  408c2e:	68db      	ldr	r3, [r3, #12]
  408c30:	f854 6f08 	ldr.w	r6, [r4, #8]!
  408c34:	f042 0201 	orr.w	r2, r2, #1
  408c38:	604a      	str	r2, [r1, #4]
  408c3a:	4628      	mov	r0, r5
  408c3c:	60f3      	str	r3, [r6, #12]
  408c3e:	609e      	str	r6, [r3, #8]
  408c40:	f000 f978 	bl	408f34 <__malloc_unlock>
  408c44:	e6bc      	b.n	4089c0 <_malloc_r+0x18c>
  408c46:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  408c4a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  408c4e:	00c3      	lsls	r3, r0, #3
  408c50:	e612      	b.n	408878 <_malloc_r+0x44>
  408c52:	099a      	lsrs	r2, r3, #6
  408c54:	f102 0139 	add.w	r1, r2, #57	; 0x39
  408c58:	00c9      	lsls	r1, r1, #3
  408c5a:	3238      	adds	r2, #56	; 0x38
  408c5c:	e7a4      	b.n	408ba8 <_malloc_r+0x374>
  408c5e:	42bc      	cmp	r4, r7
  408c60:	d054      	beq.n	408d0c <_malloc_r+0x4d8>
  408c62:	68bc      	ldr	r4, [r7, #8]
  408c64:	6862      	ldr	r2, [r4, #4]
  408c66:	f022 0203 	bic.w	r2, r2, #3
  408c6a:	e75d      	b.n	408b28 <_malloc_r+0x2f4>
  408c6c:	f859 3908 	ldr.w	r3, [r9], #-8
  408c70:	4599      	cmp	r9, r3
  408c72:	f040 8086 	bne.w	408d82 <_malloc_r+0x54e>
  408c76:	f010 0f03 	tst.w	r0, #3
  408c7a:	f100 30ff 	add.w	r0, r0, #4294967295
  408c7e:	d1f5      	bne.n	408c6c <_malloc_r+0x438>
  408c80:	687b      	ldr	r3, [r7, #4]
  408c82:	ea23 0304 	bic.w	r3, r3, r4
  408c86:	607b      	str	r3, [r7, #4]
  408c88:	0064      	lsls	r4, r4, #1
  408c8a:	429c      	cmp	r4, r3
  408c8c:	f63f aec7 	bhi.w	408a1e <_malloc_r+0x1ea>
  408c90:	2c00      	cmp	r4, #0
  408c92:	f43f aec4 	beq.w	408a1e <_malloc_r+0x1ea>
  408c96:	421c      	tst	r4, r3
  408c98:	4640      	mov	r0, r8
  408c9a:	f47f ae3e 	bne.w	40891a <_malloc_r+0xe6>
  408c9e:	0064      	lsls	r4, r4, #1
  408ca0:	421c      	tst	r4, r3
  408ca2:	f100 0004 	add.w	r0, r0, #4
  408ca6:	d0fa      	beq.n	408c9e <_malloc_r+0x46a>
  408ca8:	e637      	b.n	40891a <_malloc_r+0xe6>
  408caa:	468c      	mov	ip, r1
  408cac:	e78c      	b.n	408bc8 <_malloc_r+0x394>
  408cae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  408cb2:	d815      	bhi.n	408ce0 <_malloc_r+0x4ac>
  408cb4:	0bf3      	lsrs	r3, r6, #15
  408cb6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  408cba:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  408cbe:	00c3      	lsls	r3, r0, #3
  408cc0:	e5da      	b.n	408878 <_malloc_r+0x44>
  408cc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  408cc6:	e6ed      	b.n	408aa4 <_malloc_r+0x270>
  408cc8:	687b      	ldr	r3, [r7, #4]
  408cca:	1092      	asrs	r2, r2, #2
  408ccc:	2101      	movs	r1, #1
  408cce:	fa01 f202 	lsl.w	r2, r1, r2
  408cd2:	4313      	orrs	r3, r2
  408cd4:	607b      	str	r3, [r7, #4]
  408cd6:	4662      	mov	r2, ip
  408cd8:	e779      	b.n	408bce <_malloc_r+0x39a>
  408cda:	2301      	movs	r3, #1
  408cdc:	6053      	str	r3, [r2, #4]
  408cde:	e729      	b.n	408b34 <_malloc_r+0x300>
  408ce0:	f240 5254 	movw	r2, #1364	; 0x554
  408ce4:	4293      	cmp	r3, r2
  408ce6:	d822      	bhi.n	408d2e <_malloc_r+0x4fa>
  408ce8:	0cb3      	lsrs	r3, r6, #18
  408cea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  408cee:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  408cf2:	00c3      	lsls	r3, r0, #3
  408cf4:	e5c0      	b.n	408878 <_malloc_r+0x44>
  408cf6:	f103 0b10 	add.w	fp, r3, #16
  408cfa:	e6ae      	b.n	408a5a <_malloc_r+0x226>
  408cfc:	2a54      	cmp	r2, #84	; 0x54
  408cfe:	d829      	bhi.n	408d54 <_malloc_r+0x520>
  408d00:	0b1a      	lsrs	r2, r3, #12
  408d02:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  408d06:	00c9      	lsls	r1, r1, #3
  408d08:	326e      	adds	r2, #110	; 0x6e
  408d0a:	e74d      	b.n	408ba8 <_malloc_r+0x374>
  408d0c:	4b20      	ldr	r3, [pc, #128]	; (408d90 <_malloc_r+0x55c>)
  408d0e:	6819      	ldr	r1, [r3, #0]
  408d10:	4459      	add	r1, fp
  408d12:	6019      	str	r1, [r3, #0]
  408d14:	e6b2      	b.n	408a7c <_malloc_r+0x248>
  408d16:	f3ca 000b 	ubfx	r0, sl, #0, #12
  408d1a:	2800      	cmp	r0, #0
  408d1c:	f47f aeae 	bne.w	408a7c <_malloc_r+0x248>
  408d20:	eb08 030b 	add.w	r3, r8, fp
  408d24:	68ba      	ldr	r2, [r7, #8]
  408d26:	f043 0301 	orr.w	r3, r3, #1
  408d2a:	6053      	str	r3, [r2, #4]
  408d2c:	e6ee      	b.n	408b0c <_malloc_r+0x2d8>
  408d2e:	207f      	movs	r0, #127	; 0x7f
  408d30:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  408d34:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  408d38:	e59e      	b.n	408878 <_malloc_r+0x44>
  408d3a:	f104 0108 	add.w	r1, r4, #8
  408d3e:	4628      	mov	r0, r5
  408d40:	9300      	str	r3, [sp, #0]
  408d42:	f7ff fa59 	bl	4081f8 <_free_r>
  408d46:	9b00      	ldr	r3, [sp, #0]
  408d48:	6819      	ldr	r1, [r3, #0]
  408d4a:	e6df      	b.n	408b0c <_malloc_r+0x2d8>
  408d4c:	2001      	movs	r0, #1
  408d4e:	f04f 0900 	mov.w	r9, #0
  408d52:	e6bc      	b.n	408ace <_malloc_r+0x29a>
  408d54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408d58:	d805      	bhi.n	408d66 <_malloc_r+0x532>
  408d5a:	0bda      	lsrs	r2, r3, #15
  408d5c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  408d60:	00c9      	lsls	r1, r1, #3
  408d62:	3277      	adds	r2, #119	; 0x77
  408d64:	e720      	b.n	408ba8 <_malloc_r+0x374>
  408d66:	f240 5154 	movw	r1, #1364	; 0x554
  408d6a:	428a      	cmp	r2, r1
  408d6c:	d805      	bhi.n	408d7a <_malloc_r+0x546>
  408d6e:	0c9a      	lsrs	r2, r3, #18
  408d70:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  408d74:	00c9      	lsls	r1, r1, #3
  408d76:	327c      	adds	r2, #124	; 0x7c
  408d78:	e716      	b.n	408ba8 <_malloc_r+0x374>
  408d7a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  408d7e:	227e      	movs	r2, #126	; 0x7e
  408d80:	e712      	b.n	408ba8 <_malloc_r+0x374>
  408d82:	687b      	ldr	r3, [r7, #4]
  408d84:	e780      	b.n	408c88 <_malloc_r+0x454>
  408d86:	08f0      	lsrs	r0, r6, #3
  408d88:	f106 0308 	add.w	r3, r6, #8
  408d8c:	e600      	b.n	408990 <_malloc_r+0x15c>
  408d8e:	bf00      	nop
  408d90:	2040cb1c 	.word	0x2040cb1c

00408d94 <__ascii_mbtowc>:
  408d94:	b082      	sub	sp, #8
  408d96:	b149      	cbz	r1, 408dac <__ascii_mbtowc+0x18>
  408d98:	b15a      	cbz	r2, 408db2 <__ascii_mbtowc+0x1e>
  408d9a:	b16b      	cbz	r3, 408db8 <__ascii_mbtowc+0x24>
  408d9c:	7813      	ldrb	r3, [r2, #0]
  408d9e:	600b      	str	r3, [r1, #0]
  408da0:	7812      	ldrb	r2, [r2, #0]
  408da2:	1c10      	adds	r0, r2, #0
  408da4:	bf18      	it	ne
  408da6:	2001      	movne	r0, #1
  408da8:	b002      	add	sp, #8
  408daa:	4770      	bx	lr
  408dac:	a901      	add	r1, sp, #4
  408dae:	2a00      	cmp	r2, #0
  408db0:	d1f3      	bne.n	408d9a <__ascii_mbtowc+0x6>
  408db2:	4610      	mov	r0, r2
  408db4:	b002      	add	sp, #8
  408db6:	4770      	bx	lr
  408db8:	f06f 0001 	mvn.w	r0, #1
  408dbc:	e7f4      	b.n	408da8 <__ascii_mbtowc+0x14>
  408dbe:	bf00      	nop

00408dc0 <memchr>:
  408dc0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408dc4:	2a10      	cmp	r2, #16
  408dc6:	db2b      	blt.n	408e20 <memchr+0x60>
  408dc8:	f010 0f07 	tst.w	r0, #7
  408dcc:	d008      	beq.n	408de0 <memchr+0x20>
  408dce:	f810 3b01 	ldrb.w	r3, [r0], #1
  408dd2:	3a01      	subs	r2, #1
  408dd4:	428b      	cmp	r3, r1
  408dd6:	d02d      	beq.n	408e34 <memchr+0x74>
  408dd8:	f010 0f07 	tst.w	r0, #7
  408ddc:	b342      	cbz	r2, 408e30 <memchr+0x70>
  408dde:	d1f6      	bne.n	408dce <memchr+0xe>
  408de0:	b4f0      	push	{r4, r5, r6, r7}
  408de2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408de6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  408dea:	f022 0407 	bic.w	r4, r2, #7
  408dee:	f07f 0700 	mvns.w	r7, #0
  408df2:	2300      	movs	r3, #0
  408df4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408df8:	3c08      	subs	r4, #8
  408dfa:	ea85 0501 	eor.w	r5, r5, r1
  408dfe:	ea86 0601 	eor.w	r6, r6, r1
  408e02:	fa85 f547 	uadd8	r5, r5, r7
  408e06:	faa3 f587 	sel	r5, r3, r7
  408e0a:	fa86 f647 	uadd8	r6, r6, r7
  408e0e:	faa5 f687 	sel	r6, r5, r7
  408e12:	b98e      	cbnz	r6, 408e38 <memchr+0x78>
  408e14:	d1ee      	bne.n	408df4 <memchr+0x34>
  408e16:	bcf0      	pop	{r4, r5, r6, r7}
  408e18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408e1c:	f002 0207 	and.w	r2, r2, #7
  408e20:	b132      	cbz	r2, 408e30 <memchr+0x70>
  408e22:	f810 3b01 	ldrb.w	r3, [r0], #1
  408e26:	3a01      	subs	r2, #1
  408e28:	ea83 0301 	eor.w	r3, r3, r1
  408e2c:	b113      	cbz	r3, 408e34 <memchr+0x74>
  408e2e:	d1f8      	bne.n	408e22 <memchr+0x62>
  408e30:	2000      	movs	r0, #0
  408e32:	4770      	bx	lr
  408e34:	3801      	subs	r0, #1
  408e36:	4770      	bx	lr
  408e38:	2d00      	cmp	r5, #0
  408e3a:	bf06      	itte	eq
  408e3c:	4635      	moveq	r5, r6
  408e3e:	3803      	subeq	r0, #3
  408e40:	3807      	subne	r0, #7
  408e42:	f015 0f01 	tst.w	r5, #1
  408e46:	d107      	bne.n	408e58 <memchr+0x98>
  408e48:	3001      	adds	r0, #1
  408e4a:	f415 7f80 	tst.w	r5, #256	; 0x100
  408e4e:	bf02      	ittt	eq
  408e50:	3001      	addeq	r0, #1
  408e52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408e56:	3001      	addeq	r0, #1
  408e58:	bcf0      	pop	{r4, r5, r6, r7}
  408e5a:	3801      	subs	r0, #1
  408e5c:	4770      	bx	lr
  408e5e:	bf00      	nop

00408e60 <memmove>:
  408e60:	4288      	cmp	r0, r1
  408e62:	b5f0      	push	{r4, r5, r6, r7, lr}
  408e64:	d90d      	bls.n	408e82 <memmove+0x22>
  408e66:	188b      	adds	r3, r1, r2
  408e68:	4298      	cmp	r0, r3
  408e6a:	d20a      	bcs.n	408e82 <memmove+0x22>
  408e6c:	1884      	adds	r4, r0, r2
  408e6e:	2a00      	cmp	r2, #0
  408e70:	d051      	beq.n	408f16 <memmove+0xb6>
  408e72:	4622      	mov	r2, r4
  408e74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408e78:	f802 4d01 	strb.w	r4, [r2, #-1]!
  408e7c:	4299      	cmp	r1, r3
  408e7e:	d1f9      	bne.n	408e74 <memmove+0x14>
  408e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408e82:	2a0f      	cmp	r2, #15
  408e84:	d948      	bls.n	408f18 <memmove+0xb8>
  408e86:	ea41 0300 	orr.w	r3, r1, r0
  408e8a:	079b      	lsls	r3, r3, #30
  408e8c:	d146      	bne.n	408f1c <memmove+0xbc>
  408e8e:	f100 0410 	add.w	r4, r0, #16
  408e92:	f101 0310 	add.w	r3, r1, #16
  408e96:	4615      	mov	r5, r2
  408e98:	f853 6c10 	ldr.w	r6, [r3, #-16]
  408e9c:	f844 6c10 	str.w	r6, [r4, #-16]
  408ea0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408ea4:	f844 6c0c 	str.w	r6, [r4, #-12]
  408ea8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  408eac:	f844 6c08 	str.w	r6, [r4, #-8]
  408eb0:	3d10      	subs	r5, #16
  408eb2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408eb6:	f844 6c04 	str.w	r6, [r4, #-4]
  408eba:	2d0f      	cmp	r5, #15
  408ebc:	f103 0310 	add.w	r3, r3, #16
  408ec0:	f104 0410 	add.w	r4, r4, #16
  408ec4:	d8e8      	bhi.n	408e98 <memmove+0x38>
  408ec6:	f1a2 0310 	sub.w	r3, r2, #16
  408eca:	f023 030f 	bic.w	r3, r3, #15
  408ece:	f002 0e0f 	and.w	lr, r2, #15
  408ed2:	3310      	adds	r3, #16
  408ed4:	f1be 0f03 	cmp.w	lr, #3
  408ed8:	4419      	add	r1, r3
  408eda:	4403      	add	r3, r0
  408edc:	d921      	bls.n	408f22 <memmove+0xc2>
  408ede:	1f1e      	subs	r6, r3, #4
  408ee0:	460d      	mov	r5, r1
  408ee2:	4674      	mov	r4, lr
  408ee4:	3c04      	subs	r4, #4
  408ee6:	f855 7b04 	ldr.w	r7, [r5], #4
  408eea:	f846 7f04 	str.w	r7, [r6, #4]!
  408eee:	2c03      	cmp	r4, #3
  408ef0:	d8f8      	bhi.n	408ee4 <memmove+0x84>
  408ef2:	f1ae 0404 	sub.w	r4, lr, #4
  408ef6:	f024 0403 	bic.w	r4, r4, #3
  408efa:	3404      	adds	r4, #4
  408efc:	4421      	add	r1, r4
  408efe:	4423      	add	r3, r4
  408f00:	f002 0203 	and.w	r2, r2, #3
  408f04:	b162      	cbz	r2, 408f20 <memmove+0xc0>
  408f06:	3b01      	subs	r3, #1
  408f08:	440a      	add	r2, r1
  408f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
  408f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408f12:	428a      	cmp	r2, r1
  408f14:	d1f9      	bne.n	408f0a <memmove+0xaa>
  408f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408f18:	4603      	mov	r3, r0
  408f1a:	e7f3      	b.n	408f04 <memmove+0xa4>
  408f1c:	4603      	mov	r3, r0
  408f1e:	e7f2      	b.n	408f06 <memmove+0xa6>
  408f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408f22:	4672      	mov	r2, lr
  408f24:	e7ee      	b.n	408f04 <memmove+0xa4>
  408f26:	bf00      	nop

00408f28 <__malloc_lock>:
  408f28:	4801      	ldr	r0, [pc, #4]	; (408f30 <__malloc_lock+0x8>)
  408f2a:	f7ff bbff 	b.w	40872c <__retarget_lock_acquire_recursive>
  408f2e:	bf00      	nop
  408f30:	204223d8 	.word	0x204223d8

00408f34 <__malloc_unlock>:
  408f34:	4801      	ldr	r0, [pc, #4]	; (408f3c <__malloc_unlock+0x8>)
  408f36:	f7ff bbfb 	b.w	408730 <__retarget_lock_release_recursive>
  408f3a:	bf00      	nop
  408f3c:	204223d8 	.word	0x204223d8

00408f40 <_realloc_r>:
  408f40:	2900      	cmp	r1, #0
  408f42:	f000 8095 	beq.w	409070 <_realloc_r+0x130>
  408f46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408f4a:	460d      	mov	r5, r1
  408f4c:	4616      	mov	r6, r2
  408f4e:	b083      	sub	sp, #12
  408f50:	4680      	mov	r8, r0
  408f52:	f106 070b 	add.w	r7, r6, #11
  408f56:	f7ff ffe7 	bl	408f28 <__malloc_lock>
  408f5a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  408f5e:	2f16      	cmp	r7, #22
  408f60:	f02e 0403 	bic.w	r4, lr, #3
  408f64:	f1a5 0908 	sub.w	r9, r5, #8
  408f68:	d83c      	bhi.n	408fe4 <_realloc_r+0xa4>
  408f6a:	2210      	movs	r2, #16
  408f6c:	4617      	mov	r7, r2
  408f6e:	42be      	cmp	r6, r7
  408f70:	d83d      	bhi.n	408fee <_realloc_r+0xae>
  408f72:	4294      	cmp	r4, r2
  408f74:	da43      	bge.n	408ffe <_realloc_r+0xbe>
  408f76:	4bc4      	ldr	r3, [pc, #784]	; (409288 <_realloc_r+0x348>)
  408f78:	6899      	ldr	r1, [r3, #8]
  408f7a:	eb09 0004 	add.w	r0, r9, r4
  408f7e:	4288      	cmp	r0, r1
  408f80:	f000 80b4 	beq.w	4090ec <_realloc_r+0x1ac>
  408f84:	6843      	ldr	r3, [r0, #4]
  408f86:	f023 0101 	bic.w	r1, r3, #1
  408f8a:	4401      	add	r1, r0
  408f8c:	6849      	ldr	r1, [r1, #4]
  408f8e:	07c9      	lsls	r1, r1, #31
  408f90:	d54c      	bpl.n	40902c <_realloc_r+0xec>
  408f92:	f01e 0f01 	tst.w	lr, #1
  408f96:	f000 809b 	beq.w	4090d0 <_realloc_r+0x190>
  408f9a:	4631      	mov	r1, r6
  408f9c:	4640      	mov	r0, r8
  408f9e:	f7ff fc49 	bl	408834 <_malloc_r>
  408fa2:	4606      	mov	r6, r0
  408fa4:	2800      	cmp	r0, #0
  408fa6:	d03a      	beq.n	40901e <_realloc_r+0xde>
  408fa8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408fac:	f023 0301 	bic.w	r3, r3, #1
  408fb0:	444b      	add	r3, r9
  408fb2:	f1a0 0208 	sub.w	r2, r0, #8
  408fb6:	429a      	cmp	r2, r3
  408fb8:	f000 8121 	beq.w	4091fe <_realloc_r+0x2be>
  408fbc:	1f22      	subs	r2, r4, #4
  408fbe:	2a24      	cmp	r2, #36	; 0x24
  408fc0:	f200 8107 	bhi.w	4091d2 <_realloc_r+0x292>
  408fc4:	2a13      	cmp	r2, #19
  408fc6:	f200 80db 	bhi.w	409180 <_realloc_r+0x240>
  408fca:	4603      	mov	r3, r0
  408fcc:	462a      	mov	r2, r5
  408fce:	6811      	ldr	r1, [r2, #0]
  408fd0:	6019      	str	r1, [r3, #0]
  408fd2:	6851      	ldr	r1, [r2, #4]
  408fd4:	6059      	str	r1, [r3, #4]
  408fd6:	6892      	ldr	r2, [r2, #8]
  408fd8:	609a      	str	r2, [r3, #8]
  408fda:	4629      	mov	r1, r5
  408fdc:	4640      	mov	r0, r8
  408fde:	f7ff f90b 	bl	4081f8 <_free_r>
  408fe2:	e01c      	b.n	40901e <_realloc_r+0xde>
  408fe4:	f027 0707 	bic.w	r7, r7, #7
  408fe8:	2f00      	cmp	r7, #0
  408fea:	463a      	mov	r2, r7
  408fec:	dabf      	bge.n	408f6e <_realloc_r+0x2e>
  408fee:	2600      	movs	r6, #0
  408ff0:	230c      	movs	r3, #12
  408ff2:	4630      	mov	r0, r6
  408ff4:	f8c8 3000 	str.w	r3, [r8]
  408ff8:	b003      	add	sp, #12
  408ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ffe:	462e      	mov	r6, r5
  409000:	1be3      	subs	r3, r4, r7
  409002:	2b0f      	cmp	r3, #15
  409004:	d81e      	bhi.n	409044 <_realloc_r+0x104>
  409006:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40900a:	f003 0301 	and.w	r3, r3, #1
  40900e:	4323      	orrs	r3, r4
  409010:	444c      	add	r4, r9
  409012:	f8c9 3004 	str.w	r3, [r9, #4]
  409016:	6863      	ldr	r3, [r4, #4]
  409018:	f043 0301 	orr.w	r3, r3, #1
  40901c:	6063      	str	r3, [r4, #4]
  40901e:	4640      	mov	r0, r8
  409020:	f7ff ff88 	bl	408f34 <__malloc_unlock>
  409024:	4630      	mov	r0, r6
  409026:	b003      	add	sp, #12
  409028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40902c:	f023 0303 	bic.w	r3, r3, #3
  409030:	18e1      	adds	r1, r4, r3
  409032:	4291      	cmp	r1, r2
  409034:	db1f      	blt.n	409076 <_realloc_r+0x136>
  409036:	68c3      	ldr	r3, [r0, #12]
  409038:	6882      	ldr	r2, [r0, #8]
  40903a:	462e      	mov	r6, r5
  40903c:	60d3      	str	r3, [r2, #12]
  40903e:	460c      	mov	r4, r1
  409040:	609a      	str	r2, [r3, #8]
  409042:	e7dd      	b.n	409000 <_realloc_r+0xc0>
  409044:	f8d9 2004 	ldr.w	r2, [r9, #4]
  409048:	eb09 0107 	add.w	r1, r9, r7
  40904c:	f002 0201 	and.w	r2, r2, #1
  409050:	444c      	add	r4, r9
  409052:	f043 0301 	orr.w	r3, r3, #1
  409056:	4317      	orrs	r7, r2
  409058:	f8c9 7004 	str.w	r7, [r9, #4]
  40905c:	604b      	str	r3, [r1, #4]
  40905e:	6863      	ldr	r3, [r4, #4]
  409060:	f043 0301 	orr.w	r3, r3, #1
  409064:	3108      	adds	r1, #8
  409066:	6063      	str	r3, [r4, #4]
  409068:	4640      	mov	r0, r8
  40906a:	f7ff f8c5 	bl	4081f8 <_free_r>
  40906e:	e7d6      	b.n	40901e <_realloc_r+0xde>
  409070:	4611      	mov	r1, r2
  409072:	f7ff bbdf 	b.w	408834 <_malloc_r>
  409076:	f01e 0f01 	tst.w	lr, #1
  40907a:	d18e      	bne.n	408f9a <_realloc_r+0x5a>
  40907c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409080:	eba9 0a01 	sub.w	sl, r9, r1
  409084:	f8da 1004 	ldr.w	r1, [sl, #4]
  409088:	f021 0103 	bic.w	r1, r1, #3
  40908c:	440b      	add	r3, r1
  40908e:	4423      	add	r3, r4
  409090:	4293      	cmp	r3, r2
  409092:	db25      	blt.n	4090e0 <_realloc_r+0x1a0>
  409094:	68c2      	ldr	r2, [r0, #12]
  409096:	6881      	ldr	r1, [r0, #8]
  409098:	4656      	mov	r6, sl
  40909a:	60ca      	str	r2, [r1, #12]
  40909c:	6091      	str	r1, [r2, #8]
  40909e:	f8da 100c 	ldr.w	r1, [sl, #12]
  4090a2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4090a6:	1f22      	subs	r2, r4, #4
  4090a8:	2a24      	cmp	r2, #36	; 0x24
  4090aa:	60c1      	str	r1, [r0, #12]
  4090ac:	6088      	str	r0, [r1, #8]
  4090ae:	f200 8094 	bhi.w	4091da <_realloc_r+0x29a>
  4090b2:	2a13      	cmp	r2, #19
  4090b4:	d96f      	bls.n	409196 <_realloc_r+0x256>
  4090b6:	6829      	ldr	r1, [r5, #0]
  4090b8:	f8ca 1008 	str.w	r1, [sl, #8]
  4090bc:	6869      	ldr	r1, [r5, #4]
  4090be:	f8ca 100c 	str.w	r1, [sl, #12]
  4090c2:	2a1b      	cmp	r2, #27
  4090c4:	f200 80a2 	bhi.w	40920c <_realloc_r+0x2cc>
  4090c8:	3508      	adds	r5, #8
  4090ca:	f10a 0210 	add.w	r2, sl, #16
  4090ce:	e063      	b.n	409198 <_realloc_r+0x258>
  4090d0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4090d4:	eba9 0a03 	sub.w	sl, r9, r3
  4090d8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4090dc:	f021 0103 	bic.w	r1, r1, #3
  4090e0:	1863      	adds	r3, r4, r1
  4090e2:	4293      	cmp	r3, r2
  4090e4:	f6ff af59 	blt.w	408f9a <_realloc_r+0x5a>
  4090e8:	4656      	mov	r6, sl
  4090ea:	e7d8      	b.n	40909e <_realloc_r+0x15e>
  4090ec:	6841      	ldr	r1, [r0, #4]
  4090ee:	f021 0b03 	bic.w	fp, r1, #3
  4090f2:	44a3      	add	fp, r4
  4090f4:	f107 0010 	add.w	r0, r7, #16
  4090f8:	4583      	cmp	fp, r0
  4090fa:	da56      	bge.n	4091aa <_realloc_r+0x26a>
  4090fc:	f01e 0f01 	tst.w	lr, #1
  409100:	f47f af4b 	bne.w	408f9a <_realloc_r+0x5a>
  409104:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409108:	eba9 0a01 	sub.w	sl, r9, r1
  40910c:	f8da 1004 	ldr.w	r1, [sl, #4]
  409110:	f021 0103 	bic.w	r1, r1, #3
  409114:	448b      	add	fp, r1
  409116:	4558      	cmp	r0, fp
  409118:	dce2      	bgt.n	4090e0 <_realloc_r+0x1a0>
  40911a:	4656      	mov	r6, sl
  40911c:	f8da 100c 	ldr.w	r1, [sl, #12]
  409120:	f856 0f08 	ldr.w	r0, [r6, #8]!
  409124:	1f22      	subs	r2, r4, #4
  409126:	2a24      	cmp	r2, #36	; 0x24
  409128:	60c1      	str	r1, [r0, #12]
  40912a:	6088      	str	r0, [r1, #8]
  40912c:	f200 808f 	bhi.w	40924e <_realloc_r+0x30e>
  409130:	2a13      	cmp	r2, #19
  409132:	f240 808a 	bls.w	40924a <_realloc_r+0x30a>
  409136:	6829      	ldr	r1, [r5, #0]
  409138:	f8ca 1008 	str.w	r1, [sl, #8]
  40913c:	6869      	ldr	r1, [r5, #4]
  40913e:	f8ca 100c 	str.w	r1, [sl, #12]
  409142:	2a1b      	cmp	r2, #27
  409144:	f200 808a 	bhi.w	40925c <_realloc_r+0x31c>
  409148:	3508      	adds	r5, #8
  40914a:	f10a 0210 	add.w	r2, sl, #16
  40914e:	6829      	ldr	r1, [r5, #0]
  409150:	6011      	str	r1, [r2, #0]
  409152:	6869      	ldr	r1, [r5, #4]
  409154:	6051      	str	r1, [r2, #4]
  409156:	68a9      	ldr	r1, [r5, #8]
  409158:	6091      	str	r1, [r2, #8]
  40915a:	eb0a 0107 	add.w	r1, sl, r7
  40915e:	ebab 0207 	sub.w	r2, fp, r7
  409162:	f042 0201 	orr.w	r2, r2, #1
  409166:	6099      	str	r1, [r3, #8]
  409168:	604a      	str	r2, [r1, #4]
  40916a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40916e:	f003 0301 	and.w	r3, r3, #1
  409172:	431f      	orrs	r7, r3
  409174:	4640      	mov	r0, r8
  409176:	f8ca 7004 	str.w	r7, [sl, #4]
  40917a:	f7ff fedb 	bl	408f34 <__malloc_unlock>
  40917e:	e751      	b.n	409024 <_realloc_r+0xe4>
  409180:	682b      	ldr	r3, [r5, #0]
  409182:	6003      	str	r3, [r0, #0]
  409184:	686b      	ldr	r3, [r5, #4]
  409186:	6043      	str	r3, [r0, #4]
  409188:	2a1b      	cmp	r2, #27
  40918a:	d82d      	bhi.n	4091e8 <_realloc_r+0x2a8>
  40918c:	f100 0308 	add.w	r3, r0, #8
  409190:	f105 0208 	add.w	r2, r5, #8
  409194:	e71b      	b.n	408fce <_realloc_r+0x8e>
  409196:	4632      	mov	r2, r6
  409198:	6829      	ldr	r1, [r5, #0]
  40919a:	6011      	str	r1, [r2, #0]
  40919c:	6869      	ldr	r1, [r5, #4]
  40919e:	6051      	str	r1, [r2, #4]
  4091a0:	68a9      	ldr	r1, [r5, #8]
  4091a2:	6091      	str	r1, [r2, #8]
  4091a4:	461c      	mov	r4, r3
  4091a6:	46d1      	mov	r9, sl
  4091a8:	e72a      	b.n	409000 <_realloc_r+0xc0>
  4091aa:	eb09 0107 	add.w	r1, r9, r7
  4091ae:	ebab 0b07 	sub.w	fp, fp, r7
  4091b2:	f04b 0201 	orr.w	r2, fp, #1
  4091b6:	6099      	str	r1, [r3, #8]
  4091b8:	604a      	str	r2, [r1, #4]
  4091ba:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4091be:	f003 0301 	and.w	r3, r3, #1
  4091c2:	431f      	orrs	r7, r3
  4091c4:	4640      	mov	r0, r8
  4091c6:	f845 7c04 	str.w	r7, [r5, #-4]
  4091ca:	f7ff feb3 	bl	408f34 <__malloc_unlock>
  4091ce:	462e      	mov	r6, r5
  4091d0:	e728      	b.n	409024 <_realloc_r+0xe4>
  4091d2:	4629      	mov	r1, r5
  4091d4:	f7ff fe44 	bl	408e60 <memmove>
  4091d8:	e6ff      	b.n	408fda <_realloc_r+0x9a>
  4091da:	4629      	mov	r1, r5
  4091dc:	4630      	mov	r0, r6
  4091de:	461c      	mov	r4, r3
  4091e0:	46d1      	mov	r9, sl
  4091e2:	f7ff fe3d 	bl	408e60 <memmove>
  4091e6:	e70b      	b.n	409000 <_realloc_r+0xc0>
  4091e8:	68ab      	ldr	r3, [r5, #8]
  4091ea:	6083      	str	r3, [r0, #8]
  4091ec:	68eb      	ldr	r3, [r5, #12]
  4091ee:	60c3      	str	r3, [r0, #12]
  4091f0:	2a24      	cmp	r2, #36	; 0x24
  4091f2:	d017      	beq.n	409224 <_realloc_r+0x2e4>
  4091f4:	f100 0310 	add.w	r3, r0, #16
  4091f8:	f105 0210 	add.w	r2, r5, #16
  4091fc:	e6e7      	b.n	408fce <_realloc_r+0x8e>
  4091fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
  409202:	f023 0303 	bic.w	r3, r3, #3
  409206:	441c      	add	r4, r3
  409208:	462e      	mov	r6, r5
  40920a:	e6f9      	b.n	409000 <_realloc_r+0xc0>
  40920c:	68a9      	ldr	r1, [r5, #8]
  40920e:	f8ca 1010 	str.w	r1, [sl, #16]
  409212:	68e9      	ldr	r1, [r5, #12]
  409214:	f8ca 1014 	str.w	r1, [sl, #20]
  409218:	2a24      	cmp	r2, #36	; 0x24
  40921a:	d00c      	beq.n	409236 <_realloc_r+0x2f6>
  40921c:	3510      	adds	r5, #16
  40921e:	f10a 0218 	add.w	r2, sl, #24
  409222:	e7b9      	b.n	409198 <_realloc_r+0x258>
  409224:	692b      	ldr	r3, [r5, #16]
  409226:	6103      	str	r3, [r0, #16]
  409228:	696b      	ldr	r3, [r5, #20]
  40922a:	6143      	str	r3, [r0, #20]
  40922c:	f105 0218 	add.w	r2, r5, #24
  409230:	f100 0318 	add.w	r3, r0, #24
  409234:	e6cb      	b.n	408fce <_realloc_r+0x8e>
  409236:	692a      	ldr	r2, [r5, #16]
  409238:	f8ca 2018 	str.w	r2, [sl, #24]
  40923c:	696a      	ldr	r2, [r5, #20]
  40923e:	f8ca 201c 	str.w	r2, [sl, #28]
  409242:	3518      	adds	r5, #24
  409244:	f10a 0220 	add.w	r2, sl, #32
  409248:	e7a6      	b.n	409198 <_realloc_r+0x258>
  40924a:	4632      	mov	r2, r6
  40924c:	e77f      	b.n	40914e <_realloc_r+0x20e>
  40924e:	4629      	mov	r1, r5
  409250:	4630      	mov	r0, r6
  409252:	9301      	str	r3, [sp, #4]
  409254:	f7ff fe04 	bl	408e60 <memmove>
  409258:	9b01      	ldr	r3, [sp, #4]
  40925a:	e77e      	b.n	40915a <_realloc_r+0x21a>
  40925c:	68a9      	ldr	r1, [r5, #8]
  40925e:	f8ca 1010 	str.w	r1, [sl, #16]
  409262:	68e9      	ldr	r1, [r5, #12]
  409264:	f8ca 1014 	str.w	r1, [sl, #20]
  409268:	2a24      	cmp	r2, #36	; 0x24
  40926a:	d003      	beq.n	409274 <_realloc_r+0x334>
  40926c:	3510      	adds	r5, #16
  40926e:	f10a 0218 	add.w	r2, sl, #24
  409272:	e76c      	b.n	40914e <_realloc_r+0x20e>
  409274:	692a      	ldr	r2, [r5, #16]
  409276:	f8ca 2018 	str.w	r2, [sl, #24]
  40927a:	696a      	ldr	r2, [r5, #20]
  40927c:	f8ca 201c 	str.w	r2, [sl, #28]
  409280:	3518      	adds	r5, #24
  409282:	f10a 0220 	add.w	r2, sl, #32
  409286:	e762      	b.n	40914e <_realloc_r+0x20e>
  409288:	204005d8 	.word	0x204005d8

0040928c <_sbrk_r>:
  40928c:	b538      	push	{r3, r4, r5, lr}
  40928e:	4c07      	ldr	r4, [pc, #28]	; (4092ac <_sbrk_r+0x20>)
  409290:	2300      	movs	r3, #0
  409292:	4605      	mov	r5, r0
  409294:	4608      	mov	r0, r1
  409296:	6023      	str	r3, [r4, #0]
  409298:	f7fc ff08 	bl	4060ac <_sbrk>
  40929c:	1c43      	adds	r3, r0, #1
  40929e:	d000      	beq.n	4092a2 <_sbrk_r+0x16>
  4092a0:	bd38      	pop	{r3, r4, r5, pc}
  4092a2:	6823      	ldr	r3, [r4, #0]
  4092a4:	2b00      	cmp	r3, #0
  4092a6:	d0fb      	beq.n	4092a0 <_sbrk_r+0x14>
  4092a8:	602b      	str	r3, [r5, #0]
  4092aa:	bd38      	pop	{r3, r4, r5, pc}
  4092ac:	204223ec 	.word	0x204223ec

004092b0 <__sread>:
  4092b0:	b510      	push	{r4, lr}
  4092b2:	460c      	mov	r4, r1
  4092b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4092b8:	f000 f9f6 	bl	4096a8 <_read_r>
  4092bc:	2800      	cmp	r0, #0
  4092be:	db03      	blt.n	4092c8 <__sread+0x18>
  4092c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4092c2:	4403      	add	r3, r0
  4092c4:	6523      	str	r3, [r4, #80]	; 0x50
  4092c6:	bd10      	pop	{r4, pc}
  4092c8:	89a3      	ldrh	r3, [r4, #12]
  4092ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4092ce:	81a3      	strh	r3, [r4, #12]
  4092d0:	bd10      	pop	{r4, pc}
  4092d2:	bf00      	nop

004092d4 <__swrite>:
  4092d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4092d8:	4616      	mov	r6, r2
  4092da:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4092de:	461f      	mov	r7, r3
  4092e0:	05d3      	lsls	r3, r2, #23
  4092e2:	460c      	mov	r4, r1
  4092e4:	4605      	mov	r5, r0
  4092e6:	d507      	bpl.n	4092f8 <__swrite+0x24>
  4092e8:	2200      	movs	r2, #0
  4092ea:	2302      	movs	r3, #2
  4092ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4092f0:	f000 f9c4 	bl	40967c <_lseek_r>
  4092f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4092f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4092fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409300:	81a2      	strh	r2, [r4, #12]
  409302:	463b      	mov	r3, r7
  409304:	4632      	mov	r2, r6
  409306:	4628      	mov	r0, r5
  409308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40930c:	f000 b8a4 	b.w	409458 <_write_r>

00409310 <__sseek>:
  409310:	b510      	push	{r4, lr}
  409312:	460c      	mov	r4, r1
  409314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409318:	f000 f9b0 	bl	40967c <_lseek_r>
  40931c:	89a3      	ldrh	r3, [r4, #12]
  40931e:	1c42      	adds	r2, r0, #1
  409320:	bf0e      	itee	eq
  409322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  409326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40932a:	6520      	strne	r0, [r4, #80]	; 0x50
  40932c:	81a3      	strh	r3, [r4, #12]
  40932e:	bd10      	pop	{r4, pc}

00409330 <__sclose>:
  409330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409334:	f000 b908 	b.w	409548 <_close_r>

00409338 <__swbuf_r>:
  409338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40933a:	460d      	mov	r5, r1
  40933c:	4614      	mov	r4, r2
  40933e:	4606      	mov	r6, r0
  409340:	b110      	cbz	r0, 409348 <__swbuf_r+0x10>
  409342:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409344:	2b00      	cmp	r3, #0
  409346:	d04b      	beq.n	4093e0 <__swbuf_r+0xa8>
  409348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40934c:	69a3      	ldr	r3, [r4, #24]
  40934e:	60a3      	str	r3, [r4, #8]
  409350:	b291      	uxth	r1, r2
  409352:	0708      	lsls	r0, r1, #28
  409354:	d539      	bpl.n	4093ca <__swbuf_r+0x92>
  409356:	6923      	ldr	r3, [r4, #16]
  409358:	2b00      	cmp	r3, #0
  40935a:	d036      	beq.n	4093ca <__swbuf_r+0x92>
  40935c:	b2ed      	uxtb	r5, r5
  40935e:	0489      	lsls	r1, r1, #18
  409360:	462f      	mov	r7, r5
  409362:	d515      	bpl.n	409390 <__swbuf_r+0x58>
  409364:	6822      	ldr	r2, [r4, #0]
  409366:	6961      	ldr	r1, [r4, #20]
  409368:	1ad3      	subs	r3, r2, r3
  40936a:	428b      	cmp	r3, r1
  40936c:	da1c      	bge.n	4093a8 <__swbuf_r+0x70>
  40936e:	3301      	adds	r3, #1
  409370:	68a1      	ldr	r1, [r4, #8]
  409372:	1c50      	adds	r0, r2, #1
  409374:	3901      	subs	r1, #1
  409376:	60a1      	str	r1, [r4, #8]
  409378:	6020      	str	r0, [r4, #0]
  40937a:	7015      	strb	r5, [r2, #0]
  40937c:	6962      	ldr	r2, [r4, #20]
  40937e:	429a      	cmp	r2, r3
  409380:	d01a      	beq.n	4093b8 <__swbuf_r+0x80>
  409382:	89a3      	ldrh	r3, [r4, #12]
  409384:	07db      	lsls	r3, r3, #31
  409386:	d501      	bpl.n	40938c <__swbuf_r+0x54>
  409388:	2d0a      	cmp	r5, #10
  40938a:	d015      	beq.n	4093b8 <__swbuf_r+0x80>
  40938c:	4638      	mov	r0, r7
  40938e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409390:	6e61      	ldr	r1, [r4, #100]	; 0x64
  409392:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  409396:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40939a:	81a2      	strh	r2, [r4, #12]
  40939c:	6822      	ldr	r2, [r4, #0]
  40939e:	6661      	str	r1, [r4, #100]	; 0x64
  4093a0:	6961      	ldr	r1, [r4, #20]
  4093a2:	1ad3      	subs	r3, r2, r3
  4093a4:	428b      	cmp	r3, r1
  4093a6:	dbe2      	blt.n	40936e <__swbuf_r+0x36>
  4093a8:	4621      	mov	r1, r4
  4093aa:	4630      	mov	r0, r6
  4093ac:	f7fe fda6 	bl	407efc <_fflush_r>
  4093b0:	b940      	cbnz	r0, 4093c4 <__swbuf_r+0x8c>
  4093b2:	6822      	ldr	r2, [r4, #0]
  4093b4:	2301      	movs	r3, #1
  4093b6:	e7db      	b.n	409370 <__swbuf_r+0x38>
  4093b8:	4621      	mov	r1, r4
  4093ba:	4630      	mov	r0, r6
  4093bc:	f7fe fd9e 	bl	407efc <_fflush_r>
  4093c0:	2800      	cmp	r0, #0
  4093c2:	d0e3      	beq.n	40938c <__swbuf_r+0x54>
  4093c4:	f04f 37ff 	mov.w	r7, #4294967295
  4093c8:	e7e0      	b.n	40938c <__swbuf_r+0x54>
  4093ca:	4621      	mov	r1, r4
  4093cc:	4630      	mov	r0, r6
  4093ce:	f7fe fc81 	bl	407cd4 <__swsetup_r>
  4093d2:	2800      	cmp	r0, #0
  4093d4:	d1f6      	bne.n	4093c4 <__swbuf_r+0x8c>
  4093d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4093da:	6923      	ldr	r3, [r4, #16]
  4093dc:	b291      	uxth	r1, r2
  4093de:	e7bd      	b.n	40935c <__swbuf_r+0x24>
  4093e0:	f7fe fde4 	bl	407fac <__sinit>
  4093e4:	e7b0      	b.n	409348 <__swbuf_r+0x10>
  4093e6:	bf00      	nop

004093e8 <_wcrtomb_r>:
  4093e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4093ea:	4606      	mov	r6, r0
  4093ec:	b085      	sub	sp, #20
  4093ee:	461f      	mov	r7, r3
  4093f0:	b189      	cbz	r1, 409416 <_wcrtomb_r+0x2e>
  4093f2:	4c10      	ldr	r4, [pc, #64]	; (409434 <_wcrtomb_r+0x4c>)
  4093f4:	4d10      	ldr	r5, [pc, #64]	; (409438 <_wcrtomb_r+0x50>)
  4093f6:	6824      	ldr	r4, [r4, #0]
  4093f8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4093fa:	2c00      	cmp	r4, #0
  4093fc:	bf08      	it	eq
  4093fe:	462c      	moveq	r4, r5
  409400:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  409404:	47a0      	blx	r4
  409406:	1c43      	adds	r3, r0, #1
  409408:	d103      	bne.n	409412 <_wcrtomb_r+0x2a>
  40940a:	2200      	movs	r2, #0
  40940c:	238a      	movs	r3, #138	; 0x8a
  40940e:	603a      	str	r2, [r7, #0]
  409410:	6033      	str	r3, [r6, #0]
  409412:	b005      	add	sp, #20
  409414:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409416:	460c      	mov	r4, r1
  409418:	4906      	ldr	r1, [pc, #24]	; (409434 <_wcrtomb_r+0x4c>)
  40941a:	4a07      	ldr	r2, [pc, #28]	; (409438 <_wcrtomb_r+0x50>)
  40941c:	6809      	ldr	r1, [r1, #0]
  40941e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  409420:	2900      	cmp	r1, #0
  409422:	bf08      	it	eq
  409424:	4611      	moveq	r1, r2
  409426:	4622      	mov	r2, r4
  409428:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40942c:	a901      	add	r1, sp, #4
  40942e:	47a0      	blx	r4
  409430:	e7e9      	b.n	409406 <_wcrtomb_r+0x1e>
  409432:	bf00      	nop
  409434:	2040003c 	.word	0x2040003c
  409438:	2040046c 	.word	0x2040046c

0040943c <__ascii_wctomb>:
  40943c:	b121      	cbz	r1, 409448 <__ascii_wctomb+0xc>
  40943e:	2aff      	cmp	r2, #255	; 0xff
  409440:	d804      	bhi.n	40944c <__ascii_wctomb+0x10>
  409442:	700a      	strb	r2, [r1, #0]
  409444:	2001      	movs	r0, #1
  409446:	4770      	bx	lr
  409448:	4608      	mov	r0, r1
  40944a:	4770      	bx	lr
  40944c:	238a      	movs	r3, #138	; 0x8a
  40944e:	6003      	str	r3, [r0, #0]
  409450:	f04f 30ff 	mov.w	r0, #4294967295
  409454:	4770      	bx	lr
  409456:	bf00      	nop

00409458 <_write_r>:
  409458:	b570      	push	{r4, r5, r6, lr}
  40945a:	460d      	mov	r5, r1
  40945c:	4c08      	ldr	r4, [pc, #32]	; (409480 <_write_r+0x28>)
  40945e:	4611      	mov	r1, r2
  409460:	4606      	mov	r6, r0
  409462:	461a      	mov	r2, r3
  409464:	4628      	mov	r0, r5
  409466:	2300      	movs	r3, #0
  409468:	6023      	str	r3, [r4, #0]
  40946a:	f7fa ff69 	bl	404340 <_write>
  40946e:	1c43      	adds	r3, r0, #1
  409470:	d000      	beq.n	409474 <_write_r+0x1c>
  409472:	bd70      	pop	{r4, r5, r6, pc}
  409474:	6823      	ldr	r3, [r4, #0]
  409476:	2b00      	cmp	r3, #0
  409478:	d0fb      	beq.n	409472 <_write_r+0x1a>
  40947a:	6033      	str	r3, [r6, #0]
  40947c:	bd70      	pop	{r4, r5, r6, pc}
  40947e:	bf00      	nop
  409480:	204223ec 	.word	0x204223ec

00409484 <__register_exitproc>:
  409484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409488:	4d2c      	ldr	r5, [pc, #176]	; (40953c <__register_exitproc+0xb8>)
  40948a:	4606      	mov	r6, r0
  40948c:	6828      	ldr	r0, [r5, #0]
  40948e:	4698      	mov	r8, r3
  409490:	460f      	mov	r7, r1
  409492:	4691      	mov	r9, r2
  409494:	f7ff f94a 	bl	40872c <__retarget_lock_acquire_recursive>
  409498:	4b29      	ldr	r3, [pc, #164]	; (409540 <__register_exitproc+0xbc>)
  40949a:	681c      	ldr	r4, [r3, #0]
  40949c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4094a0:	2b00      	cmp	r3, #0
  4094a2:	d03e      	beq.n	409522 <__register_exitproc+0x9e>
  4094a4:	685a      	ldr	r2, [r3, #4]
  4094a6:	2a1f      	cmp	r2, #31
  4094a8:	dc1c      	bgt.n	4094e4 <__register_exitproc+0x60>
  4094aa:	f102 0e01 	add.w	lr, r2, #1
  4094ae:	b176      	cbz	r6, 4094ce <__register_exitproc+0x4a>
  4094b0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4094b4:	2401      	movs	r4, #1
  4094b6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4094ba:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4094be:	4094      	lsls	r4, r2
  4094c0:	4320      	orrs	r0, r4
  4094c2:	2e02      	cmp	r6, #2
  4094c4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4094c8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4094cc:	d023      	beq.n	409516 <__register_exitproc+0x92>
  4094ce:	3202      	adds	r2, #2
  4094d0:	f8c3 e004 	str.w	lr, [r3, #4]
  4094d4:	6828      	ldr	r0, [r5, #0]
  4094d6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4094da:	f7ff f929 	bl	408730 <__retarget_lock_release_recursive>
  4094de:	2000      	movs	r0, #0
  4094e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4094e4:	4b17      	ldr	r3, [pc, #92]	; (409544 <__register_exitproc+0xc0>)
  4094e6:	b30b      	cbz	r3, 40952c <__register_exitproc+0xa8>
  4094e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4094ec:	f7ff f99a 	bl	408824 <malloc>
  4094f0:	4603      	mov	r3, r0
  4094f2:	b1d8      	cbz	r0, 40952c <__register_exitproc+0xa8>
  4094f4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4094f8:	6002      	str	r2, [r0, #0]
  4094fa:	2100      	movs	r1, #0
  4094fc:	6041      	str	r1, [r0, #4]
  4094fe:	460a      	mov	r2, r1
  409500:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409504:	f04f 0e01 	mov.w	lr, #1
  409508:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40950c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409510:	2e00      	cmp	r6, #0
  409512:	d0dc      	beq.n	4094ce <__register_exitproc+0x4a>
  409514:	e7cc      	b.n	4094b0 <__register_exitproc+0x2c>
  409516:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40951a:	430c      	orrs	r4, r1
  40951c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409520:	e7d5      	b.n	4094ce <__register_exitproc+0x4a>
  409522:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  409526:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40952a:	e7bb      	b.n	4094a4 <__register_exitproc+0x20>
  40952c:	6828      	ldr	r0, [r5, #0]
  40952e:	f7ff f8ff 	bl	408730 <__retarget_lock_release_recursive>
  409532:	f04f 30ff 	mov.w	r0, #4294967295
  409536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40953a:	bf00      	nop
  40953c:	20400468 	.word	0x20400468
  409540:	00409b50 	.word	0x00409b50
  409544:	00408825 	.word	0x00408825

00409548 <_close_r>:
  409548:	b538      	push	{r3, r4, r5, lr}
  40954a:	4c07      	ldr	r4, [pc, #28]	; (409568 <_close_r+0x20>)
  40954c:	2300      	movs	r3, #0
  40954e:	4605      	mov	r5, r0
  409550:	4608      	mov	r0, r1
  409552:	6023      	str	r3, [r4, #0]
  409554:	f7fc fdd6 	bl	406104 <_close>
  409558:	1c43      	adds	r3, r0, #1
  40955a:	d000      	beq.n	40955e <_close_r+0x16>
  40955c:	bd38      	pop	{r3, r4, r5, pc}
  40955e:	6823      	ldr	r3, [r4, #0]
  409560:	2b00      	cmp	r3, #0
  409562:	d0fb      	beq.n	40955c <_close_r+0x14>
  409564:	602b      	str	r3, [r5, #0]
  409566:	bd38      	pop	{r3, r4, r5, pc}
  409568:	204223ec 	.word	0x204223ec

0040956c <_fclose_r>:
  40956c:	b570      	push	{r4, r5, r6, lr}
  40956e:	b159      	cbz	r1, 409588 <_fclose_r+0x1c>
  409570:	4605      	mov	r5, r0
  409572:	460c      	mov	r4, r1
  409574:	b110      	cbz	r0, 40957c <_fclose_r+0x10>
  409576:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409578:	2b00      	cmp	r3, #0
  40957a:	d03c      	beq.n	4095f6 <_fclose_r+0x8a>
  40957c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40957e:	07d8      	lsls	r0, r3, #31
  409580:	d505      	bpl.n	40958e <_fclose_r+0x22>
  409582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409586:	b92b      	cbnz	r3, 409594 <_fclose_r+0x28>
  409588:	2600      	movs	r6, #0
  40958a:	4630      	mov	r0, r6
  40958c:	bd70      	pop	{r4, r5, r6, pc}
  40958e:	89a3      	ldrh	r3, [r4, #12]
  409590:	0599      	lsls	r1, r3, #22
  409592:	d53c      	bpl.n	40960e <_fclose_r+0xa2>
  409594:	4621      	mov	r1, r4
  409596:	4628      	mov	r0, r5
  409598:	f7fe fc10 	bl	407dbc <__sflush_r>
  40959c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40959e:	4606      	mov	r6, r0
  4095a0:	b133      	cbz	r3, 4095b0 <_fclose_r+0x44>
  4095a2:	69e1      	ldr	r1, [r4, #28]
  4095a4:	4628      	mov	r0, r5
  4095a6:	4798      	blx	r3
  4095a8:	2800      	cmp	r0, #0
  4095aa:	bfb8      	it	lt
  4095ac:	f04f 36ff 	movlt.w	r6, #4294967295
  4095b0:	89a3      	ldrh	r3, [r4, #12]
  4095b2:	061a      	lsls	r2, r3, #24
  4095b4:	d422      	bmi.n	4095fc <_fclose_r+0x90>
  4095b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4095b8:	b141      	cbz	r1, 4095cc <_fclose_r+0x60>
  4095ba:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4095be:	4299      	cmp	r1, r3
  4095c0:	d002      	beq.n	4095c8 <_fclose_r+0x5c>
  4095c2:	4628      	mov	r0, r5
  4095c4:	f7fe fe18 	bl	4081f8 <_free_r>
  4095c8:	2300      	movs	r3, #0
  4095ca:	6323      	str	r3, [r4, #48]	; 0x30
  4095cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4095ce:	b121      	cbz	r1, 4095da <_fclose_r+0x6e>
  4095d0:	4628      	mov	r0, r5
  4095d2:	f7fe fe11 	bl	4081f8 <_free_r>
  4095d6:	2300      	movs	r3, #0
  4095d8:	6463      	str	r3, [r4, #68]	; 0x44
  4095da:	f7fe fd13 	bl	408004 <__sfp_lock_acquire>
  4095de:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4095e0:	2200      	movs	r2, #0
  4095e2:	07db      	lsls	r3, r3, #31
  4095e4:	81a2      	strh	r2, [r4, #12]
  4095e6:	d50e      	bpl.n	409606 <_fclose_r+0x9a>
  4095e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4095ea:	f7ff f89d 	bl	408728 <__retarget_lock_close_recursive>
  4095ee:	f7fe fd0f 	bl	408010 <__sfp_lock_release>
  4095f2:	4630      	mov	r0, r6
  4095f4:	bd70      	pop	{r4, r5, r6, pc}
  4095f6:	f7fe fcd9 	bl	407fac <__sinit>
  4095fa:	e7bf      	b.n	40957c <_fclose_r+0x10>
  4095fc:	6921      	ldr	r1, [r4, #16]
  4095fe:	4628      	mov	r0, r5
  409600:	f7fe fdfa 	bl	4081f8 <_free_r>
  409604:	e7d7      	b.n	4095b6 <_fclose_r+0x4a>
  409606:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409608:	f7ff f892 	bl	408730 <__retarget_lock_release_recursive>
  40960c:	e7ec      	b.n	4095e8 <_fclose_r+0x7c>
  40960e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409610:	f7ff f88c 	bl	40872c <__retarget_lock_acquire_recursive>
  409614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409618:	2b00      	cmp	r3, #0
  40961a:	d1bb      	bne.n	409594 <_fclose_r+0x28>
  40961c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40961e:	f016 0601 	ands.w	r6, r6, #1
  409622:	d1b1      	bne.n	409588 <_fclose_r+0x1c>
  409624:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409626:	f7ff f883 	bl	408730 <__retarget_lock_release_recursive>
  40962a:	4630      	mov	r0, r6
  40962c:	bd70      	pop	{r4, r5, r6, pc}
  40962e:	bf00      	nop

00409630 <_fstat_r>:
  409630:	b538      	push	{r3, r4, r5, lr}
  409632:	460b      	mov	r3, r1
  409634:	4c07      	ldr	r4, [pc, #28]	; (409654 <_fstat_r+0x24>)
  409636:	4605      	mov	r5, r0
  409638:	4611      	mov	r1, r2
  40963a:	4618      	mov	r0, r3
  40963c:	2300      	movs	r3, #0
  40963e:	6023      	str	r3, [r4, #0]
  409640:	f7fc fd6c 	bl	40611c <_fstat>
  409644:	1c43      	adds	r3, r0, #1
  409646:	d000      	beq.n	40964a <_fstat_r+0x1a>
  409648:	bd38      	pop	{r3, r4, r5, pc}
  40964a:	6823      	ldr	r3, [r4, #0]
  40964c:	2b00      	cmp	r3, #0
  40964e:	d0fb      	beq.n	409648 <_fstat_r+0x18>
  409650:	602b      	str	r3, [r5, #0]
  409652:	bd38      	pop	{r3, r4, r5, pc}
  409654:	204223ec 	.word	0x204223ec

00409658 <_isatty_r>:
  409658:	b538      	push	{r3, r4, r5, lr}
  40965a:	4c07      	ldr	r4, [pc, #28]	; (409678 <_isatty_r+0x20>)
  40965c:	2300      	movs	r3, #0
  40965e:	4605      	mov	r5, r0
  409660:	4608      	mov	r0, r1
  409662:	6023      	str	r3, [r4, #0]
  409664:	f7fc fd6a 	bl	40613c <_isatty>
  409668:	1c43      	adds	r3, r0, #1
  40966a:	d000      	beq.n	40966e <_isatty_r+0x16>
  40966c:	bd38      	pop	{r3, r4, r5, pc}
  40966e:	6823      	ldr	r3, [r4, #0]
  409670:	2b00      	cmp	r3, #0
  409672:	d0fb      	beq.n	40966c <_isatty_r+0x14>
  409674:	602b      	str	r3, [r5, #0]
  409676:	bd38      	pop	{r3, r4, r5, pc}
  409678:	204223ec 	.word	0x204223ec

0040967c <_lseek_r>:
  40967c:	b570      	push	{r4, r5, r6, lr}
  40967e:	460d      	mov	r5, r1
  409680:	4c08      	ldr	r4, [pc, #32]	; (4096a4 <_lseek_r+0x28>)
  409682:	4611      	mov	r1, r2
  409684:	4606      	mov	r6, r0
  409686:	461a      	mov	r2, r3
  409688:	4628      	mov	r0, r5
  40968a:	2300      	movs	r3, #0
  40968c:	6023      	str	r3, [r4, #0]
  40968e:	f7fc fd60 	bl	406152 <_lseek>
  409692:	1c43      	adds	r3, r0, #1
  409694:	d000      	beq.n	409698 <_lseek_r+0x1c>
  409696:	bd70      	pop	{r4, r5, r6, pc}
  409698:	6823      	ldr	r3, [r4, #0]
  40969a:	2b00      	cmp	r3, #0
  40969c:	d0fb      	beq.n	409696 <_lseek_r+0x1a>
  40969e:	6033      	str	r3, [r6, #0]
  4096a0:	bd70      	pop	{r4, r5, r6, pc}
  4096a2:	bf00      	nop
  4096a4:	204223ec 	.word	0x204223ec

004096a8 <_read_r>:
  4096a8:	b570      	push	{r4, r5, r6, lr}
  4096aa:	460d      	mov	r5, r1
  4096ac:	4c08      	ldr	r4, [pc, #32]	; (4096d0 <_read_r+0x28>)
  4096ae:	4611      	mov	r1, r2
  4096b0:	4606      	mov	r6, r0
  4096b2:	461a      	mov	r2, r3
  4096b4:	4628      	mov	r0, r5
  4096b6:	2300      	movs	r3, #0
  4096b8:	6023      	str	r3, [r4, #0]
  4096ba:	f7fa fe17 	bl	4042ec <_read>
  4096be:	1c43      	adds	r3, r0, #1
  4096c0:	d000      	beq.n	4096c4 <_read_r+0x1c>
  4096c2:	bd70      	pop	{r4, r5, r6, pc}
  4096c4:	6823      	ldr	r3, [r4, #0]
  4096c6:	2b00      	cmp	r3, #0
  4096c8:	d0fb      	beq.n	4096c2 <_read_r+0x1a>
  4096ca:	6033      	str	r3, [r6, #0]
  4096cc:	bd70      	pop	{r4, r5, r6, pc}
  4096ce:	bf00      	nop
  4096d0:	204223ec 	.word	0x204223ec

004096d4 <__aeabi_uldivmod>:
  4096d4:	b953      	cbnz	r3, 4096ec <__aeabi_uldivmod+0x18>
  4096d6:	b94a      	cbnz	r2, 4096ec <__aeabi_uldivmod+0x18>
  4096d8:	2900      	cmp	r1, #0
  4096da:	bf08      	it	eq
  4096dc:	2800      	cmpeq	r0, #0
  4096de:	bf1c      	itt	ne
  4096e0:	f04f 31ff 	movne.w	r1, #4294967295
  4096e4:	f04f 30ff 	movne.w	r0, #4294967295
  4096e8:	f000 b97a 	b.w	4099e0 <__aeabi_idiv0>
  4096ec:	f1ad 0c08 	sub.w	ip, sp, #8
  4096f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4096f4:	f000 f806 	bl	409704 <__udivmoddi4>
  4096f8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4096fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409700:	b004      	add	sp, #16
  409702:	4770      	bx	lr

00409704 <__udivmoddi4>:
  409704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409708:	468c      	mov	ip, r1
  40970a:	460d      	mov	r5, r1
  40970c:	4604      	mov	r4, r0
  40970e:	9e08      	ldr	r6, [sp, #32]
  409710:	2b00      	cmp	r3, #0
  409712:	d151      	bne.n	4097b8 <__udivmoddi4+0xb4>
  409714:	428a      	cmp	r2, r1
  409716:	4617      	mov	r7, r2
  409718:	d96d      	bls.n	4097f6 <__udivmoddi4+0xf2>
  40971a:	fab2 fe82 	clz	lr, r2
  40971e:	f1be 0f00 	cmp.w	lr, #0
  409722:	d00b      	beq.n	40973c <__udivmoddi4+0x38>
  409724:	f1ce 0c20 	rsb	ip, lr, #32
  409728:	fa01 f50e 	lsl.w	r5, r1, lr
  40972c:	fa20 fc0c 	lsr.w	ip, r0, ip
  409730:	fa02 f70e 	lsl.w	r7, r2, lr
  409734:	ea4c 0c05 	orr.w	ip, ip, r5
  409738:	fa00 f40e 	lsl.w	r4, r0, lr
  40973c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409740:	0c25      	lsrs	r5, r4, #16
  409742:	fbbc f8fa 	udiv	r8, ip, sl
  409746:	fa1f f987 	uxth.w	r9, r7
  40974a:	fb0a cc18 	mls	ip, sl, r8, ip
  40974e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  409752:	fb08 f309 	mul.w	r3, r8, r9
  409756:	42ab      	cmp	r3, r5
  409758:	d90a      	bls.n	409770 <__udivmoddi4+0x6c>
  40975a:	19ed      	adds	r5, r5, r7
  40975c:	f108 32ff 	add.w	r2, r8, #4294967295
  409760:	f080 8123 	bcs.w	4099aa <__udivmoddi4+0x2a6>
  409764:	42ab      	cmp	r3, r5
  409766:	f240 8120 	bls.w	4099aa <__udivmoddi4+0x2a6>
  40976a:	f1a8 0802 	sub.w	r8, r8, #2
  40976e:	443d      	add	r5, r7
  409770:	1aed      	subs	r5, r5, r3
  409772:	b2a4      	uxth	r4, r4
  409774:	fbb5 f0fa 	udiv	r0, r5, sl
  409778:	fb0a 5510 	mls	r5, sl, r0, r5
  40977c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  409780:	fb00 f909 	mul.w	r9, r0, r9
  409784:	45a1      	cmp	r9, r4
  409786:	d909      	bls.n	40979c <__udivmoddi4+0x98>
  409788:	19e4      	adds	r4, r4, r7
  40978a:	f100 33ff 	add.w	r3, r0, #4294967295
  40978e:	f080 810a 	bcs.w	4099a6 <__udivmoddi4+0x2a2>
  409792:	45a1      	cmp	r9, r4
  409794:	f240 8107 	bls.w	4099a6 <__udivmoddi4+0x2a2>
  409798:	3802      	subs	r0, #2
  40979a:	443c      	add	r4, r7
  40979c:	eba4 0409 	sub.w	r4, r4, r9
  4097a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4097a4:	2100      	movs	r1, #0
  4097a6:	2e00      	cmp	r6, #0
  4097a8:	d061      	beq.n	40986e <__udivmoddi4+0x16a>
  4097aa:	fa24 f40e 	lsr.w	r4, r4, lr
  4097ae:	2300      	movs	r3, #0
  4097b0:	6034      	str	r4, [r6, #0]
  4097b2:	6073      	str	r3, [r6, #4]
  4097b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4097b8:	428b      	cmp	r3, r1
  4097ba:	d907      	bls.n	4097cc <__udivmoddi4+0xc8>
  4097bc:	2e00      	cmp	r6, #0
  4097be:	d054      	beq.n	40986a <__udivmoddi4+0x166>
  4097c0:	2100      	movs	r1, #0
  4097c2:	e886 0021 	stmia.w	r6, {r0, r5}
  4097c6:	4608      	mov	r0, r1
  4097c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4097cc:	fab3 f183 	clz	r1, r3
  4097d0:	2900      	cmp	r1, #0
  4097d2:	f040 808e 	bne.w	4098f2 <__udivmoddi4+0x1ee>
  4097d6:	42ab      	cmp	r3, r5
  4097d8:	d302      	bcc.n	4097e0 <__udivmoddi4+0xdc>
  4097da:	4282      	cmp	r2, r0
  4097dc:	f200 80fa 	bhi.w	4099d4 <__udivmoddi4+0x2d0>
  4097e0:	1a84      	subs	r4, r0, r2
  4097e2:	eb65 0503 	sbc.w	r5, r5, r3
  4097e6:	2001      	movs	r0, #1
  4097e8:	46ac      	mov	ip, r5
  4097ea:	2e00      	cmp	r6, #0
  4097ec:	d03f      	beq.n	40986e <__udivmoddi4+0x16a>
  4097ee:	e886 1010 	stmia.w	r6, {r4, ip}
  4097f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4097f6:	b912      	cbnz	r2, 4097fe <__udivmoddi4+0xfa>
  4097f8:	2701      	movs	r7, #1
  4097fa:	fbb7 f7f2 	udiv	r7, r7, r2
  4097fe:	fab7 fe87 	clz	lr, r7
  409802:	f1be 0f00 	cmp.w	lr, #0
  409806:	d134      	bne.n	409872 <__udivmoddi4+0x16e>
  409808:	1beb      	subs	r3, r5, r7
  40980a:	0c3a      	lsrs	r2, r7, #16
  40980c:	fa1f fc87 	uxth.w	ip, r7
  409810:	2101      	movs	r1, #1
  409812:	fbb3 f8f2 	udiv	r8, r3, r2
  409816:	0c25      	lsrs	r5, r4, #16
  409818:	fb02 3318 	mls	r3, r2, r8, r3
  40981c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409820:	fb0c f308 	mul.w	r3, ip, r8
  409824:	42ab      	cmp	r3, r5
  409826:	d907      	bls.n	409838 <__udivmoddi4+0x134>
  409828:	19ed      	adds	r5, r5, r7
  40982a:	f108 30ff 	add.w	r0, r8, #4294967295
  40982e:	d202      	bcs.n	409836 <__udivmoddi4+0x132>
  409830:	42ab      	cmp	r3, r5
  409832:	f200 80d1 	bhi.w	4099d8 <__udivmoddi4+0x2d4>
  409836:	4680      	mov	r8, r0
  409838:	1aed      	subs	r5, r5, r3
  40983a:	b2a3      	uxth	r3, r4
  40983c:	fbb5 f0f2 	udiv	r0, r5, r2
  409840:	fb02 5510 	mls	r5, r2, r0, r5
  409844:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409848:	fb0c fc00 	mul.w	ip, ip, r0
  40984c:	45a4      	cmp	ip, r4
  40984e:	d907      	bls.n	409860 <__udivmoddi4+0x15c>
  409850:	19e4      	adds	r4, r4, r7
  409852:	f100 33ff 	add.w	r3, r0, #4294967295
  409856:	d202      	bcs.n	40985e <__udivmoddi4+0x15a>
  409858:	45a4      	cmp	ip, r4
  40985a:	f200 80b8 	bhi.w	4099ce <__udivmoddi4+0x2ca>
  40985e:	4618      	mov	r0, r3
  409860:	eba4 040c 	sub.w	r4, r4, ip
  409864:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409868:	e79d      	b.n	4097a6 <__udivmoddi4+0xa2>
  40986a:	4631      	mov	r1, r6
  40986c:	4630      	mov	r0, r6
  40986e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409872:	f1ce 0420 	rsb	r4, lr, #32
  409876:	fa05 f30e 	lsl.w	r3, r5, lr
  40987a:	fa07 f70e 	lsl.w	r7, r7, lr
  40987e:	fa20 f804 	lsr.w	r8, r0, r4
  409882:	0c3a      	lsrs	r2, r7, #16
  409884:	fa25 f404 	lsr.w	r4, r5, r4
  409888:	ea48 0803 	orr.w	r8, r8, r3
  40988c:	fbb4 f1f2 	udiv	r1, r4, r2
  409890:	ea4f 4518 	mov.w	r5, r8, lsr #16
  409894:	fb02 4411 	mls	r4, r2, r1, r4
  409898:	fa1f fc87 	uxth.w	ip, r7
  40989c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4098a0:	fb01 f30c 	mul.w	r3, r1, ip
  4098a4:	42ab      	cmp	r3, r5
  4098a6:	fa00 f40e 	lsl.w	r4, r0, lr
  4098aa:	d909      	bls.n	4098c0 <__udivmoddi4+0x1bc>
  4098ac:	19ed      	adds	r5, r5, r7
  4098ae:	f101 30ff 	add.w	r0, r1, #4294967295
  4098b2:	f080 808a 	bcs.w	4099ca <__udivmoddi4+0x2c6>
  4098b6:	42ab      	cmp	r3, r5
  4098b8:	f240 8087 	bls.w	4099ca <__udivmoddi4+0x2c6>
  4098bc:	3902      	subs	r1, #2
  4098be:	443d      	add	r5, r7
  4098c0:	1aeb      	subs	r3, r5, r3
  4098c2:	fa1f f588 	uxth.w	r5, r8
  4098c6:	fbb3 f0f2 	udiv	r0, r3, r2
  4098ca:	fb02 3310 	mls	r3, r2, r0, r3
  4098ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4098d2:	fb00 f30c 	mul.w	r3, r0, ip
  4098d6:	42ab      	cmp	r3, r5
  4098d8:	d907      	bls.n	4098ea <__udivmoddi4+0x1e6>
  4098da:	19ed      	adds	r5, r5, r7
  4098dc:	f100 38ff 	add.w	r8, r0, #4294967295
  4098e0:	d26f      	bcs.n	4099c2 <__udivmoddi4+0x2be>
  4098e2:	42ab      	cmp	r3, r5
  4098e4:	d96d      	bls.n	4099c2 <__udivmoddi4+0x2be>
  4098e6:	3802      	subs	r0, #2
  4098e8:	443d      	add	r5, r7
  4098ea:	1aeb      	subs	r3, r5, r3
  4098ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4098f0:	e78f      	b.n	409812 <__udivmoddi4+0x10e>
  4098f2:	f1c1 0720 	rsb	r7, r1, #32
  4098f6:	fa22 f807 	lsr.w	r8, r2, r7
  4098fa:	408b      	lsls	r3, r1
  4098fc:	fa05 f401 	lsl.w	r4, r5, r1
  409900:	ea48 0303 	orr.w	r3, r8, r3
  409904:	fa20 fe07 	lsr.w	lr, r0, r7
  409908:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40990c:	40fd      	lsrs	r5, r7
  40990e:	ea4e 0e04 	orr.w	lr, lr, r4
  409912:	fbb5 f9fc 	udiv	r9, r5, ip
  409916:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40991a:	fb0c 5519 	mls	r5, ip, r9, r5
  40991e:	fa1f f883 	uxth.w	r8, r3
  409922:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  409926:	fb09 f408 	mul.w	r4, r9, r8
  40992a:	42ac      	cmp	r4, r5
  40992c:	fa02 f201 	lsl.w	r2, r2, r1
  409930:	fa00 fa01 	lsl.w	sl, r0, r1
  409934:	d908      	bls.n	409948 <__udivmoddi4+0x244>
  409936:	18ed      	adds	r5, r5, r3
  409938:	f109 30ff 	add.w	r0, r9, #4294967295
  40993c:	d243      	bcs.n	4099c6 <__udivmoddi4+0x2c2>
  40993e:	42ac      	cmp	r4, r5
  409940:	d941      	bls.n	4099c6 <__udivmoddi4+0x2c2>
  409942:	f1a9 0902 	sub.w	r9, r9, #2
  409946:	441d      	add	r5, r3
  409948:	1b2d      	subs	r5, r5, r4
  40994a:	fa1f fe8e 	uxth.w	lr, lr
  40994e:	fbb5 f0fc 	udiv	r0, r5, ip
  409952:	fb0c 5510 	mls	r5, ip, r0, r5
  409956:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40995a:	fb00 f808 	mul.w	r8, r0, r8
  40995e:	45a0      	cmp	r8, r4
  409960:	d907      	bls.n	409972 <__udivmoddi4+0x26e>
  409962:	18e4      	adds	r4, r4, r3
  409964:	f100 35ff 	add.w	r5, r0, #4294967295
  409968:	d229      	bcs.n	4099be <__udivmoddi4+0x2ba>
  40996a:	45a0      	cmp	r8, r4
  40996c:	d927      	bls.n	4099be <__udivmoddi4+0x2ba>
  40996e:	3802      	subs	r0, #2
  409970:	441c      	add	r4, r3
  409972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  409976:	eba4 0408 	sub.w	r4, r4, r8
  40997a:	fba0 8902 	umull	r8, r9, r0, r2
  40997e:	454c      	cmp	r4, r9
  409980:	46c6      	mov	lr, r8
  409982:	464d      	mov	r5, r9
  409984:	d315      	bcc.n	4099b2 <__udivmoddi4+0x2ae>
  409986:	d012      	beq.n	4099ae <__udivmoddi4+0x2aa>
  409988:	b156      	cbz	r6, 4099a0 <__udivmoddi4+0x29c>
  40998a:	ebba 030e 	subs.w	r3, sl, lr
  40998e:	eb64 0405 	sbc.w	r4, r4, r5
  409992:	fa04 f707 	lsl.w	r7, r4, r7
  409996:	40cb      	lsrs	r3, r1
  409998:	431f      	orrs	r7, r3
  40999a:	40cc      	lsrs	r4, r1
  40999c:	6037      	str	r7, [r6, #0]
  40999e:	6074      	str	r4, [r6, #4]
  4099a0:	2100      	movs	r1, #0
  4099a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4099a6:	4618      	mov	r0, r3
  4099a8:	e6f8      	b.n	40979c <__udivmoddi4+0x98>
  4099aa:	4690      	mov	r8, r2
  4099ac:	e6e0      	b.n	409770 <__udivmoddi4+0x6c>
  4099ae:	45c2      	cmp	sl, r8
  4099b0:	d2ea      	bcs.n	409988 <__udivmoddi4+0x284>
  4099b2:	ebb8 0e02 	subs.w	lr, r8, r2
  4099b6:	eb69 0503 	sbc.w	r5, r9, r3
  4099ba:	3801      	subs	r0, #1
  4099bc:	e7e4      	b.n	409988 <__udivmoddi4+0x284>
  4099be:	4628      	mov	r0, r5
  4099c0:	e7d7      	b.n	409972 <__udivmoddi4+0x26e>
  4099c2:	4640      	mov	r0, r8
  4099c4:	e791      	b.n	4098ea <__udivmoddi4+0x1e6>
  4099c6:	4681      	mov	r9, r0
  4099c8:	e7be      	b.n	409948 <__udivmoddi4+0x244>
  4099ca:	4601      	mov	r1, r0
  4099cc:	e778      	b.n	4098c0 <__udivmoddi4+0x1bc>
  4099ce:	3802      	subs	r0, #2
  4099d0:	443c      	add	r4, r7
  4099d2:	e745      	b.n	409860 <__udivmoddi4+0x15c>
  4099d4:	4608      	mov	r0, r1
  4099d6:	e708      	b.n	4097ea <__udivmoddi4+0xe6>
  4099d8:	f1a8 0802 	sub.w	r8, r8, #2
  4099dc:	443d      	add	r5, r7
  4099de:	e72b      	b.n	409838 <__udivmoddi4+0x134>

004099e0 <__aeabi_idiv0>:
  4099e0:	4770      	bx	lr
  4099e2:	bf00      	nop
  4099e4:	454c4449 	.word	0x454c4449
  4099e8:	00000000 	.word	0x00000000
  4099ec:	00000a0d 	.word	0x00000a0d
  4099f0:	09097325 	.word	0x09097325
  4099f4:	25096325 	.word	0x25096325
  4099f8:	75250975 	.word	0x75250975
  4099fc:	0d752509 	.word	0x0d752509
  409a00:	0000000a 	.word	0x0000000a
  409a04:	20726d54 	.word	0x20726d54
  409a08:	00637653 	.word	0x00637653
  409a0c:	63617473 	.word	0x63617473
  409a10:	766f206b 	.word	0x766f206b
  409a14:	6c667265 	.word	0x6c667265
  409a18:	2520776f 	.word	0x2520776f
  409a1c:	73252078 	.word	0x73252078
  409a20:	00000a0d 	.word	0x00000a0d
  409a24:	0001c200 	.word	0x0001c200
  409a28:	000000c0 	.word	0x000000c0
  409a2c:	00000800 	.word	0x00000800
  409a30:	00000000 	.word	0x00000000
  409a34:	45564552 	.word	0x45564552
  409a38:	50204252 	.word	0x50204252
  409a3c:	53534552 	.word	0x53534552
  409a40:	000a4445 	.word	0x000a4445
  409a44:	4f484345 	.word	0x4f484345
  409a48:	45525020 	.word	0x45525020
  409a4c:	44455353 	.word	0x44455353
  409a50:	0000000a 	.word	0x0000000a
  409a54:	6e696147 	.word	0x6e696147
  409a58:	6425203a 	.word	0x6425203a
  409a5c:	0000000a 	.word	0x0000000a
  409a60:	75746153 	.word	0x75746153
  409a64:	69746172 	.word	0x69746172
  409a68:	203a6e6f 	.word	0x203a6e6f
  409a6c:	000a6425 	.word	0x000a6425
  409a70:	70776f4c 	.word	0x70776f4c
  409a74:	3a737361 	.word	0x3a737361
  409a78:	0a642520 	.word	0x0a642520
  409a7c:	00000000 	.word	0x00000000
  409a80:	41202d2d 	.word	0x41202d2d
  409a84:	20434546 	.word	0x20434546
  409a88:	44204f54 	.word	0x44204f54
  409a8c:	41204341 	.word	0x41204341
  409a90:	4f494455 	.word	0x4f494455
  409a94:	4f525020 	.word	0x4f525020
  409a98:	53534543 	.word	0x53534543
  409a9c:	20474e49 	.word	0x20474e49
  409aa0:	0a0d2d2d 	.word	0x0a0d2d2d
  409aa4:	53202d2d 	.word	0x53202d2d
  409aa8:	37454d41 	.word	0x37454d41
  409aac:	50582d30 	.word	0x50582d30
  409ab0:	2d20444c 	.word	0x2d20444c
  409ab4:	2d0a0d2d 	.word	0x2d0a0d2d
  409ab8:	6f43202d 	.word	0x6f43202d
  409abc:	6c69706d 	.word	0x6c69706d
  409ac0:	203a6465 	.word	0x203a6465
  409ac4:	206e754a 	.word	0x206e754a
  409ac8:	32203431 	.word	0x32203431
  409acc:	20393130 	.word	0x20393130
  409ad0:	303a3130 	.word	0x303a3130
  409ad4:	38353a30 	.word	0x38353a30
  409ad8:	0d2d2d20 	.word	0x0d2d2d20
  409adc:	00000000 	.word	0x00000000
  409ae0:	69647541 	.word	0x69647541
  409ae4:	7361546f 	.word	0x7361546f
  409ae8:	0000006b 	.word	0x0000006b
  409aec:	6c696146 	.word	0x6c696146
  409af0:	74206465 	.word	0x74206465
  409af4:	7263206f 	.word	0x7263206f
  409af8:	65746165 	.word	0x65746165
  409afc:	64754120 	.word	0x64754120
  409b00:	61546f69 	.word	0x61546f69
  409b04:	74206b73 	.word	0x74206b73
  409b08:	0d6b7361 	.word	0x0d6b7361
  409b0c:	0000000a 	.word	0x0000000a
  409b10:	65666645 	.word	0x65666645
  409b14:	43737463 	.word	0x43737463
  409b18:	72746e6f 	.word	0x72746e6f
  409b1c:	656c6c6f 	.word	0x656c6c6f
  409b20:	00000072 	.word	0x00000072
  409b24:	6c696146 	.word	0x6c696146
  409b28:	74206465 	.word	0x74206465
  409b2c:	7263206f 	.word	0x7263206f
  409b30:	65746165 	.word	0x65746165
  409b34:	66664520 	.word	0x66664520
  409b38:	73746365 	.word	0x73746365
  409b3c:	746e6f43 	.word	0x746e6f43
  409b40:	6c6c6f72 	.word	0x6c6c6f72
  409b44:	74207265 	.word	0x74207265
  409b48:	0d6b7361 	.word	0x0d6b7361
  409b4c:	0000000a 	.word	0x0000000a

00409b50 <_global_impure_ptr>:
  409b50:	20400040 0000000a 33323130 37363534     @.@ ....01234567
  409b60:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  409b70:	37363534 62613938 66656463 00000000     456789abcdef....
  409b80:	6c756e28 0000296c                       (null)..

00409b88 <blanks.7217>:
  409b88:	20202020 20202020 20202020 20202020                     

00409b98 <zeroes.7218>:
  409b98:	30303030 30303030 30303030 30303030     0000000000000000
  409ba8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00409bb8 <_ctype_>:
  409bb8:	20202000 20202020 28282020 20282828     .         ((((( 
  409bc8:	20202020 20202020 20202020 20202020                     
  409bd8:	10108820 10101010 10101010 10101010      ...............
  409be8:	04040410 04040404 10040404 10101010     ................
  409bf8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409c08:	01010101 01010101 01010101 10101010     ................
  409c18:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409c28:	02020202 02020202 02020202 10101010     ................
  409c38:	00000020 00000000 00000000 00000000      ...............
	...

00409cbc <_init>:
  409cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409cbe:	bf00      	nop
  409cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409cc2:	bc08      	pop	{r3}
  409cc4:	469e      	mov	lr, r3
  409cc6:	4770      	bx	lr

00409cc8 <__init_array_start>:
  409cc8:	00407d9d 	.word	0x00407d9d

00409ccc <__frame_dummy_init_array_entry>:
  409ccc:	00400165                                e.@.

00409cd0 <_fini>:
  409cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409cd2:	bf00      	nop
  409cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409cd6:	bc08      	pop	{r3}
  409cd8:	469e      	mov	lr, r3
  409cda:	4770      	bx	lr

00409cdc <__fini_array_start>:
  409cdc:	00400141 	.word	0x00400141
