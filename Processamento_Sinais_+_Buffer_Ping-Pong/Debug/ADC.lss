
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009040  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409040  00409040  00019040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e8  20400000  00409048  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000a610  204009e8  00409a30  000209e8  2**3
                  ALLOC
  4 .stack        00002000  2040aff8  00414040  000209e8  2**0
                  ALLOC
  5 .heap         00000200  2040cff8  00416040  000209e8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a16  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001f292  00000000  00000000  00020a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003df4  00000000  00000000  0003fd01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000aabf  00000000  00000000  00043af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012f0  00000000  00000000  0004e5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011d0  00000000  00000000  0004f8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00021c27  00000000  00000000  00050a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010911  00000000  00000000  0007269b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000932e4  00000000  00000000  00082fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005df4  00000000  00000000  00116290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f8 cf 40 20 75 51 40 00 25 52 40 00 25 52 40 00     ..@ uQ@.%R@.%R@.
  400010:	25 52 40 00 25 52 40 00 25 52 40 00 00 00 00 00     %R@.%R@.%R@.....
	...
  40002c:	a9 04 40 00 25 52 40 00 00 00 00 00 b9 05 40 00     ..@.%R@.......@.
  40003c:	0d 06 40 00 25 52 40 00 25 52 40 00 25 52 40 00     ..@.%R@.%R@.%R@.
  40004c:	25 52 40 00 25 52 40 00 25 52 40 00 25 52 40 00     %R@.%R@.%R@.%R@.
  40005c:	25 52 40 00 25 52 40 00 00 00 00 00 e9 49 40 00     %R@.%R@......I@.
  40006c:	01 4a 40 00 19 4a 40 00 25 52 40 00 25 52 40 00     .J@..J@.%R@.%R@.
  40007c:	25 52 40 00 31 4a 40 00 49 4a 40 00 25 52 40 00     %R@.1J@.IJ@.%R@.
  40008c:	25 52 40 00 25 52 40 00 25 52 40 00 25 52 40 00     %R@.%R@.%R@.%R@.
  40009c:	7d 2b 40 00 25 52 40 00 25 52 40 00 25 52 40 00     }+@.%R@.%R@.%R@.
  4000ac:	25 52 40 00 25 52 40 00 a5 48 40 00 25 52 40 00     %R@.%R@..H@.%R@.
  4000bc:	25 52 40 00 25 52 40 00 25 52 40 00 25 52 40 00     %R@.%R@.%R@.%R@.
  4000cc:	25 52 40 00 00 00 00 00 25 52 40 00 00 00 00 00     %R@.....%R@.....
  4000dc:	25 52 40 00 bd 48 40 00 25 52 40 00 25 52 40 00     %R@..H@.%R@.%R@.
  4000ec:	25 52 40 00 25 52 40 00 25 52 40 00 25 52 40 00     %R@.%R@.%R@.%R@.
  4000fc:	25 52 40 00 25 52 40 00 25 52 40 00 25 52 40 00     %R@.%R@.%R@.%R@.
  40010c:	25 52 40 00 25 52 40 00 00 00 00 00 00 00 00 00     %R@.%R@.........
  40011c:	00 00 00 00 25 52 40 00 25 52 40 00 25 52 40 00     ....%R@.%R@.%R@.
  40012c:	25 52 40 00 25 52 40 00 00 00 00 00 25 52 40 00     %R@.%R@.....%R@.
  40013c:	25 52 40 00                                         %R@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009e8 	.word	0x204009e8
  40015c:	00000000 	.word	0x00000000
  400160:	00409048 	.word	0x00409048

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00409048 	.word	0x00409048
  4001a0:	204009ec 	.word	0x204009ec
  4001a4:	00409048 	.word	0x00409048
  4001a8:	00000000 	.word	0x00000000

004001ac <dacc_reset>:
 * \brief Reset DACC.
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2201      	movs	r2, #1
  4001b8:	601a      	str	r2, [r3, #0]
}
  4001ba:	bf00      	nop
  4001bc:	370c      	adds	r7, #12
  4001be:	46bd      	mov	sp, r7
  4001c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001c4:	4770      	bx	lr

004001c6 <dacc_get_interrupt_status>:
 * \param p_dacc Pointer to a DACC instance. 
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
  4001c6:	b480      	push	{r7}
  4001c8:	b083      	sub	sp, #12
  4001ca:	af00      	add	r7, sp, #0
  4001cc:	6078      	str	r0, [r7, #4]
	return p_dacc->DACC_ISR;
  4001ce:	687b      	ldr	r3, [r7, #4]
  4001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4001d2:	4618      	mov	r0, r3
  4001d4:	370c      	adds	r7, #12
  4001d6:	46bd      	mov	sp, r7
  4001d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001dc:	4770      	bx	lr

004001de <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value. 
 * \param channel The channel to convert the data ul_data
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data, uint32_t channel)
{
  4001de:	b480      	push	{r7}
  4001e0:	b085      	sub	sp, #20
  4001e2:	af00      	add	r7, sp, #0
  4001e4:	60f8      	str	r0, [r7, #12]
  4001e6:	60b9      	str	r1, [r7, #8]
  4001e8:	607a      	str	r2, [r7, #4]
	p_dacc->DACC_CDR[channel] = ul_data;
  4001ea:	68fa      	ldr	r2, [r7, #12]
  4001ec:	687b      	ldr	r3, [r7, #4]
  4001ee:	3306      	adds	r3, #6
  4001f0:	009b      	lsls	r3, r3, #2
  4001f2:	4413      	add	r3, r2
  4001f4:	68ba      	ldr	r2, [r7, #8]
  4001f6:	605a      	str	r2, [r3, #4]
}
  4001f8:	bf00      	nop
  4001fa:	3714      	adds	r7, #20
  4001fc:	46bd      	mov	sp, r7
  4001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400202:	4770      	bx	lr

00400204 <dacc_enable_channel>:
 * \param ul_channel The output channel to enable.
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
  400204:	b480      	push	{r7}
  400206:	b083      	sub	sp, #12
  400208:	af00      	add	r7, sp, #0
  40020a:	6078      	str	r0, [r7, #4]
  40020c:	6039      	str	r1, [r7, #0]
	if (ul_channel > MAX_CH_NB)
  40020e:	683b      	ldr	r3, [r7, #0]
  400210:	2b01      	cmp	r3, #1
  400212:	d901      	bls.n	400218 <dacc_enable_channel+0x14>
		return DACC_RC_INVALID_PARAM;
  400214:	2301      	movs	r3, #1
  400216:	e005      	b.n	400224 <dacc_enable_channel+0x20>

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400218:	2201      	movs	r2, #1
  40021a:	683b      	ldr	r3, [r7, #0]
  40021c:	409a      	lsls	r2, r3
  40021e:	687b      	ldr	r3, [r7, #4]
  400220:	611a      	str	r2, [r3, #16]
	return DACC_RC_OK;
  400222:	2300      	movs	r3, #0
}
  400224:	4618      	mov	r0, r3
  400226:	370c      	adds	r7, #12
  400228:	46bd      	mov	sp, r7
  40022a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40022e:	4770      	bx	lr

00400230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  400230:	b480      	push	{r7}
  400232:	b083      	sub	sp, #12
  400234:	af00      	add	r7, sp, #0
  400236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  400238:	687b      	ldr	r3, [r7, #4]
  40023a:	f103 0208 	add.w	r2, r3, #8
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400242:	687b      	ldr	r3, [r7, #4]
  400244:	f04f 32ff 	mov.w	r2, #4294967295
  400248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  40024a:	687b      	ldr	r3, [r7, #4]
  40024c:	f103 0208 	add.w	r2, r3, #8
  400250:	687b      	ldr	r3, [r7, #4]
  400252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  400254:	687b      	ldr	r3, [r7, #4]
  400256:	f103 0208 	add.w	r2, r3, #8
  40025a:	687b      	ldr	r3, [r7, #4]
  40025c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  40025e:	687b      	ldr	r3, [r7, #4]
  400260:	2200      	movs	r2, #0
  400262:	601a      	str	r2, [r3, #0]
}
  400264:	bf00      	nop
  400266:	370c      	adds	r7, #12
  400268:	46bd      	mov	sp, r7
  40026a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40026e:	4770      	bx	lr

00400270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  400270:	b480      	push	{r7}
  400272:	b083      	sub	sp, #12
  400274:	af00      	add	r7, sp, #0
  400276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400278:	687b      	ldr	r3, [r7, #4]
  40027a:	2200      	movs	r2, #0
  40027c:	611a      	str	r2, [r3, #16]
}
  40027e:	bf00      	nop
  400280:	370c      	adds	r7, #12
  400282:	46bd      	mov	sp, r7
  400284:	f85d 7b04 	ldr.w	r7, [sp], #4
  400288:	4770      	bx	lr

0040028a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  40028a:	b480      	push	{r7}
  40028c:	b085      	sub	sp, #20
  40028e:	af00      	add	r7, sp, #0
  400290:	6078      	str	r0, [r7, #4]
  400292:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  400294:	687b      	ldr	r3, [r7, #4]
  400296:	685b      	ldr	r3, [r3, #4]
  400298:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  40029a:	68fb      	ldr	r3, [r7, #12]
  40029c:	685a      	ldr	r2, [r3, #4]
  40029e:	683b      	ldr	r3, [r7, #0]
  4002a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  4002a2:	687b      	ldr	r3, [r7, #4]
  4002a4:	685a      	ldr	r2, [r3, #4]
  4002a6:	683b      	ldr	r3, [r7, #0]
  4002a8:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4002aa:	68fb      	ldr	r3, [r7, #12]
  4002ac:	685b      	ldr	r3, [r3, #4]
  4002ae:	683a      	ldr	r2, [r7, #0]
  4002b0:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  4002b2:	68fb      	ldr	r3, [r7, #12]
  4002b4:	683a      	ldr	r2, [r7, #0]
  4002b6:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  4002b8:	687b      	ldr	r3, [r7, #4]
  4002ba:	683a      	ldr	r2, [r7, #0]
  4002bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4002be:	683b      	ldr	r3, [r7, #0]
  4002c0:	687a      	ldr	r2, [r7, #4]
  4002c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4002c4:	687b      	ldr	r3, [r7, #4]
  4002c6:	681b      	ldr	r3, [r3, #0]
  4002c8:	1c5a      	adds	r2, r3, #1
  4002ca:	687b      	ldr	r3, [r7, #4]
  4002cc:	601a      	str	r2, [r3, #0]
}
  4002ce:	bf00      	nop
  4002d0:	3714      	adds	r7, #20
  4002d2:	46bd      	mov	sp, r7
  4002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d8:	4770      	bx	lr

004002da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  4002da:	b480      	push	{r7}
  4002dc:	b085      	sub	sp, #20
  4002de:	af00      	add	r7, sp, #0
  4002e0:	6078      	str	r0, [r7, #4]
  4002e2:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  4002e4:	683b      	ldr	r3, [r7, #0]
  4002e6:	681b      	ldr	r3, [r3, #0]
  4002e8:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4002ea:	68bb      	ldr	r3, [r7, #8]
  4002ec:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002f0:	d103      	bne.n	4002fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  4002f2:	687b      	ldr	r3, [r7, #4]
  4002f4:	691b      	ldr	r3, [r3, #16]
  4002f6:	60fb      	str	r3, [r7, #12]
  4002f8:	e00c      	b.n	400314 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  4002fa:	687b      	ldr	r3, [r7, #4]
  4002fc:	3308      	adds	r3, #8
  4002fe:	60fb      	str	r3, [r7, #12]
  400300:	e002      	b.n	400308 <vListInsert+0x2e>
  400302:	68fb      	ldr	r3, [r7, #12]
  400304:	685b      	ldr	r3, [r3, #4]
  400306:	60fb      	str	r3, [r7, #12]
  400308:	68fb      	ldr	r3, [r7, #12]
  40030a:	685b      	ldr	r3, [r3, #4]
  40030c:	681a      	ldr	r2, [r3, #0]
  40030e:	68bb      	ldr	r3, [r7, #8]
  400310:	429a      	cmp	r2, r3
  400312:	d9f6      	bls.n	400302 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	685a      	ldr	r2, [r3, #4]
  400318:	683b      	ldr	r3, [r7, #0]
  40031a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  40031c:	683b      	ldr	r3, [r7, #0]
  40031e:	685b      	ldr	r3, [r3, #4]
  400320:	683a      	ldr	r2, [r7, #0]
  400322:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400324:	683b      	ldr	r3, [r7, #0]
  400326:	68fa      	ldr	r2, [r7, #12]
  400328:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  40032a:	68fb      	ldr	r3, [r7, #12]
  40032c:	683a      	ldr	r2, [r7, #0]
  40032e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400330:	683b      	ldr	r3, [r7, #0]
  400332:	687a      	ldr	r2, [r7, #4]
  400334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  400336:	687b      	ldr	r3, [r7, #4]
  400338:	681b      	ldr	r3, [r3, #0]
  40033a:	1c5a      	adds	r2, r3, #1
  40033c:	687b      	ldr	r3, [r7, #4]
  40033e:	601a      	str	r2, [r3, #0]
}
  400340:	bf00      	nop
  400342:	3714      	adds	r7, #20
  400344:	46bd      	mov	sp, r7
  400346:	f85d 7b04 	ldr.w	r7, [sp], #4
  40034a:	4770      	bx	lr

0040034c <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  40034c:	b480      	push	{r7}
  40034e:	b085      	sub	sp, #20
  400350:	af00      	add	r7, sp, #0
  400352:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	685b      	ldr	r3, [r3, #4]
  400358:	687a      	ldr	r2, [r7, #4]
  40035a:	6892      	ldr	r2, [r2, #8]
  40035c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40035e:	687b      	ldr	r3, [r7, #4]
  400360:	689b      	ldr	r3, [r3, #8]
  400362:	687a      	ldr	r2, [r7, #4]
  400364:	6852      	ldr	r2, [r2, #4]
  400366:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  400368:	687b      	ldr	r3, [r7, #4]
  40036a:	691b      	ldr	r3, [r3, #16]
  40036c:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40036e:	68fb      	ldr	r3, [r7, #12]
  400370:	685a      	ldr	r2, [r3, #4]
  400372:	687b      	ldr	r3, [r7, #4]
  400374:	429a      	cmp	r2, r3
  400376:	d103      	bne.n	400380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400378:	687b      	ldr	r3, [r7, #4]
  40037a:	689a      	ldr	r2, [r3, #8]
  40037c:	68fb      	ldr	r3, [r7, #12]
  40037e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  400380:	687b      	ldr	r3, [r7, #4]
  400382:	2200      	movs	r2, #0
  400384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  400386:	68fb      	ldr	r3, [r7, #12]
  400388:	681b      	ldr	r3, [r3, #0]
  40038a:	1e5a      	subs	r2, r3, #1
  40038c:	68fb      	ldr	r3, [r7, #12]
  40038e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400390:	68fb      	ldr	r3, [r7, #12]
  400392:	681b      	ldr	r3, [r3, #0]
}
  400394:	4618      	mov	r0, r3
  400396:	3714      	adds	r7, #20
  400398:	46bd      	mov	sp, r7
  40039a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40039e:	4770      	bx	lr

004003a0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4003a0:	b480      	push	{r7}
  4003a2:	b083      	sub	sp, #12
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4003a8:	687b      	ldr	r3, [r7, #4]
  4003aa:	2b07      	cmp	r3, #7
  4003ac:	d825      	bhi.n	4003fa <osc_get_rate+0x5a>
  4003ae:	a201      	add	r2, pc, #4	; (adr r2, 4003b4 <osc_get_rate+0x14>)
  4003b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4003b4:	004003d5 	.word	0x004003d5
  4003b8:	004003db 	.word	0x004003db
  4003bc:	004003e1 	.word	0x004003e1
  4003c0:	004003e7 	.word	0x004003e7
  4003c4:	004003eb 	.word	0x004003eb
  4003c8:	004003ef 	.word	0x004003ef
  4003cc:	004003f3 	.word	0x004003f3
  4003d0:	004003f7 	.word	0x004003f7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4003d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4003d8:	e010      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4003da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003de:	e00d      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4003e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003e4:	e00a      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4003e6:	4b08      	ldr	r3, [pc, #32]	; (400408 <osc_get_rate+0x68>)
  4003e8:	e008      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4003ea:	4b08      	ldr	r3, [pc, #32]	; (40040c <osc_get_rate+0x6c>)
  4003ec:	e006      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4003ee:	4b08      	ldr	r3, [pc, #32]	; (400410 <osc_get_rate+0x70>)
  4003f0:	e004      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4003f2:	4b07      	ldr	r3, [pc, #28]	; (400410 <osc_get_rate+0x70>)
  4003f4:	e002      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4003f6:	4b06      	ldr	r3, [pc, #24]	; (400410 <osc_get_rate+0x70>)
  4003f8:	e000      	b.n	4003fc <osc_get_rate+0x5c>
	}

	return 0;
  4003fa:	2300      	movs	r3, #0
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	370c      	adds	r7, #12
  400400:	46bd      	mov	sp, r7
  400402:	f85d 7b04 	ldr.w	r7, [sp], #4
  400406:	4770      	bx	lr
  400408:	003d0900 	.word	0x003d0900
  40040c:	007a1200 	.word	0x007a1200
  400410:	00b71b00 	.word	0x00b71b00

00400414 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400414:	b580      	push	{r7, lr}
  400416:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400418:	2006      	movs	r0, #6
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <sysclk_get_main_hz+0x1c>)
  40041c:	4798      	blx	r3
  40041e:	4602      	mov	r2, r0
  400420:	4613      	mov	r3, r2
  400422:	009b      	lsls	r3, r3, #2
  400424:	4413      	add	r3, r2
  400426:	009a      	lsls	r2, r3, #2
  400428:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40042a:	4618      	mov	r0, r3
  40042c:	bd80      	pop	{r7, pc}
  40042e:	bf00      	nop
  400430:	004003a1 	.word	0x004003a1

00400434 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400434:	b580      	push	{r7, lr}
  400436:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <sysclk_get_cpu_hz+0x10>)
  40043a:	4798      	blx	r3
  40043c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40043e:	4618      	mov	r0, r3
  400440:	bd80      	pop	{r7, pc}
  400442:	bf00      	nop
  400444:	00400415 	.word	0x00400415

00400448 <pxPortInitialiseStack>:
/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters )
{
  400448:	b480      	push	{r7}
  40044a:	b085      	sub	sp, #20
  40044c:	af00      	add	r7, sp, #0
  40044e:	60f8      	str	r0, [r7, #12]
  400450:	60b9      	str	r1, [r7, #8]
  400452:	607a      	str	r2, [r7, #4]
	* interrupt. */

	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;
  400454:	68fb      	ldr	r3, [r7, #12]
  400456:	3b04      	subs	r3, #4
  400458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  40045a:	68fb      	ldr	r3, [r7, #12]
  40045c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  400462:	68fb      	ldr	r3, [r7, #12]
  400464:	3b04      	subs	r3, #4
  400466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  400468:	68ba      	ldr	r2, [r7, #8]
  40046a:	68fb      	ldr	r3, [r7, #12]
  40046c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40046e:	68fb      	ldr	r3, [r7, #12]
  400470:	3b04      	subs	r3, #4
  400472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;    /* LR */
  400474:	68fb      	ldr	r3, [r7, #12]
  400476:	2200      	movs	r2, #0
  400478:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
  40047a:	68fb      	ldr	r3, [r7, #12]
  40047c:	3b14      	subs	r3, #20
  40047e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  400480:	687a      	ldr	r2, [r7, #4]
  400482:	68fb      	ldr	r3, [r7, #12]
  400484:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
  400486:	68fb      	ldr	r3, [r7, #12]
  400488:	3b04      	subs	r3, #4
  40048a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40048c:	68fb      	ldr	r3, [r7, #12]
  40048e:	f06f 0202 	mvn.w	r2, #2
  400492:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  400494:	68fb      	ldr	r3, [r7, #12]
  400496:	3b20      	subs	r3, #32
  400498:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  40049a:	68fb      	ldr	r3, [r7, #12]
}
  40049c:	4618      	mov	r0, r3
  40049e:	3714      	adds	r7, #20
  4004a0:	46bd      	mov	sp, r7
  4004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004a6:	4770      	bx	lr

004004a8 <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  4004a8:	4b05      	ldr	r3, [pc, #20]	; (4004c0 <pxCurrentTCBConst2>)
  4004aa:	6819      	ldr	r1, [r3, #0]
  4004ac:	6808      	ldr	r0, [r1, #0]
  4004ae:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004b2:	f380 8809 	msr	PSP, r0
  4004b6:	f04f 0000 	mov.w	r0, #0
  4004ba:	f380 8811 	msr	BASEPRI, r0
  4004be:	4770      	bx	lr

004004c0 <pxCurrentTCBConst2>:
  4004c0:	2040aa14 	.word	0x2040aa14
		" bx r14                          \n"
		"                                   \n"
		" .align 2                        \n"
		"pxCurrentTCBConst2: .word pxCurrentTCB \n"
		);
}
  4004c4:	bf00      	nop
  4004c6:	bf00      	nop

004004c8 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  4004c8:	4804      	ldr	r0, [pc, #16]	; (4004dc <prvPortStartFirstTask+0x14>)
  4004ca:	6800      	ldr	r0, [r0, #0]
  4004cc:	6800      	ldr	r0, [r0, #0]
  4004ce:	f380 8808 	msr	MSP, r0
  4004d2:	b662      	cpsie	i
  4004d4:	df00      	svc	0
  4004d6:	bf00      	nop
		" msr msp, r0             \n"                         /* Set the msp back to the start of the stack. */
		" cpsie i                 \n"                         /* Globally enable interrupts. */
		" svc 0                   \n"                         /* System call to start first task. */
		" nop                     \n"
		);
}
  4004d8:	bf00      	nop
  4004da:	0000      	.short	0x0000
  4004dc:	e000ed08 	.word	0xe000ed08

004004e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  4004e0:	b580      	push	{r7, lr}
  4004e2:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4004e4:	4a0e      	ldr	r2, [pc, #56]	; (400520 <xPortStartScheduler+0x40>)
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <xPortStartScheduler+0x40>)
  4004e8:	681b      	ldr	r3, [r3, #0]
  4004ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4004ee:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4004f0:	4a0b      	ldr	r2, [pc, #44]	; (400520 <xPortStartScheduler+0x40>)
  4004f2:	4b0b      	ldr	r3, [pc, #44]	; (400520 <xPortStartScheduler+0x40>)
  4004f4:	681b      	ldr	r3, [r3, #0]
  4004f6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  4004fa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  4004fc:	4b09      	ldr	r3, [pc, #36]	; (400524 <xPortStartScheduler+0x44>)
  4004fe:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400500:	4b09      	ldr	r3, [pc, #36]	; (400528 <xPortStartScheduler+0x48>)
  400502:	2200      	movs	r2, #0
  400504:	601a      	str	r2, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400506:	4b09      	ldr	r3, [pc, #36]	; (40052c <xPortStartScheduler+0x4c>)
  400508:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  40050a:	4a09      	ldr	r2, [pc, #36]	; (400530 <xPortStartScheduler+0x50>)
  40050c:	4b08      	ldr	r3, [pc, #32]	; (400530 <xPortStartScheduler+0x50>)
  40050e:	681b      	ldr	r3, [r3, #0]
  400510:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400514:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400516:	4b07      	ldr	r3, [pc, #28]	; (400534 <xPortStartScheduler+0x54>)
  400518:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  40051a:	2300      	movs	r3, #0
}
  40051c:	4618      	mov	r0, r3
  40051e:	bd80      	pop	{r7, pc}
  400520:	e000ed20 	.word	0xe000ed20
  400524:	0040063d 	.word	0x0040063d
  400528:	20400000 	.word	0x20400000
  40052c:	00400671 	.word	0x00400671
  400530:	e000ef34 	.word	0xe000ef34
  400534:	004004c9 	.word	0x004004c9

00400538 <vPortYieldFromISR>:
}

/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  400538:	b480      	push	{r7}
  40053a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40053c:	4b04      	ldr	r3, [pc, #16]	; (400550 <vPortYieldFromISR+0x18>)
  40053e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400542:	601a      	str	r2, [r3, #0]
}
  400544:	bf00      	nop
  400546:	46bd      	mov	sp, r7
  400548:	f85d 7b04 	ldr.w	r7, [sp], #4
  40054c:	4770      	bx	lr
  40054e:	bf00      	nop
  400550:	e000ed04 	.word	0xe000ed04

00400554 <vPortEnterCritical>:

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400554:	b580      	push	{r7, lr}
  400556:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  400558:	4b04      	ldr	r3, [pc, #16]	; (40056c <vPortEnterCritical+0x18>)
  40055a:	4798      	blx	r3
	uxCriticalNesting++;
  40055c:	4b04      	ldr	r3, [pc, #16]	; (400570 <vPortEnterCritical+0x1c>)
  40055e:	681b      	ldr	r3, [r3, #0]
  400560:	3301      	adds	r3, #1
  400562:	4a03      	ldr	r2, [pc, #12]	; (400570 <vPortEnterCritical+0x1c>)
  400564:	6013      	str	r3, [r2, #0]
}
  400566:	bf00      	nop
  400568:	bd80      	pop	{r7, pc}
  40056a:	bf00      	nop
  40056c:	0040059d 	.word	0x0040059d
  400570:	20400000 	.word	0x20400000

00400574 <vPortExitCritical>:

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  400574:	b580      	push	{r7, lr}
  400576:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  400578:	4b06      	ldr	r3, [pc, #24]	; (400594 <vPortExitCritical+0x20>)
  40057a:	681b      	ldr	r3, [r3, #0]
  40057c:	3b01      	subs	r3, #1
  40057e:	4a05      	ldr	r2, [pc, #20]	; (400594 <vPortExitCritical+0x20>)
  400580:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  400582:	4b04      	ldr	r3, [pc, #16]	; (400594 <vPortExitCritical+0x20>)
  400584:	681b      	ldr	r3, [r3, #0]
  400586:	2b00      	cmp	r3, #0
  400588:	d102      	bne.n	400590 <vPortExitCritical+0x1c>
		portENABLE_INTERRUPTS();
  40058a:	2000      	movs	r0, #0
  40058c:	4b02      	ldr	r3, [pc, #8]	; (400598 <vPortExitCritical+0x24>)
  40058e:	4798      	blx	r3
	}
}
  400590:	bf00      	nop
  400592:	bd80      	pop	{r7, pc}
  400594:	20400000 	.word	0x20400000
  400598:	004005af 	.word	0x004005af

0040059c <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  40059c:	f3ef 8011 	mrs	r0, BASEPRI
  4005a0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  4005a4:	f381 8811 	msr	BASEPRI, r1
  4005a8:	4770      	bx	lr
		:: "i" (configMAX_SYSCALL_INTERRUPT_PRIORITY) : "r0", "r1" \
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
  4005aa:	2300      	movs	r3, #0
}
  4005ac:	4618      	mov	r0, r3

004005ae <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  4005ae:	f380 8811 	msr	BASEPRI, r0
  4005b2:	4770      	bx	lr
	( \
		" msr basepri, r0                            \n" \
		" bx lr                                      \n" \
		::: "r0" \
	);
}
  4005b4:	bf00      	nop
	...

004005b8 <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  4005b8:	f3ef 8009 	mrs	r0, PSP
  4005bc:	4b11      	ldr	r3, [pc, #68]	; (400604 <pxCurrentTCBConst>)
  4005be:	681a      	ldr	r2, [r3, #0]
  4005c0:	f01e 0f10 	tst.w	lr, #16
  4005c4:	bf08      	it	eq
  4005c6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4005ca:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005ce:	6010      	str	r0, [r2, #0]
  4005d0:	e92d 4008 	stmdb	sp!, {r3, lr}
  4005d4:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  4005d8:	f380 8811 	msr	BASEPRI, r0
  4005dc:	f001 f836 	bl	40164c <vTaskSwitchContext>
  4005e0:	f04f 0000 	mov.w	r0, #0
  4005e4:	f380 8811 	msr	BASEPRI, r0
  4005e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4005ec:	6819      	ldr	r1, [r3, #0]
  4005ee:	6808      	ldr	r0, [r1, #0]
  4005f0:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005f4:	f01e 0f10 	tst.w	lr, #16
  4005f8:	bf08      	it	eq
  4005fa:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4005fe:	f380 8809 	msr	PSP, r0
  400602:	4770      	bx	lr

00400604 <pxCurrentTCBConst>:
  400604:	2040aa14 	.word	0x2040aa14
		"                                       \n"
		"   .align 2                            \n"
		"pxCurrentTCBConst: .word pxCurrentTCB    \n"
		::"i" (configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  400608:	bf00      	nop
  40060a:	bf00      	nop

0040060c <SysTick_Handler>:

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  40060c:	b580      	push	{r7, lr}
  40060e:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400610:	4b06      	ldr	r3, [pc, #24]	; (40062c <SysTick_Handler+0x20>)
  400612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400616:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  400618:	4b05      	ldr	r3, [pc, #20]	; (400630 <SysTick_Handler+0x24>)
  40061a:	4798      	blx	r3
	{
		vTaskIncrementTick();
  40061c:	4b05      	ldr	r3, [pc, #20]	; (400634 <SysTick_Handler+0x28>)
  40061e:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  400620:	2000      	movs	r0, #0
  400622:	4b05      	ldr	r3, [pc, #20]	; (400638 <SysTick_Handler+0x2c>)
  400624:	4798      	blx	r3
}
  400626:	bf00      	nop
  400628:	bd80      	pop	{r7, pc}
  40062a:	bf00      	nop
  40062c:	e000ed04 	.word	0xe000ed04
  400630:	0040059d 	.word	0x0040059d
  400634:	00401501 	.word	0x00401501
  400638:	004005af 	.word	0x004005af

0040063c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
  40063c:	b598      	push	{r3, r4, r7, lr}
  40063e:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
  400640:	4c07      	ldr	r4, [pc, #28]	; (400660 <vPortSetupTimerInterrupt+0x24>)
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  400642:	4b08      	ldr	r3, [pc, #32]	; (400664 <vPortSetupTimerInterrupt+0x28>)
  400644:	4798      	blx	r3
  400646:	4602      	mov	r2, r0
  400648:	4b07      	ldr	r3, [pc, #28]	; (400668 <vPortSetupTimerInterrupt+0x2c>)
  40064a:	fba3 2302 	umull	r2, r3, r3, r2
  40064e:	099b      	lsrs	r3, r3, #6
  400650:	3b01      	subs	r3, #1
  400652:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400654:	4b05      	ldr	r3, [pc, #20]	; (40066c <vPortSetupTimerInterrupt+0x30>)
  400656:	2207      	movs	r2, #7
  400658:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
}
  40065a:	bf00      	nop
  40065c:	bd98      	pop	{r3, r4, r7, pc}
  40065e:	bf00      	nop
  400660:	e000e014 	.word	0xe000e014
  400664:	00400435 	.word	0x00400435
  400668:	10624dd3 	.word	0x10624dd3
  40066c:	e000e010 	.word	0xe000e010

00400670 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400670:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400680 <vPortEnableVFP+0x10>
  400674:	6801      	ldr	r1, [r0, #0]
  400676:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40067a:	6001      	str	r1, [r0, #0]
  40067c:	4770      	bx	lr
		"                            \n"
		" orr r1, r1, #( 0xf << 20 ) \n" /* Enable CP10 and CP11 coprocessors, then save back. */
		" str r1, [r0]               \n"
		" bx r14                     "
	);
}
  40067e:	bf00      	nop
  400680:	e000ed88 	.word	0xe000ed88

00400684 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  400684:	b580      	push	{r7, lr}
  400686:	b086      	sub	sp, #24
  400688:	af00      	add	r7, sp, #0
  40068a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  40068c:	2300      	movs	r3, #0
  40068e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  400690:	4b37      	ldr	r3, [pc, #220]	; (400770 <pvPortMalloc+0xec>)
  400692:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  400694:	4b37      	ldr	r3, [pc, #220]	; (400774 <pvPortMalloc+0xf0>)
  400696:	681b      	ldr	r3, [r3, #0]
  400698:	2b00      	cmp	r3, #0
  40069a:	d101      	bne.n	4006a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  40069c:	4b36      	ldr	r3, [pc, #216]	; (400778 <pvPortMalloc+0xf4>)
  40069e:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  4006a0:	687b      	ldr	r3, [r7, #4]
  4006a2:	2b00      	cmp	r3, #0
  4006a4:	d00e      	beq.n	4006c4 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  4006a6:	2310      	movs	r3, #16
  4006a8:	461a      	mov	r2, r3
  4006aa:	687b      	ldr	r3, [r7, #4]
  4006ac:	4413      	add	r3, r2
  4006ae:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4006b0:	687b      	ldr	r3, [r7, #4]
  4006b2:	f003 0307 	and.w	r3, r3, #7
  4006b6:	2b00      	cmp	r3, #0
  4006b8:	d004      	beq.n	4006c4 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4006ba:	687b      	ldr	r3, [r7, #4]
  4006bc:	f023 0307 	bic.w	r3, r3, #7
  4006c0:	3308      	adds	r3, #8
  4006c2:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4006c4:	687b      	ldr	r3, [r7, #4]
  4006c6:	2b00      	cmp	r3, #0
  4006c8:	d045      	beq.n	400756 <pvPortMalloc+0xd2>
  4006ca:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  4006ce:	687b      	ldr	r3, [r7, #4]
  4006d0:	4293      	cmp	r3, r2
  4006d2:	d240      	bcs.n	400756 <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  4006d4:	4b29      	ldr	r3, [pc, #164]	; (40077c <pvPortMalloc+0xf8>)
  4006d6:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  4006d8:	4b28      	ldr	r3, [pc, #160]	; (40077c <pvPortMalloc+0xf8>)
  4006da:	681b      	ldr	r3, [r3, #0]
  4006dc:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4006de:	e004      	b.n	4006ea <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  4006e0:	697b      	ldr	r3, [r7, #20]
  4006e2:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  4006e4:	697b      	ldr	r3, [r7, #20]
  4006e6:	681b      	ldr	r3, [r3, #0]
  4006e8:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4006ea:	697b      	ldr	r3, [r7, #20]
  4006ec:	685a      	ldr	r2, [r3, #4]
  4006ee:	687b      	ldr	r3, [r7, #4]
  4006f0:	429a      	cmp	r2, r3
  4006f2:	d203      	bcs.n	4006fc <pvPortMalloc+0x78>
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	2b00      	cmp	r3, #0
  4006fa:	d1f1      	bne.n	4006e0 <pvPortMalloc+0x5c>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  4006fc:	4b1d      	ldr	r3, [pc, #116]	; (400774 <pvPortMalloc+0xf0>)
  4006fe:	681b      	ldr	r3, [r3, #0]
  400700:	697a      	ldr	r2, [r7, #20]
  400702:	429a      	cmp	r2, r3
  400704:	d027      	beq.n	400756 <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  400706:	693b      	ldr	r3, [r7, #16]
  400708:	681b      	ldr	r3, [r3, #0]
  40070a:	2210      	movs	r2, #16
  40070c:	4413      	add	r3, r2
  40070e:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400710:	697b      	ldr	r3, [r7, #20]
  400712:	681a      	ldr	r2, [r3, #0]
  400714:	693b      	ldr	r3, [r7, #16]
  400716:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400718:	697b      	ldr	r3, [r7, #20]
  40071a:	685a      	ldr	r2, [r3, #4]
  40071c:	687b      	ldr	r3, [r7, #4]
  40071e:	1ad3      	subs	r3, r2, r3
  400720:	2210      	movs	r2, #16
  400722:	0052      	lsls	r2, r2, #1
  400724:	4293      	cmp	r3, r2
  400726:	d90f      	bls.n	400748 <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  400728:	697a      	ldr	r2, [r7, #20]
  40072a:	687b      	ldr	r3, [r7, #4]
  40072c:	4413      	add	r3, r2
  40072e:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400730:	697b      	ldr	r3, [r7, #20]
  400732:	685a      	ldr	r2, [r3, #4]
  400734:	687b      	ldr	r3, [r7, #4]
  400736:	1ad2      	subs	r2, r2, r3
  400738:	68bb      	ldr	r3, [r7, #8]
  40073a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  40073c:	697b      	ldr	r3, [r7, #20]
  40073e:	687a      	ldr	r2, [r7, #4]
  400740:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400742:	68b8      	ldr	r0, [r7, #8]
  400744:	4b0e      	ldr	r3, [pc, #56]	; (400780 <pvPortMalloc+0xfc>)
  400746:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  400748:	4b0e      	ldr	r3, [pc, #56]	; (400784 <pvPortMalloc+0x100>)
  40074a:	681a      	ldr	r2, [r3, #0]
  40074c:	697b      	ldr	r3, [r7, #20]
  40074e:	685b      	ldr	r3, [r3, #4]
  400750:	1ad3      	subs	r3, r2, r3
  400752:	4a0c      	ldr	r2, [pc, #48]	; (400784 <pvPortMalloc+0x100>)
  400754:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  400756:	4b0c      	ldr	r3, [pc, #48]	; (400788 <pvPortMalloc+0x104>)
  400758:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40075a:	68fb      	ldr	r3, [r7, #12]
  40075c:	2b00      	cmp	r3, #0
  40075e:	d101      	bne.n	400764 <pvPortMalloc+0xe0>
		{
			vApplicationMallocFailedHook();
  400760:	4b0a      	ldr	r3, [pc, #40]	; (40078c <pvPortMalloc+0x108>)
  400762:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  400764:	68fb      	ldr	r3, [r7, #12]
}
  400766:	4618      	mov	r0, r3
  400768:	3718      	adds	r7, #24
  40076a:	46bd      	mov	sp, r7
  40076c:	bd80      	pop	{r7, pc}
  40076e:	bf00      	nop
  400770:	00401399 	.word	0x00401399
  400774:	2040aa10 	.word	0x2040aa10
  400778:	004007e5 	.word	0x004007e5
  40077c:	2040aa08 	.word	0x2040aa08
  400780:	00400875 	.word	0x00400875
  400784:	20400004 	.word	0x20400004
  400788:	004013b5 	.word	0x004013b5
  40078c:	00402b6d 	.word	0x00402b6d

00400790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400790:	b580      	push	{r7, lr}
  400792:	b084      	sub	sp, #16
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  400798:	687b      	ldr	r3, [r7, #4]
  40079a:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  40079c:	687b      	ldr	r3, [r7, #4]
  40079e:	2b00      	cmp	r3, #0
  4007a0:	d014      	beq.n	4007cc <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  4007a2:	2310      	movs	r3, #16
  4007a4:	425b      	negs	r3, r3
  4007a6:	68fa      	ldr	r2, [r7, #12]
  4007a8:	4413      	add	r3, r2
  4007aa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  4007ac:	68fb      	ldr	r3, [r7, #12]
  4007ae:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  4007b0:	4b08      	ldr	r3, [pc, #32]	; (4007d4 <vPortFree+0x44>)
  4007b2:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  4007b4:	68bb      	ldr	r3, [r7, #8]
  4007b6:	685a      	ldr	r2, [r3, #4]
  4007b8:	4b07      	ldr	r3, [pc, #28]	; (4007d8 <vPortFree+0x48>)
  4007ba:	681b      	ldr	r3, [r3, #0]
  4007bc:	4413      	add	r3, r2
  4007be:	4a06      	ldr	r2, [pc, #24]	; (4007d8 <vPortFree+0x48>)
  4007c0:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  4007c2:	68b8      	ldr	r0, [r7, #8]
  4007c4:	4b05      	ldr	r3, [pc, #20]	; (4007dc <vPortFree+0x4c>)
  4007c6:	4798      	blx	r3
		}
		xTaskResumeAll();
  4007c8:	4b05      	ldr	r3, [pc, #20]	; (4007e0 <vPortFree+0x50>)
  4007ca:	4798      	blx	r3
	}
}
  4007cc:	bf00      	nop
  4007ce:	3710      	adds	r7, #16
  4007d0:	46bd      	mov	sp, r7
  4007d2:	bd80      	pop	{r7, pc}
  4007d4:	00401399 	.word	0x00401399
  4007d8:	20400004 	.word	0x20400004
  4007dc:	00400875 	.word	0x00400875
  4007e0:	004013b5 	.word	0x004013b5

004007e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  4007e4:	b580      	push	{r7, lr}
  4007e6:	b082      	sub	sp, #8
  4007e8:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  4007ea:	4b1d      	ldr	r3, [pc, #116]	; (400860 <prvHeapInit+0x7c>)
  4007ec:	4a1d      	ldr	r2, [pc, #116]	; (400864 <prvHeapInit+0x80>)
  4007ee:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  4007f0:	4b1b      	ldr	r3, [pc, #108]	; (400860 <prvHeapInit+0x7c>)
  4007f2:	2200      	movs	r2, #0
  4007f4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  4007f6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  4007fa:	4b1a      	ldr	r3, [pc, #104]	; (400864 <prvHeapInit+0x80>)
  4007fc:	4413      	add	r3, r2
  4007fe:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  400800:	2310      	movs	r3, #16
  400802:	425b      	negs	r3, r3
  400804:	687a      	ldr	r2, [r7, #4]
  400806:	4413      	add	r3, r2
  400808:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  40080a:	4a17      	ldr	r2, [pc, #92]	; (400868 <prvHeapInit+0x84>)
  40080c:	687b      	ldr	r3, [r7, #4]
  40080e:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  400810:	4b15      	ldr	r3, [pc, #84]	; (400868 <prvHeapInit+0x84>)
  400812:	681b      	ldr	r3, [r3, #0]
  400814:	f003 0307 	and.w	r3, r3, #7
  400818:	2b00      	cmp	r3, #0
  40081a:	d003      	beq.n	400824 <prvHeapInit+0x40>
  40081c:	4b13      	ldr	r3, [pc, #76]	; (40086c <prvHeapInit+0x88>)
  40081e:	4798      	blx	r3
  400820:	bf00      	nop
  400822:	e7fd      	b.n	400820 <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  400824:	4b10      	ldr	r3, [pc, #64]	; (400868 <prvHeapInit+0x84>)
  400826:	681b      	ldr	r3, [r3, #0]
  400828:	2200      	movs	r2, #0
  40082a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  40082c:	4b0e      	ldr	r3, [pc, #56]	; (400868 <prvHeapInit+0x84>)
  40082e:	681b      	ldr	r3, [r3, #0]
  400830:	2200      	movs	r2, #0
  400832:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  400834:	4b0b      	ldr	r3, [pc, #44]	; (400864 <prvHeapInit+0x80>)
  400836:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  400838:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  40083c:	2210      	movs	r2, #16
  40083e:	1a9a      	subs	r2, r3, r2
  400840:	683b      	ldr	r3, [r7, #0]
  400842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  400844:	4b08      	ldr	r3, [pc, #32]	; (400868 <prvHeapInit+0x84>)
  400846:	681a      	ldr	r2, [r3, #0]
  400848:	683b      	ldr	r3, [r7, #0]
  40084a:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  40084c:	4b08      	ldr	r3, [pc, #32]	; (400870 <prvHeapInit+0x8c>)
  40084e:	681b      	ldr	r3, [r3, #0]
  400850:	2210      	movs	r2, #16
  400852:	1a9b      	subs	r3, r3, r2
  400854:	4a06      	ldr	r2, [pc, #24]	; (400870 <prvHeapInit+0x8c>)
  400856:	6013      	str	r3, [r2, #0]
}
  400858:	bf00      	nop
  40085a:	3708      	adds	r7, #8
  40085c:	46bd      	mov	sp, r7
  40085e:	bd80      	pop	{r7, pc}
  400860:	2040aa08 	.word	0x2040aa08
  400864:	20400a08 	.word	0x20400a08
  400868:	2040aa10 	.word	0x2040aa10
  40086c:	0040059d 	.word	0x0040059d
  400870:	20400004 	.word	0x20400004

00400874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400874:	b480      	push	{r7}
  400876:	b085      	sub	sp, #20
  400878:	af00      	add	r7, sp, #0
  40087a:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40087c:	4b28      	ldr	r3, [pc, #160]	; (400920 <prvInsertBlockIntoFreeList+0xac>)
  40087e:	60fb      	str	r3, [r7, #12]
  400880:	e002      	b.n	400888 <prvInsertBlockIntoFreeList+0x14>
  400882:	68fb      	ldr	r3, [r7, #12]
  400884:	681b      	ldr	r3, [r3, #0]
  400886:	60fb      	str	r3, [r7, #12]
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	681a      	ldr	r2, [r3, #0]
  40088c:	687b      	ldr	r3, [r7, #4]
  40088e:	429a      	cmp	r2, r3
  400890:	d3f7      	bcc.n	400882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  400892:	68fb      	ldr	r3, [r7, #12]
  400894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  400896:	68fb      	ldr	r3, [r7, #12]
  400898:	685b      	ldr	r3, [r3, #4]
  40089a:	68ba      	ldr	r2, [r7, #8]
  40089c:	441a      	add	r2, r3
  40089e:	687b      	ldr	r3, [r7, #4]
  4008a0:	429a      	cmp	r2, r3
  4008a2:	d108      	bne.n	4008b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4008a4:	68fb      	ldr	r3, [r7, #12]
  4008a6:	685a      	ldr	r2, [r3, #4]
  4008a8:	687b      	ldr	r3, [r7, #4]
  4008aa:	685b      	ldr	r3, [r3, #4]
  4008ac:	441a      	add	r2, r3
  4008ae:	68fb      	ldr	r3, [r7, #12]
  4008b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  4008b2:	68fb      	ldr	r3, [r7, #12]
  4008b4:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  4008b6:	687b      	ldr	r3, [r7, #4]
  4008b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  4008ba:	687b      	ldr	r3, [r7, #4]
  4008bc:	685b      	ldr	r3, [r3, #4]
  4008be:	68ba      	ldr	r2, [r7, #8]
  4008c0:	441a      	add	r2, r3
  4008c2:	68fb      	ldr	r3, [r7, #12]
  4008c4:	681b      	ldr	r3, [r3, #0]
  4008c6:	429a      	cmp	r2, r3
  4008c8:	d118      	bne.n	4008fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4008ca:	68fb      	ldr	r3, [r7, #12]
  4008cc:	681a      	ldr	r2, [r3, #0]
  4008ce:	4b15      	ldr	r3, [pc, #84]	; (400924 <prvInsertBlockIntoFreeList+0xb0>)
  4008d0:	681b      	ldr	r3, [r3, #0]
  4008d2:	429a      	cmp	r2, r3
  4008d4:	d00d      	beq.n	4008f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4008d6:	687b      	ldr	r3, [r7, #4]
  4008d8:	685a      	ldr	r2, [r3, #4]
  4008da:	68fb      	ldr	r3, [r7, #12]
  4008dc:	681b      	ldr	r3, [r3, #0]
  4008de:	685b      	ldr	r3, [r3, #4]
  4008e0:	441a      	add	r2, r3
  4008e2:	687b      	ldr	r3, [r7, #4]
  4008e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4008e6:	68fb      	ldr	r3, [r7, #12]
  4008e8:	681b      	ldr	r3, [r3, #0]
  4008ea:	681a      	ldr	r2, [r3, #0]
  4008ec:	687b      	ldr	r3, [r7, #4]
  4008ee:	601a      	str	r2, [r3, #0]
  4008f0:	e008      	b.n	400904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4008f2:	4b0c      	ldr	r3, [pc, #48]	; (400924 <prvInsertBlockIntoFreeList+0xb0>)
  4008f4:	681a      	ldr	r2, [r3, #0]
  4008f6:	687b      	ldr	r3, [r7, #4]
  4008f8:	601a      	str	r2, [r3, #0]
  4008fa:	e003      	b.n	400904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  4008fc:	68fb      	ldr	r3, [r7, #12]
  4008fe:	681a      	ldr	r2, [r3, #0]
  400900:	687b      	ldr	r3, [r7, #4]
  400902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  400904:	68fa      	ldr	r2, [r7, #12]
  400906:	687b      	ldr	r3, [r7, #4]
  400908:	429a      	cmp	r2, r3
  40090a:	d002      	beq.n	400912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  40090c:	68fb      	ldr	r3, [r7, #12]
  40090e:	687a      	ldr	r2, [r7, #4]
  400910:	601a      	str	r2, [r3, #0]
	}
}
  400912:	bf00      	nop
  400914:	3714      	adds	r7, #20
  400916:	46bd      	mov	sp, r7
  400918:	f85d 7b04 	ldr.w	r7, [sp], #4
  40091c:	4770      	bx	lr
  40091e:	bf00      	nop
  400920:	2040aa08 	.word	0x2040aa08
  400924:	2040aa10 	.word	0x2040aa10

00400928 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  400928:	b580      	push	{r7, lr}
  40092a:	b082      	sub	sp, #8
  40092c:	af00      	add	r7, sp, #0
  40092e:	6078      	str	r0, [r7, #4]
  400930:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  400932:	687b      	ldr	r3, [r7, #4]
  400934:	2b00      	cmp	r3, #0
  400936:	d103      	bne.n	400940 <xQueueGenericReset+0x18>
  400938:	4b27      	ldr	r3, [pc, #156]	; (4009d8 <xQueueGenericReset+0xb0>)
  40093a:	4798      	blx	r3
  40093c:	bf00      	nop
  40093e:	e7fd      	b.n	40093c <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  400940:	4b26      	ldr	r3, [pc, #152]	; (4009dc <xQueueGenericReset+0xb4>)
  400942:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400944:	687b      	ldr	r3, [r7, #4]
  400946:	681a      	ldr	r2, [r3, #0]
  400948:	687b      	ldr	r3, [r7, #4]
  40094a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40094c:	6879      	ldr	r1, [r7, #4]
  40094e:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400950:	fb01 f303 	mul.w	r3, r1, r3
  400954:	441a      	add	r2, r3
  400956:	687b      	ldr	r3, [r7, #4]
  400958:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  40095a:	687b      	ldr	r3, [r7, #4]
  40095c:	2200      	movs	r2, #0
  40095e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400960:	687b      	ldr	r3, [r7, #4]
  400962:	681a      	ldr	r2, [r3, #0]
  400964:	687b      	ldr	r3, [r7, #4]
  400966:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  400968:	687b      	ldr	r3, [r7, #4]
  40096a:	681a      	ldr	r2, [r3, #0]
  40096c:	687b      	ldr	r3, [r7, #4]
  40096e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400970:	3b01      	subs	r3, #1
  400972:	6879      	ldr	r1, [r7, #4]
  400974:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400976:	fb01 f303 	mul.w	r3, r1, r3
  40097a:	441a      	add	r2, r3
  40097c:	687b      	ldr	r3, [r7, #4]
  40097e:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400980:	687b      	ldr	r3, [r7, #4]
  400982:	f04f 32ff 	mov.w	r2, #4294967295
  400986:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400988:	687b      	ldr	r3, [r7, #4]
  40098a:	f04f 32ff 	mov.w	r2, #4294967295
  40098e:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  400990:	683b      	ldr	r3, [r7, #0]
  400992:	2b00      	cmp	r3, #0
  400994:	d10e      	bne.n	4009b4 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400996:	687b      	ldr	r3, [r7, #4]
  400998:	691b      	ldr	r3, [r3, #16]
  40099a:	2b00      	cmp	r3, #0
  40099c:	d014      	beq.n	4009c8 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40099e:	687b      	ldr	r3, [r7, #4]
  4009a0:	3310      	adds	r3, #16
  4009a2:	4618      	mov	r0, r3
  4009a4:	4b0e      	ldr	r3, [pc, #56]	; (4009e0 <xQueueGenericReset+0xb8>)
  4009a6:	4798      	blx	r3
  4009a8:	4603      	mov	r3, r0
  4009aa:	2b01      	cmp	r3, #1
  4009ac:	d10c      	bne.n	4009c8 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  4009ae:	4b0d      	ldr	r3, [pc, #52]	; (4009e4 <xQueueGenericReset+0xbc>)
  4009b0:	4798      	blx	r3
  4009b2:	e009      	b.n	4009c8 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4009b4:	687b      	ldr	r3, [r7, #4]
  4009b6:	3310      	adds	r3, #16
  4009b8:	4618      	mov	r0, r3
  4009ba:	4b0b      	ldr	r3, [pc, #44]	; (4009e8 <xQueueGenericReset+0xc0>)
  4009bc:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4009be:	687b      	ldr	r3, [r7, #4]
  4009c0:	3324      	adds	r3, #36	; 0x24
  4009c2:	4618      	mov	r0, r3
  4009c4:	4b08      	ldr	r3, [pc, #32]	; (4009e8 <xQueueGenericReset+0xc0>)
  4009c6:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  4009c8:	4b08      	ldr	r3, [pc, #32]	; (4009ec <xQueueGenericReset+0xc4>)
  4009ca:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  4009cc:	2301      	movs	r3, #1
}
  4009ce:	4618      	mov	r0, r3
  4009d0:	3708      	adds	r7, #8
  4009d2:	46bd      	mov	sp, r7
  4009d4:	bd80      	pop	{r7, pc}
  4009d6:	bf00      	nop
  4009d8:	0040059d 	.word	0x0040059d
  4009dc:	00400555 	.word	0x00400555
  4009e0:	004017d9 	.word	0x004017d9
  4009e4:	00400539 	.word	0x00400539
  4009e8:	00400231 	.word	0x00400231
  4009ec:	00400575 	.word	0x00400575

004009f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  4009f0:	b580      	push	{r7, lr}
  4009f2:	b088      	sub	sp, #32
  4009f4:	af00      	add	r7, sp, #0
  4009f6:	60f8      	str	r0, [r7, #12]
  4009f8:	60b9      	str	r1, [r7, #8]
  4009fa:	4613      	mov	r3, r2
  4009fc:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  4009fe:	2300      	movs	r3, #0
  400a00:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  400a02:	68fb      	ldr	r3, [r7, #12]
  400a04:	2b00      	cmp	r3, #0
  400a06:	d02a      	beq.n	400a5e <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  400a08:	2050      	movs	r0, #80	; 0x50
  400a0a:	4b1b      	ldr	r3, [pc, #108]	; (400a78 <xQueueGenericCreate+0x88>)
  400a0c:	4798      	blx	r3
  400a0e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  400a10:	69bb      	ldr	r3, [r7, #24]
  400a12:	2b00      	cmp	r3, #0
  400a14:	d023      	beq.n	400a5e <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	68ba      	ldr	r2, [r7, #8]
  400a1a:	fb02 f303 	mul.w	r3, r2, r3
  400a1e:	3301      	adds	r3, #1
  400a20:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  400a22:	6978      	ldr	r0, [r7, #20]
  400a24:	4b14      	ldr	r3, [pc, #80]	; (400a78 <xQueueGenericCreate+0x88>)
  400a26:	4798      	blx	r3
  400a28:	4602      	mov	r2, r0
  400a2a:	69bb      	ldr	r3, [r7, #24]
  400a2c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  400a2e:	69bb      	ldr	r3, [r7, #24]
  400a30:	681b      	ldr	r3, [r3, #0]
  400a32:	2b00      	cmp	r3, #0
  400a34:	d010      	beq.n	400a58 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  400a36:	69bb      	ldr	r3, [r7, #24]
  400a38:	68fa      	ldr	r2, [r7, #12]
  400a3a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  400a3c:	69bb      	ldr	r3, [r7, #24]
  400a3e:	68ba      	ldr	r2, [r7, #8]
  400a40:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  400a42:	2101      	movs	r1, #1
  400a44:	69b8      	ldr	r0, [r7, #24]
  400a46:	4b0d      	ldr	r3, [pc, #52]	; (400a7c <xQueueGenericCreate+0x8c>)
  400a48:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  400a4a:	69bb      	ldr	r3, [r7, #24]
  400a4c:	79fa      	ldrb	r2, [r7, #7]
  400a4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  400a52:	69bb      	ldr	r3, [r7, #24]
  400a54:	61fb      	str	r3, [r7, #28]
  400a56:	e002      	b.n	400a5e <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  400a58:	69b8      	ldr	r0, [r7, #24]
  400a5a:	4b09      	ldr	r3, [pc, #36]	; (400a80 <xQueueGenericCreate+0x90>)
  400a5c:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  400a5e:	69fb      	ldr	r3, [r7, #28]
  400a60:	2b00      	cmp	r3, #0
  400a62:	d103      	bne.n	400a6c <xQueueGenericCreate+0x7c>
  400a64:	4b07      	ldr	r3, [pc, #28]	; (400a84 <xQueueGenericCreate+0x94>)
  400a66:	4798      	blx	r3
  400a68:	bf00      	nop
  400a6a:	e7fd      	b.n	400a68 <xQueueGenericCreate+0x78>

	return xReturn;
  400a6c:	69fb      	ldr	r3, [r7, #28]
}
  400a6e:	4618      	mov	r0, r3
  400a70:	3720      	adds	r7, #32
  400a72:	46bd      	mov	sp, r7
  400a74:	bd80      	pop	{r7, pc}
  400a76:	bf00      	nop
  400a78:	00400685 	.word	0x00400685
  400a7c:	00400929 	.word	0x00400929
  400a80:	00400791 	.word	0x00400791
  400a84:	0040059d 	.word	0x0040059d

00400a88 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  400a88:	b580      	push	{r7, lr}
  400a8a:	b088      	sub	sp, #32
  400a8c:	af00      	add	r7, sp, #0
  400a8e:	60f8      	str	r0, [r7, #12]
  400a90:	60b9      	str	r1, [r7, #8]
  400a92:	607a      	str	r2, [r7, #4]
  400a94:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400a96:	2300      	movs	r3, #0
  400a98:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  400a9a:	68fb      	ldr	r3, [r7, #12]
  400a9c:	2b00      	cmp	r3, #0
  400a9e:	d103      	bne.n	400aa8 <xQueueGenericSend+0x20>
  400aa0:	4b46      	ldr	r3, [pc, #280]	; (400bbc <xQueueGenericSend+0x134>)
  400aa2:	4798      	blx	r3
  400aa4:	bf00      	nop
  400aa6:	e7fd      	b.n	400aa4 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400aa8:	68bb      	ldr	r3, [r7, #8]
  400aaa:	2b00      	cmp	r3, #0
  400aac:	d103      	bne.n	400ab6 <xQueueGenericSend+0x2e>
  400aae:	68fb      	ldr	r3, [r7, #12]
  400ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ab2:	2b00      	cmp	r3, #0
  400ab4:	d101      	bne.n	400aba <xQueueGenericSend+0x32>
  400ab6:	2301      	movs	r3, #1
  400ab8:	e000      	b.n	400abc <xQueueGenericSend+0x34>
  400aba:	2300      	movs	r3, #0
  400abc:	2b00      	cmp	r3, #0
  400abe:	d103      	bne.n	400ac8 <xQueueGenericSend+0x40>
  400ac0:	4b3e      	ldr	r3, [pc, #248]	; (400bbc <xQueueGenericSend+0x134>)
  400ac2:	4798      	blx	r3
  400ac4:	bf00      	nop
  400ac6:	e7fd      	b.n	400ac4 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400ac8:	4b3d      	ldr	r3, [pc, #244]	; (400bc0 <xQueueGenericSend+0x138>)
  400aca:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400acc:	68fb      	ldr	r3, [r7, #12]
  400ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400ad0:	68fb      	ldr	r3, [r7, #12]
  400ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400ad4:	429a      	cmp	r2, r3
  400ad6:	d216      	bcs.n	400b06 <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400ad8:	683a      	ldr	r2, [r7, #0]
  400ada:	68b9      	ldr	r1, [r7, #8]
  400adc:	68f8      	ldr	r0, [r7, #12]
  400ade:	4b39      	ldr	r3, [pc, #228]	; (400bc4 <xQueueGenericSend+0x13c>)
  400ae0:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ae2:	68fb      	ldr	r3, [r7, #12]
  400ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400ae6:	2b00      	cmp	r3, #0
  400ae8:	d009      	beq.n	400afe <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400aea:	68fb      	ldr	r3, [r7, #12]
  400aec:	3324      	adds	r3, #36	; 0x24
  400aee:	4618      	mov	r0, r3
  400af0:	4b35      	ldr	r3, [pc, #212]	; (400bc8 <xQueueGenericSend+0x140>)
  400af2:	4798      	blx	r3
  400af4:	4603      	mov	r3, r0
  400af6:	2b01      	cmp	r3, #1
  400af8:	d101      	bne.n	400afe <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  400afa:	4b34      	ldr	r3, [pc, #208]	; (400bcc <xQueueGenericSend+0x144>)
  400afc:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  400afe:	4b34      	ldr	r3, [pc, #208]	; (400bd0 <xQueueGenericSend+0x148>)
  400b00:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  400b02:	2301      	movs	r3, #1
  400b04:	e056      	b.n	400bb4 <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400b06:	687b      	ldr	r3, [r7, #4]
  400b08:	2b00      	cmp	r3, #0
  400b0a:	d103      	bne.n	400b14 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400b0c:	4b30      	ldr	r3, [pc, #192]	; (400bd0 <xQueueGenericSend+0x148>)
  400b0e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400b10:	2300      	movs	r3, #0
  400b12:	e04f      	b.n	400bb4 <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  400b14:	69fb      	ldr	r3, [r7, #28]
  400b16:	2b00      	cmp	r3, #0
  400b18:	d106      	bne.n	400b28 <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400b1a:	f107 0314 	add.w	r3, r7, #20
  400b1e:	4618      	mov	r0, r3
  400b20:	4b2c      	ldr	r3, [pc, #176]	; (400bd4 <xQueueGenericSend+0x14c>)
  400b22:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400b24:	2301      	movs	r3, #1
  400b26:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400b28:	4b29      	ldr	r3, [pc, #164]	; (400bd0 <xQueueGenericSend+0x148>)
  400b2a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400b2c:	4b2a      	ldr	r3, [pc, #168]	; (400bd8 <xQueueGenericSend+0x150>)
  400b2e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400b30:	4b23      	ldr	r3, [pc, #140]	; (400bc0 <xQueueGenericSend+0x138>)
  400b32:	4798      	blx	r3
  400b34:	68fb      	ldr	r3, [r7, #12]
  400b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400b38:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b3c:	d102      	bne.n	400b44 <xQueueGenericSend+0xbc>
  400b3e:	68fb      	ldr	r3, [r7, #12]
  400b40:	2200      	movs	r2, #0
  400b42:	645a      	str	r2, [r3, #68]	; 0x44
  400b44:	68fb      	ldr	r3, [r7, #12]
  400b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400b48:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b4c:	d102      	bne.n	400b54 <xQueueGenericSend+0xcc>
  400b4e:	68fb      	ldr	r3, [r7, #12]
  400b50:	2200      	movs	r2, #0
  400b52:	649a      	str	r2, [r3, #72]	; 0x48
  400b54:	4b1e      	ldr	r3, [pc, #120]	; (400bd0 <xQueueGenericSend+0x148>)
  400b56:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400b58:	1d3a      	adds	r2, r7, #4
  400b5a:	f107 0314 	add.w	r3, r7, #20
  400b5e:	4611      	mov	r1, r2
  400b60:	4618      	mov	r0, r3
  400b62:	4b1e      	ldr	r3, [pc, #120]	; (400bdc <xQueueGenericSend+0x154>)
  400b64:	4798      	blx	r3
  400b66:	4603      	mov	r3, r0
  400b68:	2b00      	cmp	r3, #0
  400b6a:	d11d      	bne.n	400ba8 <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400b6c:	68f8      	ldr	r0, [r7, #12]
  400b6e:	4b1c      	ldr	r3, [pc, #112]	; (400be0 <xQueueGenericSend+0x158>)
  400b70:	4798      	blx	r3
  400b72:	4603      	mov	r3, r0
  400b74:	2b00      	cmp	r3, #0
  400b76:	d011      	beq.n	400b9c <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400b78:	68fb      	ldr	r3, [r7, #12]
  400b7a:	3310      	adds	r3, #16
  400b7c:	687a      	ldr	r2, [r7, #4]
  400b7e:	4611      	mov	r1, r2
  400b80:	4618      	mov	r0, r3
  400b82:	4b18      	ldr	r3, [pc, #96]	; (400be4 <xQueueGenericSend+0x15c>)
  400b84:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400b86:	68f8      	ldr	r0, [r7, #12]
  400b88:	4b17      	ldr	r3, [pc, #92]	; (400be8 <xQueueGenericSend+0x160>)
  400b8a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400b8c:	4b17      	ldr	r3, [pc, #92]	; (400bec <xQueueGenericSend+0x164>)
  400b8e:	4798      	blx	r3
  400b90:	4603      	mov	r3, r0
  400b92:	2b00      	cmp	r3, #0
  400b94:	d198      	bne.n	400ac8 <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  400b96:	4b0d      	ldr	r3, [pc, #52]	; (400bcc <xQueueGenericSend+0x144>)
  400b98:	4798      	blx	r3
  400b9a:	e795      	b.n	400ac8 <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400b9c:	68f8      	ldr	r0, [r7, #12]
  400b9e:	4b12      	ldr	r3, [pc, #72]	; (400be8 <xQueueGenericSend+0x160>)
  400ba0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400ba2:	4b12      	ldr	r3, [pc, #72]	; (400bec <xQueueGenericSend+0x164>)
  400ba4:	4798      	blx	r3
  400ba6:	e78f      	b.n	400ac8 <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400ba8:	68f8      	ldr	r0, [r7, #12]
  400baa:	4b0f      	ldr	r3, [pc, #60]	; (400be8 <xQueueGenericSend+0x160>)
  400bac:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400bae:	4b0f      	ldr	r3, [pc, #60]	; (400bec <xQueueGenericSend+0x164>)
  400bb0:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400bb2:	2300      	movs	r3, #0
		}
	}
}
  400bb4:	4618      	mov	r0, r3
  400bb6:	3720      	adds	r7, #32
  400bb8:	46bd      	mov	sp, r7
  400bba:	bd80      	pop	{r7, pc}
  400bbc:	0040059d 	.word	0x0040059d
  400bc0:	00400555 	.word	0x00400555
  400bc4:	00400e81 	.word	0x00400e81
  400bc8:	004017d9 	.word	0x004017d9
  400bcc:	00400539 	.word	0x00400539
  400bd0:	00400575 	.word	0x00400575
  400bd4:	00401895 	.word	0x00401895
  400bd8:	00401399 	.word	0x00401399
  400bdc:	004018d1 	.word	0x004018d1
  400be0:	0040106d 	.word	0x0040106d
  400be4:	004016f1 	.word	0x004016f1
  400be8:	00400f91 	.word	0x00400f91
  400bec:	004013b5 	.word	0x004013b5

00400bf0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  400bf0:	b580      	push	{r7, lr}
  400bf2:	b086      	sub	sp, #24
  400bf4:	af00      	add	r7, sp, #0
  400bf6:	60f8      	str	r0, [r7, #12]
  400bf8:	60b9      	str	r1, [r7, #8]
  400bfa:	607a      	str	r2, [r7, #4]
  400bfc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  400bfe:	68fb      	ldr	r3, [r7, #12]
  400c00:	2b00      	cmp	r3, #0
  400c02:	d103      	bne.n	400c0c <xQueueGenericSendFromISR+0x1c>
  400c04:	4b25      	ldr	r3, [pc, #148]	; (400c9c <xQueueGenericSendFromISR+0xac>)
  400c06:	4798      	blx	r3
  400c08:	bf00      	nop
  400c0a:	e7fd      	b.n	400c08 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400c0c:	68bb      	ldr	r3, [r7, #8]
  400c0e:	2b00      	cmp	r3, #0
  400c10:	d103      	bne.n	400c1a <xQueueGenericSendFromISR+0x2a>
  400c12:	68fb      	ldr	r3, [r7, #12]
  400c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400c16:	2b00      	cmp	r3, #0
  400c18:	d101      	bne.n	400c1e <xQueueGenericSendFromISR+0x2e>
  400c1a:	2301      	movs	r3, #1
  400c1c:	e000      	b.n	400c20 <xQueueGenericSendFromISR+0x30>
  400c1e:	2300      	movs	r3, #0
  400c20:	2b00      	cmp	r3, #0
  400c22:	d103      	bne.n	400c2c <xQueueGenericSendFromISR+0x3c>
  400c24:	4b1d      	ldr	r3, [pc, #116]	; (400c9c <xQueueGenericSendFromISR+0xac>)
  400c26:	4798      	blx	r3
  400c28:	bf00      	nop
  400c2a:	e7fd      	b.n	400c28 <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  400c2c:	4b1b      	ldr	r3, [pc, #108]	; (400c9c <xQueueGenericSendFromISR+0xac>)
  400c2e:	4798      	blx	r3
  400c30:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400c32:	68fb      	ldr	r3, [r7, #12]
  400c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400c36:	68fb      	ldr	r3, [r7, #12]
  400c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400c3a:	429a      	cmp	r2, r3
  400c3c:	d224      	bcs.n	400c88 <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400c3e:	683a      	ldr	r2, [r7, #0]
  400c40:	68b9      	ldr	r1, [r7, #8]
  400c42:	68f8      	ldr	r0, [r7, #12]
  400c44:	4b16      	ldr	r3, [pc, #88]	; (400ca0 <xQueueGenericSendFromISR+0xb0>)
  400c46:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400c48:	68fb      	ldr	r3, [r7, #12]
  400c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c50:	d112      	bne.n	400c78 <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c52:	68fb      	ldr	r3, [r7, #12]
  400c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400c56:	2b00      	cmp	r3, #0
  400c58:	d013      	beq.n	400c82 <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c5a:	68fb      	ldr	r3, [r7, #12]
  400c5c:	3324      	adds	r3, #36	; 0x24
  400c5e:	4618      	mov	r0, r3
  400c60:	4b10      	ldr	r3, [pc, #64]	; (400ca4 <xQueueGenericSendFromISR+0xb4>)
  400c62:	4798      	blx	r3
  400c64:	4603      	mov	r3, r0
  400c66:	2b00      	cmp	r3, #0
  400c68:	d00b      	beq.n	400c82 <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  400c6a:	687b      	ldr	r3, [r7, #4]
  400c6c:	2b00      	cmp	r3, #0
  400c6e:	d008      	beq.n	400c82 <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  400c70:	687b      	ldr	r3, [r7, #4]
  400c72:	2201      	movs	r2, #1
  400c74:	601a      	str	r2, [r3, #0]
  400c76:	e004      	b.n	400c82 <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400c78:	68fb      	ldr	r3, [r7, #12]
  400c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400c7c:	1c5a      	adds	r2, r3, #1
  400c7e:	68fb      	ldr	r3, [r7, #12]
  400c80:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  400c82:	2301      	movs	r3, #1
  400c84:	617b      	str	r3, [r7, #20]
  400c86:	e001      	b.n	400c8c <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400c88:	2300      	movs	r3, #0
  400c8a:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  400c8c:	6938      	ldr	r0, [r7, #16]
  400c8e:	4b06      	ldr	r3, [pc, #24]	; (400ca8 <xQueueGenericSendFromISR+0xb8>)
  400c90:	4798      	blx	r3

	return xReturn;
  400c92:	697b      	ldr	r3, [r7, #20]
}
  400c94:	4618      	mov	r0, r3
  400c96:	3718      	adds	r7, #24
  400c98:	46bd      	mov	sp, r7
  400c9a:	bd80      	pop	{r7, pc}
  400c9c:	0040059d 	.word	0x0040059d
  400ca0:	00400e81 	.word	0x00400e81
  400ca4:	004017d9 	.word	0x004017d9
  400ca8:	004005af 	.word	0x004005af

00400cac <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  400cac:	b580      	push	{r7, lr}
  400cae:	b088      	sub	sp, #32
  400cb0:	af00      	add	r7, sp, #0
  400cb2:	60f8      	str	r0, [r7, #12]
  400cb4:	60b9      	str	r1, [r7, #8]
  400cb6:	607a      	str	r2, [r7, #4]
  400cb8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400cba:	2300      	movs	r3, #0
  400cbc:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  400cbe:	68fb      	ldr	r3, [r7, #12]
  400cc0:	2b00      	cmp	r3, #0
  400cc2:	d103      	bne.n	400ccc <xQueueGenericReceive+0x20>
  400cc4:	4b5f      	ldr	r3, [pc, #380]	; (400e44 <xQueueGenericReceive+0x198>)
  400cc6:	4798      	blx	r3
  400cc8:	bf00      	nop
  400cca:	e7fd      	b.n	400cc8 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400ccc:	68bb      	ldr	r3, [r7, #8]
  400cce:	2b00      	cmp	r3, #0
  400cd0:	d103      	bne.n	400cda <xQueueGenericReceive+0x2e>
  400cd2:	68fb      	ldr	r3, [r7, #12]
  400cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400cd6:	2b00      	cmp	r3, #0
  400cd8:	d101      	bne.n	400cde <xQueueGenericReceive+0x32>
  400cda:	2301      	movs	r3, #1
  400cdc:	e000      	b.n	400ce0 <xQueueGenericReceive+0x34>
  400cde:	2300      	movs	r3, #0
  400ce0:	2b00      	cmp	r3, #0
  400ce2:	d103      	bne.n	400cec <xQueueGenericReceive+0x40>
  400ce4:	4b57      	ldr	r3, [pc, #348]	; (400e44 <xQueueGenericReceive+0x198>)
  400ce6:	4798      	blx	r3
  400ce8:	bf00      	nop
  400cea:	e7fd      	b.n	400ce8 <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  400cec:	4b56      	ldr	r3, [pc, #344]	; (400e48 <xQueueGenericReceive+0x19c>)
  400cee:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  400cf0:	68fb      	ldr	r3, [r7, #12]
  400cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400cf4:	2b00      	cmp	r3, #0
  400cf6:	d03b      	beq.n	400d70 <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  400cf8:	68fb      	ldr	r3, [r7, #12]
  400cfa:	68db      	ldr	r3, [r3, #12]
  400cfc:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400cfe:	68b9      	ldr	r1, [r7, #8]
  400d00:	68f8      	ldr	r0, [r7, #12]
  400d02:	4b52      	ldr	r3, [pc, #328]	; (400e4c <xQueueGenericReceive+0x1a0>)
  400d04:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  400d06:	683b      	ldr	r3, [r7, #0]
  400d08:	2b00      	cmp	r3, #0
  400d0a:	d11c      	bne.n	400d46 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  400d0c:	68fb      	ldr	r3, [r7, #12]
  400d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400d10:	1e5a      	subs	r2, r3, #1
  400d12:	68fb      	ldr	r3, [r7, #12]
  400d14:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400d16:	68fb      	ldr	r3, [r7, #12]
  400d18:	681b      	ldr	r3, [r3, #0]
  400d1a:	2b00      	cmp	r3, #0
  400d1c:	d104      	bne.n	400d28 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  400d1e:	4b4c      	ldr	r3, [pc, #304]	; (400e50 <xQueueGenericReceive+0x1a4>)
  400d20:	4798      	blx	r3
  400d22:	4602      	mov	r2, r0
  400d24:	68fb      	ldr	r3, [r7, #12]
  400d26:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d28:	68fb      	ldr	r3, [r7, #12]
  400d2a:	691b      	ldr	r3, [r3, #16]
  400d2c:	2b00      	cmp	r3, #0
  400d2e:	d01b      	beq.n	400d68 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400d30:	68fb      	ldr	r3, [r7, #12]
  400d32:	3310      	adds	r3, #16
  400d34:	4618      	mov	r0, r3
  400d36:	4b47      	ldr	r3, [pc, #284]	; (400e54 <xQueueGenericReceive+0x1a8>)
  400d38:	4798      	blx	r3
  400d3a:	4603      	mov	r3, r0
  400d3c:	2b01      	cmp	r3, #1
  400d3e:	d113      	bne.n	400d68 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  400d40:	4b45      	ldr	r3, [pc, #276]	; (400e58 <xQueueGenericReceive+0x1ac>)
  400d42:	4798      	blx	r3
  400d44:	e010      	b.n	400d68 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  400d46:	68fb      	ldr	r3, [r7, #12]
  400d48:	69ba      	ldr	r2, [r7, #24]
  400d4a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400d4c:	68fb      	ldr	r3, [r7, #12]
  400d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400d50:	2b00      	cmp	r3, #0
  400d52:	d009      	beq.n	400d68 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400d54:	68fb      	ldr	r3, [r7, #12]
  400d56:	3324      	adds	r3, #36	; 0x24
  400d58:	4618      	mov	r0, r3
  400d5a:	4b3e      	ldr	r3, [pc, #248]	; (400e54 <xQueueGenericReceive+0x1a8>)
  400d5c:	4798      	blx	r3
  400d5e:	4603      	mov	r3, r0
  400d60:	2b00      	cmp	r3, #0
  400d62:	d001      	beq.n	400d68 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  400d64:	4b3c      	ldr	r3, [pc, #240]	; (400e58 <xQueueGenericReceive+0x1ac>)
  400d66:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  400d68:	4b3c      	ldr	r3, [pc, #240]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400d6a:	4798      	blx	r3
				return pdPASS;
  400d6c:	2301      	movs	r3, #1
  400d6e:	e064      	b.n	400e3a <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400d70:	687b      	ldr	r3, [r7, #4]
  400d72:	2b00      	cmp	r3, #0
  400d74:	d103      	bne.n	400d7e <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400d76:	4b39      	ldr	r3, [pc, #228]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400d78:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  400d7a:	2300      	movs	r3, #0
  400d7c:	e05d      	b.n	400e3a <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  400d7e:	69fb      	ldr	r3, [r7, #28]
  400d80:	2b00      	cmp	r3, #0
  400d82:	d106      	bne.n	400d92 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400d84:	f107 0310 	add.w	r3, r7, #16
  400d88:	4618      	mov	r0, r3
  400d8a:	4b35      	ldr	r3, [pc, #212]	; (400e60 <xQueueGenericReceive+0x1b4>)
  400d8c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400d8e:	2301      	movs	r3, #1
  400d90:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400d92:	4b32      	ldr	r3, [pc, #200]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400d94:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400d96:	4b33      	ldr	r3, [pc, #204]	; (400e64 <xQueueGenericReceive+0x1b8>)
  400d98:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d9a:	4b2b      	ldr	r3, [pc, #172]	; (400e48 <xQueueGenericReceive+0x19c>)
  400d9c:	4798      	blx	r3
  400d9e:	68fb      	ldr	r3, [r7, #12]
  400da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400da2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400da6:	d102      	bne.n	400dae <xQueueGenericReceive+0x102>
  400da8:	68fb      	ldr	r3, [r7, #12]
  400daa:	2200      	movs	r2, #0
  400dac:	645a      	str	r2, [r3, #68]	; 0x44
  400dae:	68fb      	ldr	r3, [r7, #12]
  400db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400db2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400db6:	d102      	bne.n	400dbe <xQueueGenericReceive+0x112>
  400db8:	68fb      	ldr	r3, [r7, #12]
  400dba:	2200      	movs	r2, #0
  400dbc:	649a      	str	r2, [r3, #72]	; 0x48
  400dbe:	4b27      	ldr	r3, [pc, #156]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400dc0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400dc2:	1d3a      	adds	r2, r7, #4
  400dc4:	f107 0310 	add.w	r3, r7, #16
  400dc8:	4611      	mov	r1, r2
  400dca:	4618      	mov	r0, r3
  400dcc:	4b26      	ldr	r3, [pc, #152]	; (400e68 <xQueueGenericReceive+0x1bc>)
  400dce:	4798      	blx	r3
  400dd0:	4603      	mov	r3, r0
  400dd2:	2b00      	cmp	r3, #0
  400dd4:	d12b      	bne.n	400e2e <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400dd6:	68f8      	ldr	r0, [r7, #12]
  400dd8:	4b24      	ldr	r3, [pc, #144]	; (400e6c <xQueueGenericReceive+0x1c0>)
  400dda:	4798      	blx	r3
  400ddc:	4603      	mov	r3, r0
  400dde:	2b00      	cmp	r3, #0
  400de0:	d01f      	beq.n	400e22 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400de2:	68fb      	ldr	r3, [r7, #12]
  400de4:	681b      	ldr	r3, [r3, #0]
  400de6:	2b00      	cmp	r3, #0
  400de8:	d108      	bne.n	400dfc <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  400dea:	4b17      	ldr	r3, [pc, #92]	; (400e48 <xQueueGenericReceive+0x19c>)
  400dec:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400dee:	68fb      	ldr	r3, [r7, #12]
  400df0:	685b      	ldr	r3, [r3, #4]
  400df2:	4618      	mov	r0, r3
  400df4:	4b1e      	ldr	r3, [pc, #120]	; (400e70 <xQueueGenericReceive+0x1c4>)
  400df6:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  400df8:	4b18      	ldr	r3, [pc, #96]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400dfa:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400dfc:	68fb      	ldr	r3, [r7, #12]
  400dfe:	3324      	adds	r3, #36	; 0x24
  400e00:	687a      	ldr	r2, [r7, #4]
  400e02:	4611      	mov	r1, r2
  400e04:	4618      	mov	r0, r3
  400e06:	4b1b      	ldr	r3, [pc, #108]	; (400e74 <xQueueGenericReceive+0x1c8>)
  400e08:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400e0a:	68f8      	ldr	r0, [r7, #12]
  400e0c:	4b1a      	ldr	r3, [pc, #104]	; (400e78 <xQueueGenericReceive+0x1cc>)
  400e0e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400e10:	4b1a      	ldr	r3, [pc, #104]	; (400e7c <xQueueGenericReceive+0x1d0>)
  400e12:	4798      	blx	r3
  400e14:	4603      	mov	r3, r0
  400e16:	2b00      	cmp	r3, #0
  400e18:	f47f af68 	bne.w	400cec <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  400e1c:	4b0e      	ldr	r3, [pc, #56]	; (400e58 <xQueueGenericReceive+0x1ac>)
  400e1e:	4798      	blx	r3
  400e20:	e764      	b.n	400cec <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400e22:	68f8      	ldr	r0, [r7, #12]
  400e24:	4b14      	ldr	r3, [pc, #80]	; (400e78 <xQueueGenericReceive+0x1cc>)
  400e26:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400e28:	4b14      	ldr	r3, [pc, #80]	; (400e7c <xQueueGenericReceive+0x1d0>)
  400e2a:	4798      	blx	r3
  400e2c:	e75e      	b.n	400cec <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  400e2e:	68f8      	ldr	r0, [r7, #12]
  400e30:	4b11      	ldr	r3, [pc, #68]	; (400e78 <xQueueGenericReceive+0x1cc>)
  400e32:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400e34:	4b11      	ldr	r3, [pc, #68]	; (400e7c <xQueueGenericReceive+0x1d0>)
  400e36:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  400e38:	2300      	movs	r3, #0
		}
	}
}
  400e3a:	4618      	mov	r0, r3
  400e3c:	3720      	adds	r7, #32
  400e3e:	46bd      	mov	sp, r7
  400e40:	bd80      	pop	{r7, pc}
  400e42:	bf00      	nop
  400e44:	0040059d 	.word	0x0040059d
  400e48:	00400555 	.word	0x00400555
  400e4c:	00400f41 	.word	0x00400f41
  400e50:	00401c51 	.word	0x00401c51
  400e54:	004017d9 	.word	0x004017d9
  400e58:	00400539 	.word	0x00400539
  400e5c:	00400575 	.word	0x00400575
  400e60:	00401895 	.word	0x00401895
  400e64:	00401399 	.word	0x00401399
  400e68:	004018d1 	.word	0x004018d1
  400e6c:	00401039 	.word	0x00401039
  400e70:	00401cad 	.word	0x00401cad
  400e74:	004016f1 	.word	0x004016f1
  400e78:	00400f91 	.word	0x00400f91
  400e7c:	004013b5 	.word	0x004013b5

00400e80 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  400e80:	b580      	push	{r7, lr}
  400e82:	b084      	sub	sp, #16
  400e84:	af00      	add	r7, sp, #0
  400e86:	60f8      	str	r0, [r7, #12]
  400e88:	60b9      	str	r1, [r7, #8]
  400e8a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  400e8c:	68fb      	ldr	r3, [r7, #12]
  400e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e90:	2b00      	cmp	r3, #0
  400e92:	d10c      	bne.n	400eae <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400e94:	68fb      	ldr	r3, [r7, #12]
  400e96:	681b      	ldr	r3, [r3, #0]
  400e98:	2b00      	cmp	r3, #0
  400e9a:	d143      	bne.n	400f24 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400e9c:	68fb      	ldr	r3, [r7, #12]
  400e9e:	685b      	ldr	r3, [r3, #4]
  400ea0:	4618      	mov	r0, r3
  400ea2:	4b25      	ldr	r3, [pc, #148]	; (400f38 <prvCopyDataToQueue+0xb8>)
  400ea4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400ea6:	68fb      	ldr	r3, [r7, #12]
  400ea8:	2200      	movs	r2, #0
  400eaa:	605a      	str	r2, [r3, #4]
  400eac:	e03a      	b.n	400f24 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  400eae:	687b      	ldr	r3, [r7, #4]
  400eb0:	2b00      	cmp	r3, #0
  400eb2:	d119      	bne.n	400ee8 <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400eb4:	68fb      	ldr	r3, [r7, #12]
  400eb6:	6898      	ldr	r0, [r3, #8]
  400eb8:	68fb      	ldr	r3, [r7, #12]
  400eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ebc:	461a      	mov	r2, r3
  400ebe:	68b9      	ldr	r1, [r7, #8]
  400ec0:	4b1e      	ldr	r3, [pc, #120]	; (400f3c <prvCopyDataToQueue+0xbc>)
  400ec2:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400ec4:	68fb      	ldr	r3, [r7, #12]
  400ec6:	689a      	ldr	r2, [r3, #8]
  400ec8:	68fb      	ldr	r3, [r7, #12]
  400eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ecc:	441a      	add	r2, r3
  400ece:	68fb      	ldr	r3, [r7, #12]
  400ed0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  400ed2:	68fb      	ldr	r3, [r7, #12]
  400ed4:	689a      	ldr	r2, [r3, #8]
  400ed6:	68fb      	ldr	r3, [r7, #12]
  400ed8:	685b      	ldr	r3, [r3, #4]
  400eda:	429a      	cmp	r2, r3
  400edc:	d322      	bcc.n	400f24 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400ede:	68fb      	ldr	r3, [r7, #12]
  400ee0:	681a      	ldr	r2, [r3, #0]
  400ee2:	68fb      	ldr	r3, [r7, #12]
  400ee4:	609a      	str	r2, [r3, #8]
  400ee6:	e01d      	b.n	400f24 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400ee8:	68fb      	ldr	r3, [r7, #12]
  400eea:	68d8      	ldr	r0, [r3, #12]
  400eec:	68fb      	ldr	r3, [r7, #12]
  400eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ef0:	461a      	mov	r2, r3
  400ef2:	68b9      	ldr	r1, [r7, #8]
  400ef4:	4b11      	ldr	r3, [pc, #68]	; (400f3c <prvCopyDataToQueue+0xbc>)
  400ef6:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  400ef8:	68fb      	ldr	r3, [r7, #12]
  400efa:	68da      	ldr	r2, [r3, #12]
  400efc:	68fb      	ldr	r3, [r7, #12]
  400efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f00:	425b      	negs	r3, r3
  400f02:	441a      	add	r2, r3
  400f04:	68fb      	ldr	r3, [r7, #12]
  400f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  400f08:	68fb      	ldr	r3, [r7, #12]
  400f0a:	68da      	ldr	r2, [r3, #12]
  400f0c:	68fb      	ldr	r3, [r7, #12]
  400f0e:	681b      	ldr	r3, [r3, #0]
  400f10:	429a      	cmp	r2, r3
  400f12:	d207      	bcs.n	400f24 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400f14:	68fb      	ldr	r3, [r7, #12]
  400f16:	685a      	ldr	r2, [r3, #4]
  400f18:	68fb      	ldr	r3, [r7, #12]
  400f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f1c:	425b      	negs	r3, r3
  400f1e:	441a      	add	r2, r3
  400f20:	68fb      	ldr	r3, [r7, #12]
  400f22:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400f24:	68fb      	ldr	r3, [r7, #12]
  400f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400f28:	1c5a      	adds	r2, r3, #1
  400f2a:	68fb      	ldr	r3, [r7, #12]
  400f2c:	639a      	str	r2, [r3, #56]	; 0x38
}
  400f2e:	bf00      	nop
  400f30:	3710      	adds	r7, #16
  400f32:	46bd      	mov	sp, r7
  400f34:	bd80      	pop	{r7, pc}
  400f36:	bf00      	nop
  400f38:	00401d61 	.word	0x00401d61
  400f3c:	00405d61 	.word	0x00405d61

00400f40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  400f40:	b580      	push	{r7, lr}
  400f42:	b082      	sub	sp, #8
  400f44:	af00      	add	r7, sp, #0
  400f46:	6078      	str	r0, [r7, #4]
  400f48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  400f4a:	687b      	ldr	r3, [r7, #4]
  400f4c:	681b      	ldr	r3, [r3, #0]
  400f4e:	2b00      	cmp	r3, #0
  400f50:	d018      	beq.n	400f84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  400f52:	687b      	ldr	r3, [r7, #4]
  400f54:	68da      	ldr	r2, [r3, #12]
  400f56:	687b      	ldr	r3, [r7, #4]
  400f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f5a:	441a      	add	r2, r3
  400f5c:	687b      	ldr	r3, [r7, #4]
  400f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  400f60:	687b      	ldr	r3, [r7, #4]
  400f62:	68da      	ldr	r2, [r3, #12]
  400f64:	687b      	ldr	r3, [r7, #4]
  400f66:	685b      	ldr	r3, [r3, #4]
  400f68:	429a      	cmp	r2, r3
  400f6a:	d303      	bcc.n	400f74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  400f6c:	687b      	ldr	r3, [r7, #4]
  400f6e:	681a      	ldr	r2, [r3, #0]
  400f70:	687b      	ldr	r3, [r7, #4]
  400f72:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  400f74:	687b      	ldr	r3, [r7, #4]
  400f76:	68d9      	ldr	r1, [r3, #12]
  400f78:	687b      	ldr	r3, [r7, #4]
  400f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f7c:	461a      	mov	r2, r3
  400f7e:	6838      	ldr	r0, [r7, #0]
  400f80:	4b02      	ldr	r3, [pc, #8]	; (400f8c <prvCopyDataFromQueue+0x4c>)
  400f82:	4798      	blx	r3
	}
}
  400f84:	bf00      	nop
  400f86:	3708      	adds	r7, #8
  400f88:	46bd      	mov	sp, r7
  400f8a:	bd80      	pop	{r7, pc}
  400f8c:	00405d61 	.word	0x00405d61

00400f90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  400f90:	b580      	push	{r7, lr}
  400f92:	b082      	sub	sp, #8
  400f94:	af00      	add	r7, sp, #0
  400f96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400f98:	4b23      	ldr	r3, [pc, #140]	; (401028 <prvUnlockQueue+0x98>)
  400f9a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400f9c:	e012      	b.n	400fc4 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f9e:	687b      	ldr	r3, [r7, #4]
  400fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400fa2:	2b00      	cmp	r3, #0
  400fa4:	d013      	beq.n	400fce <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400fa6:	687b      	ldr	r3, [r7, #4]
  400fa8:	3324      	adds	r3, #36	; 0x24
  400faa:	4618      	mov	r0, r3
  400fac:	4b1f      	ldr	r3, [pc, #124]	; (40102c <prvUnlockQueue+0x9c>)
  400fae:	4798      	blx	r3
  400fb0:	4603      	mov	r3, r0
  400fb2:	2b00      	cmp	r3, #0
  400fb4:	d001      	beq.n	400fba <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  400fb6:	4b1e      	ldr	r3, [pc, #120]	; (401030 <prvUnlockQueue+0xa0>)
  400fb8:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  400fba:	687b      	ldr	r3, [r7, #4]
  400fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400fbe:	1e5a      	subs	r2, r3, #1
  400fc0:	687b      	ldr	r3, [r7, #4]
  400fc2:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400fc8:	2b00      	cmp	r3, #0
  400fca:	dce8      	bgt.n	400f9e <prvUnlockQueue+0xe>
  400fcc:	e000      	b.n	400fd0 <prvUnlockQueue+0x40>
			}
			else
			{
				break;
  400fce:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400fd0:	687b      	ldr	r3, [r7, #4]
  400fd2:	f04f 32ff 	mov.w	r2, #4294967295
  400fd6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400fd8:	4b16      	ldr	r3, [pc, #88]	; (401034 <prvUnlockQueue+0xa4>)
  400fda:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400fdc:	4b12      	ldr	r3, [pc, #72]	; (401028 <prvUnlockQueue+0x98>)
  400fde:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400fe0:	e012      	b.n	401008 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400fe2:	687b      	ldr	r3, [r7, #4]
  400fe4:	691b      	ldr	r3, [r3, #16]
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	d013      	beq.n	401012 <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400fea:	687b      	ldr	r3, [r7, #4]
  400fec:	3310      	adds	r3, #16
  400fee:	4618      	mov	r0, r3
  400ff0:	4b0e      	ldr	r3, [pc, #56]	; (40102c <prvUnlockQueue+0x9c>)
  400ff2:	4798      	blx	r3
  400ff4:	4603      	mov	r3, r0
  400ff6:	2b00      	cmp	r3, #0
  400ff8:	d001      	beq.n	400ffe <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  400ffa:	4b0d      	ldr	r3, [pc, #52]	; (401030 <prvUnlockQueue+0xa0>)
  400ffc:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  400ffe:	687b      	ldr	r3, [r7, #4]
  401000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  401002:	1e5a      	subs	r2, r3, #1
  401004:	687b      	ldr	r3, [r7, #4]
  401006:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401008:	687b      	ldr	r3, [r7, #4]
  40100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40100c:	2b00      	cmp	r3, #0
  40100e:	dce8      	bgt.n	400fe2 <prvUnlockQueue+0x52>
  401010:	e000      	b.n	401014 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
  401012:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  401014:	687b      	ldr	r3, [r7, #4]
  401016:	f04f 32ff 	mov.w	r2, #4294967295
  40101a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  40101c:	4b05      	ldr	r3, [pc, #20]	; (401034 <prvUnlockQueue+0xa4>)
  40101e:	4798      	blx	r3
}
  401020:	bf00      	nop
  401022:	3708      	adds	r7, #8
  401024:	46bd      	mov	sp, r7
  401026:	bd80      	pop	{r7, pc}
  401028:	00400555 	.word	0x00400555
  40102c:	004017d9 	.word	0x004017d9
  401030:	00401985 	.word	0x00401985
  401034:	00400575 	.word	0x00400575

00401038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  401038:	b580      	push	{r7, lr}
  40103a:	b084      	sub	sp, #16
  40103c:	af00      	add	r7, sp, #0
  40103e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  401040:	4b08      	ldr	r3, [pc, #32]	; (401064 <prvIsQueueEmpty+0x2c>)
  401042:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  401044:	687b      	ldr	r3, [r7, #4]
  401046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401048:	2b00      	cmp	r3, #0
  40104a:	bf0c      	ite	eq
  40104c:	2301      	moveq	r3, #1
  40104e:	2300      	movne	r3, #0
  401050:	b2db      	uxtb	r3, r3
  401052:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  401054:	4b04      	ldr	r3, [pc, #16]	; (401068 <prvIsQueueEmpty+0x30>)
  401056:	4798      	blx	r3

	return xReturn;
  401058:	68fb      	ldr	r3, [r7, #12]
}
  40105a:	4618      	mov	r0, r3
  40105c:	3710      	adds	r7, #16
  40105e:	46bd      	mov	sp, r7
  401060:	bd80      	pop	{r7, pc}
  401062:	bf00      	nop
  401064:	00400555 	.word	0x00400555
  401068:	00400575 	.word	0x00400575

0040106c <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  40106c:	b580      	push	{r7, lr}
  40106e:	b084      	sub	sp, #16
  401070:	af00      	add	r7, sp, #0
  401072:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  401074:	4b09      	ldr	r3, [pc, #36]	; (40109c <prvIsQueueFull+0x30>)
  401076:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  401078:	687b      	ldr	r3, [r7, #4]
  40107a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40107c:	687b      	ldr	r3, [r7, #4]
  40107e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  401080:	429a      	cmp	r2, r3
  401082:	bf0c      	ite	eq
  401084:	2301      	moveq	r3, #1
  401086:	2300      	movne	r3, #0
  401088:	b2db      	uxtb	r3, r3
  40108a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  40108c:	4b04      	ldr	r3, [pc, #16]	; (4010a0 <prvIsQueueFull+0x34>)
  40108e:	4798      	blx	r3

	return xReturn;
  401090:	68fb      	ldr	r3, [r7, #12]
}
  401092:	4618      	mov	r0, r3
  401094:	3710      	adds	r7, #16
  401096:	46bd      	mov	sp, r7
  401098:	bd80      	pop	{r7, pc}
  40109a:	bf00      	nop
  40109c:	00400555 	.word	0x00400555
  4010a0:	00400575 	.word	0x00400575

004010a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  4010a4:	b580      	push	{r7, lr}
  4010a6:	b082      	sub	sp, #8
  4010a8:	af00      	add	r7, sp, #0
  4010aa:	6078      	str	r0, [r7, #4]
  4010ac:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  4010ae:	4b12      	ldr	r3, [pc, #72]	; (4010f8 <vQueueWaitForMessageRestricted+0x54>)
  4010b0:	4798      	blx	r3
  4010b2:	687b      	ldr	r3, [r7, #4]
  4010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4010b6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010ba:	d102      	bne.n	4010c2 <vQueueWaitForMessageRestricted+0x1e>
  4010bc:	687b      	ldr	r3, [r7, #4]
  4010be:	2200      	movs	r2, #0
  4010c0:	645a      	str	r2, [r3, #68]	; 0x44
  4010c2:	687b      	ldr	r3, [r7, #4]
  4010c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4010c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010ca:	d102      	bne.n	4010d2 <vQueueWaitForMessageRestricted+0x2e>
  4010cc:	687b      	ldr	r3, [r7, #4]
  4010ce:	2200      	movs	r2, #0
  4010d0:	649a      	str	r2, [r3, #72]	; 0x48
  4010d2:	4b0a      	ldr	r3, [pc, #40]	; (4010fc <vQueueWaitForMessageRestricted+0x58>)
  4010d4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  4010d6:	687b      	ldr	r3, [r7, #4]
  4010d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4010da:	2b00      	cmp	r3, #0
  4010dc:	d105      	bne.n	4010ea <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4010de:	687b      	ldr	r3, [r7, #4]
  4010e0:	3324      	adds	r3, #36	; 0x24
  4010e2:	6839      	ldr	r1, [r7, #0]
  4010e4:	4618      	mov	r0, r3
  4010e6:	4b06      	ldr	r3, [pc, #24]	; (401100 <vQueueWaitForMessageRestricted+0x5c>)
  4010e8:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  4010ea:	6878      	ldr	r0, [r7, #4]
  4010ec:	4b05      	ldr	r3, [pc, #20]	; (401104 <vQueueWaitForMessageRestricted+0x60>)
  4010ee:	4798      	blx	r3
	}
  4010f0:	bf00      	nop
  4010f2:	3708      	adds	r7, #8
  4010f4:	46bd      	mov	sp, r7
  4010f6:	bd80      	pop	{r7, pc}
  4010f8:	00400555 	.word	0x00400555
  4010fc:	00400575 	.word	0x00400575
  401100:	00401775 	.word	0x00401775
  401104:	00400f91 	.word	0x00400f91

00401108 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  401108:	b590      	push	{r4, r7, lr}
  40110a:	b08b      	sub	sp, #44	; 0x2c
  40110c:	af02      	add	r7, sp, #8
  40110e:	60f8      	str	r0, [r7, #12]
  401110:	60b9      	str	r1, [r7, #8]
  401112:	603b      	str	r3, [r7, #0]
  401114:	4613      	mov	r3, r2
  401116:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  401118:	68fb      	ldr	r3, [r7, #12]
  40111a:	2b00      	cmp	r3, #0
  40111c:	d103      	bne.n	401126 <xTaskGenericCreate+0x1e>
  40111e:	4b54      	ldr	r3, [pc, #336]	; (401270 <xTaskGenericCreate+0x168>)
  401120:	4798      	blx	r3
  401122:	bf00      	nop
  401124:	e7fd      	b.n	401122 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  401126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401128:	2b04      	cmp	r3, #4
  40112a:	d903      	bls.n	401134 <xTaskGenericCreate+0x2c>
  40112c:	4b50      	ldr	r3, [pc, #320]	; (401270 <xTaskGenericCreate+0x168>)
  40112e:	4798      	blx	r3
  401130:	bf00      	nop
  401132:	e7fd      	b.n	401130 <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  401134:	88fb      	ldrh	r3, [r7, #6]
  401136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401138:	4618      	mov	r0, r3
  40113a:	4b4e      	ldr	r3, [pc, #312]	; (401274 <xTaskGenericCreate+0x16c>)
  40113c:	4798      	blx	r3
  40113e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  401140:	69bb      	ldr	r3, [r7, #24]
  401142:	2b00      	cmp	r3, #0
  401144:	d07d      	beq.n	401242 <xTaskGenericCreate+0x13a>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  401146:	69bb      	ldr	r3, [r7, #24]
  401148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40114a:	88f9      	ldrh	r1, [r7, #6]
  40114c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  401150:	440b      	add	r3, r1
  401152:	009b      	lsls	r3, r3, #2
  401154:	4413      	add	r3, r2
  401156:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  401158:	697b      	ldr	r3, [r7, #20]
  40115a:	f023 0307 	bic.w	r3, r3, #7
  40115e:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  401160:	697b      	ldr	r3, [r7, #20]
  401162:	f003 0307 	and.w	r3, r3, #7
  401166:	2b00      	cmp	r3, #0
  401168:	d003      	beq.n	401172 <xTaskGenericCreate+0x6a>
  40116a:	4b41      	ldr	r3, [pc, #260]	; (401270 <xTaskGenericCreate+0x168>)
  40116c:	4798      	blx	r3
  40116e:	bf00      	nop
  401170:	e7fd      	b.n	40116e <xTaskGenericCreate+0x66>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  401172:	88fb      	ldrh	r3, [r7, #6]
  401174:	9300      	str	r3, [sp, #0]
  401176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40117a:	68b9      	ldr	r1, [r7, #8]
  40117c:	69b8      	ldr	r0, [r7, #24]
  40117e:	4c3e      	ldr	r4, [pc, #248]	; (401278 <xTaskGenericCreate+0x170>)
  401180:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401182:	683a      	ldr	r2, [r7, #0]
  401184:	68f9      	ldr	r1, [r7, #12]
  401186:	6978      	ldr	r0, [r7, #20]
  401188:	4b3c      	ldr	r3, [pc, #240]	; (40127c <xTaskGenericCreate+0x174>)
  40118a:	4798      	blx	r3
  40118c:	4602      	mov	r2, r0
  40118e:	69bb      	ldr	r3, [r7, #24]
  401190:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  401192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  401194:	2b00      	cmp	r3, #0
  401196:	d002      	beq.n	40119e <xTaskGenericCreate+0x96>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  401198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40119a:	69ba      	ldr	r2, [r7, #24]
  40119c:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  40119e:	4b38      	ldr	r3, [pc, #224]	; (401280 <xTaskGenericCreate+0x178>)
  4011a0:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4011a2:	4b38      	ldr	r3, [pc, #224]	; (401284 <xTaskGenericCreate+0x17c>)
  4011a4:	681b      	ldr	r3, [r3, #0]
  4011a6:	3301      	adds	r3, #1
  4011a8:	4a36      	ldr	r2, [pc, #216]	; (401284 <xTaskGenericCreate+0x17c>)
  4011aa:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4011ac:	4b36      	ldr	r3, [pc, #216]	; (401288 <xTaskGenericCreate+0x180>)
  4011ae:	681b      	ldr	r3, [r3, #0]
  4011b0:	2b00      	cmp	r3, #0
  4011b2:	d109      	bne.n	4011c8 <xTaskGenericCreate+0xc0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4011b4:	4a34      	ldr	r2, [pc, #208]	; (401288 <xTaskGenericCreate+0x180>)
  4011b6:	69bb      	ldr	r3, [r7, #24]
  4011b8:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4011ba:	4b32      	ldr	r3, [pc, #200]	; (401284 <xTaskGenericCreate+0x17c>)
  4011bc:	681b      	ldr	r3, [r3, #0]
  4011be:	2b01      	cmp	r3, #1
  4011c0:	d10f      	bne.n	4011e2 <xTaskGenericCreate+0xda>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  4011c2:	4b32      	ldr	r3, [pc, #200]	; (40128c <xTaskGenericCreate+0x184>)
  4011c4:	4798      	blx	r3
  4011c6:	e00c      	b.n	4011e2 <xTaskGenericCreate+0xda>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  4011c8:	4b31      	ldr	r3, [pc, #196]	; (401290 <xTaskGenericCreate+0x188>)
  4011ca:	681b      	ldr	r3, [r3, #0]
  4011cc:	2b00      	cmp	r3, #0
  4011ce:	d108      	bne.n	4011e2 <xTaskGenericCreate+0xda>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4011d0:	4b2d      	ldr	r3, [pc, #180]	; (401288 <xTaskGenericCreate+0x180>)
  4011d2:	681b      	ldr	r3, [r3, #0]
  4011d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4011d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4011d8:	429a      	cmp	r2, r3
  4011da:	d802      	bhi.n	4011e2 <xTaskGenericCreate+0xda>
					{
						pxCurrentTCB = pxNewTCB;
  4011dc:	4a2a      	ldr	r2, [pc, #168]	; (401288 <xTaskGenericCreate+0x180>)
  4011de:	69bb      	ldr	r3, [r7, #24]
  4011e0:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  4011e2:	69bb      	ldr	r3, [r7, #24]
  4011e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4011e6:	4b2b      	ldr	r3, [pc, #172]	; (401294 <xTaskGenericCreate+0x18c>)
  4011e8:	681b      	ldr	r3, [r3, #0]
  4011ea:	429a      	cmp	r2, r3
  4011ec:	d903      	bls.n	4011f6 <xTaskGenericCreate+0xee>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  4011ee:	69bb      	ldr	r3, [r7, #24]
  4011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4011f2:	4a28      	ldr	r2, [pc, #160]	; (401294 <xTaskGenericCreate+0x18c>)
  4011f4:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4011f6:	4b28      	ldr	r3, [pc, #160]	; (401298 <xTaskGenericCreate+0x190>)
  4011f8:	681a      	ldr	r2, [r3, #0]
  4011fa:	69bb      	ldr	r3, [r7, #24]
  4011fc:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  4011fe:	4b26      	ldr	r3, [pc, #152]	; (401298 <xTaskGenericCreate+0x190>)
  401200:	681b      	ldr	r3, [r3, #0]
  401202:	3301      	adds	r3, #1
  401204:	4a24      	ldr	r2, [pc, #144]	; (401298 <xTaskGenericCreate+0x190>)
  401206:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  401208:	69bb      	ldr	r3, [r7, #24]
  40120a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40120c:	4b23      	ldr	r3, [pc, #140]	; (40129c <xTaskGenericCreate+0x194>)
  40120e:	681b      	ldr	r3, [r3, #0]
  401210:	429a      	cmp	r2, r3
  401212:	d903      	bls.n	40121c <xTaskGenericCreate+0x114>
  401214:	69bb      	ldr	r3, [r7, #24]
  401216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401218:	4a20      	ldr	r2, [pc, #128]	; (40129c <xTaskGenericCreate+0x194>)
  40121a:	6013      	str	r3, [r2, #0]
  40121c:	69bb      	ldr	r3, [r7, #24]
  40121e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401220:	4613      	mov	r3, r2
  401222:	009b      	lsls	r3, r3, #2
  401224:	4413      	add	r3, r2
  401226:	009b      	lsls	r3, r3, #2
  401228:	4a1d      	ldr	r2, [pc, #116]	; (4012a0 <xTaskGenericCreate+0x198>)
  40122a:	441a      	add	r2, r3
  40122c:	69bb      	ldr	r3, [r7, #24]
  40122e:	3304      	adds	r3, #4
  401230:	4619      	mov	r1, r3
  401232:	4610      	mov	r0, r2
  401234:	4b1b      	ldr	r3, [pc, #108]	; (4012a4 <xTaskGenericCreate+0x19c>)
  401236:	4798      	blx	r3

			xReturn = pdPASS;
  401238:	2301      	movs	r3, #1
  40123a:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  40123c:	4b1a      	ldr	r3, [pc, #104]	; (4012a8 <xTaskGenericCreate+0x1a0>)
  40123e:	4798      	blx	r3
  401240:	e002      	b.n	401248 <xTaskGenericCreate+0x140>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401242:	f04f 33ff 	mov.w	r3, #4294967295
  401246:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  401248:	69fb      	ldr	r3, [r7, #28]
  40124a:	2b01      	cmp	r3, #1
  40124c:	d10b      	bne.n	401266 <xTaskGenericCreate+0x15e>
	{
		if( xSchedulerRunning != pdFALSE )
  40124e:	4b10      	ldr	r3, [pc, #64]	; (401290 <xTaskGenericCreate+0x188>)
  401250:	681b      	ldr	r3, [r3, #0]
  401252:	2b00      	cmp	r3, #0
  401254:	d007      	beq.n	401266 <xTaskGenericCreate+0x15e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401256:	4b0c      	ldr	r3, [pc, #48]	; (401288 <xTaskGenericCreate+0x180>)
  401258:	681b      	ldr	r3, [r3, #0]
  40125a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40125c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40125e:	429a      	cmp	r2, r3
  401260:	d201      	bcs.n	401266 <xTaskGenericCreate+0x15e>
			{
				portYIELD_WITHIN_API();
  401262:	4b12      	ldr	r3, [pc, #72]	; (4012ac <xTaskGenericCreate+0x1a4>)
  401264:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  401266:	69fb      	ldr	r3, [r7, #28]
}
  401268:	4618      	mov	r0, r3
  40126a:	3724      	adds	r7, #36	; 0x24
  40126c:	46bd      	mov	sp, r7
  40126e:	bd90      	pop	{r4, r7, pc}
  401270:	0040059d 	.word	0x0040059d
  401274:	00401bbd 	.word	0x00401bbd
  401278:	004019c5 	.word	0x004019c5
  40127c:	00400449 	.word	0x00400449
  401280:	00400555 	.word	0x00400555
  401284:	2040aaec 	.word	0x2040aaec
  401288:	2040aa14 	.word	0x2040aa14
  40128c:	00401a39 	.word	0x00401a39
  401290:	2040aafc 	.word	0x2040aafc
  401294:	2040aaf4 	.word	0x2040aaf4
  401298:	2040ab10 	.word	0x2040ab10
  40129c:	2040aaf8 	.word	0x2040aaf8
  4012a0:	2040aa18 	.word	0x2040aa18
  4012a4:	0040028b 	.word	0x0040028b
  4012a8:	00400575 	.word	0x00400575
  4012ac:	00400539 	.word	0x00400539

004012b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
  4012b0:	b580      	push	{r7, lr}
  4012b2:	b084      	sub	sp, #16
  4012b4:	af00      	add	r7, sp, #0
  4012b6:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  4012b8:	2300      	movs	r3, #0
  4012ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
  4012bc:	687b      	ldr	r3, [r7, #4]
  4012be:	2b00      	cmp	r3, #0
  4012c0:	d012      	beq.n	4012e8 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
  4012c2:	4b0e      	ldr	r3, [pc, #56]	; (4012fc <vTaskDelay+0x4c>)
  4012c4:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  4012c6:	4b0e      	ldr	r3, [pc, #56]	; (401300 <vTaskDelay+0x50>)
  4012c8:	681a      	ldr	r2, [r3, #0]
  4012ca:	687b      	ldr	r3, [r7, #4]
  4012cc:	4413      	add	r3, r2
  4012ce:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4012d0:	4b0c      	ldr	r3, [pc, #48]	; (401304 <vTaskDelay+0x54>)
  4012d2:	681b      	ldr	r3, [r3, #0]
  4012d4:	3304      	adds	r3, #4
  4012d6:	4618      	mov	r0, r3
  4012d8:	4b0b      	ldr	r3, [pc, #44]	; (401308 <vTaskDelay+0x58>)
  4012da:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4012dc:	68b8      	ldr	r0, [r7, #8]
  4012de:	4b0b      	ldr	r3, [pc, #44]	; (40130c <vTaskDelay+0x5c>)
  4012e0:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  4012e2:	4b0b      	ldr	r3, [pc, #44]	; (401310 <vTaskDelay+0x60>)
  4012e4:	4798      	blx	r3
  4012e6:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  4012e8:	68fb      	ldr	r3, [r7, #12]
  4012ea:	2b00      	cmp	r3, #0
  4012ec:	d101      	bne.n	4012f2 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
  4012ee:	4b09      	ldr	r3, [pc, #36]	; (401314 <vTaskDelay+0x64>)
  4012f0:	4798      	blx	r3
		}
	}
  4012f2:	bf00      	nop
  4012f4:	3710      	adds	r7, #16
  4012f6:	46bd      	mov	sp, r7
  4012f8:	bd80      	pop	{r7, pc}
  4012fa:	bf00      	nop
  4012fc:	00401399 	.word	0x00401399
  401300:	2040aaf0 	.word	0x2040aaf0
  401304:	2040aa14 	.word	0x2040aa14
  401308:	0040034d 	.word	0x0040034d
  40130c:	00401b4d 	.word	0x00401b4d
  401310:	004013b5 	.word	0x004013b5
  401314:	00400539 	.word	0x00400539

00401318 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  401318:	b590      	push	{r4, r7, lr}
  40131a:	b087      	sub	sp, #28
  40131c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  40131e:	2300      	movs	r3, #0
  401320:	9303      	str	r3, [sp, #12]
  401322:	2300      	movs	r3, #0
  401324:	9302      	str	r3, [sp, #8]
  401326:	2300      	movs	r3, #0
  401328:	9301      	str	r3, [sp, #4]
  40132a:	2300      	movs	r3, #0
  40132c:	9300      	str	r3, [sp, #0]
  40132e:	2300      	movs	r3, #0
  401330:	2282      	movs	r2, #130	; 0x82
  401332:	4911      	ldr	r1, [pc, #68]	; (401378 <vTaskStartScheduler+0x60>)
  401334:	4811      	ldr	r0, [pc, #68]	; (40137c <vTaskStartScheduler+0x64>)
  401336:	4c12      	ldr	r4, [pc, #72]	; (401380 <vTaskStartScheduler+0x68>)
  401338:	47a0      	blx	r4
  40133a:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  40133c:	687b      	ldr	r3, [r7, #4]
  40133e:	2b01      	cmp	r3, #1
  401340:	d102      	bne.n	401348 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  401342:	4b10      	ldr	r3, [pc, #64]	; (401384 <vTaskStartScheduler+0x6c>)
  401344:	4798      	blx	r3
  401346:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  401348:	687b      	ldr	r3, [r7, #4]
  40134a:	2b01      	cmp	r3, #1
  40134c:	d109      	bne.n	401362 <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  40134e:	4b0e      	ldr	r3, [pc, #56]	; (401388 <vTaskStartScheduler+0x70>)
  401350:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  401352:	4b0e      	ldr	r3, [pc, #56]	; (40138c <vTaskStartScheduler+0x74>)
  401354:	2201      	movs	r2, #1
  401356:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  401358:	4b0d      	ldr	r3, [pc, #52]	; (401390 <vTaskStartScheduler+0x78>)
  40135a:	2200      	movs	r2, #0
  40135c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  40135e:	4b0d      	ldr	r3, [pc, #52]	; (401394 <vTaskStartScheduler+0x7c>)
  401360:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  401362:	687b      	ldr	r3, [r7, #4]
  401364:	2b00      	cmp	r3, #0
  401366:	d103      	bne.n	401370 <vTaskStartScheduler+0x58>
  401368:	4b07      	ldr	r3, [pc, #28]	; (401388 <vTaskStartScheduler+0x70>)
  40136a:	4798      	blx	r3
  40136c:	bf00      	nop
  40136e:	e7fd      	b.n	40136c <vTaskStartScheduler+0x54>
}
  401370:	bf00      	nop
  401372:	370c      	adds	r7, #12
  401374:	46bd      	mov	sp, r7
  401376:	bd90      	pop	{r4, r7, pc}
  401378:	00408d64 	.word	0x00408d64
  40137c:	0040199d 	.word	0x0040199d
  401380:	00401109 	.word	0x00401109
  401384:	00401de5 	.word	0x00401de5
  401388:	0040059d 	.word	0x0040059d
  40138c:	2040aafc 	.word	0x2040aafc
  401390:	2040aaf0 	.word	0x2040aaf0
  401394:	004004e1 	.word	0x004004e1

00401398 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  401398:	b480      	push	{r7}
  40139a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  40139c:	4b04      	ldr	r3, [pc, #16]	; (4013b0 <vTaskSuspendAll+0x18>)
  40139e:	681b      	ldr	r3, [r3, #0]
  4013a0:	3301      	adds	r3, #1
  4013a2:	4a03      	ldr	r2, [pc, #12]	; (4013b0 <vTaskSuspendAll+0x18>)
  4013a4:	6013      	str	r3, [r2, #0]
}
  4013a6:	bf00      	nop
  4013a8:	46bd      	mov	sp, r7
  4013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013ae:	4770      	bx	lr
  4013b0:	2040ab00 	.word	0x2040ab00

004013b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  4013b4:	b590      	push	{r4, r7, lr}
  4013b6:	b083      	sub	sp, #12
  4013b8:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  4013ba:	2300      	movs	r3, #0
  4013bc:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  4013be:	4b36      	ldr	r3, [pc, #216]	; (401498 <xTaskResumeAll+0xe4>)
  4013c0:	681b      	ldr	r3, [r3, #0]
  4013c2:	2b00      	cmp	r3, #0
  4013c4:	d103      	bne.n	4013ce <xTaskResumeAll+0x1a>
  4013c6:	4b35      	ldr	r3, [pc, #212]	; (40149c <xTaskResumeAll+0xe8>)
  4013c8:	4798      	blx	r3
  4013ca:	bf00      	nop
  4013cc:	e7fd      	b.n	4013ca <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  4013ce:	4b34      	ldr	r3, [pc, #208]	; (4014a0 <xTaskResumeAll+0xec>)
  4013d0:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  4013d2:	4b31      	ldr	r3, [pc, #196]	; (401498 <xTaskResumeAll+0xe4>)
  4013d4:	681b      	ldr	r3, [r3, #0]
  4013d6:	3b01      	subs	r3, #1
  4013d8:	4a2f      	ldr	r2, [pc, #188]	; (401498 <xTaskResumeAll+0xe4>)
  4013da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  4013dc:	4b2e      	ldr	r3, [pc, #184]	; (401498 <xTaskResumeAll+0xe4>)
  4013de:	681b      	ldr	r3, [r3, #0]
  4013e0:	2b00      	cmp	r3, #0
  4013e2:	d152      	bne.n	40148a <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  4013e4:	4b2f      	ldr	r3, [pc, #188]	; (4014a4 <xTaskResumeAll+0xf0>)
  4013e6:	681b      	ldr	r3, [r3, #0]
  4013e8:	2b00      	cmp	r3, #0
  4013ea:	d04e      	beq.n	40148a <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  4013ec:	2300      	movs	r3, #0
  4013ee:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4013f0:	e027      	b.n	401442 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  4013f2:	4b2d      	ldr	r3, [pc, #180]	; (4014a8 <xTaskResumeAll+0xf4>)
  4013f4:	68db      	ldr	r3, [r3, #12]
  4013f6:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  4013f8:	f104 0318 	add.w	r3, r4, #24
  4013fc:	4618      	mov	r0, r3
  4013fe:	4b2b      	ldr	r3, [pc, #172]	; (4014ac <xTaskResumeAll+0xf8>)
  401400:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401402:	1d23      	adds	r3, r4, #4
  401404:	4618      	mov	r0, r3
  401406:	4b29      	ldr	r3, [pc, #164]	; (4014ac <xTaskResumeAll+0xf8>)
  401408:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  40140a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40140c:	4b28      	ldr	r3, [pc, #160]	; (4014b0 <xTaskResumeAll+0xfc>)
  40140e:	681b      	ldr	r3, [r3, #0]
  401410:	429a      	cmp	r2, r3
  401412:	d902      	bls.n	40141a <xTaskResumeAll+0x66>
  401414:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401416:	4a26      	ldr	r2, [pc, #152]	; (4014b0 <xTaskResumeAll+0xfc>)
  401418:	6013      	str	r3, [r2, #0]
  40141a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40141c:	4613      	mov	r3, r2
  40141e:	009b      	lsls	r3, r3, #2
  401420:	4413      	add	r3, r2
  401422:	009b      	lsls	r3, r3, #2
  401424:	4a23      	ldr	r2, [pc, #140]	; (4014b4 <xTaskResumeAll+0x100>)
  401426:	4413      	add	r3, r2
  401428:	1d22      	adds	r2, r4, #4
  40142a:	4611      	mov	r1, r2
  40142c:	4618      	mov	r0, r3
  40142e:	4b22      	ldr	r3, [pc, #136]	; (4014b8 <xTaskResumeAll+0x104>)
  401430:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401432:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401434:	4b21      	ldr	r3, [pc, #132]	; (4014bc <xTaskResumeAll+0x108>)
  401436:	681b      	ldr	r3, [r3, #0]
  401438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40143a:	429a      	cmp	r2, r3
  40143c:	d301      	bcc.n	401442 <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  40143e:	2301      	movs	r3, #1
  401440:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  401442:	4b19      	ldr	r3, [pc, #100]	; (4014a8 <xTaskResumeAll+0xf4>)
  401444:	681b      	ldr	r3, [r3, #0]
  401446:	2b00      	cmp	r3, #0
  401448:	d1d3      	bne.n	4013f2 <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  40144a:	4b1d      	ldr	r3, [pc, #116]	; (4014c0 <xTaskResumeAll+0x10c>)
  40144c:	681b      	ldr	r3, [r3, #0]
  40144e:	2b00      	cmp	r3, #0
  401450:	d00d      	beq.n	40146e <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401452:	e006      	b.n	401462 <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  401454:	4b1b      	ldr	r3, [pc, #108]	; (4014c4 <xTaskResumeAll+0x110>)
  401456:	4798      	blx	r3
						--uxMissedTicks;
  401458:	4b19      	ldr	r3, [pc, #100]	; (4014c0 <xTaskResumeAll+0x10c>)
  40145a:	681b      	ldr	r3, [r3, #0]
  40145c:	3b01      	subs	r3, #1
  40145e:	4a18      	ldr	r2, [pc, #96]	; (4014c0 <xTaskResumeAll+0x10c>)
  401460:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  401462:	4b17      	ldr	r3, [pc, #92]	; (4014c0 <xTaskResumeAll+0x10c>)
  401464:	681b      	ldr	r3, [r3, #0]
  401466:	2b00      	cmp	r3, #0
  401468:	d1f4      	bne.n	401454 <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  40146a:	2301      	movs	r3, #1
  40146c:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  40146e:	683b      	ldr	r3, [r7, #0]
  401470:	2b01      	cmp	r3, #1
  401472:	d003      	beq.n	40147c <xTaskResumeAll+0xc8>
  401474:	4b14      	ldr	r3, [pc, #80]	; (4014c8 <xTaskResumeAll+0x114>)
  401476:	681b      	ldr	r3, [r3, #0]
  401478:	2b01      	cmp	r3, #1
  40147a:	d106      	bne.n	40148a <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  40147c:	2301      	movs	r3, #1
  40147e:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  401480:	4b11      	ldr	r3, [pc, #68]	; (4014c8 <xTaskResumeAll+0x114>)
  401482:	2200      	movs	r2, #0
  401484:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  401486:	4b11      	ldr	r3, [pc, #68]	; (4014cc <xTaskResumeAll+0x118>)
  401488:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  40148a:	4b11      	ldr	r3, [pc, #68]	; (4014d0 <xTaskResumeAll+0x11c>)
  40148c:	4798      	blx	r3

	return xAlreadyYielded;
  40148e:	687b      	ldr	r3, [r7, #4]
}
  401490:	4618      	mov	r0, r3
  401492:	370c      	adds	r7, #12
  401494:	46bd      	mov	sp, r7
  401496:	bd90      	pop	{r4, r7, pc}
  401498:	2040ab00 	.word	0x2040ab00
  40149c:	0040059d 	.word	0x0040059d
  4014a0:	00400555 	.word	0x00400555
  4014a4:	2040aaec 	.word	0x2040aaec
  4014a8:	2040aaac 	.word	0x2040aaac
  4014ac:	0040034d 	.word	0x0040034d
  4014b0:	2040aaf8 	.word	0x2040aaf8
  4014b4:	2040aa18 	.word	0x2040aa18
  4014b8:	0040028b 	.word	0x0040028b
  4014bc:	2040aa14 	.word	0x2040aa14
  4014c0:	2040ab04 	.word	0x2040ab04
  4014c4:	00401501 	.word	0x00401501
  4014c8:	2040ab08 	.word	0x2040ab08
  4014cc:	00400539 	.word	0x00400539
  4014d0:	00400575 	.word	0x00400575

004014d4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  4014d4:	b580      	push	{r7, lr}
  4014d6:	b082      	sub	sp, #8
  4014d8:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  4014da:	4b06      	ldr	r3, [pc, #24]	; (4014f4 <xTaskGetTickCount+0x20>)
  4014dc:	4798      	blx	r3
	{
		xTicks = xTickCount;
  4014de:	4b06      	ldr	r3, [pc, #24]	; (4014f8 <xTaskGetTickCount+0x24>)
  4014e0:	681b      	ldr	r3, [r3, #0]
  4014e2:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  4014e4:	4b05      	ldr	r3, [pc, #20]	; (4014fc <xTaskGetTickCount+0x28>)
  4014e6:	4798      	blx	r3

	return xTicks;
  4014e8:	687b      	ldr	r3, [r7, #4]
}
  4014ea:	4618      	mov	r0, r3
  4014ec:	3708      	adds	r7, #8
  4014ee:	46bd      	mov	sp, r7
  4014f0:	bd80      	pop	{r7, pc}
  4014f2:	bf00      	nop
  4014f4:	00400555 	.word	0x00400555
  4014f8:	2040aaf0 	.word	0x2040aaf0
  4014fc:	00400575 	.word	0x00400575

00401500 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  401500:	b580      	push	{r7, lr}
  401502:	b084      	sub	sp, #16
  401504:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401506:	4b45      	ldr	r3, [pc, #276]	; (40161c <vTaskIncrementTick+0x11c>)
  401508:	681b      	ldr	r3, [r3, #0]
  40150a:	2b00      	cmp	r3, #0
  40150c:	d17b      	bne.n	401606 <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  40150e:	4b44      	ldr	r3, [pc, #272]	; (401620 <vTaskIncrementTick+0x120>)
  401510:	681b      	ldr	r3, [r3, #0]
  401512:	3301      	adds	r3, #1
  401514:	4a42      	ldr	r2, [pc, #264]	; (401620 <vTaskIncrementTick+0x120>)
  401516:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  401518:	4b41      	ldr	r3, [pc, #260]	; (401620 <vTaskIncrementTick+0x120>)
  40151a:	681b      	ldr	r3, [r3, #0]
  40151c:	2b00      	cmp	r3, #0
  40151e:	d12a      	bne.n	401576 <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  401520:	4b40      	ldr	r3, [pc, #256]	; (401624 <vTaskIncrementTick+0x124>)
  401522:	681b      	ldr	r3, [r3, #0]
  401524:	681b      	ldr	r3, [r3, #0]
  401526:	2b00      	cmp	r3, #0
  401528:	d003      	beq.n	401532 <vTaskIncrementTick+0x32>
  40152a:	4b3f      	ldr	r3, [pc, #252]	; (401628 <vTaskIncrementTick+0x128>)
  40152c:	4798      	blx	r3
  40152e:	bf00      	nop
  401530:	e7fd      	b.n	40152e <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  401532:	4b3c      	ldr	r3, [pc, #240]	; (401624 <vTaskIncrementTick+0x124>)
  401534:	681b      	ldr	r3, [r3, #0]
  401536:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  401538:	4b3c      	ldr	r3, [pc, #240]	; (40162c <vTaskIncrementTick+0x12c>)
  40153a:	681b      	ldr	r3, [r3, #0]
  40153c:	4a39      	ldr	r2, [pc, #228]	; (401624 <vTaskIncrementTick+0x124>)
  40153e:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  401540:	4a3a      	ldr	r2, [pc, #232]	; (40162c <vTaskIncrementTick+0x12c>)
  401542:	68fb      	ldr	r3, [r7, #12]
  401544:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  401546:	4b3a      	ldr	r3, [pc, #232]	; (401630 <vTaskIncrementTick+0x130>)
  401548:	681b      	ldr	r3, [r3, #0]
  40154a:	3301      	adds	r3, #1
  40154c:	4a38      	ldr	r2, [pc, #224]	; (401630 <vTaskIncrementTick+0x130>)
  40154e:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401550:	4b34      	ldr	r3, [pc, #208]	; (401624 <vTaskIncrementTick+0x124>)
  401552:	681b      	ldr	r3, [r3, #0]
  401554:	681b      	ldr	r3, [r3, #0]
  401556:	2b00      	cmp	r3, #0
  401558:	d104      	bne.n	401564 <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  40155a:	4b36      	ldr	r3, [pc, #216]	; (401634 <vTaskIncrementTick+0x134>)
  40155c:	f04f 32ff 	mov.w	r2, #4294967295
  401560:	601a      	str	r2, [r3, #0]
  401562:	e008      	b.n	401576 <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401564:	4b2f      	ldr	r3, [pc, #188]	; (401624 <vTaskIncrementTick+0x124>)
  401566:	681b      	ldr	r3, [r3, #0]
  401568:	68db      	ldr	r3, [r3, #12]
  40156a:	68db      	ldr	r3, [r3, #12]
  40156c:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40156e:	68bb      	ldr	r3, [r7, #8]
  401570:	685b      	ldr	r3, [r3, #4]
  401572:	4a30      	ldr	r2, [pc, #192]	; (401634 <vTaskIncrementTick+0x134>)
  401574:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  401576:	4b2a      	ldr	r3, [pc, #168]	; (401620 <vTaskIncrementTick+0x120>)
  401578:	681a      	ldr	r2, [r3, #0]
  40157a:	4b2e      	ldr	r3, [pc, #184]	; (401634 <vTaskIncrementTick+0x134>)
  40157c:	681b      	ldr	r3, [r3, #0]
  40157e:	429a      	cmp	r2, r3
  401580:	d347      	bcc.n	401612 <vTaskIncrementTick+0x112>
  401582:	4b28      	ldr	r3, [pc, #160]	; (401624 <vTaskIncrementTick+0x124>)
  401584:	681b      	ldr	r3, [r3, #0]
  401586:	681b      	ldr	r3, [r3, #0]
  401588:	2b00      	cmp	r3, #0
  40158a:	d104      	bne.n	401596 <vTaskIncrementTick+0x96>
  40158c:	4b29      	ldr	r3, [pc, #164]	; (401634 <vTaskIncrementTick+0x134>)
  40158e:	f04f 32ff 	mov.w	r2, #4294967295
  401592:	601a      	str	r2, [r3, #0]
  401594:	e03d      	b.n	401612 <vTaskIncrementTick+0x112>
  401596:	4b23      	ldr	r3, [pc, #140]	; (401624 <vTaskIncrementTick+0x124>)
  401598:	681b      	ldr	r3, [r3, #0]
  40159a:	68db      	ldr	r3, [r3, #12]
  40159c:	68db      	ldr	r3, [r3, #12]
  40159e:	60bb      	str	r3, [r7, #8]
  4015a0:	68bb      	ldr	r3, [r7, #8]
  4015a2:	685b      	ldr	r3, [r3, #4]
  4015a4:	607b      	str	r3, [r7, #4]
  4015a6:	4b1e      	ldr	r3, [pc, #120]	; (401620 <vTaskIncrementTick+0x120>)
  4015a8:	681a      	ldr	r2, [r3, #0]
  4015aa:	687b      	ldr	r3, [r7, #4]
  4015ac:	429a      	cmp	r2, r3
  4015ae:	d203      	bcs.n	4015b8 <vTaskIncrementTick+0xb8>
  4015b0:	4a20      	ldr	r2, [pc, #128]	; (401634 <vTaskIncrementTick+0x134>)
  4015b2:	687b      	ldr	r3, [r7, #4]
  4015b4:	6013      	str	r3, [r2, #0]
  4015b6:	e02c      	b.n	401612 <vTaskIncrementTick+0x112>
  4015b8:	68bb      	ldr	r3, [r7, #8]
  4015ba:	3304      	adds	r3, #4
  4015bc:	4618      	mov	r0, r3
  4015be:	4b1e      	ldr	r3, [pc, #120]	; (401638 <vTaskIncrementTick+0x138>)
  4015c0:	4798      	blx	r3
  4015c2:	68bb      	ldr	r3, [r7, #8]
  4015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4015c6:	2b00      	cmp	r3, #0
  4015c8:	d004      	beq.n	4015d4 <vTaskIncrementTick+0xd4>
  4015ca:	68bb      	ldr	r3, [r7, #8]
  4015cc:	3318      	adds	r3, #24
  4015ce:	4618      	mov	r0, r3
  4015d0:	4b19      	ldr	r3, [pc, #100]	; (401638 <vTaskIncrementTick+0x138>)
  4015d2:	4798      	blx	r3
  4015d4:	68bb      	ldr	r3, [r7, #8]
  4015d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015d8:	4b18      	ldr	r3, [pc, #96]	; (40163c <vTaskIncrementTick+0x13c>)
  4015da:	681b      	ldr	r3, [r3, #0]
  4015dc:	429a      	cmp	r2, r3
  4015de:	d903      	bls.n	4015e8 <vTaskIncrementTick+0xe8>
  4015e0:	68bb      	ldr	r3, [r7, #8]
  4015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015e4:	4a15      	ldr	r2, [pc, #84]	; (40163c <vTaskIncrementTick+0x13c>)
  4015e6:	6013      	str	r3, [r2, #0]
  4015e8:	68bb      	ldr	r3, [r7, #8]
  4015ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4015ec:	4613      	mov	r3, r2
  4015ee:	009b      	lsls	r3, r3, #2
  4015f0:	4413      	add	r3, r2
  4015f2:	009b      	lsls	r3, r3, #2
  4015f4:	4a12      	ldr	r2, [pc, #72]	; (401640 <vTaskIncrementTick+0x140>)
  4015f6:	441a      	add	r2, r3
  4015f8:	68bb      	ldr	r3, [r7, #8]
  4015fa:	3304      	adds	r3, #4
  4015fc:	4619      	mov	r1, r3
  4015fe:	4610      	mov	r0, r2
  401600:	4b10      	ldr	r3, [pc, #64]	; (401644 <vTaskIncrementTick+0x144>)
  401602:	4798      	blx	r3
  401604:	e7bd      	b.n	401582 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  401606:	4b10      	ldr	r3, [pc, #64]	; (401648 <vTaskIncrementTick+0x148>)
  401608:	681b      	ldr	r3, [r3, #0]
  40160a:	3301      	adds	r3, #1
  40160c:	4a0e      	ldr	r2, [pc, #56]	; (401648 <vTaskIncrementTick+0x148>)
  40160e:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  401610:	e7ff      	b.n	401612 <vTaskIncrementTick+0x112>
  401612:	bf00      	nop
  401614:	3710      	adds	r7, #16
  401616:	46bd      	mov	sp, r7
  401618:	bd80      	pop	{r7, pc}
  40161a:	bf00      	nop
  40161c:	2040ab00 	.word	0x2040ab00
  401620:	2040aaf0 	.word	0x2040aaf0
  401624:	2040aaa4 	.word	0x2040aaa4
  401628:	0040059d 	.word	0x0040059d
  40162c:	2040aaa8 	.word	0x2040aaa8
  401630:	2040ab0c 	.word	0x2040ab0c
  401634:	20400008 	.word	0x20400008
  401638:	0040034d 	.word	0x0040034d
  40163c:	2040aaf8 	.word	0x2040aaf8
  401640:	2040aa18 	.word	0x2040aa18
  401644:	0040028b 	.word	0x0040028b
  401648:	2040ab04 	.word	0x2040ab04

0040164c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  40164c:	b580      	push	{r7, lr}
  40164e:	b082      	sub	sp, #8
  401650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  401652:	4b21      	ldr	r3, [pc, #132]	; (4016d8 <vTaskSwitchContext+0x8c>)
  401654:	681b      	ldr	r3, [r3, #0]
  401656:	2b00      	cmp	r3, #0
  401658:	d010      	beq.n	40167c <vTaskSwitchContext+0x30>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  40165a:	4b20      	ldr	r3, [pc, #128]	; (4016dc <vTaskSwitchContext+0x90>)
  40165c:	2201      	movs	r2, #1
  40165e:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  401660:	e035      	b.n	4016ce <vTaskSwitchContext+0x82>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401662:	4b1f      	ldr	r3, [pc, #124]	; (4016e0 <vTaskSwitchContext+0x94>)
  401664:	681b      	ldr	r3, [r3, #0]
  401666:	2b00      	cmp	r3, #0
  401668:	d103      	bne.n	401672 <vTaskSwitchContext+0x26>
  40166a:	4b1e      	ldr	r3, [pc, #120]	; (4016e4 <vTaskSwitchContext+0x98>)
  40166c:	4798      	blx	r3
  40166e:	bf00      	nop
  401670:	e7fd      	b.n	40166e <vTaskSwitchContext+0x22>
  401672:	4b1b      	ldr	r3, [pc, #108]	; (4016e0 <vTaskSwitchContext+0x94>)
  401674:	681b      	ldr	r3, [r3, #0]
  401676:	3b01      	subs	r3, #1
  401678:	4a19      	ldr	r2, [pc, #100]	; (4016e0 <vTaskSwitchContext+0x94>)
  40167a:	6013      	str	r3, [r2, #0]
  40167c:	4b18      	ldr	r3, [pc, #96]	; (4016e0 <vTaskSwitchContext+0x94>)
  40167e:	681a      	ldr	r2, [r3, #0]
  401680:	4919      	ldr	r1, [pc, #100]	; (4016e8 <vTaskSwitchContext+0x9c>)
  401682:	4613      	mov	r3, r2
  401684:	009b      	lsls	r3, r3, #2
  401686:	4413      	add	r3, r2
  401688:	009b      	lsls	r3, r3, #2
  40168a:	440b      	add	r3, r1
  40168c:	681b      	ldr	r3, [r3, #0]
  40168e:	2b00      	cmp	r3, #0
  401690:	d0e7      	beq.n	401662 <vTaskSwitchContext+0x16>
  401692:	4b13      	ldr	r3, [pc, #76]	; (4016e0 <vTaskSwitchContext+0x94>)
  401694:	681a      	ldr	r2, [r3, #0]
  401696:	4613      	mov	r3, r2
  401698:	009b      	lsls	r3, r3, #2
  40169a:	4413      	add	r3, r2
  40169c:	009b      	lsls	r3, r3, #2
  40169e:	4a12      	ldr	r2, [pc, #72]	; (4016e8 <vTaskSwitchContext+0x9c>)
  4016a0:	4413      	add	r3, r2
  4016a2:	607b      	str	r3, [r7, #4]
  4016a4:	687b      	ldr	r3, [r7, #4]
  4016a6:	685b      	ldr	r3, [r3, #4]
  4016a8:	685a      	ldr	r2, [r3, #4]
  4016aa:	687b      	ldr	r3, [r7, #4]
  4016ac:	605a      	str	r2, [r3, #4]
  4016ae:	687b      	ldr	r3, [r7, #4]
  4016b0:	685a      	ldr	r2, [r3, #4]
  4016b2:	687b      	ldr	r3, [r7, #4]
  4016b4:	3308      	adds	r3, #8
  4016b6:	429a      	cmp	r2, r3
  4016b8:	d104      	bne.n	4016c4 <vTaskSwitchContext+0x78>
  4016ba:	687b      	ldr	r3, [r7, #4]
  4016bc:	685b      	ldr	r3, [r3, #4]
  4016be:	685a      	ldr	r2, [r3, #4]
  4016c0:	687b      	ldr	r3, [r7, #4]
  4016c2:	605a      	str	r2, [r3, #4]
  4016c4:	687b      	ldr	r3, [r7, #4]
  4016c6:	685b      	ldr	r3, [r3, #4]
  4016c8:	68db      	ldr	r3, [r3, #12]
  4016ca:	4a08      	ldr	r2, [pc, #32]	; (4016ec <vTaskSwitchContext+0xa0>)
  4016cc:	6013      	str	r3, [r2, #0]
}
  4016ce:	bf00      	nop
  4016d0:	3708      	adds	r7, #8
  4016d2:	46bd      	mov	sp, r7
  4016d4:	bd80      	pop	{r7, pc}
  4016d6:	bf00      	nop
  4016d8:	2040ab00 	.word	0x2040ab00
  4016dc:	2040ab08 	.word	0x2040ab08
  4016e0:	2040aaf8 	.word	0x2040aaf8
  4016e4:	0040059d 	.word	0x0040059d
  4016e8:	2040aa18 	.word	0x2040aa18
  4016ec:	2040aa14 	.word	0x2040aa14

004016f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  4016f0:	b580      	push	{r7, lr}
  4016f2:	b084      	sub	sp, #16
  4016f4:	af00      	add	r7, sp, #0
  4016f6:	6078      	str	r0, [r7, #4]
  4016f8:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  4016fa:	687b      	ldr	r3, [r7, #4]
  4016fc:	2b00      	cmp	r3, #0
  4016fe:	d103      	bne.n	401708 <vTaskPlaceOnEventList+0x18>
  401700:	4b14      	ldr	r3, [pc, #80]	; (401754 <vTaskPlaceOnEventList+0x64>)
  401702:	4798      	blx	r3
  401704:	bf00      	nop
  401706:	e7fd      	b.n	401704 <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401708:	4b13      	ldr	r3, [pc, #76]	; (401758 <vTaskPlaceOnEventList+0x68>)
  40170a:	681b      	ldr	r3, [r3, #0]
  40170c:	3318      	adds	r3, #24
  40170e:	4619      	mov	r1, r3
  401710:	6878      	ldr	r0, [r7, #4]
  401712:	4b12      	ldr	r3, [pc, #72]	; (40175c <vTaskPlaceOnEventList+0x6c>)
  401714:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401716:	4b10      	ldr	r3, [pc, #64]	; (401758 <vTaskPlaceOnEventList+0x68>)
  401718:	681b      	ldr	r3, [r3, #0]
  40171a:	3304      	adds	r3, #4
  40171c:	4618      	mov	r0, r3
  40171e:	4b10      	ldr	r3, [pc, #64]	; (401760 <vTaskPlaceOnEventList+0x70>)
  401720:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401722:	683b      	ldr	r3, [r7, #0]
  401724:	f1b3 3fff 	cmp.w	r3, #4294967295
  401728:	d107      	bne.n	40173a <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  40172a:	4b0b      	ldr	r3, [pc, #44]	; (401758 <vTaskPlaceOnEventList+0x68>)
  40172c:	681b      	ldr	r3, [r3, #0]
  40172e:	3304      	adds	r3, #4
  401730:	4619      	mov	r1, r3
  401732:	480c      	ldr	r0, [pc, #48]	; (401764 <vTaskPlaceOnEventList+0x74>)
  401734:	4b0c      	ldr	r3, [pc, #48]	; (401768 <vTaskPlaceOnEventList+0x78>)
  401736:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  401738:	e007      	b.n	40174a <vTaskPlaceOnEventList+0x5a>
			xTimeToWake = xTickCount + xTicksToWait;
  40173a:	4b0c      	ldr	r3, [pc, #48]	; (40176c <vTaskPlaceOnEventList+0x7c>)
  40173c:	681a      	ldr	r2, [r3, #0]
  40173e:	683b      	ldr	r3, [r7, #0]
  401740:	4413      	add	r3, r2
  401742:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401744:	68f8      	ldr	r0, [r7, #12]
  401746:	4b0a      	ldr	r3, [pc, #40]	; (401770 <vTaskPlaceOnEventList+0x80>)
  401748:	4798      	blx	r3
}
  40174a:	bf00      	nop
  40174c:	3710      	adds	r7, #16
  40174e:	46bd      	mov	sp, r7
  401750:	bd80      	pop	{r7, pc}
  401752:	bf00      	nop
  401754:	0040059d 	.word	0x0040059d
  401758:	2040aa14 	.word	0x2040aa14
  40175c:	004002db 	.word	0x004002db
  401760:	0040034d 	.word	0x0040034d
  401764:	2040aad8 	.word	0x2040aad8
  401768:	0040028b 	.word	0x0040028b
  40176c:	2040aaf0 	.word	0x2040aaf0
  401770:	00401b4d 	.word	0x00401b4d

00401774 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  401774:	b580      	push	{r7, lr}
  401776:	b084      	sub	sp, #16
  401778:	af00      	add	r7, sp, #0
  40177a:	6078      	str	r0, [r7, #4]
  40177c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  40177e:	687b      	ldr	r3, [r7, #4]
  401780:	2b00      	cmp	r3, #0
  401782:	d103      	bne.n	40178c <vTaskPlaceOnEventListRestricted+0x18>
  401784:	4b0e      	ldr	r3, [pc, #56]	; (4017c0 <vTaskPlaceOnEventListRestricted+0x4c>)
  401786:	4798      	blx	r3
  401788:	bf00      	nop
  40178a:	e7fd      	b.n	401788 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  40178c:	4b0d      	ldr	r3, [pc, #52]	; (4017c4 <vTaskPlaceOnEventListRestricted+0x50>)
  40178e:	681b      	ldr	r3, [r3, #0]
  401790:	3318      	adds	r3, #24
  401792:	4619      	mov	r1, r3
  401794:	6878      	ldr	r0, [r7, #4]
  401796:	4b0c      	ldr	r3, [pc, #48]	; (4017c8 <vTaskPlaceOnEventListRestricted+0x54>)
  401798:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  40179a:	4b0a      	ldr	r3, [pc, #40]	; (4017c4 <vTaskPlaceOnEventListRestricted+0x50>)
  40179c:	681b      	ldr	r3, [r3, #0]
  40179e:	3304      	adds	r3, #4
  4017a0:	4618      	mov	r0, r3
  4017a2:	4b0a      	ldr	r3, [pc, #40]	; (4017cc <vTaskPlaceOnEventListRestricted+0x58>)
  4017a4:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  4017a6:	4b0a      	ldr	r3, [pc, #40]	; (4017d0 <vTaskPlaceOnEventListRestricted+0x5c>)
  4017a8:	681a      	ldr	r2, [r3, #0]
  4017aa:	683b      	ldr	r3, [r7, #0]
  4017ac:	4413      	add	r3, r2
  4017ae:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  4017b0:	68f8      	ldr	r0, [r7, #12]
  4017b2:	4b08      	ldr	r3, [pc, #32]	; (4017d4 <vTaskPlaceOnEventListRestricted+0x60>)
  4017b4:	4798      	blx	r3
	}
  4017b6:	bf00      	nop
  4017b8:	3710      	adds	r7, #16
  4017ba:	46bd      	mov	sp, r7
  4017bc:	bd80      	pop	{r7, pc}
  4017be:	bf00      	nop
  4017c0:	0040059d 	.word	0x0040059d
  4017c4:	2040aa14 	.word	0x2040aa14
  4017c8:	0040028b 	.word	0x0040028b
  4017cc:	0040034d 	.word	0x0040034d
  4017d0:	2040aaf0 	.word	0x2040aaf0
  4017d4:	00401b4d 	.word	0x00401b4d

004017d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  4017d8:	b580      	push	{r7, lr}
  4017da:	b084      	sub	sp, #16
  4017dc:	af00      	add	r7, sp, #0
  4017de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4017e0:	687b      	ldr	r3, [r7, #4]
  4017e2:	68db      	ldr	r3, [r3, #12]
  4017e4:	68db      	ldr	r3, [r3, #12]
  4017e6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  4017e8:	68bb      	ldr	r3, [r7, #8]
  4017ea:	2b00      	cmp	r3, #0
  4017ec:	d103      	bne.n	4017f6 <xTaskRemoveFromEventList+0x1e>
  4017ee:	4b21      	ldr	r3, [pc, #132]	; (401874 <xTaskRemoveFromEventList+0x9c>)
  4017f0:	4798      	blx	r3
  4017f2:	bf00      	nop
  4017f4:	e7fd      	b.n	4017f2 <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4017f6:	68bb      	ldr	r3, [r7, #8]
  4017f8:	3318      	adds	r3, #24
  4017fa:	4618      	mov	r0, r3
  4017fc:	4b1e      	ldr	r3, [pc, #120]	; (401878 <xTaskRemoveFromEventList+0xa0>)
  4017fe:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401800:	4b1e      	ldr	r3, [pc, #120]	; (40187c <xTaskRemoveFromEventList+0xa4>)
  401802:	681b      	ldr	r3, [r3, #0]
  401804:	2b00      	cmp	r3, #0
  401806:	d11d      	bne.n	401844 <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401808:	68bb      	ldr	r3, [r7, #8]
  40180a:	3304      	adds	r3, #4
  40180c:	4618      	mov	r0, r3
  40180e:	4b1a      	ldr	r3, [pc, #104]	; (401878 <xTaskRemoveFromEventList+0xa0>)
  401810:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  401812:	68bb      	ldr	r3, [r7, #8]
  401814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401816:	4b1a      	ldr	r3, [pc, #104]	; (401880 <xTaskRemoveFromEventList+0xa8>)
  401818:	681b      	ldr	r3, [r3, #0]
  40181a:	429a      	cmp	r2, r3
  40181c:	d903      	bls.n	401826 <xTaskRemoveFromEventList+0x4e>
  40181e:	68bb      	ldr	r3, [r7, #8]
  401820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401822:	4a17      	ldr	r2, [pc, #92]	; (401880 <xTaskRemoveFromEventList+0xa8>)
  401824:	6013      	str	r3, [r2, #0]
  401826:	68bb      	ldr	r3, [r7, #8]
  401828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40182a:	4613      	mov	r3, r2
  40182c:	009b      	lsls	r3, r3, #2
  40182e:	4413      	add	r3, r2
  401830:	009b      	lsls	r3, r3, #2
  401832:	4a14      	ldr	r2, [pc, #80]	; (401884 <xTaskRemoveFromEventList+0xac>)
  401834:	441a      	add	r2, r3
  401836:	68bb      	ldr	r3, [r7, #8]
  401838:	3304      	adds	r3, #4
  40183a:	4619      	mov	r1, r3
  40183c:	4610      	mov	r0, r2
  40183e:	4b12      	ldr	r3, [pc, #72]	; (401888 <xTaskRemoveFromEventList+0xb0>)
  401840:	4798      	blx	r3
  401842:	e005      	b.n	401850 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401844:	68bb      	ldr	r3, [r7, #8]
  401846:	3318      	adds	r3, #24
  401848:	4619      	mov	r1, r3
  40184a:	4810      	ldr	r0, [pc, #64]	; (40188c <xTaskRemoveFromEventList+0xb4>)
  40184c:	4b0e      	ldr	r3, [pc, #56]	; (401888 <xTaskRemoveFromEventList+0xb0>)
  40184e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401850:	68bb      	ldr	r3, [r7, #8]
  401852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401854:	4b0e      	ldr	r3, [pc, #56]	; (401890 <xTaskRemoveFromEventList+0xb8>)
  401856:	681b      	ldr	r3, [r3, #0]
  401858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40185a:	429a      	cmp	r2, r3
  40185c:	d302      	bcc.n	401864 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  40185e:	2301      	movs	r3, #1
  401860:	60fb      	str	r3, [r7, #12]
  401862:	e001      	b.n	401868 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  401864:	2300      	movs	r3, #0
  401866:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  401868:	68fb      	ldr	r3, [r7, #12]
}
  40186a:	4618      	mov	r0, r3
  40186c:	3710      	adds	r7, #16
  40186e:	46bd      	mov	sp, r7
  401870:	bd80      	pop	{r7, pc}
  401872:	bf00      	nop
  401874:	0040059d 	.word	0x0040059d
  401878:	0040034d 	.word	0x0040034d
  40187c:	2040ab00 	.word	0x2040ab00
  401880:	2040aaf8 	.word	0x2040aaf8
  401884:	2040aa18 	.word	0x2040aa18
  401888:	0040028b 	.word	0x0040028b
  40188c:	2040aaac 	.word	0x2040aaac
  401890:	2040aa14 	.word	0x2040aa14

00401894 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  401894:	b580      	push	{r7, lr}
  401896:	b082      	sub	sp, #8
  401898:	af00      	add	r7, sp, #0
  40189a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  40189c:	687b      	ldr	r3, [r7, #4]
  40189e:	2b00      	cmp	r3, #0
  4018a0:	d103      	bne.n	4018aa <vTaskSetTimeOutState+0x16>
  4018a2:	4b08      	ldr	r3, [pc, #32]	; (4018c4 <vTaskSetTimeOutState+0x30>)
  4018a4:	4798      	blx	r3
  4018a6:	bf00      	nop
  4018a8:	e7fd      	b.n	4018a6 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4018aa:	4b07      	ldr	r3, [pc, #28]	; (4018c8 <vTaskSetTimeOutState+0x34>)
  4018ac:	681a      	ldr	r2, [r3, #0]
  4018ae:	687b      	ldr	r3, [r7, #4]
  4018b0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4018b2:	4b06      	ldr	r3, [pc, #24]	; (4018cc <vTaskSetTimeOutState+0x38>)
  4018b4:	681a      	ldr	r2, [r3, #0]
  4018b6:	687b      	ldr	r3, [r7, #4]
  4018b8:	605a      	str	r2, [r3, #4]
}
  4018ba:	bf00      	nop
  4018bc:	3708      	adds	r7, #8
  4018be:	46bd      	mov	sp, r7
  4018c0:	bd80      	pop	{r7, pc}
  4018c2:	bf00      	nop
  4018c4:	0040059d 	.word	0x0040059d
  4018c8:	2040ab0c 	.word	0x2040ab0c
  4018cc:	2040aaf0 	.word	0x2040aaf0

004018d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  4018d0:	b580      	push	{r7, lr}
  4018d2:	b084      	sub	sp, #16
  4018d4:	af00      	add	r7, sp, #0
  4018d6:	6078      	str	r0, [r7, #4]
  4018d8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  4018da:	687b      	ldr	r3, [r7, #4]
  4018dc:	2b00      	cmp	r3, #0
  4018de:	d103      	bne.n	4018e8 <xTaskCheckForTimeOut+0x18>
  4018e0:	4b22      	ldr	r3, [pc, #136]	; (40196c <xTaskCheckForTimeOut+0x9c>)
  4018e2:	4798      	blx	r3
  4018e4:	bf00      	nop
  4018e6:	e7fd      	b.n	4018e4 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  4018e8:	683b      	ldr	r3, [r7, #0]
  4018ea:	2b00      	cmp	r3, #0
  4018ec:	d103      	bne.n	4018f6 <xTaskCheckForTimeOut+0x26>
  4018ee:	4b1f      	ldr	r3, [pc, #124]	; (40196c <xTaskCheckForTimeOut+0x9c>)
  4018f0:	4798      	blx	r3
  4018f2:	bf00      	nop
  4018f4:	e7fd      	b.n	4018f2 <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  4018f6:	4b1e      	ldr	r3, [pc, #120]	; (401970 <xTaskCheckForTimeOut+0xa0>)
  4018f8:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4018fa:	683b      	ldr	r3, [r7, #0]
  4018fc:	681b      	ldr	r3, [r3, #0]
  4018fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401902:	d102      	bne.n	40190a <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  401904:	2300      	movs	r3, #0
  401906:	60fb      	str	r3, [r7, #12]
  401908:	e029      	b.n	40195e <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  40190a:	687b      	ldr	r3, [r7, #4]
  40190c:	681a      	ldr	r2, [r3, #0]
  40190e:	4b19      	ldr	r3, [pc, #100]	; (401974 <xTaskCheckForTimeOut+0xa4>)
  401910:	681b      	ldr	r3, [r3, #0]
  401912:	429a      	cmp	r2, r3
  401914:	d008      	beq.n	401928 <xTaskCheckForTimeOut+0x58>
  401916:	687b      	ldr	r3, [r7, #4]
  401918:	685a      	ldr	r2, [r3, #4]
  40191a:	4b17      	ldr	r3, [pc, #92]	; (401978 <xTaskCheckForTimeOut+0xa8>)
  40191c:	681b      	ldr	r3, [r3, #0]
  40191e:	429a      	cmp	r2, r3
  401920:	d802      	bhi.n	401928 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401922:	2301      	movs	r3, #1
  401924:	60fb      	str	r3, [r7, #12]
  401926:	e01a      	b.n	40195e <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  401928:	4b13      	ldr	r3, [pc, #76]	; (401978 <xTaskCheckForTimeOut+0xa8>)
  40192a:	681a      	ldr	r2, [r3, #0]
  40192c:	687b      	ldr	r3, [r7, #4]
  40192e:	685b      	ldr	r3, [r3, #4]
  401930:	1ad2      	subs	r2, r2, r3
  401932:	683b      	ldr	r3, [r7, #0]
  401934:	681b      	ldr	r3, [r3, #0]
  401936:	429a      	cmp	r2, r3
  401938:	d20f      	bcs.n	40195a <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  40193a:	4b0f      	ldr	r3, [pc, #60]	; (401978 <xTaskCheckForTimeOut+0xa8>)
  40193c:	681a      	ldr	r2, [r3, #0]
  40193e:	687b      	ldr	r3, [r7, #4]
  401940:	685b      	ldr	r3, [r3, #4]
  401942:	1ad3      	subs	r3, r2, r3
  401944:	683a      	ldr	r2, [r7, #0]
  401946:	6812      	ldr	r2, [r2, #0]
  401948:	1ad2      	subs	r2, r2, r3
  40194a:	683b      	ldr	r3, [r7, #0]
  40194c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40194e:	6878      	ldr	r0, [r7, #4]
  401950:	4b0a      	ldr	r3, [pc, #40]	; (40197c <xTaskCheckForTimeOut+0xac>)
  401952:	4798      	blx	r3
			xReturn = pdFALSE;
  401954:	2300      	movs	r3, #0
  401956:	60fb      	str	r3, [r7, #12]
  401958:	e001      	b.n	40195e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  40195a:	2301      	movs	r3, #1
  40195c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  40195e:	4b08      	ldr	r3, [pc, #32]	; (401980 <xTaskCheckForTimeOut+0xb0>)
  401960:	4798      	blx	r3

	return xReturn;
  401962:	68fb      	ldr	r3, [r7, #12]
}
  401964:	4618      	mov	r0, r3
  401966:	3710      	adds	r7, #16
  401968:	46bd      	mov	sp, r7
  40196a:	bd80      	pop	{r7, pc}
  40196c:	0040059d 	.word	0x0040059d
  401970:	00400555 	.word	0x00400555
  401974:	2040ab0c 	.word	0x2040ab0c
  401978:	2040aaf0 	.word	0x2040aaf0
  40197c:	00401895 	.word	0x00401895
  401980:	00400575 	.word	0x00400575

00401984 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  401984:	b480      	push	{r7}
  401986:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  401988:	4b03      	ldr	r3, [pc, #12]	; (401998 <vTaskMissedYield+0x14>)
  40198a:	2201      	movs	r2, #1
  40198c:	601a      	str	r2, [r3, #0]
}
  40198e:	bf00      	nop
  401990:	46bd      	mov	sp, r7
  401992:	f85d 7b04 	ldr.w	r7, [sp], #4
  401996:	4770      	bx	lr
  401998:	2040ab08 	.word	0x2040ab08

0040199c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  40199c:	b580      	push	{r7, lr}
  40199e:	b082      	sub	sp, #8
  4019a0:	af00      	add	r7, sp, #0
  4019a2:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  4019a4:	4b04      	ldr	r3, [pc, #16]	; (4019b8 <prvIdleTask+0x1c>)
  4019a6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  4019a8:	4b04      	ldr	r3, [pc, #16]	; (4019bc <prvIdleTask+0x20>)
  4019aa:	681b      	ldr	r3, [r3, #0]
  4019ac:	2b01      	cmp	r3, #1
  4019ae:	d9f9      	bls.n	4019a4 <prvIdleTask+0x8>
			{
				taskYIELD();
  4019b0:	4b03      	ldr	r3, [pc, #12]	; (4019c0 <prvIdleTask+0x24>)
  4019b2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
  4019b4:	e7f6      	b.n	4019a4 <prvIdleTask+0x8>
  4019b6:	bf00      	nop
  4019b8:	00401abd 	.word	0x00401abd
  4019bc:	2040aa18 	.word	0x2040aa18
  4019c0:	00400539 	.word	0x00400539

004019c4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  4019c4:	b580      	push	{r7, lr}
  4019c6:	b084      	sub	sp, #16
  4019c8:	af00      	add	r7, sp, #0
  4019ca:	60f8      	str	r0, [r7, #12]
  4019cc:	60b9      	str	r1, [r7, #8]
  4019ce:	607a      	str	r2, [r7, #4]
  4019d0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  4019d2:	68fb      	ldr	r3, [r7, #12]
  4019d4:	3334      	adds	r3, #52	; 0x34
  4019d6:	220a      	movs	r2, #10
  4019d8:	68b9      	ldr	r1, [r7, #8]
  4019da:	4618      	mov	r0, r3
  4019dc:	4b14      	ldr	r3, [pc, #80]	; (401a30 <prvInitialiseTCBVariables+0x6c>)
  4019de:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  4019e0:	68fb      	ldr	r3, [r7, #12]
  4019e2:	2200      	movs	r2, #0
  4019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  4019e8:	687b      	ldr	r3, [r7, #4]
  4019ea:	2b04      	cmp	r3, #4
  4019ec:	d901      	bls.n	4019f2 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  4019ee:	2304      	movs	r3, #4
  4019f0:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  4019f2:	68fb      	ldr	r3, [r7, #12]
  4019f4:	687a      	ldr	r2, [r7, #4]
  4019f6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4019f8:	68fb      	ldr	r3, [r7, #12]
  4019fa:	687a      	ldr	r2, [r7, #4]
  4019fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4019fe:	68fb      	ldr	r3, [r7, #12]
  401a00:	3304      	adds	r3, #4
  401a02:	4618      	mov	r0, r3
  401a04:	4b0b      	ldr	r3, [pc, #44]	; (401a34 <prvInitialiseTCBVariables+0x70>)
  401a06:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401a08:	68fb      	ldr	r3, [r7, #12]
  401a0a:	3318      	adds	r3, #24
  401a0c:	4618      	mov	r0, r3
  401a0e:	4b09      	ldr	r3, [pc, #36]	; (401a34 <prvInitialiseTCBVariables+0x70>)
  401a10:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401a12:	68fb      	ldr	r3, [r7, #12]
  401a14:	68fa      	ldr	r2, [r7, #12]
  401a16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  401a18:	687b      	ldr	r3, [r7, #4]
  401a1a:	f1c3 0205 	rsb	r2, r3, #5
  401a1e:	68fb      	ldr	r3, [r7, #12]
  401a20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401a22:	68fb      	ldr	r3, [r7, #12]
  401a24:	68fa      	ldr	r2, [r7, #12]
  401a26:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  401a28:	bf00      	nop
  401a2a:	3710      	adds	r7, #16
  401a2c:	46bd      	mov	sp, r7
  401a2e:	bd80      	pop	{r7, pc}
  401a30:	0040625d 	.word	0x0040625d
  401a34:	00400271 	.word	0x00400271

00401a38 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  401a38:	b580      	push	{r7, lr}
  401a3a:	b082      	sub	sp, #8
  401a3c:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401a3e:	2300      	movs	r3, #0
  401a40:	607b      	str	r3, [r7, #4]
  401a42:	e00c      	b.n	401a5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  401a44:	687a      	ldr	r2, [r7, #4]
  401a46:	4613      	mov	r3, r2
  401a48:	009b      	lsls	r3, r3, #2
  401a4a:	4413      	add	r3, r2
  401a4c:	009b      	lsls	r3, r3, #2
  401a4e:	4a12      	ldr	r2, [pc, #72]	; (401a98 <prvInitialiseTaskLists+0x60>)
  401a50:	4413      	add	r3, r2
  401a52:	4618      	mov	r0, r3
  401a54:	4b11      	ldr	r3, [pc, #68]	; (401a9c <prvInitialiseTaskLists+0x64>)
  401a56:	4798      	blx	r3
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  401a58:	687b      	ldr	r3, [r7, #4]
  401a5a:	3301      	adds	r3, #1
  401a5c:	607b      	str	r3, [r7, #4]
  401a5e:	687b      	ldr	r3, [r7, #4]
  401a60:	2b04      	cmp	r3, #4
  401a62:	d9ef      	bls.n	401a44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  401a64:	480e      	ldr	r0, [pc, #56]	; (401aa0 <prvInitialiseTaskLists+0x68>)
  401a66:	4b0d      	ldr	r3, [pc, #52]	; (401a9c <prvInitialiseTaskLists+0x64>)
  401a68:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  401a6a:	480e      	ldr	r0, [pc, #56]	; (401aa4 <prvInitialiseTaskLists+0x6c>)
  401a6c:	4b0b      	ldr	r3, [pc, #44]	; (401a9c <prvInitialiseTaskLists+0x64>)
  401a6e:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  401a70:	480d      	ldr	r0, [pc, #52]	; (401aa8 <prvInitialiseTaskLists+0x70>)
  401a72:	4b0a      	ldr	r3, [pc, #40]	; (401a9c <prvInitialiseTaskLists+0x64>)
  401a74:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  401a76:	480d      	ldr	r0, [pc, #52]	; (401aac <prvInitialiseTaskLists+0x74>)
  401a78:	4b08      	ldr	r3, [pc, #32]	; (401a9c <prvInitialiseTaskLists+0x64>)
  401a7a:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  401a7c:	480c      	ldr	r0, [pc, #48]	; (401ab0 <prvInitialiseTaskLists+0x78>)
  401a7e:	4b07      	ldr	r3, [pc, #28]	; (401a9c <prvInitialiseTaskLists+0x64>)
  401a80:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401a82:	4b0c      	ldr	r3, [pc, #48]	; (401ab4 <prvInitialiseTaskLists+0x7c>)
  401a84:	4a06      	ldr	r2, [pc, #24]	; (401aa0 <prvInitialiseTaskLists+0x68>)
  401a86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401a88:	4b0b      	ldr	r3, [pc, #44]	; (401ab8 <prvInitialiseTaskLists+0x80>)
  401a8a:	4a06      	ldr	r2, [pc, #24]	; (401aa4 <prvInitialiseTaskLists+0x6c>)
  401a8c:	601a      	str	r2, [r3, #0]
}
  401a8e:	bf00      	nop
  401a90:	3708      	adds	r7, #8
  401a92:	46bd      	mov	sp, r7
  401a94:	bd80      	pop	{r7, pc}
  401a96:	bf00      	nop
  401a98:	2040aa18 	.word	0x2040aa18
  401a9c:	00400231 	.word	0x00400231
  401aa0:	2040aa7c 	.word	0x2040aa7c
  401aa4:	2040aa90 	.word	0x2040aa90
  401aa8:	2040aaac 	.word	0x2040aaac
  401aac:	2040aac0 	.word	0x2040aac0
  401ab0:	2040aad8 	.word	0x2040aad8
  401ab4:	2040aaa4 	.word	0x2040aaa4
  401ab8:	2040aaa8 	.word	0x2040aaa8

00401abc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  401abc:	b580      	push	{r7, lr}
  401abe:	b082      	sub	sp, #8
  401ac0:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401ac2:	e028      	b.n	401b16 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  401ac4:	4b18      	ldr	r3, [pc, #96]	; (401b28 <prvCheckTasksWaitingTermination+0x6c>)
  401ac6:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401ac8:	4b18      	ldr	r3, [pc, #96]	; (401b2c <prvCheckTasksWaitingTermination+0x70>)
  401aca:	681b      	ldr	r3, [r3, #0]
  401acc:	2b00      	cmp	r3, #0
  401ace:	bf0c      	ite	eq
  401ad0:	2301      	moveq	r3, #1
  401ad2:	2300      	movne	r3, #0
  401ad4:	b2db      	uxtb	r3, r3
  401ad6:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  401ad8:	4b15      	ldr	r3, [pc, #84]	; (401b30 <prvCheckTasksWaitingTermination+0x74>)
  401ada:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  401adc:	687b      	ldr	r3, [r7, #4]
  401ade:	2b00      	cmp	r3, #0
  401ae0:	d119      	bne.n	401b16 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  401ae2:	4b14      	ldr	r3, [pc, #80]	; (401b34 <prvCheckTasksWaitingTermination+0x78>)
  401ae4:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  401ae6:	4b11      	ldr	r3, [pc, #68]	; (401b2c <prvCheckTasksWaitingTermination+0x70>)
  401ae8:	68db      	ldr	r3, [r3, #12]
  401aea:	68db      	ldr	r3, [r3, #12]
  401aec:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401aee:	683b      	ldr	r3, [r7, #0]
  401af0:	3304      	adds	r3, #4
  401af2:	4618      	mov	r0, r3
  401af4:	4b10      	ldr	r3, [pc, #64]	; (401b38 <prvCheckTasksWaitingTermination+0x7c>)
  401af6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401af8:	4b10      	ldr	r3, [pc, #64]	; (401b3c <prvCheckTasksWaitingTermination+0x80>)
  401afa:	681b      	ldr	r3, [r3, #0]
  401afc:	3b01      	subs	r3, #1
  401afe:	4a0f      	ldr	r2, [pc, #60]	; (401b3c <prvCheckTasksWaitingTermination+0x80>)
  401b00:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401b02:	4b0f      	ldr	r3, [pc, #60]	; (401b40 <prvCheckTasksWaitingTermination+0x84>)
  401b04:	681b      	ldr	r3, [r3, #0]
  401b06:	3b01      	subs	r3, #1
  401b08:	4a0d      	ldr	r2, [pc, #52]	; (401b40 <prvCheckTasksWaitingTermination+0x84>)
  401b0a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  401b0c:	4b0d      	ldr	r3, [pc, #52]	; (401b44 <prvCheckTasksWaitingTermination+0x88>)
  401b0e:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  401b10:	6838      	ldr	r0, [r7, #0]
  401b12:	4b0d      	ldr	r3, [pc, #52]	; (401b48 <prvCheckTasksWaitingTermination+0x8c>)
  401b14:	4798      	blx	r3
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401b16:	4b0a      	ldr	r3, [pc, #40]	; (401b40 <prvCheckTasksWaitingTermination+0x84>)
  401b18:	681b      	ldr	r3, [r3, #0]
  401b1a:	2b00      	cmp	r3, #0
  401b1c:	d1d2      	bne.n	401ac4 <prvCheckTasksWaitingTermination+0x8>
			}
		}
	}
	#endif
}
  401b1e:	bf00      	nop
  401b20:	3708      	adds	r7, #8
  401b22:	46bd      	mov	sp, r7
  401b24:	bd80      	pop	{r7, pc}
  401b26:	bf00      	nop
  401b28:	00401399 	.word	0x00401399
  401b2c:	2040aac0 	.word	0x2040aac0
  401b30:	004013b5 	.word	0x004013b5
  401b34:	00400555 	.word	0x00400555
  401b38:	0040034d 	.word	0x0040034d
  401b3c:	2040aaec 	.word	0x2040aaec
  401b40:	2040aad4 	.word	0x2040aad4
  401b44:	00400575 	.word	0x00400575
  401b48:	00401c2d 	.word	0x00401c2d

00401b4c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  401b4c:	b580      	push	{r7, lr}
  401b4e:	b082      	sub	sp, #8
  401b50:	af00      	add	r7, sp, #0
  401b52:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401b54:	4b13      	ldr	r3, [pc, #76]	; (401ba4 <prvAddCurrentTaskToDelayedList+0x58>)
  401b56:	681b      	ldr	r3, [r3, #0]
  401b58:	687a      	ldr	r2, [r7, #4]
  401b5a:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  401b5c:	4b12      	ldr	r3, [pc, #72]	; (401ba8 <prvAddCurrentTaskToDelayedList+0x5c>)
  401b5e:	681b      	ldr	r3, [r3, #0]
  401b60:	687a      	ldr	r2, [r7, #4]
  401b62:	429a      	cmp	r2, r3
  401b64:	d209      	bcs.n	401b7a <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401b66:	4b11      	ldr	r3, [pc, #68]	; (401bac <prvAddCurrentTaskToDelayedList+0x60>)
  401b68:	681a      	ldr	r2, [r3, #0]
  401b6a:	4b0e      	ldr	r3, [pc, #56]	; (401ba4 <prvAddCurrentTaskToDelayedList+0x58>)
  401b6c:	681b      	ldr	r3, [r3, #0]
  401b6e:	3304      	adds	r3, #4
  401b70:	4619      	mov	r1, r3
  401b72:	4610      	mov	r0, r2
  401b74:	4b0e      	ldr	r3, [pc, #56]	; (401bb0 <prvAddCurrentTaskToDelayedList+0x64>)
  401b76:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  401b78:	e010      	b.n	401b9c <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401b7a:	4b0e      	ldr	r3, [pc, #56]	; (401bb4 <prvAddCurrentTaskToDelayedList+0x68>)
  401b7c:	681a      	ldr	r2, [r3, #0]
  401b7e:	4b09      	ldr	r3, [pc, #36]	; (401ba4 <prvAddCurrentTaskToDelayedList+0x58>)
  401b80:	681b      	ldr	r3, [r3, #0]
  401b82:	3304      	adds	r3, #4
  401b84:	4619      	mov	r1, r3
  401b86:	4610      	mov	r0, r2
  401b88:	4b09      	ldr	r3, [pc, #36]	; (401bb0 <prvAddCurrentTaskToDelayedList+0x64>)
  401b8a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401b8c:	4b0a      	ldr	r3, [pc, #40]	; (401bb8 <prvAddCurrentTaskToDelayedList+0x6c>)
  401b8e:	681b      	ldr	r3, [r3, #0]
  401b90:	687a      	ldr	r2, [r7, #4]
  401b92:	429a      	cmp	r2, r3
  401b94:	d202      	bcs.n	401b9c <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
  401b96:	4a08      	ldr	r2, [pc, #32]	; (401bb8 <prvAddCurrentTaskToDelayedList+0x6c>)
  401b98:	687b      	ldr	r3, [r7, #4]
  401b9a:	6013      	str	r3, [r2, #0]
}
  401b9c:	bf00      	nop
  401b9e:	3708      	adds	r7, #8
  401ba0:	46bd      	mov	sp, r7
  401ba2:	bd80      	pop	{r7, pc}
  401ba4:	2040aa14 	.word	0x2040aa14
  401ba8:	2040aaf0 	.word	0x2040aaf0
  401bac:	2040aaa8 	.word	0x2040aaa8
  401bb0:	004002db 	.word	0x004002db
  401bb4:	2040aaa4 	.word	0x2040aaa4
  401bb8:	20400008 	.word	0x20400008

00401bbc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  401bbc:	b580      	push	{r7, lr}
  401bbe:	b084      	sub	sp, #16
  401bc0:	af00      	add	r7, sp, #0
  401bc2:	4603      	mov	r3, r0
  401bc4:	6039      	str	r1, [r7, #0]
  401bc6:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  401bc8:	204c      	movs	r0, #76	; 0x4c
  401bca:	4b15      	ldr	r3, [pc, #84]	; (401c20 <prvAllocateTCBAndStack+0x64>)
  401bcc:	4798      	blx	r3
  401bce:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  401bd0:	68fb      	ldr	r3, [r7, #12]
  401bd2:	2b00      	cmp	r3, #0
  401bd4:	d01e      	beq.n	401c14 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  401bd6:	683b      	ldr	r3, [r7, #0]
  401bd8:	2b00      	cmp	r3, #0
  401bda:	d106      	bne.n	401bea <prvAllocateTCBAndStack+0x2e>
  401bdc:	88fb      	ldrh	r3, [r7, #6]
  401bde:	009b      	lsls	r3, r3, #2
  401be0:	4618      	mov	r0, r3
  401be2:	4b0f      	ldr	r3, [pc, #60]	; (401c20 <prvAllocateTCBAndStack+0x64>)
  401be4:	4798      	blx	r3
  401be6:	4603      	mov	r3, r0
  401be8:	e000      	b.n	401bec <prvAllocateTCBAndStack+0x30>
  401bea:	683b      	ldr	r3, [r7, #0]
  401bec:	68fa      	ldr	r2, [r7, #12]
  401bee:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  401bf0:	68fb      	ldr	r3, [r7, #12]
  401bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bf4:	2b00      	cmp	r3, #0
  401bf6:	d105      	bne.n	401c04 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  401bf8:	68f8      	ldr	r0, [r7, #12]
  401bfa:	4b0a      	ldr	r3, [pc, #40]	; (401c24 <prvAllocateTCBAndStack+0x68>)
  401bfc:	4798      	blx	r3
			pxNewTCB = NULL;
  401bfe:	2300      	movs	r3, #0
  401c00:	60fb      	str	r3, [r7, #12]
  401c02:	e007      	b.n	401c14 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  401c04:	68fb      	ldr	r3, [r7, #12]
  401c06:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401c08:	88fb      	ldrh	r3, [r7, #6]
  401c0a:	009b      	lsls	r3, r3, #2
  401c0c:	461a      	mov	r2, r3
  401c0e:	21a5      	movs	r1, #165	; 0xa5
  401c10:	4b05      	ldr	r3, [pc, #20]	; (401c28 <prvAllocateTCBAndStack+0x6c>)
  401c12:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  401c14:	68fb      	ldr	r3, [r7, #12]
}
  401c16:	4618      	mov	r0, r3
  401c18:	3710      	adds	r7, #16
  401c1a:	46bd      	mov	sp, r7
  401c1c:	bd80      	pop	{r7, pc}
  401c1e:	bf00      	nop
  401c20:	00400685 	.word	0x00400685
  401c24:	00400791 	.word	0x00400791
  401c28:	00405e95 	.word	0x00405e95

00401c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  401c2c:	b580      	push	{r7, lr}
  401c2e:	b082      	sub	sp, #8
  401c30:	af00      	add	r7, sp, #0
  401c32:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401c34:	687b      	ldr	r3, [r7, #4]
  401c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c38:	4618      	mov	r0, r3
  401c3a:	4b04      	ldr	r3, [pc, #16]	; (401c4c <prvDeleteTCB+0x20>)
  401c3c:	4798      	blx	r3
		vPortFree( pxTCB );
  401c3e:	6878      	ldr	r0, [r7, #4]
  401c40:	4b02      	ldr	r3, [pc, #8]	; (401c4c <prvDeleteTCB+0x20>)
  401c42:	4798      	blx	r3
	}
  401c44:	bf00      	nop
  401c46:	3708      	adds	r7, #8
  401c48:	46bd      	mov	sp, r7
  401c4a:	bd80      	pop	{r7, pc}
  401c4c:	00400791 	.word	0x00400791

00401c50 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  401c50:	b480      	push	{r7}
  401c52:	b083      	sub	sp, #12
  401c54:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401c56:	4b05      	ldr	r3, [pc, #20]	; (401c6c <xTaskGetCurrentTaskHandle+0x1c>)
  401c58:	681b      	ldr	r3, [r3, #0]
  401c5a:	607b      	str	r3, [r7, #4]

		return xReturn;
  401c5c:	687b      	ldr	r3, [r7, #4]
	}
  401c5e:	4618      	mov	r0, r3
  401c60:	370c      	adds	r7, #12
  401c62:	46bd      	mov	sp, r7
  401c64:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c68:	4770      	bx	lr
  401c6a:	bf00      	nop
  401c6c:	2040aa14 	.word	0x2040aa14

00401c70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  401c70:	b480      	push	{r7}
  401c72:	b083      	sub	sp, #12
  401c74:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  401c76:	4b0b      	ldr	r3, [pc, #44]	; (401ca4 <xTaskGetSchedulerState+0x34>)
  401c78:	681b      	ldr	r3, [r3, #0]
  401c7a:	2b00      	cmp	r3, #0
  401c7c:	d102      	bne.n	401c84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401c7e:	2300      	movs	r3, #0
  401c80:	607b      	str	r3, [r7, #4]
  401c82:	e008      	b.n	401c96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401c84:	4b08      	ldr	r3, [pc, #32]	; (401ca8 <xTaskGetSchedulerState+0x38>)
  401c86:	681b      	ldr	r3, [r3, #0]
  401c88:	2b00      	cmp	r3, #0
  401c8a:	d102      	bne.n	401c92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  401c8c:	2301      	movs	r3, #1
  401c8e:	607b      	str	r3, [r7, #4]
  401c90:	e001      	b.n	401c96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401c92:	2302      	movs	r3, #2
  401c94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  401c96:	687b      	ldr	r3, [r7, #4]
	}
  401c98:	4618      	mov	r0, r3
  401c9a:	370c      	adds	r7, #12
  401c9c:	46bd      	mov	sp, r7
  401c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ca2:	4770      	bx	lr
  401ca4:	2040aafc 	.word	0x2040aafc
  401ca8:	2040ab00 	.word	0x2040ab00

00401cac <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  401cac:	b580      	push	{r7, lr}
  401cae:	b084      	sub	sp, #16
  401cb0:	af00      	add	r7, sp, #0
  401cb2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401cb4:	687b      	ldr	r3, [r7, #4]
  401cb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401cb8:	687b      	ldr	r3, [r7, #4]
  401cba:	2b00      	cmp	r3, #0
  401cbc:	d041      	beq.n	401d42 <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401cbe:	68fb      	ldr	r3, [r7, #12]
  401cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401cc2:	4b22      	ldr	r3, [pc, #136]	; (401d4c <vTaskPriorityInherit+0xa0>)
  401cc4:	681b      	ldr	r3, [r3, #0]
  401cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401cc8:	429a      	cmp	r2, r3
  401cca:	d23a      	bcs.n	401d42 <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  401ccc:	4b1f      	ldr	r3, [pc, #124]	; (401d4c <vTaskPriorityInherit+0xa0>)
  401cce:	681b      	ldr	r3, [r3, #0]
  401cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401cd2:	f1c3 0205 	rsb	r2, r3, #5
  401cd6:	68fb      	ldr	r3, [r7, #12]
  401cd8:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401cda:	68fb      	ldr	r3, [r7, #12]
  401cdc:	6959      	ldr	r1, [r3, #20]
  401cde:	68fb      	ldr	r3, [r7, #12]
  401ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401ce2:	4613      	mov	r3, r2
  401ce4:	009b      	lsls	r3, r3, #2
  401ce6:	4413      	add	r3, r2
  401ce8:	009b      	lsls	r3, r3, #2
  401cea:	4a19      	ldr	r2, [pc, #100]	; (401d50 <vTaskPriorityInherit+0xa4>)
  401cec:	4413      	add	r3, r2
  401cee:	4299      	cmp	r1, r3
  401cf0:	d122      	bne.n	401d38 <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401cf2:	68fb      	ldr	r3, [r7, #12]
  401cf4:	3304      	adds	r3, #4
  401cf6:	4618      	mov	r0, r3
  401cf8:	4b16      	ldr	r3, [pc, #88]	; (401d54 <vTaskPriorityInherit+0xa8>)
  401cfa:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401cfc:	4b13      	ldr	r3, [pc, #76]	; (401d4c <vTaskPriorityInherit+0xa0>)
  401cfe:	681b      	ldr	r3, [r3, #0]
  401d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d02:	68fb      	ldr	r3, [r7, #12]
  401d04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  401d06:	68fb      	ldr	r3, [r7, #12]
  401d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d0a:	4b13      	ldr	r3, [pc, #76]	; (401d58 <vTaskPriorityInherit+0xac>)
  401d0c:	681b      	ldr	r3, [r3, #0]
  401d0e:	429a      	cmp	r2, r3
  401d10:	d903      	bls.n	401d1a <vTaskPriorityInherit+0x6e>
  401d12:	68fb      	ldr	r3, [r7, #12]
  401d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d16:	4a10      	ldr	r2, [pc, #64]	; (401d58 <vTaskPriorityInherit+0xac>)
  401d18:	6013      	str	r3, [r2, #0]
  401d1a:	68fb      	ldr	r3, [r7, #12]
  401d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d1e:	4613      	mov	r3, r2
  401d20:	009b      	lsls	r3, r3, #2
  401d22:	4413      	add	r3, r2
  401d24:	009b      	lsls	r3, r3, #2
  401d26:	4a0a      	ldr	r2, [pc, #40]	; (401d50 <vTaskPriorityInherit+0xa4>)
  401d28:	441a      	add	r2, r3
  401d2a:	68fb      	ldr	r3, [r7, #12]
  401d2c:	3304      	adds	r3, #4
  401d2e:	4619      	mov	r1, r3
  401d30:	4610      	mov	r0, r2
  401d32:	4b0a      	ldr	r3, [pc, #40]	; (401d5c <vTaskPriorityInherit+0xb0>)
  401d34:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  401d36:	e004      	b.n	401d42 <vTaskPriorityInherit+0x96>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401d38:	4b04      	ldr	r3, [pc, #16]	; (401d4c <vTaskPriorityInherit+0xa0>)
  401d3a:	681b      	ldr	r3, [r3, #0]
  401d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d3e:	68fb      	ldr	r3, [r7, #12]
  401d40:	62da      	str	r2, [r3, #44]	; 0x2c
	}
  401d42:	bf00      	nop
  401d44:	3710      	adds	r7, #16
  401d46:	46bd      	mov	sp, r7
  401d48:	bd80      	pop	{r7, pc}
  401d4a:	bf00      	nop
  401d4c:	2040aa14 	.word	0x2040aa14
  401d50:	2040aa18 	.word	0x2040aa18
  401d54:	0040034d 	.word	0x0040034d
  401d58:	2040aaf8 	.word	0x2040aaf8
  401d5c:	0040028b 	.word	0x0040028b

00401d60 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  401d60:	b580      	push	{r7, lr}
  401d62:	b084      	sub	sp, #16
  401d64:	af00      	add	r7, sp, #0
  401d66:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401d68:	687b      	ldr	r3, [r7, #4]
  401d6a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  401d6c:	687b      	ldr	r3, [r7, #4]
  401d6e:	2b00      	cmp	r3, #0
  401d70:	d02c      	beq.n	401dcc <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401d72:	68fb      	ldr	r3, [r7, #12]
  401d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d76:	68fb      	ldr	r3, [r7, #12]
  401d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401d7a:	429a      	cmp	r2, r3
  401d7c:	d026      	beq.n	401dcc <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401d7e:	68fb      	ldr	r3, [r7, #12]
  401d80:	3304      	adds	r3, #4
  401d82:	4618      	mov	r0, r3
  401d84:	4b13      	ldr	r3, [pc, #76]	; (401dd4 <vTaskPriorityDisinherit+0x74>)
  401d86:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  401d88:	68fb      	ldr	r3, [r7, #12]
  401d8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  401d8c:	68fb      	ldr	r3, [r7, #12]
  401d8e:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  401d90:	68fb      	ldr	r3, [r7, #12]
  401d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d94:	f1c3 0205 	rsb	r2, r3, #5
  401d98:	68fb      	ldr	r3, [r7, #12]
  401d9a:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  401d9c:	68fb      	ldr	r3, [r7, #12]
  401d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401da0:	4b0d      	ldr	r3, [pc, #52]	; (401dd8 <vTaskPriorityDisinherit+0x78>)
  401da2:	681b      	ldr	r3, [r3, #0]
  401da4:	429a      	cmp	r2, r3
  401da6:	d903      	bls.n	401db0 <vTaskPriorityDisinherit+0x50>
  401da8:	68fb      	ldr	r3, [r7, #12]
  401daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401dac:	4a0a      	ldr	r2, [pc, #40]	; (401dd8 <vTaskPriorityDisinherit+0x78>)
  401dae:	6013      	str	r3, [r2, #0]
  401db0:	68fb      	ldr	r3, [r7, #12]
  401db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401db4:	4613      	mov	r3, r2
  401db6:	009b      	lsls	r3, r3, #2
  401db8:	4413      	add	r3, r2
  401dba:	009b      	lsls	r3, r3, #2
  401dbc:	4a07      	ldr	r2, [pc, #28]	; (401ddc <vTaskPriorityDisinherit+0x7c>)
  401dbe:	441a      	add	r2, r3
  401dc0:	68fb      	ldr	r3, [r7, #12]
  401dc2:	3304      	adds	r3, #4
  401dc4:	4619      	mov	r1, r3
  401dc6:	4610      	mov	r0, r2
  401dc8:	4b05      	ldr	r3, [pc, #20]	; (401de0 <vTaskPriorityDisinherit+0x80>)
  401dca:	4798      	blx	r3
			}
		}
	}
  401dcc:	bf00      	nop
  401dce:	3710      	adds	r7, #16
  401dd0:	46bd      	mov	sp, r7
  401dd2:	bd80      	pop	{r7, pc}
  401dd4:	0040034d 	.word	0x0040034d
  401dd8:	2040aaf8 	.word	0x2040aaf8
  401ddc:	2040aa18 	.word	0x2040aa18
  401de0:	0040028b 	.word	0x0040028b

00401de4 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  401de4:	b590      	push	{r4, r7, lr}
  401de6:	b087      	sub	sp, #28
  401de8:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  401dea:	2300      	movs	r3, #0
  401dec:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  401dee:	4b11      	ldr	r3, [pc, #68]	; (401e34 <xTimerCreateTimerTask+0x50>)
  401df0:	4798      	blx	r3

	if( xTimerQueue != NULL )
  401df2:	4b11      	ldr	r3, [pc, #68]	; (401e38 <xTimerCreateTimerTask+0x54>)
  401df4:	681b      	ldr	r3, [r3, #0]
  401df6:	2b00      	cmp	r3, #0
  401df8:	d00f      	beq.n	401e1a <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401dfa:	2300      	movs	r3, #0
  401dfc:	9303      	str	r3, [sp, #12]
  401dfe:	2300      	movs	r3, #0
  401e00:	9302      	str	r3, [sp, #8]
  401e02:	2300      	movs	r3, #0
  401e04:	9301      	str	r3, [sp, #4]
  401e06:	2304      	movs	r3, #4
  401e08:	9300      	str	r3, [sp, #0]
  401e0a:	2300      	movs	r3, #0
  401e0c:	f44f 7282 	mov.w	r2, #260	; 0x104
  401e10:	490a      	ldr	r1, [pc, #40]	; (401e3c <xTimerCreateTimerTask+0x58>)
  401e12:	480b      	ldr	r0, [pc, #44]	; (401e40 <xTimerCreateTimerTask+0x5c>)
  401e14:	4c0b      	ldr	r4, [pc, #44]	; (401e44 <xTimerCreateTimerTask+0x60>)
  401e16:	47a0      	blx	r4
  401e18:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  401e1a:	687b      	ldr	r3, [r7, #4]
  401e1c:	2b00      	cmp	r3, #0
  401e1e:	d103      	bne.n	401e28 <xTimerCreateTimerTask+0x44>
  401e20:	4b09      	ldr	r3, [pc, #36]	; (401e48 <xTimerCreateTimerTask+0x64>)
  401e22:	4798      	blx	r3
  401e24:	bf00      	nop
  401e26:	e7fd      	b.n	401e24 <xTimerCreateTimerTask+0x40>
	return xReturn;
  401e28:	687b      	ldr	r3, [r7, #4]
}
  401e2a:	4618      	mov	r0, r3
  401e2c:	370c      	adds	r7, #12
  401e2e:	46bd      	mov	sp, r7
  401e30:	bd90      	pop	{r4, r7, pc}
  401e32:	bf00      	nop
  401e34:	00402301 	.word	0x00402301
  401e38:	2040ab44 	.word	0x2040ab44
  401e3c:	00408d84 	.word	0x00408d84
  401e40:	00401f5d 	.word	0x00401f5d
  401e44:	00401109 	.word	0x00401109
  401e48:	0040059d 	.word	0x0040059d

00401e4c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  401e4c:	b590      	push	{r4, r7, lr}
  401e4e:	b089      	sub	sp, #36	; 0x24
  401e50:	af00      	add	r7, sp, #0
  401e52:	60f8      	str	r0, [r7, #12]
  401e54:	60b9      	str	r1, [r7, #8]
  401e56:	607a      	str	r2, [r7, #4]
  401e58:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  401e5a:	2300      	movs	r3, #0
  401e5c:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401e5e:	4b1a      	ldr	r3, [pc, #104]	; (401ec8 <xTimerGenericCommand+0x7c>)
  401e60:	681b      	ldr	r3, [r3, #0]
  401e62:	2b00      	cmp	r3, #0
  401e64:	d02a      	beq.n	401ebc <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  401e66:	68bb      	ldr	r3, [r7, #8]
  401e68:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  401e6a:	687b      	ldr	r3, [r7, #4]
  401e6c:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  401e6e:	68fb      	ldr	r3, [r7, #12]
  401e70:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  401e72:	683b      	ldr	r3, [r7, #0]
  401e74:	2b00      	cmp	r3, #0
  401e76:	d118      	bne.n	401eaa <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401e78:	4b14      	ldr	r3, [pc, #80]	; (401ecc <xTimerGenericCommand+0x80>)
  401e7a:	4798      	blx	r3
  401e7c:	4603      	mov	r3, r0
  401e7e:	2b01      	cmp	r3, #1
  401e80:	d109      	bne.n	401e96 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  401e82:	4b11      	ldr	r3, [pc, #68]	; (401ec8 <xTimerGenericCommand+0x7c>)
  401e84:	6818      	ldr	r0, [r3, #0]
  401e86:	f107 0110 	add.w	r1, r7, #16
  401e8a:	2300      	movs	r3, #0
  401e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401e8e:	4c10      	ldr	r4, [pc, #64]	; (401ed0 <xTimerGenericCommand+0x84>)
  401e90:	47a0      	blx	r4
  401e92:	61f8      	str	r0, [r7, #28]
  401e94:	e012      	b.n	401ebc <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401e96:	4b0c      	ldr	r3, [pc, #48]	; (401ec8 <xTimerGenericCommand+0x7c>)
  401e98:	6818      	ldr	r0, [r3, #0]
  401e9a:	f107 0110 	add.w	r1, r7, #16
  401e9e:	2300      	movs	r3, #0
  401ea0:	2200      	movs	r2, #0
  401ea2:	4c0b      	ldr	r4, [pc, #44]	; (401ed0 <xTimerGenericCommand+0x84>)
  401ea4:	47a0      	blx	r4
  401ea6:	61f8      	str	r0, [r7, #28]
  401ea8:	e008      	b.n	401ebc <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401eaa:	4b07      	ldr	r3, [pc, #28]	; (401ec8 <xTimerGenericCommand+0x7c>)
  401eac:	6818      	ldr	r0, [r3, #0]
  401eae:	f107 0110 	add.w	r1, r7, #16
  401eb2:	2300      	movs	r3, #0
  401eb4:	683a      	ldr	r2, [r7, #0]
  401eb6:	4c07      	ldr	r4, [pc, #28]	; (401ed4 <xTimerGenericCommand+0x88>)
  401eb8:	47a0      	blx	r4
  401eba:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  401ebc:	69fb      	ldr	r3, [r7, #28]
}
  401ebe:	4618      	mov	r0, r3
  401ec0:	3724      	adds	r7, #36	; 0x24
  401ec2:	46bd      	mov	sp, r7
  401ec4:	bd90      	pop	{r4, r7, pc}
  401ec6:	bf00      	nop
  401ec8:	2040ab44 	.word	0x2040ab44
  401ecc:	00401c71 	.word	0x00401c71
  401ed0:	00400a89 	.word	0x00400a89
  401ed4:	00400bf1 	.word	0x00400bf1

00401ed8 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  401ed8:	b590      	push	{r4, r7, lr}
  401eda:	b087      	sub	sp, #28
  401edc:	af02      	add	r7, sp, #8
  401ede:	6078      	str	r0, [r7, #4]
  401ee0:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401ee2:	4b19      	ldr	r3, [pc, #100]	; (401f48 <prvProcessExpiredTimer+0x70>)
  401ee4:	681b      	ldr	r3, [r3, #0]
  401ee6:	68db      	ldr	r3, [r3, #12]
  401ee8:	68db      	ldr	r3, [r3, #12]
  401eea:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  401eec:	68fb      	ldr	r3, [r7, #12]
  401eee:	3304      	adds	r3, #4
  401ef0:	4618      	mov	r0, r3
  401ef2:	4b16      	ldr	r3, [pc, #88]	; (401f4c <prvProcessExpiredTimer+0x74>)
  401ef4:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  401ef6:	68fb      	ldr	r3, [r7, #12]
  401ef8:	69db      	ldr	r3, [r3, #28]
  401efa:	2b01      	cmp	r3, #1
  401efc:	d11b      	bne.n	401f36 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401efe:	68fb      	ldr	r3, [r7, #12]
  401f00:	699a      	ldr	r2, [r3, #24]
  401f02:	687b      	ldr	r3, [r7, #4]
  401f04:	18d1      	adds	r1, r2, r3
  401f06:	687b      	ldr	r3, [r7, #4]
  401f08:	683a      	ldr	r2, [r7, #0]
  401f0a:	68f8      	ldr	r0, [r7, #12]
  401f0c:	4c10      	ldr	r4, [pc, #64]	; (401f50 <prvProcessExpiredTimer+0x78>)
  401f0e:	47a0      	blx	r4
  401f10:	4603      	mov	r3, r0
  401f12:	2b01      	cmp	r3, #1
  401f14:	d10f      	bne.n	401f36 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  401f16:	2300      	movs	r3, #0
  401f18:	9300      	str	r3, [sp, #0]
  401f1a:	2300      	movs	r3, #0
  401f1c:	687a      	ldr	r2, [r7, #4]
  401f1e:	2100      	movs	r1, #0
  401f20:	68f8      	ldr	r0, [r7, #12]
  401f22:	4c0c      	ldr	r4, [pc, #48]	; (401f54 <prvProcessExpiredTimer+0x7c>)
  401f24:	47a0      	blx	r4
  401f26:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  401f28:	68bb      	ldr	r3, [r7, #8]
  401f2a:	2b00      	cmp	r3, #0
  401f2c:	d103      	bne.n	401f36 <prvProcessExpiredTimer+0x5e>
  401f2e:	4b0a      	ldr	r3, [pc, #40]	; (401f58 <prvProcessExpiredTimer+0x80>)
  401f30:	4798      	blx	r3
  401f32:	bf00      	nop
  401f34:	e7fd      	b.n	401f32 <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  401f36:	68fb      	ldr	r3, [r7, #12]
  401f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401f3a:	68f8      	ldr	r0, [r7, #12]
  401f3c:	4798      	blx	r3
}
  401f3e:	bf00      	nop
  401f40:	3714      	adds	r7, #20
  401f42:	46bd      	mov	sp, r7
  401f44:	bd90      	pop	{r4, r7, pc}
  401f46:	bf00      	nop
  401f48:	2040ab3c 	.word	0x2040ab3c
  401f4c:	0040034d 	.word	0x0040034d
  401f50:	004020a5 	.word	0x004020a5
  401f54:	00401e4d 	.word	0x00401e4d
  401f58:	0040059d 	.word	0x0040059d

00401f5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  401f5c:	b580      	push	{r7, lr}
  401f5e:	b084      	sub	sp, #16
  401f60:	af00      	add	r7, sp, #0
  401f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401f64:	f107 0308 	add.w	r3, r7, #8
  401f68:	4618      	mov	r0, r3
  401f6a:	4b05      	ldr	r3, [pc, #20]	; (401f80 <prvTimerTask+0x24>)
  401f6c:	4798      	blx	r3
  401f6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  401f70:	68bb      	ldr	r3, [r7, #8]
  401f72:	4619      	mov	r1, r3
  401f74:	68f8      	ldr	r0, [r7, #12]
  401f76:	4b03      	ldr	r3, [pc, #12]	; (401f84 <prvTimerTask+0x28>)
  401f78:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  401f7a:	4b03      	ldr	r3, [pc, #12]	; (401f88 <prvTimerTask+0x2c>)
  401f7c:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401f7e:	e7f1      	b.n	401f64 <prvTimerTask+0x8>
  401f80:	00402011 	.word	0x00402011
  401f84:	00401f8d 	.word	0x00401f8d
  401f88:	0040212d 	.word	0x0040212d

00401f8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  401f8c:	b580      	push	{r7, lr}
  401f8e:	b084      	sub	sp, #16
  401f90:	af00      	add	r7, sp, #0
  401f92:	6078      	str	r0, [r7, #4]
  401f94:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  401f96:	4b17      	ldr	r3, [pc, #92]	; (401ff4 <prvProcessTimerOrBlockTask+0x68>)
  401f98:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401f9a:	f107 0308 	add.w	r3, r7, #8
  401f9e:	4618      	mov	r0, r3
  401fa0:	4b15      	ldr	r3, [pc, #84]	; (401ff8 <prvProcessTimerOrBlockTask+0x6c>)
  401fa2:	4798      	blx	r3
  401fa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  401fa6:	68bb      	ldr	r3, [r7, #8]
  401fa8:	2b00      	cmp	r3, #0
  401faa:	d11d      	bne.n	401fe8 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401fac:	683b      	ldr	r3, [r7, #0]
  401fae:	2b00      	cmp	r3, #0
  401fb0:	d10a      	bne.n	401fc8 <prvProcessTimerOrBlockTask+0x3c>
  401fb2:	687a      	ldr	r2, [r7, #4]
  401fb4:	68fb      	ldr	r3, [r7, #12]
  401fb6:	429a      	cmp	r2, r3
  401fb8:	d806      	bhi.n	401fc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  401fba:	4b10      	ldr	r3, [pc, #64]	; (401ffc <prvProcessTimerOrBlockTask+0x70>)
  401fbc:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401fbe:	68f9      	ldr	r1, [r7, #12]
  401fc0:	6878      	ldr	r0, [r7, #4]
  401fc2:	4b0f      	ldr	r3, [pc, #60]	; (402000 <prvProcessTimerOrBlockTask+0x74>)
  401fc4:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  401fc6:	e011      	b.n	401fec <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  401fc8:	4b0e      	ldr	r3, [pc, #56]	; (402004 <prvProcessTimerOrBlockTask+0x78>)
  401fca:	6818      	ldr	r0, [r3, #0]
  401fcc:	687a      	ldr	r2, [r7, #4]
  401fce:	68fb      	ldr	r3, [r7, #12]
  401fd0:	1ad3      	subs	r3, r2, r3
  401fd2:	4619      	mov	r1, r3
  401fd4:	4b0c      	ldr	r3, [pc, #48]	; (402008 <prvProcessTimerOrBlockTask+0x7c>)
  401fd6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401fd8:	4b08      	ldr	r3, [pc, #32]	; (401ffc <prvProcessTimerOrBlockTask+0x70>)
  401fda:	4798      	blx	r3
  401fdc:	4603      	mov	r3, r0
  401fde:	2b00      	cmp	r3, #0
  401fe0:	d104      	bne.n	401fec <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
  401fe2:	4b0a      	ldr	r3, [pc, #40]	; (40200c <prvProcessTimerOrBlockTask+0x80>)
  401fe4:	4798      	blx	r3
}
  401fe6:	e001      	b.n	401fec <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
  401fe8:	4b04      	ldr	r3, [pc, #16]	; (401ffc <prvProcessTimerOrBlockTask+0x70>)
  401fea:	4798      	blx	r3
}
  401fec:	bf00      	nop
  401fee:	3710      	adds	r7, #16
  401ff0:	46bd      	mov	sp, r7
  401ff2:	bd80      	pop	{r7, pc}
  401ff4:	00401399 	.word	0x00401399
  401ff8:	00402059 	.word	0x00402059
  401ffc:	004013b5 	.word	0x004013b5
  402000:	00401ed9 	.word	0x00401ed9
  402004:	2040ab44 	.word	0x2040ab44
  402008:	004010a5 	.word	0x004010a5
  40200c:	00400539 	.word	0x00400539

00402010 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  402010:	b480      	push	{r7}
  402012:	b085      	sub	sp, #20
  402014:	af00      	add	r7, sp, #0
  402016:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402018:	4b0e      	ldr	r3, [pc, #56]	; (402054 <prvGetNextExpireTime+0x44>)
  40201a:	681b      	ldr	r3, [r3, #0]
  40201c:	681b      	ldr	r3, [r3, #0]
  40201e:	2b00      	cmp	r3, #0
  402020:	bf0c      	ite	eq
  402022:	2301      	moveq	r3, #1
  402024:	2300      	movne	r3, #0
  402026:	b2db      	uxtb	r3, r3
  402028:	461a      	mov	r2, r3
  40202a:	687b      	ldr	r3, [r7, #4]
  40202c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40202e:	687b      	ldr	r3, [r7, #4]
  402030:	681b      	ldr	r3, [r3, #0]
  402032:	2b00      	cmp	r3, #0
  402034:	d105      	bne.n	402042 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402036:	4b07      	ldr	r3, [pc, #28]	; (402054 <prvGetNextExpireTime+0x44>)
  402038:	681b      	ldr	r3, [r3, #0]
  40203a:	68db      	ldr	r3, [r3, #12]
  40203c:	681b      	ldr	r3, [r3, #0]
  40203e:	60fb      	str	r3, [r7, #12]
  402040:	e001      	b.n	402046 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  402042:	2300      	movs	r3, #0
  402044:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  402046:	68fb      	ldr	r3, [r7, #12]
}
  402048:	4618      	mov	r0, r3
  40204a:	3714      	adds	r7, #20
  40204c:	46bd      	mov	sp, r7
  40204e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402052:	4770      	bx	lr
  402054:	2040ab3c 	.word	0x2040ab3c

00402058 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  402058:	b580      	push	{r7, lr}
  40205a:	b084      	sub	sp, #16
  40205c:	af00      	add	r7, sp, #0
  40205e:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  402060:	4b0d      	ldr	r3, [pc, #52]	; (402098 <prvSampleTimeNow+0x40>)
  402062:	4798      	blx	r3
  402064:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  402066:	4b0d      	ldr	r3, [pc, #52]	; (40209c <prvSampleTimeNow+0x44>)
  402068:	681b      	ldr	r3, [r3, #0]
  40206a:	68fa      	ldr	r2, [r7, #12]
  40206c:	429a      	cmp	r2, r3
  40206e:	d208      	bcs.n	402082 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  402070:	4b0a      	ldr	r3, [pc, #40]	; (40209c <prvSampleTimeNow+0x44>)
  402072:	681b      	ldr	r3, [r3, #0]
  402074:	4618      	mov	r0, r3
  402076:	4b0a      	ldr	r3, [pc, #40]	; (4020a0 <prvSampleTimeNow+0x48>)
  402078:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  40207a:	687b      	ldr	r3, [r7, #4]
  40207c:	2201      	movs	r2, #1
  40207e:	601a      	str	r2, [r3, #0]
  402080:	e002      	b.n	402088 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402082:	687b      	ldr	r3, [r7, #4]
  402084:	2200      	movs	r2, #0
  402086:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  402088:	4a04      	ldr	r2, [pc, #16]	; (40209c <prvSampleTimeNow+0x44>)
  40208a:	68fb      	ldr	r3, [r7, #12]
  40208c:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  40208e:	68fb      	ldr	r3, [r7, #12]
}
  402090:	4618      	mov	r0, r3
  402092:	3710      	adds	r7, #16
  402094:	46bd      	mov	sp, r7
  402096:	bd80      	pop	{r7, pc}
  402098:	004014d5 	.word	0x004014d5
  40209c:	2040ab48 	.word	0x2040ab48
  4020a0:	00402239 	.word	0x00402239

004020a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  4020a4:	b580      	push	{r7, lr}
  4020a6:	b086      	sub	sp, #24
  4020a8:	af00      	add	r7, sp, #0
  4020aa:	60f8      	str	r0, [r7, #12]
  4020ac:	60b9      	str	r1, [r7, #8]
  4020ae:	607a      	str	r2, [r7, #4]
  4020b0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  4020b2:	2300      	movs	r3, #0
  4020b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4020b6:	68fb      	ldr	r3, [r7, #12]
  4020b8:	68ba      	ldr	r2, [r7, #8]
  4020ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4020bc:	68fb      	ldr	r3, [r7, #12]
  4020be:	68fa      	ldr	r2, [r7, #12]
  4020c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  4020c2:	68ba      	ldr	r2, [r7, #8]
  4020c4:	687b      	ldr	r3, [r7, #4]
  4020c6:	429a      	cmp	r2, r3
  4020c8:	d812      	bhi.n	4020f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  4020ca:	687a      	ldr	r2, [r7, #4]
  4020cc:	683b      	ldr	r3, [r7, #0]
  4020ce:	1ad2      	subs	r2, r2, r3
  4020d0:	68fb      	ldr	r3, [r7, #12]
  4020d2:	699b      	ldr	r3, [r3, #24]
  4020d4:	429a      	cmp	r2, r3
  4020d6:	d302      	bcc.n	4020de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4020d8:	2301      	movs	r3, #1
  4020da:	617b      	str	r3, [r7, #20]
  4020dc:	e01b      	b.n	402116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4020de:	4b10      	ldr	r3, [pc, #64]	; (402120 <prvInsertTimerInActiveList+0x7c>)
  4020e0:	681a      	ldr	r2, [r3, #0]
  4020e2:	68fb      	ldr	r3, [r7, #12]
  4020e4:	3304      	adds	r3, #4
  4020e6:	4619      	mov	r1, r3
  4020e8:	4610      	mov	r0, r2
  4020ea:	4b0e      	ldr	r3, [pc, #56]	; (402124 <prvInsertTimerInActiveList+0x80>)
  4020ec:	4798      	blx	r3
  4020ee:	e012      	b.n	402116 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4020f0:	687a      	ldr	r2, [r7, #4]
  4020f2:	683b      	ldr	r3, [r7, #0]
  4020f4:	429a      	cmp	r2, r3
  4020f6:	d206      	bcs.n	402106 <prvInsertTimerInActiveList+0x62>
  4020f8:	68ba      	ldr	r2, [r7, #8]
  4020fa:	683b      	ldr	r3, [r7, #0]
  4020fc:	429a      	cmp	r2, r3
  4020fe:	d302      	bcc.n	402106 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402100:	2301      	movs	r3, #1
  402102:	617b      	str	r3, [r7, #20]
  402104:	e007      	b.n	402116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402106:	4b08      	ldr	r3, [pc, #32]	; (402128 <prvInsertTimerInActiveList+0x84>)
  402108:	681a      	ldr	r2, [r3, #0]
  40210a:	68fb      	ldr	r3, [r7, #12]
  40210c:	3304      	adds	r3, #4
  40210e:	4619      	mov	r1, r3
  402110:	4610      	mov	r0, r2
  402112:	4b04      	ldr	r3, [pc, #16]	; (402124 <prvInsertTimerInActiveList+0x80>)
  402114:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  402116:	697b      	ldr	r3, [r7, #20]
}
  402118:	4618      	mov	r0, r3
  40211a:	3718      	adds	r7, #24
  40211c:	46bd      	mov	sp, r7
  40211e:	bd80      	pop	{r7, pc}
  402120:	2040ab40 	.word	0x2040ab40
  402124:	004002db 	.word	0x004002db
  402128:	2040ab3c 	.word	0x2040ab3c

0040212c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  40212c:	b590      	push	{r4, r7, lr}
  40212e:	b08b      	sub	sp, #44	; 0x2c
  402130:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402132:	1d3b      	adds	r3, r7, #4
  402134:	4618      	mov	r0, r3
  402136:	4b38      	ldr	r3, [pc, #224]	; (402218 <prvProcessReceivedCommands+0xec>)
  402138:	4798      	blx	r3
  40213a:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  40213c:	e05d      	b.n	4021fa <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  40213e:	693b      	ldr	r3, [r7, #16]
  402140:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  402142:	69bb      	ldr	r3, [r7, #24]
  402144:	2b00      	cmp	r3, #0
  402146:	d008      	beq.n	40215a <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402148:	69bb      	ldr	r3, [r7, #24]
  40214a:	695b      	ldr	r3, [r3, #20]
  40214c:	2b00      	cmp	r3, #0
  40214e:	d004      	beq.n	40215a <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  402150:	69bb      	ldr	r3, [r7, #24]
  402152:	3304      	adds	r3, #4
  402154:	4618      	mov	r0, r3
  402156:	4b31      	ldr	r3, [pc, #196]	; (40221c <prvProcessReceivedCommands+0xf0>)
  402158:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  40215a:	68bb      	ldr	r3, [r7, #8]
  40215c:	2b03      	cmp	r3, #3
  40215e:	d84b      	bhi.n	4021f8 <prvProcessReceivedCommands+0xcc>
  402160:	a201      	add	r2, pc, #4	; (adr r2, 402168 <prvProcessReceivedCommands+0x3c>)
  402162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402166:	bf00      	nop
  402168:	00402179 	.word	0x00402179
  40216c:	004021fb 	.word	0x004021fb
  402170:	004021c7 	.word	0x004021c7
  402174:	004021f1 	.word	0x004021f1
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  402178:	68fa      	ldr	r2, [r7, #12]
  40217a:	69bb      	ldr	r3, [r7, #24]
  40217c:	699b      	ldr	r3, [r3, #24]
  40217e:	18d1      	adds	r1, r2, r3
  402180:	68fb      	ldr	r3, [r7, #12]
  402182:	69fa      	ldr	r2, [r7, #28]
  402184:	69b8      	ldr	r0, [r7, #24]
  402186:	4c26      	ldr	r4, [pc, #152]	; (402220 <prvProcessReceivedCommands+0xf4>)
  402188:	47a0      	blx	r4
  40218a:	4603      	mov	r3, r0
  40218c:	2b01      	cmp	r3, #1
  40218e:	d134      	bne.n	4021fa <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402190:	69bb      	ldr	r3, [r7, #24]
  402192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402194:	69b8      	ldr	r0, [r7, #24]
  402196:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402198:	69bb      	ldr	r3, [r7, #24]
  40219a:	69db      	ldr	r3, [r3, #28]
  40219c:	2b01      	cmp	r3, #1
  40219e:	d12c      	bne.n	4021fa <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4021a0:	68fa      	ldr	r2, [r7, #12]
  4021a2:	69bb      	ldr	r3, [r7, #24]
  4021a4:	699b      	ldr	r3, [r3, #24]
  4021a6:	441a      	add	r2, r3
  4021a8:	2300      	movs	r3, #0
  4021aa:	9300      	str	r3, [sp, #0]
  4021ac:	2300      	movs	r3, #0
  4021ae:	2100      	movs	r1, #0
  4021b0:	69b8      	ldr	r0, [r7, #24]
  4021b2:	4c1c      	ldr	r4, [pc, #112]	; (402224 <prvProcessReceivedCommands+0xf8>)
  4021b4:	47a0      	blx	r4
  4021b6:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  4021b8:	697b      	ldr	r3, [r7, #20]
  4021ba:	2b00      	cmp	r3, #0
  4021bc:	d11d      	bne.n	4021fa <prvProcessReceivedCommands+0xce>
  4021be:	4b1a      	ldr	r3, [pc, #104]	; (402228 <prvProcessReceivedCommands+0xfc>)
  4021c0:	4798      	blx	r3
  4021c2:	bf00      	nop
  4021c4:	e7fd      	b.n	4021c2 <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  4021c6:	68fa      	ldr	r2, [r7, #12]
  4021c8:	69bb      	ldr	r3, [r7, #24]
  4021ca:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4021cc:	69bb      	ldr	r3, [r7, #24]
  4021ce:	699b      	ldr	r3, [r3, #24]
  4021d0:	2b00      	cmp	r3, #0
  4021d2:	d103      	bne.n	4021dc <prvProcessReceivedCommands+0xb0>
  4021d4:	4b14      	ldr	r3, [pc, #80]	; (402228 <prvProcessReceivedCommands+0xfc>)
  4021d6:	4798      	blx	r3
  4021d8:	bf00      	nop
  4021da:	e7fd      	b.n	4021d8 <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4021dc:	69bb      	ldr	r3, [r7, #24]
  4021de:	699a      	ldr	r2, [r3, #24]
  4021e0:	69fb      	ldr	r3, [r7, #28]
  4021e2:	18d1      	adds	r1, r2, r3
  4021e4:	69fb      	ldr	r3, [r7, #28]
  4021e6:	69fa      	ldr	r2, [r7, #28]
  4021e8:	69b8      	ldr	r0, [r7, #24]
  4021ea:	4c0d      	ldr	r4, [pc, #52]	; (402220 <prvProcessReceivedCommands+0xf4>)
  4021ec:	47a0      	blx	r4
				break;
  4021ee:	e004      	b.n	4021fa <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  4021f0:	69b8      	ldr	r0, [r7, #24]
  4021f2:	4b0e      	ldr	r3, [pc, #56]	; (40222c <prvProcessReceivedCommands+0x100>)
  4021f4:	4798      	blx	r3
				break;
  4021f6:	e000      	b.n	4021fa <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  4021f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4021fa:	4b0d      	ldr	r3, [pc, #52]	; (402230 <prvProcessReceivedCommands+0x104>)
  4021fc:	6818      	ldr	r0, [r3, #0]
  4021fe:	f107 0108 	add.w	r1, r7, #8
  402202:	2300      	movs	r3, #0
  402204:	2200      	movs	r2, #0
  402206:	4c0b      	ldr	r4, [pc, #44]	; (402234 <prvProcessReceivedCommands+0x108>)
  402208:	47a0      	blx	r4
  40220a:	4603      	mov	r3, r0
  40220c:	2b00      	cmp	r3, #0
  40220e:	d196      	bne.n	40213e <prvProcessReceivedCommands+0x12>
		}
	}
}
  402210:	bf00      	nop
  402212:	3724      	adds	r7, #36	; 0x24
  402214:	46bd      	mov	sp, r7
  402216:	bd90      	pop	{r4, r7, pc}
  402218:	00402059 	.word	0x00402059
  40221c:	0040034d 	.word	0x0040034d
  402220:	004020a5 	.word	0x004020a5
  402224:	00401e4d 	.word	0x00401e4d
  402228:	0040059d 	.word	0x0040059d
  40222c:	00400791 	.word	0x00400791
  402230:	2040ab44 	.word	0x2040ab44
  402234:	00400cad 	.word	0x00400cad

00402238 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  402238:	b590      	push	{r4, r7, lr}
  40223a:	b08b      	sub	sp, #44	; 0x2c
  40223c:	af02      	add	r7, sp, #8
  40223e:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402240:	e03e      	b.n	4022c0 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402242:	4b29      	ldr	r3, [pc, #164]	; (4022e8 <prvSwitchTimerLists+0xb0>)
  402244:	681b      	ldr	r3, [r3, #0]
  402246:	68db      	ldr	r3, [r3, #12]
  402248:	681b      	ldr	r3, [r3, #0]
  40224a:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40224c:	4b26      	ldr	r3, [pc, #152]	; (4022e8 <prvSwitchTimerLists+0xb0>)
  40224e:	681b      	ldr	r3, [r3, #0]
  402250:	68db      	ldr	r3, [r3, #12]
  402252:	68db      	ldr	r3, [r3, #12]
  402254:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  402256:	69bb      	ldr	r3, [r7, #24]
  402258:	3304      	adds	r3, #4
  40225a:	4618      	mov	r0, r3
  40225c:	4b23      	ldr	r3, [pc, #140]	; (4022ec <prvSwitchTimerLists+0xb4>)
  40225e:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402260:	69bb      	ldr	r3, [r7, #24]
  402262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402264:	69b8      	ldr	r0, [r7, #24]
  402266:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402268:	69bb      	ldr	r3, [r7, #24]
  40226a:	69db      	ldr	r3, [r3, #28]
  40226c:	2b01      	cmp	r3, #1
  40226e:	d127      	bne.n	4022c0 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402270:	69bb      	ldr	r3, [r7, #24]
  402272:	699a      	ldr	r2, [r3, #24]
  402274:	69fb      	ldr	r3, [r7, #28]
  402276:	4413      	add	r3, r2
  402278:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  40227a:	697a      	ldr	r2, [r7, #20]
  40227c:	69fb      	ldr	r3, [r7, #28]
  40227e:	429a      	cmp	r2, r3
  402280:	d90e      	bls.n	4022a0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402282:	69bb      	ldr	r3, [r7, #24]
  402284:	697a      	ldr	r2, [r7, #20]
  402286:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402288:	69bb      	ldr	r3, [r7, #24]
  40228a:	69ba      	ldr	r2, [r7, #24]
  40228c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40228e:	4b16      	ldr	r3, [pc, #88]	; (4022e8 <prvSwitchTimerLists+0xb0>)
  402290:	681a      	ldr	r2, [r3, #0]
  402292:	69bb      	ldr	r3, [r7, #24]
  402294:	3304      	adds	r3, #4
  402296:	4619      	mov	r1, r3
  402298:	4610      	mov	r0, r2
  40229a:	4b15      	ldr	r3, [pc, #84]	; (4022f0 <prvSwitchTimerLists+0xb8>)
  40229c:	4798      	blx	r3
  40229e:	e00f      	b.n	4022c0 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  4022a0:	2300      	movs	r3, #0
  4022a2:	9300      	str	r3, [sp, #0]
  4022a4:	2300      	movs	r3, #0
  4022a6:	69fa      	ldr	r2, [r7, #28]
  4022a8:	2100      	movs	r1, #0
  4022aa:	69b8      	ldr	r0, [r7, #24]
  4022ac:	4c11      	ldr	r4, [pc, #68]	; (4022f4 <prvSwitchTimerLists+0xbc>)
  4022ae:	47a0      	blx	r4
  4022b0:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  4022b2:	693b      	ldr	r3, [r7, #16]
  4022b4:	2b00      	cmp	r3, #0
  4022b6:	d103      	bne.n	4022c0 <prvSwitchTimerLists+0x88>
  4022b8:	4b0f      	ldr	r3, [pc, #60]	; (4022f8 <prvSwitchTimerLists+0xc0>)
  4022ba:	4798      	blx	r3
  4022bc:	bf00      	nop
  4022be:	e7fd      	b.n	4022bc <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4022c0:	4b09      	ldr	r3, [pc, #36]	; (4022e8 <prvSwitchTimerLists+0xb0>)
  4022c2:	681b      	ldr	r3, [r3, #0]
  4022c4:	681b      	ldr	r3, [r3, #0]
  4022c6:	2b00      	cmp	r3, #0
  4022c8:	d1bb      	bne.n	402242 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  4022ca:	4b07      	ldr	r3, [pc, #28]	; (4022e8 <prvSwitchTimerLists+0xb0>)
  4022cc:	681b      	ldr	r3, [r3, #0]
  4022ce:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  4022d0:	4b0a      	ldr	r3, [pc, #40]	; (4022fc <prvSwitchTimerLists+0xc4>)
  4022d2:	681b      	ldr	r3, [r3, #0]
  4022d4:	4a04      	ldr	r2, [pc, #16]	; (4022e8 <prvSwitchTimerLists+0xb0>)
  4022d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  4022d8:	4a08      	ldr	r2, [pc, #32]	; (4022fc <prvSwitchTimerLists+0xc4>)
  4022da:	68fb      	ldr	r3, [r7, #12]
  4022dc:	6013      	str	r3, [r2, #0]
}
  4022de:	bf00      	nop
  4022e0:	3724      	adds	r7, #36	; 0x24
  4022e2:	46bd      	mov	sp, r7
  4022e4:	bd90      	pop	{r4, r7, pc}
  4022e6:	bf00      	nop
  4022e8:	2040ab3c 	.word	0x2040ab3c
  4022ec:	0040034d 	.word	0x0040034d
  4022f0:	004002db 	.word	0x004002db
  4022f4:	00401e4d 	.word	0x00401e4d
  4022f8:	0040059d 	.word	0x0040059d
  4022fc:	2040ab40 	.word	0x2040ab40

00402300 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402300:	b580      	push	{r7, lr}
  402302:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402304:	4b0e      	ldr	r3, [pc, #56]	; (402340 <prvCheckForValidListAndQueue+0x40>)
  402306:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402308:	4b0e      	ldr	r3, [pc, #56]	; (402344 <prvCheckForValidListAndQueue+0x44>)
  40230a:	681b      	ldr	r3, [r3, #0]
  40230c:	2b00      	cmp	r3, #0
  40230e:	d113      	bne.n	402338 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  402310:	480d      	ldr	r0, [pc, #52]	; (402348 <prvCheckForValidListAndQueue+0x48>)
  402312:	4b0e      	ldr	r3, [pc, #56]	; (40234c <prvCheckForValidListAndQueue+0x4c>)
  402314:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  402316:	480e      	ldr	r0, [pc, #56]	; (402350 <prvCheckForValidListAndQueue+0x50>)
  402318:	4b0c      	ldr	r3, [pc, #48]	; (40234c <prvCheckForValidListAndQueue+0x4c>)
  40231a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  40231c:	4b0d      	ldr	r3, [pc, #52]	; (402354 <prvCheckForValidListAndQueue+0x54>)
  40231e:	4a0a      	ldr	r2, [pc, #40]	; (402348 <prvCheckForValidListAndQueue+0x48>)
  402320:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402322:	4b0d      	ldr	r3, [pc, #52]	; (402358 <prvCheckForValidListAndQueue+0x58>)
  402324:	4a0a      	ldr	r2, [pc, #40]	; (402350 <prvCheckForValidListAndQueue+0x50>)
  402326:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  402328:	2200      	movs	r2, #0
  40232a:	210c      	movs	r1, #12
  40232c:	2005      	movs	r0, #5
  40232e:	4b0b      	ldr	r3, [pc, #44]	; (40235c <prvCheckForValidListAndQueue+0x5c>)
  402330:	4798      	blx	r3
  402332:	4602      	mov	r2, r0
  402334:	4b03      	ldr	r3, [pc, #12]	; (402344 <prvCheckForValidListAndQueue+0x44>)
  402336:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  402338:	4b09      	ldr	r3, [pc, #36]	; (402360 <prvCheckForValidListAndQueue+0x60>)
  40233a:	4798      	blx	r3
}
  40233c:	bf00      	nop
  40233e:	bd80      	pop	{r7, pc}
  402340:	00400555 	.word	0x00400555
  402344:	2040ab44 	.word	0x2040ab44
  402348:	2040ab14 	.word	0x2040ab14
  40234c:	00400231 	.word	0x00400231
  402350:	2040ab28 	.word	0x2040ab28
  402354:	2040ab3c 	.word	0x2040ab3c
  402358:	2040ab40 	.word	0x2040ab40
  40235c:	004009f1 	.word	0x004009f1
  402360:	00400575 	.word	0x00400575

00402364 <ppbuf_insert_active>:

#include <string.h>
#include "PingPong.h"


int ppbuf_insert_active(ppbuf_t *p, void *data, int size){
  402364:	b480      	push	{r7}
  402366:	b089      	sub	sp, #36	; 0x24
  402368:	af00      	add	r7, sp, #0
  40236a:	60f8      	str	r0, [r7, #12]
  40236c:	60b9      	str	r1, [r7, #8]
  40236e:	607a      	str	r2, [r7, #4]
	int ret = 0;
  402370:	2300      	movs	r3, #0
  402372:	61fb      	str	r3, [r7, #28]
	unsigned int *ptr;

	if(p == NULL || data == NULL || size == 0) {
  402374:	68fb      	ldr	r3, [r7, #12]
  402376:	2b00      	cmp	r3, #0
  402378:	d005      	beq.n	402386 <ppbuf_insert_active+0x22>
  40237a:	68bb      	ldr	r3, [r7, #8]
  40237c:	2b00      	cmp	r3, #0
  40237e:	d002      	beq.n	402386 <ppbuf_insert_active+0x22>
  402380:	687b      	ldr	r3, [r7, #4]
  402382:	2b00      	cmp	r3, #0
  402384:	d103      	bne.n	40238e <ppbuf_insert_active+0x2a>
		/* check your parameters */
		ret = -1;
  402386:	f04f 33ff 	mov.w	r3, #4294967295
  40238a:	61fb      	str	r3, [r7, #28]
  40238c:	e033      	b.n	4023f6 <ppbuf_insert_active+0x92>
	} else {
		if(size > (p->buffer_size - p->put_index)) {
  40238e:	68fb      	ldr	r3, [r7, #12]
  402390:	689a      	ldr	r2, [r3, #8]
  402392:	68fb      	ldr	r3, [r7, #12]
  402394:	68db      	ldr	r3, [r3, #12]
  402396:	1ad2      	subs	r2, r2, r3
  402398:	687b      	ldr	r3, [r7, #4]
  40239a:	429a      	cmp	r2, r3
  40239c:	da03      	bge.n	4023a6 <ppbuf_insert_active+0x42>
			/* not enough room for new samples */
			ret = -1;
  40239e:	f04f 33ff 	mov.w	r3, #4294967295
  4023a2:	61fb      	str	r3, [r7, #28]
  4023a4:	e027      	b.n	4023f6 <ppbuf_insert_active+0x92>
		} else {
			/* take the current position */
			int mem_position = ((p->ping) * p->buffer_size) + p->put_index;
  4023a6:	68fb      	ldr	r3, [r7, #12]
  4023a8:	791b      	ldrb	r3, [r3, #4]
  4023aa:	461a      	mov	r2, r3
  4023ac:	68fb      	ldr	r3, [r7, #12]
  4023ae:	689b      	ldr	r3, [r3, #8]
  4023b0:	fb03 f202 	mul.w	r2, r3, r2
  4023b4:	68fb      	ldr	r3, [r7, #12]
  4023b6:	68db      	ldr	r3, [r3, #12]
  4023b8:	4413      	add	r3, r2
  4023ba:	61bb      	str	r3, [r7, #24]
			ptr = (unsigned int *)p->buffer_data; //uint8_t
  4023bc:	68fb      	ldr	r3, [r7, #12]
  4023be:	681b      	ldr	r3, [r3, #0]
  4023c0:	617b      	str	r3, [r7, #20]

			/* copy the contents */
			memcpy(&ptr[mem_position], data, sizeof(int));
  4023c2:	69bb      	ldr	r3, [r7, #24]
  4023c4:	009b      	lsls	r3, r3, #2
  4023c6:	697a      	ldr	r2, [r7, #20]
  4023c8:	4413      	add	r3, r2
  4023ca:	68ba      	ldr	r2, [r7, #8]
  4023cc:	6812      	ldr	r2, [r2, #0]
  4023ce:	601a      	str	r2, [r3, #0]

			/* update put index */
			p->put_index += size;
  4023d0:	68fb      	ldr	r3, [r7, #12]
  4023d2:	68da      	ldr	r2, [r3, #12]
  4023d4:	687b      	ldr	r3, [r7, #4]
  4023d6:	441a      	add	r2, r3
  4023d8:	68fb      	ldr	r3, [r7, #12]
  4023da:	60da      	str	r2, [r3, #12]
			p->full_signal = (p->put_index >= p->buffer_size?true:false);
  4023dc:	68fb      	ldr	r3, [r7, #12]
  4023de:	68da      	ldr	r2, [r3, #12]
  4023e0:	68fb      	ldr	r3, [r7, #12]
  4023e2:	689b      	ldr	r3, [r3, #8]
  4023e4:	429a      	cmp	r2, r3
  4023e6:	bfac      	ite	ge
  4023e8:	2301      	movge	r3, #1
  4023ea:	2300      	movlt	r3, #0
  4023ec:	b2da      	uxtb	r2, r3
  4023ee:	68fb      	ldr	r3, [r7, #12]
  4023f0:	751a      	strb	r2, [r3, #20]

			/* swap will only generated when ppbuf_get_full_signal is called */
			ret = 0;
  4023f2:	2300      	movs	r3, #0
  4023f4:	61fb      	str	r3, [r7, #28]
		}
	}
	return(ret);
  4023f6:	69fb      	ldr	r3, [r7, #28]
}
  4023f8:	4618      	mov	r0, r3
  4023fa:	3724      	adds	r7, #36	; 0x24
  4023fc:	46bd      	mov	sp, r7
  4023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  402402:	4770      	bx	lr

00402404 <ppbuf_remove_inactive>:

int ppbuf_remove_inactive(ppbuf_t *p, void *data, int size){
  402404:	b480      	push	{r7}
  402406:	b089      	sub	sp, #36	; 0x24
  402408:	af00      	add	r7, sp, #0
  40240a:	60f8      	str	r0, [r7, #12]
  40240c:	60b9      	str	r1, [r7, #8]
  40240e:	607a      	str	r2, [r7, #4]
	int ret = 0;
  402410:	2300      	movs	r3, #0
  402412:	61fb      	str	r3, [r7, #28]
	unsigned int *ptr;

	if(p == NULL || data == NULL || size == 0) {
  402414:	68fb      	ldr	r3, [r7, #12]
  402416:	2b00      	cmp	r3, #0
  402418:	d005      	beq.n	402426 <ppbuf_remove_inactive+0x22>
  40241a:	68bb      	ldr	r3, [r7, #8]
  40241c:	2b00      	cmp	r3, #0
  40241e:	d002      	beq.n	402426 <ppbuf_remove_inactive+0x22>
  402420:	687b      	ldr	r3, [r7, #4]
  402422:	2b00      	cmp	r3, #0
  402424:	d103      	bne.n	40242e <ppbuf_remove_inactive+0x2a>
		/* check your parameters */
		ret = -1;
  402426:	f04f 33ff 	mov.w	r3, #4294967295
  40242a:	61fb      	str	r3, [r7, #28]
  40242c:	e029      	b.n	402482 <ppbuf_remove_inactive+0x7e>
	} else {
		if(size > (p->buffer_size - p->get_index)) {
  40242e:	68fb      	ldr	r3, [r7, #12]
  402430:	689a      	ldr	r2, [r3, #8]
  402432:	68fb      	ldr	r3, [r7, #12]
  402434:	691b      	ldr	r3, [r3, #16]
  402436:	1ad2      	subs	r2, r2, r3
  402438:	687b      	ldr	r3, [r7, #4]
  40243a:	429a      	cmp	r2, r3
  40243c:	da03      	bge.n	402446 <ppbuf_remove_inactive+0x42>
			/* not enough data in sample buffer */
			ret = -1;
  40243e:	f04f 33ff 	mov.w	r3, #4294967295
  402442:	61fb      	str	r3, [r7, #28]
  402444:	e01d      	b.n	402482 <ppbuf_remove_inactive+0x7e>
		} else {
			/* take the current position */
			int mem_position = ((p->pong) * p->buffer_size) + p->get_index;
  402446:	68fb      	ldr	r3, [r7, #12]
  402448:	795b      	ldrb	r3, [r3, #5]
  40244a:	461a      	mov	r2, r3
  40244c:	68fb      	ldr	r3, [r7, #12]
  40244e:	689b      	ldr	r3, [r3, #8]
  402450:	fb03 f202 	mul.w	r2, r3, r2
  402454:	68fb      	ldr	r3, [r7, #12]
  402456:	691b      	ldr	r3, [r3, #16]
  402458:	4413      	add	r3, r2
  40245a:	61bb      	str	r3, [r7, #24]
			ptr = (unsigned int *)p->buffer_data;
  40245c:	68fb      	ldr	r3, [r7, #12]
  40245e:	681b      	ldr	r3, [r3, #0]
  402460:	617b      	str	r3, [r7, #20]

			/* copy the contents */
			memcpy(data,&ptr[mem_position], sizeof(int));
  402462:	69bb      	ldr	r3, [r7, #24]
  402464:	009b      	lsls	r3, r3, #2
  402466:	697a      	ldr	r2, [r7, #20]
  402468:	4413      	add	r3, r2
  40246a:	681b      	ldr	r3, [r3, #0]
  40246c:	461a      	mov	r2, r3
  40246e:	68bb      	ldr	r3, [r7, #8]
  402470:	601a      	str	r2, [r3, #0]

			/* update put index */
			p->get_index += size;
  402472:	68fb      	ldr	r3, [r7, #12]
  402474:	691a      	ldr	r2, [r3, #16]
  402476:	687b      	ldr	r3, [r7, #4]
  402478:	441a      	add	r2, r3
  40247a:	68fb      	ldr	r3, [r7, #12]
  40247c:	611a      	str	r2, [r3, #16]

			/* when buffer is empty we are not able to extract anymore data */
			ret = 0;
  40247e:	2300      	movs	r3, #0
  402480:	61fb      	str	r3, [r7, #28]
		}
	}
	return(ret);
  402482:	69fb      	ldr	r3, [r7, #28]


}
  402484:	4618      	mov	r0, r3
  402486:	3724      	adds	r7, #36	; 0x24
  402488:	46bd      	mov	sp, r7
  40248a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40248e:	4770      	bx	lr

00402490 <ppbuf_get_full_signal>:
		mem_position = ((p->pong) * p->buffer_size) + i;
		p->buffer_data[mem_position] = b[i];
	}
}

bool ppbuf_get_full_signal(ppbuf_t *p, bool consume) {
  402490:	b480      	push	{r7}
  402492:	b085      	sub	sp, #20
  402494:	af00      	add	r7, sp, #0
  402496:	6078      	str	r0, [r7, #4]
  402498:	460b      	mov	r3, r1
  40249a:	70fb      	strb	r3, [r7, #3]
	/* take the last signaled full occurrence */
	bool ret = (p != NULL ? p->full_signal : false);
  40249c:	687b      	ldr	r3, [r7, #4]
  40249e:	2b00      	cmp	r3, #0
  4024a0:	d005      	beq.n	4024ae <ppbuf_get_full_signal+0x1e>
  4024a2:	687b      	ldr	r3, [r7, #4]
  4024a4:	7d1b      	ldrb	r3, [r3, #20]
  4024a6:	2b00      	cmp	r3, #0
  4024a8:	d001      	beq.n	4024ae <ppbuf_get_full_signal+0x1e>
  4024aa:	2301      	movs	r3, #1
  4024ac:	e000      	b.n	4024b0 <ppbuf_get_full_signal+0x20>
  4024ae:	2300      	movs	r3, #0
  4024b0:	73fb      	strb	r3, [r7, #15]

	if((consume != false) && (p != NULL) && (ret != false)) {
  4024b2:	78fb      	ldrb	r3, [r7, #3]
  4024b4:	2b00      	cmp	r3, #0
  4024b6:	d026      	beq.n	402506 <ppbuf_get_full_signal+0x76>
  4024b8:	687b      	ldr	r3, [r7, #4]
  4024ba:	2b00      	cmp	r3, #0
  4024bc:	d023      	beq.n	402506 <ppbuf_get_full_signal+0x76>
  4024be:	7bfb      	ldrb	r3, [r7, #15]
  4024c0:	2b00      	cmp	r3, #0
  4024c2:	d020      	beq.n	402506 <ppbuf_get_full_signal+0x76>
		p->full_signal = false;
  4024c4:	687b      	ldr	r3, [r7, #4]
  4024c6:	2200      	movs	r2, #0
  4024c8:	751a      	strb	r2, [r3, #20]

		/* swap the buffer switches */
		p->ping = p->ping ^ p->pong;
  4024ca:	687b      	ldr	r3, [r7, #4]
  4024cc:	791a      	ldrb	r2, [r3, #4]
  4024ce:	687b      	ldr	r3, [r7, #4]
  4024d0:	795b      	ldrb	r3, [r3, #5]
  4024d2:	4053      	eors	r3, r2
  4024d4:	b2da      	uxtb	r2, r3
  4024d6:	687b      	ldr	r3, [r7, #4]
  4024d8:	711a      	strb	r2, [r3, #4]
		p->pong = p->pong ^ p->ping;
  4024da:	687b      	ldr	r3, [r7, #4]
  4024dc:	795a      	ldrb	r2, [r3, #5]
  4024de:	687b      	ldr	r3, [r7, #4]
  4024e0:	791b      	ldrb	r3, [r3, #4]
  4024e2:	4053      	eors	r3, r2
  4024e4:	b2da      	uxtb	r2, r3
  4024e6:	687b      	ldr	r3, [r7, #4]
  4024e8:	715a      	strb	r2, [r3, #5]
		p->ping = p->ping ^ p->pong;
  4024ea:	687b      	ldr	r3, [r7, #4]
  4024ec:	791a      	ldrb	r2, [r3, #4]
  4024ee:	687b      	ldr	r3, [r7, #4]
  4024f0:	795b      	ldrb	r3, [r3, #5]
  4024f2:	4053      	eors	r3, r2
  4024f4:	b2da      	uxtb	r2, r3
  4024f6:	687b      	ldr	r3, [r7, #4]
  4024f8:	711a      	strb	r2, [r3, #4]

		/* resets the buffer position */
		p->get_index = 0;
  4024fa:	687b      	ldr	r3, [r7, #4]
  4024fc:	2200      	movs	r2, #0
  4024fe:	611a      	str	r2, [r3, #16]
		p->put_index = 0;
  402500:	687b      	ldr	r3, [r7, #4]
  402502:	2200      	movs	r2, #0
  402504:	60da      	str	r2, [r3, #12]
		
		//ppbuf_lowpass(p);
		
	}

	return(ret);
  402506:	7bfb      	ldrb	r3, [r7, #15]
}
  402508:	4618      	mov	r0, r3
  40250a:	3714      	adds	r7, #20
  40250c:	46bd      	mov	sp, r7
  40250e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402512:	4770      	bx	lr

00402514 <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  402514:	b480      	push	{r7}
  402516:	b083      	sub	sp, #12
  402518:	af00      	add	r7, sp, #0
  40251a:	6078      	str	r0, [r7, #4]
  40251c:	460b      	mov	r3, r1
  40251e:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  402520:	bf00      	nop
  402522:	370c      	adds	r7, #12
  402524:	46bd      	mov	sp, r7
  402526:	f85d 7b04 	ldr.w	r7, [sp], #4
  40252a:	4770      	bx	lr

0040252c <afec_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
  40252c:	b480      	push	{r7}
  40252e:	b085      	sub	sp, #20
  402530:	af00      	add	r7, sp, #0
  402532:	6078      	str	r0, [r7, #4]
  402534:	460b      	mov	r3, r1
  402536:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = afec->AFEC_MR;
  402538:	687b      	ldr	r3, [r7, #4]
  40253a:	685b      	ldr	r3, [r3, #4]
  40253c:	60fb      	str	r3, [r7, #12]

	if (trigger == AFEC_TRIG_FREERUN) {
  40253e:	78fb      	ldrb	r3, [r7, #3]
  402540:	2bff      	cmp	r3, #255	; 0xff
  402542:	d104      	bne.n	40254e <afec_set_trigger+0x22>
		reg |= AFEC_MR_FREERUN_ON;
  402544:	68fb      	ldr	r3, [r7, #12]
  402546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40254a:	60fb      	str	r3, [r7, #12]
  40254c:	e007      	b.n	40255e <afec_set_trigger+0x32>
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  40254e:	68fb      	ldr	r3, [r7, #12]
  402550:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  402554:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  402556:	78fb      	ldrb	r3, [r7, #3]
  402558:	68fa      	ldr	r2, [r7, #12]
  40255a:	4313      	orrs	r3, r2
  40255c:	60fb      	str	r3, [r7, #12]
	}

	afec->AFEC_MR = reg;
  40255e:	687b      	ldr	r3, [r7, #4]
  402560:	68fa      	ldr	r2, [r7, #12]
  402562:	605a      	str	r2, [r3, #4]
}
  402564:	bf00      	nop
  402566:	3714      	adds	r7, #20
  402568:	46bd      	mov	sp, r7
  40256a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40256e:	4770      	bx	lr

00402570 <afec_start_software_conversion>:
 * this function can NOT start analog to digital conversion.
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
  402570:	b480      	push	{r7}
  402572:	b083      	sub	sp, #12
  402574:	af00      	add	r7, sp, #0
  402576:	6078      	str	r0, [r7, #4]
	afec->AFEC_CR = AFEC_CR_START;
  402578:	687b      	ldr	r3, [r7, #4]
  40257a:	2202      	movs	r2, #2
  40257c:	601a      	str	r2, [r3, #0]
}
  40257e:	bf00      	nop
  402580:	370c      	adds	r7, #12
  402582:	46bd      	mov	sp, r7
  402584:	f85d 7b04 	ldr.w	r7, [sp], #4
  402588:	4770      	bx	lr
	...

0040258c <afec_channel_enable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_enable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  40258c:	b580      	push	{r7, lr}
  40258e:	b082      	sub	sp, #8
  402590:	af00      	add	r7, sp, #0
  402592:	6078      	str	r0, [r7, #4]
  402594:	460b      	mov	r3, r1
  402596:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  402598:	887b      	ldrh	r3, [r7, #2]
  40259a:	f640 72ff 	movw	r2, #4095	; 0xfff
  40259e:	4293      	cmp	r3, r2
  4025a0:	d004      	beq.n	4025ac <afec_channel_enable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  4025a2:	887b      	ldrh	r3, [r7, #2]
  4025a4:	4619      	mov	r1, r3
  4025a6:	6878      	ldr	r0, [r7, #4]
  4025a8:	4b0a      	ldr	r3, [pc, #40]	; (4025d4 <afec_channel_enable+0x48>)
  4025aa:	4798      	blx	r3
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4025ac:	887b      	ldrh	r3, [r7, #2]
  4025ae:	f640 72ff 	movw	r2, #4095	; 0xfff
  4025b2:	4293      	cmp	r3, r2
  4025b4:	d005      	beq.n	4025c2 <afec_channel_enable+0x36>
  4025b6:	887b      	ldrh	r3, [r7, #2]
  4025b8:	2201      	movs	r2, #1
  4025ba:	fa02 f303 	lsl.w	r3, r2, r3
  4025be:	461a      	mov	r2, r3
  4025c0:	e001      	b.n	4025c6 <afec_channel_enable+0x3a>
  4025c2:	f640 72ff 	movw	r2, #4095	; 0xfff
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4025c6:	687b      	ldr	r3, [r7, #4]
  4025c8:	615a      	str	r2, [r3, #20]
}
  4025ca:	bf00      	nop
  4025cc:	3708      	adds	r7, #8
  4025ce:	46bd      	mov	sp, r7
  4025d0:	bd80      	pop	{r7, pc}
  4025d2:	bf00      	nop
  4025d4:	00402515 	.word	0x00402515

004025d8 <afec_channel_disable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_disable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  4025d8:	b580      	push	{r7, lr}
  4025da:	b082      	sub	sp, #8
  4025dc:	af00      	add	r7, sp, #0
  4025de:	6078      	str	r0, [r7, #4]
  4025e0:	460b      	mov	r3, r1
  4025e2:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  4025e4:	887b      	ldrh	r3, [r7, #2]
  4025e6:	f640 72ff 	movw	r2, #4095	; 0xfff
  4025ea:	4293      	cmp	r3, r2
  4025ec:	d004      	beq.n	4025f8 <afec_channel_disable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  4025ee:	887b      	ldrh	r3, [r7, #2]
  4025f0:	4619      	mov	r1, r3
  4025f2:	6878      	ldr	r0, [r7, #4]
  4025f4:	4b0a      	ldr	r3, [pc, #40]	; (402620 <afec_channel_disable+0x48>)
  4025f6:	4798      	blx	r3
	}

	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  4025f8:	887b      	ldrh	r3, [r7, #2]
  4025fa:	f640 72ff 	movw	r2, #4095	; 0xfff
  4025fe:	4293      	cmp	r3, r2
  402600:	d005      	beq.n	40260e <afec_channel_disable+0x36>
  402602:	887b      	ldrh	r3, [r7, #2]
  402604:	2201      	movs	r2, #1
  402606:	fa02 f303 	lsl.w	r3, r2, r3
  40260a:	461a      	mov	r2, r3
  40260c:	e001      	b.n	402612 <afec_channel_disable+0x3a>
  40260e:	f640 72ff 	movw	r2, #4095	; 0xfff
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  402612:	687b      	ldr	r3, [r7, #4]
  402614:	619a      	str	r2, [r3, #24]
}
  402616:	bf00      	nop
  402618:	3708      	adds	r7, #8
  40261a:	46bd      	mov	sp, r7
  40261c:	bd80      	pop	{r7, pc}
  40261e:	bf00      	nop
  402620:	00402515 	.word	0x00402515

00402624 <afec_channel_get_value>:
 *
 * \return AFEC converted value of the selected channel.
 */
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
  402624:	b580      	push	{r7, lr}
  402626:	b082      	sub	sp, #8
  402628:	af00      	add	r7, sp, #0
  40262a:	6078      	str	r0, [r7, #4]
  40262c:	460b      	mov	r3, r1
  40262e:	807b      	strh	r3, [r7, #2]
	afec_ch_sanity_check(afec, afec_ch);
  402630:	887b      	ldrh	r3, [r7, #2]
  402632:	4619      	mov	r1, r3
  402634:	6878      	ldr	r0, [r7, #4]
  402636:	4b05      	ldr	r3, [pc, #20]	; (40264c <afec_channel_get_value+0x28>)
  402638:	4798      	blx	r3

	afec->AFEC_CSELR = afec_ch;
  40263a:	887a      	ldrh	r2, [r7, #2]
  40263c:	687b      	ldr	r3, [r7, #4]
  40263e:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402640:	687b      	ldr	r3, [r7, #4]
  402642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
  402644:	4618      	mov	r0, r3
  402646:	3708      	adds	r7, #8
  402648:	46bd      	mov	sp, r7
  40264a:	bd80      	pop	{r7, pc}
  40264c:	00402515 	.word	0x00402515

00402650 <afec_channel_set_analog_offset>:
 * \param afec_ch AFEC channel number.
 * \param aoffset  Analog offset value.
 */
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
  402650:	b580      	push	{r7, lr}
  402652:	b082      	sub	sp, #8
  402654:	af00      	add	r7, sp, #0
  402656:	6078      	str	r0, [r7, #4]
  402658:	460b      	mov	r3, r1
  40265a:	807b      	strh	r3, [r7, #2]
  40265c:	4613      	mov	r3, r2
  40265e:	803b      	strh	r3, [r7, #0]
	afec_ch_sanity_check(afec, afec_ch);
  402660:	887b      	ldrh	r3, [r7, #2]
  402662:	4619      	mov	r1, r3
  402664:	6878      	ldr	r0, [r7, #4]
  402666:	4b07      	ldr	r3, [pc, #28]	; (402684 <afec_channel_set_analog_offset+0x34>)
  402668:	4798      	blx	r3

	afec->AFEC_CSELR = afec_ch;
  40266a:	887a      	ldrh	r2, [r7, #2]
  40266c:	687b      	ldr	r3, [r7, #4]
  40266e:	665a      	str	r2, [r3, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402670:	883b      	ldrh	r3, [r7, #0]
  402672:	f3c3 020b 	ubfx	r2, r3, #0, #12
  402676:	687b      	ldr	r3, [r7, #4]
  402678:	66da      	str	r2, [r3, #108]	; 0x6c
}
  40267a:	bf00      	nop
  40267c:	3708      	adds	r7, #8
  40267e:	46bd      	mov	sp, r7
  402680:	bd80      	pop	{r7, pc}
  402682:	bf00      	nop
  402684:	00402515 	.word	0x00402515

00402688 <osc_get_rate>:
{
  402688:	b480      	push	{r7}
  40268a:	b083      	sub	sp, #12
  40268c:	af00      	add	r7, sp, #0
  40268e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402690:	687b      	ldr	r3, [r7, #4]
  402692:	2b07      	cmp	r3, #7
  402694:	d825      	bhi.n	4026e2 <osc_get_rate+0x5a>
  402696:	a201      	add	r2, pc, #4	; (adr r2, 40269c <osc_get_rate+0x14>)
  402698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40269c:	004026bd 	.word	0x004026bd
  4026a0:	004026c3 	.word	0x004026c3
  4026a4:	004026c9 	.word	0x004026c9
  4026a8:	004026cf 	.word	0x004026cf
  4026ac:	004026d3 	.word	0x004026d3
  4026b0:	004026d7 	.word	0x004026d7
  4026b4:	004026db 	.word	0x004026db
  4026b8:	004026df 	.word	0x004026df
		return OSC_SLCK_32K_RC_HZ;
  4026bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4026c0:	e010      	b.n	4026e4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4026c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4026c6:	e00d      	b.n	4026e4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4026c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4026cc:	e00a      	b.n	4026e4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4026ce:	4b08      	ldr	r3, [pc, #32]	; (4026f0 <osc_get_rate+0x68>)
  4026d0:	e008      	b.n	4026e4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4026d2:	4b08      	ldr	r3, [pc, #32]	; (4026f4 <osc_get_rate+0x6c>)
  4026d4:	e006      	b.n	4026e4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4026d6:	4b08      	ldr	r3, [pc, #32]	; (4026f8 <osc_get_rate+0x70>)
  4026d8:	e004      	b.n	4026e4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4026da:	4b07      	ldr	r3, [pc, #28]	; (4026f8 <osc_get_rate+0x70>)
  4026dc:	e002      	b.n	4026e4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4026de:	4b06      	ldr	r3, [pc, #24]	; (4026f8 <osc_get_rate+0x70>)
  4026e0:	e000      	b.n	4026e4 <osc_get_rate+0x5c>
	return 0;
  4026e2:	2300      	movs	r3, #0
}
  4026e4:	4618      	mov	r0, r3
  4026e6:	370c      	adds	r7, #12
  4026e8:	46bd      	mov	sp, r7
  4026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026ee:	4770      	bx	lr
  4026f0:	003d0900 	.word	0x003d0900
  4026f4:	007a1200 	.word	0x007a1200
  4026f8:	00b71b00 	.word	0x00b71b00

004026fc <sysclk_get_main_hz>:
{
  4026fc:	b580      	push	{r7, lr}
  4026fe:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402700:	2006      	movs	r0, #6
  402702:	4b05      	ldr	r3, [pc, #20]	; (402718 <sysclk_get_main_hz+0x1c>)
  402704:	4798      	blx	r3
  402706:	4602      	mov	r2, r0
  402708:	4613      	mov	r3, r2
  40270a:	009b      	lsls	r3, r3, #2
  40270c:	4413      	add	r3, r2
  40270e:	009a      	lsls	r2, r3, #2
  402710:	4413      	add	r3, r2
}
  402712:	4618      	mov	r0, r3
  402714:	bd80      	pop	{r7, pc}
  402716:	bf00      	nop
  402718:	00402689 	.word	0x00402689

0040271c <sysclk_get_cpu_hz>:
{
  40271c:	b580      	push	{r7, lr}
  40271e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402720:	4b02      	ldr	r3, [pc, #8]	; (40272c <sysclk_get_cpu_hz+0x10>)
  402722:	4798      	blx	r3
  402724:	4603      	mov	r3, r0
}
  402726:	4618      	mov	r0, r3
  402728:	bd80      	pop	{r7, pc}
  40272a:	bf00      	nop
  40272c:	004026fd 	.word	0x004026fd

00402730 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402730:	b580      	push	{r7, lr}
  402732:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402734:	4b02      	ldr	r3, [pc, #8]	; (402740 <sysclk_get_peripheral_hz+0x10>)
  402736:	4798      	blx	r3
  402738:	4603      	mov	r3, r0
  40273a:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  40273c:	4618      	mov	r0, r3
  40273e:	bd80      	pop	{r7, pc}
  402740:	004026fd 	.word	0x004026fd

00402744 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402744:	b580      	push	{r7, lr}
  402746:	b082      	sub	sp, #8
  402748:	af00      	add	r7, sp, #0
  40274a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40274c:	6878      	ldr	r0, [r7, #4]
  40274e:	4b03      	ldr	r3, [pc, #12]	; (40275c <sysclk_enable_peripheral_clock+0x18>)
  402750:	4798      	blx	r3
}
  402752:	bf00      	nop
  402754:	3708      	adds	r7, #8
  402756:	46bd      	mov	sp, r7
  402758:	bd80      	pop	{r7, pc}
  40275a:	bf00      	nop
  40275c:	00404d25 	.word	0x00404d25

00402760 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  402760:	b580      	push	{r7, lr}
  402762:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  402764:	200a      	movs	r0, #10
  402766:	4b08      	ldr	r3, [pc, #32]	; (402788 <ioport_init+0x28>)
  402768:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40276a:	200b      	movs	r0, #11
  40276c:	4b06      	ldr	r3, [pc, #24]	; (402788 <ioport_init+0x28>)
  40276e:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  402770:	200c      	movs	r0, #12
  402772:	4b05      	ldr	r3, [pc, #20]	; (402788 <ioport_init+0x28>)
  402774:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  402776:	2010      	movs	r0, #16
  402778:	4b03      	ldr	r3, [pc, #12]	; (402788 <ioport_init+0x28>)
  40277a:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  40277c:	2011      	movs	r0, #17
  40277e:	4b02      	ldr	r3, [pc, #8]	; (402788 <ioport_init+0x28>)
  402780:	4798      	blx	r3
	arch_ioport_init();
}
  402782:	bf00      	nop
  402784:	bd80      	pop	{r7, pc}
  402786:	bf00      	nop
  402788:	00402745 	.word	0x00402745

0040278c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  40278c:	b580      	push	{r7, lr}
  40278e:	b08c      	sub	sp, #48	; 0x30
  402790:	af00      	add	r7, sp, #0
  402792:	6078      	str	r0, [r7, #4]
  402794:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  402796:	4b49      	ldr	r3, [pc, #292]	; (4028bc <usart_serial_init+0x130>)
  402798:	4798      	blx	r3
  40279a:	4603      	mov	r3, r0
  40279c:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  40279e:	683b      	ldr	r3, [r7, #0]
  4027a0:	681b      	ldr	r3, [r3, #0]
  4027a2:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  4027a4:	683b      	ldr	r3, [r7, #0]
  4027a6:	689b      	ldr	r3, [r3, #8]
  4027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  4027aa:	683b      	ldr	r3, [r7, #0]
  4027ac:	681b      	ldr	r3, [r3, #0]
  4027ae:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  4027b0:	683b      	ldr	r3, [r7, #0]
  4027b2:	685b      	ldr	r3, [r3, #4]
  4027b4:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  4027b6:	683b      	ldr	r3, [r7, #0]
  4027b8:	689b      	ldr	r3, [r3, #8]
  4027ba:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4027bc:	683b      	ldr	r3, [r7, #0]
  4027be:	68db      	ldr	r3, [r3, #12]
  4027c0:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4027c2:	2300      	movs	r3, #0
  4027c4:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4027c6:	687b      	ldr	r3, [r7, #4]
  4027c8:	4a3d      	ldr	r2, [pc, #244]	; (4028c0 <usart_serial_init+0x134>)
  4027ca:	4293      	cmp	r3, r2
  4027cc:	d108      	bne.n	4027e0 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  4027ce:	2007      	movs	r0, #7
  4027d0:	4b3c      	ldr	r3, [pc, #240]	; (4028c4 <usart_serial_init+0x138>)
  4027d2:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4027d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4027d8:	4619      	mov	r1, r3
  4027da:	6878      	ldr	r0, [r7, #4]
  4027dc:	4b3a      	ldr	r3, [pc, #232]	; (4028c8 <usart_serial_init+0x13c>)
  4027de:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4027e0:	687b      	ldr	r3, [r7, #4]
  4027e2:	4a3a      	ldr	r2, [pc, #232]	; (4028cc <usart_serial_init+0x140>)
  4027e4:	4293      	cmp	r3, r2
  4027e6:	d108      	bne.n	4027fa <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  4027e8:	2008      	movs	r0, #8
  4027ea:	4b36      	ldr	r3, [pc, #216]	; (4028c4 <usart_serial_init+0x138>)
  4027ec:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  4027ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
  4027f2:	4619      	mov	r1, r3
  4027f4:	6878      	ldr	r0, [r7, #4]
  4027f6:	4b34      	ldr	r3, [pc, #208]	; (4028c8 <usart_serial_init+0x13c>)
  4027f8:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4027fa:	687b      	ldr	r3, [r7, #4]
  4027fc:	4a34      	ldr	r2, [pc, #208]	; (4028d0 <usart_serial_init+0x144>)
  4027fe:	4293      	cmp	r3, r2
  402800:	d108      	bne.n	402814 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  402802:	202c      	movs	r0, #44	; 0x2c
  402804:	4b2f      	ldr	r3, [pc, #188]	; (4028c4 <usart_serial_init+0x138>)
  402806:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402808:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40280c:	4619      	mov	r1, r3
  40280e:	6878      	ldr	r0, [r7, #4]
  402810:	4b2d      	ldr	r3, [pc, #180]	; (4028c8 <usart_serial_init+0x13c>)
  402812:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402814:	687b      	ldr	r3, [r7, #4]
  402816:	4a2f      	ldr	r2, [pc, #188]	; (4028d4 <usart_serial_init+0x148>)
  402818:	4293      	cmp	r3, r2
  40281a:	d108      	bne.n	40282e <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  40281c:	202d      	movs	r0, #45	; 0x2d
  40281e:	4b29      	ldr	r3, [pc, #164]	; (4028c4 <usart_serial_init+0x138>)
  402820:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402822:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402826:	4619      	mov	r1, r3
  402828:	6878      	ldr	r0, [r7, #4]
  40282a:	4b27      	ldr	r3, [pc, #156]	; (4028c8 <usart_serial_init+0x13c>)
  40282c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40282e:	687b      	ldr	r3, [r7, #4]
  402830:	4a29      	ldr	r2, [pc, #164]	; (4028d8 <usart_serial_init+0x14c>)
  402832:	4293      	cmp	r3, r2
  402834:	d111      	bne.n	40285a <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  402836:	200d      	movs	r0, #13
  402838:	4b22      	ldr	r3, [pc, #136]	; (4028c4 <usart_serial_init+0x138>)
  40283a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40283c:	4b1f      	ldr	r3, [pc, #124]	; (4028bc <usart_serial_init+0x130>)
  40283e:	4798      	blx	r3
  402840:	4602      	mov	r2, r0
  402842:	f107 030c 	add.w	r3, r7, #12
  402846:	4619      	mov	r1, r3
  402848:	6878      	ldr	r0, [r7, #4]
  40284a:	4b24      	ldr	r3, [pc, #144]	; (4028dc <usart_serial_init+0x150>)
  40284c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40284e:	6878      	ldr	r0, [r7, #4]
  402850:	4b23      	ldr	r3, [pc, #140]	; (4028e0 <usart_serial_init+0x154>)
  402852:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402854:	6878      	ldr	r0, [r7, #4]
  402856:	4b23      	ldr	r3, [pc, #140]	; (4028e4 <usart_serial_init+0x158>)
  402858:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40285a:	687b      	ldr	r3, [r7, #4]
  40285c:	4a22      	ldr	r2, [pc, #136]	; (4028e8 <usart_serial_init+0x15c>)
  40285e:	4293      	cmp	r3, r2
  402860:	d111      	bne.n	402886 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  402862:	200e      	movs	r0, #14
  402864:	4b17      	ldr	r3, [pc, #92]	; (4028c4 <usart_serial_init+0x138>)
  402866:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402868:	4b14      	ldr	r3, [pc, #80]	; (4028bc <usart_serial_init+0x130>)
  40286a:	4798      	blx	r3
  40286c:	4602      	mov	r2, r0
  40286e:	f107 030c 	add.w	r3, r7, #12
  402872:	4619      	mov	r1, r3
  402874:	6878      	ldr	r0, [r7, #4]
  402876:	4b19      	ldr	r3, [pc, #100]	; (4028dc <usart_serial_init+0x150>)
  402878:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40287a:	6878      	ldr	r0, [r7, #4]
  40287c:	4b18      	ldr	r3, [pc, #96]	; (4028e0 <usart_serial_init+0x154>)
  40287e:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402880:	6878      	ldr	r0, [r7, #4]
  402882:	4b18      	ldr	r3, [pc, #96]	; (4028e4 <usart_serial_init+0x158>)
  402884:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402886:	687b      	ldr	r3, [r7, #4]
  402888:	4a18      	ldr	r2, [pc, #96]	; (4028ec <usart_serial_init+0x160>)
  40288a:	4293      	cmp	r3, r2
  40288c:	d111      	bne.n	4028b2 <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  40288e:	200f      	movs	r0, #15
  402890:	4b0c      	ldr	r3, [pc, #48]	; (4028c4 <usart_serial_init+0x138>)
  402892:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402894:	4b09      	ldr	r3, [pc, #36]	; (4028bc <usart_serial_init+0x130>)
  402896:	4798      	blx	r3
  402898:	4602      	mov	r2, r0
  40289a:	f107 030c 	add.w	r3, r7, #12
  40289e:	4619      	mov	r1, r3
  4028a0:	6878      	ldr	r0, [r7, #4]
  4028a2:	4b0e      	ldr	r3, [pc, #56]	; (4028dc <usart_serial_init+0x150>)
  4028a4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4028a6:	6878      	ldr	r0, [r7, #4]
  4028a8:	4b0d      	ldr	r3, [pc, #52]	; (4028e0 <usart_serial_init+0x154>)
  4028aa:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4028ac:	6878      	ldr	r0, [r7, #4]
  4028ae:	4b0d      	ldr	r3, [pc, #52]	; (4028e4 <usart_serial_init+0x158>)
  4028b0:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4028b2:	bf00      	nop
  4028b4:	3730      	adds	r7, #48	; 0x30
  4028b6:	46bd      	mov	sp, r7
  4028b8:	bd80      	pop	{r7, pc}
  4028ba:	bf00      	nop
  4028bc:	00402731 	.word	0x00402731
  4028c0:	400e0800 	.word	0x400e0800
  4028c4:	00402745 	.word	0x00402745
  4028c8:	00404da9 	.word	0x00404da9
  4028cc:	400e0a00 	.word	0x400e0a00
  4028d0:	400e1a00 	.word	0x400e1a00
  4028d4:	400e1c00 	.word	0x400e1c00
  4028d8:	40024000 	.word	0x40024000
  4028dc:	00404f41 	.word	0x00404f41
  4028e0:	00404fc5 	.word	0x00404fc5
  4028e4:	00404ff9 	.word	0x00404ff9
  4028e8:	40028000 	.word	0x40028000
  4028ec:	4002c000 	.word	0x4002c000

004028f0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4028f0:	b580      	push	{r7, lr}
  4028f2:	b082      	sub	sp, #8
  4028f4:	af00      	add	r7, sp, #0
  4028f6:	6078      	str	r0, [r7, #4]
  4028f8:	460b      	mov	r3, r1
  4028fa:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4028fc:	687b      	ldr	r3, [r7, #4]
  4028fe:	4a36      	ldr	r2, [pc, #216]	; (4029d8 <usart_serial_putchar+0xe8>)
  402900:	4293      	cmp	r3, r2
  402902:	d10a      	bne.n	40291a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  402904:	bf00      	nop
  402906:	78fb      	ldrb	r3, [r7, #3]
  402908:	4619      	mov	r1, r3
  40290a:	6878      	ldr	r0, [r7, #4]
  40290c:	4b33      	ldr	r3, [pc, #204]	; (4029dc <usart_serial_putchar+0xec>)
  40290e:	4798      	blx	r3
  402910:	4603      	mov	r3, r0
  402912:	2b00      	cmp	r3, #0
  402914:	d1f7      	bne.n	402906 <usart_serial_putchar+0x16>
		return 1;
  402916:	2301      	movs	r3, #1
  402918:	e05a      	b.n	4029d0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40291a:	687b      	ldr	r3, [r7, #4]
  40291c:	4a30      	ldr	r2, [pc, #192]	; (4029e0 <usart_serial_putchar+0xf0>)
  40291e:	4293      	cmp	r3, r2
  402920:	d10a      	bne.n	402938 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  402922:	bf00      	nop
  402924:	78fb      	ldrb	r3, [r7, #3]
  402926:	4619      	mov	r1, r3
  402928:	6878      	ldr	r0, [r7, #4]
  40292a:	4b2c      	ldr	r3, [pc, #176]	; (4029dc <usart_serial_putchar+0xec>)
  40292c:	4798      	blx	r3
  40292e:	4603      	mov	r3, r0
  402930:	2b00      	cmp	r3, #0
  402932:	d1f7      	bne.n	402924 <usart_serial_putchar+0x34>
		return 1;
  402934:	2301      	movs	r3, #1
  402936:	e04b      	b.n	4029d0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402938:	687b      	ldr	r3, [r7, #4]
  40293a:	4a2a      	ldr	r2, [pc, #168]	; (4029e4 <usart_serial_putchar+0xf4>)
  40293c:	4293      	cmp	r3, r2
  40293e:	d10a      	bne.n	402956 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  402940:	bf00      	nop
  402942:	78fb      	ldrb	r3, [r7, #3]
  402944:	4619      	mov	r1, r3
  402946:	6878      	ldr	r0, [r7, #4]
  402948:	4b24      	ldr	r3, [pc, #144]	; (4029dc <usart_serial_putchar+0xec>)
  40294a:	4798      	blx	r3
  40294c:	4603      	mov	r3, r0
  40294e:	2b00      	cmp	r3, #0
  402950:	d1f7      	bne.n	402942 <usart_serial_putchar+0x52>
		return 1;
  402952:	2301      	movs	r3, #1
  402954:	e03c      	b.n	4029d0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402956:	687b      	ldr	r3, [r7, #4]
  402958:	4a23      	ldr	r2, [pc, #140]	; (4029e8 <usart_serial_putchar+0xf8>)
  40295a:	4293      	cmp	r3, r2
  40295c:	d10a      	bne.n	402974 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  40295e:	bf00      	nop
  402960:	78fb      	ldrb	r3, [r7, #3]
  402962:	4619      	mov	r1, r3
  402964:	6878      	ldr	r0, [r7, #4]
  402966:	4b1d      	ldr	r3, [pc, #116]	; (4029dc <usart_serial_putchar+0xec>)
  402968:	4798      	blx	r3
  40296a:	4603      	mov	r3, r0
  40296c:	2b00      	cmp	r3, #0
  40296e:	d1f7      	bne.n	402960 <usart_serial_putchar+0x70>
		return 1;
  402970:	2301      	movs	r3, #1
  402972:	e02d      	b.n	4029d0 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402974:	687b      	ldr	r3, [r7, #4]
  402976:	4a1d      	ldr	r2, [pc, #116]	; (4029ec <usart_serial_putchar+0xfc>)
  402978:	4293      	cmp	r3, r2
  40297a:	d10a      	bne.n	402992 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  40297c:	bf00      	nop
  40297e:	78fb      	ldrb	r3, [r7, #3]
  402980:	4619      	mov	r1, r3
  402982:	6878      	ldr	r0, [r7, #4]
  402984:	4b1a      	ldr	r3, [pc, #104]	; (4029f0 <usart_serial_putchar+0x100>)
  402986:	4798      	blx	r3
  402988:	4603      	mov	r3, r0
  40298a:	2b00      	cmp	r3, #0
  40298c:	d1f7      	bne.n	40297e <usart_serial_putchar+0x8e>
		return 1;
  40298e:	2301      	movs	r3, #1
  402990:	e01e      	b.n	4029d0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402992:	687b      	ldr	r3, [r7, #4]
  402994:	4a17      	ldr	r2, [pc, #92]	; (4029f4 <usart_serial_putchar+0x104>)
  402996:	4293      	cmp	r3, r2
  402998:	d10a      	bne.n	4029b0 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  40299a:	bf00      	nop
  40299c:	78fb      	ldrb	r3, [r7, #3]
  40299e:	4619      	mov	r1, r3
  4029a0:	6878      	ldr	r0, [r7, #4]
  4029a2:	4b13      	ldr	r3, [pc, #76]	; (4029f0 <usart_serial_putchar+0x100>)
  4029a4:	4798      	blx	r3
  4029a6:	4603      	mov	r3, r0
  4029a8:	2b00      	cmp	r3, #0
  4029aa:	d1f7      	bne.n	40299c <usart_serial_putchar+0xac>
		return 1;
  4029ac:	2301      	movs	r3, #1
  4029ae:	e00f      	b.n	4029d0 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4029b0:	687b      	ldr	r3, [r7, #4]
  4029b2:	4a11      	ldr	r2, [pc, #68]	; (4029f8 <usart_serial_putchar+0x108>)
  4029b4:	4293      	cmp	r3, r2
  4029b6:	d10a      	bne.n	4029ce <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  4029b8:	bf00      	nop
  4029ba:	78fb      	ldrb	r3, [r7, #3]
  4029bc:	4619      	mov	r1, r3
  4029be:	6878      	ldr	r0, [r7, #4]
  4029c0:	4b0b      	ldr	r3, [pc, #44]	; (4029f0 <usart_serial_putchar+0x100>)
  4029c2:	4798      	blx	r3
  4029c4:	4603      	mov	r3, r0
  4029c6:	2b00      	cmp	r3, #0
  4029c8:	d1f7      	bne.n	4029ba <usart_serial_putchar+0xca>
		return 1;
  4029ca:	2301      	movs	r3, #1
  4029cc:	e000      	b.n	4029d0 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4029ce:	2300      	movs	r3, #0
}
  4029d0:	4618      	mov	r0, r3
  4029d2:	3708      	adds	r7, #8
  4029d4:	46bd      	mov	sp, r7
  4029d6:	bd80      	pop	{r7, pc}
  4029d8:	400e0800 	.word	0x400e0800
  4029dc:	00404e01 	.word	0x00404e01
  4029e0:	400e0a00 	.word	0x400e0a00
  4029e4:	400e1a00 	.word	0x400e1a00
  4029e8:	400e1c00 	.word	0x400e1c00
  4029ec:	40024000 	.word	0x40024000
  4029f0:	00405065 	.word	0x00405065
  4029f4:	40028000 	.word	0x40028000
  4029f8:	4002c000 	.word	0x4002c000

004029fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4029fc:	b580      	push	{r7, lr}
  4029fe:	b084      	sub	sp, #16
  402a00:	af00      	add	r7, sp, #0
  402a02:	6078      	str	r0, [r7, #4]
  402a04:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  402a06:	2300      	movs	r3, #0
  402a08:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402a0a:	687b      	ldr	r3, [r7, #4]
  402a0c:	4a34      	ldr	r2, [pc, #208]	; (402ae0 <usart_serial_getchar+0xe4>)
  402a0e:	4293      	cmp	r3, r2
  402a10:	d107      	bne.n	402a22 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  402a12:	bf00      	nop
  402a14:	6839      	ldr	r1, [r7, #0]
  402a16:	6878      	ldr	r0, [r7, #4]
  402a18:	4b32      	ldr	r3, [pc, #200]	; (402ae4 <usart_serial_getchar+0xe8>)
  402a1a:	4798      	blx	r3
  402a1c:	4603      	mov	r3, r0
  402a1e:	2b00      	cmp	r3, #0
  402a20:	d1f8      	bne.n	402a14 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402a22:	687b      	ldr	r3, [r7, #4]
  402a24:	4a30      	ldr	r2, [pc, #192]	; (402ae8 <usart_serial_getchar+0xec>)
  402a26:	4293      	cmp	r3, r2
  402a28:	d107      	bne.n	402a3a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  402a2a:	bf00      	nop
  402a2c:	6839      	ldr	r1, [r7, #0]
  402a2e:	6878      	ldr	r0, [r7, #4]
  402a30:	4b2c      	ldr	r3, [pc, #176]	; (402ae4 <usart_serial_getchar+0xe8>)
  402a32:	4798      	blx	r3
  402a34:	4603      	mov	r3, r0
  402a36:	2b00      	cmp	r3, #0
  402a38:	d1f8      	bne.n	402a2c <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402a3a:	687b      	ldr	r3, [r7, #4]
  402a3c:	4a2b      	ldr	r2, [pc, #172]	; (402aec <usart_serial_getchar+0xf0>)
  402a3e:	4293      	cmp	r3, r2
  402a40:	d107      	bne.n	402a52 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  402a42:	bf00      	nop
  402a44:	6839      	ldr	r1, [r7, #0]
  402a46:	6878      	ldr	r0, [r7, #4]
  402a48:	4b26      	ldr	r3, [pc, #152]	; (402ae4 <usart_serial_getchar+0xe8>)
  402a4a:	4798      	blx	r3
  402a4c:	4603      	mov	r3, r0
  402a4e:	2b00      	cmp	r3, #0
  402a50:	d1f8      	bne.n	402a44 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402a52:	687b      	ldr	r3, [r7, #4]
  402a54:	4a26      	ldr	r2, [pc, #152]	; (402af0 <usart_serial_getchar+0xf4>)
  402a56:	4293      	cmp	r3, r2
  402a58:	d107      	bne.n	402a6a <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  402a5a:	bf00      	nop
  402a5c:	6839      	ldr	r1, [r7, #0]
  402a5e:	6878      	ldr	r0, [r7, #4]
  402a60:	4b20      	ldr	r3, [pc, #128]	; (402ae4 <usart_serial_getchar+0xe8>)
  402a62:	4798      	blx	r3
  402a64:	4603      	mov	r3, r0
  402a66:	2b00      	cmp	r3, #0
  402a68:	d1f8      	bne.n	402a5c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402a6a:	687b      	ldr	r3, [r7, #4]
  402a6c:	4a21      	ldr	r2, [pc, #132]	; (402af4 <usart_serial_getchar+0xf8>)
  402a6e:	4293      	cmp	r3, r2
  402a70:	d10d      	bne.n	402a8e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  402a72:	bf00      	nop
  402a74:	f107 030c 	add.w	r3, r7, #12
  402a78:	4619      	mov	r1, r3
  402a7a:	6878      	ldr	r0, [r7, #4]
  402a7c:	4b1e      	ldr	r3, [pc, #120]	; (402af8 <usart_serial_getchar+0xfc>)
  402a7e:	4798      	blx	r3
  402a80:	4603      	mov	r3, r0
  402a82:	2b00      	cmp	r3, #0
  402a84:	d1f6      	bne.n	402a74 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  402a86:	68fb      	ldr	r3, [r7, #12]
  402a88:	b2da      	uxtb	r2, r3
  402a8a:	683b      	ldr	r3, [r7, #0]
  402a8c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402a8e:	687b      	ldr	r3, [r7, #4]
  402a90:	4a1a      	ldr	r2, [pc, #104]	; (402afc <usart_serial_getchar+0x100>)
  402a92:	4293      	cmp	r3, r2
  402a94:	d10d      	bne.n	402ab2 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  402a96:	bf00      	nop
  402a98:	f107 030c 	add.w	r3, r7, #12
  402a9c:	4619      	mov	r1, r3
  402a9e:	6878      	ldr	r0, [r7, #4]
  402aa0:	4b15      	ldr	r3, [pc, #84]	; (402af8 <usart_serial_getchar+0xfc>)
  402aa2:	4798      	blx	r3
  402aa4:	4603      	mov	r3, r0
  402aa6:	2b00      	cmp	r3, #0
  402aa8:	d1f6      	bne.n	402a98 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  402aaa:	68fb      	ldr	r3, [r7, #12]
  402aac:	b2da      	uxtb	r2, r3
  402aae:	683b      	ldr	r3, [r7, #0]
  402ab0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402ab2:	687b      	ldr	r3, [r7, #4]
  402ab4:	4a12      	ldr	r2, [pc, #72]	; (402b00 <usart_serial_getchar+0x104>)
  402ab6:	4293      	cmp	r3, r2
  402ab8:	d10d      	bne.n	402ad6 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  402aba:	bf00      	nop
  402abc:	f107 030c 	add.w	r3, r7, #12
  402ac0:	4619      	mov	r1, r3
  402ac2:	6878      	ldr	r0, [r7, #4]
  402ac4:	4b0c      	ldr	r3, [pc, #48]	; (402af8 <usart_serial_getchar+0xfc>)
  402ac6:	4798      	blx	r3
  402ac8:	4603      	mov	r3, r0
  402aca:	2b00      	cmp	r3, #0
  402acc:	d1f6      	bne.n	402abc <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  402ace:	68fb      	ldr	r3, [r7, #12]
  402ad0:	b2da      	uxtb	r2, r3
  402ad2:	683b      	ldr	r3, [r7, #0]
  402ad4:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402ad6:	bf00      	nop
  402ad8:	3710      	adds	r7, #16
  402ada:	46bd      	mov	sp, r7
  402adc:	bd80      	pop	{r7, pc}
  402ade:	bf00      	nop
  402ae0:	400e0800 	.word	0x400e0800
  402ae4:	00404e31 	.word	0x00404e31
  402ae8:	400e0a00 	.word	0x400e0a00
  402aec:	400e1a00 	.word	0x400e1a00
  402af0:	400e1c00 	.word	0x400e1c00
  402af4:	40024000 	.word	0x40024000
  402af8:	00405097 	.word	0x00405097
  402afc:	40028000 	.word	0x40028000
  402b00:	4002c000 	.word	0x4002c000

00402b04 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  402b04:	b580      	push	{r7, lr}
  402b06:	b082      	sub	sp, #8
  402b08:	af00      	add	r7, sp, #0
  402b0a:	6078      	str	r0, [r7, #4]
  402b0c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  402b0e:	4a0f      	ldr	r2, [pc, #60]	; (402b4c <stdio_serial_init+0x48>)
  402b10:	687b      	ldr	r3, [r7, #4]
  402b12:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402b14:	4b0e      	ldr	r3, [pc, #56]	; (402b50 <stdio_serial_init+0x4c>)
  402b16:	4a0f      	ldr	r2, [pc, #60]	; (402b54 <stdio_serial_init+0x50>)
  402b18:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402b1a:	4b0f      	ldr	r3, [pc, #60]	; (402b58 <stdio_serial_init+0x54>)
  402b1c:	4a0f      	ldr	r2, [pc, #60]	; (402b5c <stdio_serial_init+0x58>)
  402b1e:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  402b20:	6839      	ldr	r1, [r7, #0]
  402b22:	6878      	ldr	r0, [r7, #4]
  402b24:	4b0e      	ldr	r3, [pc, #56]	; (402b60 <stdio_serial_init+0x5c>)
  402b26:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402b28:	4b0e      	ldr	r3, [pc, #56]	; (402b64 <stdio_serial_init+0x60>)
  402b2a:	681b      	ldr	r3, [r3, #0]
  402b2c:	689b      	ldr	r3, [r3, #8]
  402b2e:	2100      	movs	r1, #0
  402b30:	4618      	mov	r0, r3
  402b32:	4b0d      	ldr	r3, [pc, #52]	; (402b68 <stdio_serial_init+0x64>)
  402b34:	4798      	blx	r3
	setbuf(stdin, NULL);
  402b36:	4b0b      	ldr	r3, [pc, #44]	; (402b64 <stdio_serial_init+0x60>)
  402b38:	681b      	ldr	r3, [r3, #0]
  402b3a:	685b      	ldr	r3, [r3, #4]
  402b3c:	2100      	movs	r1, #0
  402b3e:	4618      	mov	r0, r3
  402b40:	4b09      	ldr	r3, [pc, #36]	; (402b68 <stdio_serial_init+0x64>)
  402b42:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  402b44:	bf00      	nop
  402b46:	3708      	adds	r7, #8
  402b48:	46bd      	mov	sp, r7
  402b4a:	bd80      	pop	{r7, pc}
  402b4c:	2040af4c 	.word	0x2040af4c
  402b50:	2040af48 	.word	0x2040af48
  402b54:	004028f1 	.word	0x004028f1
  402b58:	2040af44 	.word	0x2040af44
  402b5c:	004029fd 	.word	0x004029fd
  402b60:	0040278d 	.word	0x0040278d
  402b64:	2040003c 	.word	0x2040003c
  402b68:	00405fdd 	.word	0x00405fdd

00402b6c <vApplicationMallocFailedHook>:
extern void vApplicationTickHook(void)
{
}

extern void vApplicationMallocFailedHook(void)
{
  402b6c:	b580      	push	{r7, lr}
  402b6e:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
  402b70:	4b01      	ldr	r3, [pc, #4]	; (402b78 <vApplicationMallocFailedHook+0xc>)
  402b72:	4798      	blx	r3
  402b74:	bf00      	nop
  402b76:	e7fd      	b.n	402b74 <vApplicationMallocFailedHook+0x8>
  402b78:	0040059d 	.word	0x0040059d

00402b7c <TC0_Handler>:
/* Callbacks / Handler                                                 */
/************************************************************************/
/**
*  Interrupt handler for TC1 interrupt.
*/
void TC0_Handler(void){
  402b7c:	b580      	push	{r7, lr}
  402b7e:	b082      	sub	sp, #8
  402b80:	af00      	add	r7, sp, #0
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrup��o foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC0, 0);
  402b82:	2100      	movs	r1, #0
  402b84:	4804      	ldr	r0, [pc, #16]	; (402b98 <TC0_Handler+0x1c>)
  402b86:	4b05      	ldr	r3, [pc, #20]	; (402b9c <TC0_Handler+0x20>)
  402b88:	4798      	blx	r3
  402b8a:	4603      	mov	r3, r0
  402b8c:	607b      	str	r3, [r7, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  402b8e:	687b      	ldr	r3, [r7, #4]

}
  402b90:	bf00      	nop
  402b92:	3708      	adds	r7, #8
  402b94:	46bd      	mov	sp, r7
  402b96:	bd80      	pop	{r7, pc}
  402b98:	4000c000 	.word	0x4000c000
  402b9c:	004036a5 	.word	0x004036a5

00402ba0 <Saturation>:
static void Volume(){
	g_ul_value  = (int) ((float) g_ul_value * volume);

}

static void Saturation(int value) {
  402ba0:	b480      	push	{r7}
  402ba2:	b085      	sub	sp, #20
  402ba4:	af00      	add	r7, sp, #0
  402ba6:	6078      	str	r0, [r7, #4]
	int sat_value = (int) ((100 - value) * ground / 100) + 20;
  402ba8:	687b      	ldr	r3, [r7, #4]
  402baa:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  402bae:	4a17      	ldr	r2, [pc, #92]	; (402c0c <Saturation+0x6c>)
  402bb0:	6812      	ldr	r2, [r2, #0]
  402bb2:	fb02 f303 	mul.w	r3, r2, r3
  402bb6:	4a16      	ldr	r2, [pc, #88]	; (402c10 <Saturation+0x70>)
  402bb8:	fb82 1203 	smull	r1, r2, r2, r3
  402bbc:	1152      	asrs	r2, r2, #5
  402bbe:	17db      	asrs	r3, r3, #31
  402bc0:	1ad3      	subs	r3, r2, r3
  402bc2:	3314      	adds	r3, #20
  402bc4:	60fb      	str	r3, [r7, #12]
	
	if (g_ul_value > ground + sat_value) g_ul_value = ground + sat_value;
  402bc6:	4b11      	ldr	r3, [pc, #68]	; (402c0c <Saturation+0x6c>)
  402bc8:	681a      	ldr	r2, [r3, #0]
  402bca:	68fb      	ldr	r3, [r7, #12]
  402bcc:	441a      	add	r2, r3
  402bce:	4b11      	ldr	r3, [pc, #68]	; (402c14 <Saturation+0x74>)
  402bd0:	681b      	ldr	r3, [r3, #0]
  402bd2:	429a      	cmp	r2, r3
  402bd4:	da05      	bge.n	402be2 <Saturation+0x42>
  402bd6:	4b0d      	ldr	r3, [pc, #52]	; (402c0c <Saturation+0x6c>)
  402bd8:	681a      	ldr	r2, [r3, #0]
  402bda:	68fb      	ldr	r3, [r7, #12]
  402bdc:	4413      	add	r3, r2
  402bde:	4a0d      	ldr	r2, [pc, #52]	; (402c14 <Saturation+0x74>)
  402be0:	6013      	str	r3, [r2, #0]
	if (g_ul_value < ground - sat_value) g_ul_value = ground - sat_value;
  402be2:	4b0a      	ldr	r3, [pc, #40]	; (402c0c <Saturation+0x6c>)
  402be4:	681a      	ldr	r2, [r3, #0]
  402be6:	68fb      	ldr	r3, [r7, #12]
  402be8:	1ad2      	subs	r2, r2, r3
  402bea:	4b0a      	ldr	r3, [pc, #40]	; (402c14 <Saturation+0x74>)
  402bec:	681b      	ldr	r3, [r3, #0]
  402bee:	429a      	cmp	r2, r3
  402bf0:	dd05      	ble.n	402bfe <Saturation+0x5e>
  402bf2:	4b06      	ldr	r3, [pc, #24]	; (402c0c <Saturation+0x6c>)
  402bf4:	681a      	ldr	r2, [r3, #0]
  402bf6:	68fb      	ldr	r3, [r7, #12]
  402bf8:	1ad3      	subs	r3, r2, r3
  402bfa:	4a06      	ldr	r2, [pc, #24]	; (402c14 <Saturation+0x74>)
  402bfc:	6013      	str	r3, [r2, #0]
}
  402bfe:	bf00      	nop
  402c00:	3714      	adds	r7, #20
  402c02:	46bd      	mov	sp, r7
  402c04:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c08:	4770      	bx	lr
  402c0a:	bf00      	nop
  402c0c:	20400030 	.word	0x20400030
  402c10:	51eb851f 	.word	0x51eb851f
  402c14:	2040ae74 	.word	0x2040ae74

00402c18 <Gain>:

static void Gain(int value) {
  402c18:	b480      	push	{r7}
  402c1a:	b085      	sub	sp, #20
  402c1c:	af00      	add	r7, sp, #0
  402c1e:	6078      	str	r0, [r7, #4]
	int percent100 = 90;
  402c20:	235a      	movs	r3, #90	; 0x5a
  402c22:	60fb      	str	r3, [r7, #12]
	
	g_ul_value = (int) (((g_ul_value - ground) * value / percent100) + ground);
  402c24:	4b0a      	ldr	r3, [pc, #40]	; (402c50 <Gain+0x38>)
  402c26:	681a      	ldr	r2, [r3, #0]
  402c28:	4b0a      	ldr	r3, [pc, #40]	; (402c54 <Gain+0x3c>)
  402c2a:	681b      	ldr	r3, [r3, #0]
  402c2c:	1ad3      	subs	r3, r2, r3
  402c2e:	687a      	ldr	r2, [r7, #4]
  402c30:	fb02 f203 	mul.w	r2, r2, r3
  402c34:	68fb      	ldr	r3, [r7, #12]
  402c36:	fb92 f2f3 	sdiv	r2, r2, r3
  402c3a:	4b06      	ldr	r3, [pc, #24]	; (402c54 <Gain+0x3c>)
  402c3c:	681b      	ldr	r3, [r3, #0]
  402c3e:	4413      	add	r3, r2
  402c40:	4a03      	ldr	r2, [pc, #12]	; (402c50 <Gain+0x38>)
  402c42:	6013      	str	r3, [r2, #0]
}
  402c44:	bf00      	nop
  402c46:	3714      	adds	r7, #20
  402c48:	46bd      	mov	sp, r7
  402c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c4e:	4770      	bx	lr
  402c50:	2040ae74 	.word	0x2040ae74
  402c54:	20400030 	.word	0x20400030

00402c58 <lowPassFrequency>:

static void lowPassFrequency(int CUTOFF)
{
  402c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402c5c:	b08b      	sub	sp, #44	; 0x2c
  402c5e:	af00      	add	r7, sp, #0
  402c60:	6078      	str	r0, [r7, #4]
	double RC = 1.0/(CUTOFF*2*3.14);
  402c62:	687b      	ldr	r3, [r7, #4]
  402c64:	005a      	lsls	r2, r3, #1
  402c66:	4b42      	ldr	r3, [pc, #264]	; (402d70 <lowPassFrequency+0x118>)
  402c68:	4610      	mov	r0, r2
  402c6a:	4798      	blx	r3
  402c6c:	4c41      	ldr	r4, [pc, #260]	; (402d74 <lowPassFrequency+0x11c>)
  402c6e:	a33c      	add	r3, pc, #240	; (adr r3, 402d60 <lowPassFrequency+0x108>)
  402c70:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c74:	47a0      	blx	r4
  402c76:	4603      	mov	r3, r0
  402c78:	460c      	mov	r4, r1
  402c7a:	461a      	mov	r2, r3
  402c7c:	4623      	mov	r3, r4
  402c7e:	4c3e      	ldr	r4, [pc, #248]	; (402d78 <lowPassFrequency+0x120>)
  402c80:	f04f 0000 	mov.w	r0, #0
  402c84:	493d      	ldr	r1, [pc, #244]	; (402d7c <lowPassFrequency+0x124>)
  402c86:	47a0      	blx	r4
  402c88:	4603      	mov	r3, r0
  402c8a:	460c      	mov	r4, r1
  402c8c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double dt = 1.0/22000;
  402c90:	a435      	add	r4, pc, #212	; (adr r4, 402d68 <lowPassFrequency+0x110>)
  402c92:	e9d4 3400 	ldrd	r3, r4, [r4]
  402c96:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double alpha = dt/(RC+dt);
  402c9a:	4c39      	ldr	r4, [pc, #228]	; (402d80 <lowPassFrequency+0x128>)
  402c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
  402ca0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
  402ca4:	47a0      	blx	r4
  402ca6:	4603      	mov	r3, r0
  402ca8:	460c      	mov	r4, r1
  402caa:	461a      	mov	r2, r3
  402cac:	4623      	mov	r3, r4
  402cae:	4c32      	ldr	r4, [pc, #200]	; (402d78 <lowPassFrequency+0x120>)
  402cb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
  402cb4:	47a0      	blx	r4
  402cb6:	4603      	mov	r3, r0
  402cb8:	460c      	mov	r4, r1
  402cba:	e9c7 3404 	strd	r3, r4, [r7, #16]
	
	int current = g_ul_value - ground;
  402cbe:	4b31      	ldr	r3, [pc, #196]	; (402d84 <lowPassFrequency+0x12c>)
  402cc0:	681a      	ldr	r2, [r3, #0]
  402cc2:	4b31      	ldr	r3, [pc, #196]	; (402d88 <lowPassFrequency+0x130>)
  402cc4:	681b      	ldr	r3, [r3, #0]
  402cc6:	1ad3      	subs	r3, r2, r3
  402cc8:	60fb      	str	r3, [r7, #12]
	int past = g_ul_value_old - ground;
  402cca:	4b30      	ldr	r3, [pc, #192]	; (402d8c <lowPassFrequency+0x134>)
  402ccc:	681a      	ldr	r2, [r3, #0]
  402cce:	4b2e      	ldr	r3, [pc, #184]	; (402d88 <lowPassFrequency+0x130>)
  402cd0:	681b      	ldr	r3, [r3, #0]
  402cd2:	1ad3      	subs	r3, r2, r3
  402cd4:	60bb      	str	r3, [r7, #8]
	
	g_ul_value = (int) ((double) past + (alpha*((double) current - (double) past)) + ground);
  402cd6:	4b26      	ldr	r3, [pc, #152]	; (402d70 <lowPassFrequency+0x118>)
  402cd8:	68b8      	ldr	r0, [r7, #8]
  402cda:	4798      	blx	r3
  402cdc:	4605      	mov	r5, r0
  402cde:	460e      	mov	r6, r1
  402ce0:	4b23      	ldr	r3, [pc, #140]	; (402d70 <lowPassFrequency+0x118>)
  402ce2:	68f8      	ldr	r0, [r7, #12]
  402ce4:	4798      	blx	r3
  402ce6:	4680      	mov	r8, r0
  402ce8:	4689      	mov	r9, r1
  402cea:	4b21      	ldr	r3, [pc, #132]	; (402d70 <lowPassFrequency+0x118>)
  402cec:	68b8      	ldr	r0, [r7, #8]
  402cee:	4798      	blx	r3
  402cf0:	4602      	mov	r2, r0
  402cf2:	460b      	mov	r3, r1
  402cf4:	4c26      	ldr	r4, [pc, #152]	; (402d90 <lowPassFrequency+0x138>)
  402cf6:	4640      	mov	r0, r8
  402cf8:	4649      	mov	r1, r9
  402cfa:	47a0      	blx	r4
  402cfc:	4603      	mov	r3, r0
  402cfe:	460c      	mov	r4, r1
  402d00:	4618      	mov	r0, r3
  402d02:	4621      	mov	r1, r4
  402d04:	4c1b      	ldr	r4, [pc, #108]	; (402d74 <lowPassFrequency+0x11c>)
  402d06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
  402d0a:	47a0      	blx	r4
  402d0c:	4603      	mov	r3, r0
  402d0e:	460c      	mov	r4, r1
  402d10:	461a      	mov	r2, r3
  402d12:	4623      	mov	r3, r4
  402d14:	4c1a      	ldr	r4, [pc, #104]	; (402d80 <lowPassFrequency+0x128>)
  402d16:	4628      	mov	r0, r5
  402d18:	4631      	mov	r1, r6
  402d1a:	47a0      	blx	r4
  402d1c:	4603      	mov	r3, r0
  402d1e:	460c      	mov	r4, r1
  402d20:	461d      	mov	r5, r3
  402d22:	4626      	mov	r6, r4
  402d24:	4b18      	ldr	r3, [pc, #96]	; (402d88 <lowPassFrequency+0x130>)
  402d26:	681a      	ldr	r2, [r3, #0]
  402d28:	4b11      	ldr	r3, [pc, #68]	; (402d70 <lowPassFrequency+0x118>)
  402d2a:	4610      	mov	r0, r2
  402d2c:	4798      	blx	r3
  402d2e:	4602      	mov	r2, r0
  402d30:	460b      	mov	r3, r1
  402d32:	4c13      	ldr	r4, [pc, #76]	; (402d80 <lowPassFrequency+0x128>)
  402d34:	4628      	mov	r0, r5
  402d36:	4631      	mov	r1, r6
  402d38:	47a0      	blx	r4
  402d3a:	4603      	mov	r3, r0
  402d3c:	460c      	mov	r4, r1
  402d3e:	4619      	mov	r1, r3
  402d40:	4622      	mov	r2, r4
  402d42:	4b14      	ldr	r3, [pc, #80]	; (402d94 <lowPassFrequency+0x13c>)
  402d44:	4608      	mov	r0, r1
  402d46:	4611      	mov	r1, r2
  402d48:	4798      	blx	r3
  402d4a:	4602      	mov	r2, r0
  402d4c:	4b0d      	ldr	r3, [pc, #52]	; (402d84 <lowPassFrequency+0x12c>)
  402d4e:	601a      	str	r2, [r3, #0]
}
  402d50:	bf00      	nop
  402d52:	372c      	adds	r7, #44	; 0x2c
  402d54:	46bd      	mov	sp, r7
  402d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402d5a:	bf00      	nop
  402d5c:	f3af 8000 	nop.w
  402d60:	51eb851f 	.word	0x51eb851f
  402d64:	40091eb8 	.word	0x40091eb8
  402d68:	4a19b16e 	.word	0x4a19b16e
  402d6c:	3f07d4ce 	.word	0x3f07d4ce
  402d70:	004057a9 	.word	0x004057a9
  402d74:	00405875 	.word	0x00405875
  402d78:	00405ac9 	.word	0x00405ac9
  402d7c:	3ff00000 	.word	0x3ff00000
  402d80:	00405511 	.word	0x00405511
  402d84:	2040ae74 	.word	0x2040ae74
  402d88:	20400030 	.word	0x20400030
  402d8c:	2040ae70 	.word	0x2040ae70
  402d90:	0040550d 	.word	0x0040550d
  402d94:	00405c99 	.word	0x00405c99

00402d98 <AFEC_Audio_callback>:

static void AFEC_Audio_callback(void){
  402d98:	b580      	push	{r7, lr}
  402d9a:	af00      	add	r7, sp, #0
	/** The conversion data value */

	// check swap
	if(ppbuf_get_full_signal(&buffer,false) == true) {
  402d9c:	2100      	movs	r1, #0
  402d9e:	4822      	ldr	r0, [pc, #136]	; (402e28 <AFEC_Audio_callback+0x90>)
  402da0:	4b22      	ldr	r3, [pc, #136]	; (402e2c <AFEC_Audio_callback+0x94>)
  402da2:	4798      	blx	r3
  402da4:	4603      	mov	r3, r0
  402da6:	2b00      	cmp	r3, #0
  402da8:	d006      	beq.n	402db8 <AFEC_Audio_callback+0x20>
		ppbuf_get_full_signal(&buffer,true); // swap
  402daa:	2101      	movs	r1, #1
  402dac:	481e      	ldr	r0, [pc, #120]	; (402e28 <AFEC_Audio_callback+0x90>)
  402dae:	4b1f      	ldr	r3, [pc, #124]	; (402e2c <AFEC_Audio_callback+0x94>)
  402db0:	4798      	blx	r3
// 		printf("Signal: %d\n", g_ul_value);
// 		printf("Average: %d\n", count/11000);
		count = 0;
  402db2:	4b1f      	ldr	r3, [pc, #124]	; (402e30 <AFEC_Audio_callback+0x98>)
  402db4:	2200      	movs	r2, #0
  402db6:	601a      	str	r2, [r3, #0]
	}
	
	g_ul_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_PIN);
  402db8:	2100      	movs	r1, #0
  402dba:	481e      	ldr	r0, [pc, #120]	; (402e34 <AFEC_Audio_callback+0x9c>)
  402dbc:	4b1e      	ldr	r3, [pc, #120]	; (402e38 <AFEC_Audio_callback+0xa0>)
  402dbe:	4798      	blx	r3
  402dc0:	4603      	mov	r3, r0
  402dc2:	461a      	mov	r2, r3
  402dc4:	4b1d      	ldr	r3, [pc, #116]	; (402e3c <AFEC_Audio_callback+0xa4>)
  402dc6:	601a      	str	r2, [r3, #0]
	
	/*        EFFECTS        */
	Saturation(saturation_value);
  402dc8:	4b1d      	ldr	r3, [pc, #116]	; (402e40 <AFEC_Audio_callback+0xa8>)
  402dca:	681b      	ldr	r3, [r3, #0]
  402dcc:	4618      	mov	r0, r3
  402dce:	4b1d      	ldr	r3, [pc, #116]	; (402e44 <AFEC_Audio_callback+0xac>)
  402dd0:	4798      	blx	r3
	Gain(gain_value);
  402dd2:	4b1d      	ldr	r3, [pc, #116]	; (402e48 <AFEC_Audio_callback+0xb0>)
  402dd4:	681b      	ldr	r3, [r3, #0]
  402dd6:	4618      	mov	r0, r3
  402dd8:	4b1c      	ldr	r3, [pc, #112]	; (402e4c <AFEC_Audio_callback+0xb4>)
  402dda:	4798      	blx	r3
	lowPassFrequency(lowpass_value);
  402ddc:	4b1c      	ldr	r3, [pc, #112]	; (402e50 <AFEC_Audio_callback+0xb8>)
  402dde:	681b      	ldr	r3, [r3, #0]
  402de0:	4618      	mov	r0, r3
  402de2:	4b1c      	ldr	r3, [pc, #112]	; (402e54 <AFEC_Audio_callback+0xbc>)
  402de4:	4798      	blx	r3
	
	
	count += g_ul_value;
  402de6:	4b12      	ldr	r3, [pc, #72]	; (402e30 <AFEC_Audio_callback+0x98>)
  402de8:	681a      	ldr	r2, [r3, #0]
  402dea:	4b14      	ldr	r3, [pc, #80]	; (402e3c <AFEC_Audio_callback+0xa4>)
  402dec:	681b      	ldr	r3, [r3, #0]
  402dee:	4413      	add	r3, r2
  402df0:	4a0f      	ldr	r2, [pc, #60]	; (402e30 <AFEC_Audio_callback+0x98>)
  402df2:	6013      	str	r3, [r2, #0]
	g_ul_value_old = g_ul_value;
  402df4:	4b11      	ldr	r3, [pc, #68]	; (402e3c <AFEC_Audio_callback+0xa4>)
  402df6:	681b      	ldr	r3, [r3, #0]
  402df8:	4a17      	ldr	r2, [pc, #92]	; (402e58 <AFEC_Audio_callback+0xc0>)
  402dfa:	6013      	str	r3, [r2, #0]
	ppbuf_insert_active(&buffer, &g_ul_value, 1);
  402dfc:	2201      	movs	r2, #1
  402dfe:	490f      	ldr	r1, [pc, #60]	; (402e3c <AFEC_Audio_callback+0xa4>)
  402e00:	4809      	ldr	r0, [pc, #36]	; (402e28 <AFEC_Audio_callback+0x90>)
  402e02:	4b16      	ldr	r3, [pc, #88]	; (402e5c <AFEC_Audio_callback+0xc4>)
  402e04:	4798      	blx	r3
	ppbuf_remove_inactive(&buffer, &buf, 1);	
  402e06:	2201      	movs	r2, #1
  402e08:	4915      	ldr	r1, [pc, #84]	; (402e60 <AFEC_Audio_callback+0xc8>)
  402e0a:	4807      	ldr	r0, [pc, #28]	; (402e28 <AFEC_Audio_callback+0x90>)
  402e0c:	4b15      	ldr	r3, [pc, #84]	; (402e64 <AFEC_Audio_callback+0xcc>)
  402e0e:	4798      	blx	r3
	
	dacc_get_interrupt_status(DACC_BASE);
  402e10:	4815      	ldr	r0, [pc, #84]	; (402e68 <AFEC_Audio_callback+0xd0>)
  402e12:	4b16      	ldr	r3, [pc, #88]	; (402e6c <AFEC_Audio_callback+0xd4>)
  402e14:	4798      	blx	r3
	dacc_write_conversion_data(DACC_BASE, buf, DACC_CHANNEL);
  402e16:	4b12      	ldr	r3, [pc, #72]	; (402e60 <AFEC_Audio_callback+0xc8>)
  402e18:	681b      	ldr	r3, [r3, #0]
  402e1a:	2200      	movs	r2, #0
  402e1c:	4619      	mov	r1, r3
  402e1e:	4812      	ldr	r0, [pc, #72]	; (402e68 <AFEC_Audio_callback+0xd0>)
  402e20:	4b13      	ldr	r3, [pc, #76]	; (402e70 <AFEC_Audio_callback+0xd8>)
  402e22:	4798      	blx	r3

}
  402e24:	bf00      	nop
  402e26:	bd80      	pop	{r7, pc}
  402e28:	2040000c 	.word	0x2040000c
  402e2c:	00402491 	.word	0x00402491
  402e30:	2040ae78 	.word	0x2040ae78
  402e34:	4003c000 	.word	0x4003c000
  402e38:	00402625 	.word	0x00402625
  402e3c:	2040ae74 	.word	0x2040ae74
  402e40:	20400024 	.word	0x20400024
  402e44:	00402ba1 	.word	0x00402ba1
  402e48:	20400028 	.word	0x20400028
  402e4c:	00402c19 	.word	0x00402c19
  402e50:	2040002c 	.word	0x2040002c
  402e54:	00402c59 	.word	0x00402c59
  402e58:	2040ae70 	.word	0x2040ae70
  402e5c:	00402365 	.word	0x00402365
  402e60:	2040ae6c 	.word	0x2040ae6c
  402e64:	00402405 	.word	0x00402405
  402e68:	40040000 	.word	0x40040000
  402e6c:	004001c7 	.word	0x004001c7
  402e70:	004001df 	.word	0x004001df

00402e74 <convert_adc_to_gain>:

static int32_t convert_adc_to_gain(int32_t ADC_value){
  402e74:	b480      	push	{r7}
  402e76:	b085      	sub	sp, #20
  402e78:	af00      	add	r7, sp, #0
  402e7a:	6078      	str	r0, [r7, #4]

	uint32_t max_gain = 100;
  402e7c:	2364      	movs	r3, #100	; 0x64
  402e7e:	60fb      	str	r3, [r7, #12]
	return (ADC_value*(max_gain) / MAX_DIGITAL);
  402e80:	687b      	ldr	r3, [r7, #4]
  402e82:	68fa      	ldr	r2, [r7, #12]
  402e84:	fb02 f203 	mul.w	r2, r2, r3
  402e88:	4b06      	ldr	r3, [pc, #24]	; (402ea4 <convert_adc_to_gain+0x30>)
  402e8a:	fba3 1302 	umull	r1, r3, r3, r2
  402e8e:	1ad2      	subs	r2, r2, r3
  402e90:	0852      	lsrs	r2, r2, #1
  402e92:	4413      	add	r3, r2
  402e94:	0adb      	lsrs	r3, r3, #11
}
  402e96:	4618      	mov	r0, r3
  402e98:	3714      	adds	r7, #20
  402e9a:	46bd      	mov	sp, r7
  402e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ea0:	4770      	bx	lr
  402ea2:	bf00      	nop
  402ea4:	00100101 	.word	0x00100101

00402ea8 <convert_adc_to_saturation>:

static int32_t convert_adc_to_saturation(int32_t ADC_value){
  402ea8:	b480      	push	{r7}
  402eaa:	b085      	sub	sp, #20
  402eac:	af00      	add	r7, sp, #0
  402eae:	6078      	str	r0, [r7, #4]

	uint32_t max_saturation = 100;
  402eb0:	2364      	movs	r3, #100	; 0x64
  402eb2:	60fb      	str	r3, [r7, #12]
	return (ADC_value*(max_saturation) / MAX_DIGITAL);
  402eb4:	687b      	ldr	r3, [r7, #4]
  402eb6:	68fa      	ldr	r2, [r7, #12]
  402eb8:	fb02 f203 	mul.w	r2, r2, r3
  402ebc:	4b06      	ldr	r3, [pc, #24]	; (402ed8 <convert_adc_to_saturation+0x30>)
  402ebe:	fba3 1302 	umull	r1, r3, r3, r2
  402ec2:	1ad2      	subs	r2, r2, r3
  402ec4:	0852      	lsrs	r2, r2, #1
  402ec6:	4413      	add	r3, r2
  402ec8:	0adb      	lsrs	r3, r3, #11
}
  402eca:	4618      	mov	r0, r3
  402ecc:	3714      	adds	r7, #20
  402ece:	46bd      	mov	sp, r7
  402ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ed4:	4770      	bx	lr
  402ed6:	bf00      	nop
  402ed8:	00100101 	.word	0x00100101
  402edc:	00000000 	.word	0x00000000

00402ee0 <convert_adc_to_lowpass>:

static int32_t convert_adc_to_lowpass(int32_t ADC_value){
  402ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ee2:	b087      	sub	sp, #28
  402ee4:	af00      	add	r7, sp, #0
  402ee6:	6078      	str	r0, [r7, #4]

	uint32_t max_lowpass = 10000;
  402ee8:	f242 7310 	movw	r3, #10000	; 0x2710
  402eec:	617b      	str	r3, [r7, #20]
	double x = (((double) ADC_value) / MAX_DIGITAL) * (((double) ADC_value) / MAX_DIGITAL);
  402eee:	4b20      	ldr	r3, [pc, #128]	; (402f70 <convert_adc_to_lowpass+0x90>)
  402ef0:	6878      	ldr	r0, [r7, #4]
  402ef2:	4798      	blx	r3
  402ef4:	4c1f      	ldr	r4, [pc, #124]	; (402f74 <convert_adc_to_lowpass+0x94>)
  402ef6:	a31c      	add	r3, pc, #112	; (adr r3, 402f68 <convert_adc_to_lowpass+0x88>)
  402ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
  402efc:	47a0      	blx	r4
  402efe:	4603      	mov	r3, r0
  402f00:	460c      	mov	r4, r1
  402f02:	461d      	mov	r5, r3
  402f04:	4626      	mov	r6, r4
  402f06:	4b1a      	ldr	r3, [pc, #104]	; (402f70 <convert_adc_to_lowpass+0x90>)
  402f08:	6878      	ldr	r0, [r7, #4]
  402f0a:	4798      	blx	r3
  402f0c:	4c19      	ldr	r4, [pc, #100]	; (402f74 <convert_adc_to_lowpass+0x94>)
  402f0e:	a316      	add	r3, pc, #88	; (adr r3, 402f68 <convert_adc_to_lowpass+0x88>)
  402f10:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f14:	47a0      	blx	r4
  402f16:	4603      	mov	r3, r0
  402f18:	460c      	mov	r4, r1
  402f1a:	461a      	mov	r2, r3
  402f1c:	4623      	mov	r3, r4
  402f1e:	4c16      	ldr	r4, [pc, #88]	; (402f78 <convert_adc_to_lowpass+0x98>)
  402f20:	4628      	mov	r0, r5
  402f22:	4631      	mov	r1, r6
  402f24:	47a0      	blx	r4
  402f26:	4603      	mov	r3, r0
  402f28:	460c      	mov	r4, r1
  402f2a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return x * max_lowpass + 20;
  402f2e:	4b13      	ldr	r3, [pc, #76]	; (402f7c <convert_adc_to_lowpass+0x9c>)
  402f30:	6978      	ldr	r0, [r7, #20]
  402f32:	4798      	blx	r3
  402f34:	4c10      	ldr	r4, [pc, #64]	; (402f78 <convert_adc_to_lowpass+0x98>)
  402f36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
  402f3a:	47a0      	blx	r4
  402f3c:	4603      	mov	r3, r0
  402f3e:	460c      	mov	r4, r1
  402f40:	4618      	mov	r0, r3
  402f42:	4621      	mov	r1, r4
  402f44:	4c0e      	ldr	r4, [pc, #56]	; (402f80 <convert_adc_to_lowpass+0xa0>)
  402f46:	f04f 0200 	mov.w	r2, #0
  402f4a:	4b0e      	ldr	r3, [pc, #56]	; (402f84 <convert_adc_to_lowpass+0xa4>)
  402f4c:	47a0      	blx	r4
  402f4e:	4603      	mov	r3, r0
  402f50:	460c      	mov	r4, r1
  402f52:	4619      	mov	r1, r3
  402f54:	4622      	mov	r2, r4
  402f56:	4b0c      	ldr	r3, [pc, #48]	; (402f88 <convert_adc_to_lowpass+0xa8>)
  402f58:	4608      	mov	r0, r1
  402f5a:	4611      	mov	r1, r2
  402f5c:	4798      	blx	r3
  402f5e:	4603      	mov	r3, r0
}
  402f60:	4618      	mov	r0, r3
  402f62:	371c      	adds	r7, #28
  402f64:	46bd      	mov	sp, r7
  402f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402f68:	00000000 	.word	0x00000000
  402f6c:	40affe00 	.word	0x40affe00
  402f70:	004057a9 	.word	0x004057a9
  402f74:	00405ac9 	.word	0x00405ac9
  402f78:	00405875 	.word	0x00405875
  402f7c:	00405789 	.word	0x00405789
  402f80:	00405511 	.word	0x00405511
  402f84:	40340000 	.word	0x40340000
  402f88:	00405c99 	.word	0x00405c99

00402f8c <AFEC_Gain_callback>:

static void AFEC_Gain_callback(void){
  402f8c:	b590      	push	{r4, r7, lr}
  402f8e:	b083      	sub	sp, #12
  402f90:	af00      	add	r7, sp, #0
	uint32_t gain;
	gain = afec_channel_get_value(AFEC1, AFEC_CHANNEL_PIN_GAIN);
  402f92:	2101      	movs	r1, #1
  402f94:	480a      	ldr	r0, [pc, #40]	; (402fc0 <AFEC_Gain_callback+0x34>)
  402f96:	4b0b      	ldr	r3, [pc, #44]	; (402fc4 <AFEC_Gain_callback+0x38>)
  402f98:	4798      	blx	r3
  402f9a:	4603      	mov	r3, r0
  402f9c:	607b      	str	r3, [r7, #4]
	gain = convert_adc_to_gain(gain);
  402f9e:	687b      	ldr	r3, [r7, #4]
  402fa0:	4618      	mov	r0, r3
  402fa2:	4b09      	ldr	r3, [pc, #36]	; (402fc8 <AFEC_Gain_callback+0x3c>)
  402fa4:	4798      	blx	r3
  402fa6:	4603      	mov	r3, r0
  402fa8:	607b      	str	r3, [r7, #4]
/*	printf("CALLBACK: %d\n", gain);*/
	xQueueSendFromISR( xQueueGain, &gain, NULL);
  402faa:	4b08      	ldr	r3, [pc, #32]	; (402fcc <AFEC_Gain_callback+0x40>)
  402fac:	6818      	ldr	r0, [r3, #0]
  402fae:	1d39      	adds	r1, r7, #4
  402fb0:	2300      	movs	r3, #0
  402fb2:	2200      	movs	r2, #0
  402fb4:	4c06      	ldr	r4, [pc, #24]	; (402fd0 <AFEC_Gain_callback+0x44>)
  402fb6:	47a0      	blx	r4
}
  402fb8:	bf00      	nop
  402fba:	370c      	adds	r7, #12
  402fbc:	46bd      	mov	sp, r7
  402fbe:	bd90      	pop	{r4, r7, pc}
  402fc0:	40064000 	.word	0x40064000
  402fc4:	00402625 	.word	0x00402625
  402fc8:	00402e75 	.word	0x00402e75
  402fcc:	2040af28 	.word	0x2040af28
  402fd0:	00400bf1 	.word	0x00400bf1

00402fd4 <AFEC_Saturation_callback>:

static void AFEC_Saturation_callback(void){
  402fd4:	b590      	push	{r4, r7, lr}
  402fd6:	b083      	sub	sp, #12
  402fd8:	af00      	add	r7, sp, #0
	uint32_t saturation;
	saturation = afec_channel_get_value(AFEC1, AFEC_CHANNEL_PIN_SATURATION);
  402fda:	2103      	movs	r1, #3
  402fdc:	480a      	ldr	r0, [pc, #40]	; (403008 <AFEC_Saturation_callback+0x34>)
  402fde:	4b0b      	ldr	r3, [pc, #44]	; (40300c <AFEC_Saturation_callback+0x38>)
  402fe0:	4798      	blx	r3
  402fe2:	4603      	mov	r3, r0
  402fe4:	607b      	str	r3, [r7, #4]
	saturation = convert_adc_to_saturation(saturation);
  402fe6:	687b      	ldr	r3, [r7, #4]
  402fe8:	4618      	mov	r0, r3
  402fea:	4b09      	ldr	r3, [pc, #36]	; (403010 <AFEC_Saturation_callback+0x3c>)
  402fec:	4798      	blx	r3
  402fee:	4603      	mov	r3, r0
  402ff0:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR( xQueueSaturation, &saturation, NULL);
  402ff2:	4b08      	ldr	r3, [pc, #32]	; (403014 <AFEC_Saturation_callback+0x40>)
  402ff4:	6818      	ldr	r0, [r3, #0]
  402ff6:	1d39      	adds	r1, r7, #4
  402ff8:	2300      	movs	r3, #0
  402ffa:	2200      	movs	r2, #0
  402ffc:	4c06      	ldr	r4, [pc, #24]	; (403018 <AFEC_Saturation_callback+0x44>)
  402ffe:	47a0      	blx	r4
}
  403000:	bf00      	nop
  403002:	370c      	adds	r7, #12
  403004:	46bd      	mov	sp, r7
  403006:	bd90      	pop	{r4, r7, pc}
  403008:	40064000 	.word	0x40064000
  40300c:	00402625 	.word	0x00402625
  403010:	00402ea9 	.word	0x00402ea9
  403014:	2040af34 	.word	0x2040af34
  403018:	00400bf1 	.word	0x00400bf1

0040301c <AFEC_Lowpass_callback>:

static void AFEC_Lowpass_callback(void){
  40301c:	b590      	push	{r4, r7, lr}
  40301e:	b083      	sub	sp, #12
  403020:	af00      	add	r7, sp, #0
	uint32_t lowpass;
	lowpass = afec_channel_get_value(AFEC1, AFEC_CHANNEL_PIN_LOWPASS);
  403022:	2105      	movs	r1, #5
  403024:	480a      	ldr	r0, [pc, #40]	; (403050 <AFEC_Lowpass_callback+0x34>)
  403026:	4b0b      	ldr	r3, [pc, #44]	; (403054 <AFEC_Lowpass_callback+0x38>)
  403028:	4798      	blx	r3
  40302a:	4603      	mov	r3, r0
  40302c:	607b      	str	r3, [r7, #4]
	lowpass = convert_adc_to_lowpass(lowpass);
  40302e:	687b      	ldr	r3, [r7, #4]
  403030:	4618      	mov	r0, r3
  403032:	4b09      	ldr	r3, [pc, #36]	; (403058 <AFEC_Lowpass_callback+0x3c>)
  403034:	4798      	blx	r3
  403036:	4603      	mov	r3, r0
  403038:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR( xQueueLowpass, &lowpass, NULL);
  40303a:	4b08      	ldr	r3, [pc, #32]	; (40305c <AFEC_Lowpass_callback+0x40>)
  40303c:	6818      	ldr	r0, [r3, #0]
  40303e:	1d39      	adds	r1, r7, #4
  403040:	2300      	movs	r3, #0
  403042:	2200      	movs	r2, #0
  403044:	4c06      	ldr	r4, [pc, #24]	; (403060 <AFEC_Lowpass_callback+0x44>)
  403046:	47a0      	blx	r4
}
  403048:	bf00      	nop
  40304a:	370c      	adds	r7, #12
  40304c:	46bd      	mov	sp, r7
  40304e:	bd90      	pop	{r4, r7, pc}
  403050:	40064000 	.word	0x40064000
  403054:	00402625 	.word	0x00402625
  403058:	00402ee1 	.word	0x00402ee1
  40305c:	2040af2c 	.word	0x2040af2c
  403060:	00400bf1 	.word	0x00400bf1

00403064 <configure_console>:
 * 8 bits
 * 1 stop bit
 * sem paridade
 */
static void configure_console(void)
{
  403064:	b590      	push	{r4, r7, lr}
  403066:	b085      	sub	sp, #20
  403068:	af00      	add	r7, sp, #0
 
	const usart_serial_options_t uart_serial_options = {
  40306a:	4b08      	ldr	r3, [pc, #32]	; (40308c <configure_console+0x28>)
  40306c:	463c      	mov	r4, r7
  40306e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits   = CONF_UART_STOP_BITS,
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  403074:	200e      	movs	r0, #14
  403076:	4b06      	ldr	r3, [pc, #24]	; (403090 <configure_console+0x2c>)
  403078:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  40307a:	463b      	mov	r3, r7
  40307c:	4619      	mov	r1, r3
  40307e:	4805      	ldr	r0, [pc, #20]	; (403094 <configure_console+0x30>)
  403080:	4b05      	ldr	r3, [pc, #20]	; (403098 <configure_console+0x34>)
  403082:	4798      	blx	r3
}
  403084:	bf00      	nop
  403086:	3714      	adds	r7, #20
  403088:	46bd      	mov	sp, r7
  40308a:	bd90      	pop	{r4, r7, pc}
  40308c:	00408da4 	.word	0x00408da4
  403090:	00402745 	.word	0x00402745
  403094:	40028000 	.word	0x40028000
  403098:	00402b05 	.word	0x00402b05

0040309c <config_ADC_AUDIO>:

static void config_ADC_AUDIO(void){
  40309c:	b590      	push	{r4, r7, lr}
  40309e:	b08b      	sub	sp, #44	; 0x2c
  4030a0:	af00      	add	r7, sp, #0
/************************************* 
   * Ativa e configura AFEC
   *************************************/  
  /* Ativa AFEC - 0 */
	afec_enable(AFEC0);
  4030a2:	4821      	ldr	r0, [pc, #132]	; (403128 <config_ADC_AUDIO+0x8c>)
  4030a4:	4b21      	ldr	r3, [pc, #132]	; (40312c <config_ADC_AUDIO+0x90>)
  4030a6:	4798      	blx	r3

	/* struct de configuracao do AFEC */
	struct afec_config afec_cfg;

	/* Carrega parametros padrao */
	afec_get_config_defaults(&afec_cfg);
  4030a8:	f107 0310 	add.w	r3, r7, #16
  4030ac:	4618      	mov	r0, r3
  4030ae:	4b20      	ldr	r3, [pc, #128]	; (403130 <config_ADC_AUDIO+0x94>)
  4030b0:	4798      	blx	r3

	/* Configura AFEC */
	afec_init(AFEC0, &afec_cfg);
  4030b2:	f107 0310 	add.w	r3, r7, #16
  4030b6:	4619      	mov	r1, r3
  4030b8:	481b      	ldr	r0, [pc, #108]	; (403128 <config_ADC_AUDIO+0x8c>)
  4030ba:	4b1e      	ldr	r3, [pc, #120]	; (403134 <config_ADC_AUDIO+0x98>)
  4030bc:	4798      	blx	r3
  
	/* Configura trigger por software */
	afec_set_trigger(AFEC0, AFEC_TRIG_TIO_CH_0);
  4030be:	2103      	movs	r1, #3
  4030c0:	4819      	ldr	r0, [pc, #100]	; (403128 <config_ADC_AUDIO+0x8c>)
  4030c2:	4b1d      	ldr	r3, [pc, #116]	; (403138 <config_ADC_AUDIO+0x9c>)
  4030c4:	4798      	blx	r3
		
	AFEC0->AFEC_MR |= 3;
  4030c6:	4a18      	ldr	r2, [pc, #96]	; (403128 <config_ADC_AUDIO+0x8c>)
  4030c8:	4b17      	ldr	r3, [pc, #92]	; (403128 <config_ADC_AUDIO+0x8c>)
  4030ca:	685b      	ldr	r3, [r3, #4]
  4030cc:	f043 0303 	orr.w	r3, r3, #3
  4030d0:	6053      	str	r3, [r2, #4]
  
	/* configura call back */
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0,	AFEC_Audio_callback, 1); 
  4030d2:	2301      	movs	r3, #1
  4030d4:	4a19      	ldr	r2, [pc, #100]	; (40313c <config_ADC_AUDIO+0xa0>)
  4030d6:	2100      	movs	r1, #0
  4030d8:	4813      	ldr	r0, [pc, #76]	; (403128 <config_ADC_AUDIO+0x8c>)
  4030da:	4c19      	ldr	r4, [pc, #100]	; (403140 <config_ADC_AUDIO+0xa4>)
  4030dc:	47a0      	blx	r4
   
	/*** Configuracao espec�fica do canal AFEC ***/
	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4030de:	f107 030c 	add.w	r3, r7, #12
  4030e2:	4618      	mov	r0, r3
  4030e4:	4b17      	ldr	r3, [pc, #92]	; (403144 <config_ADC_AUDIO+0xa8>)
  4030e6:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4030e8:	2300      	movs	r3, #0
  4030ea:	737b      	strb	r3, [r7, #13]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_PIN, &afec_ch_cfg);
  4030ec:	f107 030c 	add.w	r3, r7, #12
  4030f0:	461a      	mov	r2, r3
  4030f2:	2100      	movs	r1, #0
  4030f4:	480c      	ldr	r0, [pc, #48]	; (403128 <config_ADC_AUDIO+0x8c>)
  4030f6:	4b14      	ldr	r3, [pc, #80]	; (403148 <config_ADC_AUDIO+0xac>)
  4030f8:	4798      	blx	r3
	* Calibracao:
	* Because the internal ADC offset is 0x200, it should cancel it and shift
	 down to 0.
	 */
	//afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_PIN, 0x1B0);
	afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_PIN, 0x1A0);
  4030fa:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
  4030fe:	2100      	movs	r1, #0
  403100:	4809      	ldr	r0, [pc, #36]	; (403128 <config_ADC_AUDIO+0x8c>)
  403102:	4b12      	ldr	r3, [pc, #72]	; (40314c <config_ADC_AUDIO+0xb0>)
  403104:	4798      	blx	r3

	/***  Configura sensor de temperatura ***/
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  403106:	1d3b      	adds	r3, r7, #4
  403108:	4618      	mov	r0, r3
  40310a:	4b11      	ldr	r3, [pc, #68]	; (403150 <config_ADC_AUDIO+0xb4>)
  40310c:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  40310e:	1d3b      	adds	r3, r7, #4
  403110:	4619      	mov	r1, r3
  403112:	4805      	ldr	r0, [pc, #20]	; (403128 <config_ADC_AUDIO+0x8c>)
  403114:	4b0f      	ldr	r3, [pc, #60]	; (403154 <config_ADC_AUDIO+0xb8>)
  403116:	4798      	blx	r3

	/* Selecina canal e inicializa convers�o */  
	afec_channel_enable(AFEC0, AFEC_CHANNEL_PIN);
  403118:	2100      	movs	r1, #0
  40311a:	4803      	ldr	r0, [pc, #12]	; (403128 <config_ADC_AUDIO+0x8c>)
  40311c:	4b0e      	ldr	r3, [pc, #56]	; (403158 <config_ADC_AUDIO+0xbc>)
  40311e:	4798      	blx	r3
}
  403120:	bf00      	nop
  403122:	372c      	adds	r7, #44	; 0x2c
  403124:	46bd      	mov	sp, r7
  403126:	bd90      	pop	{r4, r7, pc}
  403128:	4003c000 	.word	0x4003c000
  40312c:	004048d5 	.word	0x004048d5
  403130:	00404565 	.word	0x00404565
  403134:	00404615 	.word	0x00404615
  403138:	0040252d 	.word	0x0040252d
  40313c:	00402d99 	.word	0x00402d99
  403140:	004046ad 	.word	0x004046ad
  403144:	004045c5 	.word	0x004045c5
  403148:	00404489 	.word	0x00404489
  40314c:	00402651 	.word	0x00402651
  403150:	004045e5 	.word	0x004045e5
  403154:	0040451d 	.word	0x0040451d
  403158:	0040258d 	.word	0x0040258d

0040315c <config_AFEC_EFFECTS>:

static void config_AFEC_EFFECTS(void){
  40315c:	b590      	push	{r4, r7, lr}
  40315e:	b08b      	sub	sp, #44	; 0x2c
  403160:	af00      	add	r7, sp, #0
/*************************************
   * Ativa e configura AFEC
   *************************************/
  /* Ativa AFEC - 0 */
	afec_enable(AFEC1);
  403162:	482f      	ldr	r0, [pc, #188]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  403164:	4b2f      	ldr	r3, [pc, #188]	; (403224 <config_AFEC_EFFECTS+0xc8>)
  403166:	4798      	blx	r3

	/* struct de configuracao do AFEC */
	struct afec_config afec_cfg;

	/* Carrega parametros padrao */
	afec_get_config_defaults(&afec_cfg);
  403168:	f107 0310 	add.w	r3, r7, #16
  40316c:	4618      	mov	r0, r3
  40316e:	4b2e      	ldr	r3, [pc, #184]	; (403228 <config_AFEC_EFFECTS+0xcc>)
  403170:	4798      	blx	r3

	/* Configura AFEC */
	afec_init(AFEC1, &afec_cfg);
  403172:	f107 0310 	add.w	r3, r7, #16
  403176:	4619      	mov	r1, r3
  403178:	4829      	ldr	r0, [pc, #164]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  40317a:	4b2c      	ldr	r3, [pc, #176]	; (40322c <config_AFEC_EFFECTS+0xd0>)
  40317c:	4798      	blx	r3

	/* Configura trigger por software */
	afec_set_trigger(AFEC1, AFEC_TRIG_SW);
  40317e:	2100      	movs	r1, #0
  403180:	4827      	ldr	r0, [pc, #156]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  403182:	4b2b      	ldr	r3, [pc, #172]	; (403230 <config_AFEC_EFFECTS+0xd4>)
  403184:	4798      	blx	r3

/*	AFEC1->AFEC_MR |= 3;*/

	/* configura call back */
	afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_3,	AFEC_Saturation_callback, 1);
  403186:	2301      	movs	r3, #1
  403188:	4a2a      	ldr	r2, [pc, #168]	; (403234 <config_AFEC_EFFECTS+0xd8>)
  40318a:	2103      	movs	r1, #3
  40318c:	4824      	ldr	r0, [pc, #144]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  40318e:	4c2a      	ldr	r4, [pc, #168]	; (403238 <config_AFEC_EFFECTS+0xdc>)
  403190:	47a0      	blx	r4
	afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_1,	AFEC_Gain_callback, 1);
  403192:	2301      	movs	r3, #1
  403194:	4a29      	ldr	r2, [pc, #164]	; (40323c <config_AFEC_EFFECTS+0xe0>)
  403196:	2101      	movs	r1, #1
  403198:	4821      	ldr	r0, [pc, #132]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  40319a:	4c27      	ldr	r4, [pc, #156]	; (403238 <config_AFEC_EFFECTS+0xdc>)
  40319c:	47a0      	blx	r4
	afec_set_callback(AFEC1, AFEC_INTERRUPT_EOC_5,	AFEC_Lowpass_callback, 1);
  40319e:	2301      	movs	r3, #1
  4031a0:	4a27      	ldr	r2, [pc, #156]	; (403240 <config_AFEC_EFFECTS+0xe4>)
  4031a2:	2105      	movs	r1, #5
  4031a4:	481e      	ldr	r0, [pc, #120]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  4031a6:	4c24      	ldr	r4, [pc, #144]	; (403238 <config_AFEC_EFFECTS+0xdc>)
  4031a8:	47a0      	blx	r4

	/*** Configuracao espec?fica do canal AFEC ***/
	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  4031aa:	f107 030c 	add.w	r3, r7, #12
  4031ae:	4618      	mov	r0, r3
  4031b0:	4b24      	ldr	r3, [pc, #144]	; (403244 <config_AFEC_EFFECTS+0xe8>)
  4031b2:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  4031b4:	2300      	movs	r3, #0
  4031b6:	737b      	strb	r3, [r7, #13]
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_PIN_GAIN, &afec_ch_cfg);
  4031b8:	f107 030c 	add.w	r3, r7, #12
  4031bc:	461a      	mov	r2, r3
  4031be:	2101      	movs	r1, #1
  4031c0:	4817      	ldr	r0, [pc, #92]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  4031c2:	4b21      	ldr	r3, [pc, #132]	; (403248 <config_AFEC_EFFECTS+0xec>)
  4031c4:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_PIN_SATURATION, &afec_ch_cfg);
  4031c6:	f107 030c 	add.w	r3, r7, #12
  4031ca:	461a      	mov	r2, r3
  4031cc:	2103      	movs	r1, #3
  4031ce:	4814      	ldr	r0, [pc, #80]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  4031d0:	4b1d      	ldr	r3, [pc, #116]	; (403248 <config_AFEC_EFFECTS+0xec>)
  4031d2:	4798      	blx	r3
	afec_ch_set_config(AFEC1, AFEC_CHANNEL_PIN_LOWPASS, &afec_ch_cfg);
  4031d4:	f107 030c 	add.w	r3, r7, #12
  4031d8:	461a      	mov	r2, r3
  4031da:	2105      	movs	r1, #5
  4031dc:	4810      	ldr	r0, [pc, #64]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  4031de:	4b1a      	ldr	r3, [pc, #104]	; (403248 <config_AFEC_EFFECTS+0xec>)
  4031e0:	4798      	blx	r3
	/*
	* Calibracao:
	* Because the internal ADC offset is 0x200, it should cancel it and shift
	 down to 0.
	 */
	afec_channel_set_analog_offset(AFEC1, AFEC_CHANNEL_PIN_GAIN, 0x200);
  4031e2:	f44f 7200 	mov.w	r2, #512	; 0x200
  4031e6:	2101      	movs	r1, #1
  4031e8:	480d      	ldr	r0, [pc, #52]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  4031ea:	4b18      	ldr	r3, [pc, #96]	; (40324c <config_AFEC_EFFECTS+0xf0>)
  4031ec:	4798      	blx	r3
	afec_channel_set_analog_offset(AFEC1, AFEC_CHANNEL_PIN_SATURATION, 0x200);
  4031ee:	f44f 7200 	mov.w	r2, #512	; 0x200
  4031f2:	2103      	movs	r1, #3
  4031f4:	480a      	ldr	r0, [pc, #40]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  4031f6:	4b15      	ldr	r3, [pc, #84]	; (40324c <config_AFEC_EFFECTS+0xf0>)
  4031f8:	4798      	blx	r3
	afec_channel_set_analog_offset(AFEC1, AFEC_CHANNEL_PIN_LOWPASS, 0x200);
  4031fa:	f44f 7200 	mov.w	r2, #512	; 0x200
  4031fe:	2105      	movs	r1, #5
  403200:	4807      	ldr	r0, [pc, #28]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  403202:	4b12      	ldr	r3, [pc, #72]	; (40324c <config_AFEC_EFFECTS+0xf0>)
  403204:	4798      	blx	r3

	/***  Configura sensor de temperatura ***/
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  403206:	1d3b      	adds	r3, r7, #4
  403208:	4618      	mov	r0, r3
  40320a:	4b11      	ldr	r3, [pc, #68]	; (403250 <config_AFEC_EFFECTS+0xf4>)
  40320c:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC1, &afec_temp_sensor_cfg);
  40320e:	1d3b      	adds	r3, r7, #4
  403210:	4619      	mov	r1, r3
  403212:	4803      	ldr	r0, [pc, #12]	; (403220 <config_AFEC_EFFECTS+0xc4>)
  403214:	4b0f      	ldr	r3, [pc, #60]	; (403254 <config_AFEC_EFFECTS+0xf8>)
  403216:	4798      	blx	r3
}
  403218:	bf00      	nop
  40321a:	372c      	adds	r7, #44	; 0x2c
  40321c:	46bd      	mov	sp, r7
  40321e:	bd90      	pop	{r4, r7, pc}
  403220:	40064000 	.word	0x40064000
  403224:	004048d5 	.word	0x004048d5
  403228:	00404565 	.word	0x00404565
  40322c:	00404615 	.word	0x00404615
  403230:	0040252d 	.word	0x0040252d
  403234:	00402fd5 	.word	0x00402fd5
  403238:	004046ad 	.word	0x004046ad
  40323c:	00402f8d 	.word	0x00402f8d
  403240:	0040301d 	.word	0x0040301d
  403244:	004045c5 	.word	0x004045c5
  403248:	00404489 	.word	0x00404489
  40324c:	00402651 	.word	0x00402651
  403250:	004045e5 	.word	0x004045e5
  403254:	0040451d 	.word	0x0040451d

00403258 <config_DAC>:

static void config_DAC(void){
  403258:	b580      	push	{r7, lr}
  40325a:	af00      	add	r7, sp, #0
	/* Enable clock for DACC */
	sysclk_enable_peripheral_clock(DACC_ID);
  40325c:	201e      	movs	r0, #30
  40325e:	4b05      	ldr	r3, [pc, #20]	; (403274 <config_DAC+0x1c>)
  403260:	4798      	blx	r3

	/* Reset DACC registers */
	dacc_reset(DACC_BASE);
  403262:	4805      	ldr	r0, [pc, #20]	; (403278 <config_DAC+0x20>)
  403264:	4b05      	ldr	r3, [pc, #20]	; (40327c <config_DAC+0x24>)
  403266:	4798      	blx	r3
	dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  403268:	2100      	movs	r1, #0
  40326a:	4803      	ldr	r0, [pc, #12]	; (403278 <config_DAC+0x20>)
  40326c:	4b04      	ldr	r3, [pc, #16]	; (403280 <config_DAC+0x28>)
  40326e:	4798      	blx	r3
}
  403270:	bf00      	nop
  403272:	bd80      	pop	{r7, pc}
  403274:	00402745 	.word	0x00402745
  403278:	40040000 	.word	0x40040000
  40327c:	004001ad 	.word	0x004001ad
  403280:	00400205 	.word	0x00400205

00403284 <TC_init>:

/**
* Configura TimerCounter (TC) para gerar uma interrupcao no canal (ID_TC e TC_CHANNEL)
* na taxa de especificada em freq.
*/
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  403284:	b590      	push	{r4, r7, lr}
  403286:	b08b      	sub	sp, #44	; 0x2c
  403288:	af02      	add	r7, sp, #8
  40328a:	60f8      	str	r0, [r7, #12]
  40328c:	60b9      	str	r1, [r7, #8]
  40328e:	607a      	str	r2, [r7, #4]
  403290:	603b      	str	r3, [r7, #0]
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
  403292:	4b1f      	ldr	r3, [pc, #124]	; (403310 <TC_init+0x8c>)
  403294:	4798      	blx	r3
  403296:	61f8      	str	r0, [r7, #28]

	pmc_enable_periph_clk(ID_TC);
  403298:	68bb      	ldr	r3, [r7, #8]
  40329a:	4618      	mov	r0, r3
  40329c:	4b1d      	ldr	r3, [pc, #116]	; (403314 <TC_init+0x90>)
  40329e:	4798      	blx	r3

	/** Configura o TC para operar em  4Mhz e interrup�c�o no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4032a0:	6838      	ldr	r0, [r7, #0]
  4032a2:	f107 0114 	add.w	r1, r7, #20
  4032a6:	f107 0218 	add.w	r2, r7, #24
  4032aa:	69fb      	ldr	r3, [r7, #28]
  4032ac:	9300      	str	r3, [sp, #0]
  4032ae:	460b      	mov	r3, r1
  4032b0:	69f9      	ldr	r1, [r7, #28]
  4032b2:	4c19      	ldr	r4, [pc, #100]	; (403318 <TC_init+0x94>)
  4032b4:	47a0      	blx	r4
	
	//PMC->PMC_SCER = 1 << 14;
	ul_tcclks = 1;
  4032b6:	2301      	movs	r3, #1
  4032b8:	617b      	str	r3, [r7, #20]
	
	tc_init(TC, TC_CHANNEL, ul_tcclks 
  4032ba:	6879      	ldr	r1, [r7, #4]
  4032bc:	697b      	ldr	r3, [r7, #20]
  4032be:	f443 231c 	orr.w	r3, r3, #638976	; 0x9c000
  4032c2:	461a      	mov	r2, r3
  4032c4:	68f8      	ldr	r0, [r7, #12]
  4032c6:	4b15      	ldr	r3, [pc, #84]	; (40331c <TC_init+0x98>)
  4032c8:	4798      	blx	r3
							| TC_CMR_ACPA_SET /* RA Compare Effect: set */
							| TC_CMR_ACPC_CLEAR /* RC Compare Effect: clear */
							| TC_CMR_CPCTRG /* UP mode with automatic trigger on RC Compare */
	);
	
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq /8 );
  4032ca:	6879      	ldr	r1, [r7, #4]
  4032cc:	69bb      	ldr	r3, [r7, #24]
  4032ce:	69fa      	ldr	r2, [r7, #28]
  4032d0:	fbb2 f2f3 	udiv	r2, r2, r3
  4032d4:	683b      	ldr	r3, [r7, #0]
  4032d6:	fbb2 f3f3 	udiv	r3, r2, r3
  4032da:	08db      	lsrs	r3, r3, #3
  4032dc:	461a      	mov	r2, r3
  4032de:	68f8      	ldr	r0, [r7, #12]
  4032e0:	4b0f      	ldr	r3, [pc, #60]	; (403320 <TC_init+0x9c>)
  4032e2:	4798      	blx	r3
	tc_write_ra(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq / 8 / 2);
  4032e4:	6879      	ldr	r1, [r7, #4]
  4032e6:	69bb      	ldr	r3, [r7, #24]
  4032e8:	69fa      	ldr	r2, [r7, #28]
  4032ea:	fbb2 f2f3 	udiv	r2, r2, r3
  4032ee:	683b      	ldr	r3, [r7, #0]
  4032f0:	fbb2 f3f3 	udiv	r3, r2, r3
  4032f4:	091b      	lsrs	r3, r3, #4
  4032f6:	461a      	mov	r2, r3
  4032f8:	68f8      	ldr	r0, [r7, #12]
  4032fa:	4b0a      	ldr	r3, [pc, #40]	; (403324 <TC_init+0xa0>)
  4032fc:	4798      	blx	r3

	tc_start(TC, TC_CHANNEL);
  4032fe:	687b      	ldr	r3, [r7, #4]
  403300:	4619      	mov	r1, r3
  403302:	68f8      	ldr	r0, [r7, #12]
  403304:	4b08      	ldr	r3, [pc, #32]	; (403328 <TC_init+0xa4>)
  403306:	4798      	blx	r3
}
  403308:	bf00      	nop
  40330a:	3724      	adds	r7, #36	; 0x24
  40330c:	46bd      	mov	sp, r7
  40330e:	bd90      	pop	{r4, r7, pc}
  403310:	0040271d 	.word	0x0040271d
  403314:	00404d25 	.word	0x00404d25
  403318:	004036c9 	.word	0x004036c9
  40331c:	004035fd 	.word	0x004035fd
  403320:	0040367f 	.word	0x0040367f
  403324:	00403659 	.word	0x00403659
  403328:	00403637 	.word	0x00403637

0040332c <task_adc_to_dac>:
// 	pmc_enable_periph_clk(BUT_PIO_ID);
// 	pio_set_input(BUT_PIO, BUT_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
// 
// };

static void task_adc_to_dac(void *pvParameters) {
  40332c:	b590      	push	{r4, r7, lr}
  40332e:	b087      	sub	sp, #28
  403330:	af00      	add	r7, sp, #0
  403332:	6078      	str	r0, [r7, #4]

	xQueueEffects = xQueueCreate( 100, sizeof( effects_t ) );
  403334:	2200      	movs	r2, #0
  403336:	210c      	movs	r1, #12
  403338:	2064      	movs	r0, #100	; 0x64
  40333a:	4b1d      	ldr	r3, [pc, #116]	; (4033b0 <task_adc_to_dac+0x84>)
  40333c:	4798      	blx	r3
  40333e:	4602      	mov	r2, r0
  403340:	4b1c      	ldr	r3, [pc, #112]	; (4033b4 <task_adc_to_dac+0x88>)
  403342:	601a      	str	r2, [r3, #0]

	config_ADC_AUDIO();
  403344:	4b1c      	ldr	r3, [pc, #112]	; (4033b8 <task_adc_to_dac+0x8c>)
  403346:	4798      	blx	r3
	
	TC_init(TC0, ID_TC0, 0, 22000);
  403348:	f245 53f0 	movw	r3, #22000	; 0x55f0
  40334c:	2200      	movs	r2, #0
  40334e:	2117      	movs	r1, #23
  403350:	481a      	ldr	r0, [pc, #104]	; (4033bc <task_adc_to_dac+0x90>)
  403352:	4c1b      	ldr	r4, [pc, #108]	; (4033c0 <task_adc_to_dac+0x94>)
  403354:	47a0      	blx	r4

	config_DAC();
  403356:	4b1b      	ldr	r3, [pc, #108]	; (4033c4 <task_adc_to_dac+0x98>)
  403358:	4798      	blx	r3
	
	saturation_value = 50;
  40335a:	4b1b      	ldr	r3, [pc, #108]	; (4033c8 <task_adc_to_dac+0x9c>)
  40335c:	2232      	movs	r2, #50	; 0x32
  40335e:	601a      	str	r2, [r3, #0]
	gain_value = 70;
  403360:	4b1a      	ldr	r3, [pc, #104]	; (4033cc <task_adc_to_dac+0xa0>)
  403362:	2246      	movs	r2, #70	; 0x46
  403364:	601a      	str	r2, [r3, #0]
	lowpass_value = 10000;
  403366:	4b1a      	ldr	r3, [pc, #104]	; (4033d0 <task_adc_to_dac+0xa4>)
  403368:	f242 7210 	movw	r2, #10000	; 0x2710
  40336c:	601a      	str	r2, [r3, #0]

	effects_t effects;
	effects.gain = 50;
  40336e:	2332      	movs	r3, #50	; 0x32
  403370:	60fb      	str	r3, [r7, #12]
	effects.saturation = 0;
  403372:	2300      	movs	r3, #0
  403374:	613b      	str	r3, [r7, #16]
	effects.lowpass = 10000;
  403376:	f242 7310 	movw	r3, #10000	; 0x2710
  40337a:	617b      	str	r3, [r7, #20]
	
	while(1) {
		if (xQueueReceive( xQueueEffects, &(effects),  1000 / portTICK_RATE_MS)) {
  40337c:	4b0d      	ldr	r3, [pc, #52]	; (4033b4 <task_adc_to_dac+0x88>)
  40337e:	6818      	ldr	r0, [r3, #0]
  403380:	f107 010c 	add.w	r1, r7, #12
  403384:	2300      	movs	r3, #0
  403386:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40338a:	4c12      	ldr	r4, [pc, #72]	; (4033d4 <task_adc_to_dac+0xa8>)
  40338c:	47a0      	blx	r4
  40338e:	4603      	mov	r3, r0
  403390:	2b00      	cmp	r3, #0
  403392:	d0f3      	beq.n	40337c <task_adc_to_dac+0x50>
// 			printf("Gain_Value: %d\n", effects.gain);
			gain_value = effects.gain;
  403394:	68fb      	ldr	r3, [r7, #12]
  403396:	4a0d      	ldr	r2, [pc, #52]	; (4033cc <task_adc_to_dac+0xa0>)
  403398:	6013      	str	r3, [r2, #0]
			saturation_value = effects.saturation;
  40339a:	693b      	ldr	r3, [r7, #16]
  40339c:	4a0a      	ldr	r2, [pc, #40]	; (4033c8 <task_adc_to_dac+0x9c>)
  40339e:	6013      	str	r3, [r2, #0]
			lowpass_value = effects.lowpass;
  4033a0:	697b      	ldr	r3, [r7, #20]
  4033a2:	4a0b      	ldr	r2, [pc, #44]	; (4033d0 <task_adc_to_dac+0xa4>)
  4033a4:	6013      	str	r3, [r2, #0]
			vTaskDelay( 100 / portTICK_RATE_MS);
  4033a6:	2064      	movs	r0, #100	; 0x64
  4033a8:	4b0b      	ldr	r3, [pc, #44]	; (4033d8 <task_adc_to_dac+0xac>)
  4033aa:	4798      	blx	r3
		if (xQueueReceive( xQueueEffects, &(effects),  1000 / portTICK_RATE_MS)) {
  4033ac:	e7e6      	b.n	40337c <task_adc_to_dac+0x50>
  4033ae:	bf00      	nop
  4033b0:	004009f1 	.word	0x004009f1
  4033b4:	2040af38 	.word	0x2040af38
  4033b8:	0040309d 	.word	0x0040309d
  4033bc:	4000c000 	.word	0x4000c000
  4033c0:	00403285 	.word	0x00403285
  4033c4:	00403259 	.word	0x00403259
  4033c8:	20400024 	.word	0x20400024
  4033cc:	20400028 	.word	0x20400028
  4033d0:	2040002c 	.word	0x2040002c
  4033d4:	00400cad 	.word	0x00400cad
  4033d8:	004012b1 	.word	0x004012b1

004033dc <task_effects_controller>:
		}
	}
}

void task_effects_controller(void) {
  4033dc:	b590      	push	{r4, r7, lr}
  4033de:	b087      	sub	sp, #28
  4033e0:	af00      	add	r7, sp, #0

	xQueueGain = xQueueCreate( 100, sizeof( uint32_t ) );
  4033e2:	2200      	movs	r2, #0
  4033e4:	2104      	movs	r1, #4
  4033e6:	2064      	movs	r0, #100	; 0x64
  4033e8:	4b46      	ldr	r3, [pc, #280]	; (403504 <task_effects_controller+0x128>)
  4033ea:	4798      	blx	r3
  4033ec:	4602      	mov	r2, r0
  4033ee:	4b46      	ldr	r3, [pc, #280]	; (403508 <task_effects_controller+0x12c>)
  4033f0:	601a      	str	r2, [r3, #0]
	xQueueSaturation = xQueueCreate( 100, sizeof( uint32_t ) );
  4033f2:	2200      	movs	r2, #0
  4033f4:	2104      	movs	r1, #4
  4033f6:	2064      	movs	r0, #100	; 0x64
  4033f8:	4b42      	ldr	r3, [pc, #264]	; (403504 <task_effects_controller+0x128>)
  4033fa:	4798      	blx	r3
  4033fc:	4602      	mov	r2, r0
  4033fe:	4b43      	ldr	r3, [pc, #268]	; (40350c <task_effects_controller+0x130>)
  403400:	601a      	str	r2, [r3, #0]
	xQueueLowpass = xQueueCreate( 100, sizeof( uint32_t ) );
  403402:	2200      	movs	r2, #0
  403404:	2104      	movs	r1, #4
  403406:	2064      	movs	r0, #100	; 0x64
  403408:	4b3e      	ldr	r3, [pc, #248]	; (403504 <task_effects_controller+0x128>)
  40340a:	4798      	blx	r3
  40340c:	4602      	mov	r2, r0
  40340e:	4b40      	ldr	r3, [pc, #256]	; (403510 <task_effects_controller+0x134>)
  403410:	601a      	str	r2, [r3, #0]

	config_AFEC_EFFECTS();
  403412:	4b40      	ldr	r3, [pc, #256]	; (403514 <task_effects_controller+0x138>)
  403414:	4798      	blx	r3
	
	int saturation = 0;
  403416:	2300      	movs	r3, #0
  403418:	617b      	str	r3, [r7, #20]
	int gain = 50;
  40341a:	2332      	movs	r3, #50	; 0x32
  40341c:	613b      	str	r3, [r7, #16]
	int lowpass = 10000;
  40341e:	f242 7310 	movw	r3, #10000	; 0x2710
  403422:	60fb      	str	r3, [r7, #12]

	effects_t effects;
	effects.gain = gain;
  403424:	693b      	ldr	r3, [r7, #16]
  403426:	603b      	str	r3, [r7, #0]
	effects.saturation = saturation;
  403428:	697b      	ldr	r3, [r7, #20]
  40342a:	607b      	str	r3, [r7, #4]
	effects.lowpass = lowpass;
  40342c:	68fb      	ldr	r3, [r7, #12]
  40342e:	60bb      	str	r3, [r7, #8]

	afec_channel_enable(AFEC1, AFEC_CHANNEL_PIN_GAIN);
  403430:	2101      	movs	r1, #1
  403432:	4839      	ldr	r0, [pc, #228]	; (403518 <task_effects_controller+0x13c>)
  403434:	4b39      	ldr	r3, [pc, #228]	; (40351c <task_effects_controller+0x140>)
  403436:	4798      	blx	r3

	afec_start_software_conversion(AFEC1);
  403438:	4837      	ldr	r0, [pc, #220]	; (403518 <task_effects_controller+0x13c>)
  40343a:	4b39      	ldr	r3, [pc, #228]	; (403520 <task_effects_controller+0x144>)
  40343c:	4798      	blx	r3

// 	printf("Teste: %d\n", gain);
	
	while(1) {
		if (xQueueReceive( xQueueGain, &(gain),  10 / portTICK_RATE_MS)) {
  40343e:	4b32      	ldr	r3, [pc, #200]	; (403508 <task_effects_controller+0x12c>)
  403440:	6818      	ldr	r0, [r3, #0]
  403442:	f107 0110 	add.w	r1, r7, #16
  403446:	2300      	movs	r3, #0
  403448:	220a      	movs	r2, #10
  40344a:	4c36      	ldr	r4, [pc, #216]	; (403524 <task_effects_controller+0x148>)
  40344c:	47a0      	blx	r4
  40344e:	4603      	mov	r3, r0
  403450:	2b00      	cmp	r3, #0
  403452:	d011      	beq.n	403478 <task_effects_controller+0x9c>
			printf("Gain: %d\n", gain);
  403454:	693b      	ldr	r3, [r7, #16]
  403456:	4619      	mov	r1, r3
  403458:	4833      	ldr	r0, [pc, #204]	; (403528 <task_effects_controller+0x14c>)
  40345a:	4b34      	ldr	r3, [pc, #208]	; (40352c <task_effects_controller+0x150>)
  40345c:	4798      	blx	r3
			effects.gain = gain;
  40345e:	693b      	ldr	r3, [r7, #16]
  403460:	603b      	str	r3, [r7, #0]
			
			afec_channel_disable(AFEC1, AFEC_CHANNEL_PIN_GAIN);
  403462:	2101      	movs	r1, #1
  403464:	482c      	ldr	r0, [pc, #176]	; (403518 <task_effects_controller+0x13c>)
  403466:	4b32      	ldr	r3, [pc, #200]	; (403530 <task_effects_controller+0x154>)
  403468:	4798      	blx	r3
			afec_channel_enable(AFEC1, AFEC_CHANNEL_PIN_SATURATION);
  40346a:	2103      	movs	r1, #3
  40346c:	482a      	ldr	r0, [pc, #168]	; (403518 <task_effects_controller+0x13c>)
  40346e:	4b2b      	ldr	r3, [pc, #172]	; (40351c <task_effects_controller+0x140>)
  403470:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  403472:	4829      	ldr	r0, [pc, #164]	; (403518 <task_effects_controller+0x13c>)
  403474:	4b2a      	ldr	r3, [pc, #168]	; (403520 <task_effects_controller+0x144>)
  403476:	4798      	blx	r3
		}
		if (xQueueReceive( xQueueSaturation, &(saturation), 10 / portTICK_RATE_MS)) {
  403478:	4b24      	ldr	r3, [pc, #144]	; (40350c <task_effects_controller+0x130>)
  40347a:	6818      	ldr	r0, [r3, #0]
  40347c:	f107 0114 	add.w	r1, r7, #20
  403480:	2300      	movs	r3, #0
  403482:	220a      	movs	r2, #10
  403484:	4c27      	ldr	r4, [pc, #156]	; (403524 <task_effects_controller+0x148>)
  403486:	47a0      	blx	r4
  403488:	4603      	mov	r3, r0
  40348a:	2b00      	cmp	r3, #0
  40348c:	d011      	beq.n	4034b2 <task_effects_controller+0xd6>
			printf("Saturation: %d\n", saturation);
  40348e:	697b      	ldr	r3, [r7, #20]
  403490:	4619      	mov	r1, r3
  403492:	4828      	ldr	r0, [pc, #160]	; (403534 <task_effects_controller+0x158>)
  403494:	4b25      	ldr	r3, [pc, #148]	; (40352c <task_effects_controller+0x150>)
  403496:	4798      	blx	r3
			effects.saturation = saturation;
  403498:	697b      	ldr	r3, [r7, #20]
  40349a:	607b      	str	r3, [r7, #4]
			
			afec_channel_disable(AFEC1, AFEC_CHANNEL_PIN_SATURATION);
  40349c:	2103      	movs	r1, #3
  40349e:	481e      	ldr	r0, [pc, #120]	; (403518 <task_effects_controller+0x13c>)
  4034a0:	4b23      	ldr	r3, [pc, #140]	; (403530 <task_effects_controller+0x154>)
  4034a2:	4798      	blx	r3
			afec_channel_enable(AFEC1, AFEC_CHANNEL_PIN_LOWPASS);
  4034a4:	2105      	movs	r1, #5
  4034a6:	481c      	ldr	r0, [pc, #112]	; (403518 <task_effects_controller+0x13c>)
  4034a8:	4b1c      	ldr	r3, [pc, #112]	; (40351c <task_effects_controller+0x140>)
  4034aa:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  4034ac:	481a      	ldr	r0, [pc, #104]	; (403518 <task_effects_controller+0x13c>)
  4034ae:	4b1c      	ldr	r3, [pc, #112]	; (403520 <task_effects_controller+0x144>)
  4034b0:	4798      	blx	r3
		}
		if (xQueueReceive( xQueueLowpass, &(lowpass), 10 / portTICK_RATE_MS)) {
  4034b2:	4b17      	ldr	r3, [pc, #92]	; (403510 <task_effects_controller+0x134>)
  4034b4:	6818      	ldr	r0, [r3, #0]
  4034b6:	f107 010c 	add.w	r1, r7, #12
  4034ba:	2300      	movs	r3, #0
  4034bc:	220a      	movs	r2, #10
  4034be:	4c19      	ldr	r4, [pc, #100]	; (403524 <task_effects_controller+0x148>)
  4034c0:	47a0      	blx	r4
  4034c2:	4603      	mov	r3, r0
  4034c4:	2b00      	cmp	r3, #0
  4034c6:	d011      	beq.n	4034ec <task_effects_controller+0x110>
			printf("Lowpass: %d\n", lowpass);
  4034c8:	68fb      	ldr	r3, [r7, #12]
  4034ca:	4619      	mov	r1, r3
  4034cc:	481a      	ldr	r0, [pc, #104]	; (403538 <task_effects_controller+0x15c>)
  4034ce:	4b17      	ldr	r3, [pc, #92]	; (40352c <task_effects_controller+0x150>)
  4034d0:	4798      	blx	r3
			effects.lowpass = lowpass;
  4034d2:	68fb      	ldr	r3, [r7, #12]
  4034d4:	60bb      	str	r3, [r7, #8]

			afec_channel_disable(AFEC1, AFEC_CHANNEL_PIN_LOWPASS);
  4034d6:	2105      	movs	r1, #5
  4034d8:	480f      	ldr	r0, [pc, #60]	; (403518 <task_effects_controller+0x13c>)
  4034da:	4b15      	ldr	r3, [pc, #84]	; (403530 <task_effects_controller+0x154>)
  4034dc:	4798      	blx	r3
			afec_channel_enable(AFEC1, AFEC_CHANNEL_PIN_GAIN);
  4034de:	2101      	movs	r1, #1
  4034e0:	480d      	ldr	r0, [pc, #52]	; (403518 <task_effects_controller+0x13c>)
  4034e2:	4b0e      	ldr	r3, [pc, #56]	; (40351c <task_effects_controller+0x140>)
  4034e4:	4798      	blx	r3
			afec_start_software_conversion(AFEC1);
  4034e6:	480c      	ldr	r0, [pc, #48]	; (403518 <task_effects_controller+0x13c>)
  4034e8:	4b0d      	ldr	r3, [pc, #52]	; (403520 <task_effects_controller+0x144>)
  4034ea:	4798      	blx	r3
		}
		xQueueSend( xQueueEffects, &effects, NULL);
  4034ec:	4b13      	ldr	r3, [pc, #76]	; (40353c <task_effects_controller+0x160>)
  4034ee:	6818      	ldr	r0, [r3, #0]
  4034f0:	4639      	mov	r1, r7
  4034f2:	2300      	movs	r3, #0
  4034f4:	2200      	movs	r2, #0
  4034f6:	4c12      	ldr	r4, [pc, #72]	; (403540 <task_effects_controller+0x164>)
  4034f8:	47a0      	blx	r4
		vTaskDelay(500 / portTICK_RATE_MS);
  4034fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  4034fe:	4b11      	ldr	r3, [pc, #68]	; (403544 <task_effects_controller+0x168>)
  403500:	4798      	blx	r3
		if (xQueueReceive( xQueueGain, &(gain),  10 / portTICK_RATE_MS)) {
  403502:	e79c      	b.n	40343e <task_effects_controller+0x62>
  403504:	004009f1 	.word	0x004009f1
  403508:	2040af28 	.word	0x2040af28
  40350c:	2040af34 	.word	0x2040af34
  403510:	2040af2c 	.word	0x2040af2c
  403514:	0040315d 	.word	0x0040315d
  403518:	40064000 	.word	0x40064000
  40351c:	0040258d 	.word	0x0040258d
  403520:	00402571 	.word	0x00402571
  403524:	00400cad 	.word	0x00400cad
  403528:	00408db4 	.word	0x00408db4
  40352c:	00405d39 	.word	0x00405d39
  403530:	004025d9 	.word	0x004025d9
  403534:	00408dc0 	.word	0x00408dc0
  403538:	00408dd0 	.word	0x00408dd0
  40353c:	2040af38 	.word	0x2040af38
  403540:	00400a89 	.word	0x00400a89
  403544:	004012b1 	.word	0x004012b1

00403548 <main>:

/************************************************************************/
/* Main                                                                 */
/************************************************************************/
int main(void)
{
  403548:	b590      	push	{r4, r7, lr}
  40354a:	b085      	sub	sp, #20
  40354c:	af04      	add	r7, sp, #16

	/* Initialize the SAM system. */
	sysclk_init();
  40354e:	4b1c      	ldr	r3, [pc, #112]	; (4035c0 <main+0x78>)
  403550:	4798      	blx	r3
	ioport_init();
  403552:	4b1c      	ldr	r3, [pc, #112]	; (4035c4 <main+0x7c>)
  403554:	4798      	blx	r3
	board_init();
  403556:	4b1c      	ldr	r3, [pc, #112]	; (4035c8 <main+0x80>)
  403558:	4798      	blx	r3
  
	/* inicializa delay */
	delay_init(sysclk_get_cpu_hz());

	/* inicializa console (printf) */
	configure_console();
  40355a:	4b1c      	ldr	r3, [pc, #112]	; (4035cc <main+0x84>)
  40355c:	4798      	blx	r3
  
	/* Output example information. */
	puts(STRING_HEADER);
  40355e:	481c      	ldr	r0, [pc, #112]	; (4035d0 <main+0x88>)
  403560:	4b1c      	ldr	r3, [pc, #112]	; (4035d4 <main+0x8c>)
  403562:	4798      	blx	r3
	
	/*BUT_init();*/
	
	if (xTaskCreate(task_adc_to_dac, "AudioTask", TASK_TRIGGER_STACK_SIZE, NULL,
  403564:	2300      	movs	r3, #0
  403566:	9303      	str	r3, [sp, #12]
  403568:	2300      	movs	r3, #0
  40356a:	9302      	str	r3, [sp, #8]
  40356c:	2300      	movs	r3, #0
  40356e:	9301      	str	r3, [sp, #4]
  403570:	2300      	movs	r3, #0
  403572:	9300      	str	r3, [sp, #0]
  403574:	2300      	movs	r3, #0
  403576:	f44f 7280 	mov.w	r2, #256	; 0x100
  40357a:	4917      	ldr	r1, [pc, #92]	; (4035d8 <main+0x90>)
  40357c:	4817      	ldr	r0, [pc, #92]	; (4035dc <main+0x94>)
  40357e:	4c18      	ldr	r4, [pc, #96]	; (4035e0 <main+0x98>)
  403580:	47a0      	blx	r4
  403582:	4603      	mov	r3, r0
  403584:	2b01      	cmp	r3, #1
  403586:	d002      	beq.n	40358e <main+0x46>
	TASK_TRIGGER_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create AudioTask task\r\n");
  403588:	4816      	ldr	r0, [pc, #88]	; (4035e4 <main+0x9c>)
  40358a:	4b17      	ldr	r3, [pc, #92]	; (4035e8 <main+0xa0>)
  40358c:	4798      	blx	r3
	}

	if (xTaskCreate(task_effects_controller, "EffectsController", TASK_TRIGGER_STACK_SIZE, NULL,
  40358e:	2300      	movs	r3, #0
  403590:	9303      	str	r3, [sp, #12]
  403592:	2300      	movs	r3, #0
  403594:	9302      	str	r3, [sp, #8]
  403596:	2300      	movs	r3, #0
  403598:	9301      	str	r3, [sp, #4]
  40359a:	2300      	movs	r3, #0
  40359c:	9300      	str	r3, [sp, #0]
  40359e:	2300      	movs	r3, #0
  4035a0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4035a4:	4911      	ldr	r1, [pc, #68]	; (4035ec <main+0xa4>)
  4035a6:	4812      	ldr	r0, [pc, #72]	; (4035f0 <main+0xa8>)
  4035a8:	4c0d      	ldr	r4, [pc, #52]	; (4035e0 <main+0x98>)
  4035aa:	47a0      	blx	r4
  4035ac:	4603      	mov	r3, r0
  4035ae:	2b01      	cmp	r3, #1
  4035b0:	d002      	beq.n	4035b8 <main+0x70>
	TASK_TRIGGER_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create EffectsController task\r\n");
  4035b2:	4810      	ldr	r0, [pc, #64]	; (4035f4 <main+0xac>)
  4035b4:	4b0c      	ldr	r3, [pc, #48]	; (4035e8 <main+0xa0>)
  4035b6:	4798      	blx	r3
	}
	
	vTaskStartScheduler();
  4035b8:	4b0f      	ldr	r3, [pc, #60]	; (4035f8 <main+0xb0>)
  4035ba:	4798      	blx	r3

	while (1) {
  4035bc:	e7fe      	b.n	4035bc <main+0x74>
  4035be:	bf00      	nop
  4035c0:	00403a71 	.word	0x00403a71
  4035c4:	00402761 	.word	0x00402761
  4035c8:	00404041 	.word	0x00404041
  4035cc:	00403065 	.word	0x00403065
  4035d0:	00408de0 	.word	0x00408de0
  4035d4:	00405fcd 	.word	0x00405fcd
  4035d8:	00408e40 	.word	0x00408e40
  4035dc:	0040332d 	.word	0x0040332d
  4035e0:	00401109 	.word	0x00401109
  4035e4:	00408e4c 	.word	0x00408e4c
  4035e8:	00405d39 	.word	0x00405d39
  4035ec:	00408e70 	.word	0x00408e70
  4035f0:	004033dd 	.word	0x004033dd
  4035f4:	00408e84 	.word	0x00408e84
  4035f8:	00401319 	.word	0x00401319

004035fc <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4035fc:	b480      	push	{r7}
  4035fe:	b087      	sub	sp, #28
  403600:	af00      	add	r7, sp, #0
  403602:	60f8      	str	r0, [r7, #12]
  403604:	60b9      	str	r1, [r7, #8]
  403606:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  403608:	68fa      	ldr	r2, [r7, #12]
  40360a:	68bb      	ldr	r3, [r7, #8]
  40360c:	019b      	lsls	r3, r3, #6
  40360e:	4413      	add	r3, r2
  403610:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  403612:	697b      	ldr	r3, [r7, #20]
  403614:	2202      	movs	r2, #2
  403616:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  403618:	697b      	ldr	r3, [r7, #20]
  40361a:	f04f 32ff 	mov.w	r2, #4294967295
  40361e:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  403620:	697b      	ldr	r3, [r7, #20]
  403622:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  403624:	697b      	ldr	r3, [r7, #20]
  403626:	687a      	ldr	r2, [r7, #4]
  403628:	605a      	str	r2, [r3, #4]
}
  40362a:	bf00      	nop
  40362c:	371c      	adds	r7, #28
  40362e:	46bd      	mov	sp, r7
  403630:	f85d 7b04 	ldr.w	r7, [sp], #4
  403634:	4770      	bx	lr

00403636 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  403636:	b480      	push	{r7}
  403638:	b083      	sub	sp, #12
  40363a:	af00      	add	r7, sp, #0
  40363c:	6078      	str	r0, [r7, #4]
  40363e:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  403640:	687a      	ldr	r2, [r7, #4]
  403642:	683b      	ldr	r3, [r7, #0]
  403644:	019b      	lsls	r3, r3, #6
  403646:	4413      	add	r3, r2
  403648:	2205      	movs	r2, #5
  40364a:	601a      	str	r2, [r3, #0]
}
  40364c:	bf00      	nop
  40364e:	370c      	adds	r7, #12
  403650:	46bd      	mov	sp, r7
  403652:	f85d 7b04 	ldr.w	r7, [sp], #4
  403656:	4770      	bx	lr

00403658 <tc_write_ra>:
 */
void tc_write_ra(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  403658:	b480      	push	{r7}
  40365a:	b085      	sub	sp, #20
  40365c:	af00      	add	r7, sp, #0
  40365e:	60f8      	str	r0, [r7, #12]
  403660:	60b9      	str	r1, [r7, #8]
  403662:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  403664:	68fa      	ldr	r2, [r7, #12]
  403666:	68bb      	ldr	r3, [r7, #8]
  403668:	019b      	lsls	r3, r3, #6
  40366a:	4413      	add	r3, r2
  40366c:	3314      	adds	r3, #20
  40366e:	687a      	ldr	r2, [r7, #4]
  403670:	601a      	str	r2, [r3, #0]
}
  403672:	bf00      	nop
  403674:	3714      	adds	r7, #20
  403676:	46bd      	mov	sp, r7
  403678:	f85d 7b04 	ldr.w	r7, [sp], #4
  40367c:	4770      	bx	lr

0040367e <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  40367e:	b480      	push	{r7}
  403680:	b085      	sub	sp, #20
  403682:	af00      	add	r7, sp, #0
  403684:	60f8      	str	r0, [r7, #12]
  403686:	60b9      	str	r1, [r7, #8]
  403688:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40368a:	68fa      	ldr	r2, [r7, #12]
  40368c:	68bb      	ldr	r3, [r7, #8]
  40368e:	019b      	lsls	r3, r3, #6
  403690:	4413      	add	r3, r2
  403692:	331c      	adds	r3, #28
  403694:	687a      	ldr	r2, [r7, #4]
  403696:	601a      	str	r2, [r3, #0]
}
  403698:	bf00      	nop
  40369a:	3714      	adds	r7, #20
  40369c:	46bd      	mov	sp, r7
  40369e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4036a2:	4770      	bx	lr

004036a4 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4036a4:	b480      	push	{r7}
  4036a6:	b085      	sub	sp, #20
  4036a8:	af00      	add	r7, sp, #0
  4036aa:	6078      	str	r0, [r7, #4]
  4036ac:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4036ae:	687a      	ldr	r2, [r7, #4]
  4036b0:	683b      	ldr	r3, [r7, #0]
  4036b2:	019b      	lsls	r3, r3, #6
  4036b4:	4413      	add	r3, r2
  4036b6:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  4036b8:	68fb      	ldr	r3, [r7, #12]
  4036ba:	6a1b      	ldr	r3, [r3, #32]
}
  4036bc:	4618      	mov	r0, r3
  4036be:	3714      	adds	r7, #20
  4036c0:	46bd      	mov	sp, r7
  4036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4036c6:	4770      	bx	lr

004036c8 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4036c8:	b480      	push	{r7}
  4036ca:	b08d      	sub	sp, #52	; 0x34
  4036cc:	af00      	add	r7, sp, #0
  4036ce:	60f8      	str	r0, [r7, #12]
  4036d0:	60b9      	str	r1, [r7, #8]
  4036d2:	607a      	str	r2, [r7, #4]
  4036d4:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4036d6:	2302      	movs	r3, #2
  4036d8:	613b      	str	r3, [r7, #16]
  4036da:	2308      	movs	r3, #8
  4036dc:	617b      	str	r3, [r7, #20]
  4036de:	2320      	movs	r3, #32
  4036e0:	61bb      	str	r3, [r7, #24]
  4036e2:	2380      	movs	r3, #128	; 0x80
  4036e4:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4036e8:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4036ea:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  4036ec:	2300      	movs	r3, #0
  4036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  4036f0:	e01a      	b.n	403728 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  4036f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4036f4:	009b      	lsls	r3, r3, #2
  4036f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4036fa:	4413      	add	r3, r2
  4036fc:	f853 3c20 	ldr.w	r3, [r3, #-32]
  403700:	68ba      	ldr	r2, [r7, #8]
  403702:	fbb2 f3f3 	udiv	r3, r2, r3
  403706:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  403708:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40370a:	0c1b      	lsrs	r3, r3, #16
  40370c:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  40370e:	68fa      	ldr	r2, [r7, #12]
  403710:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403712:	429a      	cmp	r2, r3
  403714:	d901      	bls.n	40371a <tc_find_mck_divisor+0x52>
			return 0;
  403716:	2300      	movs	r3, #0
  403718:	e023      	b.n	403762 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  40371a:	68fa      	ldr	r2, [r7, #12]
  40371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40371e:	429a      	cmp	r2, r3
  403720:	d206      	bcs.n	403730 <tc_find_mck_divisor+0x68>
			ul_index++) {
  403722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403724:	3301      	adds	r3, #1
  403726:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  403728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40372a:	2b04      	cmp	r3, #4
  40372c:	d9e1      	bls.n	4036f2 <tc_find_mck_divisor+0x2a>
  40372e:	e000      	b.n	403732 <tc_find_mck_divisor+0x6a>
			break;
  403730:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  403732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403734:	2b04      	cmp	r3, #4
  403736:	d901      	bls.n	40373c <tc_find_mck_divisor+0x74>
		return 0;
  403738:	2300      	movs	r3, #0
  40373a:	e012      	b.n	403762 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  40373c:	687b      	ldr	r3, [r7, #4]
  40373e:	2b00      	cmp	r3, #0
  403740:	d008      	beq.n	403754 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  403742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403744:	009b      	lsls	r3, r3, #2
  403746:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40374a:	4413      	add	r3, r2
  40374c:	f853 2c20 	ldr.w	r2, [r3, #-32]
  403750:	687b      	ldr	r3, [r7, #4]
  403752:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  403754:	683b      	ldr	r3, [r7, #0]
  403756:	2b00      	cmp	r3, #0
  403758:	d002      	beq.n	403760 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  40375a:	683b      	ldr	r3, [r7, #0]
  40375c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  40375e:	601a      	str	r2, [r3, #0]
	}

	return 1;
  403760:	2301      	movs	r3, #1
}
  403762:	4618      	mov	r0, r3
  403764:	3734      	adds	r7, #52	; 0x34
  403766:	46bd      	mov	sp, r7
  403768:	f85d 7b04 	ldr.w	r7, [sp], #4
  40376c:	4770      	bx	lr
	...

00403770 <osc_enable>:
{
  403770:	b580      	push	{r7, lr}
  403772:	b082      	sub	sp, #8
  403774:	af00      	add	r7, sp, #0
  403776:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403778:	687b      	ldr	r3, [r7, #4]
  40377a:	2b07      	cmp	r3, #7
  40377c:	d831      	bhi.n	4037e2 <osc_enable+0x72>
  40377e:	a201      	add	r2, pc, #4	; (adr r2, 403784 <osc_enable+0x14>)
  403780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403784:	004037e1 	.word	0x004037e1
  403788:	004037a5 	.word	0x004037a5
  40378c:	004037ad 	.word	0x004037ad
  403790:	004037b5 	.word	0x004037b5
  403794:	004037bd 	.word	0x004037bd
  403798:	004037c5 	.word	0x004037c5
  40379c:	004037cd 	.word	0x004037cd
  4037a0:	004037d7 	.word	0x004037d7
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4037a4:	2000      	movs	r0, #0
  4037a6:	4b11      	ldr	r3, [pc, #68]	; (4037ec <osc_enable+0x7c>)
  4037a8:	4798      	blx	r3
		break;
  4037aa:	e01a      	b.n	4037e2 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4037ac:	2001      	movs	r0, #1
  4037ae:	4b0f      	ldr	r3, [pc, #60]	; (4037ec <osc_enable+0x7c>)
  4037b0:	4798      	blx	r3
		break;
  4037b2:	e016      	b.n	4037e2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4037b4:	2000      	movs	r0, #0
  4037b6:	4b0e      	ldr	r3, [pc, #56]	; (4037f0 <osc_enable+0x80>)
  4037b8:	4798      	blx	r3
		break;
  4037ba:	e012      	b.n	4037e2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4037bc:	2010      	movs	r0, #16
  4037be:	4b0c      	ldr	r3, [pc, #48]	; (4037f0 <osc_enable+0x80>)
  4037c0:	4798      	blx	r3
		break;
  4037c2:	e00e      	b.n	4037e2 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4037c4:	2020      	movs	r0, #32
  4037c6:	4b0a      	ldr	r3, [pc, #40]	; (4037f0 <osc_enable+0x80>)
  4037c8:	4798      	blx	r3
		break;
  4037ca:	e00a      	b.n	4037e2 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4037cc:	213e      	movs	r1, #62	; 0x3e
  4037ce:	2000      	movs	r0, #0
  4037d0:	4b08      	ldr	r3, [pc, #32]	; (4037f4 <osc_enable+0x84>)
  4037d2:	4798      	blx	r3
		break;
  4037d4:	e005      	b.n	4037e2 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  4037d6:	213e      	movs	r1, #62	; 0x3e
  4037d8:	2001      	movs	r0, #1
  4037da:	4b06      	ldr	r3, [pc, #24]	; (4037f4 <osc_enable+0x84>)
  4037dc:	4798      	blx	r3
		break;
  4037de:	e000      	b.n	4037e2 <osc_enable+0x72>
		break;
  4037e0:	bf00      	nop
}
  4037e2:	bf00      	nop
  4037e4:	3708      	adds	r7, #8
  4037e6:	46bd      	mov	sp, r7
  4037e8:	bd80      	pop	{r7, pc}
  4037ea:	bf00      	nop
  4037ec:	00404b61 	.word	0x00404b61
  4037f0:	00404bcd 	.word	0x00404bcd
  4037f4:	00404c3d 	.word	0x00404c3d

004037f8 <osc_is_ready>:
{
  4037f8:	b580      	push	{r7, lr}
  4037fa:	b082      	sub	sp, #8
  4037fc:	af00      	add	r7, sp, #0
  4037fe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403800:	687b      	ldr	r3, [r7, #4]
  403802:	2b07      	cmp	r3, #7
  403804:	d826      	bhi.n	403854 <osc_is_ready+0x5c>
  403806:	a201      	add	r2, pc, #4	; (adr r2, 40380c <osc_is_ready+0x14>)
  403808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40380c:	0040382d 	.word	0x0040382d
  403810:	00403831 	.word	0x00403831
  403814:	00403831 	.word	0x00403831
  403818:	00403843 	.word	0x00403843
  40381c:	00403843 	.word	0x00403843
  403820:	00403843 	.word	0x00403843
  403824:	00403843 	.word	0x00403843
  403828:	00403843 	.word	0x00403843
		return 1;
  40382c:	2301      	movs	r3, #1
  40382e:	e012      	b.n	403856 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  403830:	4b0b      	ldr	r3, [pc, #44]	; (403860 <osc_is_ready+0x68>)
  403832:	4798      	blx	r3
  403834:	4603      	mov	r3, r0
  403836:	2b00      	cmp	r3, #0
  403838:	bf14      	ite	ne
  40383a:	2301      	movne	r3, #1
  40383c:	2300      	moveq	r3, #0
  40383e:	b2db      	uxtb	r3, r3
  403840:	e009      	b.n	403856 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  403842:	4b08      	ldr	r3, [pc, #32]	; (403864 <osc_is_ready+0x6c>)
  403844:	4798      	blx	r3
  403846:	4603      	mov	r3, r0
  403848:	2b00      	cmp	r3, #0
  40384a:	bf14      	ite	ne
  40384c:	2301      	movne	r3, #1
  40384e:	2300      	moveq	r3, #0
  403850:	b2db      	uxtb	r3, r3
  403852:	e000      	b.n	403856 <osc_is_ready+0x5e>
	return 0;
  403854:	2300      	movs	r3, #0
}
  403856:	4618      	mov	r0, r3
  403858:	3708      	adds	r7, #8
  40385a:	46bd      	mov	sp, r7
  40385c:	bd80      	pop	{r7, pc}
  40385e:	bf00      	nop
  403860:	00404b99 	.word	0x00404b99
  403864:	00404cb5 	.word	0x00404cb5

00403868 <osc_get_rate>:
{
  403868:	b480      	push	{r7}
  40386a:	b083      	sub	sp, #12
  40386c:	af00      	add	r7, sp, #0
  40386e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403870:	687b      	ldr	r3, [r7, #4]
  403872:	2b07      	cmp	r3, #7
  403874:	d825      	bhi.n	4038c2 <osc_get_rate+0x5a>
  403876:	a201      	add	r2, pc, #4	; (adr r2, 40387c <osc_get_rate+0x14>)
  403878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40387c:	0040389d 	.word	0x0040389d
  403880:	004038a3 	.word	0x004038a3
  403884:	004038a9 	.word	0x004038a9
  403888:	004038af 	.word	0x004038af
  40388c:	004038b3 	.word	0x004038b3
  403890:	004038b7 	.word	0x004038b7
  403894:	004038bb 	.word	0x004038bb
  403898:	004038bf 	.word	0x004038bf
		return OSC_SLCK_32K_RC_HZ;
  40389c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4038a0:	e010      	b.n	4038c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4038a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4038a6:	e00d      	b.n	4038c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4038a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4038ac:	e00a      	b.n	4038c4 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4038ae:	4b08      	ldr	r3, [pc, #32]	; (4038d0 <osc_get_rate+0x68>)
  4038b0:	e008      	b.n	4038c4 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4038b2:	4b08      	ldr	r3, [pc, #32]	; (4038d4 <osc_get_rate+0x6c>)
  4038b4:	e006      	b.n	4038c4 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4038b6:	4b08      	ldr	r3, [pc, #32]	; (4038d8 <osc_get_rate+0x70>)
  4038b8:	e004      	b.n	4038c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4038ba:	4b07      	ldr	r3, [pc, #28]	; (4038d8 <osc_get_rate+0x70>)
  4038bc:	e002      	b.n	4038c4 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4038be:	4b06      	ldr	r3, [pc, #24]	; (4038d8 <osc_get_rate+0x70>)
  4038c0:	e000      	b.n	4038c4 <osc_get_rate+0x5c>
	return 0;
  4038c2:	2300      	movs	r3, #0
}
  4038c4:	4618      	mov	r0, r3
  4038c6:	370c      	adds	r7, #12
  4038c8:	46bd      	mov	sp, r7
  4038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4038ce:	4770      	bx	lr
  4038d0:	003d0900 	.word	0x003d0900
  4038d4:	007a1200 	.word	0x007a1200
  4038d8:	00b71b00 	.word	0x00b71b00

004038dc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  4038dc:	b580      	push	{r7, lr}
  4038de:	b082      	sub	sp, #8
  4038e0:	af00      	add	r7, sp, #0
  4038e2:	4603      	mov	r3, r0
  4038e4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  4038e6:	bf00      	nop
  4038e8:	79fb      	ldrb	r3, [r7, #7]
  4038ea:	4618      	mov	r0, r3
  4038ec:	4b05      	ldr	r3, [pc, #20]	; (403904 <osc_wait_ready+0x28>)
  4038ee:	4798      	blx	r3
  4038f0:	4603      	mov	r3, r0
  4038f2:	f083 0301 	eor.w	r3, r3, #1
  4038f6:	b2db      	uxtb	r3, r3
  4038f8:	2b00      	cmp	r3, #0
  4038fa:	d1f5      	bne.n	4038e8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4038fc:	bf00      	nop
  4038fe:	3708      	adds	r7, #8
  403900:	46bd      	mov	sp, r7
  403902:	bd80      	pop	{r7, pc}
  403904:	004037f9 	.word	0x004037f9

00403908 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  403908:	b580      	push	{r7, lr}
  40390a:	b086      	sub	sp, #24
  40390c:	af00      	add	r7, sp, #0
  40390e:	60f8      	str	r0, [r7, #12]
  403910:	607a      	str	r2, [r7, #4]
  403912:	603b      	str	r3, [r7, #0]
  403914:	460b      	mov	r3, r1
  403916:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  403918:	687b      	ldr	r3, [r7, #4]
  40391a:	2b00      	cmp	r3, #0
  40391c:	d107      	bne.n	40392e <pll_config_init+0x26>
  40391e:	683b      	ldr	r3, [r7, #0]
  403920:	2b00      	cmp	r3, #0
  403922:	d104      	bne.n	40392e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  403924:	68fb      	ldr	r3, [r7, #12]
  403926:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  40392a:	601a      	str	r2, [r3, #0]
  40392c:	e019      	b.n	403962 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40392e:	7afb      	ldrb	r3, [r7, #11]
  403930:	4618      	mov	r0, r3
  403932:	4b0e      	ldr	r3, [pc, #56]	; (40396c <pll_config_init+0x64>)
  403934:	4798      	blx	r3
  403936:	4602      	mov	r2, r0
  403938:	687b      	ldr	r3, [r7, #4]
  40393a:	fbb2 f3f3 	udiv	r3, r2, r3
  40393e:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  403940:	697b      	ldr	r3, [r7, #20]
  403942:	683a      	ldr	r2, [r7, #0]
  403944:	fb02 f303 	mul.w	r3, r2, r3
  403948:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40394a:	683b      	ldr	r3, [r7, #0]
  40394c:	3b01      	subs	r3, #1
  40394e:	041a      	lsls	r2, r3, #16
  403950:	4b07      	ldr	r3, [pc, #28]	; (403970 <pll_config_init+0x68>)
  403952:	4013      	ands	r3, r2
  403954:	687a      	ldr	r2, [r7, #4]
  403956:	b2d2      	uxtb	r2, r2
  403958:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  40395a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  40395e:	68fb      	ldr	r3, [r7, #12]
  403960:	601a      	str	r2, [r3, #0]
	}
}
  403962:	bf00      	nop
  403964:	3718      	adds	r7, #24
  403966:	46bd      	mov	sp, r7
  403968:	bd80      	pop	{r7, pc}
  40396a:	bf00      	nop
  40396c:	00403869 	.word	0x00403869
  403970:	07ff0000 	.word	0x07ff0000

00403974 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  403974:	b580      	push	{r7, lr}
  403976:	b082      	sub	sp, #8
  403978:	af00      	add	r7, sp, #0
  40397a:	6078      	str	r0, [r7, #4]
  40397c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40397e:	683b      	ldr	r3, [r7, #0]
  403980:	2b00      	cmp	r3, #0
  403982:	d108      	bne.n	403996 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  403984:	4b09      	ldr	r3, [pc, #36]	; (4039ac <pll_enable+0x38>)
  403986:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403988:	4a09      	ldr	r2, [pc, #36]	; (4039b0 <pll_enable+0x3c>)
  40398a:	687b      	ldr	r3, [r7, #4]
  40398c:	681b      	ldr	r3, [r3, #0]
  40398e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403992:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  403994:	e005      	b.n	4039a2 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  403996:	4a06      	ldr	r2, [pc, #24]	; (4039b0 <pll_enable+0x3c>)
  403998:	687b      	ldr	r3, [r7, #4]
  40399a:	681b      	ldr	r3, [r3, #0]
  40399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4039a0:	61d3      	str	r3, [r2, #28]
}
  4039a2:	bf00      	nop
  4039a4:	3708      	adds	r7, #8
  4039a6:	46bd      	mov	sp, r7
  4039a8:	bd80      	pop	{r7, pc}
  4039aa:	bf00      	nop
  4039ac:	00404cd1 	.word	0x00404cd1
  4039b0:	400e0600 	.word	0x400e0600

004039b4 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4039b4:	b580      	push	{r7, lr}
  4039b6:	b082      	sub	sp, #8
  4039b8:	af00      	add	r7, sp, #0
  4039ba:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4039bc:	687b      	ldr	r3, [r7, #4]
  4039be:	2b00      	cmp	r3, #0
  4039c0:	d103      	bne.n	4039ca <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  4039c2:	4b05      	ldr	r3, [pc, #20]	; (4039d8 <pll_is_locked+0x24>)
  4039c4:	4798      	blx	r3
  4039c6:	4603      	mov	r3, r0
  4039c8:	e002      	b.n	4039d0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  4039ca:	4b04      	ldr	r3, [pc, #16]	; (4039dc <pll_is_locked+0x28>)
  4039cc:	4798      	blx	r3
  4039ce:	4603      	mov	r3, r0
	}
}
  4039d0:	4618      	mov	r0, r3
  4039d2:	3708      	adds	r7, #8
  4039d4:	46bd      	mov	sp, r7
  4039d6:	bd80      	pop	{r7, pc}
  4039d8:	00404ced 	.word	0x00404ced
  4039dc:	00404d09 	.word	0x00404d09

004039e0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4039e0:	b580      	push	{r7, lr}
  4039e2:	b082      	sub	sp, #8
  4039e4:	af00      	add	r7, sp, #0
  4039e6:	4603      	mov	r3, r0
  4039e8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4039ea:	79fb      	ldrb	r3, [r7, #7]
  4039ec:	3b03      	subs	r3, #3
  4039ee:	2b04      	cmp	r3, #4
  4039f0:	d808      	bhi.n	403a04 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4039f2:	79fb      	ldrb	r3, [r7, #7]
  4039f4:	4618      	mov	r0, r3
  4039f6:	4b06      	ldr	r3, [pc, #24]	; (403a10 <pll_enable_source+0x30>)
  4039f8:	4798      	blx	r3
		osc_wait_ready(e_src);
  4039fa:	79fb      	ldrb	r3, [r7, #7]
  4039fc:	4618      	mov	r0, r3
  4039fe:	4b05      	ldr	r3, [pc, #20]	; (403a14 <pll_enable_source+0x34>)
  403a00:	4798      	blx	r3
		break;
  403a02:	e000      	b.n	403a06 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  403a04:	bf00      	nop
	}
}
  403a06:	bf00      	nop
  403a08:	3708      	adds	r7, #8
  403a0a:	46bd      	mov	sp, r7
  403a0c:	bd80      	pop	{r7, pc}
  403a0e:	bf00      	nop
  403a10:	00403771 	.word	0x00403771
  403a14:	004038dd 	.word	0x004038dd

00403a18 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  403a18:	b580      	push	{r7, lr}
  403a1a:	b082      	sub	sp, #8
  403a1c:	af00      	add	r7, sp, #0
  403a1e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403a20:	bf00      	nop
  403a22:	6878      	ldr	r0, [r7, #4]
  403a24:	4b04      	ldr	r3, [pc, #16]	; (403a38 <pll_wait_for_lock+0x20>)
  403a26:	4798      	blx	r3
  403a28:	4603      	mov	r3, r0
  403a2a:	2b00      	cmp	r3, #0
  403a2c:	d0f9      	beq.n	403a22 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  403a2e:	2300      	movs	r3, #0
}
  403a30:	4618      	mov	r0, r3
  403a32:	3708      	adds	r7, #8
  403a34:	46bd      	mov	sp, r7
  403a36:	bd80      	pop	{r7, pc}
  403a38:	004039b5 	.word	0x004039b5

00403a3c <sysclk_get_main_hz>:
{
  403a3c:	b580      	push	{r7, lr}
  403a3e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  403a40:	2006      	movs	r0, #6
  403a42:	4b05      	ldr	r3, [pc, #20]	; (403a58 <sysclk_get_main_hz+0x1c>)
  403a44:	4798      	blx	r3
  403a46:	4602      	mov	r2, r0
  403a48:	4613      	mov	r3, r2
  403a4a:	009b      	lsls	r3, r3, #2
  403a4c:	4413      	add	r3, r2
  403a4e:	009a      	lsls	r2, r3, #2
  403a50:	4413      	add	r3, r2
}
  403a52:	4618      	mov	r0, r3
  403a54:	bd80      	pop	{r7, pc}
  403a56:	bf00      	nop
  403a58:	00403869 	.word	0x00403869

00403a5c <sysclk_get_cpu_hz>:
{
  403a5c:	b580      	push	{r7, lr}
  403a5e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  403a60:	4b02      	ldr	r3, [pc, #8]	; (403a6c <sysclk_get_cpu_hz+0x10>)
  403a62:	4798      	blx	r3
  403a64:	4603      	mov	r3, r0
}
  403a66:	4618      	mov	r0, r3
  403a68:	bd80      	pop	{r7, pc}
  403a6a:	bf00      	nop
  403a6c:	00403a3d 	.word	0x00403a3d

00403a70 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403a70:	b590      	push	{r4, r7, lr}
  403a72:	b083      	sub	sp, #12
  403a74:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403a76:	4813      	ldr	r0, [pc, #76]	; (403ac4 <sysclk_init+0x54>)
  403a78:	4b13      	ldr	r3, [pc, #76]	; (403ac8 <sysclk_init+0x58>)
  403a7a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  403a7c:	2006      	movs	r0, #6
  403a7e:	4b13      	ldr	r3, [pc, #76]	; (403acc <sysclk_init+0x5c>)
  403a80:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  403a82:	1d38      	adds	r0, r7, #4
  403a84:	2319      	movs	r3, #25
  403a86:	2201      	movs	r2, #1
  403a88:	2106      	movs	r1, #6
  403a8a:	4c11      	ldr	r4, [pc, #68]	; (403ad0 <sysclk_init+0x60>)
  403a8c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  403a8e:	1d3b      	adds	r3, r7, #4
  403a90:	2100      	movs	r1, #0
  403a92:	4618      	mov	r0, r3
  403a94:	4b0f      	ldr	r3, [pc, #60]	; (403ad4 <sysclk_init+0x64>)
  403a96:	4798      	blx	r3
		pll_wait_for_lock(0);
  403a98:	2000      	movs	r0, #0
  403a9a:	4b0f      	ldr	r3, [pc, #60]	; (403ad8 <sysclk_init+0x68>)
  403a9c:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  403a9e:	2002      	movs	r0, #2
  403aa0:	4b0e      	ldr	r3, [pc, #56]	; (403adc <sysclk_init+0x6c>)
  403aa2:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403aa4:	2000      	movs	r0, #0
  403aa6:	4b0e      	ldr	r3, [pc, #56]	; (403ae0 <sysclk_init+0x70>)
  403aa8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403aaa:	4b0e      	ldr	r3, [pc, #56]	; (403ae4 <sysclk_init+0x74>)
  403aac:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403aae:	4b0e      	ldr	r3, [pc, #56]	; (403ae8 <sysclk_init+0x78>)
  403ab0:	4798      	blx	r3
  403ab2:	4603      	mov	r3, r0
  403ab4:	4618      	mov	r0, r3
  403ab6:	4b04      	ldr	r3, [pc, #16]	; (403ac8 <sysclk_init+0x58>)
  403ab8:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  403aba:	bf00      	nop
  403abc:	370c      	adds	r7, #12
  403abe:	46bd      	mov	sp, r7
  403ac0:	bd90      	pop	{r4, r7, pc}
  403ac2:	bf00      	nop
  403ac4:	11e1a300 	.word	0x11e1a300
  403ac8:	00405395 	.word	0x00405395
  403acc:	004039e1 	.word	0x004039e1
  403ad0:	00403909 	.word	0x00403909
  403ad4:	00403975 	.word	0x00403975
  403ad8:	00403a19 	.word	0x00403a19
  403adc:	00404a61 	.word	0x00404a61
  403ae0:	00404add 	.word	0x00404add
  403ae4:	0040522d 	.word	0x0040522d
  403ae8:	00403a5d 	.word	0x00403a5d

00403aec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  403aec:	b580      	push	{r7, lr}
  403aee:	b086      	sub	sp, #24
  403af0:	af00      	add	r7, sp, #0
  403af2:	60f8      	str	r0, [r7, #12]
  403af4:	60b9      	str	r1, [r7, #8]
  403af6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  403af8:	2300      	movs	r3, #0
  403afa:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  403afc:	68fb      	ldr	r3, [r7, #12]
  403afe:	2b00      	cmp	r3, #0
  403b00:	d012      	beq.n	403b28 <_read+0x3c>
		return -1;
  403b02:	f04f 33ff 	mov.w	r3, #4294967295
  403b06:	e013      	b.n	403b30 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  403b08:	4b0b      	ldr	r3, [pc, #44]	; (403b38 <_read+0x4c>)
  403b0a:	681b      	ldr	r3, [r3, #0]
  403b0c:	4a0b      	ldr	r2, [pc, #44]	; (403b3c <_read+0x50>)
  403b0e:	6812      	ldr	r2, [r2, #0]
  403b10:	68b9      	ldr	r1, [r7, #8]
  403b12:	4610      	mov	r0, r2
  403b14:	4798      	blx	r3
		ptr++;
  403b16:	68bb      	ldr	r3, [r7, #8]
  403b18:	3301      	adds	r3, #1
  403b1a:	60bb      	str	r3, [r7, #8]
		nChars++;
  403b1c:	697b      	ldr	r3, [r7, #20]
  403b1e:	3301      	adds	r3, #1
  403b20:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  403b22:	687b      	ldr	r3, [r7, #4]
  403b24:	3b01      	subs	r3, #1
  403b26:	607b      	str	r3, [r7, #4]
  403b28:	687b      	ldr	r3, [r7, #4]
  403b2a:	2b00      	cmp	r3, #0
  403b2c:	dcec      	bgt.n	403b08 <_read+0x1c>
	}
	return nChars;
  403b2e:	697b      	ldr	r3, [r7, #20]
}
  403b30:	4618      	mov	r0, r3
  403b32:	3718      	adds	r7, #24
  403b34:	46bd      	mov	sp, r7
  403b36:	bd80      	pop	{r7, pc}
  403b38:	2040af44 	.word	0x2040af44
  403b3c:	2040af4c 	.word	0x2040af4c

00403b40 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  403b40:	b580      	push	{r7, lr}
  403b42:	b086      	sub	sp, #24
  403b44:	af00      	add	r7, sp, #0
  403b46:	60f8      	str	r0, [r7, #12]
  403b48:	60b9      	str	r1, [r7, #8]
  403b4a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  403b4c:	2300      	movs	r3, #0
  403b4e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  403b50:	68fb      	ldr	r3, [r7, #12]
  403b52:	2b01      	cmp	r3, #1
  403b54:	d01e      	beq.n	403b94 <_write+0x54>
  403b56:	68fb      	ldr	r3, [r7, #12]
  403b58:	2b02      	cmp	r3, #2
  403b5a:	d01b      	beq.n	403b94 <_write+0x54>
  403b5c:	68fb      	ldr	r3, [r7, #12]
  403b5e:	2b03      	cmp	r3, #3
  403b60:	d018      	beq.n	403b94 <_write+0x54>
		return -1;
  403b62:	f04f 33ff 	mov.w	r3, #4294967295
  403b66:	e019      	b.n	403b9c <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  403b68:	4b0e      	ldr	r3, [pc, #56]	; (403ba4 <_write+0x64>)
  403b6a:	681a      	ldr	r2, [r3, #0]
  403b6c:	4b0e      	ldr	r3, [pc, #56]	; (403ba8 <_write+0x68>)
  403b6e:	6818      	ldr	r0, [r3, #0]
  403b70:	68bb      	ldr	r3, [r7, #8]
  403b72:	1c59      	adds	r1, r3, #1
  403b74:	60b9      	str	r1, [r7, #8]
  403b76:	781b      	ldrb	r3, [r3, #0]
  403b78:	4619      	mov	r1, r3
  403b7a:	4790      	blx	r2
  403b7c:	4603      	mov	r3, r0
  403b7e:	2b00      	cmp	r3, #0
  403b80:	da02      	bge.n	403b88 <_write+0x48>
			return -1;
  403b82:	f04f 33ff 	mov.w	r3, #4294967295
  403b86:	e009      	b.n	403b9c <_write+0x5c>
		}
		++nChars;
  403b88:	697b      	ldr	r3, [r7, #20]
  403b8a:	3301      	adds	r3, #1
  403b8c:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  403b8e:	687b      	ldr	r3, [r7, #4]
  403b90:	3b01      	subs	r3, #1
  403b92:	607b      	str	r3, [r7, #4]
  403b94:	687b      	ldr	r3, [r7, #4]
  403b96:	2b00      	cmp	r3, #0
  403b98:	d1e6      	bne.n	403b68 <_write+0x28>
	}
	return nChars;
  403b9a:	697b      	ldr	r3, [r7, #20]
}
  403b9c:	4618      	mov	r0, r3
  403b9e:	3718      	adds	r7, #24
  403ba0:	46bd      	mov	sp, r7
  403ba2:	bd80      	pop	{r7, pc}
  403ba4:	2040af48 	.word	0x2040af48
  403ba8:	2040af4c 	.word	0x2040af4c

00403bac <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  403bac:	b480      	push	{r7}
  403bae:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403bb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403bb4:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  403bb8:	4b09      	ldr	r3, [pc, #36]	; (403be0 <SCB_EnableICache+0x34>)
  403bba:	2200      	movs	r2, #0
  403bbc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  403bc0:	4a07      	ldr	r2, [pc, #28]	; (403be0 <SCB_EnableICache+0x34>)
  403bc2:	4b07      	ldr	r3, [pc, #28]	; (403be0 <SCB_EnableICache+0x34>)
  403bc4:	695b      	ldr	r3, [r3, #20]
  403bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  403bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  403bcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403bd0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  403bd4:	bf00      	nop
  403bd6:	46bd      	mov	sp, r7
  403bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bdc:	4770      	bx	lr
  403bde:	bf00      	nop
  403be0:	e000ed00 	.word	0xe000ed00

00403be4 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  403be4:	b480      	push	{r7}
  403be6:	b08b      	sub	sp, #44	; 0x2c
  403be8:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  403bea:	4b26      	ldr	r3, [pc, #152]	; (403c84 <SCB_EnableDCache+0xa0>)
  403bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  403bf0:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  403bf2:	69fb      	ldr	r3, [r7, #28]
  403bf4:	0b5b      	lsrs	r3, r3, #13
  403bf6:	f3c3 030e 	ubfx	r3, r3, #0, #15
  403bfa:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  403bfc:	69fb      	ldr	r3, [r7, #28]
  403bfe:	f003 0307 	and.w	r3, r3, #7
  403c02:	3304      	adds	r3, #4
  403c04:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  403c06:	69fb      	ldr	r3, [r7, #28]
  403c08:	08db      	lsrs	r3, r3, #3
  403c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
  403c0e:	617b      	str	r3, [r7, #20]
  403c10:	697b      	ldr	r3, [r7, #20]
  403c12:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403c14:	68bb      	ldr	r3, [r7, #8]
  403c16:	fab3 f383 	clz	r3, r3
  403c1a:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  403c1c:	687b      	ldr	r3, [r7, #4]
  403c1e:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  403c20:	f003 031f 	and.w	r3, r3, #31
  403c24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  403c26:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  403c2a:	697b      	ldr	r3, [r7, #20]
  403c2c:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  403c2e:	6a3a      	ldr	r2, [r7, #32]
  403c30:	693b      	ldr	r3, [r7, #16]
  403c32:	fa02 f303 	lsl.w	r3, r2, r3
  403c36:	4619      	mov	r1, r3
  403c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  403c3a:	69bb      	ldr	r3, [r7, #24]
  403c3c:	fa02 f303 	lsl.w	r3, r2, r3
  403c40:	430b      	orrs	r3, r1
  403c42:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  403c44:	4a0f      	ldr	r2, [pc, #60]	; (403c84 <SCB_EnableDCache+0xa0>)
  403c46:	68fb      	ldr	r3, [r7, #12]
  403c48:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  403c4c:	6a3b      	ldr	r3, [r7, #32]
  403c4e:	1e5a      	subs	r2, r3, #1
  403c50:	623a      	str	r2, [r7, #32]
  403c52:	2b00      	cmp	r3, #0
  403c54:	d1eb      	bne.n	403c2e <SCB_EnableDCache+0x4a>
        } while(sets--);
  403c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403c58:	1e5a      	subs	r2, r3, #1
  403c5a:	627a      	str	r2, [r7, #36]	; 0x24
  403c5c:	2b00      	cmp	r3, #0
  403c5e:	d1e4      	bne.n	403c2a <SCB_EnableDCache+0x46>
  403c60:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  403c64:	4a07      	ldr	r2, [pc, #28]	; (403c84 <SCB_EnableDCache+0xa0>)
  403c66:	4b07      	ldr	r3, [pc, #28]	; (403c84 <SCB_EnableDCache+0xa0>)
  403c68:	695b      	ldr	r3, [r3, #20]
  403c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403c6e:	6153      	str	r3, [r2, #20]
  403c70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403c74:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  403c78:	bf00      	nop
  403c7a:	372c      	adds	r7, #44	; 0x2c
  403c7c:	46bd      	mov	sp, r7
  403c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c82:	4770      	bx	lr
  403c84:	e000ed00 	.word	0xe000ed00

00403c88 <sysclk_enable_peripheral_clock>:
{
  403c88:	b580      	push	{r7, lr}
  403c8a:	b082      	sub	sp, #8
  403c8c:	af00      	add	r7, sp, #0
  403c8e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  403c90:	6878      	ldr	r0, [r7, #4]
  403c92:	4b03      	ldr	r3, [pc, #12]	; (403ca0 <sysclk_enable_peripheral_clock+0x18>)
  403c94:	4798      	blx	r3
}
  403c96:	bf00      	nop
  403c98:	3708      	adds	r7, #8
  403c9a:	46bd      	mov	sp, r7
  403c9c:	bd80      	pop	{r7, pc}
  403c9e:	bf00      	nop
  403ca0:	00404d25 	.word	0x00404d25

00403ca4 <ioport_init>:
{
  403ca4:	b580      	push	{r7, lr}
  403ca6:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  403ca8:	200a      	movs	r0, #10
  403caa:	4b08      	ldr	r3, [pc, #32]	; (403ccc <ioport_init+0x28>)
  403cac:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  403cae:	200b      	movs	r0, #11
  403cb0:	4b06      	ldr	r3, [pc, #24]	; (403ccc <ioport_init+0x28>)
  403cb2:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  403cb4:	200c      	movs	r0, #12
  403cb6:	4b05      	ldr	r3, [pc, #20]	; (403ccc <ioport_init+0x28>)
  403cb8:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  403cba:	2010      	movs	r0, #16
  403cbc:	4b03      	ldr	r3, [pc, #12]	; (403ccc <ioport_init+0x28>)
  403cbe:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  403cc0:	2011      	movs	r0, #17
  403cc2:	4b02      	ldr	r3, [pc, #8]	; (403ccc <ioport_init+0x28>)
  403cc4:	4798      	blx	r3
}
  403cc6:	bf00      	nop
  403cc8:	bd80      	pop	{r7, pc}
  403cca:	bf00      	nop
  403ccc:	00403c89 	.word	0x00403c89

00403cd0 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  403cd0:	b480      	push	{r7}
  403cd2:	b089      	sub	sp, #36	; 0x24
  403cd4:	af00      	add	r7, sp, #0
  403cd6:	6078      	str	r0, [r7, #4]
  403cd8:	687b      	ldr	r3, [r7, #4]
  403cda:	61fb      	str	r3, [r7, #28]
  403cdc:	69fb      	ldr	r3, [r7, #28]
  403cde:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  403ce0:	69bb      	ldr	r3, [r7, #24]
  403ce2:	095a      	lsrs	r2, r3, #5
  403ce4:	69fb      	ldr	r3, [r7, #28]
  403ce6:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  403ce8:	697b      	ldr	r3, [r7, #20]
  403cea:	f003 031f 	and.w	r3, r3, #31
  403cee:	2101      	movs	r1, #1
  403cf0:	fa01 f303 	lsl.w	r3, r1, r3
  403cf4:	613a      	str	r2, [r7, #16]
  403cf6:	60fb      	str	r3, [r7, #12]
  403cf8:	693b      	ldr	r3, [r7, #16]
  403cfa:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403cfc:	68ba      	ldr	r2, [r7, #8]
  403cfe:	4b06      	ldr	r3, [pc, #24]	; (403d18 <ioport_disable_pin+0x48>)
  403d00:	4413      	add	r3, r2
  403d02:	025b      	lsls	r3, r3, #9
  403d04:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403d06:	68fb      	ldr	r3, [r7, #12]
  403d08:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  403d0a:	bf00      	nop
  403d0c:	3724      	adds	r7, #36	; 0x24
  403d0e:	46bd      	mov	sp, r7
  403d10:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d14:	4770      	bx	lr
  403d16:	bf00      	nop
  403d18:	00200707 	.word	0x00200707

00403d1c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  403d1c:	b480      	push	{r7}
  403d1e:	b08d      	sub	sp, #52	; 0x34
  403d20:	af00      	add	r7, sp, #0
  403d22:	6078      	str	r0, [r7, #4]
  403d24:	6039      	str	r1, [r7, #0]
  403d26:	687b      	ldr	r3, [r7, #4]
  403d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  403d2a:	683b      	ldr	r3, [r7, #0]
  403d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  403d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403d30:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  403d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403d34:	095a      	lsrs	r2, r3, #5
  403d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403d38:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  403d3a:	6a3b      	ldr	r3, [r7, #32]
  403d3c:	f003 031f 	and.w	r3, r3, #31
  403d40:	2101      	movs	r1, #1
  403d42:	fa01 f303 	lsl.w	r3, r1, r3
  403d46:	61fa      	str	r2, [r7, #28]
  403d48:	61bb      	str	r3, [r7, #24]
  403d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403d4c:	617b      	str	r3, [r7, #20]
  403d4e:	69fb      	ldr	r3, [r7, #28]
  403d50:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403d52:	693a      	ldr	r2, [r7, #16]
  403d54:	4b37      	ldr	r3, [pc, #220]	; (403e34 <ioport_set_pin_mode+0x118>)
  403d56:	4413      	add	r3, r2
  403d58:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  403d5a:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  403d5c:	697b      	ldr	r3, [r7, #20]
  403d5e:	f003 0308 	and.w	r3, r3, #8
  403d62:	2b00      	cmp	r3, #0
  403d64:	d003      	beq.n	403d6e <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  403d66:	68fb      	ldr	r3, [r7, #12]
  403d68:	69ba      	ldr	r2, [r7, #24]
  403d6a:	665a      	str	r2, [r3, #100]	; 0x64
  403d6c:	e002      	b.n	403d74 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  403d6e:	68fb      	ldr	r3, [r7, #12]
  403d70:	69ba      	ldr	r2, [r7, #24]
  403d72:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  403d74:	697b      	ldr	r3, [r7, #20]
  403d76:	f003 0310 	and.w	r3, r3, #16
  403d7a:	2b00      	cmp	r3, #0
  403d7c:	d004      	beq.n	403d88 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  403d7e:	68fb      	ldr	r3, [r7, #12]
  403d80:	69ba      	ldr	r2, [r7, #24]
  403d82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  403d86:	e003      	b.n	403d90 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  403d88:	68fb      	ldr	r3, [r7, #12]
  403d8a:	69ba      	ldr	r2, [r7, #24]
  403d8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  403d90:	697b      	ldr	r3, [r7, #20]
  403d92:	f003 0320 	and.w	r3, r3, #32
  403d96:	2b00      	cmp	r3, #0
  403d98:	d003      	beq.n	403da2 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  403d9a:	68fb      	ldr	r3, [r7, #12]
  403d9c:	69ba      	ldr	r2, [r7, #24]
  403d9e:	651a      	str	r2, [r3, #80]	; 0x50
  403da0:	e002      	b.n	403da8 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  403da2:	68fb      	ldr	r3, [r7, #12]
  403da4:	69ba      	ldr	r2, [r7, #24]
  403da6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  403da8:	697b      	ldr	r3, [r7, #20]
  403daa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  403dae:	2b00      	cmp	r3, #0
  403db0:	d003      	beq.n	403dba <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  403db2:	68fb      	ldr	r3, [r7, #12]
  403db4:	69ba      	ldr	r2, [r7, #24]
  403db6:	621a      	str	r2, [r3, #32]
  403db8:	e002      	b.n	403dc0 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  403dba:	68fb      	ldr	r3, [r7, #12]
  403dbc:	69ba      	ldr	r2, [r7, #24]
  403dbe:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  403dc0:	697b      	ldr	r3, [r7, #20]
  403dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403dc6:	2b00      	cmp	r3, #0
  403dc8:	d004      	beq.n	403dd4 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  403dca:	68fb      	ldr	r3, [r7, #12]
  403dcc:	69ba      	ldr	r2, [r7, #24]
  403dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  403dd2:	e003      	b.n	403ddc <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403dd4:	68fb      	ldr	r3, [r7, #12]
  403dd6:	69ba      	ldr	r2, [r7, #24]
  403dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  403ddc:	697b      	ldr	r3, [r7, #20]
  403dde:	f003 0301 	and.w	r3, r3, #1
  403de2:	2b00      	cmp	r3, #0
  403de4:	d006      	beq.n	403df4 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  403de6:	68fb      	ldr	r3, [r7, #12]
  403de8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403dea:	69bb      	ldr	r3, [r7, #24]
  403dec:	431a      	orrs	r2, r3
  403dee:	68fb      	ldr	r3, [r7, #12]
  403df0:	671a      	str	r2, [r3, #112]	; 0x70
  403df2:	e006      	b.n	403e02 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403df4:	68fb      	ldr	r3, [r7, #12]
  403df6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403df8:	69bb      	ldr	r3, [r7, #24]
  403dfa:	43db      	mvns	r3, r3
  403dfc:	401a      	ands	r2, r3
  403dfe:	68fb      	ldr	r3, [r7, #12]
  403e00:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  403e02:	697b      	ldr	r3, [r7, #20]
  403e04:	f003 0302 	and.w	r3, r3, #2
  403e08:	2b00      	cmp	r3, #0
  403e0a:	d006      	beq.n	403e1a <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  403e0c:	68fb      	ldr	r3, [r7, #12]
  403e0e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403e10:	69bb      	ldr	r3, [r7, #24]
  403e12:	431a      	orrs	r2, r3
  403e14:	68fb      	ldr	r3, [r7, #12]
  403e16:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  403e18:	e006      	b.n	403e28 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  403e1a:	68fb      	ldr	r3, [r7, #12]
  403e1c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403e1e:	69bb      	ldr	r3, [r7, #24]
  403e20:	43db      	mvns	r3, r3
  403e22:	401a      	ands	r2, r3
  403e24:	68fb      	ldr	r3, [r7, #12]
  403e26:	675a      	str	r2, [r3, #116]	; 0x74
  403e28:	bf00      	nop
  403e2a:	3734      	adds	r7, #52	; 0x34
  403e2c:	46bd      	mov	sp, r7
  403e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e32:	4770      	bx	lr
  403e34:	00200707 	.word	0x00200707

00403e38 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  403e38:	b480      	push	{r7}
  403e3a:	b08d      	sub	sp, #52	; 0x34
  403e3c:	af00      	add	r7, sp, #0
  403e3e:	6078      	str	r0, [r7, #4]
  403e40:	460b      	mov	r3, r1
  403e42:	70fb      	strb	r3, [r7, #3]
  403e44:	687b      	ldr	r3, [r7, #4]
  403e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  403e48:	78fb      	ldrb	r3, [r7, #3]
  403e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  403e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403e50:	627b      	str	r3, [r7, #36]	; 0x24
  403e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403e54:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  403e56:	6a3b      	ldr	r3, [r7, #32]
  403e58:	095b      	lsrs	r3, r3, #5
  403e5a:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403e5c:	69fa      	ldr	r2, [r7, #28]
  403e5e:	4b17      	ldr	r3, [pc, #92]	; (403ebc <ioport_set_pin_dir+0x84>)
  403e60:	4413      	add	r3, r2
  403e62:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403e64:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  403e66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  403e6a:	2b01      	cmp	r3, #1
  403e6c:	d109      	bne.n	403e82 <ioport_set_pin_dir+0x4a>
  403e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403e70:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  403e72:	697b      	ldr	r3, [r7, #20]
  403e74:	f003 031f 	and.w	r3, r3, #31
  403e78:	2201      	movs	r2, #1
  403e7a:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  403e7c:	69bb      	ldr	r3, [r7, #24]
  403e7e:	611a      	str	r2, [r3, #16]
  403e80:	e00c      	b.n	403e9c <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  403e82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  403e86:	2b00      	cmp	r3, #0
  403e88:	d108      	bne.n	403e9c <ioport_set_pin_dir+0x64>
  403e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403e8c:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  403e8e:	693b      	ldr	r3, [r7, #16]
  403e90:	f003 031f 	and.w	r3, r3, #31
  403e94:	2201      	movs	r2, #1
  403e96:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403e98:	69bb      	ldr	r3, [r7, #24]
  403e9a:	615a      	str	r2, [r3, #20]
  403e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403e9e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  403ea0:	68fb      	ldr	r3, [r7, #12]
  403ea2:	f003 031f 	and.w	r3, r3, #31
  403ea6:	2201      	movs	r2, #1
  403ea8:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  403eaa:	69bb      	ldr	r3, [r7, #24]
  403eac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  403eb0:	bf00      	nop
  403eb2:	3734      	adds	r7, #52	; 0x34
  403eb4:	46bd      	mov	sp, r7
  403eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
  403eba:	4770      	bx	lr
  403ebc:	00200707 	.word	0x00200707

00403ec0 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  403ec0:	b480      	push	{r7}
  403ec2:	b08b      	sub	sp, #44	; 0x2c
  403ec4:	af00      	add	r7, sp, #0
  403ec6:	6078      	str	r0, [r7, #4]
  403ec8:	460b      	mov	r3, r1
  403eca:	70fb      	strb	r3, [r7, #3]
  403ecc:	687b      	ldr	r3, [r7, #4]
  403ece:	627b      	str	r3, [r7, #36]	; 0x24
  403ed0:	78fb      	ldrb	r3, [r7, #3]
  403ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  403ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403ed8:	61fb      	str	r3, [r7, #28]
  403eda:	69fb      	ldr	r3, [r7, #28]
  403edc:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  403ede:	69bb      	ldr	r3, [r7, #24]
  403ee0:	095b      	lsrs	r3, r3, #5
  403ee2:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403ee4:	697a      	ldr	r2, [r7, #20]
  403ee6:	4b10      	ldr	r3, [pc, #64]	; (403f28 <ioport_set_pin_level+0x68>)
  403ee8:	4413      	add	r3, r2
  403eea:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  403eec:	613b      	str	r3, [r7, #16]

	if (level) {
  403eee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403ef2:	2b00      	cmp	r3, #0
  403ef4:	d009      	beq.n	403f0a <ioport_set_pin_level+0x4a>
  403ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403ef8:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  403efa:	68fb      	ldr	r3, [r7, #12]
  403efc:	f003 031f 	and.w	r3, r3, #31
  403f00:	2201      	movs	r2, #1
  403f02:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403f04:	693b      	ldr	r3, [r7, #16]
  403f06:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  403f08:	e008      	b.n	403f1c <ioport_set_pin_level+0x5c>
  403f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403f0c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  403f0e:	68bb      	ldr	r3, [r7, #8]
  403f10:	f003 031f 	and.w	r3, r3, #31
  403f14:	2201      	movs	r2, #1
  403f16:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403f18:	693b      	ldr	r3, [r7, #16]
  403f1a:	635a      	str	r2, [r3, #52]	; 0x34
  403f1c:	bf00      	nop
  403f1e:	372c      	adds	r7, #44	; 0x2c
  403f20:	46bd      	mov	sp, r7
  403f22:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f26:	4770      	bx	lr
  403f28:	00200707 	.word	0x00200707

00403f2c <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  403f2c:	b480      	push	{r7}
  403f2e:	b08d      	sub	sp, #52	; 0x34
  403f30:	af00      	add	r7, sp, #0
  403f32:	6078      	str	r0, [r7, #4]
  403f34:	460b      	mov	r3, r1
  403f36:	70fb      	strb	r3, [r7, #3]
  403f38:	687b      	ldr	r3, [r7, #4]
  403f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  403f3c:	78fb      	ldrb	r3, [r7, #3]
  403f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  403f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403f44:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  403f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403f48:	095a      	lsrs	r2, r3, #5
  403f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403f4c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  403f4e:	6a3b      	ldr	r3, [r7, #32]
  403f50:	f003 031f 	and.w	r3, r3, #31
  403f54:	2101      	movs	r1, #1
  403f56:	fa01 f303 	lsl.w	r3, r1, r3
  403f5a:	61fa      	str	r2, [r7, #28]
  403f5c:	61bb      	str	r3, [r7, #24]
  403f5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  403f62:	75fb      	strb	r3, [r7, #23]
  403f64:	69fb      	ldr	r3, [r7, #28]
  403f66:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403f68:	693a      	ldr	r2, [r7, #16]
  403f6a:	4b23      	ldr	r3, [pc, #140]	; (403ff8 <ioport_set_pin_sense_mode+0xcc>)
  403f6c:	4413      	add	r3, r2
  403f6e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  403f70:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  403f72:	7dfb      	ldrb	r3, [r7, #23]
  403f74:	3b01      	subs	r3, #1
  403f76:	2b03      	cmp	r3, #3
  403f78:	d82e      	bhi.n	403fd8 <ioport_set_pin_sense_mode+0xac>
  403f7a:	a201      	add	r2, pc, #4	; (adr r2, 403f80 <ioport_set_pin_sense_mode+0x54>)
  403f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403f80:	00403fb5 	.word	0x00403fb5
  403f84:	00403fc7 	.word	0x00403fc7
  403f88:	00403f91 	.word	0x00403f91
  403f8c:	00403fa3 	.word	0x00403fa3
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  403f90:	68fb      	ldr	r3, [r7, #12]
  403f92:	69ba      	ldr	r2, [r7, #24]
  403f94:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  403f98:	68fb      	ldr	r3, [r7, #12]
  403f9a:	69ba      	ldr	r2, [r7, #24]
  403f9c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  403fa0:	e01f      	b.n	403fe2 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  403fa2:	68fb      	ldr	r3, [r7, #12]
  403fa4:	69ba      	ldr	r2, [r7, #24]
  403fa6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  403faa:	68fb      	ldr	r3, [r7, #12]
  403fac:	69ba      	ldr	r2, [r7, #24]
  403fae:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  403fb2:	e016      	b.n	403fe2 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  403fb4:	68fb      	ldr	r3, [r7, #12]
  403fb6:	69ba      	ldr	r2, [r7, #24]
  403fb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  403fbc:	68fb      	ldr	r3, [r7, #12]
  403fbe:	69ba      	ldr	r2, [r7, #24]
  403fc0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  403fc4:	e00d      	b.n	403fe2 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  403fc6:	68fb      	ldr	r3, [r7, #12]
  403fc8:	69ba      	ldr	r2, [r7, #24]
  403fca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  403fce:	68fb      	ldr	r3, [r7, #12]
  403fd0:	69ba      	ldr	r2, [r7, #24]
  403fd2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  403fd6:	e004      	b.n	403fe2 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  403fd8:	68fb      	ldr	r3, [r7, #12]
  403fda:	69ba      	ldr	r2, [r7, #24]
  403fdc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  403fe0:	e003      	b.n	403fea <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  403fe2:	68fb      	ldr	r3, [r7, #12]
  403fe4:	69ba      	ldr	r2, [r7, #24]
  403fe6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  403fea:	bf00      	nop
  403fec:	3734      	adds	r7, #52	; 0x34
  403fee:	46bd      	mov	sp, r7
  403ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ff4:	4770      	bx	lr
  403ff6:	bf00      	nop
  403ff8:	00200707 	.word	0x00200707

00403ffc <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  403ffc:	b480      	push	{r7}
  403ffe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  404000:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404004:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  404008:	4a0c      	ldr	r2, [pc, #48]	; (40403c <tcm_disable+0x40>)
  40400a:	4b0c      	ldr	r3, [pc, #48]	; (40403c <tcm_disable+0x40>)
  40400c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  404010:	f023 0301 	bic.w	r3, r3, #1
  404014:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  404018:	4a08      	ldr	r2, [pc, #32]	; (40403c <tcm_disable+0x40>)
  40401a:	4b08      	ldr	r3, [pc, #32]	; (40403c <tcm_disable+0x40>)
  40401c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  404020:	f023 0301 	bic.w	r3, r3, #1
  404024:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  404028:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40402c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  404030:	bf00      	nop
  404032:	46bd      	mov	sp, r7
  404034:	f85d 7b04 	ldr.w	r7, [sp], #4
  404038:	4770      	bx	lr
  40403a:	bf00      	nop
  40403c:	e000ed00 	.word	0xe000ed00

00404040 <board_init>:
#endif

void board_init(void)
{
  404040:	b580      	push	{r7, lr}
  404042:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404044:	4b1e      	ldr	r3, [pc, #120]	; (4040c0 <board_init+0x80>)
  404046:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40404a:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  40404c:	4b1d      	ldr	r3, [pc, #116]	; (4040c4 <board_init+0x84>)
  40404e:	4798      	blx	r3
	SCB_EnableDCache();
  404050:	4b1d      	ldr	r3, [pc, #116]	; (4040c8 <board_init+0x88>)
  404052:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404054:	4b1d      	ldr	r3, [pc, #116]	; (4040cc <board_init+0x8c>)
  404056:	4a1e      	ldr	r2, [pc, #120]	; (4040d0 <board_init+0x90>)
  404058:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40405a:	4b1c      	ldr	r3, [pc, #112]	; (4040cc <board_init+0x8c>)
  40405c:	4a1d      	ldr	r2, [pc, #116]	; (4040d4 <board_init+0x94>)
  40405e:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  404060:	4b1d      	ldr	r3, [pc, #116]	; (4040d8 <board_init+0x98>)
  404062:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  404064:	4b1d      	ldr	r3, [pc, #116]	; (4040dc <board_init+0x9c>)
  404066:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  404068:	2101      	movs	r1, #1
  40406a:	2048      	movs	r0, #72	; 0x48
  40406c:	4b1c      	ldr	r3, [pc, #112]	; (4040e0 <board_init+0xa0>)
  40406e:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  404070:	2101      	movs	r1, #1
  404072:	2048      	movs	r0, #72	; 0x48
  404074:	4b1b      	ldr	r3, [pc, #108]	; (4040e4 <board_init+0xa4>)
  404076:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  404078:	2100      	movs	r1, #0
  40407a:	200b      	movs	r0, #11
  40407c:	4b18      	ldr	r3, [pc, #96]	; (4040e0 <board_init+0xa0>)
  40407e:	4798      	blx	r3
  404080:	2188      	movs	r1, #136	; 0x88
  404082:	200b      	movs	r0, #11
  404084:	4b18      	ldr	r3, [pc, #96]	; (4040e8 <board_init+0xa8>)
  404086:	4798      	blx	r3
  404088:	2102      	movs	r1, #2
  40408a:	200b      	movs	r0, #11
  40408c:	4b17      	ldr	r3, [pc, #92]	; (4040ec <board_init+0xac>)
  40408e:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  404090:	2100      	movs	r1, #0
  404092:	2015      	movs	r0, #21
  404094:	4b14      	ldr	r3, [pc, #80]	; (4040e8 <board_init+0xa8>)
  404096:	4798      	blx	r3
  404098:	2015      	movs	r0, #21
  40409a:	4b15      	ldr	r3, [pc, #84]	; (4040f0 <board_init+0xb0>)
  40409c:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40409e:	4a15      	ldr	r2, [pc, #84]	; (4040f4 <board_init+0xb4>)
  4040a0:	4b14      	ldr	r3, [pc, #80]	; (4040f4 <board_init+0xb4>)
  4040a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  4040a6:	f043 0310 	orr.w	r3, r3, #16
  4040aa:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  4040ae:	2103      	movs	r1, #3
  4040b0:	2024      	movs	r0, #36	; 0x24
  4040b2:	4b0d      	ldr	r3, [pc, #52]	; (4040e8 <board_init+0xa8>)
  4040b4:	4798      	blx	r3
  4040b6:	2024      	movs	r0, #36	; 0x24
  4040b8:	4b0d      	ldr	r3, [pc, #52]	; (4040f0 <board_init+0xb0>)
  4040ba:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  4040bc:	bf00      	nop
  4040be:	bd80      	pop	{r7, pc}
  4040c0:	400e1850 	.word	0x400e1850
  4040c4:	00403bad 	.word	0x00403bad
  4040c8:	00403be5 	.word	0x00403be5
  4040cc:	400e0c00 	.word	0x400e0c00
  4040d0:	5a00080c 	.word	0x5a00080c
  4040d4:	5a00070c 	.word	0x5a00070c
  4040d8:	00403ffd 	.word	0x00403ffd
  4040dc:	00403ca5 	.word	0x00403ca5
  4040e0:	00403e39 	.word	0x00403e39
  4040e4:	00403ec1 	.word	0x00403ec1
  4040e8:	00403d1d 	.word	0x00403d1d
  4040ec:	00403f2d 	.word	0x00403f2d
  4040f0:	00403cd1 	.word	0x00403cd1
  4040f4:	40088000 	.word	0x40088000

004040f8 <NVIC_EnableIRQ>:
{
  4040f8:	b480      	push	{r7}
  4040fa:	b083      	sub	sp, #12
  4040fc:	af00      	add	r7, sp, #0
  4040fe:	4603      	mov	r3, r0
  404100:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404102:	4909      	ldr	r1, [pc, #36]	; (404128 <NVIC_EnableIRQ+0x30>)
  404104:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404108:	095b      	lsrs	r3, r3, #5
  40410a:	79fa      	ldrb	r2, [r7, #7]
  40410c:	f002 021f 	and.w	r2, r2, #31
  404110:	2001      	movs	r0, #1
  404112:	fa00 f202 	lsl.w	r2, r0, r2
  404116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40411a:	bf00      	nop
  40411c:	370c      	adds	r7, #12
  40411e:	46bd      	mov	sp, r7
  404120:	f85d 7b04 	ldr.w	r7, [sp], #4
  404124:	4770      	bx	lr
  404126:	bf00      	nop
  404128:	e000e100 	.word	0xe000e100

0040412c <NVIC_ClearPendingIRQ>:
{
  40412c:	b480      	push	{r7}
  40412e:	b083      	sub	sp, #12
  404130:	af00      	add	r7, sp, #0
  404132:	4603      	mov	r3, r0
  404134:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  404136:	4909      	ldr	r1, [pc, #36]	; (40415c <NVIC_ClearPendingIRQ+0x30>)
  404138:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40413c:	095b      	lsrs	r3, r3, #5
  40413e:	79fa      	ldrb	r2, [r7, #7]
  404140:	f002 021f 	and.w	r2, r2, #31
  404144:	2001      	movs	r0, #1
  404146:	fa00 f202 	lsl.w	r2, r0, r2
  40414a:	3360      	adds	r3, #96	; 0x60
  40414c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  404150:	bf00      	nop
  404152:	370c      	adds	r7, #12
  404154:	46bd      	mov	sp, r7
  404156:	f85d 7b04 	ldr.w	r7, [sp], #4
  40415a:	4770      	bx	lr
  40415c:	e000e100 	.word	0xe000e100

00404160 <NVIC_SetPriority>:
{
  404160:	b480      	push	{r7}
  404162:	b083      	sub	sp, #12
  404164:	af00      	add	r7, sp, #0
  404166:	4603      	mov	r3, r0
  404168:	6039      	str	r1, [r7, #0]
  40416a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40416c:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404170:	2b00      	cmp	r3, #0
  404172:	da0b      	bge.n	40418c <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404174:	490d      	ldr	r1, [pc, #52]	; (4041ac <NVIC_SetPriority+0x4c>)
  404176:	79fb      	ldrb	r3, [r7, #7]
  404178:	f003 030f 	and.w	r3, r3, #15
  40417c:	3b04      	subs	r3, #4
  40417e:	683a      	ldr	r2, [r7, #0]
  404180:	b2d2      	uxtb	r2, r2
  404182:	0152      	lsls	r2, r2, #5
  404184:	b2d2      	uxtb	r2, r2
  404186:	440b      	add	r3, r1
  404188:	761a      	strb	r2, [r3, #24]
}
  40418a:	e009      	b.n	4041a0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40418c:	4908      	ldr	r1, [pc, #32]	; (4041b0 <NVIC_SetPriority+0x50>)
  40418e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  404192:	683a      	ldr	r2, [r7, #0]
  404194:	b2d2      	uxtb	r2, r2
  404196:	0152      	lsls	r2, r2, #5
  404198:	b2d2      	uxtb	r2, r2
  40419a:	440b      	add	r3, r1
  40419c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  4041a0:	bf00      	nop
  4041a2:	370c      	adds	r7, #12
  4041a4:	46bd      	mov	sp, r7
  4041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4041aa:	4770      	bx	lr
  4041ac:	e000ed00 	.word	0xe000ed00
  4041b0:	e000e100 	.word	0xe000e100

004041b4 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  4041b4:	b480      	push	{r7}
  4041b6:	b083      	sub	sp, #12
  4041b8:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4041ba:	f3ef 8310 	mrs	r3, PRIMASK
  4041be:	607b      	str	r3, [r7, #4]
  return(result);
  4041c0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4041c2:	2b00      	cmp	r3, #0
  4041c4:	bf0c      	ite	eq
  4041c6:	2301      	moveq	r3, #1
  4041c8:	2300      	movne	r3, #0
  4041ca:	b2db      	uxtb	r3, r3
  4041cc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4041ce:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4041d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4041d4:	4b04      	ldr	r3, [pc, #16]	; (4041e8 <cpu_irq_save+0x34>)
  4041d6:	2200      	movs	r2, #0
  4041d8:	701a      	strb	r2, [r3, #0]
	return flags;
  4041da:	683b      	ldr	r3, [r7, #0]
}
  4041dc:	4618      	mov	r0, r3
  4041de:	370c      	adds	r7, #12
  4041e0:	46bd      	mov	sp, r7
  4041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4041e6:	4770      	bx	lr
  4041e8:	20400034 	.word	0x20400034

004041ec <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4041ec:	b480      	push	{r7}
  4041ee:	b083      	sub	sp, #12
  4041f0:	af00      	add	r7, sp, #0
  4041f2:	6078      	str	r0, [r7, #4]
	return (flags);
  4041f4:	687b      	ldr	r3, [r7, #4]
  4041f6:	2b00      	cmp	r3, #0
  4041f8:	bf14      	ite	ne
  4041fa:	2301      	movne	r3, #1
  4041fc:	2300      	moveq	r3, #0
  4041fe:	b2db      	uxtb	r3, r3
}
  404200:	4618      	mov	r0, r3
  404202:	370c      	adds	r7, #12
  404204:	46bd      	mov	sp, r7
  404206:	f85d 7b04 	ldr.w	r7, [sp], #4
  40420a:	4770      	bx	lr

0040420c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  40420c:	b580      	push	{r7, lr}
  40420e:	b082      	sub	sp, #8
  404210:	af00      	add	r7, sp, #0
  404212:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  404214:	6878      	ldr	r0, [r7, #4]
  404216:	4b07      	ldr	r3, [pc, #28]	; (404234 <cpu_irq_restore+0x28>)
  404218:	4798      	blx	r3
  40421a:	4603      	mov	r3, r0
  40421c:	2b00      	cmp	r3, #0
  40421e:	d005      	beq.n	40422c <cpu_irq_restore+0x20>
		cpu_irq_enable();
  404220:	4b05      	ldr	r3, [pc, #20]	; (404238 <cpu_irq_restore+0x2c>)
  404222:	2201      	movs	r2, #1
  404224:	701a      	strb	r2, [r3, #0]
  404226:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40422a:	b662      	cpsie	i
}
  40422c:	bf00      	nop
  40422e:	3708      	adds	r7, #8
  404230:	46bd      	mov	sp, r7
  404232:	bd80      	pop	{r7, pc}
  404234:	004041ed 	.word	0x004041ed
  404238:	20400034 	.word	0x20400034

0040423c <afec_ch_sanity_check>:
{
  40423c:	b480      	push	{r7}
  40423e:	b083      	sub	sp, #12
  404240:	af00      	add	r7, sp, #0
  404242:	6078      	str	r0, [r7, #4]
  404244:	460b      	mov	r3, r1
  404246:	807b      	strh	r3, [r7, #2]
}
  404248:	bf00      	nop
  40424a:	370c      	adds	r7, #12
  40424c:	46bd      	mov	sp, r7
  40424e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404252:	4770      	bx	lr

00404254 <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  404254:	b480      	push	{r7}
  404256:	b083      	sub	sp, #12
  404258:	af00      	add	r7, sp, #0
  40425a:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  40425c:	687b      	ldr	r3, [r7, #4]
  40425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  404260:	4618      	mov	r0, r3
  404262:	370c      	adds	r7, #12
  404264:	46bd      	mov	sp, r7
  404266:	f85d 7b04 	ldr.w	r7, [sp], #4
  40426a:	4770      	bx	lr

0040426c <afec_get_interrupt_mask>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
  40426c:	b480      	push	{r7}
  40426e:	b083      	sub	sp, #12
  404270:	af00      	add	r7, sp, #0
  404272:	6078      	str	r0, [r7, #4]
	return afec->AFEC_IMR;
  404274:	687b      	ldr	r3, [r7, #4]
  404276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  404278:	4618      	mov	r0, r3
  40427a:	370c      	adds	r7, #12
  40427c:	46bd      	mov	sp, r7
  40427e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404282:	4770      	bx	lr

00404284 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  404284:	b580      	push	{r7, lr}
  404286:	b084      	sub	sp, #16
  404288:	af00      	add	r7, sp, #0
  40428a:	4603      	mov	r3, r0
  40428c:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40428e:	79fb      	ldrb	r3, [r7, #7]
  404290:	4a0a      	ldr	r2, [pc, #40]	; (4042bc <sleepmgr_lock_mode+0x38>)
  404292:	5cd3      	ldrb	r3, [r2, r3]
  404294:	2bff      	cmp	r3, #255	; 0xff
  404296:	d100      	bne.n	40429a <sleepmgr_lock_mode+0x16>
		while (true) {
  404298:	e7fe      	b.n	404298 <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  40429a:	4b09      	ldr	r3, [pc, #36]	; (4042c0 <sleepmgr_lock_mode+0x3c>)
  40429c:	4798      	blx	r3
  40429e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  4042a0:	79fb      	ldrb	r3, [r7, #7]
  4042a2:	4a06      	ldr	r2, [pc, #24]	; (4042bc <sleepmgr_lock_mode+0x38>)
  4042a4:	5cd2      	ldrb	r2, [r2, r3]
  4042a6:	3201      	adds	r2, #1
  4042a8:	b2d1      	uxtb	r1, r2
  4042aa:	4a04      	ldr	r2, [pc, #16]	; (4042bc <sleepmgr_lock_mode+0x38>)
  4042ac:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  4042ae:	68f8      	ldr	r0, [r7, #12]
  4042b0:	4b04      	ldr	r3, [pc, #16]	; (4042c4 <sleepmgr_lock_mode+0x40>)
  4042b2:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  4042b4:	bf00      	nop
  4042b6:	3710      	adds	r7, #16
  4042b8:	46bd      	mov	sp, r7
  4042ba:	bd80      	pop	{r7, pc}
  4042bc:	2040af3c 	.word	0x2040af3c
  4042c0:	004041b5 	.word	0x004041b5
  4042c4:	0040420d 	.word	0x0040420d

004042c8 <osc_get_rate>:
{
  4042c8:	b480      	push	{r7}
  4042ca:	b083      	sub	sp, #12
  4042cc:	af00      	add	r7, sp, #0
  4042ce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4042d0:	687b      	ldr	r3, [r7, #4]
  4042d2:	2b07      	cmp	r3, #7
  4042d4:	d825      	bhi.n	404322 <osc_get_rate+0x5a>
  4042d6:	a201      	add	r2, pc, #4	; (adr r2, 4042dc <osc_get_rate+0x14>)
  4042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4042dc:	004042fd 	.word	0x004042fd
  4042e0:	00404303 	.word	0x00404303
  4042e4:	00404309 	.word	0x00404309
  4042e8:	0040430f 	.word	0x0040430f
  4042ec:	00404313 	.word	0x00404313
  4042f0:	00404317 	.word	0x00404317
  4042f4:	0040431b 	.word	0x0040431b
  4042f8:	0040431f 	.word	0x0040431f
		return OSC_SLCK_32K_RC_HZ;
  4042fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  404300:	e010      	b.n	404324 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  404302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  404306:	e00d      	b.n	404324 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  404308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40430c:	e00a      	b.n	404324 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40430e:	4b08      	ldr	r3, [pc, #32]	; (404330 <osc_get_rate+0x68>)
  404310:	e008      	b.n	404324 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  404312:	4b08      	ldr	r3, [pc, #32]	; (404334 <osc_get_rate+0x6c>)
  404314:	e006      	b.n	404324 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  404316:	4b08      	ldr	r3, [pc, #32]	; (404338 <osc_get_rate+0x70>)
  404318:	e004      	b.n	404324 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40431a:	4b07      	ldr	r3, [pc, #28]	; (404338 <osc_get_rate+0x70>)
  40431c:	e002      	b.n	404324 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40431e:	4b06      	ldr	r3, [pc, #24]	; (404338 <osc_get_rate+0x70>)
  404320:	e000      	b.n	404324 <osc_get_rate+0x5c>
	return 0;
  404322:	2300      	movs	r3, #0
}
  404324:	4618      	mov	r0, r3
  404326:	370c      	adds	r7, #12
  404328:	46bd      	mov	sp, r7
  40432a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40432e:	4770      	bx	lr
  404330:	003d0900 	.word	0x003d0900
  404334:	007a1200 	.word	0x007a1200
  404338:	00b71b00 	.word	0x00b71b00

0040433c <sysclk_get_main_hz>:
{
  40433c:	b580      	push	{r7, lr}
  40433e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  404340:	2006      	movs	r0, #6
  404342:	4b05      	ldr	r3, [pc, #20]	; (404358 <sysclk_get_main_hz+0x1c>)
  404344:	4798      	blx	r3
  404346:	4602      	mov	r2, r0
  404348:	4613      	mov	r3, r2
  40434a:	009b      	lsls	r3, r3, #2
  40434c:	4413      	add	r3, r2
  40434e:	009a      	lsls	r2, r3, #2
  404350:	4413      	add	r3, r2
}
  404352:	4618      	mov	r0, r3
  404354:	bd80      	pop	{r7, pc}
  404356:	bf00      	nop
  404358:	004042c9 	.word	0x004042c9

0040435c <sysclk_get_cpu_hz>:
{
  40435c:	b580      	push	{r7, lr}
  40435e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  404360:	4b02      	ldr	r3, [pc, #8]	; (40436c <sysclk_get_cpu_hz+0x10>)
  404362:	4798      	blx	r3
  404364:	4603      	mov	r3, r0
}
  404366:	4618      	mov	r0, r3
  404368:	bd80      	pop	{r7, pc}
  40436a:	bf00      	nop
  40436c:	0040433d 	.word	0x0040433d

00404370 <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  404370:	b480      	push	{r7}
  404372:	b083      	sub	sp, #12
  404374:	af00      	add	r7, sp, #0
  404376:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  404378:	687b      	ldr	r3, [r7, #4]
  40437a:	4a09      	ldr	r2, [pc, #36]	; (4043a0 <afec_find_inst_num+0x30>)
  40437c:	4293      	cmp	r3, r2
  40437e:	d101      	bne.n	404384 <afec_find_inst_num+0x14>
		return 1;
  404380:	2301      	movs	r3, #1
  404382:	e006      	b.n	404392 <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  404384:	687b      	ldr	r3, [r7, #4]
  404386:	4a07      	ldr	r2, [pc, #28]	; (4043a4 <afec_find_inst_num+0x34>)
  404388:	4293      	cmp	r3, r2
  40438a:	d101      	bne.n	404390 <afec_find_inst_num+0x20>
		return 0;
  40438c:	2300      	movs	r3, #0
  40438e:	e000      	b.n	404392 <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  404390:	2300      	movs	r3, #0
}
  404392:	4618      	mov	r0, r3
  404394:	370c      	adds	r7, #12
  404396:	46bd      	mov	sp, r7
  404398:	f85d 7b04 	ldr.w	r7, [sp], #4
  40439c:	4770      	bx	lr
  40439e:	bf00      	nop
  4043a0:	40064000 	.word	0x40064000
  4043a4:	4003c000 	.word	0x4003c000

004043a8 <afec_find_pid>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
  4043a8:	b480      	push	{r7}
  4043aa:	b083      	sub	sp, #12
  4043ac:	af00      	add	r7, sp, #0
  4043ae:	6078      	str	r0, [r7, #4]
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  4043b0:	687b      	ldr	r3, [r7, #4]
  4043b2:	4a09      	ldr	r2, [pc, #36]	; (4043d8 <afec_find_pid+0x30>)
  4043b4:	4293      	cmp	r3, r2
  4043b6:	d101      	bne.n	4043bc <afec_find_pid+0x14>
		return ID_AFEC1;
  4043b8:	2328      	movs	r3, #40	; 0x28
  4043ba:	e006      	b.n	4043ca <afec_find_pid+0x22>
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
  4043bc:	687b      	ldr	r3, [r7, #4]
  4043be:	4a07      	ldr	r2, [pc, #28]	; (4043dc <afec_find_pid+0x34>)
  4043c0:	4293      	cmp	r3, r2
  4043c2:	d101      	bne.n	4043c8 <afec_find_pid+0x20>
		return ID_AFEC0;
  4043c4:	231d      	movs	r3, #29
  4043c6:	e000      	b.n	4043ca <afec_find_pid+0x22>
	}
#endif
	return ID_AFEC0;
  4043c8:	231d      	movs	r3, #29
}
  4043ca:	4618      	mov	r0, r3
  4043cc:	370c      	adds	r7, #12
  4043ce:	46bd      	mov	sp, r7
  4043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043d4:	4770      	bx	lr
  4043d6:	bf00      	nop
  4043d8:	40064000 	.word	0x40064000
  4043dc:	4003c000 	.word	0x4003c000

004043e0 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  4043e0:	b480      	push	{r7}
  4043e2:	b085      	sub	sp, #20
  4043e4:	af00      	add	r7, sp, #0
  4043e6:	6078      	str	r0, [r7, #4]
  4043e8:	6039      	str	r1, [r7, #0]
	uint32_t reg = 0;
  4043ea:	2300      	movs	r3, #0
  4043ec:	60fb      	str	r3, [r7, #12]

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4043ee:	683b      	ldr	r3, [r7, #0]
  4043f0:	7cdb      	ldrb	r3, [r3, #19]
  4043f2:	2b00      	cmp	r3, #0
  4043f4:	d002      	beq.n	4043fc <afec_set_config+0x1c>
  4043f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4043fa:	e000      	b.n	4043fe <afec_set_config+0x1e>
  4043fc:	2200      	movs	r2, #0
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4043fe:	683b      	ldr	r3, [r7, #0]
  404400:	6859      	ldr	r1, [r3, #4]
  404402:	683b      	ldr	r3, [r7, #0]
  404404:	689b      	ldr	r3, [r3, #8]
  404406:	fbb1 f3f3 	udiv	r3, r1, r3
  40440a:	3b01      	subs	r3, #1
  40440c:	021b      	lsls	r3, r3, #8
  40440e:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  404410:	431a      	orrs	r2, r3
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  404412:	683b      	ldr	r3, [r7, #0]
  404414:	7c1b      	ldrb	r3, [r3, #16]
  404416:	061b      	lsls	r3, r3, #24
  404418:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
			AFEC_MR_ONE |
  40441c:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
  40441e:	683b      	ldr	r3, [r7, #0]
  404420:	7c5b      	ldrb	r3, [r3, #17]
  404422:	071b      	lsls	r3, r3, #28
  404424:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
			AFEC_MR_TRACKTIM(config->tracktim) |
  404428:	431a      	orrs	r2, r3
			(config->startup_time);
  40442a:	683b      	ldr	r3, [r7, #0]
  40442c:	68db      	ldr	r3, [r3, #12]
			AFEC_MR_TRANSFER(config->transfer) |
  40442e:	4313      	orrs	r3, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  404430:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  404434:	60fb      	str	r3, [r7, #12]

	afec->AFEC_MR = reg;
  404436:	687b      	ldr	r3, [r7, #4]
  404438:	68fa      	ldr	r2, [r7, #12]
  40443a:	605a      	str	r2, [r3, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40443c:	683b      	ldr	r3, [r7, #0]
  40443e:	7d1b      	ldrb	r3, [r3, #20]
  404440:	2b00      	cmp	r3, #0
  404442:	d002      	beq.n	40444a <afec_set_config+0x6a>
  404444:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  404448:	e000      	b.n	40444c <afec_set_config+0x6c>
  40444a:	2200      	movs	r2, #0
			(config->resolution) |
  40444c:	683b      	ldr	r3, [r7, #0]
  40444e:	681b      	ldr	r3, [r3, #0]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  404450:	431a      	orrs	r2, r3
			(config->stm ? AFEC_EMR_STM : 0);
  404452:	683b      	ldr	r3, [r7, #0]
  404454:	7d5b      	ldrb	r3, [r3, #21]
  404456:	2b00      	cmp	r3, #0
  404458:	d002      	beq.n	404460 <afec_set_config+0x80>
  40445a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  40445e:	e000      	b.n	404462 <afec_set_config+0x82>
  404460:	2300      	movs	r3, #0
			(config->resolution) |
  404462:	431a      	orrs	r2, r3
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  404464:	687b      	ldr	r3, [r7, #4]
  404466:	609a      	str	r2, [r3, #8]
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  404468:	683b      	ldr	r3, [r7, #0]
  40446a:	7d9b      	ldrb	r3, [r3, #22]
  40446c:	021b      	lsls	r3, r3, #8
  40446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  404472:	f043 020c 	orr.w	r2, r3, #12
  404476:	687b      	ldr	r3, [r7, #4]
  404478:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  40447c:	bf00      	nop
  40447e:	3714      	adds	r7, #20
  404480:	46bd      	mov	sp, r7
  404482:	f85d 7b04 	ldr.w	r7, [sp], #4
  404486:	4770      	bx	lr

00404488 <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  404488:	b580      	push	{r7, lr}
  40448a:	b086      	sub	sp, #24
  40448c:	af00      	add	r7, sp, #0
  40448e:	60f8      	str	r0, [r7, #12]
  404490:	460b      	mov	r3, r1
  404492:	607a      	str	r2, [r7, #4]
  404494:	817b      	strh	r3, [r7, #10]
	afec_ch_sanity_check(afec, channel);
  404496:	897b      	ldrh	r3, [r7, #10]
  404498:	4619      	mov	r1, r3
  40449a:	68f8      	ldr	r0, [r7, #12]
  40449c:	4b1e      	ldr	r3, [pc, #120]	; (404518 <afec_ch_set_config+0x90>)
  40449e:	4798      	blx	r3
	uint32_t reg = 0;
  4044a0:	2300      	movs	r3, #0
  4044a2:	617b      	str	r3, [r7, #20]

	reg = afec->AFEC_DIFFR;
  4044a4:	68fb      	ldr	r3, [r7, #12]
  4044a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  4044a8:	617b      	str	r3, [r7, #20]
	reg &= ~(0x1u << channel);
  4044aa:	897b      	ldrh	r3, [r7, #10]
  4044ac:	2201      	movs	r2, #1
  4044ae:	fa02 f303 	lsl.w	r3, r2, r3
  4044b2:	43db      	mvns	r3, r3
  4044b4:	697a      	ldr	r2, [r7, #20]
  4044b6:	4013      	ands	r3, r2
  4044b8:	617b      	str	r3, [r7, #20]
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4044ba:	687b      	ldr	r3, [r7, #4]
  4044bc:	781b      	ldrb	r3, [r3, #0]
  4044be:	2b00      	cmp	r3, #0
  4044c0:	d004      	beq.n	4044cc <afec_ch_set_config+0x44>
  4044c2:	897b      	ldrh	r3, [r7, #10]
  4044c4:	2201      	movs	r2, #1
  4044c6:	fa02 f303 	lsl.w	r3, r2, r3
  4044ca:	e000      	b.n	4044ce <afec_ch_set_config+0x46>
  4044cc:	2300      	movs	r3, #0
  4044ce:	697a      	ldr	r2, [r7, #20]
  4044d0:	4313      	orrs	r3, r2
  4044d2:	617b      	str	r3, [r7, #20]
	afec->AFEC_DIFFR = reg;
  4044d4:	68fb      	ldr	r3, [r7, #12]
  4044d6:	697a      	ldr	r2, [r7, #20]
  4044d8:	661a      	str	r2, [r3, #96]	; 0x60

	reg = afec->AFEC_CGR;
  4044da:	68fb      	ldr	r3, [r7, #12]
  4044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  4044de:	617b      	str	r3, [r7, #20]
	reg &= ~(0x03u << (2 * channel));
  4044e0:	897b      	ldrh	r3, [r7, #10]
  4044e2:	005b      	lsls	r3, r3, #1
  4044e4:	2203      	movs	r2, #3
  4044e6:	fa02 f303 	lsl.w	r3, r2, r3
  4044ea:	43db      	mvns	r3, r3
  4044ec:	697a      	ldr	r2, [r7, #20]
  4044ee:	4013      	ands	r3, r2
  4044f0:	617b      	str	r3, [r7, #20]
	reg |= (config->gain) << (2 * channel);
  4044f2:	687b      	ldr	r3, [r7, #4]
  4044f4:	785b      	ldrb	r3, [r3, #1]
  4044f6:	461a      	mov	r2, r3
  4044f8:	897b      	ldrh	r3, [r7, #10]
  4044fa:	005b      	lsls	r3, r3, #1
  4044fc:	fa02 f303 	lsl.w	r3, r2, r3
  404500:	461a      	mov	r2, r3
  404502:	697b      	ldr	r3, [r7, #20]
  404504:	4313      	orrs	r3, r2
  404506:	617b      	str	r3, [r7, #20]
	afec->AFEC_CGR = reg;
  404508:	68fb      	ldr	r3, [r7, #12]
  40450a:	697a      	ldr	r2, [r7, #20]
  40450c:	655a      	str	r2, [r3, #84]	; 0x54
}
  40450e:	bf00      	nop
  404510:	3718      	adds	r7, #24
  404512:	46bd      	mov	sp, r7
  404514:	bd80      	pop	{r7, pc}
  404516:	bf00      	nop
  404518:	0040423d 	.word	0x0040423d

0040451c <afec_temp_sensor_set_config>:
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC temperature sensor
 */
void afec_temp_sensor_set_config(Afec *const afec,
		struct afec_temp_sensor_config *config)
{
  40451c:	b480      	push	{r7}
  40451e:	b085      	sub	sp, #20
  404520:	af00      	add	r7, sp, #0
  404522:	6078      	str	r0, [r7, #4]
  404524:	6039      	str	r1, [r7, #0]
	Assert(afec == AFEC0);

	uint32_t reg = 0;
  404526:	2300      	movs	r3, #0
  404528:	60fb      	str	r3, [r7, #12]

	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  40452a:	683b      	ldr	r3, [r7, #0]
  40452c:	781b      	ldrb	r3, [r3, #0]
  40452e:	2b00      	cmp	r3, #0
  404530:	d001      	beq.n	404536 <afec_temp_sensor_set_config+0x1a>
  404532:	2301      	movs	r3, #1
  404534:	e000      	b.n	404538 <afec_temp_sensor_set_config+0x1c>
  404536:	2300      	movs	r3, #0
  404538:	683a      	ldr	r2, [r7, #0]
  40453a:	7852      	ldrb	r2, [r2, #1]
  40453c:	4313      	orrs	r3, r2
  40453e:	60fb      	str	r3, [r7, #12]
	afec->AFEC_TEMPMR = reg;
  404540:	687b      	ldr	r3, [r7, #4]
  404542:	68fa      	ldr	r2, [r7, #12]
  404544:	671a      	str	r2, [r3, #112]	; 0x70

	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  404546:	683b      	ldr	r3, [r7, #0]
  404548:	885b      	ldrh	r3, [r3, #2]
  40454a:	461a      	mov	r2, r3
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  40454c:	683b      	ldr	r3, [r7, #0]
  40454e:	889b      	ldrh	r3, [r3, #4]
  404550:	041b      	lsls	r3, r3, #16
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  404552:	431a      	orrs	r2, r3
  404554:	687b      	ldr	r3, [r7, #4]
  404556:	675a      	str	r2, [r3, #116]	; 0x74
			
}
  404558:	bf00      	nop
  40455a:	3714      	adds	r7, #20
  40455c:	46bd      	mov	sp, r7
  40455e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404562:	4770      	bx	lr

00404564 <afec_get_config_defaults>:
 * - AFE Bias Current Control value is 1
 *
 * \param cfg Pointer to configuration structure to be initiated.
 */
void afec_get_config_defaults(struct afec_config *const cfg)
{
  404564:	b580      	push	{r7, lr}
  404566:	b082      	sub	sp, #8
  404568:	af00      	add	r7, sp, #0
  40456a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  40456c:	687b      	ldr	r3, [r7, #4]
  40456e:	2200      	movs	r2, #0
  404570:	601a      	str	r2, [r3, #0]
	cfg->mck = sysclk_get_cpu_hz();
  404572:	4b12      	ldr	r3, [pc, #72]	; (4045bc <afec_get_config_defaults+0x58>)
  404574:	4798      	blx	r3
  404576:	4602      	mov	r2, r0
  404578:	687b      	ldr	r3, [r7, #4]
  40457a:	605a      	str	r2, [r3, #4]
		cfg->afec_clock = 6000000UL;
  40457c:	687b      	ldr	r3, [r7, #4]
  40457e:	4a10      	ldr	r2, [pc, #64]	; (4045c0 <afec_get_config_defaults+0x5c>)
  404580:	609a      	str	r2, [r3, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  404582:	687b      	ldr	r3, [r7, #4]
  404584:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  404588:	60da      	str	r2, [r3, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  40458a:	687b      	ldr	r3, [r7, #4]
  40458c:	2202      	movs	r2, #2
  40458e:	741a      	strb	r2, [r3, #16]
		cfg->transfer = 1;
  404590:	687b      	ldr	r3, [r7, #4]
  404592:	2201      	movs	r2, #1
  404594:	745a      	strb	r2, [r3, #17]
		cfg->anach = true;
  404596:	687b      	ldr	r3, [r7, #4]
  404598:	2201      	movs	r2, #1
  40459a:	749a      	strb	r2, [r3, #18]
		cfg->useq = false;
  40459c:	687b      	ldr	r3, [r7, #4]
  40459e:	2200      	movs	r2, #0
  4045a0:	74da      	strb	r2, [r3, #19]
		cfg->tag = true;
  4045a2:	687b      	ldr	r3, [r7, #4]
  4045a4:	2201      	movs	r2, #1
  4045a6:	751a      	strb	r2, [r3, #20]
		cfg->stm = true;
  4045a8:	687b      	ldr	r3, [r7, #4]
  4045aa:	2201      	movs	r2, #1
  4045ac:	755a      	strb	r2, [r3, #21]
		cfg->ibctl = 1;
  4045ae:	687b      	ldr	r3, [r7, #4]
  4045b0:	2201      	movs	r2, #1
  4045b2:	759a      	strb	r2, [r3, #22]
}
  4045b4:	bf00      	nop
  4045b6:	3708      	adds	r7, #8
  4045b8:	46bd      	mov	sp, r7
  4045ba:	bd80      	pop	{r7, pc}
  4045bc:	0040435d 	.word	0x0040435d
  4045c0:	005b8d80 	.word	0x005b8d80

004045c4 <afec_ch_get_config_defaults>:
 * - Gain value is 1
 *
 * \param cfg Pointer to channel configuration structure to be initiated.
 */
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
  4045c4:	b480      	push	{r7}
  4045c6:	b083      	sub	sp, #12
  4045c8:	af00      	add	r7, sp, #0
  4045ca:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  4045cc:	687b      	ldr	r3, [r7, #4]
  4045ce:	2200      	movs	r2, #0
  4045d0:	701a      	strb	r2, [r3, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4045d2:	687b      	ldr	r3, [r7, #4]
  4045d4:	2201      	movs	r2, #1
  4045d6:	705a      	strb	r2, [r3, #1]

}
  4045d8:	bf00      	nop
  4045da:	370c      	adds	r7, #12
  4045dc:	46bd      	mov	sp, r7
  4045de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4045e2:	4770      	bx	lr

004045e4 <afec_temp_sensor_get_config_defaults>:
 * \param cfg Pointer to temperature sensor configuration structure
 *        to be initiated.
 */
void afec_temp_sensor_get_config_defaults(
		struct afec_temp_sensor_config *const cfg)
{
  4045e4:	b480      	push	{r7}
  4045e6:	b083      	sub	sp, #12
  4045e8:	af00      	add	r7, sp, #0
  4045ea:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->rctc = false;
  4045ec:	687b      	ldr	r3, [r7, #4]
  4045ee:	2200      	movs	r2, #0
  4045f0:	701a      	strb	r2, [r3, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4045f2:	687b      	ldr	r3, [r7, #4]
  4045f4:	2220      	movs	r2, #32
  4045f6:	705a      	strb	r2, [r3, #1]
	cfg->low_threshold= 0xFF;
  4045f8:	687b      	ldr	r3, [r7, #4]
  4045fa:	22ff      	movs	r2, #255	; 0xff
  4045fc:	805a      	strh	r2, [r3, #2]
	cfg->high_threshold= 0xFFF;
  4045fe:	687b      	ldr	r3, [r7, #4]
  404600:	f640 72ff 	movw	r2, #4095	; 0xfff
  404604:	809a      	strh	r2, [r3, #4]
}
  404606:	bf00      	nop
  404608:	370c      	adds	r7, #12
  40460a:	46bd      	mov	sp, r7
  40460c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404610:	4770      	bx	lr
	...

00404614 <afec_init>:
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  404614:	b580      	push	{r7, lr}
  404616:	b084      	sub	sp, #16
  404618:	af00      	add	r7, sp, #0
  40461a:	6078      	str	r0, [r7, #4]
  40461c:	6039      	str	r1, [r7, #0]
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40461e:	6878      	ldr	r0, [r7, #4]
  404620:	4b1d      	ldr	r3, [pc, #116]	; (404698 <afec_init+0x84>)
  404622:	4798      	blx	r3
  404624:	4603      	mov	r3, r0
  404626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40462a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  40462e:	d101      	bne.n	404634 <afec_init+0x20>
		return STATUS_ERR_BUSY;
  404630:	2319      	movs	r3, #25
  404632:	e02c      	b.n	40468e <afec_init+0x7a>
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  404634:	687b      	ldr	r3, [r7, #4]
  404636:	2201      	movs	r2, #1
  404638:	601a      	str	r2, [r3, #0]
	afec_set_config(afec, config);
  40463a:	6839      	ldr	r1, [r7, #0]
  40463c:	6878      	ldr	r0, [r7, #4]
  40463e:	4b17      	ldr	r3, [pc, #92]	; (40469c <afec_init+0x88>)
  404640:	4798      	blx	r3

	uint32_t i;
	if(afec == AFEC0) {
  404642:	687b      	ldr	r3, [r7, #4]
  404644:	4a16      	ldr	r2, [pc, #88]	; (4046a0 <afec_init+0x8c>)
  404646:	4293      	cmp	r3, r2
  404648:	d10d      	bne.n	404666 <afec_init+0x52>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40464a:	2300      	movs	r3, #0
  40464c:	60fb      	str	r3, [r7, #12]
  40464e:	e007      	b.n	404660 <afec_init+0x4c>
			afec_callback_pointer[0][i] = 0;
  404650:	4a14      	ldr	r2, [pc, #80]	; (4046a4 <afec_init+0x90>)
  404652:	68fb      	ldr	r3, [r7, #12]
  404654:	2100      	movs	r1, #0
  404656:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40465a:	68fb      	ldr	r3, [r7, #12]
  40465c:	3301      	adds	r3, #1
  40465e:	60fb      	str	r3, [r7, #12]
  404660:	68fb      	ldr	r3, [r7, #12]
  404662:	2b0f      	cmp	r3, #15
  404664:	d9f4      	bls.n	404650 <afec_init+0x3c>
		}
	}
	if(afec == AFEC1) {
  404666:	687b      	ldr	r3, [r7, #4]
  404668:	4a0f      	ldr	r2, [pc, #60]	; (4046a8 <afec_init+0x94>)
  40466a:	4293      	cmp	r3, r2
  40466c:	d10e      	bne.n	40468c <afec_init+0x78>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40466e:	2300      	movs	r3, #0
  404670:	60fb      	str	r3, [r7, #12]
  404672:	e008      	b.n	404686 <afec_init+0x72>
			afec_callback_pointer[1][i] = 0;
  404674:	4a0b      	ldr	r2, [pc, #44]	; (4046a4 <afec_init+0x90>)
  404676:	68fb      	ldr	r3, [r7, #12]
  404678:	3310      	adds	r3, #16
  40467a:	2100      	movs	r1, #0
  40467c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  404680:	68fb      	ldr	r3, [r7, #12]
  404682:	3301      	adds	r3, #1
  404684:	60fb      	str	r3, [r7, #12]
  404686:	68fb      	ldr	r3, [r7, #12]
  404688:	2b0f      	cmp	r3, #15
  40468a:	d9f3      	bls.n	404674 <afec_init+0x60>
		}
	}

	return STATUS_OK;
  40468c:	2300      	movs	r3, #0
}
  40468e:	4618      	mov	r0, r3
  404690:	3710      	adds	r7, #16
  404692:	46bd      	mov	sp, r7
  404694:	bd80      	pop	{r7, pc}
  404696:	bf00      	nop
  404698:	00404255 	.word	0x00404255
  40469c:	004043e1 	.word	0x004043e1
  4046a0:	4003c000 	.word	0x4003c000
  4046a4:	2040af50 	.word	0x2040af50
  4046a8:	40064000 	.word	0x40064000

004046ac <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  4046ac:	b580      	push	{r7, lr}
  4046ae:	b086      	sub	sp, #24
  4046b0:	af00      	add	r7, sp, #0
  4046b2:	60f8      	str	r0, [r7, #12]
  4046b4:	60b9      	str	r1, [r7, #8]
  4046b6:	607a      	str	r2, [r7, #4]
  4046b8:	70fb      	strb	r3, [r7, #3]
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
  4046ba:	68f8      	ldr	r0, [r7, #12]
  4046bc:	4b17      	ldr	r3, [pc, #92]	; (40471c <afec_set_callback+0x70>)
  4046be:	4798      	blx	r3
  4046c0:	6178      	str	r0, [r7, #20]
	afec_callback_pointer[i][source] = callback;
  4046c2:	4917      	ldr	r1, [pc, #92]	; (404720 <afec_set_callback+0x74>)
  4046c4:	697b      	ldr	r3, [r7, #20]
  4046c6:	011a      	lsls	r2, r3, #4
  4046c8:	68bb      	ldr	r3, [r7, #8]
  4046ca:	4413      	add	r3, r2
  4046cc:	687a      	ldr	r2, [r7, #4]
  4046ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!i) {
  4046d2:	697b      	ldr	r3, [r7, #20]
  4046d4:	2b00      	cmp	r3, #0
  4046d6:	d10b      	bne.n	4046f0 <afec_set_callback+0x44>
		irq_register_handler(AFEC0_IRQn, irq_level);
  4046d8:	201d      	movs	r0, #29
  4046da:	4b12      	ldr	r3, [pc, #72]	; (404724 <afec_set_callback+0x78>)
  4046dc:	4798      	blx	r3
  4046de:	78fb      	ldrb	r3, [r7, #3]
  4046e0:	4619      	mov	r1, r3
  4046e2:	201d      	movs	r0, #29
  4046e4:	4b10      	ldr	r3, [pc, #64]	; (404728 <afec_set_callback+0x7c>)
  4046e6:	4798      	blx	r3
  4046e8:	201d      	movs	r0, #29
  4046ea:	4b10      	ldr	r3, [pc, #64]	; (40472c <afec_set_callback+0x80>)
  4046ec:	4798      	blx	r3
  4046ee:	e00d      	b.n	40470c <afec_set_callback+0x60>
	} else if (i == 1) {
  4046f0:	697b      	ldr	r3, [r7, #20]
  4046f2:	2b01      	cmp	r3, #1
  4046f4:	d10a      	bne.n	40470c <afec_set_callback+0x60>
		irq_register_handler(AFEC1_IRQn, irq_level);
  4046f6:	2028      	movs	r0, #40	; 0x28
  4046f8:	4b0a      	ldr	r3, [pc, #40]	; (404724 <afec_set_callback+0x78>)
  4046fa:	4798      	blx	r3
  4046fc:	78fb      	ldrb	r3, [r7, #3]
  4046fe:	4619      	mov	r1, r3
  404700:	2028      	movs	r0, #40	; 0x28
  404702:	4b09      	ldr	r3, [pc, #36]	; (404728 <afec_set_callback+0x7c>)
  404704:	4798      	blx	r3
  404706:	2028      	movs	r0, #40	; 0x28
  404708:	4b08      	ldr	r3, [pc, #32]	; (40472c <afec_set_callback+0x80>)
  40470a:	4798      	blx	r3
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  40470c:	68b9      	ldr	r1, [r7, #8]
  40470e:	68f8      	ldr	r0, [r7, #12]
  404710:	4b07      	ldr	r3, [pc, #28]	; (404730 <afec_set_callback+0x84>)
  404712:	4798      	blx	r3
}
  404714:	bf00      	nop
  404716:	3718      	adds	r7, #24
  404718:	46bd      	mov	sp, r7
  40471a:	bd80      	pop	{r7, pc}
  40471c:	00404371 	.word	0x00404371
  404720:	2040af50 	.word	0x2040af50
  404724:	0040412d 	.word	0x0040412d
  404728:	00404161 	.word	0x00404161
  40472c:	004040f9 	.word	0x004040f9
  404730:	00404735 	.word	0x00404735

00404734 <afec_enable_interrupt>:
 * \param afec  Base address of the AFEC.
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
  404734:	b480      	push	{r7}
  404736:	b083      	sub	sp, #12
  404738:	af00      	add	r7, sp, #0
  40473a:	6078      	str	r0, [r7, #4]
  40473c:	6039      	str	r1, [r7, #0]
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  40473e:	683b      	ldr	r3, [r7, #0]
  404740:	4a19      	ldr	r2, [pc, #100]	; (4047a8 <afec_enable_interrupt+0x74>)
  404742:	4293      	cmp	r3, r2
  404744:	d103      	bne.n	40474e <afec_enable_interrupt+0x1a>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  404746:	687b      	ldr	r3, [r7, #4]
  404748:	4a17      	ldr	r2, [pc, #92]	; (4047a8 <afec_enable_interrupt+0x74>)
  40474a:	625a      	str	r2, [r3, #36]	; 0x24
		return;
  40474c:	e026      	b.n	40479c <afec_enable_interrupt+0x68>
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  40474e:	683b      	ldr	r3, [r7, #0]
  404750:	2b0b      	cmp	r3, #11
  404752:	d80f      	bhi.n	404774 <afec_enable_interrupt+0x40>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  404754:	683b      	ldr	r3, [r7, #0]
  404756:	2b0b      	cmp	r3, #11
  404758:	d104      	bne.n	404764 <afec_enable_interrupt+0x30>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  40475a:	687b      	ldr	r3, [r7, #4]
  40475c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404760:	625a      	str	r2, [r3, #36]	; 0x24
  404762:	e01b      	b.n	40479c <afec_enable_interrupt+0x68>
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  404764:	2201      	movs	r2, #1
  404766:	683b      	ldr	r3, [r7, #0]
  404768:	fa02 f303 	lsl.w	r3, r2, r3
  40476c:	461a      	mov	r2, r3
  40476e:	687b      	ldr	r3, [r7, #4]
  404770:	625a      	str	r2, [r3, #36]	; 0x24
  404772:	e013      	b.n	40479c <afec_enable_interrupt+0x68>
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  404774:	683b      	ldr	r3, [r7, #0]
  404776:	2b0e      	cmp	r3, #14
  404778:	d808      	bhi.n	40478c <afec_enable_interrupt+0x58>
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  40477a:	683b      	ldr	r3, [r7, #0]
  40477c:	330c      	adds	r3, #12
  40477e:	2201      	movs	r2, #1
  404780:	fa02 f303 	lsl.w	r3, r2, r3
  404784:	461a      	mov	r2, r3
  404786:	687b      	ldr	r3, [r7, #4]
  404788:	625a      	str	r2, [r3, #36]	; 0x24
  40478a:	e007      	b.n	40479c <afec_enable_interrupt+0x68>
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
				+ AFEC_INTERRUPT_GAP2);
  40478c:	683b      	ldr	r3, [r7, #0]
  40478e:	330f      	adds	r3, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  404790:	2201      	movs	r2, #1
  404792:	fa02 f303 	lsl.w	r3, r2, r3
  404796:	461a      	mov	r2, r3
  404798:	687b      	ldr	r3, [r7, #4]
  40479a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
  40479c:	370c      	adds	r7, #12
  40479e:	46bd      	mov	sp, r7
  4047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4047a4:	4770      	bx	lr
  4047a6:	bf00      	nop
  4047a8:	47000fff 	.word	0x47000fff

004047ac <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  4047ac:	b580      	push	{r7, lr}
  4047ae:	b082      	sub	sp, #8
  4047b0:	af00      	add	r7, sp, #0
  4047b2:	4603      	mov	r3, r0
  4047b4:	6039      	str	r1, [r7, #0]
  4047b6:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  4047b8:	79fb      	ldrb	r3, [r7, #7]
  4047ba:	490a      	ldr	r1, [pc, #40]	; (4047e4 <afec_interrupt+0x38>)
  4047bc:	011a      	lsls	r2, r3, #4
  4047be:	683b      	ldr	r3, [r7, #0]
  4047c0:	4413      	add	r3, r2
  4047c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4047c6:	2b00      	cmp	r3, #0
  4047c8:	d007      	beq.n	4047da <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  4047ca:	79fb      	ldrb	r3, [r7, #7]
  4047cc:	4905      	ldr	r1, [pc, #20]	; (4047e4 <afec_interrupt+0x38>)
  4047ce:	011a      	lsls	r2, r3, #4
  4047d0:	683b      	ldr	r3, [r7, #0]
  4047d2:	4413      	add	r3, r2
  4047d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  4047d8:	4798      	blx	r3
	}
}
  4047da:	bf00      	nop
  4047dc:	3708      	adds	r7, #8
  4047de:	46bd      	mov	sp, r7
  4047e0:	bd80      	pop	{r7, pc}
  4047e2:	bf00      	nop
  4047e4:	2040af50 	.word	0x2040af50

004047e8 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4047e8:	b590      	push	{r4, r7, lr}
  4047ea:	b087      	sub	sp, #28
  4047ec:	af00      	add	r7, sp, #0
  4047ee:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4047f0:	6878      	ldr	r0, [r7, #4]
  4047f2:	4b28      	ldr	r3, [pc, #160]	; (404894 <afec_process_callback+0xac>)
  4047f4:	4798      	blx	r3
  4047f6:	4604      	mov	r4, r0
  4047f8:	6878      	ldr	r0, [r7, #4]
  4047fa:	4b27      	ldr	r3, [pc, #156]	; (404898 <afec_process_callback+0xb0>)
  4047fc:	4798      	blx	r3
  4047fe:	4603      	mov	r3, r0
  404800:	4023      	ands	r3, r4
  404802:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  404804:	6878      	ldr	r0, [r7, #4]
  404806:	4b25      	ldr	r3, [pc, #148]	; (40489c <afec_process_callback+0xb4>)
  404808:	4798      	blx	r3
  40480a:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40480c:	2300      	movs	r3, #0
  40480e:	617b      	str	r3, [r7, #20]
  404810:	e039      	b.n	404886 <afec_process_callback+0x9e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  404812:	697b      	ldr	r3, [r7, #20]
  404814:	2b0b      	cmp	r3, #11
  404816:	d80f      	bhi.n	404838 <afec_process_callback+0x50>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  404818:	2201      	movs	r2, #1
  40481a:	697b      	ldr	r3, [r7, #20]
  40481c:	fa02 f303 	lsl.w	r3, r2, r3
  404820:	461a      	mov	r2, r3
  404822:	68fb      	ldr	r3, [r7, #12]
  404824:	4013      	ands	r3, r2
  404826:	2b00      	cmp	r3, #0
  404828:	d02a      	beq.n	404880 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40482a:	693b      	ldr	r3, [r7, #16]
  40482c:	b2db      	uxtb	r3, r3
  40482e:	6979      	ldr	r1, [r7, #20]
  404830:	4618      	mov	r0, r3
  404832:	4b1b      	ldr	r3, [pc, #108]	; (4048a0 <afec_process_callback+0xb8>)
  404834:	4798      	blx	r3
  404836:	e023      	b.n	404880 <afec_process_callback+0x98>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  404838:	697b      	ldr	r3, [r7, #20]
  40483a:	2b0e      	cmp	r3, #14
  40483c:	d810      	bhi.n	404860 <afec_process_callback+0x78>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40483e:	697b      	ldr	r3, [r7, #20]
  404840:	330c      	adds	r3, #12
  404842:	2201      	movs	r2, #1
  404844:	fa02 f303 	lsl.w	r3, r2, r3
  404848:	461a      	mov	r2, r3
  40484a:	68fb      	ldr	r3, [r7, #12]
  40484c:	4013      	ands	r3, r2
  40484e:	2b00      	cmp	r3, #0
  404850:	d016      	beq.n	404880 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  404852:	693b      	ldr	r3, [r7, #16]
  404854:	b2db      	uxtb	r3, r3
  404856:	6979      	ldr	r1, [r7, #20]
  404858:	4618      	mov	r0, r3
  40485a:	4b11      	ldr	r3, [pc, #68]	; (4048a0 <afec_process_callback+0xb8>)
  40485c:	4798      	blx	r3
  40485e:	e00f      	b.n	404880 <afec_process_callback+0x98>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  404860:	697b      	ldr	r3, [r7, #20]
  404862:	330f      	adds	r3, #15
  404864:	2201      	movs	r2, #1
  404866:	fa02 f303 	lsl.w	r3, r2, r3
  40486a:	461a      	mov	r2, r3
  40486c:	68fb      	ldr	r3, [r7, #12]
  40486e:	4013      	ands	r3, r2
  404870:	2b00      	cmp	r3, #0
  404872:	d005      	beq.n	404880 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  404874:	693b      	ldr	r3, [r7, #16]
  404876:	b2db      	uxtb	r3, r3
  404878:	6979      	ldr	r1, [r7, #20]
  40487a:	4618      	mov	r0, r3
  40487c:	4b08      	ldr	r3, [pc, #32]	; (4048a0 <afec_process_callback+0xb8>)
  40487e:	4798      	blx	r3
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  404880:	697b      	ldr	r3, [r7, #20]
  404882:	3301      	adds	r3, #1
  404884:	617b      	str	r3, [r7, #20]
  404886:	697b      	ldr	r3, [r7, #20]
  404888:	2b0f      	cmp	r3, #15
  40488a:	d9c2      	bls.n	404812 <afec_process_callback+0x2a>
			}
		}
	}
}
  40488c:	bf00      	nop
  40488e:	371c      	adds	r7, #28
  404890:	46bd      	mov	sp, r7
  404892:	bd90      	pop	{r4, r7, pc}
  404894:	00404255 	.word	0x00404255
  404898:	0040426d 	.word	0x0040426d
  40489c:	00404371 	.word	0x00404371
  4048a0:	004047ad 	.word	0x004047ad

004048a4 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4048a4:	b580      	push	{r7, lr}
  4048a6:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  4048a8:	4802      	ldr	r0, [pc, #8]	; (4048b4 <AFEC0_Handler+0x10>)
  4048aa:	4b03      	ldr	r3, [pc, #12]	; (4048b8 <AFEC0_Handler+0x14>)
  4048ac:	4798      	blx	r3
}
  4048ae:	bf00      	nop
  4048b0:	bd80      	pop	{r7, pc}
  4048b2:	bf00      	nop
  4048b4:	4003c000 	.word	0x4003c000
  4048b8:	004047e9 	.word	0x004047e9

004048bc <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4048bc:	b580      	push	{r7, lr}
  4048be:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  4048c0:	4802      	ldr	r0, [pc, #8]	; (4048cc <AFEC1_Handler+0x10>)
  4048c2:	4b03      	ldr	r3, [pc, #12]	; (4048d0 <AFEC1_Handler+0x14>)
  4048c4:	4798      	blx	r3
}
  4048c6:	bf00      	nop
  4048c8:	bd80      	pop	{r7, pc}
  4048ca:	bf00      	nop
  4048cc:	40064000 	.word	0x40064000
  4048d0:	004047e9 	.word	0x004047e9

004048d4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4048d4:	b580      	push	{r7, lr}
  4048d6:	b084      	sub	sp, #16
  4048d8:	af00      	add	r7, sp, #0
  4048da:	6078      	str	r0, [r7, #4]
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  4048dc:	6878      	ldr	r0, [r7, #4]
  4048de:	4b06      	ldr	r3, [pc, #24]	; (4048f8 <afec_enable+0x24>)
  4048e0:	4798      	blx	r3
  4048e2:	60f8      	str	r0, [r7, #12]
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4048e4:	68f8      	ldr	r0, [r7, #12]
  4048e6:	4b05      	ldr	r3, [pc, #20]	; (4048fc <afec_enable+0x28>)
  4048e8:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
  4048ea:	2002      	movs	r0, #2
  4048ec:	4b04      	ldr	r3, [pc, #16]	; (404900 <afec_enable+0x2c>)
  4048ee:	4798      	blx	r3
}
  4048f0:	bf00      	nop
  4048f2:	3710      	adds	r7, #16
  4048f4:	46bd      	mov	sp, r7
  4048f6:	bd80      	pop	{r7, pc}
  4048f8:	004043a9 	.word	0x004043a9
  4048fc:	00404d25 	.word	0x00404d25
  404900:	00404285 	.word	0x00404285

00404904 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  404904:	b480      	push	{r7}
  404906:	b083      	sub	sp, #12
  404908:	af00      	add	r7, sp, #0
  40490a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40490c:	687b      	ldr	r3, [r7, #4]
  40490e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  404910:	4618      	mov	r0, r3
  404912:	370c      	adds	r7, #12
  404914:	46bd      	mov	sp, r7
  404916:	f85d 7b04 	ldr.w	r7, [sp], #4
  40491a:	4770      	bx	lr

0040491c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40491c:	b480      	push	{r7}
  40491e:	b083      	sub	sp, #12
  404920:	af00      	add	r7, sp, #0
  404922:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  404924:	687b      	ldr	r3, [r7, #4]
  404926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  404928:	4618      	mov	r0, r3
  40492a:	370c      	adds	r7, #12
  40492c:	46bd      	mov	sp, r7
  40492e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404932:	4770      	bx	lr

00404934 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404934:	b580      	push	{r7, lr}
  404936:	b084      	sub	sp, #16
  404938:	af00      	add	r7, sp, #0
  40493a:	6078      	str	r0, [r7, #4]
  40493c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40493e:	6878      	ldr	r0, [r7, #4]
  404940:	4b26      	ldr	r3, [pc, #152]	; (4049dc <pio_handler_process+0xa8>)
  404942:	4798      	blx	r3
  404944:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  404946:	6878      	ldr	r0, [r7, #4]
  404948:	4b25      	ldr	r3, [pc, #148]	; (4049e0 <pio_handler_process+0xac>)
  40494a:	4798      	blx	r3
  40494c:	4602      	mov	r2, r0
  40494e:	68fb      	ldr	r3, [r7, #12]
  404950:	4013      	ands	r3, r2
  404952:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  404954:	68fb      	ldr	r3, [r7, #12]
  404956:	2b00      	cmp	r3, #0
  404958:	d03c      	beq.n	4049d4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40495a:	2300      	movs	r3, #0
  40495c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40495e:	e034      	b.n	4049ca <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  404960:	4a20      	ldr	r2, [pc, #128]	; (4049e4 <pio_handler_process+0xb0>)
  404962:	68bb      	ldr	r3, [r7, #8]
  404964:	011b      	lsls	r3, r3, #4
  404966:	4413      	add	r3, r2
  404968:	681a      	ldr	r2, [r3, #0]
  40496a:	683b      	ldr	r3, [r7, #0]
  40496c:	429a      	cmp	r2, r3
  40496e:	d126      	bne.n	4049be <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404970:	4a1c      	ldr	r2, [pc, #112]	; (4049e4 <pio_handler_process+0xb0>)
  404972:	68bb      	ldr	r3, [r7, #8]
  404974:	011b      	lsls	r3, r3, #4
  404976:	4413      	add	r3, r2
  404978:	3304      	adds	r3, #4
  40497a:	681a      	ldr	r2, [r3, #0]
  40497c:	68fb      	ldr	r3, [r7, #12]
  40497e:	4013      	ands	r3, r2
  404980:	2b00      	cmp	r3, #0
  404982:	d01c      	beq.n	4049be <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  404984:	4a17      	ldr	r2, [pc, #92]	; (4049e4 <pio_handler_process+0xb0>)
  404986:	68bb      	ldr	r3, [r7, #8]
  404988:	011b      	lsls	r3, r3, #4
  40498a:	4413      	add	r3, r2
  40498c:	330c      	adds	r3, #12
  40498e:	681b      	ldr	r3, [r3, #0]
  404990:	4914      	ldr	r1, [pc, #80]	; (4049e4 <pio_handler_process+0xb0>)
  404992:	68ba      	ldr	r2, [r7, #8]
  404994:	0112      	lsls	r2, r2, #4
  404996:	440a      	add	r2, r1
  404998:	6810      	ldr	r0, [r2, #0]
  40499a:	4912      	ldr	r1, [pc, #72]	; (4049e4 <pio_handler_process+0xb0>)
  40499c:	68ba      	ldr	r2, [r7, #8]
  40499e:	0112      	lsls	r2, r2, #4
  4049a0:	440a      	add	r2, r1
  4049a2:	3204      	adds	r2, #4
  4049a4:	6812      	ldr	r2, [r2, #0]
  4049a6:	4611      	mov	r1, r2
  4049a8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4049aa:	4a0e      	ldr	r2, [pc, #56]	; (4049e4 <pio_handler_process+0xb0>)
  4049ac:	68bb      	ldr	r3, [r7, #8]
  4049ae:	011b      	lsls	r3, r3, #4
  4049b0:	4413      	add	r3, r2
  4049b2:	3304      	adds	r3, #4
  4049b4:	681b      	ldr	r3, [r3, #0]
  4049b6:	43db      	mvns	r3, r3
  4049b8:	68fa      	ldr	r2, [r7, #12]
  4049ba:	4013      	ands	r3, r2
  4049bc:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4049be:	68bb      	ldr	r3, [r7, #8]
  4049c0:	3301      	adds	r3, #1
  4049c2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4049c4:	68bb      	ldr	r3, [r7, #8]
  4049c6:	2b06      	cmp	r3, #6
  4049c8:	d803      	bhi.n	4049d2 <pio_handler_process+0x9e>
		while (status != 0) {
  4049ca:	68fb      	ldr	r3, [r7, #12]
  4049cc:	2b00      	cmp	r3, #0
  4049ce:	d1c7      	bne.n	404960 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4049d0:	e000      	b.n	4049d4 <pio_handler_process+0xa0>
				break;
  4049d2:	bf00      	nop
}
  4049d4:	bf00      	nop
  4049d6:	3710      	adds	r7, #16
  4049d8:	46bd      	mov	sp, r7
  4049da:	bd80      	pop	{r7, pc}
  4049dc:	00404905 	.word	0x00404905
  4049e0:	0040491d 	.word	0x0040491d
  4049e4:	2040ae7c 	.word	0x2040ae7c

004049e8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4049e8:	b580      	push	{r7, lr}
  4049ea:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4049ec:	210a      	movs	r1, #10
  4049ee:	4802      	ldr	r0, [pc, #8]	; (4049f8 <PIOA_Handler+0x10>)
  4049f0:	4b02      	ldr	r3, [pc, #8]	; (4049fc <PIOA_Handler+0x14>)
  4049f2:	4798      	blx	r3
}
  4049f4:	bf00      	nop
  4049f6:	bd80      	pop	{r7, pc}
  4049f8:	400e0e00 	.word	0x400e0e00
  4049fc:	00404935 	.word	0x00404935

00404a00 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  404a00:	b580      	push	{r7, lr}
  404a02:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  404a04:	210b      	movs	r1, #11
  404a06:	4802      	ldr	r0, [pc, #8]	; (404a10 <PIOB_Handler+0x10>)
  404a08:	4b02      	ldr	r3, [pc, #8]	; (404a14 <PIOB_Handler+0x14>)
  404a0a:	4798      	blx	r3
}
  404a0c:	bf00      	nop
  404a0e:	bd80      	pop	{r7, pc}
  404a10:	400e1000 	.word	0x400e1000
  404a14:	00404935 	.word	0x00404935

00404a18 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  404a18:	b580      	push	{r7, lr}
  404a1a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  404a1c:	210c      	movs	r1, #12
  404a1e:	4802      	ldr	r0, [pc, #8]	; (404a28 <PIOC_Handler+0x10>)
  404a20:	4b02      	ldr	r3, [pc, #8]	; (404a2c <PIOC_Handler+0x14>)
  404a22:	4798      	blx	r3
}
  404a24:	bf00      	nop
  404a26:	bd80      	pop	{r7, pc}
  404a28:	400e1200 	.word	0x400e1200
  404a2c:	00404935 	.word	0x00404935

00404a30 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  404a30:	b580      	push	{r7, lr}
  404a32:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  404a34:	2110      	movs	r1, #16
  404a36:	4802      	ldr	r0, [pc, #8]	; (404a40 <PIOD_Handler+0x10>)
  404a38:	4b02      	ldr	r3, [pc, #8]	; (404a44 <PIOD_Handler+0x14>)
  404a3a:	4798      	blx	r3
}
  404a3c:	bf00      	nop
  404a3e:	bd80      	pop	{r7, pc}
  404a40:	400e1400 	.word	0x400e1400
  404a44:	00404935 	.word	0x00404935

00404a48 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  404a48:	b580      	push	{r7, lr}
  404a4a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  404a4c:	2111      	movs	r1, #17
  404a4e:	4802      	ldr	r0, [pc, #8]	; (404a58 <PIOE_Handler+0x10>)
  404a50:	4b02      	ldr	r3, [pc, #8]	; (404a5c <PIOE_Handler+0x14>)
  404a52:	4798      	blx	r3
}
  404a54:	bf00      	nop
  404a56:	bd80      	pop	{r7, pc}
  404a58:	400e1600 	.word	0x400e1600
  404a5c:	00404935 	.word	0x00404935

00404a60 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  404a60:	b480      	push	{r7}
  404a62:	b083      	sub	sp, #12
  404a64:	af00      	add	r7, sp, #0
  404a66:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  404a68:	687b      	ldr	r3, [r7, #4]
  404a6a:	3b01      	subs	r3, #1
  404a6c:	2b03      	cmp	r3, #3
  404a6e:	d81a      	bhi.n	404aa6 <pmc_mck_set_division+0x46>
  404a70:	a201      	add	r2, pc, #4	; (adr r2, 404a78 <pmc_mck_set_division+0x18>)
  404a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404a76:	bf00      	nop
  404a78:	00404a89 	.word	0x00404a89
  404a7c:	00404a8f 	.word	0x00404a8f
  404a80:	00404a97 	.word	0x00404a97
  404a84:	00404a9f 	.word	0x00404a9f
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  404a88:	2300      	movs	r3, #0
  404a8a:	607b      	str	r3, [r7, #4]
			break;
  404a8c:	e00e      	b.n	404aac <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  404a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
  404a92:	607b      	str	r3, [r7, #4]
			break;
  404a94:	e00a      	b.n	404aac <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  404a96:	f44f 7340 	mov.w	r3, #768	; 0x300
  404a9a:	607b      	str	r3, [r7, #4]
			break;
  404a9c:	e006      	b.n	404aac <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  404a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
  404aa2:	607b      	str	r3, [r7, #4]
			break;
  404aa4:	e002      	b.n	404aac <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  404aa6:	2300      	movs	r3, #0
  404aa8:	607b      	str	r3, [r7, #4]
			break;
  404aaa:	bf00      	nop
	}
	PMC->PMC_MCKR =
  404aac:	490a      	ldr	r1, [pc, #40]	; (404ad8 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  404aae:	4b0a      	ldr	r3, [pc, #40]	; (404ad8 <pmc_mck_set_division+0x78>)
  404ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404ab2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  404ab6:	687b      	ldr	r3, [r7, #4]
  404ab8:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  404aba:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  404abc:	bf00      	nop
  404abe:	4b06      	ldr	r3, [pc, #24]	; (404ad8 <pmc_mck_set_division+0x78>)
  404ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404ac2:	f003 0308 	and.w	r3, r3, #8
  404ac6:	2b00      	cmp	r3, #0
  404ac8:	d0f9      	beq.n	404abe <pmc_mck_set_division+0x5e>
}
  404aca:	bf00      	nop
  404acc:	370c      	adds	r7, #12
  404ace:	46bd      	mov	sp, r7
  404ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ad4:	4770      	bx	lr
  404ad6:	bf00      	nop
  404ad8:	400e0600 	.word	0x400e0600

00404adc <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  404adc:	b480      	push	{r7}
  404ade:	b085      	sub	sp, #20
  404ae0:	af00      	add	r7, sp, #0
  404ae2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404ae4:	491d      	ldr	r1, [pc, #116]	; (404b5c <pmc_switch_mck_to_pllack+0x80>)
  404ae6:	4b1d      	ldr	r3, [pc, #116]	; (404b5c <pmc_switch_mck_to_pllack+0x80>)
  404ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  404aee:	687b      	ldr	r3, [r7, #4]
  404af0:	4313      	orrs	r3, r2
  404af2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404af8:	60fb      	str	r3, [r7, #12]
  404afa:	e007      	b.n	404b0c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404afc:	68fb      	ldr	r3, [r7, #12]
  404afe:	2b00      	cmp	r3, #0
  404b00:	d101      	bne.n	404b06 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  404b02:	2301      	movs	r3, #1
  404b04:	e023      	b.n	404b4e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  404b06:	68fb      	ldr	r3, [r7, #12]
  404b08:	3b01      	subs	r3, #1
  404b0a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404b0c:	4b13      	ldr	r3, [pc, #76]	; (404b5c <pmc_switch_mck_to_pllack+0x80>)
  404b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404b10:	f003 0308 	and.w	r3, r3, #8
  404b14:	2b00      	cmp	r3, #0
  404b16:	d0f1      	beq.n	404afc <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  404b18:	4a10      	ldr	r2, [pc, #64]	; (404b5c <pmc_switch_mck_to_pllack+0x80>)
  404b1a:	4b10      	ldr	r3, [pc, #64]	; (404b5c <pmc_switch_mck_to_pllack+0x80>)
  404b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404b1e:	f023 0303 	bic.w	r3, r3, #3
  404b22:	f043 0302 	orr.w	r3, r3, #2
  404b26:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404b2c:	60fb      	str	r3, [r7, #12]
  404b2e:	e007      	b.n	404b40 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  404b30:	68fb      	ldr	r3, [r7, #12]
  404b32:	2b00      	cmp	r3, #0
  404b34:	d101      	bne.n	404b3a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  404b36:	2301      	movs	r3, #1
  404b38:	e009      	b.n	404b4e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  404b3a:	68fb      	ldr	r3, [r7, #12]
  404b3c:	3b01      	subs	r3, #1
  404b3e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404b40:	4b06      	ldr	r3, [pc, #24]	; (404b5c <pmc_switch_mck_to_pllack+0x80>)
  404b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404b44:	f003 0308 	and.w	r3, r3, #8
  404b48:	2b00      	cmp	r3, #0
  404b4a:	d0f1      	beq.n	404b30 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  404b4c:	2300      	movs	r3, #0
}
  404b4e:	4618      	mov	r0, r3
  404b50:	3714      	adds	r7, #20
  404b52:	46bd      	mov	sp, r7
  404b54:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b58:	4770      	bx	lr
  404b5a:	bf00      	nop
  404b5c:	400e0600 	.word	0x400e0600

00404b60 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  404b60:	b480      	push	{r7}
  404b62:	b083      	sub	sp, #12
  404b64:	af00      	add	r7, sp, #0
  404b66:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  404b68:	687b      	ldr	r3, [r7, #4]
  404b6a:	2b01      	cmp	r3, #1
  404b6c:	d105      	bne.n	404b7a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  404b6e:	4907      	ldr	r1, [pc, #28]	; (404b8c <pmc_switch_sclk_to_32kxtal+0x2c>)
  404b70:	4b06      	ldr	r3, [pc, #24]	; (404b8c <pmc_switch_sclk_to_32kxtal+0x2c>)
  404b72:	689a      	ldr	r2, [r3, #8]
  404b74:	4b06      	ldr	r3, [pc, #24]	; (404b90 <pmc_switch_sclk_to_32kxtal+0x30>)
  404b76:	4313      	orrs	r3, r2
  404b78:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  404b7a:	4b04      	ldr	r3, [pc, #16]	; (404b8c <pmc_switch_sclk_to_32kxtal+0x2c>)
  404b7c:	4a05      	ldr	r2, [pc, #20]	; (404b94 <pmc_switch_sclk_to_32kxtal+0x34>)
  404b7e:	601a      	str	r2, [r3, #0]
}
  404b80:	bf00      	nop
  404b82:	370c      	adds	r7, #12
  404b84:	46bd      	mov	sp, r7
  404b86:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b8a:	4770      	bx	lr
  404b8c:	400e1810 	.word	0x400e1810
  404b90:	a5100000 	.word	0xa5100000
  404b94:	a5000008 	.word	0xa5000008

00404b98 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  404b98:	b480      	push	{r7}
  404b9a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  404b9c:	4b09      	ldr	r3, [pc, #36]	; (404bc4 <pmc_osc_is_ready_32kxtal+0x2c>)
  404b9e:	695b      	ldr	r3, [r3, #20]
  404ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  404ba4:	2b00      	cmp	r3, #0
  404ba6:	d007      	beq.n	404bb8 <pmc_osc_is_ready_32kxtal+0x20>
  404ba8:	4b07      	ldr	r3, [pc, #28]	; (404bc8 <pmc_osc_is_ready_32kxtal+0x30>)
  404baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404bb0:	2b00      	cmp	r3, #0
  404bb2:	d001      	beq.n	404bb8 <pmc_osc_is_ready_32kxtal+0x20>
  404bb4:	2301      	movs	r3, #1
  404bb6:	e000      	b.n	404bba <pmc_osc_is_ready_32kxtal+0x22>
  404bb8:	2300      	movs	r3, #0
}
  404bba:	4618      	mov	r0, r3
  404bbc:	46bd      	mov	sp, r7
  404bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
  404bc2:	4770      	bx	lr
  404bc4:	400e1810 	.word	0x400e1810
  404bc8:	400e0600 	.word	0x400e0600

00404bcc <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  404bcc:	b480      	push	{r7}
  404bce:	b083      	sub	sp, #12
  404bd0:	af00      	add	r7, sp, #0
  404bd2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  404bd4:	4915      	ldr	r1, [pc, #84]	; (404c2c <pmc_switch_mainck_to_fastrc+0x60>)
  404bd6:	4b15      	ldr	r3, [pc, #84]	; (404c2c <pmc_switch_mainck_to_fastrc+0x60>)
  404bd8:	6a1a      	ldr	r2, [r3, #32]
  404bda:	4b15      	ldr	r3, [pc, #84]	; (404c30 <pmc_switch_mainck_to_fastrc+0x64>)
  404bdc:	4313      	orrs	r3, r2
  404bde:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404be0:	bf00      	nop
  404be2:	4b12      	ldr	r3, [pc, #72]	; (404c2c <pmc_switch_mainck_to_fastrc+0x60>)
  404be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  404bea:	2b00      	cmp	r3, #0
  404bec:	d0f9      	beq.n	404be2 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  404bee:	490f      	ldr	r1, [pc, #60]	; (404c2c <pmc_switch_mainck_to_fastrc+0x60>)
  404bf0:	4b0e      	ldr	r3, [pc, #56]	; (404c2c <pmc_switch_mainck_to_fastrc+0x60>)
  404bf2:	6a1a      	ldr	r2, [r3, #32]
  404bf4:	4b0f      	ldr	r3, [pc, #60]	; (404c34 <pmc_switch_mainck_to_fastrc+0x68>)
  404bf6:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  404bf8:	687a      	ldr	r2, [r7, #4]
  404bfa:	4313      	orrs	r3, r2
  404bfc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  404c00:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404c02:	bf00      	nop
  404c04:	4b09      	ldr	r3, [pc, #36]	; (404c2c <pmc_switch_mainck_to_fastrc+0x60>)
  404c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  404c0c:	2b00      	cmp	r3, #0
  404c0e:	d0f9      	beq.n	404c04 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  404c10:	4906      	ldr	r1, [pc, #24]	; (404c2c <pmc_switch_mainck_to_fastrc+0x60>)
  404c12:	4b06      	ldr	r3, [pc, #24]	; (404c2c <pmc_switch_mainck_to_fastrc+0x60>)
  404c14:	6a1a      	ldr	r2, [r3, #32]
  404c16:	4b08      	ldr	r3, [pc, #32]	; (404c38 <pmc_switch_mainck_to_fastrc+0x6c>)
  404c18:	4013      	ands	r3, r2
  404c1a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404c1e:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  404c20:	bf00      	nop
  404c22:	370c      	adds	r7, #12
  404c24:	46bd      	mov	sp, r7
  404c26:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c2a:	4770      	bx	lr
  404c2c:	400e0600 	.word	0x400e0600
  404c30:	00370008 	.word	0x00370008
  404c34:	ffc8ff8f 	.word	0xffc8ff8f
  404c38:	fec8ffff 	.word	0xfec8ffff

00404c3c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  404c3c:	b480      	push	{r7}
  404c3e:	b083      	sub	sp, #12
  404c40:	af00      	add	r7, sp, #0
  404c42:	6078      	str	r0, [r7, #4]
  404c44:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  404c46:	687b      	ldr	r3, [r7, #4]
  404c48:	2b00      	cmp	r3, #0
  404c4a:	d008      	beq.n	404c5e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404c4c:	4913      	ldr	r1, [pc, #76]	; (404c9c <pmc_switch_mainck_to_xtal+0x60>)
  404c4e:	4b13      	ldr	r3, [pc, #76]	; (404c9c <pmc_switch_mainck_to_xtal+0x60>)
  404c50:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  404c52:	4a13      	ldr	r2, [pc, #76]	; (404ca0 <pmc_switch_mainck_to_xtal+0x64>)
  404c54:	401a      	ands	r2, r3
  404c56:	4b13      	ldr	r3, [pc, #76]	; (404ca4 <pmc_switch_mainck_to_xtal+0x68>)
  404c58:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  404c5a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  404c5c:	e018      	b.n	404c90 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404c5e:	490f      	ldr	r1, [pc, #60]	; (404c9c <pmc_switch_mainck_to_xtal+0x60>)
  404c60:	4b0e      	ldr	r3, [pc, #56]	; (404c9c <pmc_switch_mainck_to_xtal+0x60>)
  404c62:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404c64:	4b10      	ldr	r3, [pc, #64]	; (404ca8 <pmc_switch_mainck_to_xtal+0x6c>)
  404c66:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  404c68:	683a      	ldr	r2, [r7, #0]
  404c6a:	0212      	lsls	r2, r2, #8
  404c6c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  404c6e:	431a      	orrs	r2, r3
  404c70:	4b0e      	ldr	r3, [pc, #56]	; (404cac <pmc_switch_mainck_to_xtal+0x70>)
  404c72:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  404c74:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  404c76:	bf00      	nop
  404c78:	4b08      	ldr	r3, [pc, #32]	; (404c9c <pmc_switch_mainck_to_xtal+0x60>)
  404c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404c7c:	f003 0301 	and.w	r3, r3, #1
  404c80:	2b00      	cmp	r3, #0
  404c82:	d0f9      	beq.n	404c78 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  404c84:	4905      	ldr	r1, [pc, #20]	; (404c9c <pmc_switch_mainck_to_xtal+0x60>)
  404c86:	4b05      	ldr	r3, [pc, #20]	; (404c9c <pmc_switch_mainck_to_xtal+0x60>)
  404c88:	6a1a      	ldr	r2, [r3, #32]
  404c8a:	4b09      	ldr	r3, [pc, #36]	; (404cb0 <pmc_switch_mainck_to_xtal+0x74>)
  404c8c:	4313      	orrs	r3, r2
  404c8e:	620b      	str	r3, [r1, #32]
}
  404c90:	bf00      	nop
  404c92:	370c      	adds	r7, #12
  404c94:	46bd      	mov	sp, r7
  404c96:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c9a:	4770      	bx	lr
  404c9c:	400e0600 	.word	0x400e0600
  404ca0:	fec8fffc 	.word	0xfec8fffc
  404ca4:	01370002 	.word	0x01370002
  404ca8:	ffc8fffc 	.word	0xffc8fffc
  404cac:	00370001 	.word	0x00370001
  404cb0:	01370000 	.word	0x01370000

00404cb4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  404cb4:	b480      	push	{r7}
  404cb6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  404cb8:	4b04      	ldr	r3, [pc, #16]	; (404ccc <pmc_osc_is_ready_mainck+0x18>)
  404cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  404cc0:	4618      	mov	r0, r3
  404cc2:	46bd      	mov	sp, r7
  404cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
  404cc8:	4770      	bx	lr
  404cca:	bf00      	nop
  404ccc:	400e0600 	.word	0x400e0600

00404cd0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  404cd0:	b480      	push	{r7}
  404cd2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  404cd4:	4b04      	ldr	r3, [pc, #16]	; (404ce8 <pmc_disable_pllack+0x18>)
  404cd6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  404cda:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  404cdc:	bf00      	nop
  404cde:	46bd      	mov	sp, r7
  404ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ce4:	4770      	bx	lr
  404ce6:	bf00      	nop
  404ce8:	400e0600 	.word	0x400e0600

00404cec <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  404cec:	b480      	push	{r7}
  404cee:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404cf0:	4b04      	ldr	r3, [pc, #16]	; (404d04 <pmc_is_locked_pllack+0x18>)
  404cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404cf4:	f003 0302 	and.w	r3, r3, #2
}
  404cf8:	4618      	mov	r0, r3
  404cfa:	46bd      	mov	sp, r7
  404cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d00:	4770      	bx	lr
  404d02:	bf00      	nop
  404d04:	400e0600 	.word	0x400e0600

00404d08 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  404d08:	b480      	push	{r7}
  404d0a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  404d0c:	4b04      	ldr	r3, [pc, #16]	; (404d20 <pmc_is_locked_upll+0x18>)
  404d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  404d14:	4618      	mov	r0, r3
  404d16:	46bd      	mov	sp, r7
  404d18:	f85d 7b04 	ldr.w	r7, [sp], #4
  404d1c:	4770      	bx	lr
  404d1e:	bf00      	nop
  404d20:	400e0600 	.word	0x400e0600

00404d24 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  404d24:	b480      	push	{r7}
  404d26:	b083      	sub	sp, #12
  404d28:	af00      	add	r7, sp, #0
  404d2a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  404d2c:	687b      	ldr	r3, [r7, #4]
  404d2e:	2b3f      	cmp	r3, #63	; 0x3f
  404d30:	d901      	bls.n	404d36 <pmc_enable_periph_clk+0x12>
		return 1;
  404d32:	2301      	movs	r3, #1
  404d34:	e02f      	b.n	404d96 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  404d36:	687b      	ldr	r3, [r7, #4]
  404d38:	2b1f      	cmp	r3, #31
  404d3a:	d813      	bhi.n	404d64 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  404d3c:	4b19      	ldr	r3, [pc, #100]	; (404da4 <pmc_enable_periph_clk+0x80>)
  404d3e:	699a      	ldr	r2, [r3, #24]
  404d40:	2101      	movs	r1, #1
  404d42:	687b      	ldr	r3, [r7, #4]
  404d44:	fa01 f303 	lsl.w	r3, r1, r3
  404d48:	401a      	ands	r2, r3
  404d4a:	2101      	movs	r1, #1
  404d4c:	687b      	ldr	r3, [r7, #4]
  404d4e:	fa01 f303 	lsl.w	r3, r1, r3
  404d52:	429a      	cmp	r2, r3
  404d54:	d01e      	beq.n	404d94 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  404d56:	4a13      	ldr	r2, [pc, #76]	; (404da4 <pmc_enable_periph_clk+0x80>)
  404d58:	2101      	movs	r1, #1
  404d5a:	687b      	ldr	r3, [r7, #4]
  404d5c:	fa01 f303 	lsl.w	r3, r1, r3
  404d60:	6113      	str	r3, [r2, #16]
  404d62:	e017      	b.n	404d94 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  404d64:	687b      	ldr	r3, [r7, #4]
  404d66:	3b20      	subs	r3, #32
  404d68:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  404d6a:	4b0e      	ldr	r3, [pc, #56]	; (404da4 <pmc_enable_periph_clk+0x80>)
  404d6c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  404d70:	2101      	movs	r1, #1
  404d72:	687b      	ldr	r3, [r7, #4]
  404d74:	fa01 f303 	lsl.w	r3, r1, r3
  404d78:	401a      	ands	r2, r3
  404d7a:	2101      	movs	r1, #1
  404d7c:	687b      	ldr	r3, [r7, #4]
  404d7e:	fa01 f303 	lsl.w	r3, r1, r3
  404d82:	429a      	cmp	r2, r3
  404d84:	d006      	beq.n	404d94 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  404d86:	4a07      	ldr	r2, [pc, #28]	; (404da4 <pmc_enable_periph_clk+0x80>)
  404d88:	2101      	movs	r1, #1
  404d8a:	687b      	ldr	r3, [r7, #4]
  404d8c:	fa01 f303 	lsl.w	r3, r1, r3
  404d90:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  404d94:	2300      	movs	r3, #0
}
  404d96:	4618      	mov	r0, r3
  404d98:	370c      	adds	r7, #12
  404d9a:	46bd      	mov	sp, r7
  404d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404da0:	4770      	bx	lr
  404da2:	bf00      	nop
  404da4:	400e0600 	.word	0x400e0600

00404da8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  404da8:	b480      	push	{r7}
  404daa:	b085      	sub	sp, #20
  404dac:	af00      	add	r7, sp, #0
  404dae:	6078      	str	r0, [r7, #4]
  404db0:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  404db2:	2300      	movs	r3, #0
  404db4:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  404db6:	687b      	ldr	r3, [r7, #4]
  404db8:	22ac      	movs	r2, #172	; 0xac
  404dba:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  404dbc:	683b      	ldr	r3, [r7, #0]
  404dbe:	681a      	ldr	r2, [r3, #0]
  404dc0:	683b      	ldr	r3, [r7, #0]
  404dc2:	685b      	ldr	r3, [r3, #4]
  404dc4:	fbb2 f3f3 	udiv	r3, r2, r3
  404dc8:	091b      	lsrs	r3, r3, #4
  404dca:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  404dcc:	68fb      	ldr	r3, [r7, #12]
  404dce:	2b00      	cmp	r3, #0
  404dd0:	d003      	beq.n	404dda <uart_init+0x32>
  404dd2:	68fb      	ldr	r3, [r7, #12]
  404dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  404dd8:	d301      	bcc.n	404dde <uart_init+0x36>
		return 1;
  404dda:	2301      	movs	r3, #1
  404ddc:	e00a      	b.n	404df4 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  404dde:	687b      	ldr	r3, [r7, #4]
  404de0:	68fa      	ldr	r2, [r7, #12]
  404de2:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  404de4:	683b      	ldr	r3, [r7, #0]
  404de6:	689a      	ldr	r2, [r3, #8]
  404de8:	687b      	ldr	r3, [r7, #4]
  404dea:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  404dec:	687b      	ldr	r3, [r7, #4]
  404dee:	2250      	movs	r2, #80	; 0x50
  404df0:	601a      	str	r2, [r3, #0]

	return 0;
  404df2:	2300      	movs	r3, #0
}
  404df4:	4618      	mov	r0, r3
  404df6:	3714      	adds	r7, #20
  404df8:	46bd      	mov	sp, r7
  404dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
  404dfe:	4770      	bx	lr

00404e00 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  404e00:	b480      	push	{r7}
  404e02:	b083      	sub	sp, #12
  404e04:	af00      	add	r7, sp, #0
  404e06:	6078      	str	r0, [r7, #4]
  404e08:	460b      	mov	r3, r1
  404e0a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  404e0c:	687b      	ldr	r3, [r7, #4]
  404e0e:	695b      	ldr	r3, [r3, #20]
  404e10:	f003 0302 	and.w	r3, r3, #2
  404e14:	2b00      	cmp	r3, #0
  404e16:	d101      	bne.n	404e1c <uart_write+0x1c>
		return 1;
  404e18:	2301      	movs	r3, #1
  404e1a:	e003      	b.n	404e24 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  404e1c:	78fa      	ldrb	r2, [r7, #3]
  404e1e:	687b      	ldr	r3, [r7, #4]
  404e20:	61da      	str	r2, [r3, #28]
	return 0;
  404e22:	2300      	movs	r3, #0
}
  404e24:	4618      	mov	r0, r3
  404e26:	370c      	adds	r7, #12
  404e28:	46bd      	mov	sp, r7
  404e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e2e:	4770      	bx	lr

00404e30 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  404e30:	b480      	push	{r7}
  404e32:	b083      	sub	sp, #12
  404e34:	af00      	add	r7, sp, #0
  404e36:	6078      	str	r0, [r7, #4]
  404e38:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  404e3a:	687b      	ldr	r3, [r7, #4]
  404e3c:	695b      	ldr	r3, [r3, #20]
  404e3e:	f003 0301 	and.w	r3, r3, #1
  404e42:	2b00      	cmp	r3, #0
  404e44:	d101      	bne.n	404e4a <uart_read+0x1a>
		return 1;
  404e46:	2301      	movs	r3, #1
  404e48:	e005      	b.n	404e56 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  404e4a:	687b      	ldr	r3, [r7, #4]
  404e4c:	699b      	ldr	r3, [r3, #24]
  404e4e:	b2da      	uxtb	r2, r3
  404e50:	683b      	ldr	r3, [r7, #0]
  404e52:	701a      	strb	r2, [r3, #0]
	return 0;
  404e54:	2300      	movs	r3, #0
}
  404e56:	4618      	mov	r0, r3
  404e58:	370c      	adds	r7, #12
  404e5a:	46bd      	mov	sp, r7
  404e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e60:	4770      	bx	lr

00404e62 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  404e62:	b480      	push	{r7}
  404e64:	b089      	sub	sp, #36	; 0x24
  404e66:	af00      	add	r7, sp, #0
  404e68:	60f8      	str	r0, [r7, #12]
  404e6a:	60b9      	str	r1, [r7, #8]
  404e6c:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  404e6e:	68bb      	ldr	r3, [r7, #8]
  404e70:	011a      	lsls	r2, r3, #4
  404e72:	687b      	ldr	r3, [r7, #4]
  404e74:	429a      	cmp	r2, r3
  404e76:	d802      	bhi.n	404e7e <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  404e78:	2310      	movs	r3, #16
  404e7a:	61fb      	str	r3, [r7, #28]
  404e7c:	e001      	b.n	404e82 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  404e7e:	2308      	movs	r3, #8
  404e80:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  404e82:	687b      	ldr	r3, [r7, #4]
  404e84:	00da      	lsls	r2, r3, #3
  404e86:	69fb      	ldr	r3, [r7, #28]
  404e88:	68b9      	ldr	r1, [r7, #8]
  404e8a:	fb01 f303 	mul.w	r3, r1, r3
  404e8e:	085b      	lsrs	r3, r3, #1
  404e90:	441a      	add	r2, r3
  404e92:	69fb      	ldr	r3, [r7, #28]
  404e94:	68b9      	ldr	r1, [r7, #8]
  404e96:	fb01 f303 	mul.w	r3, r1, r3
  404e9a:	fbb2 f3f3 	udiv	r3, r2, r3
  404e9e:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  404ea0:	69bb      	ldr	r3, [r7, #24]
  404ea2:	08db      	lsrs	r3, r3, #3
  404ea4:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  404ea6:	69bb      	ldr	r3, [r7, #24]
  404ea8:	f003 0307 	and.w	r3, r3, #7
  404eac:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  404eae:	697b      	ldr	r3, [r7, #20]
  404eb0:	2b00      	cmp	r3, #0
  404eb2:	d003      	beq.n	404ebc <usart_set_async_baudrate+0x5a>
  404eb4:	697b      	ldr	r3, [r7, #20]
  404eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  404eba:	d301      	bcc.n	404ec0 <usart_set_async_baudrate+0x5e>
		return 1;
  404ebc:	2301      	movs	r3, #1
  404ebe:	e00f      	b.n	404ee0 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  404ec0:	69fb      	ldr	r3, [r7, #28]
  404ec2:	2b08      	cmp	r3, #8
  404ec4:	d105      	bne.n	404ed2 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  404ec6:	68fb      	ldr	r3, [r7, #12]
  404ec8:	685b      	ldr	r3, [r3, #4]
  404eca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  404ece:	68fb      	ldr	r3, [r7, #12]
  404ed0:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  404ed2:	693b      	ldr	r3, [r7, #16]
  404ed4:	041a      	lsls	r2, r3, #16
  404ed6:	697b      	ldr	r3, [r7, #20]
  404ed8:	431a      	orrs	r2, r3
  404eda:	68fb      	ldr	r3, [r7, #12]
  404edc:	621a      	str	r2, [r3, #32]

	return 0;
  404ede:	2300      	movs	r3, #0
}
  404ee0:	4618      	mov	r0, r3
  404ee2:	3724      	adds	r7, #36	; 0x24
  404ee4:	46bd      	mov	sp, r7
  404ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
  404eea:	4770      	bx	lr

00404eec <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  404eec:	b580      	push	{r7, lr}
  404eee:	b082      	sub	sp, #8
  404ef0:	af00      	add	r7, sp, #0
  404ef2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  404ef4:	6878      	ldr	r0, [r7, #4]
  404ef6:	4b0d      	ldr	r3, [pc, #52]	; (404f2c <usart_reset+0x40>)
  404ef8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  404efa:	687b      	ldr	r3, [r7, #4]
  404efc:	2200      	movs	r2, #0
  404efe:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  404f00:	687b      	ldr	r3, [r7, #4]
  404f02:	2200      	movs	r2, #0
  404f04:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  404f06:	687b      	ldr	r3, [r7, #4]
  404f08:	2200      	movs	r2, #0
  404f0a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  404f0c:	6878      	ldr	r0, [r7, #4]
  404f0e:	4b08      	ldr	r3, [pc, #32]	; (404f30 <usart_reset+0x44>)
  404f10:	4798      	blx	r3
	usart_reset_rx(p_usart);
  404f12:	6878      	ldr	r0, [r7, #4]
  404f14:	4b07      	ldr	r3, [pc, #28]	; (404f34 <usart_reset+0x48>)
  404f16:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  404f18:	6878      	ldr	r0, [r7, #4]
  404f1a:	4b07      	ldr	r3, [pc, #28]	; (404f38 <usart_reset+0x4c>)
  404f1c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  404f1e:	6878      	ldr	r0, [r7, #4]
  404f20:	4b06      	ldr	r3, [pc, #24]	; (404f3c <usart_reset+0x50>)
  404f22:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  404f24:	bf00      	nop
  404f26:	3708      	adds	r7, #8
  404f28:	46bd      	mov	sp, r7
  404f2a:	bd80      	pop	{r7, pc}
  404f2c:	004050cd 	.word	0x004050cd
  404f30:	00404fdf 	.word	0x00404fdf
  404f34:	00405013 	.word	0x00405013
  404f38:	0040502d 	.word	0x0040502d
  404f3c:	00405049 	.word	0x00405049

00404f40 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  404f40:	b580      	push	{r7, lr}
  404f42:	b084      	sub	sp, #16
  404f44:	af00      	add	r7, sp, #0
  404f46:	60f8      	str	r0, [r7, #12]
  404f48:	60b9      	str	r1, [r7, #8]
  404f4a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  404f4c:	68f8      	ldr	r0, [r7, #12]
  404f4e:	4b1a      	ldr	r3, [pc, #104]	; (404fb8 <usart_init_rs232+0x78>)
  404f50:	4798      	blx	r3

	ul_reg_val = 0;
  404f52:	4b1a      	ldr	r3, [pc, #104]	; (404fbc <usart_init_rs232+0x7c>)
  404f54:	2200      	movs	r2, #0
  404f56:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  404f58:	68bb      	ldr	r3, [r7, #8]
  404f5a:	2b00      	cmp	r3, #0
  404f5c:	d009      	beq.n	404f72 <usart_init_rs232+0x32>
  404f5e:	68bb      	ldr	r3, [r7, #8]
  404f60:	681b      	ldr	r3, [r3, #0]
  404f62:	687a      	ldr	r2, [r7, #4]
  404f64:	4619      	mov	r1, r3
  404f66:	68f8      	ldr	r0, [r7, #12]
  404f68:	4b15      	ldr	r3, [pc, #84]	; (404fc0 <usart_init_rs232+0x80>)
  404f6a:	4798      	blx	r3
  404f6c:	4603      	mov	r3, r0
  404f6e:	2b00      	cmp	r3, #0
  404f70:	d001      	beq.n	404f76 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  404f72:	2301      	movs	r3, #1
  404f74:	e01b      	b.n	404fae <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404f76:	68bb      	ldr	r3, [r7, #8]
  404f78:	685a      	ldr	r2, [r3, #4]
  404f7a:	68bb      	ldr	r3, [r7, #8]
  404f7c:	689b      	ldr	r3, [r3, #8]
  404f7e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  404f80:	68bb      	ldr	r3, [r7, #8]
  404f82:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404f84:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  404f86:	68bb      	ldr	r3, [r7, #8]
  404f88:	68db      	ldr	r3, [r3, #12]
  404f8a:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  404f8c:	4b0b      	ldr	r3, [pc, #44]	; (404fbc <usart_init_rs232+0x7c>)
  404f8e:	681b      	ldr	r3, [r3, #0]
  404f90:	4313      	orrs	r3, r2
  404f92:	4a0a      	ldr	r2, [pc, #40]	; (404fbc <usart_init_rs232+0x7c>)
  404f94:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  404f96:	4b09      	ldr	r3, [pc, #36]	; (404fbc <usart_init_rs232+0x7c>)
  404f98:	681b      	ldr	r3, [r3, #0]
  404f9a:	4a08      	ldr	r2, [pc, #32]	; (404fbc <usart_init_rs232+0x7c>)
  404f9c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  404f9e:	68fb      	ldr	r3, [r7, #12]
  404fa0:	685a      	ldr	r2, [r3, #4]
  404fa2:	4b06      	ldr	r3, [pc, #24]	; (404fbc <usart_init_rs232+0x7c>)
  404fa4:	681b      	ldr	r3, [r3, #0]
  404fa6:	431a      	orrs	r2, r3
  404fa8:	68fb      	ldr	r3, [r7, #12]
  404faa:	605a      	str	r2, [r3, #4]

	return 0;
  404fac:	2300      	movs	r3, #0
}
  404fae:	4618      	mov	r0, r3
  404fb0:	3710      	adds	r7, #16
  404fb2:	46bd      	mov	sp, r7
  404fb4:	bd80      	pop	{r7, pc}
  404fb6:	bf00      	nop
  404fb8:	00404eed 	.word	0x00404eed
  404fbc:	2040aeec 	.word	0x2040aeec
  404fc0:	00404e63 	.word	0x00404e63

00404fc4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  404fc4:	b480      	push	{r7}
  404fc6:	b083      	sub	sp, #12
  404fc8:	af00      	add	r7, sp, #0
  404fca:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  404fcc:	687b      	ldr	r3, [r7, #4]
  404fce:	2240      	movs	r2, #64	; 0x40
  404fd0:	601a      	str	r2, [r3, #0]
}
  404fd2:	bf00      	nop
  404fd4:	370c      	adds	r7, #12
  404fd6:	46bd      	mov	sp, r7
  404fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
  404fdc:	4770      	bx	lr

00404fde <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  404fde:	b480      	push	{r7}
  404fe0:	b083      	sub	sp, #12
  404fe2:	af00      	add	r7, sp, #0
  404fe4:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  404fe6:	687b      	ldr	r3, [r7, #4]
  404fe8:	2288      	movs	r2, #136	; 0x88
  404fea:	601a      	str	r2, [r3, #0]
}
  404fec:	bf00      	nop
  404fee:	370c      	adds	r7, #12
  404ff0:	46bd      	mov	sp, r7
  404ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ff6:	4770      	bx	lr

00404ff8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  404ff8:	b480      	push	{r7}
  404ffa:	b083      	sub	sp, #12
  404ffc:	af00      	add	r7, sp, #0
  404ffe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  405000:	687b      	ldr	r3, [r7, #4]
  405002:	2210      	movs	r2, #16
  405004:	601a      	str	r2, [r3, #0]
}
  405006:	bf00      	nop
  405008:	370c      	adds	r7, #12
  40500a:	46bd      	mov	sp, r7
  40500c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405010:	4770      	bx	lr

00405012 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  405012:	b480      	push	{r7}
  405014:	b083      	sub	sp, #12
  405016:	af00      	add	r7, sp, #0
  405018:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40501a:	687b      	ldr	r3, [r7, #4]
  40501c:	2224      	movs	r2, #36	; 0x24
  40501e:	601a      	str	r2, [r3, #0]
}
  405020:	bf00      	nop
  405022:	370c      	adds	r7, #12
  405024:	46bd      	mov	sp, r7
  405026:	f85d 7b04 	ldr.w	r7, [sp], #4
  40502a:	4770      	bx	lr

0040502c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  40502c:	b480      	push	{r7}
  40502e:	b083      	sub	sp, #12
  405030:	af00      	add	r7, sp, #0
  405032:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  405034:	687b      	ldr	r3, [r7, #4]
  405036:	f44f 7280 	mov.w	r2, #256	; 0x100
  40503a:	601a      	str	r2, [r3, #0]
}
  40503c:	bf00      	nop
  40503e:	370c      	adds	r7, #12
  405040:	46bd      	mov	sp, r7
  405042:	f85d 7b04 	ldr.w	r7, [sp], #4
  405046:	4770      	bx	lr

00405048 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  405048:	b480      	push	{r7}
  40504a:	b083      	sub	sp, #12
  40504c:	af00      	add	r7, sp, #0
  40504e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  405050:	687b      	ldr	r3, [r7, #4]
  405052:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405056:	601a      	str	r2, [r3, #0]
}
  405058:	bf00      	nop
  40505a:	370c      	adds	r7, #12
  40505c:	46bd      	mov	sp, r7
  40505e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405062:	4770      	bx	lr

00405064 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  405064:	b480      	push	{r7}
  405066:	b083      	sub	sp, #12
  405068:	af00      	add	r7, sp, #0
  40506a:	6078      	str	r0, [r7, #4]
  40506c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  40506e:	687b      	ldr	r3, [r7, #4]
  405070:	695b      	ldr	r3, [r3, #20]
  405072:	f003 0302 	and.w	r3, r3, #2
  405076:	2b00      	cmp	r3, #0
  405078:	d101      	bne.n	40507e <usart_write+0x1a>
		return 1;
  40507a:	2301      	movs	r3, #1
  40507c:	e005      	b.n	40508a <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40507e:	683b      	ldr	r3, [r7, #0]
  405080:	f3c3 0208 	ubfx	r2, r3, #0, #9
  405084:	687b      	ldr	r3, [r7, #4]
  405086:	61da      	str	r2, [r3, #28]
	return 0;
  405088:	2300      	movs	r3, #0
}
  40508a:	4618      	mov	r0, r3
  40508c:	370c      	adds	r7, #12
  40508e:	46bd      	mov	sp, r7
  405090:	f85d 7b04 	ldr.w	r7, [sp], #4
  405094:	4770      	bx	lr

00405096 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  405096:	b480      	push	{r7}
  405098:	b083      	sub	sp, #12
  40509a:	af00      	add	r7, sp, #0
  40509c:	6078      	str	r0, [r7, #4]
  40509e:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4050a0:	687b      	ldr	r3, [r7, #4]
  4050a2:	695b      	ldr	r3, [r3, #20]
  4050a4:	f003 0301 	and.w	r3, r3, #1
  4050a8:	2b00      	cmp	r3, #0
  4050aa:	d101      	bne.n	4050b0 <usart_read+0x1a>
		return 1;
  4050ac:	2301      	movs	r3, #1
  4050ae:	e006      	b.n	4050be <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4050b0:	687b      	ldr	r3, [r7, #4]
  4050b2:	699b      	ldr	r3, [r3, #24]
  4050b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
  4050b8:	683b      	ldr	r3, [r7, #0]
  4050ba:	601a      	str	r2, [r3, #0]

	return 0;
  4050bc:	2300      	movs	r3, #0
}
  4050be:	4618      	mov	r0, r3
  4050c0:	370c      	adds	r7, #12
  4050c2:	46bd      	mov	sp, r7
  4050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050c8:	4770      	bx	lr
	...

004050cc <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  4050cc:	b480      	push	{r7}
  4050ce:	b083      	sub	sp, #12
  4050d0:	af00      	add	r7, sp, #0
  4050d2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4050d4:	687b      	ldr	r3, [r7, #4]
  4050d6:	4a04      	ldr	r2, [pc, #16]	; (4050e8 <usart_disable_writeprotect+0x1c>)
  4050d8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  4050dc:	bf00      	nop
  4050de:	370c      	adds	r7, #12
  4050e0:	46bd      	mov	sp, r7
  4050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050e6:	4770      	bx	lr
  4050e8:	55534100 	.word	0x55534100

004050ec <cpu_irq_save>:
{
  4050ec:	b480      	push	{r7}
  4050ee:	b083      	sub	sp, #12
  4050f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4050f2:	f3ef 8310 	mrs	r3, PRIMASK
  4050f6:	607b      	str	r3, [r7, #4]
  return(result);
  4050f8:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4050fa:	2b00      	cmp	r3, #0
  4050fc:	bf0c      	ite	eq
  4050fe:	2301      	moveq	r3, #1
  405100:	2300      	movne	r3, #0
  405102:	b2db      	uxtb	r3, r3
  405104:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  405106:	b672      	cpsid	i
  405108:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40510c:	4b04      	ldr	r3, [pc, #16]	; (405120 <cpu_irq_save+0x34>)
  40510e:	2200      	movs	r2, #0
  405110:	701a      	strb	r2, [r3, #0]
	return flags;
  405112:	683b      	ldr	r3, [r7, #0]
}
  405114:	4618      	mov	r0, r3
  405116:	370c      	adds	r7, #12
  405118:	46bd      	mov	sp, r7
  40511a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40511e:	4770      	bx	lr
  405120:	20400034 	.word	0x20400034

00405124 <cpu_irq_is_enabled_flags>:
{
  405124:	b480      	push	{r7}
  405126:	b083      	sub	sp, #12
  405128:	af00      	add	r7, sp, #0
  40512a:	6078      	str	r0, [r7, #4]
	return (flags);
  40512c:	687b      	ldr	r3, [r7, #4]
  40512e:	2b00      	cmp	r3, #0
  405130:	bf14      	ite	ne
  405132:	2301      	movne	r3, #1
  405134:	2300      	moveq	r3, #0
  405136:	b2db      	uxtb	r3, r3
}
  405138:	4618      	mov	r0, r3
  40513a:	370c      	adds	r7, #12
  40513c:	46bd      	mov	sp, r7
  40513e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405142:	4770      	bx	lr

00405144 <cpu_irq_restore>:
{
  405144:	b580      	push	{r7, lr}
  405146:	b082      	sub	sp, #8
  405148:	af00      	add	r7, sp, #0
  40514a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  40514c:	6878      	ldr	r0, [r7, #4]
  40514e:	4b07      	ldr	r3, [pc, #28]	; (40516c <cpu_irq_restore+0x28>)
  405150:	4798      	blx	r3
  405152:	4603      	mov	r3, r0
  405154:	2b00      	cmp	r3, #0
  405156:	d005      	beq.n	405164 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  405158:	4b05      	ldr	r3, [pc, #20]	; (405170 <cpu_irq_restore+0x2c>)
  40515a:	2201      	movs	r2, #1
  40515c:	701a      	strb	r2, [r3, #0]
  40515e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  405162:	b662      	cpsie	i
}
  405164:	bf00      	nop
  405166:	3708      	adds	r7, #8
  405168:	46bd      	mov	sp, r7
  40516a:	bd80      	pop	{r7, pc}
  40516c:	00405125 	.word	0x00405125
  405170:	20400034 	.word	0x20400034

00405174 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  405174:	b580      	push	{r7, lr}
  405176:	b084      	sub	sp, #16
  405178:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  40517a:	4b1e      	ldr	r3, [pc, #120]	; (4051f4 <Reset_Handler+0x80>)
  40517c:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  40517e:	4b1e      	ldr	r3, [pc, #120]	; (4051f8 <Reset_Handler+0x84>)
  405180:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  405182:	68fa      	ldr	r2, [r7, #12]
  405184:	68bb      	ldr	r3, [r7, #8]
  405186:	429a      	cmp	r2, r3
  405188:	d00c      	beq.n	4051a4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  40518a:	e007      	b.n	40519c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  40518c:	68bb      	ldr	r3, [r7, #8]
  40518e:	1d1a      	adds	r2, r3, #4
  405190:	60ba      	str	r2, [r7, #8]
  405192:	68fa      	ldr	r2, [r7, #12]
  405194:	1d11      	adds	r1, r2, #4
  405196:	60f9      	str	r1, [r7, #12]
  405198:	6812      	ldr	r2, [r2, #0]
  40519a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  40519c:	68bb      	ldr	r3, [r7, #8]
  40519e:	4a17      	ldr	r2, [pc, #92]	; (4051fc <Reset_Handler+0x88>)
  4051a0:	4293      	cmp	r3, r2
  4051a2:	d3f3      	bcc.n	40518c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4051a4:	4b16      	ldr	r3, [pc, #88]	; (405200 <Reset_Handler+0x8c>)
  4051a6:	60bb      	str	r3, [r7, #8]
  4051a8:	e004      	b.n	4051b4 <Reset_Handler+0x40>
                *pDest++ = 0;
  4051aa:	68bb      	ldr	r3, [r7, #8]
  4051ac:	1d1a      	adds	r2, r3, #4
  4051ae:	60ba      	str	r2, [r7, #8]
  4051b0:	2200      	movs	r2, #0
  4051b2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  4051b4:	68bb      	ldr	r3, [r7, #8]
  4051b6:	4a13      	ldr	r2, [pc, #76]	; (405204 <Reset_Handler+0x90>)
  4051b8:	4293      	cmp	r3, r2
  4051ba:	d3f6      	bcc.n	4051aa <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  4051bc:	4b12      	ldr	r3, [pc, #72]	; (405208 <Reset_Handler+0x94>)
  4051be:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4051c0:	4a12      	ldr	r2, [pc, #72]	; (40520c <Reset_Handler+0x98>)
  4051c2:	68fb      	ldr	r3, [r7, #12]
  4051c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4051c8:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  4051ca:	4b11      	ldr	r3, [pc, #68]	; (405210 <Reset_Handler+0x9c>)
  4051cc:	4798      	blx	r3
  4051ce:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  4051d0:	4a10      	ldr	r2, [pc, #64]	; (405214 <Reset_Handler+0xa0>)
  4051d2:	4b10      	ldr	r3, [pc, #64]	; (405214 <Reset_Handler+0xa0>)
  4051d4:	681b      	ldr	r3, [r3, #0]
  4051d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4051da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4051dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4051e0:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  4051e4:	6878      	ldr	r0, [r7, #4]
  4051e6:	4b0c      	ldr	r3, [pc, #48]	; (405218 <Reset_Handler+0xa4>)
  4051e8:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4051ea:	4b0c      	ldr	r3, [pc, #48]	; (40521c <Reset_Handler+0xa8>)
  4051ec:	4798      	blx	r3

        /* Branch to main function */
        main();
  4051ee:	4b0c      	ldr	r3, [pc, #48]	; (405220 <Reset_Handler+0xac>)
  4051f0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  4051f2:	e7fe      	b.n	4051f2 <Reset_Handler+0x7e>
  4051f4:	00409048 	.word	0x00409048
  4051f8:	20400000 	.word	0x20400000
  4051fc:	204009e8 	.word	0x204009e8
  405200:	204009e8 	.word	0x204009e8
  405204:	2040aff8 	.word	0x2040aff8
  405208:	00400000 	.word	0x00400000
  40520c:	e000ed00 	.word	0xe000ed00
  405210:	004050ed 	.word	0x004050ed
  405214:	e000ed88 	.word	0xe000ed88
  405218:	00405145 	.word	0x00405145
  40521c:	00405ce9 	.word	0x00405ce9
  405220:	00403549 	.word	0x00403549

00405224 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  405224:	b480      	push	{r7}
  405226:	af00      	add	r7, sp, #0
        while (1) {
  405228:	e7fe      	b.n	405228 <Dummy_Handler+0x4>
	...

0040522c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  40522c:	b480      	push	{r7}
  40522e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  405230:	4b52      	ldr	r3, [pc, #328]	; (40537c <SystemCoreClockUpdate+0x150>)
  405232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405234:	f003 0303 	and.w	r3, r3, #3
  405238:	2b01      	cmp	r3, #1
  40523a:	d014      	beq.n	405266 <SystemCoreClockUpdate+0x3a>
  40523c:	2b01      	cmp	r3, #1
  40523e:	d302      	bcc.n	405246 <SystemCoreClockUpdate+0x1a>
  405240:	2b02      	cmp	r3, #2
  405242:	d038      	beq.n	4052b6 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  405244:	e07a      	b.n	40533c <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  405246:	4b4e      	ldr	r3, [pc, #312]	; (405380 <SystemCoreClockUpdate+0x154>)
  405248:	695b      	ldr	r3, [r3, #20]
  40524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40524e:	2b00      	cmp	r3, #0
  405250:	d004      	beq.n	40525c <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  405252:	4b4c      	ldr	r3, [pc, #304]	; (405384 <SystemCoreClockUpdate+0x158>)
  405254:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  405258:	601a      	str	r2, [r3, #0]
    break;
  40525a:	e06f      	b.n	40533c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40525c:	4b49      	ldr	r3, [pc, #292]	; (405384 <SystemCoreClockUpdate+0x158>)
  40525e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  405262:	601a      	str	r2, [r3, #0]
    break;
  405264:	e06a      	b.n	40533c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405266:	4b45      	ldr	r3, [pc, #276]	; (40537c <SystemCoreClockUpdate+0x150>)
  405268:	6a1b      	ldr	r3, [r3, #32]
  40526a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40526e:	2b00      	cmp	r3, #0
  405270:	d003      	beq.n	40527a <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  405272:	4b44      	ldr	r3, [pc, #272]	; (405384 <SystemCoreClockUpdate+0x158>)
  405274:	4a44      	ldr	r2, [pc, #272]	; (405388 <SystemCoreClockUpdate+0x15c>)
  405276:	601a      	str	r2, [r3, #0]
    break;
  405278:	e060      	b.n	40533c <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40527a:	4b42      	ldr	r3, [pc, #264]	; (405384 <SystemCoreClockUpdate+0x158>)
  40527c:	4a43      	ldr	r2, [pc, #268]	; (40538c <SystemCoreClockUpdate+0x160>)
  40527e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405280:	4b3e      	ldr	r3, [pc, #248]	; (40537c <SystemCoreClockUpdate+0x150>)
  405282:	6a1b      	ldr	r3, [r3, #32]
  405284:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405288:	2b10      	cmp	r3, #16
  40528a:	d004      	beq.n	405296 <SystemCoreClockUpdate+0x6a>
  40528c:	2b20      	cmp	r3, #32
  40528e:	d008      	beq.n	4052a2 <SystemCoreClockUpdate+0x76>
  405290:	2b00      	cmp	r3, #0
  405292:	d00e      	beq.n	4052b2 <SystemCoreClockUpdate+0x86>
          break;
  405294:	e00e      	b.n	4052b4 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  405296:	4b3b      	ldr	r3, [pc, #236]	; (405384 <SystemCoreClockUpdate+0x158>)
  405298:	681b      	ldr	r3, [r3, #0]
  40529a:	005b      	lsls	r3, r3, #1
  40529c:	4a39      	ldr	r2, [pc, #228]	; (405384 <SystemCoreClockUpdate+0x158>)
  40529e:	6013      	str	r3, [r2, #0]
          break;
  4052a0:	e008      	b.n	4052b4 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  4052a2:	4b38      	ldr	r3, [pc, #224]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052a4:	681a      	ldr	r2, [r3, #0]
  4052a6:	4613      	mov	r3, r2
  4052a8:	005b      	lsls	r3, r3, #1
  4052aa:	4413      	add	r3, r2
  4052ac:	4a35      	ldr	r2, [pc, #212]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052ae:	6013      	str	r3, [r2, #0]
          break;
  4052b0:	e000      	b.n	4052b4 <SystemCoreClockUpdate+0x88>
          break;
  4052b2:	bf00      	nop
    break;
  4052b4:	e042      	b.n	40533c <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4052b6:	4b31      	ldr	r3, [pc, #196]	; (40537c <SystemCoreClockUpdate+0x150>)
  4052b8:	6a1b      	ldr	r3, [r3, #32]
  4052ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4052be:	2b00      	cmp	r3, #0
  4052c0:	d003      	beq.n	4052ca <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4052c2:	4b30      	ldr	r3, [pc, #192]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052c4:	4a30      	ldr	r2, [pc, #192]	; (405388 <SystemCoreClockUpdate+0x15c>)
  4052c6:	601a      	str	r2, [r3, #0]
  4052c8:	e01c      	b.n	405304 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4052ca:	4b2e      	ldr	r3, [pc, #184]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052cc:	4a2f      	ldr	r2, [pc, #188]	; (40538c <SystemCoreClockUpdate+0x160>)
  4052ce:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4052d0:	4b2a      	ldr	r3, [pc, #168]	; (40537c <SystemCoreClockUpdate+0x150>)
  4052d2:	6a1b      	ldr	r3, [r3, #32]
  4052d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4052d8:	2b10      	cmp	r3, #16
  4052da:	d004      	beq.n	4052e6 <SystemCoreClockUpdate+0xba>
  4052dc:	2b20      	cmp	r3, #32
  4052de:	d008      	beq.n	4052f2 <SystemCoreClockUpdate+0xc6>
  4052e0:	2b00      	cmp	r3, #0
  4052e2:	d00e      	beq.n	405302 <SystemCoreClockUpdate+0xd6>
          break;
  4052e4:	e00e      	b.n	405304 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  4052e6:	4b27      	ldr	r3, [pc, #156]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052e8:	681b      	ldr	r3, [r3, #0]
  4052ea:	005b      	lsls	r3, r3, #1
  4052ec:	4a25      	ldr	r2, [pc, #148]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052ee:	6013      	str	r3, [r2, #0]
          break;
  4052f0:	e008      	b.n	405304 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  4052f2:	4b24      	ldr	r3, [pc, #144]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052f4:	681a      	ldr	r2, [r3, #0]
  4052f6:	4613      	mov	r3, r2
  4052f8:	005b      	lsls	r3, r3, #1
  4052fa:	4413      	add	r3, r2
  4052fc:	4a21      	ldr	r2, [pc, #132]	; (405384 <SystemCoreClockUpdate+0x158>)
  4052fe:	6013      	str	r3, [r2, #0]
          break;
  405300:	e000      	b.n	405304 <SystemCoreClockUpdate+0xd8>
          break;
  405302:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  405304:	4b1d      	ldr	r3, [pc, #116]	; (40537c <SystemCoreClockUpdate+0x150>)
  405306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405308:	f003 0303 	and.w	r3, r3, #3
  40530c:	2b02      	cmp	r3, #2
  40530e:	d114      	bne.n	40533a <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405310:	4b1a      	ldr	r3, [pc, #104]	; (40537c <SystemCoreClockUpdate+0x150>)
  405312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  405314:	0c1b      	lsrs	r3, r3, #16
  405316:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40531a:	3301      	adds	r3, #1
  40531c:	4a19      	ldr	r2, [pc, #100]	; (405384 <SystemCoreClockUpdate+0x158>)
  40531e:	6812      	ldr	r2, [r2, #0]
  405320:	fb02 f303 	mul.w	r3, r2, r3
  405324:	4a17      	ldr	r2, [pc, #92]	; (405384 <SystemCoreClockUpdate+0x158>)
  405326:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405328:	4b14      	ldr	r3, [pc, #80]	; (40537c <SystemCoreClockUpdate+0x150>)
  40532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40532c:	b2db      	uxtb	r3, r3
  40532e:	4a15      	ldr	r2, [pc, #84]	; (405384 <SystemCoreClockUpdate+0x158>)
  405330:	6812      	ldr	r2, [r2, #0]
  405332:	fbb2 f3f3 	udiv	r3, r2, r3
  405336:	4a13      	ldr	r2, [pc, #76]	; (405384 <SystemCoreClockUpdate+0x158>)
  405338:	6013      	str	r3, [r2, #0]
    break;
  40533a:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40533c:	4b0f      	ldr	r3, [pc, #60]	; (40537c <SystemCoreClockUpdate+0x150>)
  40533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405340:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405344:	2b70      	cmp	r3, #112	; 0x70
  405346:	d108      	bne.n	40535a <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  405348:	4b0e      	ldr	r3, [pc, #56]	; (405384 <SystemCoreClockUpdate+0x158>)
  40534a:	681b      	ldr	r3, [r3, #0]
  40534c:	4a10      	ldr	r2, [pc, #64]	; (405390 <SystemCoreClockUpdate+0x164>)
  40534e:	fba2 2303 	umull	r2, r3, r2, r3
  405352:	085b      	lsrs	r3, r3, #1
  405354:	4a0b      	ldr	r2, [pc, #44]	; (405384 <SystemCoreClockUpdate+0x158>)
  405356:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  405358:	e00a      	b.n	405370 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40535a:	4b08      	ldr	r3, [pc, #32]	; (40537c <SystemCoreClockUpdate+0x150>)
  40535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40535e:	091b      	lsrs	r3, r3, #4
  405360:	f003 0307 	and.w	r3, r3, #7
  405364:	4a07      	ldr	r2, [pc, #28]	; (405384 <SystemCoreClockUpdate+0x158>)
  405366:	6812      	ldr	r2, [r2, #0]
  405368:	fa22 f303 	lsr.w	r3, r2, r3
  40536c:	4a05      	ldr	r2, [pc, #20]	; (405384 <SystemCoreClockUpdate+0x158>)
  40536e:	6013      	str	r3, [r2, #0]
}
  405370:	bf00      	nop
  405372:	46bd      	mov	sp, r7
  405374:	f85d 7b04 	ldr.w	r7, [sp], #4
  405378:	4770      	bx	lr
  40537a:	bf00      	nop
  40537c:	400e0600 	.word	0x400e0600
  405380:	400e1810 	.word	0x400e1810
  405384:	20400038 	.word	0x20400038
  405388:	00b71b00 	.word	0x00b71b00
  40538c:	003d0900 	.word	0x003d0900
  405390:	aaaaaaab 	.word	0xaaaaaaab

00405394 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  405394:	b480      	push	{r7}
  405396:	b083      	sub	sp, #12
  405398:	af00      	add	r7, sp, #0
  40539a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40539c:	687b      	ldr	r3, [r7, #4]
  40539e:	4a1d      	ldr	r2, [pc, #116]	; (405414 <system_init_flash+0x80>)
  4053a0:	4293      	cmp	r3, r2
  4053a2:	d804      	bhi.n	4053ae <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4053a4:	4b1c      	ldr	r3, [pc, #112]	; (405418 <system_init_flash+0x84>)
  4053a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4053aa:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  4053ac:	e02b      	b.n	405406 <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  4053ae:	687b      	ldr	r3, [r7, #4]
  4053b0:	4a1a      	ldr	r2, [pc, #104]	; (40541c <system_init_flash+0x88>)
  4053b2:	4293      	cmp	r3, r2
  4053b4:	d803      	bhi.n	4053be <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4053b6:	4b18      	ldr	r3, [pc, #96]	; (405418 <system_init_flash+0x84>)
  4053b8:	4a19      	ldr	r2, [pc, #100]	; (405420 <system_init_flash+0x8c>)
  4053ba:	601a      	str	r2, [r3, #0]
}
  4053bc:	e023      	b.n	405406 <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  4053be:	687b      	ldr	r3, [r7, #4]
  4053c0:	4a18      	ldr	r2, [pc, #96]	; (405424 <system_init_flash+0x90>)
  4053c2:	4293      	cmp	r3, r2
  4053c4:	d803      	bhi.n	4053ce <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4053c6:	4b14      	ldr	r3, [pc, #80]	; (405418 <system_init_flash+0x84>)
  4053c8:	4a17      	ldr	r2, [pc, #92]	; (405428 <system_init_flash+0x94>)
  4053ca:	601a      	str	r2, [r3, #0]
}
  4053cc:	e01b      	b.n	405406 <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4053ce:	687b      	ldr	r3, [r7, #4]
  4053d0:	4a16      	ldr	r2, [pc, #88]	; (40542c <system_init_flash+0x98>)
  4053d2:	4293      	cmp	r3, r2
  4053d4:	d803      	bhi.n	4053de <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4053d6:	4b10      	ldr	r3, [pc, #64]	; (405418 <system_init_flash+0x84>)
  4053d8:	4a15      	ldr	r2, [pc, #84]	; (405430 <system_init_flash+0x9c>)
  4053da:	601a      	str	r2, [r3, #0]
}
  4053dc:	e013      	b.n	405406 <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4053de:	687b      	ldr	r3, [r7, #4]
  4053e0:	4a14      	ldr	r2, [pc, #80]	; (405434 <system_init_flash+0xa0>)
  4053e2:	4293      	cmp	r3, r2
  4053e4:	d804      	bhi.n	4053f0 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4053e6:	4b0c      	ldr	r3, [pc, #48]	; (405418 <system_init_flash+0x84>)
  4053e8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4053ec:	601a      	str	r2, [r3, #0]
}
  4053ee:	e00a      	b.n	405406 <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4053f0:	687b      	ldr	r3, [r7, #4]
  4053f2:	4a11      	ldr	r2, [pc, #68]	; (405438 <system_init_flash+0xa4>)
  4053f4:	4293      	cmp	r3, r2
  4053f6:	d803      	bhi.n	405400 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4053f8:	4b07      	ldr	r3, [pc, #28]	; (405418 <system_init_flash+0x84>)
  4053fa:	4a10      	ldr	r2, [pc, #64]	; (40543c <system_init_flash+0xa8>)
  4053fc:	601a      	str	r2, [r3, #0]
}
  4053fe:	e002      	b.n	405406 <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  405400:	4b05      	ldr	r3, [pc, #20]	; (405418 <system_init_flash+0x84>)
  405402:	4a0f      	ldr	r2, [pc, #60]	; (405440 <system_init_flash+0xac>)
  405404:	601a      	str	r2, [r3, #0]
}
  405406:	bf00      	nop
  405408:	370c      	adds	r7, #12
  40540a:	46bd      	mov	sp, r7
  40540c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405410:	4770      	bx	lr
  405412:	bf00      	nop
  405414:	015ef3bf 	.word	0x015ef3bf
  405418:	400e0c00 	.word	0x400e0c00
  40541c:	02bde77f 	.word	0x02bde77f
  405420:	04000100 	.word	0x04000100
  405424:	041cdb3f 	.word	0x041cdb3f
  405428:	04000200 	.word	0x04000200
  40542c:	057bceff 	.word	0x057bceff
  405430:	04000300 	.word	0x04000300
  405434:	06dac2bf 	.word	0x06dac2bf
  405438:	0839b67f 	.word	0x0839b67f
  40543c:	04000500 	.word	0x04000500
  405440:	04000600 	.word	0x04000600

00405444 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  405444:	b480      	push	{r7}
  405446:	b085      	sub	sp, #20
  405448:	af00      	add	r7, sp, #0
  40544a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  40544c:	4b10      	ldr	r3, [pc, #64]	; (405490 <_sbrk+0x4c>)
  40544e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  405450:	4b10      	ldr	r3, [pc, #64]	; (405494 <_sbrk+0x50>)
  405452:	681b      	ldr	r3, [r3, #0]
  405454:	2b00      	cmp	r3, #0
  405456:	d102      	bne.n	40545e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  405458:	4b0e      	ldr	r3, [pc, #56]	; (405494 <_sbrk+0x50>)
  40545a:	4a0f      	ldr	r2, [pc, #60]	; (405498 <_sbrk+0x54>)
  40545c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40545e:	4b0d      	ldr	r3, [pc, #52]	; (405494 <_sbrk+0x50>)
  405460:	681b      	ldr	r3, [r3, #0]
  405462:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  405464:	68ba      	ldr	r2, [r7, #8]
  405466:	687b      	ldr	r3, [r7, #4]
  405468:	441a      	add	r2, r3
  40546a:	68fb      	ldr	r3, [r7, #12]
  40546c:	429a      	cmp	r2, r3
  40546e:	dd02      	ble.n	405476 <_sbrk+0x32>
		return (caddr_t) -1;	
  405470:	f04f 33ff 	mov.w	r3, #4294967295
  405474:	e006      	b.n	405484 <_sbrk+0x40>
	}

	heap += incr;
  405476:	4b07      	ldr	r3, [pc, #28]	; (405494 <_sbrk+0x50>)
  405478:	681a      	ldr	r2, [r3, #0]
  40547a:	687b      	ldr	r3, [r7, #4]
  40547c:	4413      	add	r3, r2
  40547e:	4a05      	ldr	r2, [pc, #20]	; (405494 <_sbrk+0x50>)
  405480:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  405482:	68bb      	ldr	r3, [r7, #8]
}
  405484:	4618      	mov	r0, r3
  405486:	3714      	adds	r7, #20
  405488:	46bd      	mov	sp, r7
  40548a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40548e:	4770      	bx	lr
  405490:	2045fffc 	.word	0x2045fffc
  405494:	2040aef0 	.word	0x2040aef0
  405498:	2040d1f8 	.word	0x2040d1f8

0040549c <_close>:
{
	return -1;
}

extern int _close(int file)
{
  40549c:	b480      	push	{r7}
  40549e:	b083      	sub	sp, #12
  4054a0:	af00      	add	r7, sp, #0
  4054a2:	6078      	str	r0, [r7, #4]
	return -1;
  4054a4:	f04f 33ff 	mov.w	r3, #4294967295
}
  4054a8:	4618      	mov	r0, r3
  4054aa:	370c      	adds	r7, #12
  4054ac:	46bd      	mov	sp, r7
  4054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054b2:	4770      	bx	lr

004054b4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  4054b4:	b480      	push	{r7}
  4054b6:	b083      	sub	sp, #12
  4054b8:	af00      	add	r7, sp, #0
  4054ba:	6078      	str	r0, [r7, #4]
  4054bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  4054be:	683b      	ldr	r3, [r7, #0]
  4054c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4054c4:	605a      	str	r2, [r3, #4]

	return 0;
  4054c6:	2300      	movs	r3, #0
}
  4054c8:	4618      	mov	r0, r3
  4054ca:	370c      	adds	r7, #12
  4054cc:	46bd      	mov	sp, r7
  4054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054d2:	4770      	bx	lr

004054d4 <_isatty>:

extern int _isatty(int file)
{
  4054d4:	b480      	push	{r7}
  4054d6:	b083      	sub	sp, #12
  4054d8:	af00      	add	r7, sp, #0
  4054da:	6078      	str	r0, [r7, #4]
	return 1;
  4054dc:	2301      	movs	r3, #1
}
  4054de:	4618      	mov	r0, r3
  4054e0:	370c      	adds	r7, #12
  4054e2:	46bd      	mov	sp, r7
  4054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054e8:	4770      	bx	lr

004054ea <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  4054ea:	b480      	push	{r7}
  4054ec:	b085      	sub	sp, #20
  4054ee:	af00      	add	r7, sp, #0
  4054f0:	60f8      	str	r0, [r7, #12]
  4054f2:	60b9      	str	r1, [r7, #8]
  4054f4:	607a      	str	r2, [r7, #4]
	return 0;
  4054f6:	2300      	movs	r3, #0
}
  4054f8:	4618      	mov	r0, r3
  4054fa:	3714      	adds	r7, #20
  4054fc:	46bd      	mov	sp, r7
  4054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  405502:	4770      	bx	lr

00405504 <__aeabi_drsub>:
  405504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405508:	e002      	b.n	405510 <__adddf3>
  40550a:	bf00      	nop

0040550c <__aeabi_dsub>:
  40550c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405510 <__adddf3>:
  405510:	b530      	push	{r4, r5, lr}
  405512:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405516:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40551a:	ea94 0f05 	teq	r4, r5
  40551e:	bf08      	it	eq
  405520:	ea90 0f02 	teqeq	r0, r2
  405524:	bf1f      	itttt	ne
  405526:	ea54 0c00 	orrsne.w	ip, r4, r0
  40552a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40552e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405536:	f000 80e2 	beq.w	4056fe <__adddf3+0x1ee>
  40553a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40553e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405542:	bfb8      	it	lt
  405544:	426d      	neglt	r5, r5
  405546:	dd0c      	ble.n	405562 <__adddf3+0x52>
  405548:	442c      	add	r4, r5
  40554a:	ea80 0202 	eor.w	r2, r0, r2
  40554e:	ea81 0303 	eor.w	r3, r1, r3
  405552:	ea82 0000 	eor.w	r0, r2, r0
  405556:	ea83 0101 	eor.w	r1, r3, r1
  40555a:	ea80 0202 	eor.w	r2, r0, r2
  40555e:	ea81 0303 	eor.w	r3, r1, r3
  405562:	2d36      	cmp	r5, #54	; 0x36
  405564:	bf88      	it	hi
  405566:	bd30      	pophi	{r4, r5, pc}
  405568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40556c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405578:	d002      	beq.n	405580 <__adddf3+0x70>
  40557a:	4240      	negs	r0, r0
  40557c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405584:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40558c:	d002      	beq.n	405594 <__adddf3+0x84>
  40558e:	4252      	negs	r2, r2
  405590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405594:	ea94 0f05 	teq	r4, r5
  405598:	f000 80a7 	beq.w	4056ea <__adddf3+0x1da>
  40559c:	f1a4 0401 	sub.w	r4, r4, #1
  4055a0:	f1d5 0e20 	rsbs	lr, r5, #32
  4055a4:	db0d      	blt.n	4055c2 <__adddf3+0xb2>
  4055a6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4055aa:	fa22 f205 	lsr.w	r2, r2, r5
  4055ae:	1880      	adds	r0, r0, r2
  4055b0:	f141 0100 	adc.w	r1, r1, #0
  4055b4:	fa03 f20e 	lsl.w	r2, r3, lr
  4055b8:	1880      	adds	r0, r0, r2
  4055ba:	fa43 f305 	asr.w	r3, r3, r5
  4055be:	4159      	adcs	r1, r3
  4055c0:	e00e      	b.n	4055e0 <__adddf3+0xd0>
  4055c2:	f1a5 0520 	sub.w	r5, r5, #32
  4055c6:	f10e 0e20 	add.w	lr, lr, #32
  4055ca:	2a01      	cmp	r2, #1
  4055cc:	fa03 fc0e 	lsl.w	ip, r3, lr
  4055d0:	bf28      	it	cs
  4055d2:	f04c 0c02 	orrcs.w	ip, ip, #2
  4055d6:	fa43 f305 	asr.w	r3, r3, r5
  4055da:	18c0      	adds	r0, r0, r3
  4055dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4055e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4055e4:	d507      	bpl.n	4055f6 <__adddf3+0xe6>
  4055e6:	f04f 0e00 	mov.w	lr, #0
  4055ea:	f1dc 0c00 	rsbs	ip, ip, #0
  4055ee:	eb7e 0000 	sbcs.w	r0, lr, r0
  4055f2:	eb6e 0101 	sbc.w	r1, lr, r1
  4055f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4055fa:	d31b      	bcc.n	405634 <__adddf3+0x124>
  4055fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405600:	d30c      	bcc.n	40561c <__adddf3+0x10c>
  405602:	0849      	lsrs	r1, r1, #1
  405604:	ea5f 0030 	movs.w	r0, r0, rrx
  405608:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40560c:	f104 0401 	add.w	r4, r4, #1
  405610:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405618:	f080 809a 	bcs.w	405750 <__adddf3+0x240>
  40561c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405620:	bf08      	it	eq
  405622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405626:	f150 0000 	adcs.w	r0, r0, #0
  40562a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40562e:	ea41 0105 	orr.w	r1, r1, r5
  405632:	bd30      	pop	{r4, r5, pc}
  405634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405638:	4140      	adcs	r0, r0
  40563a:	eb41 0101 	adc.w	r1, r1, r1
  40563e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405642:	f1a4 0401 	sub.w	r4, r4, #1
  405646:	d1e9      	bne.n	40561c <__adddf3+0x10c>
  405648:	f091 0f00 	teq	r1, #0
  40564c:	bf04      	itt	eq
  40564e:	4601      	moveq	r1, r0
  405650:	2000      	moveq	r0, #0
  405652:	fab1 f381 	clz	r3, r1
  405656:	bf08      	it	eq
  405658:	3320      	addeq	r3, #32
  40565a:	f1a3 030b 	sub.w	r3, r3, #11
  40565e:	f1b3 0220 	subs.w	r2, r3, #32
  405662:	da0c      	bge.n	40567e <__adddf3+0x16e>
  405664:	320c      	adds	r2, #12
  405666:	dd08      	ble.n	40567a <__adddf3+0x16a>
  405668:	f102 0c14 	add.w	ip, r2, #20
  40566c:	f1c2 020c 	rsb	r2, r2, #12
  405670:	fa01 f00c 	lsl.w	r0, r1, ip
  405674:	fa21 f102 	lsr.w	r1, r1, r2
  405678:	e00c      	b.n	405694 <__adddf3+0x184>
  40567a:	f102 0214 	add.w	r2, r2, #20
  40567e:	bfd8      	it	le
  405680:	f1c2 0c20 	rsble	ip, r2, #32
  405684:	fa01 f102 	lsl.w	r1, r1, r2
  405688:	fa20 fc0c 	lsr.w	ip, r0, ip
  40568c:	bfdc      	itt	le
  40568e:	ea41 010c 	orrle.w	r1, r1, ip
  405692:	4090      	lslle	r0, r2
  405694:	1ae4      	subs	r4, r4, r3
  405696:	bfa2      	ittt	ge
  405698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40569c:	4329      	orrge	r1, r5
  40569e:	bd30      	popge	{r4, r5, pc}
  4056a0:	ea6f 0404 	mvn.w	r4, r4
  4056a4:	3c1f      	subs	r4, #31
  4056a6:	da1c      	bge.n	4056e2 <__adddf3+0x1d2>
  4056a8:	340c      	adds	r4, #12
  4056aa:	dc0e      	bgt.n	4056ca <__adddf3+0x1ba>
  4056ac:	f104 0414 	add.w	r4, r4, #20
  4056b0:	f1c4 0220 	rsb	r2, r4, #32
  4056b4:	fa20 f004 	lsr.w	r0, r0, r4
  4056b8:	fa01 f302 	lsl.w	r3, r1, r2
  4056bc:	ea40 0003 	orr.w	r0, r0, r3
  4056c0:	fa21 f304 	lsr.w	r3, r1, r4
  4056c4:	ea45 0103 	orr.w	r1, r5, r3
  4056c8:	bd30      	pop	{r4, r5, pc}
  4056ca:	f1c4 040c 	rsb	r4, r4, #12
  4056ce:	f1c4 0220 	rsb	r2, r4, #32
  4056d2:	fa20 f002 	lsr.w	r0, r0, r2
  4056d6:	fa01 f304 	lsl.w	r3, r1, r4
  4056da:	ea40 0003 	orr.w	r0, r0, r3
  4056de:	4629      	mov	r1, r5
  4056e0:	bd30      	pop	{r4, r5, pc}
  4056e2:	fa21 f004 	lsr.w	r0, r1, r4
  4056e6:	4629      	mov	r1, r5
  4056e8:	bd30      	pop	{r4, r5, pc}
  4056ea:	f094 0f00 	teq	r4, #0
  4056ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4056f2:	bf06      	itte	eq
  4056f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4056f8:	3401      	addeq	r4, #1
  4056fa:	3d01      	subne	r5, #1
  4056fc:	e74e      	b.n	40559c <__adddf3+0x8c>
  4056fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405702:	bf18      	it	ne
  405704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405708:	d029      	beq.n	40575e <__adddf3+0x24e>
  40570a:	ea94 0f05 	teq	r4, r5
  40570e:	bf08      	it	eq
  405710:	ea90 0f02 	teqeq	r0, r2
  405714:	d005      	beq.n	405722 <__adddf3+0x212>
  405716:	ea54 0c00 	orrs.w	ip, r4, r0
  40571a:	bf04      	itt	eq
  40571c:	4619      	moveq	r1, r3
  40571e:	4610      	moveq	r0, r2
  405720:	bd30      	pop	{r4, r5, pc}
  405722:	ea91 0f03 	teq	r1, r3
  405726:	bf1e      	ittt	ne
  405728:	2100      	movne	r1, #0
  40572a:	2000      	movne	r0, #0
  40572c:	bd30      	popne	{r4, r5, pc}
  40572e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405732:	d105      	bne.n	405740 <__adddf3+0x230>
  405734:	0040      	lsls	r0, r0, #1
  405736:	4149      	adcs	r1, r1
  405738:	bf28      	it	cs
  40573a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40573e:	bd30      	pop	{r4, r5, pc}
  405740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405744:	bf3c      	itt	cc
  405746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40574a:	bd30      	popcc	{r4, r5, pc}
  40574c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405758:	f04f 0000 	mov.w	r0, #0
  40575c:	bd30      	pop	{r4, r5, pc}
  40575e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405762:	bf1a      	itte	ne
  405764:	4619      	movne	r1, r3
  405766:	4610      	movne	r0, r2
  405768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40576c:	bf1c      	itt	ne
  40576e:	460b      	movne	r3, r1
  405770:	4602      	movne	r2, r0
  405772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405776:	bf06      	itte	eq
  405778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40577c:	ea91 0f03 	teqeq	r1, r3
  405780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405784:	bd30      	pop	{r4, r5, pc}
  405786:	bf00      	nop

00405788 <__aeabi_ui2d>:
  405788:	f090 0f00 	teq	r0, #0
  40578c:	bf04      	itt	eq
  40578e:	2100      	moveq	r1, #0
  405790:	4770      	bxeq	lr
  405792:	b530      	push	{r4, r5, lr}
  405794:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405798:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40579c:	f04f 0500 	mov.w	r5, #0
  4057a0:	f04f 0100 	mov.w	r1, #0
  4057a4:	e750      	b.n	405648 <__adddf3+0x138>
  4057a6:	bf00      	nop

004057a8 <__aeabi_i2d>:
  4057a8:	f090 0f00 	teq	r0, #0
  4057ac:	bf04      	itt	eq
  4057ae:	2100      	moveq	r1, #0
  4057b0:	4770      	bxeq	lr
  4057b2:	b530      	push	{r4, r5, lr}
  4057b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4057b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4057bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4057c0:	bf48      	it	mi
  4057c2:	4240      	negmi	r0, r0
  4057c4:	f04f 0100 	mov.w	r1, #0
  4057c8:	e73e      	b.n	405648 <__adddf3+0x138>
  4057ca:	bf00      	nop

004057cc <__aeabi_f2d>:
  4057cc:	0042      	lsls	r2, r0, #1
  4057ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4057d2:	ea4f 0131 	mov.w	r1, r1, rrx
  4057d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4057da:	bf1f      	itttt	ne
  4057dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4057e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4057e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4057e8:	4770      	bxne	lr
  4057ea:	f092 0f00 	teq	r2, #0
  4057ee:	bf14      	ite	ne
  4057f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4057f4:	4770      	bxeq	lr
  4057f6:	b530      	push	{r4, r5, lr}
  4057f8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4057fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405804:	e720      	b.n	405648 <__adddf3+0x138>
  405806:	bf00      	nop

00405808 <__aeabi_ul2d>:
  405808:	ea50 0201 	orrs.w	r2, r0, r1
  40580c:	bf08      	it	eq
  40580e:	4770      	bxeq	lr
  405810:	b530      	push	{r4, r5, lr}
  405812:	f04f 0500 	mov.w	r5, #0
  405816:	e00a      	b.n	40582e <__aeabi_l2d+0x16>

00405818 <__aeabi_l2d>:
  405818:	ea50 0201 	orrs.w	r2, r0, r1
  40581c:	bf08      	it	eq
  40581e:	4770      	bxeq	lr
  405820:	b530      	push	{r4, r5, lr}
  405822:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405826:	d502      	bpl.n	40582e <__aeabi_l2d+0x16>
  405828:	4240      	negs	r0, r0
  40582a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40582e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405832:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405836:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40583a:	f43f aedc 	beq.w	4055f6 <__adddf3+0xe6>
  40583e:	f04f 0203 	mov.w	r2, #3
  405842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405846:	bf18      	it	ne
  405848:	3203      	addne	r2, #3
  40584a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40584e:	bf18      	it	ne
  405850:	3203      	addne	r2, #3
  405852:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405856:	f1c2 0320 	rsb	r3, r2, #32
  40585a:	fa00 fc03 	lsl.w	ip, r0, r3
  40585e:	fa20 f002 	lsr.w	r0, r0, r2
  405862:	fa01 fe03 	lsl.w	lr, r1, r3
  405866:	ea40 000e 	orr.w	r0, r0, lr
  40586a:	fa21 f102 	lsr.w	r1, r1, r2
  40586e:	4414      	add	r4, r2
  405870:	e6c1      	b.n	4055f6 <__adddf3+0xe6>
  405872:	bf00      	nop

00405874 <__aeabi_dmul>:
  405874:	b570      	push	{r4, r5, r6, lr}
  405876:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40587a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40587e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405882:	bf1d      	ittte	ne
  405884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405888:	ea94 0f0c 	teqne	r4, ip
  40588c:	ea95 0f0c 	teqne	r5, ip
  405890:	f000 f8de 	bleq	405a50 <__aeabi_dmul+0x1dc>
  405894:	442c      	add	r4, r5
  405896:	ea81 0603 	eor.w	r6, r1, r3
  40589a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40589e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4058a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4058a6:	bf18      	it	ne
  4058a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4058ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4058b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4058b4:	d038      	beq.n	405928 <__aeabi_dmul+0xb4>
  4058b6:	fba0 ce02 	umull	ip, lr, r0, r2
  4058ba:	f04f 0500 	mov.w	r5, #0
  4058be:	fbe1 e502 	umlal	lr, r5, r1, r2
  4058c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4058c6:	fbe0 e503 	umlal	lr, r5, r0, r3
  4058ca:	f04f 0600 	mov.w	r6, #0
  4058ce:	fbe1 5603 	umlal	r5, r6, r1, r3
  4058d2:	f09c 0f00 	teq	ip, #0
  4058d6:	bf18      	it	ne
  4058d8:	f04e 0e01 	orrne.w	lr, lr, #1
  4058dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4058e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4058e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4058e8:	d204      	bcs.n	4058f4 <__aeabi_dmul+0x80>
  4058ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4058ee:	416d      	adcs	r5, r5
  4058f0:	eb46 0606 	adc.w	r6, r6, r6
  4058f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4058f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4058fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405900:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405904:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405908:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40590c:	bf88      	it	hi
  40590e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405912:	d81e      	bhi.n	405952 <__aeabi_dmul+0xde>
  405914:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405918:	bf08      	it	eq
  40591a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40591e:	f150 0000 	adcs.w	r0, r0, #0
  405922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405926:	bd70      	pop	{r4, r5, r6, pc}
  405928:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40592c:	ea46 0101 	orr.w	r1, r6, r1
  405930:	ea40 0002 	orr.w	r0, r0, r2
  405934:	ea81 0103 	eor.w	r1, r1, r3
  405938:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40593c:	bfc2      	ittt	gt
  40593e:	ebd4 050c 	rsbsgt	r5, r4, ip
  405942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405946:	bd70      	popgt	{r4, r5, r6, pc}
  405948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40594c:	f04f 0e00 	mov.w	lr, #0
  405950:	3c01      	subs	r4, #1
  405952:	f300 80ab 	bgt.w	405aac <__aeabi_dmul+0x238>
  405956:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40595a:	bfde      	ittt	le
  40595c:	2000      	movle	r0, #0
  40595e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405962:	bd70      	pople	{r4, r5, r6, pc}
  405964:	f1c4 0400 	rsb	r4, r4, #0
  405968:	3c20      	subs	r4, #32
  40596a:	da35      	bge.n	4059d8 <__aeabi_dmul+0x164>
  40596c:	340c      	adds	r4, #12
  40596e:	dc1b      	bgt.n	4059a8 <__aeabi_dmul+0x134>
  405970:	f104 0414 	add.w	r4, r4, #20
  405974:	f1c4 0520 	rsb	r5, r4, #32
  405978:	fa00 f305 	lsl.w	r3, r0, r5
  40597c:	fa20 f004 	lsr.w	r0, r0, r4
  405980:	fa01 f205 	lsl.w	r2, r1, r5
  405984:	ea40 0002 	orr.w	r0, r0, r2
  405988:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40598c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405990:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405994:	fa21 f604 	lsr.w	r6, r1, r4
  405998:	eb42 0106 	adc.w	r1, r2, r6
  40599c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4059a0:	bf08      	it	eq
  4059a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4059a6:	bd70      	pop	{r4, r5, r6, pc}
  4059a8:	f1c4 040c 	rsb	r4, r4, #12
  4059ac:	f1c4 0520 	rsb	r5, r4, #32
  4059b0:	fa00 f304 	lsl.w	r3, r0, r4
  4059b4:	fa20 f005 	lsr.w	r0, r0, r5
  4059b8:	fa01 f204 	lsl.w	r2, r1, r4
  4059bc:	ea40 0002 	orr.w	r0, r0, r2
  4059c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4059c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4059c8:	f141 0100 	adc.w	r1, r1, #0
  4059cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4059d0:	bf08      	it	eq
  4059d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4059d6:	bd70      	pop	{r4, r5, r6, pc}
  4059d8:	f1c4 0520 	rsb	r5, r4, #32
  4059dc:	fa00 f205 	lsl.w	r2, r0, r5
  4059e0:	ea4e 0e02 	orr.w	lr, lr, r2
  4059e4:	fa20 f304 	lsr.w	r3, r0, r4
  4059e8:	fa01 f205 	lsl.w	r2, r1, r5
  4059ec:	ea43 0302 	orr.w	r3, r3, r2
  4059f0:	fa21 f004 	lsr.w	r0, r1, r4
  4059f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4059f8:	fa21 f204 	lsr.w	r2, r1, r4
  4059fc:	ea20 0002 	bic.w	r0, r0, r2
  405a00:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405a04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405a08:	bf08      	it	eq
  405a0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405a0e:	bd70      	pop	{r4, r5, r6, pc}
  405a10:	f094 0f00 	teq	r4, #0
  405a14:	d10f      	bne.n	405a36 <__aeabi_dmul+0x1c2>
  405a16:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405a1a:	0040      	lsls	r0, r0, #1
  405a1c:	eb41 0101 	adc.w	r1, r1, r1
  405a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405a24:	bf08      	it	eq
  405a26:	3c01      	subeq	r4, #1
  405a28:	d0f7      	beq.n	405a1a <__aeabi_dmul+0x1a6>
  405a2a:	ea41 0106 	orr.w	r1, r1, r6
  405a2e:	f095 0f00 	teq	r5, #0
  405a32:	bf18      	it	ne
  405a34:	4770      	bxne	lr
  405a36:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405a3a:	0052      	lsls	r2, r2, #1
  405a3c:	eb43 0303 	adc.w	r3, r3, r3
  405a40:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405a44:	bf08      	it	eq
  405a46:	3d01      	subeq	r5, #1
  405a48:	d0f7      	beq.n	405a3a <__aeabi_dmul+0x1c6>
  405a4a:	ea43 0306 	orr.w	r3, r3, r6
  405a4e:	4770      	bx	lr
  405a50:	ea94 0f0c 	teq	r4, ip
  405a54:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405a58:	bf18      	it	ne
  405a5a:	ea95 0f0c 	teqne	r5, ip
  405a5e:	d00c      	beq.n	405a7a <__aeabi_dmul+0x206>
  405a60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405a64:	bf18      	it	ne
  405a66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405a6a:	d1d1      	bne.n	405a10 <__aeabi_dmul+0x19c>
  405a6c:	ea81 0103 	eor.w	r1, r1, r3
  405a70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405a74:	f04f 0000 	mov.w	r0, #0
  405a78:	bd70      	pop	{r4, r5, r6, pc}
  405a7a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405a7e:	bf06      	itte	eq
  405a80:	4610      	moveq	r0, r2
  405a82:	4619      	moveq	r1, r3
  405a84:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405a88:	d019      	beq.n	405abe <__aeabi_dmul+0x24a>
  405a8a:	ea94 0f0c 	teq	r4, ip
  405a8e:	d102      	bne.n	405a96 <__aeabi_dmul+0x222>
  405a90:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405a94:	d113      	bne.n	405abe <__aeabi_dmul+0x24a>
  405a96:	ea95 0f0c 	teq	r5, ip
  405a9a:	d105      	bne.n	405aa8 <__aeabi_dmul+0x234>
  405a9c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405aa0:	bf1c      	itt	ne
  405aa2:	4610      	movne	r0, r2
  405aa4:	4619      	movne	r1, r3
  405aa6:	d10a      	bne.n	405abe <__aeabi_dmul+0x24a>
  405aa8:	ea81 0103 	eor.w	r1, r1, r3
  405aac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405ab0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405ab4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405ab8:	f04f 0000 	mov.w	r0, #0
  405abc:	bd70      	pop	{r4, r5, r6, pc}
  405abe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405ac2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405ac6:	bd70      	pop	{r4, r5, r6, pc}

00405ac8 <__aeabi_ddiv>:
  405ac8:	b570      	push	{r4, r5, r6, lr}
  405aca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405ace:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405ad2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405ad6:	bf1d      	ittte	ne
  405ad8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405adc:	ea94 0f0c 	teqne	r4, ip
  405ae0:	ea95 0f0c 	teqne	r5, ip
  405ae4:	f000 f8a7 	bleq	405c36 <__aeabi_ddiv+0x16e>
  405ae8:	eba4 0405 	sub.w	r4, r4, r5
  405aec:	ea81 0e03 	eor.w	lr, r1, r3
  405af0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405af4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405af8:	f000 8088 	beq.w	405c0c <__aeabi_ddiv+0x144>
  405afc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405b00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405b04:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405b08:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405b0c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405b10:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405b14:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405b18:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405b1c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405b20:	429d      	cmp	r5, r3
  405b22:	bf08      	it	eq
  405b24:	4296      	cmpeq	r6, r2
  405b26:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405b2a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405b2e:	d202      	bcs.n	405b36 <__aeabi_ddiv+0x6e>
  405b30:	085b      	lsrs	r3, r3, #1
  405b32:	ea4f 0232 	mov.w	r2, r2, rrx
  405b36:	1ab6      	subs	r6, r6, r2
  405b38:	eb65 0503 	sbc.w	r5, r5, r3
  405b3c:	085b      	lsrs	r3, r3, #1
  405b3e:	ea4f 0232 	mov.w	r2, r2, rrx
  405b42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  405b46:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405b4a:	ebb6 0e02 	subs.w	lr, r6, r2
  405b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405b52:	bf22      	ittt	cs
  405b54:	1ab6      	subcs	r6, r6, r2
  405b56:	4675      	movcs	r5, lr
  405b58:	ea40 000c 	orrcs.w	r0, r0, ip
  405b5c:	085b      	lsrs	r3, r3, #1
  405b5e:	ea4f 0232 	mov.w	r2, r2, rrx
  405b62:	ebb6 0e02 	subs.w	lr, r6, r2
  405b66:	eb75 0e03 	sbcs.w	lr, r5, r3
  405b6a:	bf22      	ittt	cs
  405b6c:	1ab6      	subcs	r6, r6, r2
  405b6e:	4675      	movcs	r5, lr
  405b70:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405b74:	085b      	lsrs	r3, r3, #1
  405b76:	ea4f 0232 	mov.w	r2, r2, rrx
  405b7a:	ebb6 0e02 	subs.w	lr, r6, r2
  405b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405b82:	bf22      	ittt	cs
  405b84:	1ab6      	subcs	r6, r6, r2
  405b86:	4675      	movcs	r5, lr
  405b88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405b8c:	085b      	lsrs	r3, r3, #1
  405b8e:	ea4f 0232 	mov.w	r2, r2, rrx
  405b92:	ebb6 0e02 	subs.w	lr, r6, r2
  405b96:	eb75 0e03 	sbcs.w	lr, r5, r3
  405b9a:	bf22      	ittt	cs
  405b9c:	1ab6      	subcs	r6, r6, r2
  405b9e:	4675      	movcs	r5, lr
  405ba0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405ba4:	ea55 0e06 	orrs.w	lr, r5, r6
  405ba8:	d018      	beq.n	405bdc <__aeabi_ddiv+0x114>
  405baa:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405bae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405bb2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405bb6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405bba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405bbe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405bc2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405bc6:	d1c0      	bne.n	405b4a <__aeabi_ddiv+0x82>
  405bc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405bcc:	d10b      	bne.n	405be6 <__aeabi_ddiv+0x11e>
  405bce:	ea41 0100 	orr.w	r1, r1, r0
  405bd2:	f04f 0000 	mov.w	r0, #0
  405bd6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405bda:	e7b6      	b.n	405b4a <__aeabi_ddiv+0x82>
  405bdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405be0:	bf04      	itt	eq
  405be2:	4301      	orreq	r1, r0
  405be4:	2000      	moveq	r0, #0
  405be6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405bea:	bf88      	it	hi
  405bec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405bf0:	f63f aeaf 	bhi.w	405952 <__aeabi_dmul+0xde>
  405bf4:	ebb5 0c03 	subs.w	ip, r5, r3
  405bf8:	bf04      	itt	eq
  405bfa:	ebb6 0c02 	subseq.w	ip, r6, r2
  405bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405c02:	f150 0000 	adcs.w	r0, r0, #0
  405c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405c0a:	bd70      	pop	{r4, r5, r6, pc}
  405c0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405c10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405c14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405c18:	bfc2      	ittt	gt
  405c1a:	ebd4 050c 	rsbsgt	r5, r4, ip
  405c1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405c22:	bd70      	popgt	{r4, r5, r6, pc}
  405c24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405c28:	f04f 0e00 	mov.w	lr, #0
  405c2c:	3c01      	subs	r4, #1
  405c2e:	e690      	b.n	405952 <__aeabi_dmul+0xde>
  405c30:	ea45 0e06 	orr.w	lr, r5, r6
  405c34:	e68d      	b.n	405952 <__aeabi_dmul+0xde>
  405c36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405c3a:	ea94 0f0c 	teq	r4, ip
  405c3e:	bf08      	it	eq
  405c40:	ea95 0f0c 	teqeq	r5, ip
  405c44:	f43f af3b 	beq.w	405abe <__aeabi_dmul+0x24a>
  405c48:	ea94 0f0c 	teq	r4, ip
  405c4c:	d10a      	bne.n	405c64 <__aeabi_ddiv+0x19c>
  405c4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405c52:	f47f af34 	bne.w	405abe <__aeabi_dmul+0x24a>
  405c56:	ea95 0f0c 	teq	r5, ip
  405c5a:	f47f af25 	bne.w	405aa8 <__aeabi_dmul+0x234>
  405c5e:	4610      	mov	r0, r2
  405c60:	4619      	mov	r1, r3
  405c62:	e72c      	b.n	405abe <__aeabi_dmul+0x24a>
  405c64:	ea95 0f0c 	teq	r5, ip
  405c68:	d106      	bne.n	405c78 <__aeabi_ddiv+0x1b0>
  405c6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405c6e:	f43f aefd 	beq.w	405a6c <__aeabi_dmul+0x1f8>
  405c72:	4610      	mov	r0, r2
  405c74:	4619      	mov	r1, r3
  405c76:	e722      	b.n	405abe <__aeabi_dmul+0x24a>
  405c78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405c7c:	bf18      	it	ne
  405c7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405c82:	f47f aec5 	bne.w	405a10 <__aeabi_dmul+0x19c>
  405c86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405c8a:	f47f af0d 	bne.w	405aa8 <__aeabi_dmul+0x234>
  405c8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  405c92:	f47f aeeb 	bne.w	405a6c <__aeabi_dmul+0x1f8>
  405c96:	e712      	b.n	405abe <__aeabi_dmul+0x24a>

00405c98 <__aeabi_d2iz>:
  405c98:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405c9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405ca0:	d215      	bcs.n	405cce <__aeabi_d2iz+0x36>
  405ca2:	d511      	bpl.n	405cc8 <__aeabi_d2iz+0x30>
  405ca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  405ca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  405cac:	d912      	bls.n	405cd4 <__aeabi_d2iz+0x3c>
  405cae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405cb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  405cba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405cbe:	fa23 f002 	lsr.w	r0, r3, r2
  405cc2:	bf18      	it	ne
  405cc4:	4240      	negne	r0, r0
  405cc6:	4770      	bx	lr
  405cc8:	f04f 0000 	mov.w	r0, #0
  405ccc:	4770      	bx	lr
  405cce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405cd2:	d105      	bne.n	405ce0 <__aeabi_d2iz+0x48>
  405cd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  405cd8:	bf08      	it	eq
  405cda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405cde:	4770      	bx	lr
  405ce0:	f04f 0000 	mov.w	r0, #0
  405ce4:	4770      	bx	lr
  405ce6:	bf00      	nop

00405ce8 <__libc_init_array>:
  405ce8:	b570      	push	{r4, r5, r6, lr}
  405cea:	4e0f      	ldr	r6, [pc, #60]	; (405d28 <__libc_init_array+0x40>)
  405cec:	4d0f      	ldr	r5, [pc, #60]	; (405d2c <__libc_init_array+0x44>)
  405cee:	1b76      	subs	r6, r6, r5
  405cf0:	10b6      	asrs	r6, r6, #2
  405cf2:	bf18      	it	ne
  405cf4:	2400      	movne	r4, #0
  405cf6:	d005      	beq.n	405d04 <__libc_init_array+0x1c>
  405cf8:	3401      	adds	r4, #1
  405cfa:	f855 3b04 	ldr.w	r3, [r5], #4
  405cfe:	4798      	blx	r3
  405d00:	42a6      	cmp	r6, r4
  405d02:	d1f9      	bne.n	405cf8 <__libc_init_array+0x10>
  405d04:	4e0a      	ldr	r6, [pc, #40]	; (405d30 <__libc_init_array+0x48>)
  405d06:	4d0b      	ldr	r5, [pc, #44]	; (405d34 <__libc_init_array+0x4c>)
  405d08:	1b76      	subs	r6, r6, r5
  405d0a:	f003 f987 	bl	40901c <_init>
  405d0e:	10b6      	asrs	r6, r6, #2
  405d10:	bf18      	it	ne
  405d12:	2400      	movne	r4, #0
  405d14:	d006      	beq.n	405d24 <__libc_init_array+0x3c>
  405d16:	3401      	adds	r4, #1
  405d18:	f855 3b04 	ldr.w	r3, [r5], #4
  405d1c:	4798      	blx	r3
  405d1e:	42a6      	cmp	r6, r4
  405d20:	d1f9      	bne.n	405d16 <__libc_init_array+0x2e>
  405d22:	bd70      	pop	{r4, r5, r6, pc}
  405d24:	bd70      	pop	{r4, r5, r6, pc}
  405d26:	bf00      	nop
  405d28:	00409028 	.word	0x00409028
  405d2c:	00409028 	.word	0x00409028
  405d30:	00409030 	.word	0x00409030
  405d34:	00409028 	.word	0x00409028

00405d38 <iprintf>:
  405d38:	b40f      	push	{r0, r1, r2, r3}
  405d3a:	b500      	push	{lr}
  405d3c:	4907      	ldr	r1, [pc, #28]	; (405d5c <iprintf+0x24>)
  405d3e:	b083      	sub	sp, #12
  405d40:	ab04      	add	r3, sp, #16
  405d42:	6808      	ldr	r0, [r1, #0]
  405d44:	f853 2b04 	ldr.w	r2, [r3], #4
  405d48:	6881      	ldr	r1, [r0, #8]
  405d4a:	9301      	str	r3, [sp, #4]
  405d4c:	f000 faf8 	bl	406340 <_vfiprintf_r>
  405d50:	b003      	add	sp, #12
  405d52:	f85d eb04 	ldr.w	lr, [sp], #4
  405d56:	b004      	add	sp, #16
  405d58:	4770      	bx	lr
  405d5a:	bf00      	nop
  405d5c:	2040003c 	.word	0x2040003c

00405d60 <memcpy>:
  405d60:	4684      	mov	ip, r0
  405d62:	ea41 0300 	orr.w	r3, r1, r0
  405d66:	f013 0303 	ands.w	r3, r3, #3
  405d6a:	d16d      	bne.n	405e48 <memcpy+0xe8>
  405d6c:	3a40      	subs	r2, #64	; 0x40
  405d6e:	d341      	bcc.n	405df4 <memcpy+0x94>
  405d70:	f851 3b04 	ldr.w	r3, [r1], #4
  405d74:	f840 3b04 	str.w	r3, [r0], #4
  405d78:	f851 3b04 	ldr.w	r3, [r1], #4
  405d7c:	f840 3b04 	str.w	r3, [r0], #4
  405d80:	f851 3b04 	ldr.w	r3, [r1], #4
  405d84:	f840 3b04 	str.w	r3, [r0], #4
  405d88:	f851 3b04 	ldr.w	r3, [r1], #4
  405d8c:	f840 3b04 	str.w	r3, [r0], #4
  405d90:	f851 3b04 	ldr.w	r3, [r1], #4
  405d94:	f840 3b04 	str.w	r3, [r0], #4
  405d98:	f851 3b04 	ldr.w	r3, [r1], #4
  405d9c:	f840 3b04 	str.w	r3, [r0], #4
  405da0:	f851 3b04 	ldr.w	r3, [r1], #4
  405da4:	f840 3b04 	str.w	r3, [r0], #4
  405da8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dac:	f840 3b04 	str.w	r3, [r0], #4
  405db0:	f851 3b04 	ldr.w	r3, [r1], #4
  405db4:	f840 3b04 	str.w	r3, [r0], #4
  405db8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dbc:	f840 3b04 	str.w	r3, [r0], #4
  405dc0:	f851 3b04 	ldr.w	r3, [r1], #4
  405dc4:	f840 3b04 	str.w	r3, [r0], #4
  405dc8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dcc:	f840 3b04 	str.w	r3, [r0], #4
  405dd0:	f851 3b04 	ldr.w	r3, [r1], #4
  405dd4:	f840 3b04 	str.w	r3, [r0], #4
  405dd8:	f851 3b04 	ldr.w	r3, [r1], #4
  405ddc:	f840 3b04 	str.w	r3, [r0], #4
  405de0:	f851 3b04 	ldr.w	r3, [r1], #4
  405de4:	f840 3b04 	str.w	r3, [r0], #4
  405de8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dec:	f840 3b04 	str.w	r3, [r0], #4
  405df0:	3a40      	subs	r2, #64	; 0x40
  405df2:	d2bd      	bcs.n	405d70 <memcpy+0x10>
  405df4:	3230      	adds	r2, #48	; 0x30
  405df6:	d311      	bcc.n	405e1c <memcpy+0xbc>
  405df8:	f851 3b04 	ldr.w	r3, [r1], #4
  405dfc:	f840 3b04 	str.w	r3, [r0], #4
  405e00:	f851 3b04 	ldr.w	r3, [r1], #4
  405e04:	f840 3b04 	str.w	r3, [r0], #4
  405e08:	f851 3b04 	ldr.w	r3, [r1], #4
  405e0c:	f840 3b04 	str.w	r3, [r0], #4
  405e10:	f851 3b04 	ldr.w	r3, [r1], #4
  405e14:	f840 3b04 	str.w	r3, [r0], #4
  405e18:	3a10      	subs	r2, #16
  405e1a:	d2ed      	bcs.n	405df8 <memcpy+0x98>
  405e1c:	320c      	adds	r2, #12
  405e1e:	d305      	bcc.n	405e2c <memcpy+0xcc>
  405e20:	f851 3b04 	ldr.w	r3, [r1], #4
  405e24:	f840 3b04 	str.w	r3, [r0], #4
  405e28:	3a04      	subs	r2, #4
  405e2a:	d2f9      	bcs.n	405e20 <memcpy+0xc0>
  405e2c:	3204      	adds	r2, #4
  405e2e:	d008      	beq.n	405e42 <memcpy+0xe2>
  405e30:	07d2      	lsls	r2, r2, #31
  405e32:	bf1c      	itt	ne
  405e34:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405e38:	f800 3b01 	strbne.w	r3, [r0], #1
  405e3c:	d301      	bcc.n	405e42 <memcpy+0xe2>
  405e3e:	880b      	ldrh	r3, [r1, #0]
  405e40:	8003      	strh	r3, [r0, #0]
  405e42:	4660      	mov	r0, ip
  405e44:	4770      	bx	lr
  405e46:	bf00      	nop
  405e48:	2a08      	cmp	r2, #8
  405e4a:	d313      	bcc.n	405e74 <memcpy+0x114>
  405e4c:	078b      	lsls	r3, r1, #30
  405e4e:	d08d      	beq.n	405d6c <memcpy+0xc>
  405e50:	f010 0303 	ands.w	r3, r0, #3
  405e54:	d08a      	beq.n	405d6c <memcpy+0xc>
  405e56:	f1c3 0304 	rsb	r3, r3, #4
  405e5a:	1ad2      	subs	r2, r2, r3
  405e5c:	07db      	lsls	r3, r3, #31
  405e5e:	bf1c      	itt	ne
  405e60:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405e64:	f800 3b01 	strbne.w	r3, [r0], #1
  405e68:	d380      	bcc.n	405d6c <memcpy+0xc>
  405e6a:	f831 3b02 	ldrh.w	r3, [r1], #2
  405e6e:	f820 3b02 	strh.w	r3, [r0], #2
  405e72:	e77b      	b.n	405d6c <memcpy+0xc>
  405e74:	3a04      	subs	r2, #4
  405e76:	d3d9      	bcc.n	405e2c <memcpy+0xcc>
  405e78:	3a01      	subs	r2, #1
  405e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
  405e7e:	f800 3b01 	strb.w	r3, [r0], #1
  405e82:	d2f9      	bcs.n	405e78 <memcpy+0x118>
  405e84:	780b      	ldrb	r3, [r1, #0]
  405e86:	7003      	strb	r3, [r0, #0]
  405e88:	784b      	ldrb	r3, [r1, #1]
  405e8a:	7043      	strb	r3, [r0, #1]
  405e8c:	788b      	ldrb	r3, [r1, #2]
  405e8e:	7083      	strb	r3, [r0, #2]
  405e90:	4660      	mov	r0, ip
  405e92:	4770      	bx	lr

00405e94 <memset>:
  405e94:	b470      	push	{r4, r5, r6}
  405e96:	0786      	lsls	r6, r0, #30
  405e98:	d046      	beq.n	405f28 <memset+0x94>
  405e9a:	1e54      	subs	r4, r2, #1
  405e9c:	2a00      	cmp	r2, #0
  405e9e:	d041      	beq.n	405f24 <memset+0x90>
  405ea0:	b2ca      	uxtb	r2, r1
  405ea2:	4603      	mov	r3, r0
  405ea4:	e002      	b.n	405eac <memset+0x18>
  405ea6:	f114 34ff 	adds.w	r4, r4, #4294967295
  405eaa:	d33b      	bcc.n	405f24 <memset+0x90>
  405eac:	f803 2b01 	strb.w	r2, [r3], #1
  405eb0:	079d      	lsls	r5, r3, #30
  405eb2:	d1f8      	bne.n	405ea6 <memset+0x12>
  405eb4:	2c03      	cmp	r4, #3
  405eb6:	d92e      	bls.n	405f16 <memset+0x82>
  405eb8:	b2cd      	uxtb	r5, r1
  405eba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  405ebe:	2c0f      	cmp	r4, #15
  405ec0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  405ec4:	d919      	bls.n	405efa <memset+0x66>
  405ec6:	f103 0210 	add.w	r2, r3, #16
  405eca:	4626      	mov	r6, r4
  405ecc:	3e10      	subs	r6, #16
  405ece:	2e0f      	cmp	r6, #15
  405ed0:	f842 5c10 	str.w	r5, [r2, #-16]
  405ed4:	f842 5c0c 	str.w	r5, [r2, #-12]
  405ed8:	f842 5c08 	str.w	r5, [r2, #-8]
  405edc:	f842 5c04 	str.w	r5, [r2, #-4]
  405ee0:	f102 0210 	add.w	r2, r2, #16
  405ee4:	d8f2      	bhi.n	405ecc <memset+0x38>
  405ee6:	f1a4 0210 	sub.w	r2, r4, #16
  405eea:	f022 020f 	bic.w	r2, r2, #15
  405eee:	f004 040f 	and.w	r4, r4, #15
  405ef2:	3210      	adds	r2, #16
  405ef4:	2c03      	cmp	r4, #3
  405ef6:	4413      	add	r3, r2
  405ef8:	d90d      	bls.n	405f16 <memset+0x82>
  405efa:	461e      	mov	r6, r3
  405efc:	4622      	mov	r2, r4
  405efe:	3a04      	subs	r2, #4
  405f00:	2a03      	cmp	r2, #3
  405f02:	f846 5b04 	str.w	r5, [r6], #4
  405f06:	d8fa      	bhi.n	405efe <memset+0x6a>
  405f08:	1f22      	subs	r2, r4, #4
  405f0a:	f022 0203 	bic.w	r2, r2, #3
  405f0e:	3204      	adds	r2, #4
  405f10:	4413      	add	r3, r2
  405f12:	f004 0403 	and.w	r4, r4, #3
  405f16:	b12c      	cbz	r4, 405f24 <memset+0x90>
  405f18:	b2c9      	uxtb	r1, r1
  405f1a:	441c      	add	r4, r3
  405f1c:	f803 1b01 	strb.w	r1, [r3], #1
  405f20:	429c      	cmp	r4, r3
  405f22:	d1fb      	bne.n	405f1c <memset+0x88>
  405f24:	bc70      	pop	{r4, r5, r6}
  405f26:	4770      	bx	lr
  405f28:	4614      	mov	r4, r2
  405f2a:	4603      	mov	r3, r0
  405f2c:	e7c2      	b.n	405eb4 <memset+0x20>
  405f2e:	bf00      	nop

00405f30 <_puts_r>:
  405f30:	b5f0      	push	{r4, r5, r6, r7, lr}
  405f32:	4605      	mov	r5, r0
  405f34:	b089      	sub	sp, #36	; 0x24
  405f36:	4608      	mov	r0, r1
  405f38:	460c      	mov	r4, r1
  405f3a:	f000 f921 	bl	406180 <strlen>
  405f3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405f40:	4f21      	ldr	r7, [pc, #132]	; (405fc8 <_puts_r+0x98>)
  405f42:	9404      	str	r4, [sp, #16]
  405f44:	2601      	movs	r6, #1
  405f46:	1c44      	adds	r4, r0, #1
  405f48:	a904      	add	r1, sp, #16
  405f4a:	2202      	movs	r2, #2
  405f4c:	9403      	str	r4, [sp, #12]
  405f4e:	9005      	str	r0, [sp, #20]
  405f50:	68ac      	ldr	r4, [r5, #8]
  405f52:	9706      	str	r7, [sp, #24]
  405f54:	9607      	str	r6, [sp, #28]
  405f56:	9101      	str	r1, [sp, #4]
  405f58:	9202      	str	r2, [sp, #8]
  405f5a:	b353      	cbz	r3, 405fb2 <_puts_r+0x82>
  405f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405f5e:	f013 0f01 	tst.w	r3, #1
  405f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405f66:	b29a      	uxth	r2, r3
  405f68:	d101      	bne.n	405f6e <_puts_r+0x3e>
  405f6a:	0590      	lsls	r0, r2, #22
  405f6c:	d525      	bpl.n	405fba <_puts_r+0x8a>
  405f6e:	0491      	lsls	r1, r2, #18
  405f70:	d406      	bmi.n	405f80 <_puts_r+0x50>
  405f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405f74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  405f7c:	81a3      	strh	r3, [r4, #12]
  405f7e:	6662      	str	r2, [r4, #100]	; 0x64
  405f80:	4628      	mov	r0, r5
  405f82:	aa01      	add	r2, sp, #4
  405f84:	4621      	mov	r1, r4
  405f86:	f001 fbdd 	bl	407744 <__sfvwrite_r>
  405f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405f8c:	2800      	cmp	r0, #0
  405f8e:	bf0c      	ite	eq
  405f90:	250a      	moveq	r5, #10
  405f92:	f04f 35ff 	movne.w	r5, #4294967295
  405f96:	07da      	lsls	r2, r3, #31
  405f98:	d402      	bmi.n	405fa0 <_puts_r+0x70>
  405f9a:	89a3      	ldrh	r3, [r4, #12]
  405f9c:	059b      	lsls	r3, r3, #22
  405f9e:	d502      	bpl.n	405fa6 <_puts_r+0x76>
  405fa0:	4628      	mov	r0, r5
  405fa2:	b009      	add	sp, #36	; 0x24
  405fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405fa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405fa8:	f001 fd82 	bl	407ab0 <__retarget_lock_release_recursive>
  405fac:	4628      	mov	r0, r5
  405fae:	b009      	add	sp, #36	; 0x24
  405fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405fb2:	4628      	mov	r0, r5
  405fb4:	f001 f9ba 	bl	40732c <__sinit>
  405fb8:	e7d0      	b.n	405f5c <_puts_r+0x2c>
  405fba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405fbc:	f001 fd76 	bl	407aac <__retarget_lock_acquire_recursive>
  405fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405fc4:	b29a      	uxth	r2, r3
  405fc6:	e7d2      	b.n	405f6e <_puts_r+0x3e>
  405fc8:	00408eb4 	.word	0x00408eb4

00405fcc <puts>:
  405fcc:	4b02      	ldr	r3, [pc, #8]	; (405fd8 <puts+0xc>)
  405fce:	4601      	mov	r1, r0
  405fd0:	6818      	ldr	r0, [r3, #0]
  405fd2:	f7ff bfad 	b.w	405f30 <_puts_r>
  405fd6:	bf00      	nop
  405fd8:	2040003c 	.word	0x2040003c

00405fdc <setbuf>:
  405fdc:	2900      	cmp	r1, #0
  405fde:	bf0c      	ite	eq
  405fe0:	2202      	moveq	r2, #2
  405fe2:	2200      	movne	r2, #0
  405fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405fe8:	f000 b800 	b.w	405fec <setvbuf>

00405fec <setvbuf>:
  405fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405ff0:	4c61      	ldr	r4, [pc, #388]	; (406178 <setvbuf+0x18c>)
  405ff2:	6825      	ldr	r5, [r4, #0]
  405ff4:	b083      	sub	sp, #12
  405ff6:	4604      	mov	r4, r0
  405ff8:	460f      	mov	r7, r1
  405ffa:	4690      	mov	r8, r2
  405ffc:	461e      	mov	r6, r3
  405ffe:	b115      	cbz	r5, 406006 <setvbuf+0x1a>
  406000:	6bab      	ldr	r3, [r5, #56]	; 0x38
  406002:	2b00      	cmp	r3, #0
  406004:	d064      	beq.n	4060d0 <setvbuf+0xe4>
  406006:	f1b8 0f02 	cmp.w	r8, #2
  40600a:	d006      	beq.n	40601a <setvbuf+0x2e>
  40600c:	f1b8 0f01 	cmp.w	r8, #1
  406010:	f200 809f 	bhi.w	406152 <setvbuf+0x166>
  406014:	2e00      	cmp	r6, #0
  406016:	f2c0 809c 	blt.w	406152 <setvbuf+0x166>
  40601a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40601c:	07d8      	lsls	r0, r3, #31
  40601e:	d534      	bpl.n	40608a <setvbuf+0x9e>
  406020:	4621      	mov	r1, r4
  406022:	4628      	mov	r0, r5
  406024:	f001 f92a 	bl	40727c <_fflush_r>
  406028:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40602a:	b141      	cbz	r1, 40603e <setvbuf+0x52>
  40602c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406030:	4299      	cmp	r1, r3
  406032:	d002      	beq.n	40603a <setvbuf+0x4e>
  406034:	4628      	mov	r0, r5
  406036:	f001 fa9f 	bl	407578 <_free_r>
  40603a:	2300      	movs	r3, #0
  40603c:	6323      	str	r3, [r4, #48]	; 0x30
  40603e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406042:	2200      	movs	r2, #0
  406044:	61a2      	str	r2, [r4, #24]
  406046:	6062      	str	r2, [r4, #4]
  406048:	061a      	lsls	r2, r3, #24
  40604a:	d43a      	bmi.n	4060c2 <setvbuf+0xd6>
  40604c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  406050:	f023 0303 	bic.w	r3, r3, #3
  406054:	f1b8 0f02 	cmp.w	r8, #2
  406058:	81a3      	strh	r3, [r4, #12]
  40605a:	d01d      	beq.n	406098 <setvbuf+0xac>
  40605c:	ab01      	add	r3, sp, #4
  40605e:	466a      	mov	r2, sp
  406060:	4621      	mov	r1, r4
  406062:	4628      	mov	r0, r5
  406064:	f001 fd26 	bl	407ab4 <__swhatbuf_r>
  406068:	89a3      	ldrh	r3, [r4, #12]
  40606a:	4318      	orrs	r0, r3
  40606c:	81a0      	strh	r0, [r4, #12]
  40606e:	2e00      	cmp	r6, #0
  406070:	d132      	bne.n	4060d8 <setvbuf+0xec>
  406072:	9e00      	ldr	r6, [sp, #0]
  406074:	4630      	mov	r0, r6
  406076:	f001 fd95 	bl	407ba4 <malloc>
  40607a:	4607      	mov	r7, r0
  40607c:	2800      	cmp	r0, #0
  40607e:	d06b      	beq.n	406158 <setvbuf+0x16c>
  406080:	89a3      	ldrh	r3, [r4, #12]
  406082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406086:	81a3      	strh	r3, [r4, #12]
  406088:	e028      	b.n	4060dc <setvbuf+0xf0>
  40608a:	89a3      	ldrh	r3, [r4, #12]
  40608c:	0599      	lsls	r1, r3, #22
  40608e:	d4c7      	bmi.n	406020 <setvbuf+0x34>
  406090:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406092:	f001 fd0b 	bl	407aac <__retarget_lock_acquire_recursive>
  406096:	e7c3      	b.n	406020 <setvbuf+0x34>
  406098:	2500      	movs	r5, #0
  40609a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40609c:	2600      	movs	r6, #0
  40609e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4060a2:	f043 0302 	orr.w	r3, r3, #2
  4060a6:	2001      	movs	r0, #1
  4060a8:	60a6      	str	r6, [r4, #8]
  4060aa:	07ce      	lsls	r6, r1, #31
  4060ac:	81a3      	strh	r3, [r4, #12]
  4060ae:	6022      	str	r2, [r4, #0]
  4060b0:	6122      	str	r2, [r4, #16]
  4060b2:	6160      	str	r0, [r4, #20]
  4060b4:	d401      	bmi.n	4060ba <setvbuf+0xce>
  4060b6:	0598      	lsls	r0, r3, #22
  4060b8:	d53e      	bpl.n	406138 <setvbuf+0x14c>
  4060ba:	4628      	mov	r0, r5
  4060bc:	b003      	add	sp, #12
  4060be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4060c2:	6921      	ldr	r1, [r4, #16]
  4060c4:	4628      	mov	r0, r5
  4060c6:	f001 fa57 	bl	407578 <_free_r>
  4060ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4060ce:	e7bd      	b.n	40604c <setvbuf+0x60>
  4060d0:	4628      	mov	r0, r5
  4060d2:	f001 f92b 	bl	40732c <__sinit>
  4060d6:	e796      	b.n	406006 <setvbuf+0x1a>
  4060d8:	2f00      	cmp	r7, #0
  4060da:	d0cb      	beq.n	406074 <setvbuf+0x88>
  4060dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4060de:	2b00      	cmp	r3, #0
  4060e0:	d033      	beq.n	40614a <setvbuf+0x15e>
  4060e2:	9b00      	ldr	r3, [sp, #0]
  4060e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4060e8:	6027      	str	r7, [r4, #0]
  4060ea:	429e      	cmp	r6, r3
  4060ec:	bf1c      	itt	ne
  4060ee:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4060f2:	81a2      	strhne	r2, [r4, #12]
  4060f4:	f1b8 0f01 	cmp.w	r8, #1
  4060f8:	bf04      	itt	eq
  4060fa:	f042 0201 	orreq.w	r2, r2, #1
  4060fe:	81a2      	strheq	r2, [r4, #12]
  406100:	b292      	uxth	r2, r2
  406102:	f012 0308 	ands.w	r3, r2, #8
  406106:	6127      	str	r7, [r4, #16]
  406108:	6166      	str	r6, [r4, #20]
  40610a:	d00e      	beq.n	40612a <setvbuf+0x13e>
  40610c:	07d1      	lsls	r1, r2, #31
  40610e:	d51a      	bpl.n	406146 <setvbuf+0x15a>
  406110:	6e65      	ldr	r5, [r4, #100]	; 0x64
  406112:	4276      	negs	r6, r6
  406114:	2300      	movs	r3, #0
  406116:	f015 0501 	ands.w	r5, r5, #1
  40611a:	61a6      	str	r6, [r4, #24]
  40611c:	60a3      	str	r3, [r4, #8]
  40611e:	d009      	beq.n	406134 <setvbuf+0x148>
  406120:	2500      	movs	r5, #0
  406122:	4628      	mov	r0, r5
  406124:	b003      	add	sp, #12
  406126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40612a:	60a3      	str	r3, [r4, #8]
  40612c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40612e:	f015 0501 	ands.w	r5, r5, #1
  406132:	d1f5      	bne.n	406120 <setvbuf+0x134>
  406134:	0593      	lsls	r3, r2, #22
  406136:	d4c0      	bmi.n	4060ba <setvbuf+0xce>
  406138:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40613a:	f001 fcb9 	bl	407ab0 <__retarget_lock_release_recursive>
  40613e:	4628      	mov	r0, r5
  406140:	b003      	add	sp, #12
  406142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406146:	60a6      	str	r6, [r4, #8]
  406148:	e7f0      	b.n	40612c <setvbuf+0x140>
  40614a:	4628      	mov	r0, r5
  40614c:	f001 f8ee 	bl	40732c <__sinit>
  406150:	e7c7      	b.n	4060e2 <setvbuf+0xf6>
  406152:	f04f 35ff 	mov.w	r5, #4294967295
  406156:	e7b0      	b.n	4060ba <setvbuf+0xce>
  406158:	f8dd 9000 	ldr.w	r9, [sp]
  40615c:	45b1      	cmp	r9, r6
  40615e:	d004      	beq.n	40616a <setvbuf+0x17e>
  406160:	4648      	mov	r0, r9
  406162:	f001 fd1f 	bl	407ba4 <malloc>
  406166:	4607      	mov	r7, r0
  406168:	b920      	cbnz	r0, 406174 <setvbuf+0x188>
  40616a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40616e:	f04f 35ff 	mov.w	r5, #4294967295
  406172:	e792      	b.n	40609a <setvbuf+0xae>
  406174:	464e      	mov	r6, r9
  406176:	e783      	b.n	406080 <setvbuf+0x94>
  406178:	2040003c 	.word	0x2040003c
  40617c:	00000000 	.word	0x00000000

00406180 <strlen>:
  406180:	f890 f000 	pld	[r0]
  406184:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406188:	f020 0107 	bic.w	r1, r0, #7
  40618c:	f06f 0c00 	mvn.w	ip, #0
  406190:	f010 0407 	ands.w	r4, r0, #7
  406194:	f891 f020 	pld	[r1, #32]
  406198:	f040 8049 	bne.w	40622e <strlen+0xae>
  40619c:	f04f 0400 	mov.w	r4, #0
  4061a0:	f06f 0007 	mvn.w	r0, #7
  4061a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4061a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4061ac:	f100 0008 	add.w	r0, r0, #8
  4061b0:	fa82 f24c 	uadd8	r2, r2, ip
  4061b4:	faa4 f28c 	sel	r2, r4, ip
  4061b8:	fa83 f34c 	uadd8	r3, r3, ip
  4061bc:	faa2 f38c 	sel	r3, r2, ip
  4061c0:	bb4b      	cbnz	r3, 406216 <strlen+0x96>
  4061c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4061c6:	fa82 f24c 	uadd8	r2, r2, ip
  4061ca:	f100 0008 	add.w	r0, r0, #8
  4061ce:	faa4 f28c 	sel	r2, r4, ip
  4061d2:	fa83 f34c 	uadd8	r3, r3, ip
  4061d6:	faa2 f38c 	sel	r3, r2, ip
  4061da:	b9e3      	cbnz	r3, 406216 <strlen+0x96>
  4061dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4061e0:	fa82 f24c 	uadd8	r2, r2, ip
  4061e4:	f100 0008 	add.w	r0, r0, #8
  4061e8:	faa4 f28c 	sel	r2, r4, ip
  4061ec:	fa83 f34c 	uadd8	r3, r3, ip
  4061f0:	faa2 f38c 	sel	r3, r2, ip
  4061f4:	b97b      	cbnz	r3, 406216 <strlen+0x96>
  4061f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4061fa:	f101 0120 	add.w	r1, r1, #32
  4061fe:	fa82 f24c 	uadd8	r2, r2, ip
  406202:	f100 0008 	add.w	r0, r0, #8
  406206:	faa4 f28c 	sel	r2, r4, ip
  40620a:	fa83 f34c 	uadd8	r3, r3, ip
  40620e:	faa2 f38c 	sel	r3, r2, ip
  406212:	2b00      	cmp	r3, #0
  406214:	d0c6      	beq.n	4061a4 <strlen+0x24>
  406216:	2a00      	cmp	r2, #0
  406218:	bf04      	itt	eq
  40621a:	3004      	addeq	r0, #4
  40621c:	461a      	moveq	r2, r3
  40621e:	ba12      	rev	r2, r2
  406220:	fab2 f282 	clz	r2, r2
  406224:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406228:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40622c:	4770      	bx	lr
  40622e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406232:	f004 0503 	and.w	r5, r4, #3
  406236:	f1c4 0000 	rsb	r0, r4, #0
  40623a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40623e:	f014 0f04 	tst.w	r4, #4
  406242:	f891 f040 	pld	[r1, #64]	; 0x40
  406246:	fa0c f505 	lsl.w	r5, ip, r5
  40624a:	ea62 0205 	orn	r2, r2, r5
  40624e:	bf1c      	itt	ne
  406250:	ea63 0305 	ornne	r3, r3, r5
  406254:	4662      	movne	r2, ip
  406256:	f04f 0400 	mov.w	r4, #0
  40625a:	e7a9      	b.n	4061b0 <strlen+0x30>

0040625c <strncpy>:
  40625c:	ea40 0301 	orr.w	r3, r0, r1
  406260:	f013 0f03 	tst.w	r3, #3
  406264:	b470      	push	{r4, r5, r6}
  406266:	4603      	mov	r3, r0
  406268:	d024      	beq.n	4062b4 <strncpy+0x58>
  40626a:	b1a2      	cbz	r2, 406296 <strncpy+0x3a>
  40626c:	780c      	ldrb	r4, [r1, #0]
  40626e:	701c      	strb	r4, [r3, #0]
  406270:	3a01      	subs	r2, #1
  406272:	3301      	adds	r3, #1
  406274:	3101      	adds	r1, #1
  406276:	b13c      	cbz	r4, 406288 <strncpy+0x2c>
  406278:	b16a      	cbz	r2, 406296 <strncpy+0x3a>
  40627a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40627e:	f803 4b01 	strb.w	r4, [r3], #1
  406282:	3a01      	subs	r2, #1
  406284:	2c00      	cmp	r4, #0
  406286:	d1f7      	bne.n	406278 <strncpy+0x1c>
  406288:	b12a      	cbz	r2, 406296 <strncpy+0x3a>
  40628a:	441a      	add	r2, r3
  40628c:	2100      	movs	r1, #0
  40628e:	f803 1b01 	strb.w	r1, [r3], #1
  406292:	429a      	cmp	r2, r3
  406294:	d1fb      	bne.n	40628e <strncpy+0x32>
  406296:	bc70      	pop	{r4, r5, r6}
  406298:	4770      	bx	lr
  40629a:	460e      	mov	r6, r1
  40629c:	f851 5b04 	ldr.w	r5, [r1], #4
  4062a0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  4062a4:	ea24 0405 	bic.w	r4, r4, r5
  4062a8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  4062ac:	d105      	bne.n	4062ba <strncpy+0x5e>
  4062ae:	f843 5b04 	str.w	r5, [r3], #4
  4062b2:	3a04      	subs	r2, #4
  4062b4:	2a03      	cmp	r2, #3
  4062b6:	d8f0      	bhi.n	40629a <strncpy+0x3e>
  4062b8:	e7d7      	b.n	40626a <strncpy+0xe>
  4062ba:	4631      	mov	r1, r6
  4062bc:	e7d6      	b.n	40626c <strncpy+0x10>
  4062be:	bf00      	nop

004062c0 <__sprint_r.part.0>:
  4062c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4062c4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4062c6:	049c      	lsls	r4, r3, #18
  4062c8:	4693      	mov	fp, r2
  4062ca:	d52f      	bpl.n	40632c <__sprint_r.part.0+0x6c>
  4062cc:	6893      	ldr	r3, [r2, #8]
  4062ce:	6812      	ldr	r2, [r2, #0]
  4062d0:	b353      	cbz	r3, 406328 <__sprint_r.part.0+0x68>
  4062d2:	460e      	mov	r6, r1
  4062d4:	4607      	mov	r7, r0
  4062d6:	f102 0908 	add.w	r9, r2, #8
  4062da:	e919 0420 	ldmdb	r9, {r5, sl}
  4062de:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4062e2:	d017      	beq.n	406314 <__sprint_r.part.0+0x54>
  4062e4:	3d04      	subs	r5, #4
  4062e6:	2400      	movs	r4, #0
  4062e8:	e001      	b.n	4062ee <__sprint_r.part.0+0x2e>
  4062ea:	45a0      	cmp	r8, r4
  4062ec:	d010      	beq.n	406310 <__sprint_r.part.0+0x50>
  4062ee:	4632      	mov	r2, r6
  4062f0:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4062f4:	4638      	mov	r0, r7
  4062f6:	f001 f8bb 	bl	407470 <_fputwc_r>
  4062fa:	1c43      	adds	r3, r0, #1
  4062fc:	f104 0401 	add.w	r4, r4, #1
  406300:	d1f3      	bne.n	4062ea <__sprint_r.part.0+0x2a>
  406302:	2300      	movs	r3, #0
  406304:	f8cb 3008 	str.w	r3, [fp, #8]
  406308:	f8cb 3004 	str.w	r3, [fp, #4]
  40630c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406310:	f8db 3008 	ldr.w	r3, [fp, #8]
  406314:	f02a 0a03 	bic.w	sl, sl, #3
  406318:	eba3 030a 	sub.w	r3, r3, sl
  40631c:	f8cb 3008 	str.w	r3, [fp, #8]
  406320:	f109 0908 	add.w	r9, r9, #8
  406324:	2b00      	cmp	r3, #0
  406326:	d1d8      	bne.n	4062da <__sprint_r.part.0+0x1a>
  406328:	2000      	movs	r0, #0
  40632a:	e7ea      	b.n	406302 <__sprint_r.part.0+0x42>
  40632c:	f001 fa0a 	bl	407744 <__sfvwrite_r>
  406330:	2300      	movs	r3, #0
  406332:	f8cb 3008 	str.w	r3, [fp, #8]
  406336:	f8cb 3004 	str.w	r3, [fp, #4]
  40633a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40633e:	bf00      	nop

00406340 <_vfiprintf_r>:
  406340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406344:	b0ad      	sub	sp, #180	; 0xb4
  406346:	461d      	mov	r5, r3
  406348:	468b      	mov	fp, r1
  40634a:	4690      	mov	r8, r2
  40634c:	9307      	str	r3, [sp, #28]
  40634e:	9006      	str	r0, [sp, #24]
  406350:	b118      	cbz	r0, 40635a <_vfiprintf_r+0x1a>
  406352:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406354:	2b00      	cmp	r3, #0
  406356:	f000 80f3 	beq.w	406540 <_vfiprintf_r+0x200>
  40635a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40635e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  406362:	07df      	lsls	r7, r3, #31
  406364:	b281      	uxth	r1, r0
  406366:	d402      	bmi.n	40636e <_vfiprintf_r+0x2e>
  406368:	058e      	lsls	r6, r1, #22
  40636a:	f140 80fc 	bpl.w	406566 <_vfiprintf_r+0x226>
  40636e:	048c      	lsls	r4, r1, #18
  406370:	d40a      	bmi.n	406388 <_vfiprintf_r+0x48>
  406372:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406376:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40637a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40637e:	f8ab 100c 	strh.w	r1, [fp, #12]
  406382:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  406386:	b289      	uxth	r1, r1
  406388:	0708      	lsls	r0, r1, #28
  40638a:	f140 80b3 	bpl.w	4064f4 <_vfiprintf_r+0x1b4>
  40638e:	f8db 3010 	ldr.w	r3, [fp, #16]
  406392:	2b00      	cmp	r3, #0
  406394:	f000 80ae 	beq.w	4064f4 <_vfiprintf_r+0x1b4>
  406398:	f001 031a 	and.w	r3, r1, #26
  40639c:	2b0a      	cmp	r3, #10
  40639e:	f000 80b5 	beq.w	40650c <_vfiprintf_r+0x1cc>
  4063a2:	2300      	movs	r3, #0
  4063a4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4063a8:	930b      	str	r3, [sp, #44]	; 0x2c
  4063aa:	9311      	str	r3, [sp, #68]	; 0x44
  4063ac:	9310      	str	r3, [sp, #64]	; 0x40
  4063ae:	9303      	str	r3, [sp, #12]
  4063b0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4063b4:	46ca      	mov	sl, r9
  4063b6:	f8cd b010 	str.w	fp, [sp, #16]
  4063ba:	f898 3000 	ldrb.w	r3, [r8]
  4063be:	4644      	mov	r4, r8
  4063c0:	b1fb      	cbz	r3, 406402 <_vfiprintf_r+0xc2>
  4063c2:	2b25      	cmp	r3, #37	; 0x25
  4063c4:	d102      	bne.n	4063cc <_vfiprintf_r+0x8c>
  4063c6:	e01c      	b.n	406402 <_vfiprintf_r+0xc2>
  4063c8:	2b25      	cmp	r3, #37	; 0x25
  4063ca:	d003      	beq.n	4063d4 <_vfiprintf_r+0x94>
  4063cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4063d0:	2b00      	cmp	r3, #0
  4063d2:	d1f9      	bne.n	4063c8 <_vfiprintf_r+0x88>
  4063d4:	eba4 0508 	sub.w	r5, r4, r8
  4063d8:	b19d      	cbz	r5, 406402 <_vfiprintf_r+0xc2>
  4063da:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4063dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4063de:	f8ca 8000 	str.w	r8, [sl]
  4063e2:	3301      	adds	r3, #1
  4063e4:	442a      	add	r2, r5
  4063e6:	2b07      	cmp	r3, #7
  4063e8:	f8ca 5004 	str.w	r5, [sl, #4]
  4063ec:	9211      	str	r2, [sp, #68]	; 0x44
  4063ee:	9310      	str	r3, [sp, #64]	; 0x40
  4063f0:	dd7a      	ble.n	4064e8 <_vfiprintf_r+0x1a8>
  4063f2:	2a00      	cmp	r2, #0
  4063f4:	f040 84b0 	bne.w	406d58 <_vfiprintf_r+0xa18>
  4063f8:	9b03      	ldr	r3, [sp, #12]
  4063fa:	9210      	str	r2, [sp, #64]	; 0x40
  4063fc:	442b      	add	r3, r5
  4063fe:	46ca      	mov	sl, r9
  406400:	9303      	str	r3, [sp, #12]
  406402:	7823      	ldrb	r3, [r4, #0]
  406404:	2b00      	cmp	r3, #0
  406406:	f000 83e0 	beq.w	406bca <_vfiprintf_r+0x88a>
  40640a:	2000      	movs	r0, #0
  40640c:	f04f 0300 	mov.w	r3, #0
  406410:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  406414:	f104 0801 	add.w	r8, r4, #1
  406418:	7862      	ldrb	r2, [r4, #1]
  40641a:	4605      	mov	r5, r0
  40641c:	4606      	mov	r6, r0
  40641e:	4603      	mov	r3, r0
  406420:	f04f 34ff 	mov.w	r4, #4294967295
  406424:	f108 0801 	add.w	r8, r8, #1
  406428:	f1a2 0120 	sub.w	r1, r2, #32
  40642c:	2958      	cmp	r1, #88	; 0x58
  40642e:	f200 82de 	bhi.w	4069ee <_vfiprintf_r+0x6ae>
  406432:	e8df f011 	tbh	[pc, r1, lsl #1]
  406436:	0221      	.short	0x0221
  406438:	02dc02dc 	.word	0x02dc02dc
  40643c:	02dc0229 	.word	0x02dc0229
  406440:	02dc02dc 	.word	0x02dc02dc
  406444:	02dc02dc 	.word	0x02dc02dc
  406448:	028902dc 	.word	0x028902dc
  40644c:	02dc0295 	.word	0x02dc0295
  406450:	02bd00a2 	.word	0x02bd00a2
  406454:	019f02dc 	.word	0x019f02dc
  406458:	01a401a4 	.word	0x01a401a4
  40645c:	01a401a4 	.word	0x01a401a4
  406460:	01a401a4 	.word	0x01a401a4
  406464:	01a401a4 	.word	0x01a401a4
  406468:	02dc01a4 	.word	0x02dc01a4
  40646c:	02dc02dc 	.word	0x02dc02dc
  406470:	02dc02dc 	.word	0x02dc02dc
  406474:	02dc02dc 	.word	0x02dc02dc
  406478:	02dc02dc 	.word	0x02dc02dc
  40647c:	01b202dc 	.word	0x01b202dc
  406480:	02dc02dc 	.word	0x02dc02dc
  406484:	02dc02dc 	.word	0x02dc02dc
  406488:	02dc02dc 	.word	0x02dc02dc
  40648c:	02dc02dc 	.word	0x02dc02dc
  406490:	02dc02dc 	.word	0x02dc02dc
  406494:	02dc0197 	.word	0x02dc0197
  406498:	02dc02dc 	.word	0x02dc02dc
  40649c:	02dc02dc 	.word	0x02dc02dc
  4064a0:	02dc019b 	.word	0x02dc019b
  4064a4:	025302dc 	.word	0x025302dc
  4064a8:	02dc02dc 	.word	0x02dc02dc
  4064ac:	02dc02dc 	.word	0x02dc02dc
  4064b0:	02dc02dc 	.word	0x02dc02dc
  4064b4:	02dc02dc 	.word	0x02dc02dc
  4064b8:	02dc02dc 	.word	0x02dc02dc
  4064bc:	021b025a 	.word	0x021b025a
  4064c0:	02dc02dc 	.word	0x02dc02dc
  4064c4:	026e02dc 	.word	0x026e02dc
  4064c8:	02dc021b 	.word	0x02dc021b
  4064cc:	027302dc 	.word	0x027302dc
  4064d0:	01f502dc 	.word	0x01f502dc
  4064d4:	02090182 	.word	0x02090182
  4064d8:	02dc02d7 	.word	0x02dc02d7
  4064dc:	02dc029a 	.word	0x02dc029a
  4064e0:	02dc00a7 	.word	0x02dc00a7
  4064e4:	022e02dc 	.word	0x022e02dc
  4064e8:	f10a 0a08 	add.w	sl, sl, #8
  4064ec:	9b03      	ldr	r3, [sp, #12]
  4064ee:	442b      	add	r3, r5
  4064f0:	9303      	str	r3, [sp, #12]
  4064f2:	e786      	b.n	406402 <_vfiprintf_r+0xc2>
  4064f4:	4659      	mov	r1, fp
  4064f6:	9806      	ldr	r0, [sp, #24]
  4064f8:	f000 fdac 	bl	407054 <__swsetup_r>
  4064fc:	bb18      	cbnz	r0, 406546 <_vfiprintf_r+0x206>
  4064fe:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  406502:	f001 031a 	and.w	r3, r1, #26
  406506:	2b0a      	cmp	r3, #10
  406508:	f47f af4b 	bne.w	4063a2 <_vfiprintf_r+0x62>
  40650c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  406510:	2b00      	cmp	r3, #0
  406512:	f6ff af46 	blt.w	4063a2 <_vfiprintf_r+0x62>
  406516:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40651a:	07db      	lsls	r3, r3, #31
  40651c:	d405      	bmi.n	40652a <_vfiprintf_r+0x1ea>
  40651e:	058f      	lsls	r7, r1, #22
  406520:	d403      	bmi.n	40652a <_vfiprintf_r+0x1ea>
  406522:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406526:	f001 fac3 	bl	407ab0 <__retarget_lock_release_recursive>
  40652a:	462b      	mov	r3, r5
  40652c:	4642      	mov	r2, r8
  40652e:	4659      	mov	r1, fp
  406530:	9806      	ldr	r0, [sp, #24]
  406532:	f000 fd4d 	bl	406fd0 <__sbprintf>
  406536:	9003      	str	r0, [sp, #12]
  406538:	9803      	ldr	r0, [sp, #12]
  40653a:	b02d      	add	sp, #180	; 0xb4
  40653c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406540:	f000 fef4 	bl	40732c <__sinit>
  406544:	e709      	b.n	40635a <_vfiprintf_r+0x1a>
  406546:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40654a:	07d9      	lsls	r1, r3, #31
  40654c:	d404      	bmi.n	406558 <_vfiprintf_r+0x218>
  40654e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406552:	059a      	lsls	r2, r3, #22
  406554:	f140 84aa 	bpl.w	406eac <_vfiprintf_r+0xb6c>
  406558:	f04f 33ff 	mov.w	r3, #4294967295
  40655c:	9303      	str	r3, [sp, #12]
  40655e:	9803      	ldr	r0, [sp, #12]
  406560:	b02d      	add	sp, #180	; 0xb4
  406562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406566:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40656a:	f001 fa9f 	bl	407aac <__retarget_lock_acquire_recursive>
  40656e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  406572:	b281      	uxth	r1, r0
  406574:	e6fb      	b.n	40636e <_vfiprintf_r+0x2e>
  406576:	4276      	negs	r6, r6
  406578:	9207      	str	r2, [sp, #28]
  40657a:	f043 0304 	orr.w	r3, r3, #4
  40657e:	f898 2000 	ldrb.w	r2, [r8]
  406582:	e74f      	b.n	406424 <_vfiprintf_r+0xe4>
  406584:	9608      	str	r6, [sp, #32]
  406586:	069e      	lsls	r6, r3, #26
  406588:	f100 8450 	bmi.w	406e2c <_vfiprintf_r+0xaec>
  40658c:	9907      	ldr	r1, [sp, #28]
  40658e:	06dd      	lsls	r5, r3, #27
  406590:	460a      	mov	r2, r1
  406592:	f100 83ef 	bmi.w	406d74 <_vfiprintf_r+0xa34>
  406596:	0658      	lsls	r0, r3, #25
  406598:	f140 83ec 	bpl.w	406d74 <_vfiprintf_r+0xa34>
  40659c:	880e      	ldrh	r6, [r1, #0]
  40659e:	3104      	adds	r1, #4
  4065a0:	2700      	movs	r7, #0
  4065a2:	2201      	movs	r2, #1
  4065a4:	9107      	str	r1, [sp, #28]
  4065a6:	f04f 0100 	mov.w	r1, #0
  4065aa:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4065ae:	2500      	movs	r5, #0
  4065b0:	1c61      	adds	r1, r4, #1
  4065b2:	f000 8116 	beq.w	4067e2 <_vfiprintf_r+0x4a2>
  4065b6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4065ba:	9102      	str	r1, [sp, #8]
  4065bc:	ea56 0107 	orrs.w	r1, r6, r7
  4065c0:	f040 8114 	bne.w	4067ec <_vfiprintf_r+0x4ac>
  4065c4:	2c00      	cmp	r4, #0
  4065c6:	f040 835c 	bne.w	406c82 <_vfiprintf_r+0x942>
  4065ca:	2a00      	cmp	r2, #0
  4065cc:	f040 83b7 	bne.w	406d3e <_vfiprintf_r+0x9fe>
  4065d0:	f013 0301 	ands.w	r3, r3, #1
  4065d4:	9305      	str	r3, [sp, #20]
  4065d6:	f000 8457 	beq.w	406e88 <_vfiprintf_r+0xb48>
  4065da:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4065de:	2330      	movs	r3, #48	; 0x30
  4065e0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  4065e4:	9b05      	ldr	r3, [sp, #20]
  4065e6:	42a3      	cmp	r3, r4
  4065e8:	bfb8      	it	lt
  4065ea:	4623      	movlt	r3, r4
  4065ec:	9301      	str	r3, [sp, #4]
  4065ee:	b10d      	cbz	r5, 4065f4 <_vfiprintf_r+0x2b4>
  4065f0:	3301      	adds	r3, #1
  4065f2:	9301      	str	r3, [sp, #4]
  4065f4:	9b02      	ldr	r3, [sp, #8]
  4065f6:	f013 0302 	ands.w	r3, r3, #2
  4065fa:	9309      	str	r3, [sp, #36]	; 0x24
  4065fc:	d002      	beq.n	406604 <_vfiprintf_r+0x2c4>
  4065fe:	9b01      	ldr	r3, [sp, #4]
  406600:	3302      	adds	r3, #2
  406602:	9301      	str	r3, [sp, #4]
  406604:	9b02      	ldr	r3, [sp, #8]
  406606:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40660a:	930a      	str	r3, [sp, #40]	; 0x28
  40660c:	f040 8217 	bne.w	406a3e <_vfiprintf_r+0x6fe>
  406610:	9b08      	ldr	r3, [sp, #32]
  406612:	9a01      	ldr	r2, [sp, #4]
  406614:	1a9d      	subs	r5, r3, r2
  406616:	2d00      	cmp	r5, #0
  406618:	f340 8211 	ble.w	406a3e <_vfiprintf_r+0x6fe>
  40661c:	2d10      	cmp	r5, #16
  40661e:	f340 8490 	ble.w	406f42 <_vfiprintf_r+0xc02>
  406622:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406624:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406626:	4ec4      	ldr	r6, [pc, #784]	; (406938 <_vfiprintf_r+0x5f8>)
  406628:	46d6      	mov	lr, sl
  40662a:	2710      	movs	r7, #16
  40662c:	46a2      	mov	sl, r4
  40662e:	4619      	mov	r1, r3
  406630:	9c06      	ldr	r4, [sp, #24]
  406632:	e007      	b.n	406644 <_vfiprintf_r+0x304>
  406634:	f101 0c02 	add.w	ip, r1, #2
  406638:	f10e 0e08 	add.w	lr, lr, #8
  40663c:	4601      	mov	r1, r0
  40663e:	3d10      	subs	r5, #16
  406640:	2d10      	cmp	r5, #16
  406642:	dd11      	ble.n	406668 <_vfiprintf_r+0x328>
  406644:	1c48      	adds	r0, r1, #1
  406646:	3210      	adds	r2, #16
  406648:	2807      	cmp	r0, #7
  40664a:	9211      	str	r2, [sp, #68]	; 0x44
  40664c:	e88e 00c0 	stmia.w	lr, {r6, r7}
  406650:	9010      	str	r0, [sp, #64]	; 0x40
  406652:	ddef      	ble.n	406634 <_vfiprintf_r+0x2f4>
  406654:	2a00      	cmp	r2, #0
  406656:	f040 81e4 	bne.w	406a22 <_vfiprintf_r+0x6e2>
  40665a:	3d10      	subs	r5, #16
  40665c:	2d10      	cmp	r5, #16
  40665e:	4611      	mov	r1, r2
  406660:	f04f 0c01 	mov.w	ip, #1
  406664:	46ce      	mov	lr, r9
  406666:	dced      	bgt.n	406644 <_vfiprintf_r+0x304>
  406668:	4654      	mov	r4, sl
  40666a:	4661      	mov	r1, ip
  40666c:	46f2      	mov	sl, lr
  40666e:	442a      	add	r2, r5
  406670:	2907      	cmp	r1, #7
  406672:	9211      	str	r2, [sp, #68]	; 0x44
  406674:	f8ca 6000 	str.w	r6, [sl]
  406678:	f8ca 5004 	str.w	r5, [sl, #4]
  40667c:	9110      	str	r1, [sp, #64]	; 0x40
  40667e:	f300 82ec 	bgt.w	406c5a <_vfiprintf_r+0x91a>
  406682:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406686:	f10a 0a08 	add.w	sl, sl, #8
  40668a:	1c48      	adds	r0, r1, #1
  40668c:	2d00      	cmp	r5, #0
  40668e:	f040 81de 	bne.w	406a4e <_vfiprintf_r+0x70e>
  406692:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406694:	2b00      	cmp	r3, #0
  406696:	f000 81f8 	beq.w	406a8a <_vfiprintf_r+0x74a>
  40669a:	3202      	adds	r2, #2
  40669c:	a90e      	add	r1, sp, #56	; 0x38
  40669e:	2302      	movs	r3, #2
  4066a0:	2807      	cmp	r0, #7
  4066a2:	9211      	str	r2, [sp, #68]	; 0x44
  4066a4:	9010      	str	r0, [sp, #64]	; 0x40
  4066a6:	e88a 000a 	stmia.w	sl, {r1, r3}
  4066aa:	f340 81ea 	ble.w	406a82 <_vfiprintf_r+0x742>
  4066ae:	2a00      	cmp	r2, #0
  4066b0:	f040 838c 	bne.w	406dcc <_vfiprintf_r+0xa8c>
  4066b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4066b6:	2b80      	cmp	r3, #128	; 0x80
  4066b8:	f04f 0001 	mov.w	r0, #1
  4066bc:	4611      	mov	r1, r2
  4066be:	46ca      	mov	sl, r9
  4066c0:	f040 81e7 	bne.w	406a92 <_vfiprintf_r+0x752>
  4066c4:	9b08      	ldr	r3, [sp, #32]
  4066c6:	9d01      	ldr	r5, [sp, #4]
  4066c8:	1b5e      	subs	r6, r3, r5
  4066ca:	2e00      	cmp	r6, #0
  4066cc:	f340 81e1 	ble.w	406a92 <_vfiprintf_r+0x752>
  4066d0:	2e10      	cmp	r6, #16
  4066d2:	4d9a      	ldr	r5, [pc, #616]	; (40693c <_vfiprintf_r+0x5fc>)
  4066d4:	f340 8450 	ble.w	406f78 <_vfiprintf_r+0xc38>
  4066d8:	46d4      	mov	ip, sl
  4066da:	2710      	movs	r7, #16
  4066dc:	46a2      	mov	sl, r4
  4066de:	9c06      	ldr	r4, [sp, #24]
  4066e0:	e007      	b.n	4066f2 <_vfiprintf_r+0x3b2>
  4066e2:	f101 0e02 	add.w	lr, r1, #2
  4066e6:	f10c 0c08 	add.w	ip, ip, #8
  4066ea:	4601      	mov	r1, r0
  4066ec:	3e10      	subs	r6, #16
  4066ee:	2e10      	cmp	r6, #16
  4066f0:	dd11      	ble.n	406716 <_vfiprintf_r+0x3d6>
  4066f2:	1c48      	adds	r0, r1, #1
  4066f4:	3210      	adds	r2, #16
  4066f6:	2807      	cmp	r0, #7
  4066f8:	9211      	str	r2, [sp, #68]	; 0x44
  4066fa:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4066fe:	9010      	str	r0, [sp, #64]	; 0x40
  406700:	ddef      	ble.n	4066e2 <_vfiprintf_r+0x3a2>
  406702:	2a00      	cmp	r2, #0
  406704:	f040 829d 	bne.w	406c42 <_vfiprintf_r+0x902>
  406708:	3e10      	subs	r6, #16
  40670a:	2e10      	cmp	r6, #16
  40670c:	f04f 0e01 	mov.w	lr, #1
  406710:	4611      	mov	r1, r2
  406712:	46cc      	mov	ip, r9
  406714:	dced      	bgt.n	4066f2 <_vfiprintf_r+0x3b2>
  406716:	4654      	mov	r4, sl
  406718:	46e2      	mov	sl, ip
  40671a:	4432      	add	r2, r6
  40671c:	f1be 0f07 	cmp.w	lr, #7
  406720:	9211      	str	r2, [sp, #68]	; 0x44
  406722:	e88a 0060 	stmia.w	sl, {r5, r6}
  406726:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40672a:	f300 8369 	bgt.w	406e00 <_vfiprintf_r+0xac0>
  40672e:	f10a 0a08 	add.w	sl, sl, #8
  406732:	f10e 0001 	add.w	r0, lr, #1
  406736:	4671      	mov	r1, lr
  406738:	e1ab      	b.n	406a92 <_vfiprintf_r+0x752>
  40673a:	9608      	str	r6, [sp, #32]
  40673c:	f013 0220 	ands.w	r2, r3, #32
  406740:	f040 838c 	bne.w	406e5c <_vfiprintf_r+0xb1c>
  406744:	f013 0110 	ands.w	r1, r3, #16
  406748:	f040 831a 	bne.w	406d80 <_vfiprintf_r+0xa40>
  40674c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  406750:	f000 8316 	beq.w	406d80 <_vfiprintf_r+0xa40>
  406754:	9807      	ldr	r0, [sp, #28]
  406756:	460a      	mov	r2, r1
  406758:	4601      	mov	r1, r0
  40675a:	3104      	adds	r1, #4
  40675c:	8806      	ldrh	r6, [r0, #0]
  40675e:	9107      	str	r1, [sp, #28]
  406760:	2700      	movs	r7, #0
  406762:	e720      	b.n	4065a6 <_vfiprintf_r+0x266>
  406764:	9608      	str	r6, [sp, #32]
  406766:	f043 0310 	orr.w	r3, r3, #16
  40676a:	e7e7      	b.n	40673c <_vfiprintf_r+0x3fc>
  40676c:	9608      	str	r6, [sp, #32]
  40676e:	f043 0310 	orr.w	r3, r3, #16
  406772:	e708      	b.n	406586 <_vfiprintf_r+0x246>
  406774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406778:	f898 2000 	ldrb.w	r2, [r8]
  40677c:	e652      	b.n	406424 <_vfiprintf_r+0xe4>
  40677e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406782:	2600      	movs	r6, #0
  406784:	f818 2b01 	ldrb.w	r2, [r8], #1
  406788:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40678c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  406790:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406794:	2909      	cmp	r1, #9
  406796:	d9f5      	bls.n	406784 <_vfiprintf_r+0x444>
  406798:	e646      	b.n	406428 <_vfiprintf_r+0xe8>
  40679a:	9608      	str	r6, [sp, #32]
  40679c:	2800      	cmp	r0, #0
  40679e:	f040 8408 	bne.w	406fb2 <_vfiprintf_r+0xc72>
  4067a2:	f043 0310 	orr.w	r3, r3, #16
  4067a6:	069e      	lsls	r6, r3, #26
  4067a8:	f100 834c 	bmi.w	406e44 <_vfiprintf_r+0xb04>
  4067ac:	06dd      	lsls	r5, r3, #27
  4067ae:	f100 82f3 	bmi.w	406d98 <_vfiprintf_r+0xa58>
  4067b2:	0658      	lsls	r0, r3, #25
  4067b4:	f140 82f0 	bpl.w	406d98 <_vfiprintf_r+0xa58>
  4067b8:	9d07      	ldr	r5, [sp, #28]
  4067ba:	f9b5 6000 	ldrsh.w	r6, [r5]
  4067be:	462a      	mov	r2, r5
  4067c0:	17f7      	asrs	r7, r6, #31
  4067c2:	3204      	adds	r2, #4
  4067c4:	4630      	mov	r0, r6
  4067c6:	4639      	mov	r1, r7
  4067c8:	9207      	str	r2, [sp, #28]
  4067ca:	2800      	cmp	r0, #0
  4067cc:	f171 0200 	sbcs.w	r2, r1, #0
  4067d0:	f2c0 835d 	blt.w	406e8e <_vfiprintf_r+0xb4e>
  4067d4:	1c61      	adds	r1, r4, #1
  4067d6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4067da:	f04f 0201 	mov.w	r2, #1
  4067de:	f47f aeea 	bne.w	4065b6 <_vfiprintf_r+0x276>
  4067e2:	ea56 0107 	orrs.w	r1, r6, r7
  4067e6:	f000 824d 	beq.w	406c84 <_vfiprintf_r+0x944>
  4067ea:	9302      	str	r3, [sp, #8]
  4067ec:	2a01      	cmp	r2, #1
  4067ee:	f000 828c 	beq.w	406d0a <_vfiprintf_r+0x9ca>
  4067f2:	2a02      	cmp	r2, #2
  4067f4:	f040 825c 	bne.w	406cb0 <_vfiprintf_r+0x970>
  4067f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4067fa:	46cb      	mov	fp, r9
  4067fc:	0933      	lsrs	r3, r6, #4
  4067fe:	f006 010f 	and.w	r1, r6, #15
  406802:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  406806:	093a      	lsrs	r2, r7, #4
  406808:	461e      	mov	r6, r3
  40680a:	4617      	mov	r7, r2
  40680c:	5c43      	ldrb	r3, [r0, r1]
  40680e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  406812:	ea56 0307 	orrs.w	r3, r6, r7
  406816:	d1f1      	bne.n	4067fc <_vfiprintf_r+0x4bc>
  406818:	eba9 030b 	sub.w	r3, r9, fp
  40681c:	9305      	str	r3, [sp, #20]
  40681e:	e6e1      	b.n	4065e4 <_vfiprintf_r+0x2a4>
  406820:	2800      	cmp	r0, #0
  406822:	f040 83c0 	bne.w	406fa6 <_vfiprintf_r+0xc66>
  406826:	0699      	lsls	r1, r3, #26
  406828:	f100 8367 	bmi.w	406efa <_vfiprintf_r+0xbba>
  40682c:	06da      	lsls	r2, r3, #27
  40682e:	f100 80f1 	bmi.w	406a14 <_vfiprintf_r+0x6d4>
  406832:	065b      	lsls	r3, r3, #25
  406834:	f140 80ee 	bpl.w	406a14 <_vfiprintf_r+0x6d4>
  406838:	9a07      	ldr	r2, [sp, #28]
  40683a:	6813      	ldr	r3, [r2, #0]
  40683c:	3204      	adds	r2, #4
  40683e:	9207      	str	r2, [sp, #28]
  406840:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  406844:	801a      	strh	r2, [r3, #0]
  406846:	e5b8      	b.n	4063ba <_vfiprintf_r+0x7a>
  406848:	9807      	ldr	r0, [sp, #28]
  40684a:	4a3d      	ldr	r2, [pc, #244]	; (406940 <_vfiprintf_r+0x600>)
  40684c:	9608      	str	r6, [sp, #32]
  40684e:	920b      	str	r2, [sp, #44]	; 0x2c
  406850:	6806      	ldr	r6, [r0, #0]
  406852:	2278      	movs	r2, #120	; 0x78
  406854:	2130      	movs	r1, #48	; 0x30
  406856:	3004      	adds	r0, #4
  406858:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40685c:	f043 0302 	orr.w	r3, r3, #2
  406860:	9007      	str	r0, [sp, #28]
  406862:	2700      	movs	r7, #0
  406864:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406868:	2202      	movs	r2, #2
  40686a:	e69c      	b.n	4065a6 <_vfiprintf_r+0x266>
  40686c:	9608      	str	r6, [sp, #32]
  40686e:	2800      	cmp	r0, #0
  406870:	d099      	beq.n	4067a6 <_vfiprintf_r+0x466>
  406872:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406876:	e796      	b.n	4067a6 <_vfiprintf_r+0x466>
  406878:	f898 2000 	ldrb.w	r2, [r8]
  40687c:	2d00      	cmp	r5, #0
  40687e:	f47f add1 	bne.w	406424 <_vfiprintf_r+0xe4>
  406882:	2001      	movs	r0, #1
  406884:	2520      	movs	r5, #32
  406886:	e5cd      	b.n	406424 <_vfiprintf_r+0xe4>
  406888:	f043 0301 	orr.w	r3, r3, #1
  40688c:	f898 2000 	ldrb.w	r2, [r8]
  406890:	e5c8      	b.n	406424 <_vfiprintf_r+0xe4>
  406892:	9608      	str	r6, [sp, #32]
  406894:	2800      	cmp	r0, #0
  406896:	f040 8393 	bne.w	406fc0 <_vfiprintf_r+0xc80>
  40689a:	4929      	ldr	r1, [pc, #164]	; (406940 <_vfiprintf_r+0x600>)
  40689c:	910b      	str	r1, [sp, #44]	; 0x2c
  40689e:	069f      	lsls	r7, r3, #26
  4068a0:	f100 82e8 	bmi.w	406e74 <_vfiprintf_r+0xb34>
  4068a4:	9807      	ldr	r0, [sp, #28]
  4068a6:	06de      	lsls	r6, r3, #27
  4068a8:	4601      	mov	r1, r0
  4068aa:	f100 8270 	bmi.w	406d8e <_vfiprintf_r+0xa4e>
  4068ae:	065d      	lsls	r5, r3, #25
  4068b0:	f140 826d 	bpl.w	406d8e <_vfiprintf_r+0xa4e>
  4068b4:	3104      	adds	r1, #4
  4068b6:	8806      	ldrh	r6, [r0, #0]
  4068b8:	9107      	str	r1, [sp, #28]
  4068ba:	2700      	movs	r7, #0
  4068bc:	07d8      	lsls	r0, r3, #31
  4068be:	f140 8222 	bpl.w	406d06 <_vfiprintf_r+0x9c6>
  4068c2:	ea56 0107 	orrs.w	r1, r6, r7
  4068c6:	f000 821e 	beq.w	406d06 <_vfiprintf_r+0x9c6>
  4068ca:	2130      	movs	r1, #48	; 0x30
  4068cc:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4068d0:	f043 0302 	orr.w	r3, r3, #2
  4068d4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4068d8:	2202      	movs	r2, #2
  4068da:	e664      	b.n	4065a6 <_vfiprintf_r+0x266>
  4068dc:	9608      	str	r6, [sp, #32]
  4068de:	2800      	cmp	r0, #0
  4068e0:	f040 836b 	bne.w	406fba <_vfiprintf_r+0xc7a>
  4068e4:	4917      	ldr	r1, [pc, #92]	; (406944 <_vfiprintf_r+0x604>)
  4068e6:	910b      	str	r1, [sp, #44]	; 0x2c
  4068e8:	e7d9      	b.n	40689e <_vfiprintf_r+0x55e>
  4068ea:	9907      	ldr	r1, [sp, #28]
  4068ec:	9608      	str	r6, [sp, #32]
  4068ee:	680a      	ldr	r2, [r1, #0]
  4068f0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4068f4:	f04f 0000 	mov.w	r0, #0
  4068f8:	460a      	mov	r2, r1
  4068fa:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4068fe:	3204      	adds	r2, #4
  406900:	2001      	movs	r0, #1
  406902:	9001      	str	r0, [sp, #4]
  406904:	9207      	str	r2, [sp, #28]
  406906:	9005      	str	r0, [sp, #20]
  406908:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40690c:	9302      	str	r3, [sp, #8]
  40690e:	2400      	movs	r4, #0
  406910:	e670      	b.n	4065f4 <_vfiprintf_r+0x2b4>
  406912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406916:	f898 2000 	ldrb.w	r2, [r8]
  40691a:	e583      	b.n	406424 <_vfiprintf_r+0xe4>
  40691c:	f898 2000 	ldrb.w	r2, [r8]
  406920:	2a6c      	cmp	r2, #108	; 0x6c
  406922:	bf03      	ittte	eq
  406924:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406928:	f043 0320 	orreq.w	r3, r3, #32
  40692c:	f108 0801 	addeq.w	r8, r8, #1
  406930:	f043 0310 	orrne.w	r3, r3, #16
  406934:	e576      	b.n	406424 <_vfiprintf_r+0xe4>
  406936:	bf00      	nop
  406938:	00408ee8 	.word	0x00408ee8
  40693c:	00408ef8 	.word	0x00408ef8
  406940:	00408ecc 	.word	0x00408ecc
  406944:	00408eb8 	.word	0x00408eb8
  406948:	9907      	ldr	r1, [sp, #28]
  40694a:	680e      	ldr	r6, [r1, #0]
  40694c:	460a      	mov	r2, r1
  40694e:	2e00      	cmp	r6, #0
  406950:	f102 0204 	add.w	r2, r2, #4
  406954:	f6ff ae0f 	blt.w	406576 <_vfiprintf_r+0x236>
  406958:	9207      	str	r2, [sp, #28]
  40695a:	f898 2000 	ldrb.w	r2, [r8]
  40695e:	e561      	b.n	406424 <_vfiprintf_r+0xe4>
  406960:	f898 2000 	ldrb.w	r2, [r8]
  406964:	2001      	movs	r0, #1
  406966:	252b      	movs	r5, #43	; 0x2b
  406968:	e55c      	b.n	406424 <_vfiprintf_r+0xe4>
  40696a:	9907      	ldr	r1, [sp, #28]
  40696c:	9608      	str	r6, [sp, #32]
  40696e:	f8d1 b000 	ldr.w	fp, [r1]
  406972:	f04f 0200 	mov.w	r2, #0
  406976:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40697a:	1d0e      	adds	r6, r1, #4
  40697c:	f1bb 0f00 	cmp.w	fp, #0
  406980:	f000 82e5 	beq.w	406f4e <_vfiprintf_r+0xc0e>
  406984:	1c67      	adds	r7, r4, #1
  406986:	f000 82c4 	beq.w	406f12 <_vfiprintf_r+0xbd2>
  40698a:	4622      	mov	r2, r4
  40698c:	2100      	movs	r1, #0
  40698e:	4658      	mov	r0, fp
  406990:	9301      	str	r3, [sp, #4]
  406992:	f001 fbd5 	bl	408140 <memchr>
  406996:	9b01      	ldr	r3, [sp, #4]
  406998:	2800      	cmp	r0, #0
  40699a:	f000 82e5 	beq.w	406f68 <_vfiprintf_r+0xc28>
  40699e:	eba0 020b 	sub.w	r2, r0, fp
  4069a2:	9205      	str	r2, [sp, #20]
  4069a4:	9607      	str	r6, [sp, #28]
  4069a6:	9302      	str	r3, [sp, #8]
  4069a8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4069ac:	2400      	movs	r4, #0
  4069ae:	e619      	b.n	4065e4 <_vfiprintf_r+0x2a4>
  4069b0:	f898 2000 	ldrb.w	r2, [r8]
  4069b4:	2a2a      	cmp	r2, #42	; 0x2a
  4069b6:	f108 0701 	add.w	r7, r8, #1
  4069ba:	f000 82e9 	beq.w	406f90 <_vfiprintf_r+0xc50>
  4069be:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4069c2:	2909      	cmp	r1, #9
  4069c4:	46b8      	mov	r8, r7
  4069c6:	f04f 0400 	mov.w	r4, #0
  4069ca:	f63f ad2d 	bhi.w	406428 <_vfiprintf_r+0xe8>
  4069ce:	f818 2b01 	ldrb.w	r2, [r8], #1
  4069d2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4069d6:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4069da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4069de:	2909      	cmp	r1, #9
  4069e0:	d9f5      	bls.n	4069ce <_vfiprintf_r+0x68e>
  4069e2:	e521      	b.n	406428 <_vfiprintf_r+0xe8>
  4069e4:	f043 0320 	orr.w	r3, r3, #32
  4069e8:	f898 2000 	ldrb.w	r2, [r8]
  4069ec:	e51a      	b.n	406424 <_vfiprintf_r+0xe4>
  4069ee:	9608      	str	r6, [sp, #32]
  4069f0:	2800      	cmp	r0, #0
  4069f2:	f040 82db 	bne.w	406fac <_vfiprintf_r+0xc6c>
  4069f6:	2a00      	cmp	r2, #0
  4069f8:	f000 80e7 	beq.w	406bca <_vfiprintf_r+0x88a>
  4069fc:	2101      	movs	r1, #1
  4069fe:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406a02:	f04f 0200 	mov.w	r2, #0
  406a06:	9101      	str	r1, [sp, #4]
  406a08:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406a0c:	9105      	str	r1, [sp, #20]
  406a0e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406a12:	e77b      	b.n	40690c <_vfiprintf_r+0x5cc>
  406a14:	9a07      	ldr	r2, [sp, #28]
  406a16:	6813      	ldr	r3, [r2, #0]
  406a18:	3204      	adds	r2, #4
  406a1a:	9207      	str	r2, [sp, #28]
  406a1c:	9a03      	ldr	r2, [sp, #12]
  406a1e:	601a      	str	r2, [r3, #0]
  406a20:	e4cb      	b.n	4063ba <_vfiprintf_r+0x7a>
  406a22:	aa0f      	add	r2, sp, #60	; 0x3c
  406a24:	9904      	ldr	r1, [sp, #16]
  406a26:	4620      	mov	r0, r4
  406a28:	f7ff fc4a 	bl	4062c0 <__sprint_r.part.0>
  406a2c:	2800      	cmp	r0, #0
  406a2e:	f040 8139 	bne.w	406ca4 <_vfiprintf_r+0x964>
  406a32:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a34:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a36:	f101 0c01 	add.w	ip, r1, #1
  406a3a:	46ce      	mov	lr, r9
  406a3c:	e5ff      	b.n	40663e <_vfiprintf_r+0x2fe>
  406a3e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406a40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a42:	1c48      	adds	r0, r1, #1
  406a44:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406a48:	2d00      	cmp	r5, #0
  406a4a:	f43f ae22 	beq.w	406692 <_vfiprintf_r+0x352>
  406a4e:	3201      	adds	r2, #1
  406a50:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  406a54:	2101      	movs	r1, #1
  406a56:	2807      	cmp	r0, #7
  406a58:	9211      	str	r2, [sp, #68]	; 0x44
  406a5a:	9010      	str	r0, [sp, #64]	; 0x40
  406a5c:	f8ca 5000 	str.w	r5, [sl]
  406a60:	f8ca 1004 	str.w	r1, [sl, #4]
  406a64:	f340 8108 	ble.w	406c78 <_vfiprintf_r+0x938>
  406a68:	2a00      	cmp	r2, #0
  406a6a:	f040 81bc 	bne.w	406de6 <_vfiprintf_r+0xaa6>
  406a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406a70:	2b00      	cmp	r3, #0
  406a72:	f43f ae1f 	beq.w	4066b4 <_vfiprintf_r+0x374>
  406a76:	ab0e      	add	r3, sp, #56	; 0x38
  406a78:	2202      	movs	r2, #2
  406a7a:	4608      	mov	r0, r1
  406a7c:	931c      	str	r3, [sp, #112]	; 0x70
  406a7e:	921d      	str	r2, [sp, #116]	; 0x74
  406a80:	46ca      	mov	sl, r9
  406a82:	4601      	mov	r1, r0
  406a84:	f10a 0a08 	add.w	sl, sl, #8
  406a88:	3001      	adds	r0, #1
  406a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406a8c:	2b80      	cmp	r3, #128	; 0x80
  406a8e:	f43f ae19 	beq.w	4066c4 <_vfiprintf_r+0x384>
  406a92:	9b05      	ldr	r3, [sp, #20]
  406a94:	1ae4      	subs	r4, r4, r3
  406a96:	2c00      	cmp	r4, #0
  406a98:	dd2e      	ble.n	406af8 <_vfiprintf_r+0x7b8>
  406a9a:	2c10      	cmp	r4, #16
  406a9c:	4db3      	ldr	r5, [pc, #716]	; (406d6c <_vfiprintf_r+0xa2c>)
  406a9e:	dd1e      	ble.n	406ade <_vfiprintf_r+0x79e>
  406aa0:	46d6      	mov	lr, sl
  406aa2:	2610      	movs	r6, #16
  406aa4:	9f06      	ldr	r7, [sp, #24]
  406aa6:	f8dd a010 	ldr.w	sl, [sp, #16]
  406aaa:	e006      	b.n	406aba <_vfiprintf_r+0x77a>
  406aac:	1c88      	adds	r0, r1, #2
  406aae:	f10e 0e08 	add.w	lr, lr, #8
  406ab2:	4619      	mov	r1, r3
  406ab4:	3c10      	subs	r4, #16
  406ab6:	2c10      	cmp	r4, #16
  406ab8:	dd10      	ble.n	406adc <_vfiprintf_r+0x79c>
  406aba:	1c4b      	adds	r3, r1, #1
  406abc:	3210      	adds	r2, #16
  406abe:	2b07      	cmp	r3, #7
  406ac0:	9211      	str	r2, [sp, #68]	; 0x44
  406ac2:	e88e 0060 	stmia.w	lr, {r5, r6}
  406ac6:	9310      	str	r3, [sp, #64]	; 0x40
  406ac8:	ddf0      	ble.n	406aac <_vfiprintf_r+0x76c>
  406aca:	2a00      	cmp	r2, #0
  406acc:	d165      	bne.n	406b9a <_vfiprintf_r+0x85a>
  406ace:	3c10      	subs	r4, #16
  406ad0:	2c10      	cmp	r4, #16
  406ad2:	f04f 0001 	mov.w	r0, #1
  406ad6:	4611      	mov	r1, r2
  406ad8:	46ce      	mov	lr, r9
  406ada:	dcee      	bgt.n	406aba <_vfiprintf_r+0x77a>
  406adc:	46f2      	mov	sl, lr
  406ade:	4422      	add	r2, r4
  406ae0:	2807      	cmp	r0, #7
  406ae2:	9211      	str	r2, [sp, #68]	; 0x44
  406ae4:	f8ca 5000 	str.w	r5, [sl]
  406ae8:	f8ca 4004 	str.w	r4, [sl, #4]
  406aec:	9010      	str	r0, [sp, #64]	; 0x40
  406aee:	f300 8085 	bgt.w	406bfc <_vfiprintf_r+0x8bc>
  406af2:	f10a 0a08 	add.w	sl, sl, #8
  406af6:	3001      	adds	r0, #1
  406af8:	9905      	ldr	r1, [sp, #20]
  406afa:	f8ca b000 	str.w	fp, [sl]
  406afe:	440a      	add	r2, r1
  406b00:	2807      	cmp	r0, #7
  406b02:	9211      	str	r2, [sp, #68]	; 0x44
  406b04:	f8ca 1004 	str.w	r1, [sl, #4]
  406b08:	9010      	str	r0, [sp, #64]	; 0x40
  406b0a:	f340 8082 	ble.w	406c12 <_vfiprintf_r+0x8d2>
  406b0e:	2a00      	cmp	r2, #0
  406b10:	f040 8118 	bne.w	406d44 <_vfiprintf_r+0xa04>
  406b14:	9b02      	ldr	r3, [sp, #8]
  406b16:	9210      	str	r2, [sp, #64]	; 0x40
  406b18:	0758      	lsls	r0, r3, #29
  406b1a:	d535      	bpl.n	406b88 <_vfiprintf_r+0x848>
  406b1c:	9b08      	ldr	r3, [sp, #32]
  406b1e:	9901      	ldr	r1, [sp, #4]
  406b20:	1a5c      	subs	r4, r3, r1
  406b22:	2c00      	cmp	r4, #0
  406b24:	f340 80e7 	ble.w	406cf6 <_vfiprintf_r+0x9b6>
  406b28:	46ca      	mov	sl, r9
  406b2a:	2c10      	cmp	r4, #16
  406b2c:	f340 8218 	ble.w	406f60 <_vfiprintf_r+0xc20>
  406b30:	9910      	ldr	r1, [sp, #64]	; 0x40
  406b32:	4e8f      	ldr	r6, [pc, #572]	; (406d70 <_vfiprintf_r+0xa30>)
  406b34:	9f06      	ldr	r7, [sp, #24]
  406b36:	f8dd b010 	ldr.w	fp, [sp, #16]
  406b3a:	2510      	movs	r5, #16
  406b3c:	e006      	b.n	406b4c <_vfiprintf_r+0x80c>
  406b3e:	1c88      	adds	r0, r1, #2
  406b40:	f10a 0a08 	add.w	sl, sl, #8
  406b44:	4619      	mov	r1, r3
  406b46:	3c10      	subs	r4, #16
  406b48:	2c10      	cmp	r4, #16
  406b4a:	dd11      	ble.n	406b70 <_vfiprintf_r+0x830>
  406b4c:	1c4b      	adds	r3, r1, #1
  406b4e:	3210      	adds	r2, #16
  406b50:	2b07      	cmp	r3, #7
  406b52:	9211      	str	r2, [sp, #68]	; 0x44
  406b54:	f8ca 6000 	str.w	r6, [sl]
  406b58:	f8ca 5004 	str.w	r5, [sl, #4]
  406b5c:	9310      	str	r3, [sp, #64]	; 0x40
  406b5e:	ddee      	ble.n	406b3e <_vfiprintf_r+0x7fe>
  406b60:	bb42      	cbnz	r2, 406bb4 <_vfiprintf_r+0x874>
  406b62:	3c10      	subs	r4, #16
  406b64:	2c10      	cmp	r4, #16
  406b66:	f04f 0001 	mov.w	r0, #1
  406b6a:	4611      	mov	r1, r2
  406b6c:	46ca      	mov	sl, r9
  406b6e:	dced      	bgt.n	406b4c <_vfiprintf_r+0x80c>
  406b70:	4422      	add	r2, r4
  406b72:	2807      	cmp	r0, #7
  406b74:	9211      	str	r2, [sp, #68]	; 0x44
  406b76:	f8ca 6000 	str.w	r6, [sl]
  406b7a:	f8ca 4004 	str.w	r4, [sl, #4]
  406b7e:	9010      	str	r0, [sp, #64]	; 0x40
  406b80:	dd51      	ble.n	406c26 <_vfiprintf_r+0x8e6>
  406b82:	2a00      	cmp	r2, #0
  406b84:	f040 819b 	bne.w	406ebe <_vfiprintf_r+0xb7e>
  406b88:	9b03      	ldr	r3, [sp, #12]
  406b8a:	9a08      	ldr	r2, [sp, #32]
  406b8c:	9901      	ldr	r1, [sp, #4]
  406b8e:	428a      	cmp	r2, r1
  406b90:	bfac      	ite	ge
  406b92:	189b      	addge	r3, r3, r2
  406b94:	185b      	addlt	r3, r3, r1
  406b96:	9303      	str	r3, [sp, #12]
  406b98:	e04e      	b.n	406c38 <_vfiprintf_r+0x8f8>
  406b9a:	aa0f      	add	r2, sp, #60	; 0x3c
  406b9c:	4651      	mov	r1, sl
  406b9e:	4638      	mov	r0, r7
  406ba0:	f7ff fb8e 	bl	4062c0 <__sprint_r.part.0>
  406ba4:	2800      	cmp	r0, #0
  406ba6:	f040 813f 	bne.w	406e28 <_vfiprintf_r+0xae8>
  406baa:	9910      	ldr	r1, [sp, #64]	; 0x40
  406bac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406bae:	1c48      	adds	r0, r1, #1
  406bb0:	46ce      	mov	lr, r9
  406bb2:	e77f      	b.n	406ab4 <_vfiprintf_r+0x774>
  406bb4:	aa0f      	add	r2, sp, #60	; 0x3c
  406bb6:	4659      	mov	r1, fp
  406bb8:	4638      	mov	r0, r7
  406bba:	f7ff fb81 	bl	4062c0 <__sprint_r.part.0>
  406bbe:	b960      	cbnz	r0, 406bda <_vfiprintf_r+0x89a>
  406bc0:	9910      	ldr	r1, [sp, #64]	; 0x40
  406bc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406bc4:	1c48      	adds	r0, r1, #1
  406bc6:	46ca      	mov	sl, r9
  406bc8:	e7bd      	b.n	406b46 <_vfiprintf_r+0x806>
  406bca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406bcc:	f8dd b010 	ldr.w	fp, [sp, #16]
  406bd0:	2b00      	cmp	r3, #0
  406bd2:	f040 81d4 	bne.w	406f7e <_vfiprintf_r+0xc3e>
  406bd6:	2300      	movs	r3, #0
  406bd8:	9310      	str	r3, [sp, #64]	; 0x40
  406bda:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406bde:	f013 0f01 	tst.w	r3, #1
  406be2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406be6:	d102      	bne.n	406bee <_vfiprintf_r+0x8ae>
  406be8:	059a      	lsls	r2, r3, #22
  406bea:	f140 80de 	bpl.w	406daa <_vfiprintf_r+0xa6a>
  406bee:	065b      	lsls	r3, r3, #25
  406bf0:	f53f acb2 	bmi.w	406558 <_vfiprintf_r+0x218>
  406bf4:	9803      	ldr	r0, [sp, #12]
  406bf6:	b02d      	add	sp, #180	; 0xb4
  406bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bfc:	2a00      	cmp	r2, #0
  406bfe:	f040 8106 	bne.w	406e0e <_vfiprintf_r+0xace>
  406c02:	9a05      	ldr	r2, [sp, #20]
  406c04:	921d      	str	r2, [sp, #116]	; 0x74
  406c06:	2301      	movs	r3, #1
  406c08:	9211      	str	r2, [sp, #68]	; 0x44
  406c0a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  406c0e:	9310      	str	r3, [sp, #64]	; 0x40
  406c10:	46ca      	mov	sl, r9
  406c12:	f10a 0a08 	add.w	sl, sl, #8
  406c16:	9b02      	ldr	r3, [sp, #8]
  406c18:	0759      	lsls	r1, r3, #29
  406c1a:	d504      	bpl.n	406c26 <_vfiprintf_r+0x8e6>
  406c1c:	9b08      	ldr	r3, [sp, #32]
  406c1e:	9901      	ldr	r1, [sp, #4]
  406c20:	1a5c      	subs	r4, r3, r1
  406c22:	2c00      	cmp	r4, #0
  406c24:	dc81      	bgt.n	406b2a <_vfiprintf_r+0x7ea>
  406c26:	9b03      	ldr	r3, [sp, #12]
  406c28:	9908      	ldr	r1, [sp, #32]
  406c2a:	9801      	ldr	r0, [sp, #4]
  406c2c:	4281      	cmp	r1, r0
  406c2e:	bfac      	ite	ge
  406c30:	185b      	addge	r3, r3, r1
  406c32:	181b      	addlt	r3, r3, r0
  406c34:	9303      	str	r3, [sp, #12]
  406c36:	bb72      	cbnz	r2, 406c96 <_vfiprintf_r+0x956>
  406c38:	2300      	movs	r3, #0
  406c3a:	9310      	str	r3, [sp, #64]	; 0x40
  406c3c:	46ca      	mov	sl, r9
  406c3e:	f7ff bbbc 	b.w	4063ba <_vfiprintf_r+0x7a>
  406c42:	aa0f      	add	r2, sp, #60	; 0x3c
  406c44:	9904      	ldr	r1, [sp, #16]
  406c46:	4620      	mov	r0, r4
  406c48:	f7ff fb3a 	bl	4062c0 <__sprint_r.part.0>
  406c4c:	bb50      	cbnz	r0, 406ca4 <_vfiprintf_r+0x964>
  406c4e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406c50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c52:	f101 0e01 	add.w	lr, r1, #1
  406c56:	46cc      	mov	ip, r9
  406c58:	e548      	b.n	4066ec <_vfiprintf_r+0x3ac>
  406c5a:	2a00      	cmp	r2, #0
  406c5c:	f040 8140 	bne.w	406ee0 <_vfiprintf_r+0xba0>
  406c60:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  406c64:	2900      	cmp	r1, #0
  406c66:	f000 811b 	beq.w	406ea0 <_vfiprintf_r+0xb60>
  406c6a:	2201      	movs	r2, #1
  406c6c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406c70:	4610      	mov	r0, r2
  406c72:	921d      	str	r2, [sp, #116]	; 0x74
  406c74:	911c      	str	r1, [sp, #112]	; 0x70
  406c76:	46ca      	mov	sl, r9
  406c78:	4601      	mov	r1, r0
  406c7a:	f10a 0a08 	add.w	sl, sl, #8
  406c7e:	3001      	adds	r0, #1
  406c80:	e507      	b.n	406692 <_vfiprintf_r+0x352>
  406c82:	9b02      	ldr	r3, [sp, #8]
  406c84:	2a01      	cmp	r2, #1
  406c86:	f000 8098 	beq.w	406dba <_vfiprintf_r+0xa7a>
  406c8a:	2a02      	cmp	r2, #2
  406c8c:	d10d      	bne.n	406caa <_vfiprintf_r+0x96a>
  406c8e:	9302      	str	r3, [sp, #8]
  406c90:	2600      	movs	r6, #0
  406c92:	2700      	movs	r7, #0
  406c94:	e5b0      	b.n	4067f8 <_vfiprintf_r+0x4b8>
  406c96:	aa0f      	add	r2, sp, #60	; 0x3c
  406c98:	9904      	ldr	r1, [sp, #16]
  406c9a:	9806      	ldr	r0, [sp, #24]
  406c9c:	f7ff fb10 	bl	4062c0 <__sprint_r.part.0>
  406ca0:	2800      	cmp	r0, #0
  406ca2:	d0c9      	beq.n	406c38 <_vfiprintf_r+0x8f8>
  406ca4:	f8dd b010 	ldr.w	fp, [sp, #16]
  406ca8:	e797      	b.n	406bda <_vfiprintf_r+0x89a>
  406caa:	9302      	str	r3, [sp, #8]
  406cac:	2600      	movs	r6, #0
  406cae:	2700      	movs	r7, #0
  406cb0:	4649      	mov	r1, r9
  406cb2:	e000      	b.n	406cb6 <_vfiprintf_r+0x976>
  406cb4:	4659      	mov	r1, fp
  406cb6:	08f2      	lsrs	r2, r6, #3
  406cb8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406cbc:	08f8      	lsrs	r0, r7, #3
  406cbe:	f006 0307 	and.w	r3, r6, #7
  406cc2:	4607      	mov	r7, r0
  406cc4:	4616      	mov	r6, r2
  406cc6:	3330      	adds	r3, #48	; 0x30
  406cc8:	ea56 0207 	orrs.w	r2, r6, r7
  406ccc:	f801 3c01 	strb.w	r3, [r1, #-1]
  406cd0:	f101 3bff 	add.w	fp, r1, #4294967295
  406cd4:	d1ee      	bne.n	406cb4 <_vfiprintf_r+0x974>
  406cd6:	9a02      	ldr	r2, [sp, #8]
  406cd8:	07d6      	lsls	r6, r2, #31
  406cda:	f57f ad9d 	bpl.w	406818 <_vfiprintf_r+0x4d8>
  406cde:	2b30      	cmp	r3, #48	; 0x30
  406ce0:	f43f ad9a 	beq.w	406818 <_vfiprintf_r+0x4d8>
  406ce4:	3902      	subs	r1, #2
  406ce6:	2330      	movs	r3, #48	; 0x30
  406ce8:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406cec:	eba9 0301 	sub.w	r3, r9, r1
  406cf0:	9305      	str	r3, [sp, #20]
  406cf2:	468b      	mov	fp, r1
  406cf4:	e476      	b.n	4065e4 <_vfiprintf_r+0x2a4>
  406cf6:	9b03      	ldr	r3, [sp, #12]
  406cf8:	9a08      	ldr	r2, [sp, #32]
  406cfa:	428a      	cmp	r2, r1
  406cfc:	bfac      	ite	ge
  406cfe:	189b      	addge	r3, r3, r2
  406d00:	185b      	addlt	r3, r3, r1
  406d02:	9303      	str	r3, [sp, #12]
  406d04:	e798      	b.n	406c38 <_vfiprintf_r+0x8f8>
  406d06:	2202      	movs	r2, #2
  406d08:	e44d      	b.n	4065a6 <_vfiprintf_r+0x266>
  406d0a:	2f00      	cmp	r7, #0
  406d0c:	bf08      	it	eq
  406d0e:	2e0a      	cmpeq	r6, #10
  406d10:	d352      	bcc.n	406db8 <_vfiprintf_r+0xa78>
  406d12:	46cb      	mov	fp, r9
  406d14:	4630      	mov	r0, r6
  406d16:	4639      	mov	r1, r7
  406d18:	220a      	movs	r2, #10
  406d1a:	2300      	movs	r3, #0
  406d1c:	f001 fe9a 	bl	408a54 <__aeabi_uldivmod>
  406d20:	3230      	adds	r2, #48	; 0x30
  406d22:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  406d26:	4630      	mov	r0, r6
  406d28:	4639      	mov	r1, r7
  406d2a:	2300      	movs	r3, #0
  406d2c:	220a      	movs	r2, #10
  406d2e:	f001 fe91 	bl	408a54 <__aeabi_uldivmod>
  406d32:	4606      	mov	r6, r0
  406d34:	460f      	mov	r7, r1
  406d36:	ea56 0307 	orrs.w	r3, r6, r7
  406d3a:	d1eb      	bne.n	406d14 <_vfiprintf_r+0x9d4>
  406d3c:	e56c      	b.n	406818 <_vfiprintf_r+0x4d8>
  406d3e:	9405      	str	r4, [sp, #20]
  406d40:	46cb      	mov	fp, r9
  406d42:	e44f      	b.n	4065e4 <_vfiprintf_r+0x2a4>
  406d44:	aa0f      	add	r2, sp, #60	; 0x3c
  406d46:	9904      	ldr	r1, [sp, #16]
  406d48:	9806      	ldr	r0, [sp, #24]
  406d4a:	f7ff fab9 	bl	4062c0 <__sprint_r.part.0>
  406d4e:	2800      	cmp	r0, #0
  406d50:	d1a8      	bne.n	406ca4 <_vfiprintf_r+0x964>
  406d52:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d54:	46ca      	mov	sl, r9
  406d56:	e75e      	b.n	406c16 <_vfiprintf_r+0x8d6>
  406d58:	aa0f      	add	r2, sp, #60	; 0x3c
  406d5a:	9904      	ldr	r1, [sp, #16]
  406d5c:	9806      	ldr	r0, [sp, #24]
  406d5e:	f7ff faaf 	bl	4062c0 <__sprint_r.part.0>
  406d62:	2800      	cmp	r0, #0
  406d64:	d19e      	bne.n	406ca4 <_vfiprintf_r+0x964>
  406d66:	46ca      	mov	sl, r9
  406d68:	f7ff bbc0 	b.w	4064ec <_vfiprintf_r+0x1ac>
  406d6c:	00408ef8 	.word	0x00408ef8
  406d70:	00408ee8 	.word	0x00408ee8
  406d74:	3104      	adds	r1, #4
  406d76:	6816      	ldr	r6, [r2, #0]
  406d78:	9107      	str	r1, [sp, #28]
  406d7a:	2201      	movs	r2, #1
  406d7c:	2700      	movs	r7, #0
  406d7e:	e412      	b.n	4065a6 <_vfiprintf_r+0x266>
  406d80:	9807      	ldr	r0, [sp, #28]
  406d82:	4601      	mov	r1, r0
  406d84:	3104      	adds	r1, #4
  406d86:	6806      	ldr	r6, [r0, #0]
  406d88:	9107      	str	r1, [sp, #28]
  406d8a:	2700      	movs	r7, #0
  406d8c:	e40b      	b.n	4065a6 <_vfiprintf_r+0x266>
  406d8e:	680e      	ldr	r6, [r1, #0]
  406d90:	3104      	adds	r1, #4
  406d92:	9107      	str	r1, [sp, #28]
  406d94:	2700      	movs	r7, #0
  406d96:	e591      	b.n	4068bc <_vfiprintf_r+0x57c>
  406d98:	9907      	ldr	r1, [sp, #28]
  406d9a:	680e      	ldr	r6, [r1, #0]
  406d9c:	460a      	mov	r2, r1
  406d9e:	17f7      	asrs	r7, r6, #31
  406da0:	3204      	adds	r2, #4
  406da2:	9207      	str	r2, [sp, #28]
  406da4:	4630      	mov	r0, r6
  406da6:	4639      	mov	r1, r7
  406da8:	e50f      	b.n	4067ca <_vfiprintf_r+0x48a>
  406daa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406dae:	f000 fe7f 	bl	407ab0 <__retarget_lock_release_recursive>
  406db2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406db6:	e71a      	b.n	406bee <_vfiprintf_r+0x8ae>
  406db8:	9b02      	ldr	r3, [sp, #8]
  406dba:	9302      	str	r3, [sp, #8]
  406dbc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406dc0:	3630      	adds	r6, #48	; 0x30
  406dc2:	2301      	movs	r3, #1
  406dc4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406dc8:	9305      	str	r3, [sp, #20]
  406dca:	e40b      	b.n	4065e4 <_vfiprintf_r+0x2a4>
  406dcc:	aa0f      	add	r2, sp, #60	; 0x3c
  406dce:	9904      	ldr	r1, [sp, #16]
  406dd0:	9806      	ldr	r0, [sp, #24]
  406dd2:	f7ff fa75 	bl	4062c0 <__sprint_r.part.0>
  406dd6:	2800      	cmp	r0, #0
  406dd8:	f47f af64 	bne.w	406ca4 <_vfiprintf_r+0x964>
  406ddc:	9910      	ldr	r1, [sp, #64]	; 0x40
  406dde:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406de0:	1c48      	adds	r0, r1, #1
  406de2:	46ca      	mov	sl, r9
  406de4:	e651      	b.n	406a8a <_vfiprintf_r+0x74a>
  406de6:	aa0f      	add	r2, sp, #60	; 0x3c
  406de8:	9904      	ldr	r1, [sp, #16]
  406dea:	9806      	ldr	r0, [sp, #24]
  406dec:	f7ff fa68 	bl	4062c0 <__sprint_r.part.0>
  406df0:	2800      	cmp	r0, #0
  406df2:	f47f af57 	bne.w	406ca4 <_vfiprintf_r+0x964>
  406df6:	9910      	ldr	r1, [sp, #64]	; 0x40
  406df8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406dfa:	1c48      	adds	r0, r1, #1
  406dfc:	46ca      	mov	sl, r9
  406dfe:	e448      	b.n	406692 <_vfiprintf_r+0x352>
  406e00:	2a00      	cmp	r2, #0
  406e02:	f040 8091 	bne.w	406f28 <_vfiprintf_r+0xbe8>
  406e06:	2001      	movs	r0, #1
  406e08:	4611      	mov	r1, r2
  406e0a:	46ca      	mov	sl, r9
  406e0c:	e641      	b.n	406a92 <_vfiprintf_r+0x752>
  406e0e:	aa0f      	add	r2, sp, #60	; 0x3c
  406e10:	9904      	ldr	r1, [sp, #16]
  406e12:	9806      	ldr	r0, [sp, #24]
  406e14:	f7ff fa54 	bl	4062c0 <__sprint_r.part.0>
  406e18:	2800      	cmp	r0, #0
  406e1a:	f47f af43 	bne.w	406ca4 <_vfiprintf_r+0x964>
  406e1e:	9810      	ldr	r0, [sp, #64]	; 0x40
  406e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406e22:	3001      	adds	r0, #1
  406e24:	46ca      	mov	sl, r9
  406e26:	e667      	b.n	406af8 <_vfiprintf_r+0x7b8>
  406e28:	46d3      	mov	fp, sl
  406e2a:	e6d6      	b.n	406bda <_vfiprintf_r+0x89a>
  406e2c:	9e07      	ldr	r6, [sp, #28]
  406e2e:	3607      	adds	r6, #7
  406e30:	f026 0207 	bic.w	r2, r6, #7
  406e34:	f102 0108 	add.w	r1, r2, #8
  406e38:	e9d2 6700 	ldrd	r6, r7, [r2]
  406e3c:	9107      	str	r1, [sp, #28]
  406e3e:	2201      	movs	r2, #1
  406e40:	f7ff bbb1 	b.w	4065a6 <_vfiprintf_r+0x266>
  406e44:	9e07      	ldr	r6, [sp, #28]
  406e46:	3607      	adds	r6, #7
  406e48:	f026 0607 	bic.w	r6, r6, #7
  406e4c:	e9d6 0100 	ldrd	r0, r1, [r6]
  406e50:	f106 0208 	add.w	r2, r6, #8
  406e54:	9207      	str	r2, [sp, #28]
  406e56:	4606      	mov	r6, r0
  406e58:	460f      	mov	r7, r1
  406e5a:	e4b6      	b.n	4067ca <_vfiprintf_r+0x48a>
  406e5c:	9e07      	ldr	r6, [sp, #28]
  406e5e:	3607      	adds	r6, #7
  406e60:	f026 0207 	bic.w	r2, r6, #7
  406e64:	f102 0108 	add.w	r1, r2, #8
  406e68:	e9d2 6700 	ldrd	r6, r7, [r2]
  406e6c:	9107      	str	r1, [sp, #28]
  406e6e:	2200      	movs	r2, #0
  406e70:	f7ff bb99 	b.w	4065a6 <_vfiprintf_r+0x266>
  406e74:	9e07      	ldr	r6, [sp, #28]
  406e76:	3607      	adds	r6, #7
  406e78:	f026 0107 	bic.w	r1, r6, #7
  406e7c:	f101 0008 	add.w	r0, r1, #8
  406e80:	9007      	str	r0, [sp, #28]
  406e82:	e9d1 6700 	ldrd	r6, r7, [r1]
  406e86:	e519      	b.n	4068bc <_vfiprintf_r+0x57c>
  406e88:	46cb      	mov	fp, r9
  406e8a:	f7ff bbab 	b.w	4065e4 <_vfiprintf_r+0x2a4>
  406e8e:	252d      	movs	r5, #45	; 0x2d
  406e90:	4276      	negs	r6, r6
  406e92:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  406e96:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e9a:	2201      	movs	r2, #1
  406e9c:	f7ff bb88 	b.w	4065b0 <_vfiprintf_r+0x270>
  406ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406ea2:	b9b3      	cbnz	r3, 406ed2 <_vfiprintf_r+0xb92>
  406ea4:	4611      	mov	r1, r2
  406ea6:	2001      	movs	r0, #1
  406ea8:	46ca      	mov	sl, r9
  406eaa:	e5f2      	b.n	406a92 <_vfiprintf_r+0x752>
  406eac:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406eb0:	f000 fdfe 	bl	407ab0 <__retarget_lock_release_recursive>
  406eb4:	f04f 33ff 	mov.w	r3, #4294967295
  406eb8:	9303      	str	r3, [sp, #12]
  406eba:	f7ff bb50 	b.w	40655e <_vfiprintf_r+0x21e>
  406ebe:	aa0f      	add	r2, sp, #60	; 0x3c
  406ec0:	9904      	ldr	r1, [sp, #16]
  406ec2:	9806      	ldr	r0, [sp, #24]
  406ec4:	f7ff f9fc 	bl	4062c0 <__sprint_r.part.0>
  406ec8:	2800      	cmp	r0, #0
  406eca:	f47f aeeb 	bne.w	406ca4 <_vfiprintf_r+0x964>
  406ece:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406ed0:	e6a9      	b.n	406c26 <_vfiprintf_r+0x8e6>
  406ed2:	ab0e      	add	r3, sp, #56	; 0x38
  406ed4:	2202      	movs	r2, #2
  406ed6:	931c      	str	r3, [sp, #112]	; 0x70
  406ed8:	921d      	str	r2, [sp, #116]	; 0x74
  406eda:	2001      	movs	r0, #1
  406edc:	46ca      	mov	sl, r9
  406ede:	e5d0      	b.n	406a82 <_vfiprintf_r+0x742>
  406ee0:	aa0f      	add	r2, sp, #60	; 0x3c
  406ee2:	9904      	ldr	r1, [sp, #16]
  406ee4:	9806      	ldr	r0, [sp, #24]
  406ee6:	f7ff f9eb 	bl	4062c0 <__sprint_r.part.0>
  406eea:	2800      	cmp	r0, #0
  406eec:	f47f aeda 	bne.w	406ca4 <_vfiprintf_r+0x964>
  406ef0:	9910      	ldr	r1, [sp, #64]	; 0x40
  406ef2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406ef4:	1c48      	adds	r0, r1, #1
  406ef6:	46ca      	mov	sl, r9
  406ef8:	e5a4      	b.n	406a44 <_vfiprintf_r+0x704>
  406efa:	9a07      	ldr	r2, [sp, #28]
  406efc:	9903      	ldr	r1, [sp, #12]
  406efe:	6813      	ldr	r3, [r2, #0]
  406f00:	17cd      	asrs	r5, r1, #31
  406f02:	4608      	mov	r0, r1
  406f04:	3204      	adds	r2, #4
  406f06:	4629      	mov	r1, r5
  406f08:	9207      	str	r2, [sp, #28]
  406f0a:	e9c3 0100 	strd	r0, r1, [r3]
  406f0e:	f7ff ba54 	b.w	4063ba <_vfiprintf_r+0x7a>
  406f12:	4658      	mov	r0, fp
  406f14:	9607      	str	r6, [sp, #28]
  406f16:	9302      	str	r3, [sp, #8]
  406f18:	f7ff f932 	bl	406180 <strlen>
  406f1c:	2400      	movs	r4, #0
  406f1e:	9005      	str	r0, [sp, #20]
  406f20:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406f24:	f7ff bb5e 	b.w	4065e4 <_vfiprintf_r+0x2a4>
  406f28:	aa0f      	add	r2, sp, #60	; 0x3c
  406f2a:	9904      	ldr	r1, [sp, #16]
  406f2c:	9806      	ldr	r0, [sp, #24]
  406f2e:	f7ff f9c7 	bl	4062c0 <__sprint_r.part.0>
  406f32:	2800      	cmp	r0, #0
  406f34:	f47f aeb6 	bne.w	406ca4 <_vfiprintf_r+0x964>
  406f38:	9910      	ldr	r1, [sp, #64]	; 0x40
  406f3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406f3c:	1c48      	adds	r0, r1, #1
  406f3e:	46ca      	mov	sl, r9
  406f40:	e5a7      	b.n	406a92 <_vfiprintf_r+0x752>
  406f42:	9910      	ldr	r1, [sp, #64]	; 0x40
  406f44:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406f46:	4e20      	ldr	r6, [pc, #128]	; (406fc8 <_vfiprintf_r+0xc88>)
  406f48:	3101      	adds	r1, #1
  406f4a:	f7ff bb90 	b.w	40666e <_vfiprintf_r+0x32e>
  406f4e:	2c06      	cmp	r4, #6
  406f50:	bf28      	it	cs
  406f52:	2406      	movcs	r4, #6
  406f54:	9405      	str	r4, [sp, #20]
  406f56:	9607      	str	r6, [sp, #28]
  406f58:	9401      	str	r4, [sp, #4]
  406f5a:	f8df b070 	ldr.w	fp, [pc, #112]	; 406fcc <_vfiprintf_r+0xc8c>
  406f5e:	e4d5      	b.n	40690c <_vfiprintf_r+0x5cc>
  406f60:	9810      	ldr	r0, [sp, #64]	; 0x40
  406f62:	4e19      	ldr	r6, [pc, #100]	; (406fc8 <_vfiprintf_r+0xc88>)
  406f64:	3001      	adds	r0, #1
  406f66:	e603      	b.n	406b70 <_vfiprintf_r+0x830>
  406f68:	9405      	str	r4, [sp, #20]
  406f6a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406f6e:	9607      	str	r6, [sp, #28]
  406f70:	9302      	str	r3, [sp, #8]
  406f72:	4604      	mov	r4, r0
  406f74:	f7ff bb36 	b.w	4065e4 <_vfiprintf_r+0x2a4>
  406f78:	4686      	mov	lr, r0
  406f7a:	f7ff bbce 	b.w	40671a <_vfiprintf_r+0x3da>
  406f7e:	9806      	ldr	r0, [sp, #24]
  406f80:	aa0f      	add	r2, sp, #60	; 0x3c
  406f82:	4659      	mov	r1, fp
  406f84:	f7ff f99c 	bl	4062c0 <__sprint_r.part.0>
  406f88:	2800      	cmp	r0, #0
  406f8a:	f43f ae24 	beq.w	406bd6 <_vfiprintf_r+0x896>
  406f8e:	e624      	b.n	406bda <_vfiprintf_r+0x89a>
  406f90:	9907      	ldr	r1, [sp, #28]
  406f92:	f898 2001 	ldrb.w	r2, [r8, #1]
  406f96:	680c      	ldr	r4, [r1, #0]
  406f98:	3104      	adds	r1, #4
  406f9a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406f9e:	46b8      	mov	r8, r7
  406fa0:	9107      	str	r1, [sp, #28]
  406fa2:	f7ff ba3f 	b.w	406424 <_vfiprintf_r+0xe4>
  406fa6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406faa:	e43c      	b.n	406826 <_vfiprintf_r+0x4e6>
  406fac:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406fb0:	e521      	b.n	4069f6 <_vfiprintf_r+0x6b6>
  406fb2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406fb6:	f7ff bbf4 	b.w	4067a2 <_vfiprintf_r+0x462>
  406fba:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406fbe:	e491      	b.n	4068e4 <_vfiprintf_r+0x5a4>
  406fc0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406fc4:	e469      	b.n	40689a <_vfiprintf_r+0x55a>
  406fc6:	bf00      	nop
  406fc8:	00408ee8 	.word	0x00408ee8
  406fcc:	00408ee0 	.word	0x00408ee0

00406fd0 <__sbprintf>:
  406fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406fd4:	460c      	mov	r4, r1
  406fd6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406fda:	8989      	ldrh	r1, [r1, #12]
  406fdc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406fde:	89e5      	ldrh	r5, [r4, #14]
  406fe0:	9619      	str	r6, [sp, #100]	; 0x64
  406fe2:	f021 0102 	bic.w	r1, r1, #2
  406fe6:	4606      	mov	r6, r0
  406fe8:	69e0      	ldr	r0, [r4, #28]
  406fea:	f8ad 100c 	strh.w	r1, [sp, #12]
  406fee:	4617      	mov	r7, r2
  406ff0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406ff4:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406ff6:	f8ad 500e 	strh.w	r5, [sp, #14]
  406ffa:	4698      	mov	r8, r3
  406ffc:	ad1a      	add	r5, sp, #104	; 0x68
  406ffe:	2300      	movs	r3, #0
  407000:	9007      	str	r0, [sp, #28]
  407002:	a816      	add	r0, sp, #88	; 0x58
  407004:	9209      	str	r2, [sp, #36]	; 0x24
  407006:	9306      	str	r3, [sp, #24]
  407008:	9500      	str	r5, [sp, #0]
  40700a:	9504      	str	r5, [sp, #16]
  40700c:	9102      	str	r1, [sp, #8]
  40700e:	9105      	str	r1, [sp, #20]
  407010:	f000 fd48 	bl	407aa4 <__retarget_lock_init_recursive>
  407014:	4643      	mov	r3, r8
  407016:	463a      	mov	r2, r7
  407018:	4669      	mov	r1, sp
  40701a:	4630      	mov	r0, r6
  40701c:	f7ff f990 	bl	406340 <_vfiprintf_r>
  407020:	1e05      	subs	r5, r0, #0
  407022:	db07      	blt.n	407034 <__sbprintf+0x64>
  407024:	4630      	mov	r0, r6
  407026:	4669      	mov	r1, sp
  407028:	f000 f928 	bl	40727c <_fflush_r>
  40702c:	2800      	cmp	r0, #0
  40702e:	bf18      	it	ne
  407030:	f04f 35ff 	movne.w	r5, #4294967295
  407034:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  407038:	065b      	lsls	r3, r3, #25
  40703a:	d503      	bpl.n	407044 <__sbprintf+0x74>
  40703c:	89a3      	ldrh	r3, [r4, #12]
  40703e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407042:	81a3      	strh	r3, [r4, #12]
  407044:	9816      	ldr	r0, [sp, #88]	; 0x58
  407046:	f000 fd2f 	bl	407aa8 <__retarget_lock_close_recursive>
  40704a:	4628      	mov	r0, r5
  40704c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  407050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00407054 <__swsetup_r>:
  407054:	b538      	push	{r3, r4, r5, lr}
  407056:	4b30      	ldr	r3, [pc, #192]	; (407118 <__swsetup_r+0xc4>)
  407058:	681b      	ldr	r3, [r3, #0]
  40705a:	4605      	mov	r5, r0
  40705c:	460c      	mov	r4, r1
  40705e:	b113      	cbz	r3, 407066 <__swsetup_r+0x12>
  407060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  407062:	2a00      	cmp	r2, #0
  407064:	d038      	beq.n	4070d8 <__swsetup_r+0x84>
  407066:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40706a:	b293      	uxth	r3, r2
  40706c:	0718      	lsls	r0, r3, #28
  40706e:	d50c      	bpl.n	40708a <__swsetup_r+0x36>
  407070:	6920      	ldr	r0, [r4, #16]
  407072:	b1a8      	cbz	r0, 4070a0 <__swsetup_r+0x4c>
  407074:	f013 0201 	ands.w	r2, r3, #1
  407078:	d01e      	beq.n	4070b8 <__swsetup_r+0x64>
  40707a:	6963      	ldr	r3, [r4, #20]
  40707c:	2200      	movs	r2, #0
  40707e:	425b      	negs	r3, r3
  407080:	61a3      	str	r3, [r4, #24]
  407082:	60a2      	str	r2, [r4, #8]
  407084:	b1f0      	cbz	r0, 4070c4 <__swsetup_r+0x70>
  407086:	2000      	movs	r0, #0
  407088:	bd38      	pop	{r3, r4, r5, pc}
  40708a:	06d9      	lsls	r1, r3, #27
  40708c:	d53c      	bpl.n	407108 <__swsetup_r+0xb4>
  40708e:	0758      	lsls	r0, r3, #29
  407090:	d426      	bmi.n	4070e0 <__swsetup_r+0x8c>
  407092:	6920      	ldr	r0, [r4, #16]
  407094:	f042 0308 	orr.w	r3, r2, #8
  407098:	81a3      	strh	r3, [r4, #12]
  40709a:	b29b      	uxth	r3, r3
  40709c:	2800      	cmp	r0, #0
  40709e:	d1e9      	bne.n	407074 <__swsetup_r+0x20>
  4070a0:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4070a4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4070a8:	d0e4      	beq.n	407074 <__swsetup_r+0x20>
  4070aa:	4628      	mov	r0, r5
  4070ac:	4621      	mov	r1, r4
  4070ae:	f000 fd2f 	bl	407b10 <__smakebuf_r>
  4070b2:	89a3      	ldrh	r3, [r4, #12]
  4070b4:	6920      	ldr	r0, [r4, #16]
  4070b6:	e7dd      	b.n	407074 <__swsetup_r+0x20>
  4070b8:	0799      	lsls	r1, r3, #30
  4070ba:	bf58      	it	pl
  4070bc:	6962      	ldrpl	r2, [r4, #20]
  4070be:	60a2      	str	r2, [r4, #8]
  4070c0:	2800      	cmp	r0, #0
  4070c2:	d1e0      	bne.n	407086 <__swsetup_r+0x32>
  4070c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4070c8:	061a      	lsls	r2, r3, #24
  4070ca:	d5dd      	bpl.n	407088 <__swsetup_r+0x34>
  4070cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4070d0:	81a3      	strh	r3, [r4, #12]
  4070d2:	f04f 30ff 	mov.w	r0, #4294967295
  4070d6:	bd38      	pop	{r3, r4, r5, pc}
  4070d8:	4618      	mov	r0, r3
  4070da:	f000 f927 	bl	40732c <__sinit>
  4070de:	e7c2      	b.n	407066 <__swsetup_r+0x12>
  4070e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4070e2:	b151      	cbz	r1, 4070fa <__swsetup_r+0xa6>
  4070e4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4070e8:	4299      	cmp	r1, r3
  4070ea:	d004      	beq.n	4070f6 <__swsetup_r+0xa2>
  4070ec:	4628      	mov	r0, r5
  4070ee:	f000 fa43 	bl	407578 <_free_r>
  4070f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4070f6:	2300      	movs	r3, #0
  4070f8:	6323      	str	r3, [r4, #48]	; 0x30
  4070fa:	2300      	movs	r3, #0
  4070fc:	6920      	ldr	r0, [r4, #16]
  4070fe:	6063      	str	r3, [r4, #4]
  407100:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  407104:	6020      	str	r0, [r4, #0]
  407106:	e7c5      	b.n	407094 <__swsetup_r+0x40>
  407108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40710c:	2309      	movs	r3, #9
  40710e:	602b      	str	r3, [r5, #0]
  407110:	f04f 30ff 	mov.w	r0, #4294967295
  407114:	81a2      	strh	r2, [r4, #12]
  407116:	bd38      	pop	{r3, r4, r5, pc}
  407118:	2040003c 	.word	0x2040003c

0040711c <register_fini>:
  40711c:	4b02      	ldr	r3, [pc, #8]	; (407128 <register_fini+0xc>)
  40711e:	b113      	cbz	r3, 407126 <register_fini+0xa>
  407120:	4802      	ldr	r0, [pc, #8]	; (40712c <register_fini+0x10>)
  407122:	f000 b805 	b.w	407130 <atexit>
  407126:	4770      	bx	lr
  407128:	00000000 	.word	0x00000000
  40712c:	0040739d 	.word	0x0040739d

00407130 <atexit>:
  407130:	2300      	movs	r3, #0
  407132:	4601      	mov	r1, r0
  407134:	461a      	mov	r2, r3
  407136:	4618      	mov	r0, r3
  407138:	f001 bb64 	b.w	408804 <__register_exitproc>

0040713c <__sflush_r>:
  40713c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407140:	b29a      	uxth	r2, r3
  407142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407146:	460d      	mov	r5, r1
  407148:	0711      	lsls	r1, r2, #28
  40714a:	4680      	mov	r8, r0
  40714c:	d43a      	bmi.n	4071c4 <__sflush_r+0x88>
  40714e:	686a      	ldr	r2, [r5, #4]
  407150:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407154:	2a00      	cmp	r2, #0
  407156:	81ab      	strh	r3, [r5, #12]
  407158:	dd6f      	ble.n	40723a <__sflush_r+0xfe>
  40715a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40715c:	2c00      	cmp	r4, #0
  40715e:	d049      	beq.n	4071f4 <__sflush_r+0xb8>
  407160:	2200      	movs	r2, #0
  407162:	b29b      	uxth	r3, r3
  407164:	f8d8 6000 	ldr.w	r6, [r8]
  407168:	f8c8 2000 	str.w	r2, [r8]
  40716c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407170:	d067      	beq.n	407242 <__sflush_r+0x106>
  407172:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407174:	075f      	lsls	r7, r3, #29
  407176:	d505      	bpl.n	407184 <__sflush_r+0x48>
  407178:	6869      	ldr	r1, [r5, #4]
  40717a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40717c:	1a52      	subs	r2, r2, r1
  40717e:	b10b      	cbz	r3, 407184 <__sflush_r+0x48>
  407180:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  407182:	1ad2      	subs	r2, r2, r3
  407184:	2300      	movs	r3, #0
  407186:	69e9      	ldr	r1, [r5, #28]
  407188:	4640      	mov	r0, r8
  40718a:	47a0      	blx	r4
  40718c:	1c44      	adds	r4, r0, #1
  40718e:	d03c      	beq.n	40720a <__sflush_r+0xce>
  407190:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407194:	692a      	ldr	r2, [r5, #16]
  407196:	602a      	str	r2, [r5, #0]
  407198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40719c:	2200      	movs	r2, #0
  40719e:	81ab      	strh	r3, [r5, #12]
  4071a0:	04db      	lsls	r3, r3, #19
  4071a2:	606a      	str	r2, [r5, #4]
  4071a4:	d447      	bmi.n	407236 <__sflush_r+0xfa>
  4071a6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4071a8:	f8c8 6000 	str.w	r6, [r8]
  4071ac:	b311      	cbz	r1, 4071f4 <__sflush_r+0xb8>
  4071ae:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4071b2:	4299      	cmp	r1, r3
  4071b4:	d002      	beq.n	4071bc <__sflush_r+0x80>
  4071b6:	4640      	mov	r0, r8
  4071b8:	f000 f9de 	bl	407578 <_free_r>
  4071bc:	2000      	movs	r0, #0
  4071be:	6328      	str	r0, [r5, #48]	; 0x30
  4071c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4071c4:	692e      	ldr	r6, [r5, #16]
  4071c6:	b1ae      	cbz	r6, 4071f4 <__sflush_r+0xb8>
  4071c8:	682c      	ldr	r4, [r5, #0]
  4071ca:	602e      	str	r6, [r5, #0]
  4071cc:	0791      	lsls	r1, r2, #30
  4071ce:	bf0c      	ite	eq
  4071d0:	696b      	ldreq	r3, [r5, #20]
  4071d2:	2300      	movne	r3, #0
  4071d4:	1ba4      	subs	r4, r4, r6
  4071d6:	60ab      	str	r3, [r5, #8]
  4071d8:	e00a      	b.n	4071f0 <__sflush_r+0xb4>
  4071da:	4623      	mov	r3, r4
  4071dc:	4632      	mov	r2, r6
  4071de:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4071e0:	69e9      	ldr	r1, [r5, #28]
  4071e2:	4640      	mov	r0, r8
  4071e4:	47b8      	blx	r7
  4071e6:	2800      	cmp	r0, #0
  4071e8:	eba4 0400 	sub.w	r4, r4, r0
  4071ec:	4406      	add	r6, r0
  4071ee:	dd04      	ble.n	4071fa <__sflush_r+0xbe>
  4071f0:	2c00      	cmp	r4, #0
  4071f2:	dcf2      	bgt.n	4071da <__sflush_r+0x9e>
  4071f4:	2000      	movs	r0, #0
  4071f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4071fa:	89ab      	ldrh	r3, [r5, #12]
  4071fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407200:	81ab      	strh	r3, [r5, #12]
  407202:	f04f 30ff 	mov.w	r0, #4294967295
  407206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40720a:	f8d8 4000 	ldr.w	r4, [r8]
  40720e:	2c1d      	cmp	r4, #29
  407210:	d8f3      	bhi.n	4071fa <__sflush_r+0xbe>
  407212:	4b19      	ldr	r3, [pc, #100]	; (407278 <__sflush_r+0x13c>)
  407214:	40e3      	lsrs	r3, r4
  407216:	43db      	mvns	r3, r3
  407218:	f013 0301 	ands.w	r3, r3, #1
  40721c:	d1ed      	bne.n	4071fa <__sflush_r+0xbe>
  40721e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  407222:	606b      	str	r3, [r5, #4]
  407224:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407228:	6929      	ldr	r1, [r5, #16]
  40722a:	81ab      	strh	r3, [r5, #12]
  40722c:	04da      	lsls	r2, r3, #19
  40722e:	6029      	str	r1, [r5, #0]
  407230:	d5b9      	bpl.n	4071a6 <__sflush_r+0x6a>
  407232:	2c00      	cmp	r4, #0
  407234:	d1b7      	bne.n	4071a6 <__sflush_r+0x6a>
  407236:	6528      	str	r0, [r5, #80]	; 0x50
  407238:	e7b5      	b.n	4071a6 <__sflush_r+0x6a>
  40723a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40723c:	2a00      	cmp	r2, #0
  40723e:	dc8c      	bgt.n	40715a <__sflush_r+0x1e>
  407240:	e7d8      	b.n	4071f4 <__sflush_r+0xb8>
  407242:	2301      	movs	r3, #1
  407244:	69e9      	ldr	r1, [r5, #28]
  407246:	4640      	mov	r0, r8
  407248:	47a0      	blx	r4
  40724a:	1c43      	adds	r3, r0, #1
  40724c:	4602      	mov	r2, r0
  40724e:	d002      	beq.n	407256 <__sflush_r+0x11a>
  407250:	89ab      	ldrh	r3, [r5, #12]
  407252:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407254:	e78e      	b.n	407174 <__sflush_r+0x38>
  407256:	f8d8 3000 	ldr.w	r3, [r8]
  40725a:	2b00      	cmp	r3, #0
  40725c:	d0f8      	beq.n	407250 <__sflush_r+0x114>
  40725e:	2b1d      	cmp	r3, #29
  407260:	d001      	beq.n	407266 <__sflush_r+0x12a>
  407262:	2b16      	cmp	r3, #22
  407264:	d102      	bne.n	40726c <__sflush_r+0x130>
  407266:	f8c8 6000 	str.w	r6, [r8]
  40726a:	e7c3      	b.n	4071f4 <__sflush_r+0xb8>
  40726c:	89ab      	ldrh	r3, [r5, #12]
  40726e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407272:	81ab      	strh	r3, [r5, #12]
  407274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407278:	20400001 	.word	0x20400001

0040727c <_fflush_r>:
  40727c:	b538      	push	{r3, r4, r5, lr}
  40727e:	460d      	mov	r5, r1
  407280:	4604      	mov	r4, r0
  407282:	b108      	cbz	r0, 407288 <_fflush_r+0xc>
  407284:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407286:	b1bb      	cbz	r3, 4072b8 <_fflush_r+0x3c>
  407288:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40728c:	b188      	cbz	r0, 4072b2 <_fflush_r+0x36>
  40728e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407290:	07db      	lsls	r3, r3, #31
  407292:	d401      	bmi.n	407298 <_fflush_r+0x1c>
  407294:	0581      	lsls	r1, r0, #22
  407296:	d517      	bpl.n	4072c8 <_fflush_r+0x4c>
  407298:	4620      	mov	r0, r4
  40729a:	4629      	mov	r1, r5
  40729c:	f7ff ff4e 	bl	40713c <__sflush_r>
  4072a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4072a2:	07da      	lsls	r2, r3, #31
  4072a4:	4604      	mov	r4, r0
  4072a6:	d402      	bmi.n	4072ae <_fflush_r+0x32>
  4072a8:	89ab      	ldrh	r3, [r5, #12]
  4072aa:	059b      	lsls	r3, r3, #22
  4072ac:	d507      	bpl.n	4072be <_fflush_r+0x42>
  4072ae:	4620      	mov	r0, r4
  4072b0:	bd38      	pop	{r3, r4, r5, pc}
  4072b2:	4604      	mov	r4, r0
  4072b4:	4620      	mov	r0, r4
  4072b6:	bd38      	pop	{r3, r4, r5, pc}
  4072b8:	f000 f838 	bl	40732c <__sinit>
  4072bc:	e7e4      	b.n	407288 <_fflush_r+0xc>
  4072be:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4072c0:	f000 fbf6 	bl	407ab0 <__retarget_lock_release_recursive>
  4072c4:	4620      	mov	r0, r4
  4072c6:	bd38      	pop	{r3, r4, r5, pc}
  4072c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4072ca:	f000 fbef 	bl	407aac <__retarget_lock_acquire_recursive>
  4072ce:	e7e3      	b.n	407298 <_fflush_r+0x1c>

004072d0 <_cleanup_r>:
  4072d0:	4901      	ldr	r1, [pc, #4]	; (4072d8 <_cleanup_r+0x8>)
  4072d2:	f000 bbaf 	b.w	407a34 <_fwalk_reent>
  4072d6:	bf00      	nop
  4072d8:	004088ed 	.word	0x004088ed

004072dc <std.isra.0>:
  4072dc:	b510      	push	{r4, lr}
  4072de:	2300      	movs	r3, #0
  4072e0:	4604      	mov	r4, r0
  4072e2:	8181      	strh	r1, [r0, #12]
  4072e4:	81c2      	strh	r2, [r0, #14]
  4072e6:	6003      	str	r3, [r0, #0]
  4072e8:	6043      	str	r3, [r0, #4]
  4072ea:	6083      	str	r3, [r0, #8]
  4072ec:	6643      	str	r3, [r0, #100]	; 0x64
  4072ee:	6103      	str	r3, [r0, #16]
  4072f0:	6143      	str	r3, [r0, #20]
  4072f2:	6183      	str	r3, [r0, #24]
  4072f4:	4619      	mov	r1, r3
  4072f6:	2208      	movs	r2, #8
  4072f8:	305c      	adds	r0, #92	; 0x5c
  4072fa:	f7fe fdcb 	bl	405e94 <memset>
  4072fe:	4807      	ldr	r0, [pc, #28]	; (40731c <std.isra.0+0x40>)
  407300:	4907      	ldr	r1, [pc, #28]	; (407320 <std.isra.0+0x44>)
  407302:	4a08      	ldr	r2, [pc, #32]	; (407324 <std.isra.0+0x48>)
  407304:	4b08      	ldr	r3, [pc, #32]	; (407328 <std.isra.0+0x4c>)
  407306:	6220      	str	r0, [r4, #32]
  407308:	61e4      	str	r4, [r4, #28]
  40730a:	6261      	str	r1, [r4, #36]	; 0x24
  40730c:	62a2      	str	r2, [r4, #40]	; 0x28
  40730e:	62e3      	str	r3, [r4, #44]	; 0x2c
  407310:	f104 0058 	add.w	r0, r4, #88	; 0x58
  407314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407318:	f000 bbc4 	b.w	407aa4 <__retarget_lock_init_recursive>
  40731c:	00408631 	.word	0x00408631
  407320:	00408655 	.word	0x00408655
  407324:	00408691 	.word	0x00408691
  407328:	004086b1 	.word	0x004086b1

0040732c <__sinit>:
  40732c:	b510      	push	{r4, lr}
  40732e:	4604      	mov	r4, r0
  407330:	4812      	ldr	r0, [pc, #72]	; (40737c <__sinit+0x50>)
  407332:	f000 fbbb 	bl	407aac <__retarget_lock_acquire_recursive>
  407336:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407338:	b9d2      	cbnz	r2, 407370 <__sinit+0x44>
  40733a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40733e:	4810      	ldr	r0, [pc, #64]	; (407380 <__sinit+0x54>)
  407340:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407344:	2103      	movs	r1, #3
  407346:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40734a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40734c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407350:	6860      	ldr	r0, [r4, #4]
  407352:	2104      	movs	r1, #4
  407354:	f7ff ffc2 	bl	4072dc <std.isra.0>
  407358:	2201      	movs	r2, #1
  40735a:	2109      	movs	r1, #9
  40735c:	68a0      	ldr	r0, [r4, #8]
  40735e:	f7ff ffbd 	bl	4072dc <std.isra.0>
  407362:	2202      	movs	r2, #2
  407364:	2112      	movs	r1, #18
  407366:	68e0      	ldr	r0, [r4, #12]
  407368:	f7ff ffb8 	bl	4072dc <std.isra.0>
  40736c:	2301      	movs	r3, #1
  40736e:	63a3      	str	r3, [r4, #56]	; 0x38
  407370:	4802      	ldr	r0, [pc, #8]	; (40737c <__sinit+0x50>)
  407372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407376:	f000 bb9b 	b.w	407ab0 <__retarget_lock_release_recursive>
  40737a:	bf00      	nop
  40737c:	2040afdc 	.word	0x2040afdc
  407380:	004072d1 	.word	0x004072d1

00407384 <__sfp_lock_acquire>:
  407384:	4801      	ldr	r0, [pc, #4]	; (40738c <__sfp_lock_acquire+0x8>)
  407386:	f000 bb91 	b.w	407aac <__retarget_lock_acquire_recursive>
  40738a:	bf00      	nop
  40738c:	2040aff0 	.word	0x2040aff0

00407390 <__sfp_lock_release>:
  407390:	4801      	ldr	r0, [pc, #4]	; (407398 <__sfp_lock_release+0x8>)
  407392:	f000 bb8d 	b.w	407ab0 <__retarget_lock_release_recursive>
  407396:	bf00      	nop
  407398:	2040aff0 	.word	0x2040aff0

0040739c <__libc_fini_array>:
  40739c:	b538      	push	{r3, r4, r5, lr}
  40739e:	4c0a      	ldr	r4, [pc, #40]	; (4073c8 <__libc_fini_array+0x2c>)
  4073a0:	4d0a      	ldr	r5, [pc, #40]	; (4073cc <__libc_fini_array+0x30>)
  4073a2:	1b64      	subs	r4, r4, r5
  4073a4:	10a4      	asrs	r4, r4, #2
  4073a6:	d00a      	beq.n	4073be <__libc_fini_array+0x22>
  4073a8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4073ac:	3b01      	subs	r3, #1
  4073ae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4073b2:	3c01      	subs	r4, #1
  4073b4:	f855 3904 	ldr.w	r3, [r5], #-4
  4073b8:	4798      	blx	r3
  4073ba:	2c00      	cmp	r4, #0
  4073bc:	d1f9      	bne.n	4073b2 <__libc_fini_array+0x16>
  4073be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4073c2:	f001 be35 	b.w	409030 <_fini>
  4073c6:	bf00      	nop
  4073c8:	00409040 	.word	0x00409040
  4073cc:	0040903c 	.word	0x0040903c

004073d0 <__fputwc>:
  4073d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4073d4:	b082      	sub	sp, #8
  4073d6:	4680      	mov	r8, r0
  4073d8:	4689      	mov	r9, r1
  4073da:	4614      	mov	r4, r2
  4073dc:	f000 fb54 	bl	407a88 <__locale_mb_cur_max>
  4073e0:	2801      	cmp	r0, #1
  4073e2:	d036      	beq.n	407452 <__fputwc+0x82>
  4073e4:	464a      	mov	r2, r9
  4073e6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4073ea:	a901      	add	r1, sp, #4
  4073ec:	4640      	mov	r0, r8
  4073ee:	f001 f9bb 	bl	408768 <_wcrtomb_r>
  4073f2:	1c42      	adds	r2, r0, #1
  4073f4:	4606      	mov	r6, r0
  4073f6:	d025      	beq.n	407444 <__fputwc+0x74>
  4073f8:	b3a8      	cbz	r0, 407466 <__fputwc+0x96>
  4073fa:	f89d e004 	ldrb.w	lr, [sp, #4]
  4073fe:	2500      	movs	r5, #0
  407400:	f10d 0a04 	add.w	sl, sp, #4
  407404:	e009      	b.n	40741a <__fputwc+0x4a>
  407406:	6823      	ldr	r3, [r4, #0]
  407408:	1c5a      	adds	r2, r3, #1
  40740a:	6022      	str	r2, [r4, #0]
  40740c:	f883 e000 	strb.w	lr, [r3]
  407410:	3501      	adds	r5, #1
  407412:	42b5      	cmp	r5, r6
  407414:	d227      	bcs.n	407466 <__fputwc+0x96>
  407416:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40741a:	68a3      	ldr	r3, [r4, #8]
  40741c:	3b01      	subs	r3, #1
  40741e:	2b00      	cmp	r3, #0
  407420:	60a3      	str	r3, [r4, #8]
  407422:	daf0      	bge.n	407406 <__fputwc+0x36>
  407424:	69a7      	ldr	r7, [r4, #24]
  407426:	42bb      	cmp	r3, r7
  407428:	4671      	mov	r1, lr
  40742a:	4622      	mov	r2, r4
  40742c:	4640      	mov	r0, r8
  40742e:	db02      	blt.n	407436 <__fputwc+0x66>
  407430:	f1be 0f0a 	cmp.w	lr, #10
  407434:	d1e7      	bne.n	407406 <__fputwc+0x36>
  407436:	f001 f93f 	bl	4086b8 <__swbuf_r>
  40743a:	1c43      	adds	r3, r0, #1
  40743c:	d1e8      	bne.n	407410 <__fputwc+0x40>
  40743e:	b002      	add	sp, #8
  407440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407444:	89a3      	ldrh	r3, [r4, #12]
  407446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40744a:	81a3      	strh	r3, [r4, #12]
  40744c:	b002      	add	sp, #8
  40744e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407452:	f109 33ff 	add.w	r3, r9, #4294967295
  407456:	2bfe      	cmp	r3, #254	; 0xfe
  407458:	d8c4      	bhi.n	4073e4 <__fputwc+0x14>
  40745a:	fa5f fe89 	uxtb.w	lr, r9
  40745e:	4606      	mov	r6, r0
  407460:	f88d e004 	strb.w	lr, [sp, #4]
  407464:	e7cb      	b.n	4073fe <__fputwc+0x2e>
  407466:	4648      	mov	r0, r9
  407468:	b002      	add	sp, #8
  40746a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40746e:	bf00      	nop

00407470 <_fputwc_r>:
  407470:	b530      	push	{r4, r5, lr}
  407472:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407474:	f013 0f01 	tst.w	r3, #1
  407478:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40747c:	4614      	mov	r4, r2
  40747e:	b083      	sub	sp, #12
  407480:	4605      	mov	r5, r0
  407482:	b29a      	uxth	r2, r3
  407484:	d101      	bne.n	40748a <_fputwc_r+0x1a>
  407486:	0590      	lsls	r0, r2, #22
  407488:	d51c      	bpl.n	4074c4 <_fputwc_r+0x54>
  40748a:	0490      	lsls	r0, r2, #18
  40748c:	d406      	bmi.n	40749c <_fputwc_r+0x2c>
  40748e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407490:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407498:	81a3      	strh	r3, [r4, #12]
  40749a:	6662      	str	r2, [r4, #100]	; 0x64
  40749c:	4628      	mov	r0, r5
  40749e:	4622      	mov	r2, r4
  4074a0:	f7ff ff96 	bl	4073d0 <__fputwc>
  4074a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4074a6:	07da      	lsls	r2, r3, #31
  4074a8:	4605      	mov	r5, r0
  4074aa:	d402      	bmi.n	4074b2 <_fputwc_r+0x42>
  4074ac:	89a3      	ldrh	r3, [r4, #12]
  4074ae:	059b      	lsls	r3, r3, #22
  4074b0:	d502      	bpl.n	4074b8 <_fputwc_r+0x48>
  4074b2:	4628      	mov	r0, r5
  4074b4:	b003      	add	sp, #12
  4074b6:	bd30      	pop	{r4, r5, pc}
  4074b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4074ba:	f000 faf9 	bl	407ab0 <__retarget_lock_release_recursive>
  4074be:	4628      	mov	r0, r5
  4074c0:	b003      	add	sp, #12
  4074c2:	bd30      	pop	{r4, r5, pc}
  4074c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4074c6:	9101      	str	r1, [sp, #4]
  4074c8:	f000 faf0 	bl	407aac <__retarget_lock_acquire_recursive>
  4074cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4074d0:	9901      	ldr	r1, [sp, #4]
  4074d2:	b29a      	uxth	r2, r3
  4074d4:	e7d9      	b.n	40748a <_fputwc_r+0x1a>
  4074d6:	bf00      	nop

004074d8 <_malloc_trim_r>:
  4074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4074da:	4f24      	ldr	r7, [pc, #144]	; (40756c <_malloc_trim_r+0x94>)
  4074dc:	460c      	mov	r4, r1
  4074de:	4606      	mov	r6, r0
  4074e0:	f000 fee2 	bl	4082a8 <__malloc_lock>
  4074e4:	68bb      	ldr	r3, [r7, #8]
  4074e6:	685d      	ldr	r5, [r3, #4]
  4074e8:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4074ec:	310f      	adds	r1, #15
  4074ee:	f025 0503 	bic.w	r5, r5, #3
  4074f2:	4429      	add	r1, r5
  4074f4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4074f8:	f021 010f 	bic.w	r1, r1, #15
  4074fc:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407500:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407504:	db07      	blt.n	407516 <_malloc_trim_r+0x3e>
  407506:	2100      	movs	r1, #0
  407508:	4630      	mov	r0, r6
  40750a:	f001 f87f 	bl	40860c <_sbrk_r>
  40750e:	68bb      	ldr	r3, [r7, #8]
  407510:	442b      	add	r3, r5
  407512:	4298      	cmp	r0, r3
  407514:	d004      	beq.n	407520 <_malloc_trim_r+0x48>
  407516:	4630      	mov	r0, r6
  407518:	f000 fecc 	bl	4082b4 <__malloc_unlock>
  40751c:	2000      	movs	r0, #0
  40751e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407520:	4261      	negs	r1, r4
  407522:	4630      	mov	r0, r6
  407524:	f001 f872 	bl	40860c <_sbrk_r>
  407528:	3001      	adds	r0, #1
  40752a:	d00d      	beq.n	407548 <_malloc_trim_r+0x70>
  40752c:	4b10      	ldr	r3, [pc, #64]	; (407570 <_malloc_trim_r+0x98>)
  40752e:	68ba      	ldr	r2, [r7, #8]
  407530:	6819      	ldr	r1, [r3, #0]
  407532:	1b2d      	subs	r5, r5, r4
  407534:	f045 0501 	orr.w	r5, r5, #1
  407538:	4630      	mov	r0, r6
  40753a:	1b09      	subs	r1, r1, r4
  40753c:	6055      	str	r5, [r2, #4]
  40753e:	6019      	str	r1, [r3, #0]
  407540:	f000 feb8 	bl	4082b4 <__malloc_unlock>
  407544:	2001      	movs	r0, #1
  407546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407548:	2100      	movs	r1, #0
  40754a:	4630      	mov	r0, r6
  40754c:	f001 f85e 	bl	40860c <_sbrk_r>
  407550:	68ba      	ldr	r2, [r7, #8]
  407552:	1a83      	subs	r3, r0, r2
  407554:	2b0f      	cmp	r3, #15
  407556:	ddde      	ble.n	407516 <_malloc_trim_r+0x3e>
  407558:	4c06      	ldr	r4, [pc, #24]	; (407574 <_malloc_trim_r+0x9c>)
  40755a:	4905      	ldr	r1, [pc, #20]	; (407570 <_malloc_trim_r+0x98>)
  40755c:	6824      	ldr	r4, [r4, #0]
  40755e:	f043 0301 	orr.w	r3, r3, #1
  407562:	1b00      	subs	r0, r0, r4
  407564:	6053      	str	r3, [r2, #4]
  407566:	6008      	str	r0, [r1, #0]
  407568:	e7d5      	b.n	407516 <_malloc_trim_r+0x3e>
  40756a:	bf00      	nop
  40756c:	204005d8 	.word	0x204005d8
  407570:	2040aef4 	.word	0x2040aef4
  407574:	204009e0 	.word	0x204009e0

00407578 <_free_r>:
  407578:	2900      	cmp	r1, #0
  40757a:	d044      	beq.n	407606 <_free_r+0x8e>
  40757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407580:	460d      	mov	r5, r1
  407582:	4680      	mov	r8, r0
  407584:	f000 fe90 	bl	4082a8 <__malloc_lock>
  407588:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40758c:	4969      	ldr	r1, [pc, #420]	; (407734 <_free_r+0x1bc>)
  40758e:	f027 0301 	bic.w	r3, r7, #1
  407592:	f1a5 0408 	sub.w	r4, r5, #8
  407596:	18e2      	adds	r2, r4, r3
  407598:	688e      	ldr	r6, [r1, #8]
  40759a:	6850      	ldr	r0, [r2, #4]
  40759c:	42b2      	cmp	r2, r6
  40759e:	f020 0003 	bic.w	r0, r0, #3
  4075a2:	d05e      	beq.n	407662 <_free_r+0xea>
  4075a4:	07fe      	lsls	r6, r7, #31
  4075a6:	6050      	str	r0, [r2, #4]
  4075a8:	d40b      	bmi.n	4075c2 <_free_r+0x4a>
  4075aa:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4075ae:	1be4      	subs	r4, r4, r7
  4075b0:	f101 0e08 	add.w	lr, r1, #8
  4075b4:	68a5      	ldr	r5, [r4, #8]
  4075b6:	4575      	cmp	r5, lr
  4075b8:	443b      	add	r3, r7
  4075ba:	d06d      	beq.n	407698 <_free_r+0x120>
  4075bc:	68e7      	ldr	r7, [r4, #12]
  4075be:	60ef      	str	r7, [r5, #12]
  4075c0:	60bd      	str	r5, [r7, #8]
  4075c2:	1815      	adds	r5, r2, r0
  4075c4:	686d      	ldr	r5, [r5, #4]
  4075c6:	07ed      	lsls	r5, r5, #31
  4075c8:	d53e      	bpl.n	407648 <_free_r+0xd0>
  4075ca:	f043 0201 	orr.w	r2, r3, #1
  4075ce:	6062      	str	r2, [r4, #4]
  4075d0:	50e3      	str	r3, [r4, r3]
  4075d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4075d6:	d217      	bcs.n	407608 <_free_r+0x90>
  4075d8:	08db      	lsrs	r3, r3, #3
  4075da:	1c58      	adds	r0, r3, #1
  4075dc:	109a      	asrs	r2, r3, #2
  4075de:	684d      	ldr	r5, [r1, #4]
  4075e0:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4075e4:	60a7      	str	r7, [r4, #8]
  4075e6:	2301      	movs	r3, #1
  4075e8:	4093      	lsls	r3, r2
  4075ea:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  4075ee:	432b      	orrs	r3, r5
  4075f0:	3a08      	subs	r2, #8
  4075f2:	60e2      	str	r2, [r4, #12]
  4075f4:	604b      	str	r3, [r1, #4]
  4075f6:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  4075fa:	60fc      	str	r4, [r7, #12]
  4075fc:	4640      	mov	r0, r8
  4075fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407602:	f000 be57 	b.w	4082b4 <__malloc_unlock>
  407606:	4770      	bx	lr
  407608:	0a5a      	lsrs	r2, r3, #9
  40760a:	2a04      	cmp	r2, #4
  40760c:	d852      	bhi.n	4076b4 <_free_r+0x13c>
  40760e:	099a      	lsrs	r2, r3, #6
  407610:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407614:	00ff      	lsls	r7, r7, #3
  407616:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40761a:	19c8      	adds	r0, r1, r7
  40761c:	59ca      	ldr	r2, [r1, r7]
  40761e:	3808      	subs	r0, #8
  407620:	4290      	cmp	r0, r2
  407622:	d04f      	beq.n	4076c4 <_free_r+0x14c>
  407624:	6851      	ldr	r1, [r2, #4]
  407626:	f021 0103 	bic.w	r1, r1, #3
  40762a:	428b      	cmp	r3, r1
  40762c:	d232      	bcs.n	407694 <_free_r+0x11c>
  40762e:	6892      	ldr	r2, [r2, #8]
  407630:	4290      	cmp	r0, r2
  407632:	d1f7      	bne.n	407624 <_free_r+0xac>
  407634:	68c3      	ldr	r3, [r0, #12]
  407636:	60a0      	str	r0, [r4, #8]
  407638:	60e3      	str	r3, [r4, #12]
  40763a:	609c      	str	r4, [r3, #8]
  40763c:	60c4      	str	r4, [r0, #12]
  40763e:	4640      	mov	r0, r8
  407640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407644:	f000 be36 	b.w	4082b4 <__malloc_unlock>
  407648:	6895      	ldr	r5, [r2, #8]
  40764a:	4f3b      	ldr	r7, [pc, #236]	; (407738 <_free_r+0x1c0>)
  40764c:	42bd      	cmp	r5, r7
  40764e:	4403      	add	r3, r0
  407650:	d040      	beq.n	4076d4 <_free_r+0x15c>
  407652:	68d0      	ldr	r0, [r2, #12]
  407654:	60e8      	str	r0, [r5, #12]
  407656:	f043 0201 	orr.w	r2, r3, #1
  40765a:	6085      	str	r5, [r0, #8]
  40765c:	6062      	str	r2, [r4, #4]
  40765e:	50e3      	str	r3, [r4, r3]
  407660:	e7b7      	b.n	4075d2 <_free_r+0x5a>
  407662:	07ff      	lsls	r7, r7, #31
  407664:	4403      	add	r3, r0
  407666:	d407      	bmi.n	407678 <_free_r+0x100>
  407668:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40766c:	1aa4      	subs	r4, r4, r2
  40766e:	4413      	add	r3, r2
  407670:	68a0      	ldr	r0, [r4, #8]
  407672:	68e2      	ldr	r2, [r4, #12]
  407674:	60c2      	str	r2, [r0, #12]
  407676:	6090      	str	r0, [r2, #8]
  407678:	4a30      	ldr	r2, [pc, #192]	; (40773c <_free_r+0x1c4>)
  40767a:	6812      	ldr	r2, [r2, #0]
  40767c:	f043 0001 	orr.w	r0, r3, #1
  407680:	4293      	cmp	r3, r2
  407682:	6060      	str	r0, [r4, #4]
  407684:	608c      	str	r4, [r1, #8]
  407686:	d3b9      	bcc.n	4075fc <_free_r+0x84>
  407688:	4b2d      	ldr	r3, [pc, #180]	; (407740 <_free_r+0x1c8>)
  40768a:	4640      	mov	r0, r8
  40768c:	6819      	ldr	r1, [r3, #0]
  40768e:	f7ff ff23 	bl	4074d8 <_malloc_trim_r>
  407692:	e7b3      	b.n	4075fc <_free_r+0x84>
  407694:	4610      	mov	r0, r2
  407696:	e7cd      	b.n	407634 <_free_r+0xbc>
  407698:	1811      	adds	r1, r2, r0
  40769a:	6849      	ldr	r1, [r1, #4]
  40769c:	07c9      	lsls	r1, r1, #31
  40769e:	d444      	bmi.n	40772a <_free_r+0x1b2>
  4076a0:	6891      	ldr	r1, [r2, #8]
  4076a2:	68d2      	ldr	r2, [r2, #12]
  4076a4:	60ca      	str	r2, [r1, #12]
  4076a6:	4403      	add	r3, r0
  4076a8:	f043 0001 	orr.w	r0, r3, #1
  4076ac:	6091      	str	r1, [r2, #8]
  4076ae:	6060      	str	r0, [r4, #4]
  4076b0:	50e3      	str	r3, [r4, r3]
  4076b2:	e7a3      	b.n	4075fc <_free_r+0x84>
  4076b4:	2a14      	cmp	r2, #20
  4076b6:	d816      	bhi.n	4076e6 <_free_r+0x16e>
  4076b8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4076bc:	00ff      	lsls	r7, r7, #3
  4076be:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4076c2:	e7aa      	b.n	40761a <_free_r+0xa2>
  4076c4:	10aa      	asrs	r2, r5, #2
  4076c6:	2301      	movs	r3, #1
  4076c8:	684d      	ldr	r5, [r1, #4]
  4076ca:	4093      	lsls	r3, r2
  4076cc:	432b      	orrs	r3, r5
  4076ce:	604b      	str	r3, [r1, #4]
  4076d0:	4603      	mov	r3, r0
  4076d2:	e7b0      	b.n	407636 <_free_r+0xbe>
  4076d4:	f043 0201 	orr.w	r2, r3, #1
  4076d8:	614c      	str	r4, [r1, #20]
  4076da:	610c      	str	r4, [r1, #16]
  4076dc:	60e5      	str	r5, [r4, #12]
  4076de:	60a5      	str	r5, [r4, #8]
  4076e0:	6062      	str	r2, [r4, #4]
  4076e2:	50e3      	str	r3, [r4, r3]
  4076e4:	e78a      	b.n	4075fc <_free_r+0x84>
  4076e6:	2a54      	cmp	r2, #84	; 0x54
  4076e8:	d806      	bhi.n	4076f8 <_free_r+0x180>
  4076ea:	0b1a      	lsrs	r2, r3, #12
  4076ec:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4076f0:	00ff      	lsls	r7, r7, #3
  4076f2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4076f6:	e790      	b.n	40761a <_free_r+0xa2>
  4076f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4076fc:	d806      	bhi.n	40770c <_free_r+0x194>
  4076fe:	0bda      	lsrs	r2, r3, #15
  407700:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407704:	00ff      	lsls	r7, r7, #3
  407706:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40770a:	e786      	b.n	40761a <_free_r+0xa2>
  40770c:	f240 5054 	movw	r0, #1364	; 0x554
  407710:	4282      	cmp	r2, r0
  407712:	d806      	bhi.n	407722 <_free_r+0x1aa>
  407714:	0c9a      	lsrs	r2, r3, #18
  407716:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40771a:	00ff      	lsls	r7, r7, #3
  40771c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407720:	e77b      	b.n	40761a <_free_r+0xa2>
  407722:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407726:	257e      	movs	r5, #126	; 0x7e
  407728:	e777      	b.n	40761a <_free_r+0xa2>
  40772a:	f043 0101 	orr.w	r1, r3, #1
  40772e:	6061      	str	r1, [r4, #4]
  407730:	6013      	str	r3, [r2, #0]
  407732:	e763      	b.n	4075fc <_free_r+0x84>
  407734:	204005d8 	.word	0x204005d8
  407738:	204005e0 	.word	0x204005e0
  40773c:	204009e4 	.word	0x204009e4
  407740:	2040af24 	.word	0x2040af24

00407744 <__sfvwrite_r>:
  407744:	6893      	ldr	r3, [r2, #8]
  407746:	2b00      	cmp	r3, #0
  407748:	d073      	beq.n	407832 <__sfvwrite_r+0xee>
  40774a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40774e:	898b      	ldrh	r3, [r1, #12]
  407750:	b083      	sub	sp, #12
  407752:	460c      	mov	r4, r1
  407754:	0719      	lsls	r1, r3, #28
  407756:	9000      	str	r0, [sp, #0]
  407758:	4616      	mov	r6, r2
  40775a:	d526      	bpl.n	4077aa <__sfvwrite_r+0x66>
  40775c:	6922      	ldr	r2, [r4, #16]
  40775e:	b322      	cbz	r2, 4077aa <__sfvwrite_r+0x66>
  407760:	f013 0002 	ands.w	r0, r3, #2
  407764:	6835      	ldr	r5, [r6, #0]
  407766:	d02c      	beq.n	4077c2 <__sfvwrite_r+0x7e>
  407768:	f04f 0900 	mov.w	r9, #0
  40776c:	4fb0      	ldr	r7, [pc, #704]	; (407a30 <__sfvwrite_r+0x2ec>)
  40776e:	46c8      	mov	r8, r9
  407770:	46b2      	mov	sl, r6
  407772:	45b8      	cmp	r8, r7
  407774:	4643      	mov	r3, r8
  407776:	464a      	mov	r2, r9
  407778:	bf28      	it	cs
  40777a:	463b      	movcs	r3, r7
  40777c:	9800      	ldr	r0, [sp, #0]
  40777e:	f1b8 0f00 	cmp.w	r8, #0
  407782:	d050      	beq.n	407826 <__sfvwrite_r+0xe2>
  407784:	69e1      	ldr	r1, [r4, #28]
  407786:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407788:	47b0      	blx	r6
  40778a:	2800      	cmp	r0, #0
  40778c:	dd58      	ble.n	407840 <__sfvwrite_r+0xfc>
  40778e:	f8da 3008 	ldr.w	r3, [sl, #8]
  407792:	1a1b      	subs	r3, r3, r0
  407794:	4481      	add	r9, r0
  407796:	eba8 0800 	sub.w	r8, r8, r0
  40779a:	f8ca 3008 	str.w	r3, [sl, #8]
  40779e:	2b00      	cmp	r3, #0
  4077a0:	d1e7      	bne.n	407772 <__sfvwrite_r+0x2e>
  4077a2:	2000      	movs	r0, #0
  4077a4:	b003      	add	sp, #12
  4077a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4077aa:	4621      	mov	r1, r4
  4077ac:	9800      	ldr	r0, [sp, #0]
  4077ae:	f7ff fc51 	bl	407054 <__swsetup_r>
  4077b2:	2800      	cmp	r0, #0
  4077b4:	f040 8133 	bne.w	407a1e <__sfvwrite_r+0x2da>
  4077b8:	89a3      	ldrh	r3, [r4, #12]
  4077ba:	6835      	ldr	r5, [r6, #0]
  4077bc:	f013 0002 	ands.w	r0, r3, #2
  4077c0:	d1d2      	bne.n	407768 <__sfvwrite_r+0x24>
  4077c2:	f013 0901 	ands.w	r9, r3, #1
  4077c6:	d145      	bne.n	407854 <__sfvwrite_r+0x110>
  4077c8:	464f      	mov	r7, r9
  4077ca:	9601      	str	r6, [sp, #4]
  4077cc:	b337      	cbz	r7, 40781c <__sfvwrite_r+0xd8>
  4077ce:	059a      	lsls	r2, r3, #22
  4077d0:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4077d4:	f140 8083 	bpl.w	4078de <__sfvwrite_r+0x19a>
  4077d8:	4547      	cmp	r7, r8
  4077da:	46c3      	mov	fp, r8
  4077dc:	f0c0 80ab 	bcc.w	407936 <__sfvwrite_r+0x1f2>
  4077e0:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4077e4:	f040 80ac 	bne.w	407940 <__sfvwrite_r+0x1fc>
  4077e8:	6820      	ldr	r0, [r4, #0]
  4077ea:	46ba      	mov	sl, r7
  4077ec:	465a      	mov	r2, fp
  4077ee:	4649      	mov	r1, r9
  4077f0:	f000 fcf6 	bl	4081e0 <memmove>
  4077f4:	68a2      	ldr	r2, [r4, #8]
  4077f6:	6823      	ldr	r3, [r4, #0]
  4077f8:	eba2 0208 	sub.w	r2, r2, r8
  4077fc:	445b      	add	r3, fp
  4077fe:	60a2      	str	r2, [r4, #8]
  407800:	6023      	str	r3, [r4, #0]
  407802:	9a01      	ldr	r2, [sp, #4]
  407804:	6893      	ldr	r3, [r2, #8]
  407806:	eba3 030a 	sub.w	r3, r3, sl
  40780a:	44d1      	add	r9, sl
  40780c:	eba7 070a 	sub.w	r7, r7, sl
  407810:	6093      	str	r3, [r2, #8]
  407812:	2b00      	cmp	r3, #0
  407814:	d0c5      	beq.n	4077a2 <__sfvwrite_r+0x5e>
  407816:	89a3      	ldrh	r3, [r4, #12]
  407818:	2f00      	cmp	r7, #0
  40781a:	d1d8      	bne.n	4077ce <__sfvwrite_r+0x8a>
  40781c:	f8d5 9000 	ldr.w	r9, [r5]
  407820:	686f      	ldr	r7, [r5, #4]
  407822:	3508      	adds	r5, #8
  407824:	e7d2      	b.n	4077cc <__sfvwrite_r+0x88>
  407826:	f8d5 9000 	ldr.w	r9, [r5]
  40782a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40782e:	3508      	adds	r5, #8
  407830:	e79f      	b.n	407772 <__sfvwrite_r+0x2e>
  407832:	2000      	movs	r0, #0
  407834:	4770      	bx	lr
  407836:	4621      	mov	r1, r4
  407838:	9800      	ldr	r0, [sp, #0]
  40783a:	f7ff fd1f 	bl	40727c <_fflush_r>
  40783e:	b370      	cbz	r0, 40789e <__sfvwrite_r+0x15a>
  407840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407848:	f04f 30ff 	mov.w	r0, #4294967295
  40784c:	81a3      	strh	r3, [r4, #12]
  40784e:	b003      	add	sp, #12
  407850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407854:	4681      	mov	r9, r0
  407856:	4633      	mov	r3, r6
  407858:	464e      	mov	r6, r9
  40785a:	46a8      	mov	r8, r5
  40785c:	469a      	mov	sl, r3
  40785e:	464d      	mov	r5, r9
  407860:	b34e      	cbz	r6, 4078b6 <__sfvwrite_r+0x172>
  407862:	b380      	cbz	r0, 4078c6 <__sfvwrite_r+0x182>
  407864:	6820      	ldr	r0, [r4, #0]
  407866:	6923      	ldr	r3, [r4, #16]
  407868:	6962      	ldr	r2, [r4, #20]
  40786a:	45b1      	cmp	r9, r6
  40786c:	46cb      	mov	fp, r9
  40786e:	bf28      	it	cs
  407870:	46b3      	movcs	fp, r6
  407872:	4298      	cmp	r0, r3
  407874:	465f      	mov	r7, fp
  407876:	d904      	bls.n	407882 <__sfvwrite_r+0x13e>
  407878:	68a3      	ldr	r3, [r4, #8]
  40787a:	4413      	add	r3, r2
  40787c:	459b      	cmp	fp, r3
  40787e:	f300 80a6 	bgt.w	4079ce <__sfvwrite_r+0x28a>
  407882:	4593      	cmp	fp, r2
  407884:	db4b      	blt.n	40791e <__sfvwrite_r+0x1da>
  407886:	4613      	mov	r3, r2
  407888:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40788a:	69e1      	ldr	r1, [r4, #28]
  40788c:	9800      	ldr	r0, [sp, #0]
  40788e:	462a      	mov	r2, r5
  407890:	47b8      	blx	r7
  407892:	1e07      	subs	r7, r0, #0
  407894:	ddd4      	ble.n	407840 <__sfvwrite_r+0xfc>
  407896:	ebb9 0907 	subs.w	r9, r9, r7
  40789a:	d0cc      	beq.n	407836 <__sfvwrite_r+0xf2>
  40789c:	2001      	movs	r0, #1
  40789e:	f8da 3008 	ldr.w	r3, [sl, #8]
  4078a2:	1bdb      	subs	r3, r3, r7
  4078a4:	443d      	add	r5, r7
  4078a6:	1bf6      	subs	r6, r6, r7
  4078a8:	f8ca 3008 	str.w	r3, [sl, #8]
  4078ac:	2b00      	cmp	r3, #0
  4078ae:	f43f af78 	beq.w	4077a2 <__sfvwrite_r+0x5e>
  4078b2:	2e00      	cmp	r6, #0
  4078b4:	d1d5      	bne.n	407862 <__sfvwrite_r+0x11e>
  4078b6:	f108 0308 	add.w	r3, r8, #8
  4078ba:	e913 0060 	ldmdb	r3, {r5, r6}
  4078be:	4698      	mov	r8, r3
  4078c0:	3308      	adds	r3, #8
  4078c2:	2e00      	cmp	r6, #0
  4078c4:	d0f9      	beq.n	4078ba <__sfvwrite_r+0x176>
  4078c6:	4632      	mov	r2, r6
  4078c8:	210a      	movs	r1, #10
  4078ca:	4628      	mov	r0, r5
  4078cc:	f000 fc38 	bl	408140 <memchr>
  4078d0:	2800      	cmp	r0, #0
  4078d2:	f000 80a1 	beq.w	407a18 <__sfvwrite_r+0x2d4>
  4078d6:	3001      	adds	r0, #1
  4078d8:	eba0 0905 	sub.w	r9, r0, r5
  4078dc:	e7c2      	b.n	407864 <__sfvwrite_r+0x120>
  4078de:	6820      	ldr	r0, [r4, #0]
  4078e0:	6923      	ldr	r3, [r4, #16]
  4078e2:	4298      	cmp	r0, r3
  4078e4:	d802      	bhi.n	4078ec <__sfvwrite_r+0x1a8>
  4078e6:	6963      	ldr	r3, [r4, #20]
  4078e8:	429f      	cmp	r7, r3
  4078ea:	d25d      	bcs.n	4079a8 <__sfvwrite_r+0x264>
  4078ec:	45b8      	cmp	r8, r7
  4078ee:	bf28      	it	cs
  4078f0:	46b8      	movcs	r8, r7
  4078f2:	4642      	mov	r2, r8
  4078f4:	4649      	mov	r1, r9
  4078f6:	f000 fc73 	bl	4081e0 <memmove>
  4078fa:	68a3      	ldr	r3, [r4, #8]
  4078fc:	6822      	ldr	r2, [r4, #0]
  4078fe:	eba3 0308 	sub.w	r3, r3, r8
  407902:	4442      	add	r2, r8
  407904:	60a3      	str	r3, [r4, #8]
  407906:	6022      	str	r2, [r4, #0]
  407908:	b10b      	cbz	r3, 40790e <__sfvwrite_r+0x1ca>
  40790a:	46c2      	mov	sl, r8
  40790c:	e779      	b.n	407802 <__sfvwrite_r+0xbe>
  40790e:	4621      	mov	r1, r4
  407910:	9800      	ldr	r0, [sp, #0]
  407912:	f7ff fcb3 	bl	40727c <_fflush_r>
  407916:	2800      	cmp	r0, #0
  407918:	d192      	bne.n	407840 <__sfvwrite_r+0xfc>
  40791a:	46c2      	mov	sl, r8
  40791c:	e771      	b.n	407802 <__sfvwrite_r+0xbe>
  40791e:	465a      	mov	r2, fp
  407920:	4629      	mov	r1, r5
  407922:	f000 fc5d 	bl	4081e0 <memmove>
  407926:	68a2      	ldr	r2, [r4, #8]
  407928:	6823      	ldr	r3, [r4, #0]
  40792a:	eba2 020b 	sub.w	r2, r2, fp
  40792e:	445b      	add	r3, fp
  407930:	60a2      	str	r2, [r4, #8]
  407932:	6023      	str	r3, [r4, #0]
  407934:	e7af      	b.n	407896 <__sfvwrite_r+0x152>
  407936:	6820      	ldr	r0, [r4, #0]
  407938:	46b8      	mov	r8, r7
  40793a:	46ba      	mov	sl, r7
  40793c:	46bb      	mov	fp, r7
  40793e:	e755      	b.n	4077ec <__sfvwrite_r+0xa8>
  407940:	6962      	ldr	r2, [r4, #20]
  407942:	6820      	ldr	r0, [r4, #0]
  407944:	6921      	ldr	r1, [r4, #16]
  407946:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40794a:	eba0 0a01 	sub.w	sl, r0, r1
  40794e:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  407952:	f10a 0001 	add.w	r0, sl, #1
  407956:	ea4f 0868 	mov.w	r8, r8, asr #1
  40795a:	4438      	add	r0, r7
  40795c:	4540      	cmp	r0, r8
  40795e:	4642      	mov	r2, r8
  407960:	bf84      	itt	hi
  407962:	4680      	movhi	r8, r0
  407964:	4642      	movhi	r2, r8
  407966:	055b      	lsls	r3, r3, #21
  407968:	d544      	bpl.n	4079f4 <__sfvwrite_r+0x2b0>
  40796a:	4611      	mov	r1, r2
  40796c:	9800      	ldr	r0, [sp, #0]
  40796e:	f000 f921 	bl	407bb4 <_malloc_r>
  407972:	4683      	mov	fp, r0
  407974:	2800      	cmp	r0, #0
  407976:	d055      	beq.n	407a24 <__sfvwrite_r+0x2e0>
  407978:	4652      	mov	r2, sl
  40797a:	6921      	ldr	r1, [r4, #16]
  40797c:	f7fe f9f0 	bl	405d60 <memcpy>
  407980:	89a3      	ldrh	r3, [r4, #12]
  407982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40798a:	81a3      	strh	r3, [r4, #12]
  40798c:	eb0b 000a 	add.w	r0, fp, sl
  407990:	eba8 030a 	sub.w	r3, r8, sl
  407994:	f8c4 b010 	str.w	fp, [r4, #16]
  407998:	f8c4 8014 	str.w	r8, [r4, #20]
  40799c:	6020      	str	r0, [r4, #0]
  40799e:	60a3      	str	r3, [r4, #8]
  4079a0:	46b8      	mov	r8, r7
  4079a2:	46ba      	mov	sl, r7
  4079a4:	46bb      	mov	fp, r7
  4079a6:	e721      	b.n	4077ec <__sfvwrite_r+0xa8>
  4079a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4079ac:	42b9      	cmp	r1, r7
  4079ae:	bf28      	it	cs
  4079b0:	4639      	movcs	r1, r7
  4079b2:	464a      	mov	r2, r9
  4079b4:	fb91 f1f3 	sdiv	r1, r1, r3
  4079b8:	9800      	ldr	r0, [sp, #0]
  4079ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4079bc:	fb03 f301 	mul.w	r3, r3, r1
  4079c0:	69e1      	ldr	r1, [r4, #28]
  4079c2:	47b0      	blx	r6
  4079c4:	f1b0 0a00 	subs.w	sl, r0, #0
  4079c8:	f73f af1b 	bgt.w	407802 <__sfvwrite_r+0xbe>
  4079cc:	e738      	b.n	407840 <__sfvwrite_r+0xfc>
  4079ce:	461a      	mov	r2, r3
  4079d0:	4629      	mov	r1, r5
  4079d2:	9301      	str	r3, [sp, #4]
  4079d4:	f000 fc04 	bl	4081e0 <memmove>
  4079d8:	6822      	ldr	r2, [r4, #0]
  4079da:	9b01      	ldr	r3, [sp, #4]
  4079dc:	9800      	ldr	r0, [sp, #0]
  4079de:	441a      	add	r2, r3
  4079e0:	6022      	str	r2, [r4, #0]
  4079e2:	4621      	mov	r1, r4
  4079e4:	f7ff fc4a 	bl	40727c <_fflush_r>
  4079e8:	9b01      	ldr	r3, [sp, #4]
  4079ea:	2800      	cmp	r0, #0
  4079ec:	f47f af28 	bne.w	407840 <__sfvwrite_r+0xfc>
  4079f0:	461f      	mov	r7, r3
  4079f2:	e750      	b.n	407896 <__sfvwrite_r+0x152>
  4079f4:	9800      	ldr	r0, [sp, #0]
  4079f6:	f000 fc63 	bl	4082c0 <_realloc_r>
  4079fa:	4683      	mov	fp, r0
  4079fc:	2800      	cmp	r0, #0
  4079fe:	d1c5      	bne.n	40798c <__sfvwrite_r+0x248>
  407a00:	9d00      	ldr	r5, [sp, #0]
  407a02:	6921      	ldr	r1, [r4, #16]
  407a04:	4628      	mov	r0, r5
  407a06:	f7ff fdb7 	bl	407578 <_free_r>
  407a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a0e:	220c      	movs	r2, #12
  407a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407a14:	602a      	str	r2, [r5, #0]
  407a16:	e715      	b.n	407844 <__sfvwrite_r+0x100>
  407a18:	f106 0901 	add.w	r9, r6, #1
  407a1c:	e722      	b.n	407864 <__sfvwrite_r+0x120>
  407a1e:	f04f 30ff 	mov.w	r0, #4294967295
  407a22:	e6bf      	b.n	4077a4 <__sfvwrite_r+0x60>
  407a24:	9a00      	ldr	r2, [sp, #0]
  407a26:	230c      	movs	r3, #12
  407a28:	6013      	str	r3, [r2, #0]
  407a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a2e:	e709      	b.n	407844 <__sfvwrite_r+0x100>
  407a30:	7ffffc00 	.word	0x7ffffc00

00407a34 <_fwalk_reent>:
  407a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407a38:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407a3c:	d01f      	beq.n	407a7e <_fwalk_reent+0x4a>
  407a3e:	4688      	mov	r8, r1
  407a40:	4606      	mov	r6, r0
  407a42:	f04f 0900 	mov.w	r9, #0
  407a46:	687d      	ldr	r5, [r7, #4]
  407a48:	68bc      	ldr	r4, [r7, #8]
  407a4a:	3d01      	subs	r5, #1
  407a4c:	d411      	bmi.n	407a72 <_fwalk_reent+0x3e>
  407a4e:	89a3      	ldrh	r3, [r4, #12]
  407a50:	2b01      	cmp	r3, #1
  407a52:	f105 35ff 	add.w	r5, r5, #4294967295
  407a56:	d908      	bls.n	407a6a <_fwalk_reent+0x36>
  407a58:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407a5c:	3301      	adds	r3, #1
  407a5e:	4621      	mov	r1, r4
  407a60:	4630      	mov	r0, r6
  407a62:	d002      	beq.n	407a6a <_fwalk_reent+0x36>
  407a64:	47c0      	blx	r8
  407a66:	ea49 0900 	orr.w	r9, r9, r0
  407a6a:	1c6b      	adds	r3, r5, #1
  407a6c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407a70:	d1ed      	bne.n	407a4e <_fwalk_reent+0x1a>
  407a72:	683f      	ldr	r7, [r7, #0]
  407a74:	2f00      	cmp	r7, #0
  407a76:	d1e6      	bne.n	407a46 <_fwalk_reent+0x12>
  407a78:	4648      	mov	r0, r9
  407a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407a7e:	46b9      	mov	r9, r7
  407a80:	4648      	mov	r0, r9
  407a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407a86:	bf00      	nop

00407a88 <__locale_mb_cur_max>:
  407a88:	4b04      	ldr	r3, [pc, #16]	; (407a9c <__locale_mb_cur_max+0x14>)
  407a8a:	4a05      	ldr	r2, [pc, #20]	; (407aa0 <__locale_mb_cur_max+0x18>)
  407a8c:	681b      	ldr	r3, [r3, #0]
  407a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  407a90:	2b00      	cmp	r3, #0
  407a92:	bf08      	it	eq
  407a94:	4613      	moveq	r3, r2
  407a96:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  407a9a:	4770      	bx	lr
  407a9c:	2040003c 	.word	0x2040003c
  407aa0:	2040046c 	.word	0x2040046c

00407aa4 <__retarget_lock_init_recursive>:
  407aa4:	4770      	bx	lr
  407aa6:	bf00      	nop

00407aa8 <__retarget_lock_close_recursive>:
  407aa8:	4770      	bx	lr
  407aaa:	bf00      	nop

00407aac <__retarget_lock_acquire_recursive>:
  407aac:	4770      	bx	lr
  407aae:	bf00      	nop

00407ab0 <__retarget_lock_release_recursive>:
  407ab0:	4770      	bx	lr
  407ab2:	bf00      	nop

00407ab4 <__swhatbuf_r>:
  407ab4:	b570      	push	{r4, r5, r6, lr}
  407ab6:	460c      	mov	r4, r1
  407ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407abc:	2900      	cmp	r1, #0
  407abe:	b090      	sub	sp, #64	; 0x40
  407ac0:	4615      	mov	r5, r2
  407ac2:	461e      	mov	r6, r3
  407ac4:	db14      	blt.n	407af0 <__swhatbuf_r+0x3c>
  407ac6:	aa01      	add	r2, sp, #4
  407ac8:	f000 ff72 	bl	4089b0 <_fstat_r>
  407acc:	2800      	cmp	r0, #0
  407ace:	db0f      	blt.n	407af0 <__swhatbuf_r+0x3c>
  407ad0:	9a02      	ldr	r2, [sp, #8]
  407ad2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  407ad6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  407ada:	fab2 f282 	clz	r2, r2
  407ade:	0952      	lsrs	r2, r2, #5
  407ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407ae4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407ae8:	6032      	str	r2, [r6, #0]
  407aea:	602b      	str	r3, [r5, #0]
  407aec:	b010      	add	sp, #64	; 0x40
  407aee:	bd70      	pop	{r4, r5, r6, pc}
  407af0:	89a2      	ldrh	r2, [r4, #12]
  407af2:	2300      	movs	r3, #0
  407af4:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407af8:	6033      	str	r3, [r6, #0]
  407afa:	d004      	beq.n	407b06 <__swhatbuf_r+0x52>
  407afc:	2240      	movs	r2, #64	; 0x40
  407afe:	4618      	mov	r0, r3
  407b00:	602a      	str	r2, [r5, #0]
  407b02:	b010      	add	sp, #64	; 0x40
  407b04:	bd70      	pop	{r4, r5, r6, pc}
  407b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407b0a:	602b      	str	r3, [r5, #0]
  407b0c:	b010      	add	sp, #64	; 0x40
  407b0e:	bd70      	pop	{r4, r5, r6, pc}

00407b10 <__smakebuf_r>:
  407b10:	898a      	ldrh	r2, [r1, #12]
  407b12:	0792      	lsls	r2, r2, #30
  407b14:	460b      	mov	r3, r1
  407b16:	d506      	bpl.n	407b26 <__smakebuf_r+0x16>
  407b18:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407b1c:	2101      	movs	r1, #1
  407b1e:	601a      	str	r2, [r3, #0]
  407b20:	611a      	str	r2, [r3, #16]
  407b22:	6159      	str	r1, [r3, #20]
  407b24:	4770      	bx	lr
  407b26:	b5f0      	push	{r4, r5, r6, r7, lr}
  407b28:	b083      	sub	sp, #12
  407b2a:	ab01      	add	r3, sp, #4
  407b2c:	466a      	mov	r2, sp
  407b2e:	460c      	mov	r4, r1
  407b30:	4606      	mov	r6, r0
  407b32:	f7ff ffbf 	bl	407ab4 <__swhatbuf_r>
  407b36:	9900      	ldr	r1, [sp, #0]
  407b38:	4605      	mov	r5, r0
  407b3a:	4630      	mov	r0, r6
  407b3c:	f000 f83a 	bl	407bb4 <_malloc_r>
  407b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407b44:	b1d8      	cbz	r0, 407b7e <__smakebuf_r+0x6e>
  407b46:	9a01      	ldr	r2, [sp, #4]
  407b48:	4f15      	ldr	r7, [pc, #84]	; (407ba0 <__smakebuf_r+0x90>)
  407b4a:	9900      	ldr	r1, [sp, #0]
  407b4c:	63f7      	str	r7, [r6, #60]	; 0x3c
  407b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407b52:	81a3      	strh	r3, [r4, #12]
  407b54:	6020      	str	r0, [r4, #0]
  407b56:	6120      	str	r0, [r4, #16]
  407b58:	6161      	str	r1, [r4, #20]
  407b5a:	b91a      	cbnz	r2, 407b64 <__smakebuf_r+0x54>
  407b5c:	432b      	orrs	r3, r5
  407b5e:	81a3      	strh	r3, [r4, #12]
  407b60:	b003      	add	sp, #12
  407b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407b64:	4630      	mov	r0, r6
  407b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407b6a:	f000 ff35 	bl	4089d8 <_isatty_r>
  407b6e:	b1a0      	cbz	r0, 407b9a <__smakebuf_r+0x8a>
  407b70:	89a3      	ldrh	r3, [r4, #12]
  407b72:	f023 0303 	bic.w	r3, r3, #3
  407b76:	f043 0301 	orr.w	r3, r3, #1
  407b7a:	b21b      	sxth	r3, r3
  407b7c:	e7ee      	b.n	407b5c <__smakebuf_r+0x4c>
  407b7e:	059a      	lsls	r2, r3, #22
  407b80:	d4ee      	bmi.n	407b60 <__smakebuf_r+0x50>
  407b82:	f023 0303 	bic.w	r3, r3, #3
  407b86:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407b8a:	f043 0302 	orr.w	r3, r3, #2
  407b8e:	2101      	movs	r1, #1
  407b90:	81a3      	strh	r3, [r4, #12]
  407b92:	6022      	str	r2, [r4, #0]
  407b94:	6122      	str	r2, [r4, #16]
  407b96:	6161      	str	r1, [r4, #20]
  407b98:	e7e2      	b.n	407b60 <__smakebuf_r+0x50>
  407b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407b9e:	e7dd      	b.n	407b5c <__smakebuf_r+0x4c>
  407ba0:	004072d1 	.word	0x004072d1

00407ba4 <malloc>:
  407ba4:	4b02      	ldr	r3, [pc, #8]	; (407bb0 <malloc+0xc>)
  407ba6:	4601      	mov	r1, r0
  407ba8:	6818      	ldr	r0, [r3, #0]
  407baa:	f000 b803 	b.w	407bb4 <_malloc_r>
  407bae:	bf00      	nop
  407bb0:	2040003c 	.word	0x2040003c

00407bb4 <_malloc_r>:
  407bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407bb8:	f101 060b 	add.w	r6, r1, #11
  407bbc:	2e16      	cmp	r6, #22
  407bbe:	b083      	sub	sp, #12
  407bc0:	4605      	mov	r5, r0
  407bc2:	f240 809e 	bls.w	407d02 <_malloc_r+0x14e>
  407bc6:	f036 0607 	bics.w	r6, r6, #7
  407bca:	f100 80bd 	bmi.w	407d48 <_malloc_r+0x194>
  407bce:	42b1      	cmp	r1, r6
  407bd0:	f200 80ba 	bhi.w	407d48 <_malloc_r+0x194>
  407bd4:	f000 fb68 	bl	4082a8 <__malloc_lock>
  407bd8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  407bdc:	f0c0 8293 	bcc.w	408106 <_malloc_r+0x552>
  407be0:	0a73      	lsrs	r3, r6, #9
  407be2:	f000 80b8 	beq.w	407d56 <_malloc_r+0x1a2>
  407be6:	2b04      	cmp	r3, #4
  407be8:	f200 8179 	bhi.w	407ede <_malloc_r+0x32a>
  407bec:	09b3      	lsrs	r3, r6, #6
  407bee:	f103 0039 	add.w	r0, r3, #57	; 0x39
  407bf2:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  407bf6:	00c3      	lsls	r3, r0, #3
  407bf8:	4fbf      	ldr	r7, [pc, #764]	; (407ef8 <_malloc_r+0x344>)
  407bfa:	443b      	add	r3, r7
  407bfc:	f1a3 0108 	sub.w	r1, r3, #8
  407c00:	685c      	ldr	r4, [r3, #4]
  407c02:	42a1      	cmp	r1, r4
  407c04:	d106      	bne.n	407c14 <_malloc_r+0x60>
  407c06:	e00c      	b.n	407c22 <_malloc_r+0x6e>
  407c08:	2a00      	cmp	r2, #0
  407c0a:	f280 80aa 	bge.w	407d62 <_malloc_r+0x1ae>
  407c0e:	68e4      	ldr	r4, [r4, #12]
  407c10:	42a1      	cmp	r1, r4
  407c12:	d006      	beq.n	407c22 <_malloc_r+0x6e>
  407c14:	6863      	ldr	r3, [r4, #4]
  407c16:	f023 0303 	bic.w	r3, r3, #3
  407c1a:	1b9a      	subs	r2, r3, r6
  407c1c:	2a0f      	cmp	r2, #15
  407c1e:	ddf3      	ble.n	407c08 <_malloc_r+0x54>
  407c20:	4670      	mov	r0, lr
  407c22:	693c      	ldr	r4, [r7, #16]
  407c24:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 407f0c <_malloc_r+0x358>
  407c28:	4574      	cmp	r4, lr
  407c2a:	f000 81ab 	beq.w	407f84 <_malloc_r+0x3d0>
  407c2e:	6863      	ldr	r3, [r4, #4]
  407c30:	f023 0303 	bic.w	r3, r3, #3
  407c34:	1b9a      	subs	r2, r3, r6
  407c36:	2a0f      	cmp	r2, #15
  407c38:	f300 8190 	bgt.w	407f5c <_malloc_r+0x3a8>
  407c3c:	2a00      	cmp	r2, #0
  407c3e:	f8c7 e014 	str.w	lr, [r7, #20]
  407c42:	f8c7 e010 	str.w	lr, [r7, #16]
  407c46:	f280 809d 	bge.w	407d84 <_malloc_r+0x1d0>
  407c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407c4e:	f080 8161 	bcs.w	407f14 <_malloc_r+0x360>
  407c52:	08db      	lsrs	r3, r3, #3
  407c54:	f103 0c01 	add.w	ip, r3, #1
  407c58:	1099      	asrs	r1, r3, #2
  407c5a:	687a      	ldr	r2, [r7, #4]
  407c5c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  407c60:	f8c4 8008 	str.w	r8, [r4, #8]
  407c64:	2301      	movs	r3, #1
  407c66:	408b      	lsls	r3, r1
  407c68:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  407c6c:	4313      	orrs	r3, r2
  407c6e:	3908      	subs	r1, #8
  407c70:	60e1      	str	r1, [r4, #12]
  407c72:	607b      	str	r3, [r7, #4]
  407c74:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  407c78:	f8c8 400c 	str.w	r4, [r8, #12]
  407c7c:	1082      	asrs	r2, r0, #2
  407c7e:	2401      	movs	r4, #1
  407c80:	4094      	lsls	r4, r2
  407c82:	429c      	cmp	r4, r3
  407c84:	f200 808b 	bhi.w	407d9e <_malloc_r+0x1ea>
  407c88:	421c      	tst	r4, r3
  407c8a:	d106      	bne.n	407c9a <_malloc_r+0xe6>
  407c8c:	f020 0003 	bic.w	r0, r0, #3
  407c90:	0064      	lsls	r4, r4, #1
  407c92:	421c      	tst	r4, r3
  407c94:	f100 0004 	add.w	r0, r0, #4
  407c98:	d0fa      	beq.n	407c90 <_malloc_r+0xdc>
  407c9a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  407c9e:	46cc      	mov	ip, r9
  407ca0:	4680      	mov	r8, r0
  407ca2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  407ca6:	459c      	cmp	ip, r3
  407ca8:	d107      	bne.n	407cba <_malloc_r+0x106>
  407caa:	e16d      	b.n	407f88 <_malloc_r+0x3d4>
  407cac:	2a00      	cmp	r2, #0
  407cae:	f280 817b 	bge.w	407fa8 <_malloc_r+0x3f4>
  407cb2:	68db      	ldr	r3, [r3, #12]
  407cb4:	459c      	cmp	ip, r3
  407cb6:	f000 8167 	beq.w	407f88 <_malloc_r+0x3d4>
  407cba:	6859      	ldr	r1, [r3, #4]
  407cbc:	f021 0103 	bic.w	r1, r1, #3
  407cc0:	1b8a      	subs	r2, r1, r6
  407cc2:	2a0f      	cmp	r2, #15
  407cc4:	ddf2      	ble.n	407cac <_malloc_r+0xf8>
  407cc6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  407cca:	f8d3 8008 	ldr.w	r8, [r3, #8]
  407cce:	9300      	str	r3, [sp, #0]
  407cd0:	199c      	adds	r4, r3, r6
  407cd2:	4628      	mov	r0, r5
  407cd4:	f046 0601 	orr.w	r6, r6, #1
  407cd8:	f042 0501 	orr.w	r5, r2, #1
  407cdc:	605e      	str	r6, [r3, #4]
  407cde:	f8c8 c00c 	str.w	ip, [r8, #12]
  407ce2:	f8cc 8008 	str.w	r8, [ip, #8]
  407ce6:	617c      	str	r4, [r7, #20]
  407ce8:	613c      	str	r4, [r7, #16]
  407cea:	f8c4 e00c 	str.w	lr, [r4, #12]
  407cee:	f8c4 e008 	str.w	lr, [r4, #8]
  407cf2:	6065      	str	r5, [r4, #4]
  407cf4:	505a      	str	r2, [r3, r1]
  407cf6:	f000 fadd 	bl	4082b4 <__malloc_unlock>
  407cfa:	9b00      	ldr	r3, [sp, #0]
  407cfc:	f103 0408 	add.w	r4, r3, #8
  407d00:	e01e      	b.n	407d40 <_malloc_r+0x18c>
  407d02:	2910      	cmp	r1, #16
  407d04:	d820      	bhi.n	407d48 <_malloc_r+0x194>
  407d06:	f000 facf 	bl	4082a8 <__malloc_lock>
  407d0a:	2610      	movs	r6, #16
  407d0c:	2318      	movs	r3, #24
  407d0e:	2002      	movs	r0, #2
  407d10:	4f79      	ldr	r7, [pc, #484]	; (407ef8 <_malloc_r+0x344>)
  407d12:	443b      	add	r3, r7
  407d14:	f1a3 0208 	sub.w	r2, r3, #8
  407d18:	685c      	ldr	r4, [r3, #4]
  407d1a:	4294      	cmp	r4, r2
  407d1c:	f000 813d 	beq.w	407f9a <_malloc_r+0x3e6>
  407d20:	6863      	ldr	r3, [r4, #4]
  407d22:	68e1      	ldr	r1, [r4, #12]
  407d24:	68a6      	ldr	r6, [r4, #8]
  407d26:	f023 0303 	bic.w	r3, r3, #3
  407d2a:	4423      	add	r3, r4
  407d2c:	4628      	mov	r0, r5
  407d2e:	685a      	ldr	r2, [r3, #4]
  407d30:	60f1      	str	r1, [r6, #12]
  407d32:	f042 0201 	orr.w	r2, r2, #1
  407d36:	608e      	str	r6, [r1, #8]
  407d38:	605a      	str	r2, [r3, #4]
  407d3a:	f000 fabb 	bl	4082b4 <__malloc_unlock>
  407d3e:	3408      	adds	r4, #8
  407d40:	4620      	mov	r0, r4
  407d42:	b003      	add	sp, #12
  407d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d48:	2400      	movs	r4, #0
  407d4a:	230c      	movs	r3, #12
  407d4c:	4620      	mov	r0, r4
  407d4e:	602b      	str	r3, [r5, #0]
  407d50:	b003      	add	sp, #12
  407d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d56:	2040      	movs	r0, #64	; 0x40
  407d58:	f44f 7300 	mov.w	r3, #512	; 0x200
  407d5c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  407d60:	e74a      	b.n	407bf8 <_malloc_r+0x44>
  407d62:	4423      	add	r3, r4
  407d64:	68e1      	ldr	r1, [r4, #12]
  407d66:	685a      	ldr	r2, [r3, #4]
  407d68:	68a6      	ldr	r6, [r4, #8]
  407d6a:	f042 0201 	orr.w	r2, r2, #1
  407d6e:	60f1      	str	r1, [r6, #12]
  407d70:	4628      	mov	r0, r5
  407d72:	608e      	str	r6, [r1, #8]
  407d74:	605a      	str	r2, [r3, #4]
  407d76:	f000 fa9d 	bl	4082b4 <__malloc_unlock>
  407d7a:	3408      	adds	r4, #8
  407d7c:	4620      	mov	r0, r4
  407d7e:	b003      	add	sp, #12
  407d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d84:	4423      	add	r3, r4
  407d86:	4628      	mov	r0, r5
  407d88:	685a      	ldr	r2, [r3, #4]
  407d8a:	f042 0201 	orr.w	r2, r2, #1
  407d8e:	605a      	str	r2, [r3, #4]
  407d90:	f000 fa90 	bl	4082b4 <__malloc_unlock>
  407d94:	3408      	adds	r4, #8
  407d96:	4620      	mov	r0, r4
  407d98:	b003      	add	sp, #12
  407d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d9e:	68bc      	ldr	r4, [r7, #8]
  407da0:	6863      	ldr	r3, [r4, #4]
  407da2:	f023 0803 	bic.w	r8, r3, #3
  407da6:	45b0      	cmp	r8, r6
  407da8:	d304      	bcc.n	407db4 <_malloc_r+0x200>
  407daa:	eba8 0306 	sub.w	r3, r8, r6
  407dae:	2b0f      	cmp	r3, #15
  407db0:	f300 8085 	bgt.w	407ebe <_malloc_r+0x30a>
  407db4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 407f10 <_malloc_r+0x35c>
  407db8:	4b50      	ldr	r3, [pc, #320]	; (407efc <_malloc_r+0x348>)
  407dba:	f8d9 2000 	ldr.w	r2, [r9]
  407dbe:	681b      	ldr	r3, [r3, #0]
  407dc0:	3201      	adds	r2, #1
  407dc2:	4433      	add	r3, r6
  407dc4:	eb04 0a08 	add.w	sl, r4, r8
  407dc8:	f000 8155 	beq.w	408076 <_malloc_r+0x4c2>
  407dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  407dd0:	330f      	adds	r3, #15
  407dd2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  407dd6:	f02b 0b0f 	bic.w	fp, fp, #15
  407dda:	4659      	mov	r1, fp
  407ddc:	4628      	mov	r0, r5
  407dde:	f000 fc15 	bl	40860c <_sbrk_r>
  407de2:	1c41      	adds	r1, r0, #1
  407de4:	4602      	mov	r2, r0
  407de6:	f000 80fc 	beq.w	407fe2 <_malloc_r+0x42e>
  407dea:	4582      	cmp	sl, r0
  407dec:	f200 80f7 	bhi.w	407fde <_malloc_r+0x42a>
  407df0:	4b43      	ldr	r3, [pc, #268]	; (407f00 <_malloc_r+0x34c>)
  407df2:	6819      	ldr	r1, [r3, #0]
  407df4:	4459      	add	r1, fp
  407df6:	6019      	str	r1, [r3, #0]
  407df8:	f000 814d 	beq.w	408096 <_malloc_r+0x4e2>
  407dfc:	f8d9 0000 	ldr.w	r0, [r9]
  407e00:	3001      	adds	r0, #1
  407e02:	bf1b      	ittet	ne
  407e04:	eba2 0a0a 	subne.w	sl, r2, sl
  407e08:	4451      	addne	r1, sl
  407e0a:	f8c9 2000 	streq.w	r2, [r9]
  407e0e:	6019      	strne	r1, [r3, #0]
  407e10:	f012 0107 	ands.w	r1, r2, #7
  407e14:	f000 8115 	beq.w	408042 <_malloc_r+0x48e>
  407e18:	f1c1 0008 	rsb	r0, r1, #8
  407e1c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  407e20:	4402      	add	r2, r0
  407e22:	3108      	adds	r1, #8
  407e24:	eb02 090b 	add.w	r9, r2, fp
  407e28:	f3c9 090b 	ubfx	r9, r9, #0, #12
  407e2c:	eba1 0909 	sub.w	r9, r1, r9
  407e30:	4649      	mov	r1, r9
  407e32:	4628      	mov	r0, r5
  407e34:	9301      	str	r3, [sp, #4]
  407e36:	9200      	str	r2, [sp, #0]
  407e38:	f000 fbe8 	bl	40860c <_sbrk_r>
  407e3c:	1c43      	adds	r3, r0, #1
  407e3e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  407e42:	f000 8143 	beq.w	4080cc <_malloc_r+0x518>
  407e46:	1a80      	subs	r0, r0, r2
  407e48:	4448      	add	r0, r9
  407e4a:	f040 0001 	orr.w	r0, r0, #1
  407e4e:	6819      	ldr	r1, [r3, #0]
  407e50:	60ba      	str	r2, [r7, #8]
  407e52:	4449      	add	r1, r9
  407e54:	42bc      	cmp	r4, r7
  407e56:	6050      	str	r0, [r2, #4]
  407e58:	6019      	str	r1, [r3, #0]
  407e5a:	d017      	beq.n	407e8c <_malloc_r+0x2d8>
  407e5c:	f1b8 0f0f 	cmp.w	r8, #15
  407e60:	f240 80fb 	bls.w	40805a <_malloc_r+0x4a6>
  407e64:	6860      	ldr	r0, [r4, #4]
  407e66:	f1a8 020c 	sub.w	r2, r8, #12
  407e6a:	f022 0207 	bic.w	r2, r2, #7
  407e6e:	eb04 0e02 	add.w	lr, r4, r2
  407e72:	f000 0001 	and.w	r0, r0, #1
  407e76:	f04f 0c05 	mov.w	ip, #5
  407e7a:	4310      	orrs	r0, r2
  407e7c:	2a0f      	cmp	r2, #15
  407e7e:	6060      	str	r0, [r4, #4]
  407e80:	f8ce c004 	str.w	ip, [lr, #4]
  407e84:	f8ce c008 	str.w	ip, [lr, #8]
  407e88:	f200 8117 	bhi.w	4080ba <_malloc_r+0x506>
  407e8c:	4b1d      	ldr	r3, [pc, #116]	; (407f04 <_malloc_r+0x350>)
  407e8e:	68bc      	ldr	r4, [r7, #8]
  407e90:	681a      	ldr	r2, [r3, #0]
  407e92:	4291      	cmp	r1, r2
  407e94:	bf88      	it	hi
  407e96:	6019      	strhi	r1, [r3, #0]
  407e98:	4b1b      	ldr	r3, [pc, #108]	; (407f08 <_malloc_r+0x354>)
  407e9a:	681a      	ldr	r2, [r3, #0]
  407e9c:	4291      	cmp	r1, r2
  407e9e:	6862      	ldr	r2, [r4, #4]
  407ea0:	bf88      	it	hi
  407ea2:	6019      	strhi	r1, [r3, #0]
  407ea4:	f022 0203 	bic.w	r2, r2, #3
  407ea8:	4296      	cmp	r6, r2
  407eaa:	eba2 0306 	sub.w	r3, r2, r6
  407eae:	d801      	bhi.n	407eb4 <_malloc_r+0x300>
  407eb0:	2b0f      	cmp	r3, #15
  407eb2:	dc04      	bgt.n	407ebe <_malloc_r+0x30a>
  407eb4:	4628      	mov	r0, r5
  407eb6:	f000 f9fd 	bl	4082b4 <__malloc_unlock>
  407eba:	2400      	movs	r4, #0
  407ebc:	e740      	b.n	407d40 <_malloc_r+0x18c>
  407ebe:	19a2      	adds	r2, r4, r6
  407ec0:	f043 0301 	orr.w	r3, r3, #1
  407ec4:	f046 0601 	orr.w	r6, r6, #1
  407ec8:	6066      	str	r6, [r4, #4]
  407eca:	4628      	mov	r0, r5
  407ecc:	60ba      	str	r2, [r7, #8]
  407ece:	6053      	str	r3, [r2, #4]
  407ed0:	f000 f9f0 	bl	4082b4 <__malloc_unlock>
  407ed4:	3408      	adds	r4, #8
  407ed6:	4620      	mov	r0, r4
  407ed8:	b003      	add	sp, #12
  407eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ede:	2b14      	cmp	r3, #20
  407ee0:	d971      	bls.n	407fc6 <_malloc_r+0x412>
  407ee2:	2b54      	cmp	r3, #84	; 0x54
  407ee4:	f200 80a3 	bhi.w	40802e <_malloc_r+0x47a>
  407ee8:	0b33      	lsrs	r3, r6, #12
  407eea:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  407eee:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  407ef2:	00c3      	lsls	r3, r0, #3
  407ef4:	e680      	b.n	407bf8 <_malloc_r+0x44>
  407ef6:	bf00      	nop
  407ef8:	204005d8 	.word	0x204005d8
  407efc:	2040af24 	.word	0x2040af24
  407f00:	2040aef4 	.word	0x2040aef4
  407f04:	2040af1c 	.word	0x2040af1c
  407f08:	2040af20 	.word	0x2040af20
  407f0c:	204005e0 	.word	0x204005e0
  407f10:	204009e0 	.word	0x204009e0
  407f14:	0a5a      	lsrs	r2, r3, #9
  407f16:	2a04      	cmp	r2, #4
  407f18:	d95b      	bls.n	407fd2 <_malloc_r+0x41e>
  407f1a:	2a14      	cmp	r2, #20
  407f1c:	f200 80ae 	bhi.w	40807c <_malloc_r+0x4c8>
  407f20:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  407f24:	00c9      	lsls	r1, r1, #3
  407f26:	325b      	adds	r2, #91	; 0x5b
  407f28:	eb07 0c01 	add.w	ip, r7, r1
  407f2c:	5879      	ldr	r1, [r7, r1]
  407f2e:	f1ac 0c08 	sub.w	ip, ip, #8
  407f32:	458c      	cmp	ip, r1
  407f34:	f000 8088 	beq.w	408048 <_malloc_r+0x494>
  407f38:	684a      	ldr	r2, [r1, #4]
  407f3a:	f022 0203 	bic.w	r2, r2, #3
  407f3e:	4293      	cmp	r3, r2
  407f40:	d273      	bcs.n	40802a <_malloc_r+0x476>
  407f42:	6889      	ldr	r1, [r1, #8]
  407f44:	458c      	cmp	ip, r1
  407f46:	d1f7      	bne.n	407f38 <_malloc_r+0x384>
  407f48:	f8dc 200c 	ldr.w	r2, [ip, #12]
  407f4c:	687b      	ldr	r3, [r7, #4]
  407f4e:	60e2      	str	r2, [r4, #12]
  407f50:	f8c4 c008 	str.w	ip, [r4, #8]
  407f54:	6094      	str	r4, [r2, #8]
  407f56:	f8cc 400c 	str.w	r4, [ip, #12]
  407f5a:	e68f      	b.n	407c7c <_malloc_r+0xc8>
  407f5c:	19a1      	adds	r1, r4, r6
  407f5e:	f046 0c01 	orr.w	ip, r6, #1
  407f62:	f042 0601 	orr.w	r6, r2, #1
  407f66:	f8c4 c004 	str.w	ip, [r4, #4]
  407f6a:	4628      	mov	r0, r5
  407f6c:	6179      	str	r1, [r7, #20]
  407f6e:	6139      	str	r1, [r7, #16]
  407f70:	f8c1 e00c 	str.w	lr, [r1, #12]
  407f74:	f8c1 e008 	str.w	lr, [r1, #8]
  407f78:	604e      	str	r6, [r1, #4]
  407f7a:	50e2      	str	r2, [r4, r3]
  407f7c:	f000 f99a 	bl	4082b4 <__malloc_unlock>
  407f80:	3408      	adds	r4, #8
  407f82:	e6dd      	b.n	407d40 <_malloc_r+0x18c>
  407f84:	687b      	ldr	r3, [r7, #4]
  407f86:	e679      	b.n	407c7c <_malloc_r+0xc8>
  407f88:	f108 0801 	add.w	r8, r8, #1
  407f8c:	f018 0f03 	tst.w	r8, #3
  407f90:	f10c 0c08 	add.w	ip, ip, #8
  407f94:	f47f ae85 	bne.w	407ca2 <_malloc_r+0xee>
  407f98:	e02d      	b.n	407ff6 <_malloc_r+0x442>
  407f9a:	68dc      	ldr	r4, [r3, #12]
  407f9c:	42a3      	cmp	r3, r4
  407f9e:	bf08      	it	eq
  407fa0:	3002      	addeq	r0, #2
  407fa2:	f43f ae3e 	beq.w	407c22 <_malloc_r+0x6e>
  407fa6:	e6bb      	b.n	407d20 <_malloc_r+0x16c>
  407fa8:	4419      	add	r1, r3
  407faa:	461c      	mov	r4, r3
  407fac:	684a      	ldr	r2, [r1, #4]
  407fae:	68db      	ldr	r3, [r3, #12]
  407fb0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  407fb4:	f042 0201 	orr.w	r2, r2, #1
  407fb8:	604a      	str	r2, [r1, #4]
  407fba:	4628      	mov	r0, r5
  407fbc:	60f3      	str	r3, [r6, #12]
  407fbe:	609e      	str	r6, [r3, #8]
  407fc0:	f000 f978 	bl	4082b4 <__malloc_unlock>
  407fc4:	e6bc      	b.n	407d40 <_malloc_r+0x18c>
  407fc6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  407fca:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  407fce:	00c3      	lsls	r3, r0, #3
  407fd0:	e612      	b.n	407bf8 <_malloc_r+0x44>
  407fd2:	099a      	lsrs	r2, r3, #6
  407fd4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  407fd8:	00c9      	lsls	r1, r1, #3
  407fda:	3238      	adds	r2, #56	; 0x38
  407fdc:	e7a4      	b.n	407f28 <_malloc_r+0x374>
  407fde:	42bc      	cmp	r4, r7
  407fe0:	d054      	beq.n	40808c <_malloc_r+0x4d8>
  407fe2:	68bc      	ldr	r4, [r7, #8]
  407fe4:	6862      	ldr	r2, [r4, #4]
  407fe6:	f022 0203 	bic.w	r2, r2, #3
  407fea:	e75d      	b.n	407ea8 <_malloc_r+0x2f4>
  407fec:	f859 3908 	ldr.w	r3, [r9], #-8
  407ff0:	4599      	cmp	r9, r3
  407ff2:	f040 8086 	bne.w	408102 <_malloc_r+0x54e>
  407ff6:	f010 0f03 	tst.w	r0, #3
  407ffa:	f100 30ff 	add.w	r0, r0, #4294967295
  407ffe:	d1f5      	bne.n	407fec <_malloc_r+0x438>
  408000:	687b      	ldr	r3, [r7, #4]
  408002:	ea23 0304 	bic.w	r3, r3, r4
  408006:	607b      	str	r3, [r7, #4]
  408008:	0064      	lsls	r4, r4, #1
  40800a:	429c      	cmp	r4, r3
  40800c:	f63f aec7 	bhi.w	407d9e <_malloc_r+0x1ea>
  408010:	2c00      	cmp	r4, #0
  408012:	f43f aec4 	beq.w	407d9e <_malloc_r+0x1ea>
  408016:	421c      	tst	r4, r3
  408018:	4640      	mov	r0, r8
  40801a:	f47f ae3e 	bne.w	407c9a <_malloc_r+0xe6>
  40801e:	0064      	lsls	r4, r4, #1
  408020:	421c      	tst	r4, r3
  408022:	f100 0004 	add.w	r0, r0, #4
  408026:	d0fa      	beq.n	40801e <_malloc_r+0x46a>
  408028:	e637      	b.n	407c9a <_malloc_r+0xe6>
  40802a:	468c      	mov	ip, r1
  40802c:	e78c      	b.n	407f48 <_malloc_r+0x394>
  40802e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  408032:	d815      	bhi.n	408060 <_malloc_r+0x4ac>
  408034:	0bf3      	lsrs	r3, r6, #15
  408036:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40803a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40803e:	00c3      	lsls	r3, r0, #3
  408040:	e5da      	b.n	407bf8 <_malloc_r+0x44>
  408042:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  408046:	e6ed      	b.n	407e24 <_malloc_r+0x270>
  408048:	687b      	ldr	r3, [r7, #4]
  40804a:	1092      	asrs	r2, r2, #2
  40804c:	2101      	movs	r1, #1
  40804e:	fa01 f202 	lsl.w	r2, r1, r2
  408052:	4313      	orrs	r3, r2
  408054:	607b      	str	r3, [r7, #4]
  408056:	4662      	mov	r2, ip
  408058:	e779      	b.n	407f4e <_malloc_r+0x39a>
  40805a:	2301      	movs	r3, #1
  40805c:	6053      	str	r3, [r2, #4]
  40805e:	e729      	b.n	407eb4 <_malloc_r+0x300>
  408060:	f240 5254 	movw	r2, #1364	; 0x554
  408064:	4293      	cmp	r3, r2
  408066:	d822      	bhi.n	4080ae <_malloc_r+0x4fa>
  408068:	0cb3      	lsrs	r3, r6, #18
  40806a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40806e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  408072:	00c3      	lsls	r3, r0, #3
  408074:	e5c0      	b.n	407bf8 <_malloc_r+0x44>
  408076:	f103 0b10 	add.w	fp, r3, #16
  40807a:	e6ae      	b.n	407dda <_malloc_r+0x226>
  40807c:	2a54      	cmp	r2, #84	; 0x54
  40807e:	d829      	bhi.n	4080d4 <_malloc_r+0x520>
  408080:	0b1a      	lsrs	r2, r3, #12
  408082:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  408086:	00c9      	lsls	r1, r1, #3
  408088:	326e      	adds	r2, #110	; 0x6e
  40808a:	e74d      	b.n	407f28 <_malloc_r+0x374>
  40808c:	4b20      	ldr	r3, [pc, #128]	; (408110 <_malloc_r+0x55c>)
  40808e:	6819      	ldr	r1, [r3, #0]
  408090:	4459      	add	r1, fp
  408092:	6019      	str	r1, [r3, #0]
  408094:	e6b2      	b.n	407dfc <_malloc_r+0x248>
  408096:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40809a:	2800      	cmp	r0, #0
  40809c:	f47f aeae 	bne.w	407dfc <_malloc_r+0x248>
  4080a0:	eb08 030b 	add.w	r3, r8, fp
  4080a4:	68ba      	ldr	r2, [r7, #8]
  4080a6:	f043 0301 	orr.w	r3, r3, #1
  4080aa:	6053      	str	r3, [r2, #4]
  4080ac:	e6ee      	b.n	407e8c <_malloc_r+0x2d8>
  4080ae:	207f      	movs	r0, #127	; 0x7f
  4080b0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4080b4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4080b8:	e59e      	b.n	407bf8 <_malloc_r+0x44>
  4080ba:	f104 0108 	add.w	r1, r4, #8
  4080be:	4628      	mov	r0, r5
  4080c0:	9300      	str	r3, [sp, #0]
  4080c2:	f7ff fa59 	bl	407578 <_free_r>
  4080c6:	9b00      	ldr	r3, [sp, #0]
  4080c8:	6819      	ldr	r1, [r3, #0]
  4080ca:	e6df      	b.n	407e8c <_malloc_r+0x2d8>
  4080cc:	2001      	movs	r0, #1
  4080ce:	f04f 0900 	mov.w	r9, #0
  4080d2:	e6bc      	b.n	407e4e <_malloc_r+0x29a>
  4080d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4080d8:	d805      	bhi.n	4080e6 <_malloc_r+0x532>
  4080da:	0bda      	lsrs	r2, r3, #15
  4080dc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4080e0:	00c9      	lsls	r1, r1, #3
  4080e2:	3277      	adds	r2, #119	; 0x77
  4080e4:	e720      	b.n	407f28 <_malloc_r+0x374>
  4080e6:	f240 5154 	movw	r1, #1364	; 0x554
  4080ea:	428a      	cmp	r2, r1
  4080ec:	d805      	bhi.n	4080fa <_malloc_r+0x546>
  4080ee:	0c9a      	lsrs	r2, r3, #18
  4080f0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4080f4:	00c9      	lsls	r1, r1, #3
  4080f6:	327c      	adds	r2, #124	; 0x7c
  4080f8:	e716      	b.n	407f28 <_malloc_r+0x374>
  4080fa:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4080fe:	227e      	movs	r2, #126	; 0x7e
  408100:	e712      	b.n	407f28 <_malloc_r+0x374>
  408102:	687b      	ldr	r3, [r7, #4]
  408104:	e780      	b.n	408008 <_malloc_r+0x454>
  408106:	08f0      	lsrs	r0, r6, #3
  408108:	f106 0308 	add.w	r3, r6, #8
  40810c:	e600      	b.n	407d10 <_malloc_r+0x15c>
  40810e:	bf00      	nop
  408110:	2040aef4 	.word	0x2040aef4

00408114 <__ascii_mbtowc>:
  408114:	b082      	sub	sp, #8
  408116:	b149      	cbz	r1, 40812c <__ascii_mbtowc+0x18>
  408118:	b15a      	cbz	r2, 408132 <__ascii_mbtowc+0x1e>
  40811a:	b16b      	cbz	r3, 408138 <__ascii_mbtowc+0x24>
  40811c:	7813      	ldrb	r3, [r2, #0]
  40811e:	600b      	str	r3, [r1, #0]
  408120:	7812      	ldrb	r2, [r2, #0]
  408122:	1c10      	adds	r0, r2, #0
  408124:	bf18      	it	ne
  408126:	2001      	movne	r0, #1
  408128:	b002      	add	sp, #8
  40812a:	4770      	bx	lr
  40812c:	a901      	add	r1, sp, #4
  40812e:	2a00      	cmp	r2, #0
  408130:	d1f3      	bne.n	40811a <__ascii_mbtowc+0x6>
  408132:	4610      	mov	r0, r2
  408134:	b002      	add	sp, #8
  408136:	4770      	bx	lr
  408138:	f06f 0001 	mvn.w	r0, #1
  40813c:	e7f4      	b.n	408128 <__ascii_mbtowc+0x14>
  40813e:	bf00      	nop

00408140 <memchr>:
  408140:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408144:	2a10      	cmp	r2, #16
  408146:	db2b      	blt.n	4081a0 <memchr+0x60>
  408148:	f010 0f07 	tst.w	r0, #7
  40814c:	d008      	beq.n	408160 <memchr+0x20>
  40814e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408152:	3a01      	subs	r2, #1
  408154:	428b      	cmp	r3, r1
  408156:	d02d      	beq.n	4081b4 <memchr+0x74>
  408158:	f010 0f07 	tst.w	r0, #7
  40815c:	b342      	cbz	r2, 4081b0 <memchr+0x70>
  40815e:	d1f6      	bne.n	40814e <memchr+0xe>
  408160:	b4f0      	push	{r4, r5, r6, r7}
  408162:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408166:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40816a:	f022 0407 	bic.w	r4, r2, #7
  40816e:	f07f 0700 	mvns.w	r7, #0
  408172:	2300      	movs	r3, #0
  408174:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408178:	3c08      	subs	r4, #8
  40817a:	ea85 0501 	eor.w	r5, r5, r1
  40817e:	ea86 0601 	eor.w	r6, r6, r1
  408182:	fa85 f547 	uadd8	r5, r5, r7
  408186:	faa3 f587 	sel	r5, r3, r7
  40818a:	fa86 f647 	uadd8	r6, r6, r7
  40818e:	faa5 f687 	sel	r6, r5, r7
  408192:	b98e      	cbnz	r6, 4081b8 <memchr+0x78>
  408194:	d1ee      	bne.n	408174 <memchr+0x34>
  408196:	bcf0      	pop	{r4, r5, r6, r7}
  408198:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40819c:	f002 0207 	and.w	r2, r2, #7
  4081a0:	b132      	cbz	r2, 4081b0 <memchr+0x70>
  4081a2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4081a6:	3a01      	subs	r2, #1
  4081a8:	ea83 0301 	eor.w	r3, r3, r1
  4081ac:	b113      	cbz	r3, 4081b4 <memchr+0x74>
  4081ae:	d1f8      	bne.n	4081a2 <memchr+0x62>
  4081b0:	2000      	movs	r0, #0
  4081b2:	4770      	bx	lr
  4081b4:	3801      	subs	r0, #1
  4081b6:	4770      	bx	lr
  4081b8:	2d00      	cmp	r5, #0
  4081ba:	bf06      	itte	eq
  4081bc:	4635      	moveq	r5, r6
  4081be:	3803      	subeq	r0, #3
  4081c0:	3807      	subne	r0, #7
  4081c2:	f015 0f01 	tst.w	r5, #1
  4081c6:	d107      	bne.n	4081d8 <memchr+0x98>
  4081c8:	3001      	adds	r0, #1
  4081ca:	f415 7f80 	tst.w	r5, #256	; 0x100
  4081ce:	bf02      	ittt	eq
  4081d0:	3001      	addeq	r0, #1
  4081d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4081d6:	3001      	addeq	r0, #1
  4081d8:	bcf0      	pop	{r4, r5, r6, r7}
  4081da:	3801      	subs	r0, #1
  4081dc:	4770      	bx	lr
  4081de:	bf00      	nop

004081e0 <memmove>:
  4081e0:	4288      	cmp	r0, r1
  4081e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4081e4:	d90d      	bls.n	408202 <memmove+0x22>
  4081e6:	188b      	adds	r3, r1, r2
  4081e8:	4298      	cmp	r0, r3
  4081ea:	d20a      	bcs.n	408202 <memmove+0x22>
  4081ec:	1884      	adds	r4, r0, r2
  4081ee:	2a00      	cmp	r2, #0
  4081f0:	d051      	beq.n	408296 <memmove+0xb6>
  4081f2:	4622      	mov	r2, r4
  4081f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4081f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4081fc:	4299      	cmp	r1, r3
  4081fe:	d1f9      	bne.n	4081f4 <memmove+0x14>
  408200:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408202:	2a0f      	cmp	r2, #15
  408204:	d948      	bls.n	408298 <memmove+0xb8>
  408206:	ea41 0300 	orr.w	r3, r1, r0
  40820a:	079b      	lsls	r3, r3, #30
  40820c:	d146      	bne.n	40829c <memmove+0xbc>
  40820e:	f100 0410 	add.w	r4, r0, #16
  408212:	f101 0310 	add.w	r3, r1, #16
  408216:	4615      	mov	r5, r2
  408218:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40821c:	f844 6c10 	str.w	r6, [r4, #-16]
  408220:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408224:	f844 6c0c 	str.w	r6, [r4, #-12]
  408228:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40822c:	f844 6c08 	str.w	r6, [r4, #-8]
  408230:	3d10      	subs	r5, #16
  408232:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408236:	f844 6c04 	str.w	r6, [r4, #-4]
  40823a:	2d0f      	cmp	r5, #15
  40823c:	f103 0310 	add.w	r3, r3, #16
  408240:	f104 0410 	add.w	r4, r4, #16
  408244:	d8e8      	bhi.n	408218 <memmove+0x38>
  408246:	f1a2 0310 	sub.w	r3, r2, #16
  40824a:	f023 030f 	bic.w	r3, r3, #15
  40824e:	f002 0e0f 	and.w	lr, r2, #15
  408252:	3310      	adds	r3, #16
  408254:	f1be 0f03 	cmp.w	lr, #3
  408258:	4419      	add	r1, r3
  40825a:	4403      	add	r3, r0
  40825c:	d921      	bls.n	4082a2 <memmove+0xc2>
  40825e:	1f1e      	subs	r6, r3, #4
  408260:	460d      	mov	r5, r1
  408262:	4674      	mov	r4, lr
  408264:	3c04      	subs	r4, #4
  408266:	f855 7b04 	ldr.w	r7, [r5], #4
  40826a:	f846 7f04 	str.w	r7, [r6, #4]!
  40826e:	2c03      	cmp	r4, #3
  408270:	d8f8      	bhi.n	408264 <memmove+0x84>
  408272:	f1ae 0404 	sub.w	r4, lr, #4
  408276:	f024 0403 	bic.w	r4, r4, #3
  40827a:	3404      	adds	r4, #4
  40827c:	4421      	add	r1, r4
  40827e:	4423      	add	r3, r4
  408280:	f002 0203 	and.w	r2, r2, #3
  408284:	b162      	cbz	r2, 4082a0 <memmove+0xc0>
  408286:	3b01      	subs	r3, #1
  408288:	440a      	add	r2, r1
  40828a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40828e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408292:	428a      	cmp	r2, r1
  408294:	d1f9      	bne.n	40828a <memmove+0xaa>
  408296:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408298:	4603      	mov	r3, r0
  40829a:	e7f3      	b.n	408284 <memmove+0xa4>
  40829c:	4603      	mov	r3, r0
  40829e:	e7f2      	b.n	408286 <memmove+0xa6>
  4082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4082a2:	4672      	mov	r2, lr
  4082a4:	e7ee      	b.n	408284 <memmove+0xa4>
  4082a6:	bf00      	nop

004082a8 <__malloc_lock>:
  4082a8:	4801      	ldr	r0, [pc, #4]	; (4082b0 <__malloc_lock+0x8>)
  4082aa:	f7ff bbff 	b.w	407aac <__retarget_lock_acquire_recursive>
  4082ae:	bf00      	nop
  4082b0:	2040afe0 	.word	0x2040afe0

004082b4 <__malloc_unlock>:
  4082b4:	4801      	ldr	r0, [pc, #4]	; (4082bc <__malloc_unlock+0x8>)
  4082b6:	f7ff bbfb 	b.w	407ab0 <__retarget_lock_release_recursive>
  4082ba:	bf00      	nop
  4082bc:	2040afe0 	.word	0x2040afe0

004082c0 <_realloc_r>:
  4082c0:	2900      	cmp	r1, #0
  4082c2:	f000 8095 	beq.w	4083f0 <_realloc_r+0x130>
  4082c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4082ca:	460d      	mov	r5, r1
  4082cc:	4616      	mov	r6, r2
  4082ce:	b083      	sub	sp, #12
  4082d0:	4680      	mov	r8, r0
  4082d2:	f106 070b 	add.w	r7, r6, #11
  4082d6:	f7ff ffe7 	bl	4082a8 <__malloc_lock>
  4082da:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4082de:	2f16      	cmp	r7, #22
  4082e0:	f02e 0403 	bic.w	r4, lr, #3
  4082e4:	f1a5 0908 	sub.w	r9, r5, #8
  4082e8:	d83c      	bhi.n	408364 <_realloc_r+0xa4>
  4082ea:	2210      	movs	r2, #16
  4082ec:	4617      	mov	r7, r2
  4082ee:	42be      	cmp	r6, r7
  4082f0:	d83d      	bhi.n	40836e <_realloc_r+0xae>
  4082f2:	4294      	cmp	r4, r2
  4082f4:	da43      	bge.n	40837e <_realloc_r+0xbe>
  4082f6:	4bc4      	ldr	r3, [pc, #784]	; (408608 <_realloc_r+0x348>)
  4082f8:	6899      	ldr	r1, [r3, #8]
  4082fa:	eb09 0004 	add.w	r0, r9, r4
  4082fe:	4288      	cmp	r0, r1
  408300:	f000 80b4 	beq.w	40846c <_realloc_r+0x1ac>
  408304:	6843      	ldr	r3, [r0, #4]
  408306:	f023 0101 	bic.w	r1, r3, #1
  40830a:	4401      	add	r1, r0
  40830c:	6849      	ldr	r1, [r1, #4]
  40830e:	07c9      	lsls	r1, r1, #31
  408310:	d54c      	bpl.n	4083ac <_realloc_r+0xec>
  408312:	f01e 0f01 	tst.w	lr, #1
  408316:	f000 809b 	beq.w	408450 <_realloc_r+0x190>
  40831a:	4631      	mov	r1, r6
  40831c:	4640      	mov	r0, r8
  40831e:	f7ff fc49 	bl	407bb4 <_malloc_r>
  408322:	4606      	mov	r6, r0
  408324:	2800      	cmp	r0, #0
  408326:	d03a      	beq.n	40839e <_realloc_r+0xde>
  408328:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40832c:	f023 0301 	bic.w	r3, r3, #1
  408330:	444b      	add	r3, r9
  408332:	f1a0 0208 	sub.w	r2, r0, #8
  408336:	429a      	cmp	r2, r3
  408338:	f000 8121 	beq.w	40857e <_realloc_r+0x2be>
  40833c:	1f22      	subs	r2, r4, #4
  40833e:	2a24      	cmp	r2, #36	; 0x24
  408340:	f200 8107 	bhi.w	408552 <_realloc_r+0x292>
  408344:	2a13      	cmp	r2, #19
  408346:	f200 80db 	bhi.w	408500 <_realloc_r+0x240>
  40834a:	4603      	mov	r3, r0
  40834c:	462a      	mov	r2, r5
  40834e:	6811      	ldr	r1, [r2, #0]
  408350:	6019      	str	r1, [r3, #0]
  408352:	6851      	ldr	r1, [r2, #4]
  408354:	6059      	str	r1, [r3, #4]
  408356:	6892      	ldr	r2, [r2, #8]
  408358:	609a      	str	r2, [r3, #8]
  40835a:	4629      	mov	r1, r5
  40835c:	4640      	mov	r0, r8
  40835e:	f7ff f90b 	bl	407578 <_free_r>
  408362:	e01c      	b.n	40839e <_realloc_r+0xde>
  408364:	f027 0707 	bic.w	r7, r7, #7
  408368:	2f00      	cmp	r7, #0
  40836a:	463a      	mov	r2, r7
  40836c:	dabf      	bge.n	4082ee <_realloc_r+0x2e>
  40836e:	2600      	movs	r6, #0
  408370:	230c      	movs	r3, #12
  408372:	4630      	mov	r0, r6
  408374:	f8c8 3000 	str.w	r3, [r8]
  408378:	b003      	add	sp, #12
  40837a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40837e:	462e      	mov	r6, r5
  408380:	1be3      	subs	r3, r4, r7
  408382:	2b0f      	cmp	r3, #15
  408384:	d81e      	bhi.n	4083c4 <_realloc_r+0x104>
  408386:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40838a:	f003 0301 	and.w	r3, r3, #1
  40838e:	4323      	orrs	r3, r4
  408390:	444c      	add	r4, r9
  408392:	f8c9 3004 	str.w	r3, [r9, #4]
  408396:	6863      	ldr	r3, [r4, #4]
  408398:	f043 0301 	orr.w	r3, r3, #1
  40839c:	6063      	str	r3, [r4, #4]
  40839e:	4640      	mov	r0, r8
  4083a0:	f7ff ff88 	bl	4082b4 <__malloc_unlock>
  4083a4:	4630      	mov	r0, r6
  4083a6:	b003      	add	sp, #12
  4083a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083ac:	f023 0303 	bic.w	r3, r3, #3
  4083b0:	18e1      	adds	r1, r4, r3
  4083b2:	4291      	cmp	r1, r2
  4083b4:	db1f      	blt.n	4083f6 <_realloc_r+0x136>
  4083b6:	68c3      	ldr	r3, [r0, #12]
  4083b8:	6882      	ldr	r2, [r0, #8]
  4083ba:	462e      	mov	r6, r5
  4083bc:	60d3      	str	r3, [r2, #12]
  4083be:	460c      	mov	r4, r1
  4083c0:	609a      	str	r2, [r3, #8]
  4083c2:	e7dd      	b.n	408380 <_realloc_r+0xc0>
  4083c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4083c8:	eb09 0107 	add.w	r1, r9, r7
  4083cc:	f002 0201 	and.w	r2, r2, #1
  4083d0:	444c      	add	r4, r9
  4083d2:	f043 0301 	orr.w	r3, r3, #1
  4083d6:	4317      	orrs	r7, r2
  4083d8:	f8c9 7004 	str.w	r7, [r9, #4]
  4083dc:	604b      	str	r3, [r1, #4]
  4083de:	6863      	ldr	r3, [r4, #4]
  4083e0:	f043 0301 	orr.w	r3, r3, #1
  4083e4:	3108      	adds	r1, #8
  4083e6:	6063      	str	r3, [r4, #4]
  4083e8:	4640      	mov	r0, r8
  4083ea:	f7ff f8c5 	bl	407578 <_free_r>
  4083ee:	e7d6      	b.n	40839e <_realloc_r+0xde>
  4083f0:	4611      	mov	r1, r2
  4083f2:	f7ff bbdf 	b.w	407bb4 <_malloc_r>
  4083f6:	f01e 0f01 	tst.w	lr, #1
  4083fa:	d18e      	bne.n	40831a <_realloc_r+0x5a>
  4083fc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408400:	eba9 0a01 	sub.w	sl, r9, r1
  408404:	f8da 1004 	ldr.w	r1, [sl, #4]
  408408:	f021 0103 	bic.w	r1, r1, #3
  40840c:	440b      	add	r3, r1
  40840e:	4423      	add	r3, r4
  408410:	4293      	cmp	r3, r2
  408412:	db25      	blt.n	408460 <_realloc_r+0x1a0>
  408414:	68c2      	ldr	r2, [r0, #12]
  408416:	6881      	ldr	r1, [r0, #8]
  408418:	4656      	mov	r6, sl
  40841a:	60ca      	str	r2, [r1, #12]
  40841c:	6091      	str	r1, [r2, #8]
  40841e:	f8da 100c 	ldr.w	r1, [sl, #12]
  408422:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408426:	1f22      	subs	r2, r4, #4
  408428:	2a24      	cmp	r2, #36	; 0x24
  40842a:	60c1      	str	r1, [r0, #12]
  40842c:	6088      	str	r0, [r1, #8]
  40842e:	f200 8094 	bhi.w	40855a <_realloc_r+0x29a>
  408432:	2a13      	cmp	r2, #19
  408434:	d96f      	bls.n	408516 <_realloc_r+0x256>
  408436:	6829      	ldr	r1, [r5, #0]
  408438:	f8ca 1008 	str.w	r1, [sl, #8]
  40843c:	6869      	ldr	r1, [r5, #4]
  40843e:	f8ca 100c 	str.w	r1, [sl, #12]
  408442:	2a1b      	cmp	r2, #27
  408444:	f200 80a2 	bhi.w	40858c <_realloc_r+0x2cc>
  408448:	3508      	adds	r5, #8
  40844a:	f10a 0210 	add.w	r2, sl, #16
  40844e:	e063      	b.n	408518 <_realloc_r+0x258>
  408450:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408454:	eba9 0a03 	sub.w	sl, r9, r3
  408458:	f8da 1004 	ldr.w	r1, [sl, #4]
  40845c:	f021 0103 	bic.w	r1, r1, #3
  408460:	1863      	adds	r3, r4, r1
  408462:	4293      	cmp	r3, r2
  408464:	f6ff af59 	blt.w	40831a <_realloc_r+0x5a>
  408468:	4656      	mov	r6, sl
  40846a:	e7d8      	b.n	40841e <_realloc_r+0x15e>
  40846c:	6841      	ldr	r1, [r0, #4]
  40846e:	f021 0b03 	bic.w	fp, r1, #3
  408472:	44a3      	add	fp, r4
  408474:	f107 0010 	add.w	r0, r7, #16
  408478:	4583      	cmp	fp, r0
  40847a:	da56      	bge.n	40852a <_realloc_r+0x26a>
  40847c:	f01e 0f01 	tst.w	lr, #1
  408480:	f47f af4b 	bne.w	40831a <_realloc_r+0x5a>
  408484:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408488:	eba9 0a01 	sub.w	sl, r9, r1
  40848c:	f8da 1004 	ldr.w	r1, [sl, #4]
  408490:	f021 0103 	bic.w	r1, r1, #3
  408494:	448b      	add	fp, r1
  408496:	4558      	cmp	r0, fp
  408498:	dce2      	bgt.n	408460 <_realloc_r+0x1a0>
  40849a:	4656      	mov	r6, sl
  40849c:	f8da 100c 	ldr.w	r1, [sl, #12]
  4084a0:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4084a4:	1f22      	subs	r2, r4, #4
  4084a6:	2a24      	cmp	r2, #36	; 0x24
  4084a8:	60c1      	str	r1, [r0, #12]
  4084aa:	6088      	str	r0, [r1, #8]
  4084ac:	f200 808f 	bhi.w	4085ce <_realloc_r+0x30e>
  4084b0:	2a13      	cmp	r2, #19
  4084b2:	f240 808a 	bls.w	4085ca <_realloc_r+0x30a>
  4084b6:	6829      	ldr	r1, [r5, #0]
  4084b8:	f8ca 1008 	str.w	r1, [sl, #8]
  4084bc:	6869      	ldr	r1, [r5, #4]
  4084be:	f8ca 100c 	str.w	r1, [sl, #12]
  4084c2:	2a1b      	cmp	r2, #27
  4084c4:	f200 808a 	bhi.w	4085dc <_realloc_r+0x31c>
  4084c8:	3508      	adds	r5, #8
  4084ca:	f10a 0210 	add.w	r2, sl, #16
  4084ce:	6829      	ldr	r1, [r5, #0]
  4084d0:	6011      	str	r1, [r2, #0]
  4084d2:	6869      	ldr	r1, [r5, #4]
  4084d4:	6051      	str	r1, [r2, #4]
  4084d6:	68a9      	ldr	r1, [r5, #8]
  4084d8:	6091      	str	r1, [r2, #8]
  4084da:	eb0a 0107 	add.w	r1, sl, r7
  4084de:	ebab 0207 	sub.w	r2, fp, r7
  4084e2:	f042 0201 	orr.w	r2, r2, #1
  4084e6:	6099      	str	r1, [r3, #8]
  4084e8:	604a      	str	r2, [r1, #4]
  4084ea:	f8da 3004 	ldr.w	r3, [sl, #4]
  4084ee:	f003 0301 	and.w	r3, r3, #1
  4084f2:	431f      	orrs	r7, r3
  4084f4:	4640      	mov	r0, r8
  4084f6:	f8ca 7004 	str.w	r7, [sl, #4]
  4084fa:	f7ff fedb 	bl	4082b4 <__malloc_unlock>
  4084fe:	e751      	b.n	4083a4 <_realloc_r+0xe4>
  408500:	682b      	ldr	r3, [r5, #0]
  408502:	6003      	str	r3, [r0, #0]
  408504:	686b      	ldr	r3, [r5, #4]
  408506:	6043      	str	r3, [r0, #4]
  408508:	2a1b      	cmp	r2, #27
  40850a:	d82d      	bhi.n	408568 <_realloc_r+0x2a8>
  40850c:	f100 0308 	add.w	r3, r0, #8
  408510:	f105 0208 	add.w	r2, r5, #8
  408514:	e71b      	b.n	40834e <_realloc_r+0x8e>
  408516:	4632      	mov	r2, r6
  408518:	6829      	ldr	r1, [r5, #0]
  40851a:	6011      	str	r1, [r2, #0]
  40851c:	6869      	ldr	r1, [r5, #4]
  40851e:	6051      	str	r1, [r2, #4]
  408520:	68a9      	ldr	r1, [r5, #8]
  408522:	6091      	str	r1, [r2, #8]
  408524:	461c      	mov	r4, r3
  408526:	46d1      	mov	r9, sl
  408528:	e72a      	b.n	408380 <_realloc_r+0xc0>
  40852a:	eb09 0107 	add.w	r1, r9, r7
  40852e:	ebab 0b07 	sub.w	fp, fp, r7
  408532:	f04b 0201 	orr.w	r2, fp, #1
  408536:	6099      	str	r1, [r3, #8]
  408538:	604a      	str	r2, [r1, #4]
  40853a:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40853e:	f003 0301 	and.w	r3, r3, #1
  408542:	431f      	orrs	r7, r3
  408544:	4640      	mov	r0, r8
  408546:	f845 7c04 	str.w	r7, [r5, #-4]
  40854a:	f7ff feb3 	bl	4082b4 <__malloc_unlock>
  40854e:	462e      	mov	r6, r5
  408550:	e728      	b.n	4083a4 <_realloc_r+0xe4>
  408552:	4629      	mov	r1, r5
  408554:	f7ff fe44 	bl	4081e0 <memmove>
  408558:	e6ff      	b.n	40835a <_realloc_r+0x9a>
  40855a:	4629      	mov	r1, r5
  40855c:	4630      	mov	r0, r6
  40855e:	461c      	mov	r4, r3
  408560:	46d1      	mov	r9, sl
  408562:	f7ff fe3d 	bl	4081e0 <memmove>
  408566:	e70b      	b.n	408380 <_realloc_r+0xc0>
  408568:	68ab      	ldr	r3, [r5, #8]
  40856a:	6083      	str	r3, [r0, #8]
  40856c:	68eb      	ldr	r3, [r5, #12]
  40856e:	60c3      	str	r3, [r0, #12]
  408570:	2a24      	cmp	r2, #36	; 0x24
  408572:	d017      	beq.n	4085a4 <_realloc_r+0x2e4>
  408574:	f100 0310 	add.w	r3, r0, #16
  408578:	f105 0210 	add.w	r2, r5, #16
  40857c:	e6e7      	b.n	40834e <_realloc_r+0x8e>
  40857e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408582:	f023 0303 	bic.w	r3, r3, #3
  408586:	441c      	add	r4, r3
  408588:	462e      	mov	r6, r5
  40858a:	e6f9      	b.n	408380 <_realloc_r+0xc0>
  40858c:	68a9      	ldr	r1, [r5, #8]
  40858e:	f8ca 1010 	str.w	r1, [sl, #16]
  408592:	68e9      	ldr	r1, [r5, #12]
  408594:	f8ca 1014 	str.w	r1, [sl, #20]
  408598:	2a24      	cmp	r2, #36	; 0x24
  40859a:	d00c      	beq.n	4085b6 <_realloc_r+0x2f6>
  40859c:	3510      	adds	r5, #16
  40859e:	f10a 0218 	add.w	r2, sl, #24
  4085a2:	e7b9      	b.n	408518 <_realloc_r+0x258>
  4085a4:	692b      	ldr	r3, [r5, #16]
  4085a6:	6103      	str	r3, [r0, #16]
  4085a8:	696b      	ldr	r3, [r5, #20]
  4085aa:	6143      	str	r3, [r0, #20]
  4085ac:	f105 0218 	add.w	r2, r5, #24
  4085b0:	f100 0318 	add.w	r3, r0, #24
  4085b4:	e6cb      	b.n	40834e <_realloc_r+0x8e>
  4085b6:	692a      	ldr	r2, [r5, #16]
  4085b8:	f8ca 2018 	str.w	r2, [sl, #24]
  4085bc:	696a      	ldr	r2, [r5, #20]
  4085be:	f8ca 201c 	str.w	r2, [sl, #28]
  4085c2:	3518      	adds	r5, #24
  4085c4:	f10a 0220 	add.w	r2, sl, #32
  4085c8:	e7a6      	b.n	408518 <_realloc_r+0x258>
  4085ca:	4632      	mov	r2, r6
  4085cc:	e77f      	b.n	4084ce <_realloc_r+0x20e>
  4085ce:	4629      	mov	r1, r5
  4085d0:	4630      	mov	r0, r6
  4085d2:	9301      	str	r3, [sp, #4]
  4085d4:	f7ff fe04 	bl	4081e0 <memmove>
  4085d8:	9b01      	ldr	r3, [sp, #4]
  4085da:	e77e      	b.n	4084da <_realloc_r+0x21a>
  4085dc:	68a9      	ldr	r1, [r5, #8]
  4085de:	f8ca 1010 	str.w	r1, [sl, #16]
  4085e2:	68e9      	ldr	r1, [r5, #12]
  4085e4:	f8ca 1014 	str.w	r1, [sl, #20]
  4085e8:	2a24      	cmp	r2, #36	; 0x24
  4085ea:	d003      	beq.n	4085f4 <_realloc_r+0x334>
  4085ec:	3510      	adds	r5, #16
  4085ee:	f10a 0218 	add.w	r2, sl, #24
  4085f2:	e76c      	b.n	4084ce <_realloc_r+0x20e>
  4085f4:	692a      	ldr	r2, [r5, #16]
  4085f6:	f8ca 2018 	str.w	r2, [sl, #24]
  4085fa:	696a      	ldr	r2, [r5, #20]
  4085fc:	f8ca 201c 	str.w	r2, [sl, #28]
  408600:	3518      	adds	r5, #24
  408602:	f10a 0220 	add.w	r2, sl, #32
  408606:	e762      	b.n	4084ce <_realloc_r+0x20e>
  408608:	204005d8 	.word	0x204005d8

0040860c <_sbrk_r>:
  40860c:	b538      	push	{r3, r4, r5, lr}
  40860e:	4c07      	ldr	r4, [pc, #28]	; (40862c <_sbrk_r+0x20>)
  408610:	2300      	movs	r3, #0
  408612:	4605      	mov	r5, r0
  408614:	4608      	mov	r0, r1
  408616:	6023      	str	r3, [r4, #0]
  408618:	f7fc ff14 	bl	405444 <_sbrk>
  40861c:	1c43      	adds	r3, r0, #1
  40861e:	d000      	beq.n	408622 <_sbrk_r+0x16>
  408620:	bd38      	pop	{r3, r4, r5, pc}
  408622:	6823      	ldr	r3, [r4, #0]
  408624:	2b00      	cmp	r3, #0
  408626:	d0fb      	beq.n	408620 <_sbrk_r+0x14>
  408628:	602b      	str	r3, [r5, #0]
  40862a:	bd38      	pop	{r3, r4, r5, pc}
  40862c:	2040aff4 	.word	0x2040aff4

00408630 <__sread>:
  408630:	b510      	push	{r4, lr}
  408632:	460c      	mov	r4, r1
  408634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408638:	f000 f9f6 	bl	408a28 <_read_r>
  40863c:	2800      	cmp	r0, #0
  40863e:	db03      	blt.n	408648 <__sread+0x18>
  408640:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408642:	4403      	add	r3, r0
  408644:	6523      	str	r3, [r4, #80]	; 0x50
  408646:	bd10      	pop	{r4, pc}
  408648:	89a3      	ldrh	r3, [r4, #12]
  40864a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40864e:	81a3      	strh	r3, [r4, #12]
  408650:	bd10      	pop	{r4, pc}
  408652:	bf00      	nop

00408654 <__swrite>:
  408654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408658:	4616      	mov	r6, r2
  40865a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40865e:	461f      	mov	r7, r3
  408660:	05d3      	lsls	r3, r2, #23
  408662:	460c      	mov	r4, r1
  408664:	4605      	mov	r5, r0
  408666:	d507      	bpl.n	408678 <__swrite+0x24>
  408668:	2200      	movs	r2, #0
  40866a:	2302      	movs	r3, #2
  40866c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408670:	f000 f9c4 	bl	4089fc <_lseek_r>
  408674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40867c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408680:	81a2      	strh	r2, [r4, #12]
  408682:	463b      	mov	r3, r7
  408684:	4632      	mov	r2, r6
  408686:	4628      	mov	r0, r5
  408688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40868c:	f000 b8a4 	b.w	4087d8 <_write_r>

00408690 <__sseek>:
  408690:	b510      	push	{r4, lr}
  408692:	460c      	mov	r4, r1
  408694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408698:	f000 f9b0 	bl	4089fc <_lseek_r>
  40869c:	89a3      	ldrh	r3, [r4, #12]
  40869e:	1c42      	adds	r2, r0, #1
  4086a0:	bf0e      	itee	eq
  4086a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4086a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4086aa:	6520      	strne	r0, [r4, #80]	; 0x50
  4086ac:	81a3      	strh	r3, [r4, #12]
  4086ae:	bd10      	pop	{r4, pc}

004086b0 <__sclose>:
  4086b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4086b4:	f000 b908 	b.w	4088c8 <_close_r>

004086b8 <__swbuf_r>:
  4086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4086ba:	460d      	mov	r5, r1
  4086bc:	4614      	mov	r4, r2
  4086be:	4606      	mov	r6, r0
  4086c0:	b110      	cbz	r0, 4086c8 <__swbuf_r+0x10>
  4086c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4086c4:	2b00      	cmp	r3, #0
  4086c6:	d04b      	beq.n	408760 <__swbuf_r+0xa8>
  4086c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4086cc:	69a3      	ldr	r3, [r4, #24]
  4086ce:	60a3      	str	r3, [r4, #8]
  4086d0:	b291      	uxth	r1, r2
  4086d2:	0708      	lsls	r0, r1, #28
  4086d4:	d539      	bpl.n	40874a <__swbuf_r+0x92>
  4086d6:	6923      	ldr	r3, [r4, #16]
  4086d8:	2b00      	cmp	r3, #0
  4086da:	d036      	beq.n	40874a <__swbuf_r+0x92>
  4086dc:	b2ed      	uxtb	r5, r5
  4086de:	0489      	lsls	r1, r1, #18
  4086e0:	462f      	mov	r7, r5
  4086e2:	d515      	bpl.n	408710 <__swbuf_r+0x58>
  4086e4:	6822      	ldr	r2, [r4, #0]
  4086e6:	6961      	ldr	r1, [r4, #20]
  4086e8:	1ad3      	subs	r3, r2, r3
  4086ea:	428b      	cmp	r3, r1
  4086ec:	da1c      	bge.n	408728 <__swbuf_r+0x70>
  4086ee:	3301      	adds	r3, #1
  4086f0:	68a1      	ldr	r1, [r4, #8]
  4086f2:	1c50      	adds	r0, r2, #1
  4086f4:	3901      	subs	r1, #1
  4086f6:	60a1      	str	r1, [r4, #8]
  4086f8:	6020      	str	r0, [r4, #0]
  4086fa:	7015      	strb	r5, [r2, #0]
  4086fc:	6962      	ldr	r2, [r4, #20]
  4086fe:	429a      	cmp	r2, r3
  408700:	d01a      	beq.n	408738 <__swbuf_r+0x80>
  408702:	89a3      	ldrh	r3, [r4, #12]
  408704:	07db      	lsls	r3, r3, #31
  408706:	d501      	bpl.n	40870c <__swbuf_r+0x54>
  408708:	2d0a      	cmp	r5, #10
  40870a:	d015      	beq.n	408738 <__swbuf_r+0x80>
  40870c:	4638      	mov	r0, r7
  40870e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408710:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408712:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408716:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40871a:	81a2      	strh	r2, [r4, #12]
  40871c:	6822      	ldr	r2, [r4, #0]
  40871e:	6661      	str	r1, [r4, #100]	; 0x64
  408720:	6961      	ldr	r1, [r4, #20]
  408722:	1ad3      	subs	r3, r2, r3
  408724:	428b      	cmp	r3, r1
  408726:	dbe2      	blt.n	4086ee <__swbuf_r+0x36>
  408728:	4621      	mov	r1, r4
  40872a:	4630      	mov	r0, r6
  40872c:	f7fe fda6 	bl	40727c <_fflush_r>
  408730:	b940      	cbnz	r0, 408744 <__swbuf_r+0x8c>
  408732:	6822      	ldr	r2, [r4, #0]
  408734:	2301      	movs	r3, #1
  408736:	e7db      	b.n	4086f0 <__swbuf_r+0x38>
  408738:	4621      	mov	r1, r4
  40873a:	4630      	mov	r0, r6
  40873c:	f7fe fd9e 	bl	40727c <_fflush_r>
  408740:	2800      	cmp	r0, #0
  408742:	d0e3      	beq.n	40870c <__swbuf_r+0x54>
  408744:	f04f 37ff 	mov.w	r7, #4294967295
  408748:	e7e0      	b.n	40870c <__swbuf_r+0x54>
  40874a:	4621      	mov	r1, r4
  40874c:	4630      	mov	r0, r6
  40874e:	f7fe fc81 	bl	407054 <__swsetup_r>
  408752:	2800      	cmp	r0, #0
  408754:	d1f6      	bne.n	408744 <__swbuf_r+0x8c>
  408756:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40875a:	6923      	ldr	r3, [r4, #16]
  40875c:	b291      	uxth	r1, r2
  40875e:	e7bd      	b.n	4086dc <__swbuf_r+0x24>
  408760:	f7fe fde4 	bl	40732c <__sinit>
  408764:	e7b0      	b.n	4086c8 <__swbuf_r+0x10>
  408766:	bf00      	nop

00408768 <_wcrtomb_r>:
  408768:	b5f0      	push	{r4, r5, r6, r7, lr}
  40876a:	4606      	mov	r6, r0
  40876c:	b085      	sub	sp, #20
  40876e:	461f      	mov	r7, r3
  408770:	b189      	cbz	r1, 408796 <_wcrtomb_r+0x2e>
  408772:	4c10      	ldr	r4, [pc, #64]	; (4087b4 <_wcrtomb_r+0x4c>)
  408774:	4d10      	ldr	r5, [pc, #64]	; (4087b8 <_wcrtomb_r+0x50>)
  408776:	6824      	ldr	r4, [r4, #0]
  408778:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40877a:	2c00      	cmp	r4, #0
  40877c:	bf08      	it	eq
  40877e:	462c      	moveq	r4, r5
  408780:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408784:	47a0      	blx	r4
  408786:	1c43      	adds	r3, r0, #1
  408788:	d103      	bne.n	408792 <_wcrtomb_r+0x2a>
  40878a:	2200      	movs	r2, #0
  40878c:	238a      	movs	r3, #138	; 0x8a
  40878e:	603a      	str	r2, [r7, #0]
  408790:	6033      	str	r3, [r6, #0]
  408792:	b005      	add	sp, #20
  408794:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408796:	460c      	mov	r4, r1
  408798:	4906      	ldr	r1, [pc, #24]	; (4087b4 <_wcrtomb_r+0x4c>)
  40879a:	4a07      	ldr	r2, [pc, #28]	; (4087b8 <_wcrtomb_r+0x50>)
  40879c:	6809      	ldr	r1, [r1, #0]
  40879e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  4087a0:	2900      	cmp	r1, #0
  4087a2:	bf08      	it	eq
  4087a4:	4611      	moveq	r1, r2
  4087a6:	4622      	mov	r2, r4
  4087a8:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4087ac:	a901      	add	r1, sp, #4
  4087ae:	47a0      	blx	r4
  4087b0:	e7e9      	b.n	408786 <_wcrtomb_r+0x1e>
  4087b2:	bf00      	nop
  4087b4:	2040003c 	.word	0x2040003c
  4087b8:	2040046c 	.word	0x2040046c

004087bc <__ascii_wctomb>:
  4087bc:	b121      	cbz	r1, 4087c8 <__ascii_wctomb+0xc>
  4087be:	2aff      	cmp	r2, #255	; 0xff
  4087c0:	d804      	bhi.n	4087cc <__ascii_wctomb+0x10>
  4087c2:	700a      	strb	r2, [r1, #0]
  4087c4:	2001      	movs	r0, #1
  4087c6:	4770      	bx	lr
  4087c8:	4608      	mov	r0, r1
  4087ca:	4770      	bx	lr
  4087cc:	238a      	movs	r3, #138	; 0x8a
  4087ce:	6003      	str	r3, [r0, #0]
  4087d0:	f04f 30ff 	mov.w	r0, #4294967295
  4087d4:	4770      	bx	lr
  4087d6:	bf00      	nop

004087d8 <_write_r>:
  4087d8:	b570      	push	{r4, r5, r6, lr}
  4087da:	460d      	mov	r5, r1
  4087dc:	4c08      	ldr	r4, [pc, #32]	; (408800 <_write_r+0x28>)
  4087de:	4611      	mov	r1, r2
  4087e0:	4606      	mov	r6, r0
  4087e2:	461a      	mov	r2, r3
  4087e4:	4628      	mov	r0, r5
  4087e6:	2300      	movs	r3, #0
  4087e8:	6023      	str	r3, [r4, #0]
  4087ea:	f7fb f9a9 	bl	403b40 <_write>
  4087ee:	1c43      	adds	r3, r0, #1
  4087f0:	d000      	beq.n	4087f4 <_write_r+0x1c>
  4087f2:	bd70      	pop	{r4, r5, r6, pc}
  4087f4:	6823      	ldr	r3, [r4, #0]
  4087f6:	2b00      	cmp	r3, #0
  4087f8:	d0fb      	beq.n	4087f2 <_write_r+0x1a>
  4087fa:	6033      	str	r3, [r6, #0]
  4087fc:	bd70      	pop	{r4, r5, r6, pc}
  4087fe:	bf00      	nop
  408800:	2040aff4 	.word	0x2040aff4

00408804 <__register_exitproc>:
  408804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408808:	4d2c      	ldr	r5, [pc, #176]	; (4088bc <__register_exitproc+0xb8>)
  40880a:	4606      	mov	r6, r0
  40880c:	6828      	ldr	r0, [r5, #0]
  40880e:	4698      	mov	r8, r3
  408810:	460f      	mov	r7, r1
  408812:	4691      	mov	r9, r2
  408814:	f7ff f94a 	bl	407aac <__retarget_lock_acquire_recursive>
  408818:	4b29      	ldr	r3, [pc, #164]	; (4088c0 <__register_exitproc+0xbc>)
  40881a:	681c      	ldr	r4, [r3, #0]
  40881c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408820:	2b00      	cmp	r3, #0
  408822:	d03e      	beq.n	4088a2 <__register_exitproc+0x9e>
  408824:	685a      	ldr	r2, [r3, #4]
  408826:	2a1f      	cmp	r2, #31
  408828:	dc1c      	bgt.n	408864 <__register_exitproc+0x60>
  40882a:	f102 0e01 	add.w	lr, r2, #1
  40882e:	b176      	cbz	r6, 40884e <__register_exitproc+0x4a>
  408830:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408834:	2401      	movs	r4, #1
  408836:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40883a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40883e:	4094      	lsls	r4, r2
  408840:	4320      	orrs	r0, r4
  408842:	2e02      	cmp	r6, #2
  408844:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408848:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40884c:	d023      	beq.n	408896 <__register_exitproc+0x92>
  40884e:	3202      	adds	r2, #2
  408850:	f8c3 e004 	str.w	lr, [r3, #4]
  408854:	6828      	ldr	r0, [r5, #0]
  408856:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40885a:	f7ff f929 	bl	407ab0 <__retarget_lock_release_recursive>
  40885e:	2000      	movs	r0, #0
  408860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408864:	4b17      	ldr	r3, [pc, #92]	; (4088c4 <__register_exitproc+0xc0>)
  408866:	b30b      	cbz	r3, 4088ac <__register_exitproc+0xa8>
  408868:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40886c:	f7ff f99a 	bl	407ba4 <malloc>
  408870:	4603      	mov	r3, r0
  408872:	b1d8      	cbz	r0, 4088ac <__register_exitproc+0xa8>
  408874:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408878:	6002      	str	r2, [r0, #0]
  40887a:	2100      	movs	r1, #0
  40887c:	6041      	str	r1, [r0, #4]
  40887e:	460a      	mov	r2, r1
  408880:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408884:	f04f 0e01 	mov.w	lr, #1
  408888:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40888c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408890:	2e00      	cmp	r6, #0
  408892:	d0dc      	beq.n	40884e <__register_exitproc+0x4a>
  408894:	e7cc      	b.n	408830 <__register_exitproc+0x2c>
  408896:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40889a:	430c      	orrs	r4, r1
  40889c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4088a0:	e7d5      	b.n	40884e <__register_exitproc+0x4a>
  4088a2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4088a6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4088aa:	e7bb      	b.n	408824 <__register_exitproc+0x20>
  4088ac:	6828      	ldr	r0, [r5, #0]
  4088ae:	f7ff f8ff 	bl	407ab0 <__retarget_lock_release_recursive>
  4088b2:	f04f 30ff 	mov.w	r0, #4294967295
  4088b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4088ba:	bf00      	nop
  4088bc:	20400468 	.word	0x20400468
  4088c0:	00408eb0 	.word	0x00408eb0
  4088c4:	00407ba5 	.word	0x00407ba5

004088c8 <_close_r>:
  4088c8:	b538      	push	{r3, r4, r5, lr}
  4088ca:	4c07      	ldr	r4, [pc, #28]	; (4088e8 <_close_r+0x20>)
  4088cc:	2300      	movs	r3, #0
  4088ce:	4605      	mov	r5, r0
  4088d0:	4608      	mov	r0, r1
  4088d2:	6023      	str	r3, [r4, #0]
  4088d4:	f7fc fde2 	bl	40549c <_close>
  4088d8:	1c43      	adds	r3, r0, #1
  4088da:	d000      	beq.n	4088de <_close_r+0x16>
  4088dc:	bd38      	pop	{r3, r4, r5, pc}
  4088de:	6823      	ldr	r3, [r4, #0]
  4088e0:	2b00      	cmp	r3, #0
  4088e2:	d0fb      	beq.n	4088dc <_close_r+0x14>
  4088e4:	602b      	str	r3, [r5, #0]
  4088e6:	bd38      	pop	{r3, r4, r5, pc}
  4088e8:	2040aff4 	.word	0x2040aff4

004088ec <_fclose_r>:
  4088ec:	b570      	push	{r4, r5, r6, lr}
  4088ee:	b159      	cbz	r1, 408908 <_fclose_r+0x1c>
  4088f0:	4605      	mov	r5, r0
  4088f2:	460c      	mov	r4, r1
  4088f4:	b110      	cbz	r0, 4088fc <_fclose_r+0x10>
  4088f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4088f8:	2b00      	cmp	r3, #0
  4088fa:	d03c      	beq.n	408976 <_fclose_r+0x8a>
  4088fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4088fe:	07d8      	lsls	r0, r3, #31
  408900:	d505      	bpl.n	40890e <_fclose_r+0x22>
  408902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408906:	b92b      	cbnz	r3, 408914 <_fclose_r+0x28>
  408908:	2600      	movs	r6, #0
  40890a:	4630      	mov	r0, r6
  40890c:	bd70      	pop	{r4, r5, r6, pc}
  40890e:	89a3      	ldrh	r3, [r4, #12]
  408910:	0599      	lsls	r1, r3, #22
  408912:	d53c      	bpl.n	40898e <_fclose_r+0xa2>
  408914:	4621      	mov	r1, r4
  408916:	4628      	mov	r0, r5
  408918:	f7fe fc10 	bl	40713c <__sflush_r>
  40891c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40891e:	4606      	mov	r6, r0
  408920:	b133      	cbz	r3, 408930 <_fclose_r+0x44>
  408922:	69e1      	ldr	r1, [r4, #28]
  408924:	4628      	mov	r0, r5
  408926:	4798      	blx	r3
  408928:	2800      	cmp	r0, #0
  40892a:	bfb8      	it	lt
  40892c:	f04f 36ff 	movlt.w	r6, #4294967295
  408930:	89a3      	ldrh	r3, [r4, #12]
  408932:	061a      	lsls	r2, r3, #24
  408934:	d422      	bmi.n	40897c <_fclose_r+0x90>
  408936:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408938:	b141      	cbz	r1, 40894c <_fclose_r+0x60>
  40893a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40893e:	4299      	cmp	r1, r3
  408940:	d002      	beq.n	408948 <_fclose_r+0x5c>
  408942:	4628      	mov	r0, r5
  408944:	f7fe fe18 	bl	407578 <_free_r>
  408948:	2300      	movs	r3, #0
  40894a:	6323      	str	r3, [r4, #48]	; 0x30
  40894c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40894e:	b121      	cbz	r1, 40895a <_fclose_r+0x6e>
  408950:	4628      	mov	r0, r5
  408952:	f7fe fe11 	bl	407578 <_free_r>
  408956:	2300      	movs	r3, #0
  408958:	6463      	str	r3, [r4, #68]	; 0x44
  40895a:	f7fe fd13 	bl	407384 <__sfp_lock_acquire>
  40895e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408960:	2200      	movs	r2, #0
  408962:	07db      	lsls	r3, r3, #31
  408964:	81a2      	strh	r2, [r4, #12]
  408966:	d50e      	bpl.n	408986 <_fclose_r+0x9a>
  408968:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40896a:	f7ff f89d 	bl	407aa8 <__retarget_lock_close_recursive>
  40896e:	f7fe fd0f 	bl	407390 <__sfp_lock_release>
  408972:	4630      	mov	r0, r6
  408974:	bd70      	pop	{r4, r5, r6, pc}
  408976:	f7fe fcd9 	bl	40732c <__sinit>
  40897a:	e7bf      	b.n	4088fc <_fclose_r+0x10>
  40897c:	6921      	ldr	r1, [r4, #16]
  40897e:	4628      	mov	r0, r5
  408980:	f7fe fdfa 	bl	407578 <_free_r>
  408984:	e7d7      	b.n	408936 <_fclose_r+0x4a>
  408986:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408988:	f7ff f892 	bl	407ab0 <__retarget_lock_release_recursive>
  40898c:	e7ec      	b.n	408968 <_fclose_r+0x7c>
  40898e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408990:	f7ff f88c 	bl	407aac <__retarget_lock_acquire_recursive>
  408994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408998:	2b00      	cmp	r3, #0
  40899a:	d1bb      	bne.n	408914 <_fclose_r+0x28>
  40899c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40899e:	f016 0601 	ands.w	r6, r6, #1
  4089a2:	d1b1      	bne.n	408908 <_fclose_r+0x1c>
  4089a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4089a6:	f7ff f883 	bl	407ab0 <__retarget_lock_release_recursive>
  4089aa:	4630      	mov	r0, r6
  4089ac:	bd70      	pop	{r4, r5, r6, pc}
  4089ae:	bf00      	nop

004089b0 <_fstat_r>:
  4089b0:	b538      	push	{r3, r4, r5, lr}
  4089b2:	460b      	mov	r3, r1
  4089b4:	4c07      	ldr	r4, [pc, #28]	; (4089d4 <_fstat_r+0x24>)
  4089b6:	4605      	mov	r5, r0
  4089b8:	4611      	mov	r1, r2
  4089ba:	4618      	mov	r0, r3
  4089bc:	2300      	movs	r3, #0
  4089be:	6023      	str	r3, [r4, #0]
  4089c0:	f7fc fd78 	bl	4054b4 <_fstat>
  4089c4:	1c43      	adds	r3, r0, #1
  4089c6:	d000      	beq.n	4089ca <_fstat_r+0x1a>
  4089c8:	bd38      	pop	{r3, r4, r5, pc}
  4089ca:	6823      	ldr	r3, [r4, #0]
  4089cc:	2b00      	cmp	r3, #0
  4089ce:	d0fb      	beq.n	4089c8 <_fstat_r+0x18>
  4089d0:	602b      	str	r3, [r5, #0]
  4089d2:	bd38      	pop	{r3, r4, r5, pc}
  4089d4:	2040aff4 	.word	0x2040aff4

004089d8 <_isatty_r>:
  4089d8:	b538      	push	{r3, r4, r5, lr}
  4089da:	4c07      	ldr	r4, [pc, #28]	; (4089f8 <_isatty_r+0x20>)
  4089dc:	2300      	movs	r3, #0
  4089de:	4605      	mov	r5, r0
  4089e0:	4608      	mov	r0, r1
  4089e2:	6023      	str	r3, [r4, #0]
  4089e4:	f7fc fd76 	bl	4054d4 <_isatty>
  4089e8:	1c43      	adds	r3, r0, #1
  4089ea:	d000      	beq.n	4089ee <_isatty_r+0x16>
  4089ec:	bd38      	pop	{r3, r4, r5, pc}
  4089ee:	6823      	ldr	r3, [r4, #0]
  4089f0:	2b00      	cmp	r3, #0
  4089f2:	d0fb      	beq.n	4089ec <_isatty_r+0x14>
  4089f4:	602b      	str	r3, [r5, #0]
  4089f6:	bd38      	pop	{r3, r4, r5, pc}
  4089f8:	2040aff4 	.word	0x2040aff4

004089fc <_lseek_r>:
  4089fc:	b570      	push	{r4, r5, r6, lr}
  4089fe:	460d      	mov	r5, r1
  408a00:	4c08      	ldr	r4, [pc, #32]	; (408a24 <_lseek_r+0x28>)
  408a02:	4611      	mov	r1, r2
  408a04:	4606      	mov	r6, r0
  408a06:	461a      	mov	r2, r3
  408a08:	4628      	mov	r0, r5
  408a0a:	2300      	movs	r3, #0
  408a0c:	6023      	str	r3, [r4, #0]
  408a0e:	f7fc fd6c 	bl	4054ea <_lseek>
  408a12:	1c43      	adds	r3, r0, #1
  408a14:	d000      	beq.n	408a18 <_lseek_r+0x1c>
  408a16:	bd70      	pop	{r4, r5, r6, pc}
  408a18:	6823      	ldr	r3, [r4, #0]
  408a1a:	2b00      	cmp	r3, #0
  408a1c:	d0fb      	beq.n	408a16 <_lseek_r+0x1a>
  408a1e:	6033      	str	r3, [r6, #0]
  408a20:	bd70      	pop	{r4, r5, r6, pc}
  408a22:	bf00      	nop
  408a24:	2040aff4 	.word	0x2040aff4

00408a28 <_read_r>:
  408a28:	b570      	push	{r4, r5, r6, lr}
  408a2a:	460d      	mov	r5, r1
  408a2c:	4c08      	ldr	r4, [pc, #32]	; (408a50 <_read_r+0x28>)
  408a2e:	4611      	mov	r1, r2
  408a30:	4606      	mov	r6, r0
  408a32:	461a      	mov	r2, r3
  408a34:	4628      	mov	r0, r5
  408a36:	2300      	movs	r3, #0
  408a38:	6023      	str	r3, [r4, #0]
  408a3a:	f7fb f857 	bl	403aec <_read>
  408a3e:	1c43      	adds	r3, r0, #1
  408a40:	d000      	beq.n	408a44 <_read_r+0x1c>
  408a42:	bd70      	pop	{r4, r5, r6, pc}
  408a44:	6823      	ldr	r3, [r4, #0]
  408a46:	2b00      	cmp	r3, #0
  408a48:	d0fb      	beq.n	408a42 <_read_r+0x1a>
  408a4a:	6033      	str	r3, [r6, #0]
  408a4c:	bd70      	pop	{r4, r5, r6, pc}
  408a4e:	bf00      	nop
  408a50:	2040aff4 	.word	0x2040aff4

00408a54 <__aeabi_uldivmod>:
  408a54:	b953      	cbnz	r3, 408a6c <__aeabi_uldivmod+0x18>
  408a56:	b94a      	cbnz	r2, 408a6c <__aeabi_uldivmod+0x18>
  408a58:	2900      	cmp	r1, #0
  408a5a:	bf08      	it	eq
  408a5c:	2800      	cmpeq	r0, #0
  408a5e:	bf1c      	itt	ne
  408a60:	f04f 31ff 	movne.w	r1, #4294967295
  408a64:	f04f 30ff 	movne.w	r0, #4294967295
  408a68:	f000 b97a 	b.w	408d60 <__aeabi_idiv0>
  408a6c:	f1ad 0c08 	sub.w	ip, sp, #8
  408a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408a74:	f000 f806 	bl	408a84 <__udivmoddi4>
  408a78:	f8dd e004 	ldr.w	lr, [sp, #4]
  408a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408a80:	b004      	add	sp, #16
  408a82:	4770      	bx	lr

00408a84 <__udivmoddi4>:
  408a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408a88:	468c      	mov	ip, r1
  408a8a:	460d      	mov	r5, r1
  408a8c:	4604      	mov	r4, r0
  408a8e:	9e08      	ldr	r6, [sp, #32]
  408a90:	2b00      	cmp	r3, #0
  408a92:	d151      	bne.n	408b38 <__udivmoddi4+0xb4>
  408a94:	428a      	cmp	r2, r1
  408a96:	4617      	mov	r7, r2
  408a98:	d96d      	bls.n	408b76 <__udivmoddi4+0xf2>
  408a9a:	fab2 fe82 	clz	lr, r2
  408a9e:	f1be 0f00 	cmp.w	lr, #0
  408aa2:	d00b      	beq.n	408abc <__udivmoddi4+0x38>
  408aa4:	f1ce 0c20 	rsb	ip, lr, #32
  408aa8:	fa01 f50e 	lsl.w	r5, r1, lr
  408aac:	fa20 fc0c 	lsr.w	ip, r0, ip
  408ab0:	fa02 f70e 	lsl.w	r7, r2, lr
  408ab4:	ea4c 0c05 	orr.w	ip, ip, r5
  408ab8:	fa00 f40e 	lsl.w	r4, r0, lr
  408abc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408ac0:	0c25      	lsrs	r5, r4, #16
  408ac2:	fbbc f8fa 	udiv	r8, ip, sl
  408ac6:	fa1f f987 	uxth.w	r9, r7
  408aca:	fb0a cc18 	mls	ip, sl, r8, ip
  408ace:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408ad2:	fb08 f309 	mul.w	r3, r8, r9
  408ad6:	42ab      	cmp	r3, r5
  408ad8:	d90a      	bls.n	408af0 <__udivmoddi4+0x6c>
  408ada:	19ed      	adds	r5, r5, r7
  408adc:	f108 32ff 	add.w	r2, r8, #4294967295
  408ae0:	f080 8123 	bcs.w	408d2a <__udivmoddi4+0x2a6>
  408ae4:	42ab      	cmp	r3, r5
  408ae6:	f240 8120 	bls.w	408d2a <__udivmoddi4+0x2a6>
  408aea:	f1a8 0802 	sub.w	r8, r8, #2
  408aee:	443d      	add	r5, r7
  408af0:	1aed      	subs	r5, r5, r3
  408af2:	b2a4      	uxth	r4, r4
  408af4:	fbb5 f0fa 	udiv	r0, r5, sl
  408af8:	fb0a 5510 	mls	r5, sl, r0, r5
  408afc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408b00:	fb00 f909 	mul.w	r9, r0, r9
  408b04:	45a1      	cmp	r9, r4
  408b06:	d909      	bls.n	408b1c <__udivmoddi4+0x98>
  408b08:	19e4      	adds	r4, r4, r7
  408b0a:	f100 33ff 	add.w	r3, r0, #4294967295
  408b0e:	f080 810a 	bcs.w	408d26 <__udivmoddi4+0x2a2>
  408b12:	45a1      	cmp	r9, r4
  408b14:	f240 8107 	bls.w	408d26 <__udivmoddi4+0x2a2>
  408b18:	3802      	subs	r0, #2
  408b1a:	443c      	add	r4, r7
  408b1c:	eba4 0409 	sub.w	r4, r4, r9
  408b20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408b24:	2100      	movs	r1, #0
  408b26:	2e00      	cmp	r6, #0
  408b28:	d061      	beq.n	408bee <__udivmoddi4+0x16a>
  408b2a:	fa24 f40e 	lsr.w	r4, r4, lr
  408b2e:	2300      	movs	r3, #0
  408b30:	6034      	str	r4, [r6, #0]
  408b32:	6073      	str	r3, [r6, #4]
  408b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b38:	428b      	cmp	r3, r1
  408b3a:	d907      	bls.n	408b4c <__udivmoddi4+0xc8>
  408b3c:	2e00      	cmp	r6, #0
  408b3e:	d054      	beq.n	408bea <__udivmoddi4+0x166>
  408b40:	2100      	movs	r1, #0
  408b42:	e886 0021 	stmia.w	r6, {r0, r5}
  408b46:	4608      	mov	r0, r1
  408b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b4c:	fab3 f183 	clz	r1, r3
  408b50:	2900      	cmp	r1, #0
  408b52:	f040 808e 	bne.w	408c72 <__udivmoddi4+0x1ee>
  408b56:	42ab      	cmp	r3, r5
  408b58:	d302      	bcc.n	408b60 <__udivmoddi4+0xdc>
  408b5a:	4282      	cmp	r2, r0
  408b5c:	f200 80fa 	bhi.w	408d54 <__udivmoddi4+0x2d0>
  408b60:	1a84      	subs	r4, r0, r2
  408b62:	eb65 0503 	sbc.w	r5, r5, r3
  408b66:	2001      	movs	r0, #1
  408b68:	46ac      	mov	ip, r5
  408b6a:	2e00      	cmp	r6, #0
  408b6c:	d03f      	beq.n	408bee <__udivmoddi4+0x16a>
  408b6e:	e886 1010 	stmia.w	r6, {r4, ip}
  408b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b76:	b912      	cbnz	r2, 408b7e <__udivmoddi4+0xfa>
  408b78:	2701      	movs	r7, #1
  408b7a:	fbb7 f7f2 	udiv	r7, r7, r2
  408b7e:	fab7 fe87 	clz	lr, r7
  408b82:	f1be 0f00 	cmp.w	lr, #0
  408b86:	d134      	bne.n	408bf2 <__udivmoddi4+0x16e>
  408b88:	1beb      	subs	r3, r5, r7
  408b8a:	0c3a      	lsrs	r2, r7, #16
  408b8c:	fa1f fc87 	uxth.w	ip, r7
  408b90:	2101      	movs	r1, #1
  408b92:	fbb3 f8f2 	udiv	r8, r3, r2
  408b96:	0c25      	lsrs	r5, r4, #16
  408b98:	fb02 3318 	mls	r3, r2, r8, r3
  408b9c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408ba0:	fb0c f308 	mul.w	r3, ip, r8
  408ba4:	42ab      	cmp	r3, r5
  408ba6:	d907      	bls.n	408bb8 <__udivmoddi4+0x134>
  408ba8:	19ed      	adds	r5, r5, r7
  408baa:	f108 30ff 	add.w	r0, r8, #4294967295
  408bae:	d202      	bcs.n	408bb6 <__udivmoddi4+0x132>
  408bb0:	42ab      	cmp	r3, r5
  408bb2:	f200 80d1 	bhi.w	408d58 <__udivmoddi4+0x2d4>
  408bb6:	4680      	mov	r8, r0
  408bb8:	1aed      	subs	r5, r5, r3
  408bba:	b2a3      	uxth	r3, r4
  408bbc:	fbb5 f0f2 	udiv	r0, r5, r2
  408bc0:	fb02 5510 	mls	r5, r2, r0, r5
  408bc4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408bc8:	fb0c fc00 	mul.w	ip, ip, r0
  408bcc:	45a4      	cmp	ip, r4
  408bce:	d907      	bls.n	408be0 <__udivmoddi4+0x15c>
  408bd0:	19e4      	adds	r4, r4, r7
  408bd2:	f100 33ff 	add.w	r3, r0, #4294967295
  408bd6:	d202      	bcs.n	408bde <__udivmoddi4+0x15a>
  408bd8:	45a4      	cmp	ip, r4
  408bda:	f200 80b8 	bhi.w	408d4e <__udivmoddi4+0x2ca>
  408bde:	4618      	mov	r0, r3
  408be0:	eba4 040c 	sub.w	r4, r4, ip
  408be4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408be8:	e79d      	b.n	408b26 <__udivmoddi4+0xa2>
  408bea:	4631      	mov	r1, r6
  408bec:	4630      	mov	r0, r6
  408bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408bf2:	f1ce 0420 	rsb	r4, lr, #32
  408bf6:	fa05 f30e 	lsl.w	r3, r5, lr
  408bfa:	fa07 f70e 	lsl.w	r7, r7, lr
  408bfe:	fa20 f804 	lsr.w	r8, r0, r4
  408c02:	0c3a      	lsrs	r2, r7, #16
  408c04:	fa25 f404 	lsr.w	r4, r5, r4
  408c08:	ea48 0803 	orr.w	r8, r8, r3
  408c0c:	fbb4 f1f2 	udiv	r1, r4, r2
  408c10:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408c14:	fb02 4411 	mls	r4, r2, r1, r4
  408c18:	fa1f fc87 	uxth.w	ip, r7
  408c1c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408c20:	fb01 f30c 	mul.w	r3, r1, ip
  408c24:	42ab      	cmp	r3, r5
  408c26:	fa00 f40e 	lsl.w	r4, r0, lr
  408c2a:	d909      	bls.n	408c40 <__udivmoddi4+0x1bc>
  408c2c:	19ed      	adds	r5, r5, r7
  408c2e:	f101 30ff 	add.w	r0, r1, #4294967295
  408c32:	f080 808a 	bcs.w	408d4a <__udivmoddi4+0x2c6>
  408c36:	42ab      	cmp	r3, r5
  408c38:	f240 8087 	bls.w	408d4a <__udivmoddi4+0x2c6>
  408c3c:	3902      	subs	r1, #2
  408c3e:	443d      	add	r5, r7
  408c40:	1aeb      	subs	r3, r5, r3
  408c42:	fa1f f588 	uxth.w	r5, r8
  408c46:	fbb3 f0f2 	udiv	r0, r3, r2
  408c4a:	fb02 3310 	mls	r3, r2, r0, r3
  408c4e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408c52:	fb00 f30c 	mul.w	r3, r0, ip
  408c56:	42ab      	cmp	r3, r5
  408c58:	d907      	bls.n	408c6a <__udivmoddi4+0x1e6>
  408c5a:	19ed      	adds	r5, r5, r7
  408c5c:	f100 38ff 	add.w	r8, r0, #4294967295
  408c60:	d26f      	bcs.n	408d42 <__udivmoddi4+0x2be>
  408c62:	42ab      	cmp	r3, r5
  408c64:	d96d      	bls.n	408d42 <__udivmoddi4+0x2be>
  408c66:	3802      	subs	r0, #2
  408c68:	443d      	add	r5, r7
  408c6a:	1aeb      	subs	r3, r5, r3
  408c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408c70:	e78f      	b.n	408b92 <__udivmoddi4+0x10e>
  408c72:	f1c1 0720 	rsb	r7, r1, #32
  408c76:	fa22 f807 	lsr.w	r8, r2, r7
  408c7a:	408b      	lsls	r3, r1
  408c7c:	fa05 f401 	lsl.w	r4, r5, r1
  408c80:	ea48 0303 	orr.w	r3, r8, r3
  408c84:	fa20 fe07 	lsr.w	lr, r0, r7
  408c88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408c8c:	40fd      	lsrs	r5, r7
  408c8e:	ea4e 0e04 	orr.w	lr, lr, r4
  408c92:	fbb5 f9fc 	udiv	r9, r5, ip
  408c96:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408c9a:	fb0c 5519 	mls	r5, ip, r9, r5
  408c9e:	fa1f f883 	uxth.w	r8, r3
  408ca2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408ca6:	fb09 f408 	mul.w	r4, r9, r8
  408caa:	42ac      	cmp	r4, r5
  408cac:	fa02 f201 	lsl.w	r2, r2, r1
  408cb0:	fa00 fa01 	lsl.w	sl, r0, r1
  408cb4:	d908      	bls.n	408cc8 <__udivmoddi4+0x244>
  408cb6:	18ed      	adds	r5, r5, r3
  408cb8:	f109 30ff 	add.w	r0, r9, #4294967295
  408cbc:	d243      	bcs.n	408d46 <__udivmoddi4+0x2c2>
  408cbe:	42ac      	cmp	r4, r5
  408cc0:	d941      	bls.n	408d46 <__udivmoddi4+0x2c2>
  408cc2:	f1a9 0902 	sub.w	r9, r9, #2
  408cc6:	441d      	add	r5, r3
  408cc8:	1b2d      	subs	r5, r5, r4
  408cca:	fa1f fe8e 	uxth.w	lr, lr
  408cce:	fbb5 f0fc 	udiv	r0, r5, ip
  408cd2:	fb0c 5510 	mls	r5, ip, r0, r5
  408cd6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  408cda:	fb00 f808 	mul.w	r8, r0, r8
  408cde:	45a0      	cmp	r8, r4
  408ce0:	d907      	bls.n	408cf2 <__udivmoddi4+0x26e>
  408ce2:	18e4      	adds	r4, r4, r3
  408ce4:	f100 35ff 	add.w	r5, r0, #4294967295
  408ce8:	d229      	bcs.n	408d3e <__udivmoddi4+0x2ba>
  408cea:	45a0      	cmp	r8, r4
  408cec:	d927      	bls.n	408d3e <__udivmoddi4+0x2ba>
  408cee:	3802      	subs	r0, #2
  408cf0:	441c      	add	r4, r3
  408cf2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408cf6:	eba4 0408 	sub.w	r4, r4, r8
  408cfa:	fba0 8902 	umull	r8, r9, r0, r2
  408cfe:	454c      	cmp	r4, r9
  408d00:	46c6      	mov	lr, r8
  408d02:	464d      	mov	r5, r9
  408d04:	d315      	bcc.n	408d32 <__udivmoddi4+0x2ae>
  408d06:	d012      	beq.n	408d2e <__udivmoddi4+0x2aa>
  408d08:	b156      	cbz	r6, 408d20 <__udivmoddi4+0x29c>
  408d0a:	ebba 030e 	subs.w	r3, sl, lr
  408d0e:	eb64 0405 	sbc.w	r4, r4, r5
  408d12:	fa04 f707 	lsl.w	r7, r4, r7
  408d16:	40cb      	lsrs	r3, r1
  408d18:	431f      	orrs	r7, r3
  408d1a:	40cc      	lsrs	r4, r1
  408d1c:	6037      	str	r7, [r6, #0]
  408d1e:	6074      	str	r4, [r6, #4]
  408d20:	2100      	movs	r1, #0
  408d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d26:	4618      	mov	r0, r3
  408d28:	e6f8      	b.n	408b1c <__udivmoddi4+0x98>
  408d2a:	4690      	mov	r8, r2
  408d2c:	e6e0      	b.n	408af0 <__udivmoddi4+0x6c>
  408d2e:	45c2      	cmp	sl, r8
  408d30:	d2ea      	bcs.n	408d08 <__udivmoddi4+0x284>
  408d32:	ebb8 0e02 	subs.w	lr, r8, r2
  408d36:	eb69 0503 	sbc.w	r5, r9, r3
  408d3a:	3801      	subs	r0, #1
  408d3c:	e7e4      	b.n	408d08 <__udivmoddi4+0x284>
  408d3e:	4628      	mov	r0, r5
  408d40:	e7d7      	b.n	408cf2 <__udivmoddi4+0x26e>
  408d42:	4640      	mov	r0, r8
  408d44:	e791      	b.n	408c6a <__udivmoddi4+0x1e6>
  408d46:	4681      	mov	r9, r0
  408d48:	e7be      	b.n	408cc8 <__udivmoddi4+0x244>
  408d4a:	4601      	mov	r1, r0
  408d4c:	e778      	b.n	408c40 <__udivmoddi4+0x1bc>
  408d4e:	3802      	subs	r0, #2
  408d50:	443c      	add	r4, r7
  408d52:	e745      	b.n	408be0 <__udivmoddi4+0x15c>
  408d54:	4608      	mov	r0, r1
  408d56:	e708      	b.n	408b6a <__udivmoddi4+0xe6>
  408d58:	f1a8 0802 	sub.w	r8, r8, #2
  408d5c:	443d      	add	r5, r7
  408d5e:	e72b      	b.n	408bb8 <__udivmoddi4+0x134>

00408d60 <__aeabi_idiv0>:
  408d60:	4770      	bx	lr
  408d62:	bf00      	nop
  408d64:	454c4449 	.word	0x454c4449
  408d68:	00000000 	.word	0x00000000
  408d6c:	00000a0d 	.word	0x00000a0d
  408d70:	09097325 	.word	0x09097325
  408d74:	25096325 	.word	0x25096325
  408d78:	75250975 	.word	0x75250975
  408d7c:	0d752509 	.word	0x0d752509
  408d80:	0000000a 	.word	0x0000000a
  408d84:	20726d54 	.word	0x20726d54
  408d88:	00637653 	.word	0x00637653
  408d8c:	63617473 	.word	0x63617473
  408d90:	766f206b 	.word	0x766f206b
  408d94:	6c667265 	.word	0x6c667265
  408d98:	2520776f 	.word	0x2520776f
  408d9c:	73252078 	.word	0x73252078
  408da0:	00000a0d 	.word	0x00000a0d
  408da4:	0001c200 	.word	0x0001c200
  408da8:	000000c0 	.word	0x000000c0
  408dac:	00000800 	.word	0x00000800
  408db0:	00000000 	.word	0x00000000
  408db4:	6e696147 	.word	0x6e696147
  408db8:	6425203a 	.word	0x6425203a
  408dbc:	0000000a 	.word	0x0000000a
  408dc0:	75746153 	.word	0x75746153
  408dc4:	69746172 	.word	0x69746172
  408dc8:	203a6e6f 	.word	0x203a6e6f
  408dcc:	000a6425 	.word	0x000a6425
  408dd0:	70776f4c 	.word	0x70776f4c
  408dd4:	3a737361 	.word	0x3a737361
  408dd8:	0a642520 	.word	0x0a642520
  408ddc:	00000000 	.word	0x00000000
  408de0:	41202d2d 	.word	0x41202d2d
  408de4:	20434546 	.word	0x20434546
  408de8:	44204f54 	.word	0x44204f54
  408dec:	41204341 	.word	0x41204341
  408df0:	4f494455 	.word	0x4f494455
  408df4:	4f525020 	.word	0x4f525020
  408df8:	53534543 	.word	0x53534543
  408dfc:	20474e49 	.word	0x20474e49
  408e00:	0a0d2d2d 	.word	0x0a0d2d2d
  408e04:	53202d2d 	.word	0x53202d2d
  408e08:	37454d41 	.word	0x37454d41
  408e0c:	50582d30 	.word	0x50582d30
  408e10:	2d20444c 	.word	0x2d20444c
  408e14:	2d0a0d2d 	.word	0x2d0a0d2d
  408e18:	6f43202d 	.word	0x6f43202d
  408e1c:	6c69706d 	.word	0x6c69706d
  408e20:	203a6465 	.word	0x203a6465
  408e24:	206e754a 	.word	0x206e754a
  408e28:	32203331 	.word	0x32203331
  408e2c:	20393130 	.word	0x20393130
  408e30:	343a3531 	.word	0x343a3531
  408e34:	39323a34 	.word	0x39323a34
  408e38:	0d2d2d20 	.word	0x0d2d2d20
  408e3c:	00000000 	.word	0x00000000
  408e40:	69647541 	.word	0x69647541
  408e44:	7361546f 	.word	0x7361546f
  408e48:	0000006b 	.word	0x0000006b
  408e4c:	6c696146 	.word	0x6c696146
  408e50:	74206465 	.word	0x74206465
  408e54:	7263206f 	.word	0x7263206f
  408e58:	65746165 	.word	0x65746165
  408e5c:	64754120 	.word	0x64754120
  408e60:	61546f69 	.word	0x61546f69
  408e64:	74206b73 	.word	0x74206b73
  408e68:	0d6b7361 	.word	0x0d6b7361
  408e6c:	0000000a 	.word	0x0000000a
  408e70:	65666645 	.word	0x65666645
  408e74:	43737463 	.word	0x43737463
  408e78:	72746e6f 	.word	0x72746e6f
  408e7c:	656c6c6f 	.word	0x656c6c6f
  408e80:	00000072 	.word	0x00000072
  408e84:	6c696146 	.word	0x6c696146
  408e88:	74206465 	.word	0x74206465
  408e8c:	7263206f 	.word	0x7263206f
  408e90:	65746165 	.word	0x65746165
  408e94:	66664520 	.word	0x66664520
  408e98:	73746365 	.word	0x73746365
  408e9c:	746e6f43 	.word	0x746e6f43
  408ea0:	6c6c6f72 	.word	0x6c6c6f72
  408ea4:	74207265 	.word	0x74207265
  408ea8:	0d6b7361 	.word	0x0d6b7361
  408eac:	0000000a 	.word	0x0000000a

00408eb0 <_global_impure_ptr>:
  408eb0:	20400040 0000000a 33323130 37363534     @.@ ....01234567
  408ec0:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  408ed0:	37363534 62613938 66656463 00000000     456789abcdef....
  408ee0:	6c756e28 0000296c                       (null)..

00408ee8 <blanks.7217>:
  408ee8:	20202020 20202020 20202020 20202020                     

00408ef8 <zeroes.7218>:
  408ef8:	30303030 30303030 30303030 30303030     0000000000000000
  408f08:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00408f18 <_ctype_>:
  408f18:	20202000 20202020 28282020 20282828     .         ((((( 
  408f28:	20202020 20202020 20202020 20202020                     
  408f38:	10108820 10101010 10101010 10101010      ...............
  408f48:	04040410 04040404 10040404 10101010     ................
  408f58:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408f68:	01010101 01010101 01010101 10101010     ................
  408f78:	42421010 42424242 02020202 02020202     ..BBBBBB........
  408f88:	02020202 02020202 02020202 10101010     ................
  408f98:	00000020 00000000 00000000 00000000      ...............
	...

0040901c <_init>:
  40901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40901e:	bf00      	nop
  409020:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409022:	bc08      	pop	{r3}
  409024:	469e      	mov	lr, r3
  409026:	4770      	bx	lr

00409028 <__init_array_start>:
  409028:	0040711d 	.word	0x0040711d

0040902c <__frame_dummy_init_array_entry>:
  40902c:	00400165                                e.@.

00409030 <_fini>:
  409030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409032:	bf00      	nop
  409034:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409036:	bc08      	pop	{r3}
  409038:	469e      	mov	lr, r3
  40903a:	4770      	bx	lr

0040903c <__fini_array_start>:
  40903c:	00400141 	.word	0x00400141
