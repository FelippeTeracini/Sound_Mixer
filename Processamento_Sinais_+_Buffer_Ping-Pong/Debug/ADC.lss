
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008a70  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408a70  00408a70  00018a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009e8  20400000  00408a78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0001fa9c  204009e8  00409460  000209e8  2**3
                  ALLOC
  4 .stack        00002004  20420484  00428efc  000209e8  2**0
                  ALLOC
  5 .heap         00000200  20422488  0042af00  000209e8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a16  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001ed60  00000000  00000000  00020a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003df2  00000000  00000000  0003f7cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a7b3  00000000  00000000  000435c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000012a8  00000000  00000000  0004dd74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001188  00000000  00000000  0004f01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000219f1  00000000  00000000  000501a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010fdb  00000000  00000000  00071b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00092898  00000000  00000000  00082b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005c88  00000000  00000000  00115408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	88 24 42 20 e5 4b 40 00 95 4c 40 00 95 4c 40 00     .$B .K@..L@..L@.
  400010:	95 4c 40 00 95 4c 40 00 95 4c 40 00 00 00 00 00     .L@..L@..L@.....
	...
  40002c:	a9 04 40 00 95 4c 40 00 00 00 00 00 b9 05 40 00     ..@..L@.......@.
  40003c:	0d 06 40 00 95 4c 40 00 95 4c 40 00 95 4c 40 00     ..@..L@..L@..L@.
  40004c:	95 4c 40 00 95 4c 40 00 95 4c 40 00 95 4c 40 00     .L@..L@..L@..L@.
  40005c:	95 4c 40 00 95 4c 40 00 00 00 00 00 59 44 40 00     .L@..L@.....YD@.
  40006c:	71 44 40 00 89 44 40 00 95 4c 40 00 95 4c 40 00     qD@..D@..L@..L@.
  40007c:	95 4c 40 00 a1 44 40 00 b9 44 40 00 95 4c 40 00     .L@..D@..D@..L@.
  40008c:	95 4c 40 00 95 4c 40 00 95 4c 40 00 95 4c 40 00     .L@..L@..L@..L@.
  40009c:	ad 2a 40 00 95 4c 40 00 95 4c 40 00 95 4c 40 00     .*@..L@..L@..L@.
  4000ac:	95 4c 40 00 95 4c 40 00 15 43 40 00 95 4c 40 00     .L@..L@..C@..L@.
  4000bc:	95 4c 40 00 95 4c 40 00 95 4c 40 00 95 4c 40 00     .L@..L@..L@..L@.
  4000cc:	95 4c 40 00 00 00 00 00 95 4c 40 00 00 00 00 00     .L@......L@.....
  4000dc:	95 4c 40 00 2d 43 40 00 95 4c 40 00 95 4c 40 00     .L@.-C@..L@..L@.
  4000ec:	95 4c 40 00 95 4c 40 00 95 4c 40 00 95 4c 40 00     .L@..L@..L@..L@.
  4000fc:	95 4c 40 00 95 4c 40 00 95 4c 40 00 95 4c 40 00     .L@..L@..L@..L@.
  40010c:	95 4c 40 00 95 4c 40 00 00 00 00 00 00 00 00 00     .L@..L@.........
  40011c:	00 00 00 00 95 4c 40 00 95 4c 40 00 95 4c 40 00     .....L@..L@..L@.
  40012c:	95 4c 40 00 95 4c 40 00 00 00 00 00 95 4c 40 00     .L@..L@......L@.
  40013c:	95 4c 40 00                                         .L@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009e8 	.word	0x204009e8
  40015c:	00000000 	.word	0x00000000
  400160:	00408a78 	.word	0x00408a78

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00408a78 	.word	0x00408a78
  4001a0:	204009ec 	.word	0x204009ec
  4001a4:	00408a78 	.word	0x00408a78
  4001a8:	00000000 	.word	0x00000000

004001ac <dacc_reset>:
 * \brief Reset DACC.
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	2201      	movs	r2, #1
  4001b8:	601a      	str	r2, [r3, #0]
}
  4001ba:	bf00      	nop
  4001bc:	370c      	adds	r7, #12
  4001be:	46bd      	mov	sp, r7
  4001c0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001c4:	4770      	bx	lr

004001c6 <dacc_get_interrupt_status>:
 * \param p_dacc Pointer to a DACC instance. 
 *
 * \return The interrupt status.
 */
uint32_t dacc_get_interrupt_status(Dacc *p_dacc)
{
  4001c6:	b480      	push	{r7}
  4001c8:	b083      	sub	sp, #12
  4001ca:	af00      	add	r7, sp, #0
  4001cc:	6078      	str	r0, [r7, #4]
	return p_dacc->DACC_ISR;
  4001ce:	687b      	ldr	r3, [r7, #4]
  4001d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  4001d2:	4618      	mov	r0, r3
  4001d4:	370c      	adds	r7, #12
  4001d6:	46bd      	mov	sp, r7
  4001d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001dc:	4770      	bx	lr

004001de <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value. 
 * \param channel The channel to convert the data ul_data
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data, uint32_t channel)
{
  4001de:	b480      	push	{r7}
  4001e0:	b085      	sub	sp, #20
  4001e2:	af00      	add	r7, sp, #0
  4001e4:	60f8      	str	r0, [r7, #12]
  4001e6:	60b9      	str	r1, [r7, #8]
  4001e8:	607a      	str	r2, [r7, #4]
	p_dacc->DACC_CDR[channel] = ul_data;
  4001ea:	68fa      	ldr	r2, [r7, #12]
  4001ec:	687b      	ldr	r3, [r7, #4]
  4001ee:	3306      	adds	r3, #6
  4001f0:	009b      	lsls	r3, r3, #2
  4001f2:	4413      	add	r3, r2
  4001f4:	68ba      	ldr	r2, [r7, #8]
  4001f6:	605a      	str	r2, [r3, #4]
}
  4001f8:	bf00      	nop
  4001fa:	3714      	adds	r7, #20
  4001fc:	46bd      	mov	sp, r7
  4001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400202:	4770      	bx	lr

00400204 <dacc_enable_channel>:
 * \param ul_channel The output channel to enable.
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
  400204:	b480      	push	{r7}
  400206:	b083      	sub	sp, #12
  400208:	af00      	add	r7, sp, #0
  40020a:	6078      	str	r0, [r7, #4]
  40020c:	6039      	str	r1, [r7, #0]
	if (ul_channel > MAX_CH_NB)
  40020e:	683b      	ldr	r3, [r7, #0]
  400210:	2b01      	cmp	r3, #1
  400212:	d901      	bls.n	400218 <dacc_enable_channel+0x14>
		return DACC_RC_INVALID_PARAM;
  400214:	2301      	movs	r3, #1
  400216:	e005      	b.n	400224 <dacc_enable_channel+0x20>

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400218:	2201      	movs	r2, #1
  40021a:	683b      	ldr	r3, [r7, #0]
  40021c:	409a      	lsls	r2, r3
  40021e:	687b      	ldr	r3, [r7, #4]
  400220:	611a      	str	r2, [r3, #16]
	return DACC_RC_OK;
  400222:	2300      	movs	r3, #0
}
  400224:	4618      	mov	r0, r3
  400226:	370c      	adds	r7, #12
  400228:	46bd      	mov	sp, r7
  40022a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40022e:	4770      	bx	lr

00400230 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
  400230:	b480      	push	{r7}
  400232:	b083      	sub	sp, #12
  400234:	af00      	add	r7, sp, #0
  400236:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  400238:	687b      	ldr	r3, [r7, #4]
  40023a:	f103 0208 	add.w	r2, r3, #8
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400242:	687b      	ldr	r3, [r7, #4]
  400244:	f04f 32ff 	mov.w	r2, #4294967295
  400248:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  40024a:	687b      	ldr	r3, [r7, #4]
  40024c:	f103 0208 	add.w	r2, r3, #8
  400250:	687b      	ldr	r3, [r7, #4]
  400252:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  400254:	687b      	ldr	r3, [r7, #4]
  400256:	f103 0208 	add.w	r2, r3, #8
  40025a:	687b      	ldr	r3, [r7, #4]
  40025c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  40025e:	687b      	ldr	r3, [r7, #4]
  400260:	2200      	movs	r2, #0
  400262:	601a      	str	r2, [r3, #0]
}
  400264:	bf00      	nop
  400266:	370c      	adds	r7, #12
  400268:	46bd      	mov	sp, r7
  40026a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40026e:	4770      	bx	lr

00400270 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
  400270:	b480      	push	{r7}
  400272:	b083      	sub	sp, #12
  400274:	af00      	add	r7, sp, #0
  400276:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400278:	687b      	ldr	r3, [r7, #4]
  40027a:	2200      	movs	r2, #0
  40027c:	611a      	str	r2, [r3, #16]
}
  40027e:	bf00      	nop
  400280:	370c      	adds	r7, #12
  400282:	46bd      	mov	sp, r7
  400284:	f85d 7b04 	ldr.w	r7, [sp], #4
  400288:	4770      	bx	lr

0040028a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
  40028a:	b480      	push	{r7}
  40028c:	b085      	sub	sp, #20
  40028e:	af00      	add	r7, sp, #0
  400290:	6078      	str	r0, [r7, #4]
  400292:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
  400294:	687b      	ldr	r3, [r7, #4]
  400296:	685b      	ldr	r3, [r3, #4]
  400298:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
  40029a:	68fb      	ldr	r3, [r7, #12]
  40029c:	685a      	ldr	r2, [r3, #4]
  40029e:	683b      	ldr	r3, [r7, #0]
  4002a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
  4002a2:	687b      	ldr	r3, [r7, #4]
  4002a4:	685a      	ldr	r2, [r3, #4]
  4002a6:	683b      	ldr	r3, [r7, #0]
  4002a8:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  4002aa:	68fb      	ldr	r3, [r7, #12]
  4002ac:	685b      	ldr	r3, [r3, #4]
  4002ae:	683a      	ldr	r2, [r7, #0]
  4002b0:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
  4002b2:	68fb      	ldr	r3, [r7, #12]
  4002b4:	683a      	ldr	r2, [r7, #0]
  4002b6:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
  4002b8:	687b      	ldr	r3, [r7, #4]
  4002ba:	683a      	ldr	r2, [r7, #0]
  4002bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4002be:	683b      	ldr	r3, [r7, #0]
  4002c0:	687a      	ldr	r2, [r7, #4]
  4002c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  4002c4:	687b      	ldr	r3, [r7, #4]
  4002c6:	681b      	ldr	r3, [r3, #0]
  4002c8:	1c5a      	adds	r2, r3, #1
  4002ca:	687b      	ldr	r3, [r7, #4]
  4002cc:	601a      	str	r2, [r3, #0]
}
  4002ce:	bf00      	nop
  4002d0:	3714      	adds	r7, #20
  4002d2:	46bd      	mov	sp, r7
  4002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002d8:	4770      	bx	lr

004002da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
  4002da:	b480      	push	{r7}
  4002dc:	b085      	sub	sp, #20
  4002de:	af00      	add	r7, sp, #0
  4002e0:	6078      	str	r0, [r7, #4]
  4002e2:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
  4002e4:	683b      	ldr	r3, [r7, #0]
  4002e6:	681b      	ldr	r3, [r3, #0]
  4002e8:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  4002ea:	68bb      	ldr	r3, [r7, #8]
  4002ec:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002f0:	d103      	bne.n	4002fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  4002f2:	687b      	ldr	r3, [r7, #4]
  4002f4:	691b      	ldr	r3, [r3, #16]
  4002f6:	60fb      	str	r3, [r7, #12]
  4002f8:	e00c      	b.n	400314 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
  4002fa:	687b      	ldr	r3, [r7, #4]
  4002fc:	3308      	adds	r3, #8
  4002fe:	60fb      	str	r3, [r7, #12]
  400300:	e002      	b.n	400308 <vListInsert+0x2e>
  400302:	68fb      	ldr	r3, [r7, #12]
  400304:	685b      	ldr	r3, [r3, #4]
  400306:	60fb      	str	r3, [r7, #12]
  400308:	68fb      	ldr	r3, [r7, #12]
  40030a:	685b      	ldr	r3, [r3, #4]
  40030c:	681a      	ldr	r2, [r3, #0]
  40030e:	68bb      	ldr	r3, [r7, #8]
  400310:	429a      	cmp	r2, r3
  400312:	d9f6      	bls.n	400302 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400314:	68fb      	ldr	r3, [r7, #12]
  400316:	685a      	ldr	r2, [r3, #4]
  400318:	683b      	ldr	r3, [r7, #0]
  40031a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
  40031c:	683b      	ldr	r3, [r7, #0]
  40031e:	685b      	ldr	r3, [r3, #4]
  400320:	683a      	ldr	r2, [r7, #0]
  400322:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400324:	683b      	ldr	r3, [r7, #0]
  400326:	68fa      	ldr	r2, [r7, #12]
  400328:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
  40032a:	68fb      	ldr	r3, [r7, #12]
  40032c:	683a      	ldr	r2, [r7, #0]
  40032e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400330:	683b      	ldr	r3, [r7, #0]
  400332:	687a      	ldr	r2, [r7, #4]
  400334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  400336:	687b      	ldr	r3, [r7, #4]
  400338:	681b      	ldr	r3, [r3, #0]
  40033a:	1c5a      	adds	r2, r3, #1
  40033c:	687b      	ldr	r3, [r7, #4]
  40033e:	601a      	str	r2, [r3, #0]
}
  400340:	bf00      	nop
  400342:	3714      	adds	r7, #20
  400344:	46bd      	mov	sp, r7
  400346:	f85d 7b04 	ldr.w	r7, [sp], #4
  40034a:	4770      	bx	lr

0040034c <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
  40034c:	b480      	push	{r7}
  40034e:	b085      	sub	sp, #20
  400350:	af00      	add	r7, sp, #0
  400352:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400354:	687b      	ldr	r3, [r7, #4]
  400356:	685b      	ldr	r3, [r3, #4]
  400358:	687a      	ldr	r2, [r7, #4]
  40035a:	6892      	ldr	r2, [r2, #8]
  40035c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40035e:	687b      	ldr	r3, [r7, #4]
  400360:	689b      	ldr	r3, [r3, #8]
  400362:	687a      	ldr	r2, [r7, #4]
  400364:	6852      	ldr	r2, [r2, #4]
  400366:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
  400368:	687b      	ldr	r3, [r7, #4]
  40036a:	691b      	ldr	r3, [r3, #16]
  40036c:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40036e:	68fb      	ldr	r3, [r7, #12]
  400370:	685a      	ldr	r2, [r3, #4]
  400372:	687b      	ldr	r3, [r7, #4]
  400374:	429a      	cmp	r2, r3
  400376:	d103      	bne.n	400380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400378:	687b      	ldr	r3, [r7, #4]
  40037a:	689a      	ldr	r2, [r3, #8]
  40037c:	68fb      	ldr	r3, [r7, #12]
  40037e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
  400380:	687b      	ldr	r3, [r7, #4]
  400382:	2200      	movs	r2, #0
  400384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  400386:	68fb      	ldr	r3, [r7, #12]
  400388:	681b      	ldr	r3, [r3, #0]
  40038a:	1e5a      	subs	r2, r3, #1
  40038c:	68fb      	ldr	r3, [r7, #12]
  40038e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400390:	68fb      	ldr	r3, [r7, #12]
  400392:	681b      	ldr	r3, [r3, #0]
}
  400394:	4618      	mov	r0, r3
  400396:	3714      	adds	r7, #20
  400398:	46bd      	mov	sp, r7
  40039a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40039e:	4770      	bx	lr

004003a0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4003a0:	b480      	push	{r7}
  4003a2:	b083      	sub	sp, #12
  4003a4:	af00      	add	r7, sp, #0
  4003a6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4003a8:	687b      	ldr	r3, [r7, #4]
  4003aa:	2b07      	cmp	r3, #7
  4003ac:	d825      	bhi.n	4003fa <osc_get_rate+0x5a>
  4003ae:	a201      	add	r2, pc, #4	; (adr r2, 4003b4 <osc_get_rate+0x14>)
  4003b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4003b4:	004003d5 	.word	0x004003d5
  4003b8:	004003db 	.word	0x004003db
  4003bc:	004003e1 	.word	0x004003e1
  4003c0:	004003e7 	.word	0x004003e7
  4003c4:	004003eb 	.word	0x004003eb
  4003c8:	004003ef 	.word	0x004003ef
  4003cc:	004003f3 	.word	0x004003f3
  4003d0:	004003f7 	.word	0x004003f7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4003d4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4003d8:	e010      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4003da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003de:	e00d      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4003e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4003e4:	e00a      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4003e6:	4b08      	ldr	r3, [pc, #32]	; (400408 <osc_get_rate+0x68>)
  4003e8:	e008      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4003ea:	4b08      	ldr	r3, [pc, #32]	; (40040c <osc_get_rate+0x6c>)
  4003ec:	e006      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4003ee:	4b08      	ldr	r3, [pc, #32]	; (400410 <osc_get_rate+0x70>)
  4003f0:	e004      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4003f2:	4b07      	ldr	r3, [pc, #28]	; (400410 <osc_get_rate+0x70>)
  4003f4:	e002      	b.n	4003fc <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4003f6:	4b06      	ldr	r3, [pc, #24]	; (400410 <osc_get_rate+0x70>)
  4003f8:	e000      	b.n	4003fc <osc_get_rate+0x5c>
	}

	return 0;
  4003fa:	2300      	movs	r3, #0
}
  4003fc:	4618      	mov	r0, r3
  4003fe:	370c      	adds	r7, #12
  400400:	46bd      	mov	sp, r7
  400402:	f85d 7b04 	ldr.w	r7, [sp], #4
  400406:	4770      	bx	lr
  400408:	003d0900 	.word	0x003d0900
  40040c:	007a1200 	.word	0x007a1200
  400410:	00b71b00 	.word	0x00b71b00

00400414 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400414:	b580      	push	{r7, lr}
  400416:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400418:	2006      	movs	r0, #6
  40041a:	4b05      	ldr	r3, [pc, #20]	; (400430 <sysclk_get_main_hz+0x1c>)
  40041c:	4798      	blx	r3
  40041e:	4602      	mov	r2, r0
  400420:	4613      	mov	r3, r2
  400422:	009b      	lsls	r3, r3, #2
  400424:	4413      	add	r3, r2
  400426:	009a      	lsls	r2, r3, #2
  400428:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  40042a:	4618      	mov	r0, r3
  40042c:	bd80      	pop	{r7, pc}
  40042e:	bf00      	nop
  400430:	004003a1 	.word	0x004003a1

00400434 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400434:	b580      	push	{r7, lr}
  400436:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <sysclk_get_cpu_hz+0x10>)
  40043a:	4798      	blx	r3
  40043c:	4603      	mov	r3, r0
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40043e:	4618      	mov	r0, r3
  400440:	bd80      	pop	{r7, pc}
  400442:	bf00      	nop
  400444:	00400415 	.word	0x00400415

00400448 <pxPortInitialiseStack>:
/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack,
		pdTASK_CODE pxCode, void *pvParameters )
{
  400448:	b480      	push	{r7}
  40044a:	b085      	sub	sp, #20
  40044c:	af00      	add	r7, sp, #0
  40044e:	60f8      	str	r0, [r7, #12]
  400450:	60b9      	str	r1, [r7, #8]
  400452:	607a      	str	r2, [r7, #4]
	* interrupt. */

	/* Offset added to account for the way the MCU uses the stack on
	* entry/exit
	* of interrupts, and to ensure alignment. */
	pxTopOfStack--;
  400454:	68fb      	ldr	r3, [r7, #12]
  400456:	3b04      	subs	r3, #4
  400458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;    /* xPSR */
  40045a:	68fb      	ldr	r3, [r7, #12]
  40045c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  400462:	68fb      	ldr	r3, [r7, #12]
  400464:	3b04      	subs	r3, #4
  400466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pxCode;       /* PC */
  400468:	68ba      	ldr	r2, [r7, #8]
  40046a:	68fb      	ldr	r3, [r7, #12]
  40046c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  40046e:	68fb      	ldr	r3, [r7, #12]
  400470:	3b04      	subs	r3, #4
  400472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;    /* LR */
  400474:	68fb      	ldr	r3, [r7, #12]
  400476:	2200      	movs	r2, #0
  400478:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;    /* R12, R3, R2 and R1. */
  40047a:	68fb      	ldr	r3, [r7, #12]
  40047c:	3b14      	subs	r3, #20
  40047e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;       /* R0 */
  400480:	687a      	ldr	r2, [r7, #4]
  400482:	68fb      	ldr	r3, [r7, #12]
  400484:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	* own exec return value. */
	pxTopOfStack--;
  400486:	68fb      	ldr	r3, [r7, #12]
  400488:	3b04      	subs	r3, #4
  40048a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40048c:	68fb      	ldr	r3, [r7, #12]
  40048e:	f06f 0202 	mvn.w	r2, #2
  400492:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;    /* R11, R10, R9, R8, R7, R6, R5 and R4. */
  400494:	68fb      	ldr	r3, [r7, #12]
  400496:	3b20      	subs	r3, #32
  400498:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  40049a:	68fb      	ldr	r3, [r7, #12]
}
  40049c:	4618      	mov	r0, r3
  40049e:	3714      	adds	r7, #20
  4004a0:	46bd      	mov	sp, r7
  4004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004a6:	4770      	bx	lr

004004a8 <SVC_Handler>:
/*-----------------------------------------------------------*/

/*void vPortSVCHandler( void )*/ /* ATMEL */
__attribute__ ((naked)) void SVC_Handler( void )
{
	__asm volatile (
  4004a8:	4b05      	ldr	r3, [pc, #20]	; (4004c0 <pxCurrentTCBConst2>)
  4004aa:	6819      	ldr	r1, [r3, #0]
  4004ac:	6808      	ldr	r0, [r1, #0]
  4004ae:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4004b2:	f380 8809 	msr	PSP, r0
  4004b6:	f04f 0000 	mov.w	r0, #0
  4004ba:	f380 8811 	msr	BASEPRI, r0
  4004be:	4770      	bx	lr

004004c0 <pxCurrentTCBConst2>:
  4004c0:	2040aa14 	.word	0x2040aa14
		" bx r14                          \n"
		"                                   \n"
		" .align 2                        \n"
		"pxCurrentTCBConst2: .word pxCurrentTCB \n"
		);
}
  4004c4:	bf00      	nop
  4004c6:	bf00      	nop

004004c8 <prvPortStartFirstTask>:

/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile (
  4004c8:	4804      	ldr	r0, [pc, #16]	; (4004dc <prvPortStartFirstTask+0x14>)
  4004ca:	6800      	ldr	r0, [r0, #0]
  4004cc:	6800      	ldr	r0, [r0, #0]
  4004ce:	f380 8808 	msr	MSP, r0
  4004d2:	b662      	cpsie	i
  4004d4:	df00      	svc	0
  4004d6:	bf00      	nop
		" msr msp, r0             \n"                         /* Set the msp back to the start of the stack. */
		" cpsie i                 \n"                         /* Globally enable interrupts. */
		" svc 0                   \n"                         /* System call to start first task. */
		" nop                     \n"
		);
}
  4004d8:	bf00      	nop
  4004da:	0000      	.short	0x0000
  4004dc:	e000ed08 	.word	0xe000ed08

004004e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
  4004e0:	b580      	push	{r7, lr}
  4004e2:	af00      	add	r7, sp, #0
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	* See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4004e4:	4a0e      	ldr	r2, [pc, #56]	; (400520 <xPortStartScheduler+0x40>)
  4004e6:	4b0e      	ldr	r3, [pc, #56]	; (400520 <xPortStartScheduler+0x40>)
  4004e8:	681b      	ldr	r3, [r3, #0]
  4004ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4004ee:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4004f0:	4a0b      	ldr	r2, [pc, #44]	; (400520 <xPortStartScheduler+0x40>)
  4004f2:	4b0b      	ldr	r3, [pc, #44]	; (400520 <xPortStartScheduler+0x40>)
  4004f4:	681b      	ldr	r3, [r3, #0]
  4004f6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  4004fa:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	* here already. */
	vPortSetupTimerInterrupt();
  4004fc:	4b09      	ldr	r3, [pc, #36]	; (400524 <xPortStartScheduler+0x44>)
  4004fe:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400500:	4b09      	ldr	r3, [pc, #36]	; (400528 <xPortStartScheduler+0x48>)
  400502:	2200      	movs	r2, #0
  400504:	601a      	str	r2, [r3, #0]

#if defined (__VFP_FP__) && !defined(__SOFTFP__)
	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400506:	4b09      	ldr	r3, [pc, #36]	; (40052c <xPortStartScheduler+0x4c>)
  400508:	4798      	blx	r3
#endif

	/* Lazy save always. */
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
  40050a:	4a09      	ldr	r2, [pc, #36]	; (400530 <xPortStartScheduler+0x50>)
  40050c:	4b08      	ldr	r3, [pc, #32]	; (400530 <xPortStartScheduler+0x50>)
  40050e:	681b      	ldr	r3, [r3, #0]
  400510:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400514:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400516:	4b07      	ldr	r3, [pc, #28]	; (400534 <xPortStartScheduler+0x54>)
  400518:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  40051a:	2300      	movs	r3, #0
}
  40051c:	4618      	mov	r0, r3
  40051e:	bd80      	pop	{r7, pc}
  400520:	e000ed20 	.word	0xe000ed20
  400524:	0040063d 	.word	0x0040063d
  400528:	20400000 	.word	0x20400000
  40052c:	00400671 	.word	0x00400671
  400530:	e000ef34 	.word	0xe000ef34
  400534:	004004c9 	.word	0x004004c9

00400538 <vPortYieldFromISR>:
}

/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
  400538:	b480      	push	{r7}
  40053a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40053c:	4b04      	ldr	r3, [pc, #16]	; (400550 <vPortYieldFromISR+0x18>)
  40053e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400542:	601a      	str	r2, [r3, #0]
}
  400544:	bf00      	nop
  400546:	46bd      	mov	sp, r7
  400548:	f85d 7b04 	ldr.w	r7, [sp], #4
  40054c:	4770      	bx	lr
  40054e:	bf00      	nop
  400550:	e000ed04 	.word	0xe000ed04

00400554 <vPortEnterCritical>:

/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  400554:	b580      	push	{r7, lr}
  400556:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
  400558:	4b04      	ldr	r3, [pc, #16]	; (40056c <vPortEnterCritical+0x18>)
  40055a:	4798      	blx	r3
	uxCriticalNesting++;
  40055c:	4b04      	ldr	r3, [pc, #16]	; (400570 <vPortEnterCritical+0x1c>)
  40055e:	681b      	ldr	r3, [r3, #0]
  400560:	3301      	adds	r3, #1
  400562:	4a03      	ldr	r2, [pc, #12]	; (400570 <vPortEnterCritical+0x1c>)
  400564:	6013      	str	r3, [r2, #0]
}
  400566:	bf00      	nop
  400568:	bd80      	pop	{r7, pc}
  40056a:	bf00      	nop
  40056c:	0040059d 	.word	0x0040059d
  400570:	20400000 	.word	0x20400000

00400574 <vPortExitCritical>:

/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  400574:	b580      	push	{r7, lr}
  400576:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
  400578:	4b06      	ldr	r3, [pc, #24]	; (400594 <vPortExitCritical+0x20>)
  40057a:	681b      	ldr	r3, [r3, #0]
  40057c:	3b01      	subs	r3, #1
  40057e:	4a05      	ldr	r2, [pc, #20]	; (400594 <vPortExitCritical+0x20>)
  400580:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
  400582:	4b04      	ldr	r3, [pc, #16]	; (400594 <vPortExitCritical+0x20>)
  400584:	681b      	ldr	r3, [r3, #0]
  400586:	2b00      	cmp	r3, #0
  400588:	d102      	bne.n	400590 <vPortExitCritical+0x1c>
		portENABLE_INTERRUPTS();
  40058a:	2000      	movs	r0, #0
  40058c:	4b02      	ldr	r3, [pc, #8]	; (400598 <vPortExitCritical+0x24>)
  40058e:	4798      	blx	r3
	}
}
  400590:	bf00      	nop
  400592:	bd80      	pop	{r7, pc}
  400594:	20400000 	.word	0x20400000
  400598:	004005af 	.word	0x004005af

0040059c <ulPortSetInterruptMask>:

/*-----------------------------------------------------------*/

__attribute__((naked)) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile \
  40059c:	f3ef 8011 	mrs	r0, BASEPRI
  4005a0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
  4005a4:	f381 8811 	msr	BASEPRI, r1
  4005a8:	4770      	bx	lr
		:: "i" (configMAX_SYSCALL_INTERRUPT_PRIORITY) : "r0", "r1" \
	);

	/* This return will not be reached but is necessary to prevent compiler
	 * warnings. */
	return 0;
  4005aa:	2300      	movs	r3, #0
}
  4005ac:	4618      	mov	r0, r3

004005ae <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__((naked)) void vPortClearInterruptMask(
		unsigned long ulNewMaskValue )
{
	__asm volatile \
  4005ae:	f380 8811 	msr	BASEPRI, r0
  4005b2:	4770      	bx	lr
	( \
		" msr basepri, r0                            \n" \
		" bx lr                                      \n" \
		::: "r0" \
	);
}
  4005b4:	bf00      	nop
	...

004005b8 <PendSV_Handler>:
/*void xPortPendSVHandler( void )*/
__attribute__((naked)) void PendSV_Handler( void )   /* ATMEL */
{
	/* This is a naked function. */

	__asm volatile
  4005b8:	f3ef 8009 	mrs	r0, PSP
  4005bc:	4b11      	ldr	r3, [pc, #68]	; (400604 <pxCurrentTCBConst>)
  4005be:	681a      	ldr	r2, [r3, #0]
  4005c0:	f01e 0f10 	tst.w	lr, #16
  4005c4:	bf08      	it	eq
  4005c6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4005ca:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005ce:	6010      	str	r0, [r2, #0]
  4005d0:	e92d 4008 	stmdb	sp!, {r3, lr}
  4005d4:	f04f 00a0 	mov.w	r0, #160	; 0xa0
  4005d8:	f380 8811 	msr	BASEPRI, r0
  4005dc:	f001 f802 	bl	4015e4 <vTaskSwitchContext>
  4005e0:	f04f 0000 	mov.w	r0, #0
  4005e4:	f380 8811 	msr	BASEPRI, r0
  4005e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4005ec:	6819      	ldr	r1, [r3, #0]
  4005ee:	6808      	ldr	r0, [r1, #0]
  4005f0:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005f4:	f01e 0f10 	tst.w	lr, #16
  4005f8:	bf08      	it	eq
  4005fa:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4005fe:	f380 8809 	msr	PSP, r0
  400602:	4770      	bx	lr

00400604 <pxCurrentTCBConst>:
  400604:	2040aa14 	.word	0x2040aa14
		"                                       \n"
		"   .align 2                            \n"
		"pxCurrentTCBConst: .word pxCurrentTCB    \n"
		::"i" (configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  400608:	bf00      	nop
  40060a:	bf00      	nop

0040060c <SysTick_Handler>:

/*-----------------------------------------------------------*/
void SysTick_Handler( void ) /* ATMEL */
{
  40060c:	b580      	push	{r7, lr}
  40060e:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400610:	4b06      	ldr	r3, [pc, #24]	; (40062c <SysTick_Handler+0x20>)
  400612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400616:	601a      	str	r2, [r3, #0]
	#endif

	(void)portSET_INTERRUPT_MASK_FROM_ISR();
  400618:	4b05      	ldr	r3, [pc, #20]	; (400630 <SysTick_Handler+0x24>)
  40061a:	4798      	blx	r3
	{
		vTaskIncrementTick();
  40061c:	4b05      	ldr	r3, [pc, #20]	; (400634 <SysTick_Handler+0x28>)
  40061e:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
  400620:	2000      	movs	r0, #0
  400622:	4b05      	ldr	r3, [pc, #20]	; (400638 <SysTick_Handler+0x2c>)
  400624:	4798      	blx	r3
}
  400626:	bf00      	nop
  400628:	bd80      	pop	{r7, pc}
  40062a:	bf00      	nop
  40062c:	e000ed04 	.word	0xe000ed04
  400630:	0040059d 	.word	0x0040059d
  400634:	00401499 	.word	0x00401499
  400638:	004005af 	.word	0x004005af

0040063c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__((weak)) void vPortSetupTimerInterrupt( void )
{
  40063c:	b598      	push	{r3, r4, r7, lr}
  40063e:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG
  400640:	4c07      	ldr	r4, [pc, #28]	; (400660 <vPortSetupTimerInterrupt+0x24>)
		= (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
  400642:	4b08      	ldr	r3, [pc, #32]	; (400664 <vPortSetupTimerInterrupt+0x28>)
  400644:	4798      	blx	r3
  400646:	4602      	mov	r2, r0
  400648:	4b07      	ldr	r3, [pc, #28]	; (400668 <vPortSetupTimerInterrupt+0x2c>)
  40064a:	fba3 2302 	umull	r2, r3, r3, r2
  40064e:	099b      	lsrs	r3, r3, #6
  400650:	3b01      	subs	r3, #1
  400652:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT |
  400654:	4b05      	ldr	r3, [pc, #20]	; (40066c <vPortSetupTimerInterrupt+0x30>)
  400656:	2207      	movs	r2, #7
  400658:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
}
  40065a:	bf00      	nop
  40065c:	bd98      	pop	{r3, r4, r7, pc}
  40065e:	bf00      	nop
  400660:	e000e014 	.word	0xe000e014
  400664:	00400435 	.word	0x00400435
  400668:	10624dd3 	.word	0x10624dd3
  40066c:	e000e010 	.word	0xe000e010

00400670 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400670:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400680 <vPortEnableVFP+0x10>
  400674:	6801      	ldr	r1, [r0, #0]
  400676:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40067a:	6001      	str	r1, [r0, #0]
  40067c:	4770      	bx	lr
		"                            \n"
		" orr r1, r1, #( 0xf << 20 ) \n" /* Enable CP10 and CP11 coprocessors, then save back. */
		" str r1, [r0]               \n"
		" bx r14                     "
	);
}
  40067e:	bf00      	nop
  400680:	e000ed88 	.word	0xe000ed88

00400684 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
  400684:	b580      	push	{r7, lr}
  400686:	b086      	sub	sp, #24
  400688:	af00      	add	r7, sp, #0
  40068a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
  40068c:	2300      	movs	r3, #0
  40068e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
  400690:	4b37      	ldr	r3, [pc, #220]	; (400770 <pvPortMalloc+0xec>)
  400692:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
  400694:	4b37      	ldr	r3, [pc, #220]	; (400774 <pvPortMalloc+0xf0>)
  400696:	681b      	ldr	r3, [r3, #0]
  400698:	2b00      	cmp	r3, #0
  40069a:	d101      	bne.n	4006a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
  40069c:	4b36      	ldr	r3, [pc, #216]	; (400778 <pvPortMalloc+0xf4>)
  40069e:	4798      	blx	r3
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  4006a0:	687b      	ldr	r3, [r7, #4]
  4006a2:	2b00      	cmp	r3, #0
  4006a4:	d00e      	beq.n	4006c4 <pvPortMalloc+0x40>
		{
			xWantedSize += heapSTRUCT_SIZE;
  4006a6:	2310      	movs	r3, #16
  4006a8:	461a      	mov	r2, r3
  4006aa:	687b      	ldr	r3, [r7, #4]
  4006ac:	4413      	add	r3, r2
  4006ae:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4006b0:	687b      	ldr	r3, [r7, #4]
  4006b2:	f003 0307 	and.w	r3, r3, #7
  4006b6:	2b00      	cmp	r3, #0
  4006b8:	d004      	beq.n	4006c4 <pvPortMalloc+0x40>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4006ba:	687b      	ldr	r3, [r7, #4]
  4006bc:	f023 0307 	bic.w	r3, r3, #7
  4006c0:	3308      	adds	r3, #8
  4006c2:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
  4006c4:	687b      	ldr	r3, [r7, #4]
  4006c6:	2b00      	cmp	r3, #0
  4006c8:	d045      	beq.n	400756 <pvPortMalloc+0xd2>
  4006ca:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  4006ce:	687b      	ldr	r3, [r7, #4]
  4006d0:	4293      	cmp	r3, r2
  4006d2:	d240      	bcs.n	400756 <pvPortMalloc+0xd2>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
  4006d4:	4b29      	ldr	r3, [pc, #164]	; (40077c <pvPortMalloc+0xf8>)
  4006d6:	613b      	str	r3, [r7, #16]
			pxBlock = xStart.pxNextFreeBlock;
  4006d8:	4b28      	ldr	r3, [pc, #160]	; (40077c <pvPortMalloc+0xf8>)
  4006da:	681b      	ldr	r3, [r3, #0]
  4006dc:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4006de:	e004      	b.n	4006ea <pvPortMalloc+0x66>
			{
				pxPreviousBlock = pxBlock;
  4006e0:	697b      	ldr	r3, [r7, #20]
  4006e2:	613b      	str	r3, [r7, #16]
				pxBlock = pxBlock->pxNextFreeBlock;
  4006e4:	697b      	ldr	r3, [r7, #20]
  4006e6:	681b      	ldr	r3, [r3, #0]
  4006e8:	617b      	str	r3, [r7, #20]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
  4006ea:	697b      	ldr	r3, [r7, #20]
  4006ec:	685a      	ldr	r2, [r3, #4]
  4006ee:	687b      	ldr	r3, [r7, #4]
  4006f0:	429a      	cmp	r2, r3
  4006f2:	d203      	bcs.n	4006fc <pvPortMalloc+0x78>
  4006f4:	697b      	ldr	r3, [r7, #20]
  4006f6:	681b      	ldr	r3, [r3, #0]
  4006f8:	2b00      	cmp	r3, #0
  4006fa:	d1f1      	bne.n	4006e0 <pvPortMalloc+0x5c>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
  4006fc:	4b1d      	ldr	r3, [pc, #116]	; (400774 <pvPortMalloc+0xf0>)
  4006fe:	681b      	ldr	r3, [r3, #0]
  400700:	697a      	ldr	r2, [r7, #20]
  400702:	429a      	cmp	r2, r3
  400704:	d027      	beq.n	400756 <pvPortMalloc+0xd2>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  400706:	693b      	ldr	r3, [r7, #16]
  400708:	681b      	ldr	r3, [r3, #0]
  40070a:	2210      	movs	r2, #16
  40070c:	4413      	add	r3, r2
  40070e:	60fb      	str	r3, [r7, #12]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  400710:	697b      	ldr	r3, [r7, #20]
  400712:	681a      	ldr	r2, [r3, #0]
  400714:	693b      	ldr	r3, [r7, #16]
  400716:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  400718:	697b      	ldr	r3, [r7, #20]
  40071a:	685a      	ldr	r2, [r3, #4]
  40071c:	687b      	ldr	r3, [r7, #4]
  40071e:	1ad3      	subs	r3, r2, r3
  400720:	2210      	movs	r2, #16
  400722:	0052      	lsls	r2, r2, #1
  400724:	4293      	cmp	r3, r2
  400726:	d90f      	bls.n	400748 <pvPortMalloc+0xc4>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
  400728:	697a      	ldr	r2, [r7, #20]
  40072a:	687b      	ldr	r3, [r7, #4]
  40072c:	4413      	add	r3, r2
  40072e:	60bb      	str	r3, [r7, #8]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  400730:	697b      	ldr	r3, [r7, #20]
  400732:	685a      	ldr	r2, [r3, #4]
  400734:	687b      	ldr	r3, [r7, #4]
  400736:	1ad2      	subs	r2, r2, r3
  400738:	68bb      	ldr	r3, [r7, #8]
  40073a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
  40073c:	697b      	ldr	r3, [r7, #20]
  40073e:	687a      	ldr	r2, [r7, #4]
  400740:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  400742:	68b8      	ldr	r0, [r7, #8]
  400744:	4b0e      	ldr	r3, [pc, #56]	; (400780 <pvPortMalloc+0xfc>)
  400746:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
  400748:	4b0e      	ldr	r3, [pc, #56]	; (400784 <pvPortMalloc+0x100>)
  40074a:	681a      	ldr	r2, [r3, #0]
  40074c:	697b      	ldr	r3, [r7, #20]
  40074e:	685b      	ldr	r3, [r3, #4]
  400750:	1ad3      	subs	r3, r2, r3
  400752:	4a0c      	ldr	r2, [pc, #48]	; (400784 <pvPortMalloc+0x100>)
  400754:	6013      	str	r3, [r2, #0]
			}
		}
	}
	xTaskResumeAll();
  400756:	4b0c      	ldr	r3, [pc, #48]	; (400788 <pvPortMalloc+0x104>)
  400758:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40075a:	68fb      	ldr	r3, [r7, #12]
  40075c:	2b00      	cmp	r3, #0
  40075e:	d101      	bne.n	400764 <pvPortMalloc+0xe0>
		{
			vApplicationMallocFailedHook();
  400760:	4b0a      	ldr	r3, [pc, #40]	; (40078c <pvPortMalloc+0x108>)
  400762:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
  400764:	68fb      	ldr	r3, [r7, #12]
}
  400766:	4618      	mov	r0, r3
  400768:	3718      	adds	r7, #24
  40076a:	46bd      	mov	sp, r7
  40076c:	bd80      	pop	{r7, pc}
  40076e:	bf00      	nop
  400770:	00401331 	.word	0x00401331
  400774:	2040aa10 	.word	0x2040aa10
  400778:	004007e5 	.word	0x004007e5
  40077c:	2040aa08 	.word	0x2040aa08
  400780:	00400875 	.word	0x00400875
  400784:	20400004 	.word	0x20400004
  400788:	0040134d 	.word	0x0040134d
  40078c:	00402a9d 	.word	0x00402a9d

00400790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400790:	b580      	push	{r7, lr}
  400792:	b084      	sub	sp, #16
  400794:	af00      	add	r7, sp, #0
  400796:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
  400798:	687b      	ldr	r3, [r7, #4]
  40079a:	60fb      	str	r3, [r7, #12]
xBlockLink *pxLink;

	if( pv != NULL )
  40079c:	687b      	ldr	r3, [r7, #4]
  40079e:	2b00      	cmp	r3, #0
  4007a0:	d014      	beq.n	4007cc <vPortFree+0x3c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
  4007a2:	2310      	movs	r3, #16
  4007a4:	425b      	negs	r3, r3
  4007a6:	68fa      	ldr	r2, [r7, #12]
  4007a8:	4413      	add	r3, r2
  4007aa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
  4007ac:	68fb      	ldr	r3, [r7, #12]
  4007ae:	60bb      	str	r3, [r7, #8]

		vTaskSuspendAll();
  4007b0:	4b08      	ldr	r3, [pc, #32]	; (4007d4 <vPortFree+0x44>)
  4007b2:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
  4007b4:	68bb      	ldr	r3, [r7, #8]
  4007b6:	685a      	ldr	r2, [r3, #4]
  4007b8:	4b07      	ldr	r3, [pc, #28]	; (4007d8 <vPortFree+0x48>)
  4007ba:	681b      	ldr	r3, [r3, #0]
  4007bc:	4413      	add	r3, r2
  4007be:	4a06      	ldr	r2, [pc, #24]	; (4007d8 <vPortFree+0x48>)
  4007c0:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
  4007c2:	68b8      	ldr	r0, [r7, #8]
  4007c4:	4b05      	ldr	r3, [pc, #20]	; (4007dc <vPortFree+0x4c>)
  4007c6:	4798      	blx	r3
		}
		xTaskResumeAll();
  4007c8:	4b05      	ldr	r3, [pc, #20]	; (4007e0 <vPortFree+0x50>)
  4007ca:	4798      	blx	r3
	}
}
  4007cc:	bf00      	nop
  4007ce:	3710      	adds	r7, #16
  4007d0:	46bd      	mov	sp, r7
  4007d2:	bd80      	pop	{r7, pc}
  4007d4:	00401331 	.word	0x00401331
  4007d8:	20400004 	.word	0x20400004
  4007dc:	00400875 	.word	0x00400875
  4007e0:	0040134d 	.word	0x0040134d

004007e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
  4007e4:	b580      	push	{r7, lr}
  4007e6:	b082      	sub	sp, #8
  4007e8:	af00      	add	r7, sp, #0
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
  4007ea:	4b1d      	ldr	r3, [pc, #116]	; (400860 <prvHeapInit+0x7c>)
  4007ec:	4a1d      	ldr	r2, [pc, #116]	; (400864 <prvHeapInit+0x80>)
  4007ee:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
  4007f0:	4b1b      	ldr	r3, [pc, #108]	; (400860 <prvHeapInit+0x7c>)
  4007f2:	2200      	movs	r2, #0
  4007f4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
  4007f6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
  4007fa:	4b1a      	ldr	r3, [pc, #104]	; (400864 <prvHeapInit+0x80>)
  4007fc:	4413      	add	r3, r2
  4007fe:	607b      	str	r3, [r7, #4]
	pucHeapEnd -= heapSTRUCT_SIZE;
  400800:	2310      	movs	r3, #16
  400802:	425b      	negs	r3, r3
  400804:	687a      	ldr	r2, [r7, #4]
  400806:	4413      	add	r3, r2
  400808:	607b      	str	r3, [r7, #4]
	pxEnd = ( void * ) pucHeapEnd;
  40080a:	4a17      	ldr	r2, [pc, #92]	; (400868 <prvHeapInit+0x84>)
  40080c:	687b      	ldr	r3, [r7, #4]
  40080e:	6013      	str	r3, [r2, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
  400810:	4b15      	ldr	r3, [pc, #84]	; (400868 <prvHeapInit+0x84>)
  400812:	681b      	ldr	r3, [r3, #0]
  400814:	f003 0307 	and.w	r3, r3, #7
  400818:	2b00      	cmp	r3, #0
  40081a:	d003      	beq.n	400824 <prvHeapInit+0x40>
  40081c:	4b13      	ldr	r3, [pc, #76]	; (40086c <prvHeapInit+0x88>)
  40081e:	4798      	blx	r3
  400820:	bf00      	nop
  400822:	e7fd      	b.n	400820 <prvHeapInit+0x3c>
	pxEnd->xBlockSize = 0;
  400824:	4b10      	ldr	r3, [pc, #64]	; (400868 <prvHeapInit+0x84>)
  400826:	681b      	ldr	r3, [r3, #0]
  400828:	2200      	movs	r2, #0
  40082a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
  40082c:	4b0e      	ldr	r3, [pc, #56]	; (400868 <prvHeapInit+0x84>)
  40082e:	681b      	ldr	r3, [r3, #0]
  400830:	2200      	movs	r2, #0
  400832:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
  400834:	4b0b      	ldr	r3, [pc, #44]	; (400864 <prvHeapInit+0x80>)
  400836:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
  400838:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  40083c:	2210      	movs	r2, #16
  40083e:	1a9a      	subs	r2, r3, r2
  400840:	683b      	ldr	r3, [r7, #0]
  400842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  400844:	4b08      	ldr	r3, [pc, #32]	; (400868 <prvHeapInit+0x84>)
  400846:	681a      	ldr	r2, [r3, #0]
  400848:	683b      	ldr	r3, [r7, #0]
  40084a:	601a      	str	r2, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
  40084c:	4b08      	ldr	r3, [pc, #32]	; (400870 <prvHeapInit+0x8c>)
  40084e:	681b      	ldr	r3, [r3, #0]
  400850:	2210      	movs	r2, #16
  400852:	1a9b      	subs	r3, r3, r2
  400854:	4a06      	ldr	r2, [pc, #24]	; (400870 <prvHeapInit+0x8c>)
  400856:	6013      	str	r3, [r2, #0]
}
  400858:	bf00      	nop
  40085a:	3708      	adds	r7, #8
  40085c:	46bd      	mov	sp, r7
  40085e:	bd80      	pop	{r7, pc}
  400860:	2040aa08 	.word	0x2040aa08
  400864:	20400a08 	.word	0x20400a08
  400868:	2040aa10 	.word	0x2040aa10
  40086c:	0040059d 	.word	0x0040059d
  400870:	20400004 	.word	0x20400004

00400874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
  400874:	b480      	push	{r7}
  400876:	b085      	sub	sp, #20
  400878:	af00      	add	r7, sp, #0
  40087a:	6078      	str	r0, [r7, #4]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
  40087c:	4b28      	ldr	r3, [pc, #160]	; (400920 <prvInsertBlockIntoFreeList+0xac>)
  40087e:	60fb      	str	r3, [r7, #12]
  400880:	e002      	b.n	400888 <prvInsertBlockIntoFreeList+0x14>
  400882:	68fb      	ldr	r3, [r7, #12]
  400884:	681b      	ldr	r3, [r3, #0]
  400886:	60fb      	str	r3, [r7, #12]
  400888:	68fb      	ldr	r3, [r7, #12]
  40088a:	681a      	ldr	r2, [r3, #0]
  40088c:	687b      	ldr	r3, [r7, #4]
  40088e:	429a      	cmp	r2, r3
  400890:	d3f7      	bcc.n	400882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
  400892:	68fb      	ldr	r3, [r7, #12]
  400894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
  400896:	68fb      	ldr	r3, [r7, #12]
  400898:	685b      	ldr	r3, [r3, #4]
  40089a:	68ba      	ldr	r2, [r7, #8]
  40089c:	441a      	add	r2, r3
  40089e:	687b      	ldr	r3, [r7, #4]
  4008a0:	429a      	cmp	r2, r3
  4008a2:	d108      	bne.n	4008b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4008a4:	68fb      	ldr	r3, [r7, #12]
  4008a6:	685a      	ldr	r2, [r3, #4]
  4008a8:	687b      	ldr	r3, [r7, #4]
  4008aa:	685b      	ldr	r3, [r3, #4]
  4008ac:	441a      	add	r2, r3
  4008ae:	68fb      	ldr	r3, [r7, #12]
  4008b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
  4008b2:	68fb      	ldr	r3, [r7, #12]
  4008b4:	607b      	str	r3, [r7, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
  4008b6:	687b      	ldr	r3, [r7, #4]
  4008b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
  4008ba:	687b      	ldr	r3, [r7, #4]
  4008bc:	685b      	ldr	r3, [r3, #4]
  4008be:	68ba      	ldr	r2, [r7, #8]
  4008c0:	441a      	add	r2, r3
  4008c2:	68fb      	ldr	r3, [r7, #12]
  4008c4:	681b      	ldr	r3, [r3, #0]
  4008c6:	429a      	cmp	r2, r3
  4008c8:	d118      	bne.n	4008fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
  4008ca:	68fb      	ldr	r3, [r7, #12]
  4008cc:	681a      	ldr	r2, [r3, #0]
  4008ce:	4b15      	ldr	r3, [pc, #84]	; (400924 <prvInsertBlockIntoFreeList+0xb0>)
  4008d0:	681b      	ldr	r3, [r3, #0]
  4008d2:	429a      	cmp	r2, r3
  4008d4:	d00d      	beq.n	4008f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4008d6:	687b      	ldr	r3, [r7, #4]
  4008d8:	685a      	ldr	r2, [r3, #4]
  4008da:	68fb      	ldr	r3, [r7, #12]
  4008dc:	681b      	ldr	r3, [r3, #0]
  4008de:	685b      	ldr	r3, [r3, #4]
  4008e0:	441a      	add	r2, r3
  4008e2:	687b      	ldr	r3, [r7, #4]
  4008e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4008e6:	68fb      	ldr	r3, [r7, #12]
  4008e8:	681b      	ldr	r3, [r3, #0]
  4008ea:	681a      	ldr	r2, [r3, #0]
  4008ec:	687b      	ldr	r3, [r7, #4]
  4008ee:	601a      	str	r2, [r3, #0]
  4008f0:	e008      	b.n	400904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
  4008f2:	4b0c      	ldr	r3, [pc, #48]	; (400924 <prvInsertBlockIntoFreeList+0xb0>)
  4008f4:	681a      	ldr	r2, [r3, #0]
  4008f6:	687b      	ldr	r3, [r7, #4]
  4008f8:	601a      	str	r2, [r3, #0]
  4008fa:	e003      	b.n	400904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
  4008fc:	68fb      	ldr	r3, [r7, #12]
  4008fe:	681a      	ldr	r2, [r3, #0]
  400900:	687b      	ldr	r3, [r7, #4]
  400902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
  400904:	68fa      	ldr	r2, [r7, #12]
  400906:	687b      	ldr	r3, [r7, #4]
  400908:	429a      	cmp	r2, r3
  40090a:	d002      	beq.n	400912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
  40090c:	68fb      	ldr	r3, [r7, #12]
  40090e:	687a      	ldr	r2, [r7, #4]
  400910:	601a      	str	r2, [r3, #0]
	}
}
  400912:	bf00      	nop
  400914:	3714      	adds	r7, #20
  400916:	46bd      	mov	sp, r7
  400918:	f85d 7b04 	ldr.w	r7, [sp], #4
  40091c:	4770      	bx	lr
  40091e:	bf00      	nop
  400920:	2040aa08 	.word	0x2040aa08
  400924:	2040aa10 	.word	0x2040aa10

00400928 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
  400928:	b580      	push	{r7, lr}
  40092a:	b082      	sub	sp, #8
  40092c:	af00      	add	r7, sp, #0
  40092e:	6078      	str	r0, [r7, #4]
  400930:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
  400932:	687b      	ldr	r3, [r7, #4]
  400934:	2b00      	cmp	r3, #0
  400936:	d103      	bne.n	400940 <xQueueGenericReset+0x18>
  400938:	4b27      	ldr	r3, [pc, #156]	; (4009d8 <xQueueGenericReset+0xb0>)
  40093a:	4798      	blx	r3
  40093c:	bf00      	nop
  40093e:	e7fd      	b.n	40093c <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
  400940:	4b26      	ldr	r3, [pc, #152]	; (4009dc <xQueueGenericReset+0xb4>)
  400942:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400944:	687b      	ldr	r3, [r7, #4]
  400946:	681a      	ldr	r2, [r3, #0]
  400948:	687b      	ldr	r3, [r7, #4]
  40094a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40094c:	6879      	ldr	r1, [r7, #4]
  40094e:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400950:	fb01 f303 	mul.w	r3, r1, r3
  400954:	441a      	add	r2, r3
  400956:	687b      	ldr	r3, [r7, #4]
  400958:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
  40095a:	687b      	ldr	r3, [r7, #4]
  40095c:	2200      	movs	r2, #0
  40095e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400960:	687b      	ldr	r3, [r7, #4]
  400962:	681a      	ldr	r2, [r3, #0]
  400964:	687b      	ldr	r3, [r7, #4]
  400966:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
  400968:	687b      	ldr	r3, [r7, #4]
  40096a:	681a      	ldr	r2, [r3, #0]
  40096c:	687b      	ldr	r3, [r7, #4]
  40096e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400970:	3b01      	subs	r3, #1
  400972:	6879      	ldr	r1, [r7, #4]
  400974:	6c09      	ldr	r1, [r1, #64]	; 0x40
  400976:	fb01 f303 	mul.w	r3, r1, r3
  40097a:	441a      	add	r2, r3
  40097c:	687b      	ldr	r3, [r7, #4]
  40097e:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400980:	687b      	ldr	r3, [r7, #4]
  400982:	f04f 32ff 	mov.w	r2, #4294967295
  400986:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400988:	687b      	ldr	r3, [r7, #4]
  40098a:	f04f 32ff 	mov.w	r2, #4294967295
  40098e:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  400990:	683b      	ldr	r3, [r7, #0]
  400992:	2b00      	cmp	r3, #0
  400994:	d10e      	bne.n	4009b4 <xQueueGenericReset+0x8c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400996:	687b      	ldr	r3, [r7, #4]
  400998:	691b      	ldr	r3, [r3, #16]
  40099a:	2b00      	cmp	r3, #0
  40099c:	d014      	beq.n	4009c8 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40099e:	687b      	ldr	r3, [r7, #4]
  4009a0:	3310      	adds	r3, #16
  4009a2:	4618      	mov	r0, r3
  4009a4:	4b0e      	ldr	r3, [pc, #56]	; (4009e0 <xQueueGenericReset+0xb8>)
  4009a6:	4798      	blx	r3
  4009a8:	4603      	mov	r3, r0
  4009aa:	2b01      	cmp	r3, #1
  4009ac:	d10c      	bne.n	4009c8 <xQueueGenericReset+0xa0>
				{
					portYIELD_WITHIN_API();
  4009ae:	4b0d      	ldr	r3, [pc, #52]	; (4009e4 <xQueueGenericReset+0xbc>)
  4009b0:	4798      	blx	r3
  4009b2:	e009      	b.n	4009c8 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4009b4:	687b      	ldr	r3, [r7, #4]
  4009b6:	3310      	adds	r3, #16
  4009b8:	4618      	mov	r0, r3
  4009ba:	4b0b      	ldr	r3, [pc, #44]	; (4009e8 <xQueueGenericReset+0xc0>)
  4009bc:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4009be:	687b      	ldr	r3, [r7, #4]
  4009c0:	3324      	adds	r3, #36	; 0x24
  4009c2:	4618      	mov	r0, r3
  4009c4:	4b08      	ldr	r3, [pc, #32]	; (4009e8 <xQueueGenericReset+0xc0>)
  4009c6:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  4009c8:	4b08      	ldr	r3, [pc, #32]	; (4009ec <xQueueGenericReset+0xc4>)
  4009ca:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  4009cc:	2301      	movs	r3, #1
}
  4009ce:	4618      	mov	r0, r3
  4009d0:	3708      	adds	r7, #8
  4009d2:	46bd      	mov	sp, r7
  4009d4:	bd80      	pop	{r7, pc}
  4009d6:	bf00      	nop
  4009d8:	0040059d 	.word	0x0040059d
  4009dc:	00400555 	.word	0x00400555
  4009e0:	00401771 	.word	0x00401771
  4009e4:	00400539 	.word	0x00400539
  4009e8:	00400231 	.word	0x00400231
  4009ec:	00400575 	.word	0x00400575

004009f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
  4009f0:	b580      	push	{r7, lr}
  4009f2:	b088      	sub	sp, #32
  4009f4:	af00      	add	r7, sp, #0
  4009f6:	60f8      	str	r0, [r7, #12]
  4009f8:	60b9      	str	r1, [r7, #8]
  4009fa:	4613      	mov	r3, r2
  4009fc:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
  4009fe:	2300      	movs	r3, #0
  400a00:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
  400a02:	68fb      	ldr	r3, [r7, #12]
  400a04:	2b00      	cmp	r3, #0
  400a06:	d02a      	beq.n	400a5e <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
  400a08:	2050      	movs	r0, #80	; 0x50
  400a0a:	4b1b      	ldr	r3, [pc, #108]	; (400a78 <xQueueGenericCreate+0x88>)
  400a0c:	4798      	blx	r3
  400a0e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
  400a10:	69bb      	ldr	r3, [r7, #24]
  400a12:	2b00      	cmp	r3, #0
  400a14:	d023      	beq.n	400a5e <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
  400a16:	68fb      	ldr	r3, [r7, #12]
  400a18:	68ba      	ldr	r2, [r7, #8]
  400a1a:	fb02 f303 	mul.w	r3, r2, r3
  400a1e:	3301      	adds	r3, #1
  400a20:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
  400a22:	6978      	ldr	r0, [r7, #20]
  400a24:	4b14      	ldr	r3, [pc, #80]	; (400a78 <xQueueGenericCreate+0x88>)
  400a26:	4798      	blx	r3
  400a28:	4602      	mov	r2, r0
  400a2a:	69bb      	ldr	r3, [r7, #24]
  400a2c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
  400a2e:	69bb      	ldr	r3, [r7, #24]
  400a30:	681b      	ldr	r3, [r3, #0]
  400a32:	2b00      	cmp	r3, #0
  400a34:	d010      	beq.n	400a58 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
  400a36:	69bb      	ldr	r3, [r7, #24]
  400a38:	68fa      	ldr	r2, [r7, #12]
  400a3a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
  400a3c:	69bb      	ldr	r3, [r7, #24]
  400a3e:	68ba      	ldr	r2, [r7, #8]
  400a40:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
  400a42:	2101      	movs	r1, #1
  400a44:	69b8      	ldr	r0, [r7, #24]
  400a46:	4b0d      	ldr	r3, [pc, #52]	; (400a7c <xQueueGenericCreate+0x8c>)
  400a48:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
  400a4a:	69bb      	ldr	r3, [r7, #24]
  400a4c:	79fa      	ldrb	r2, [r7, #7]
  400a4e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
  400a52:	69bb      	ldr	r3, [r7, #24]
  400a54:	61fb      	str	r3, [r7, #28]
  400a56:	e002      	b.n	400a5e <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
  400a58:	69b8      	ldr	r0, [r7, #24]
  400a5a:	4b09      	ldr	r3, [pc, #36]	; (400a80 <xQueueGenericCreate+0x90>)
  400a5c:	4798      	blx	r3
			}
		}
	}

	configASSERT( xReturn );
  400a5e:	69fb      	ldr	r3, [r7, #28]
  400a60:	2b00      	cmp	r3, #0
  400a62:	d103      	bne.n	400a6c <xQueueGenericCreate+0x7c>
  400a64:	4b07      	ldr	r3, [pc, #28]	; (400a84 <xQueueGenericCreate+0x94>)
  400a66:	4798      	blx	r3
  400a68:	bf00      	nop
  400a6a:	e7fd      	b.n	400a68 <xQueueGenericCreate+0x78>

	return xReturn;
  400a6c:	69fb      	ldr	r3, [r7, #28]
}
  400a6e:	4618      	mov	r0, r3
  400a70:	3720      	adds	r7, #32
  400a72:	46bd      	mov	sp, r7
  400a74:	bd80      	pop	{r7, pc}
  400a76:	bf00      	nop
  400a78:	00400685 	.word	0x00400685
  400a7c:	00400929 	.word	0x00400929
  400a80:	00400791 	.word	0x00400791
  400a84:	0040059d 	.word	0x0040059d

00400a88 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
  400a88:	b580      	push	{r7, lr}
  400a8a:	b088      	sub	sp, #32
  400a8c:	af00      	add	r7, sp, #0
  400a8e:	60f8      	str	r0, [r7, #12]
  400a90:	60b9      	str	r1, [r7, #8]
  400a92:	607a      	str	r2, [r7, #4]
  400a94:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400a96:	2300      	movs	r3, #0
  400a98:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
  400a9a:	68fb      	ldr	r3, [r7, #12]
  400a9c:	2b00      	cmp	r3, #0
  400a9e:	d103      	bne.n	400aa8 <xQueueGenericSend+0x20>
  400aa0:	4b46      	ldr	r3, [pc, #280]	; (400bbc <xQueueGenericSend+0x134>)
  400aa2:	4798      	blx	r3
  400aa4:	bf00      	nop
  400aa6:	e7fd      	b.n	400aa4 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400aa8:	68bb      	ldr	r3, [r7, #8]
  400aaa:	2b00      	cmp	r3, #0
  400aac:	d103      	bne.n	400ab6 <xQueueGenericSend+0x2e>
  400aae:	68fb      	ldr	r3, [r7, #12]
  400ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ab2:	2b00      	cmp	r3, #0
  400ab4:	d101      	bne.n	400aba <xQueueGenericSend+0x32>
  400ab6:	2301      	movs	r3, #1
  400ab8:	e000      	b.n	400abc <xQueueGenericSend+0x34>
  400aba:	2300      	movs	r3, #0
  400abc:	2b00      	cmp	r3, #0
  400abe:	d103      	bne.n	400ac8 <xQueueGenericSend+0x40>
  400ac0:	4b3e      	ldr	r3, [pc, #248]	; (400bbc <xQueueGenericSend+0x134>)
  400ac2:	4798      	blx	r3
  400ac4:	bf00      	nop
  400ac6:	e7fd      	b.n	400ac4 <xQueueGenericSend+0x3c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400ac8:	4b3d      	ldr	r3, [pc, #244]	; (400bc0 <xQueueGenericSend+0x138>)
  400aca:	4798      	blx	r3
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400acc:	68fb      	ldr	r3, [r7, #12]
  400ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400ad0:	68fb      	ldr	r3, [r7, #12]
  400ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400ad4:	429a      	cmp	r2, r3
  400ad6:	d216      	bcs.n	400b06 <xQueueGenericSend+0x7e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400ad8:	683a      	ldr	r2, [r7, #0]
  400ada:	68b9      	ldr	r1, [r7, #8]
  400adc:	68f8      	ldr	r0, [r7, #12]
  400ade:	4b39      	ldr	r3, [pc, #228]	; (400bc4 <xQueueGenericSend+0x13c>)
  400ae0:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ae2:	68fb      	ldr	r3, [r7, #12]
  400ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400ae6:	2b00      	cmp	r3, #0
  400ae8:	d009      	beq.n	400afe <xQueueGenericSend+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400aea:	68fb      	ldr	r3, [r7, #12]
  400aec:	3324      	adds	r3, #36	; 0x24
  400aee:	4618      	mov	r0, r3
  400af0:	4b35      	ldr	r3, [pc, #212]	; (400bc8 <xQueueGenericSend+0x140>)
  400af2:	4798      	blx	r3
  400af4:	4603      	mov	r3, r0
  400af6:	2b01      	cmp	r3, #1
  400af8:	d101      	bne.n	400afe <xQueueGenericSend+0x76>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
  400afa:	4b34      	ldr	r3, [pc, #208]	; (400bcc <xQueueGenericSend+0x144>)
  400afc:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
  400afe:	4b34      	ldr	r3, [pc, #208]	; (400bd0 <xQueueGenericSend+0x148>)
  400b00:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
  400b02:	2301      	movs	r3, #1
  400b04:	e056      	b.n	400bb4 <xQueueGenericSend+0x12c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400b06:	687b      	ldr	r3, [r7, #4]
  400b08:	2b00      	cmp	r3, #0
  400b0a:	d103      	bne.n	400b14 <xQueueGenericSend+0x8c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400b0c:	4b30      	ldr	r3, [pc, #192]	; (400bd0 <xQueueGenericSend+0x148>)
  400b0e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400b10:	2300      	movs	r3, #0
  400b12:	e04f      	b.n	400bb4 <xQueueGenericSend+0x12c>
				}
				else if( xEntryTimeSet == pdFALSE )
  400b14:	69fb      	ldr	r3, [r7, #28]
  400b16:	2b00      	cmp	r3, #0
  400b18:	d106      	bne.n	400b28 <xQueueGenericSend+0xa0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400b1a:	f107 0314 	add.w	r3, r7, #20
  400b1e:	4618      	mov	r0, r3
  400b20:	4b2c      	ldr	r3, [pc, #176]	; (400bd4 <xQueueGenericSend+0x14c>)
  400b22:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400b24:	2301      	movs	r3, #1
  400b26:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400b28:	4b29      	ldr	r3, [pc, #164]	; (400bd0 <xQueueGenericSend+0x148>)
  400b2a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400b2c:	4b2a      	ldr	r3, [pc, #168]	; (400bd8 <xQueueGenericSend+0x150>)
  400b2e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400b30:	4b23      	ldr	r3, [pc, #140]	; (400bc0 <xQueueGenericSend+0x138>)
  400b32:	4798      	blx	r3
  400b34:	68fb      	ldr	r3, [r7, #12]
  400b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400b38:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b3c:	d102      	bne.n	400b44 <xQueueGenericSend+0xbc>
  400b3e:	68fb      	ldr	r3, [r7, #12]
  400b40:	2200      	movs	r2, #0
  400b42:	645a      	str	r2, [r3, #68]	; 0x44
  400b44:	68fb      	ldr	r3, [r7, #12]
  400b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400b48:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b4c:	d102      	bne.n	400b54 <xQueueGenericSend+0xcc>
  400b4e:	68fb      	ldr	r3, [r7, #12]
  400b50:	2200      	movs	r2, #0
  400b52:	649a      	str	r2, [r3, #72]	; 0x48
  400b54:	4b1e      	ldr	r3, [pc, #120]	; (400bd0 <xQueueGenericSend+0x148>)
  400b56:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400b58:	1d3a      	adds	r2, r7, #4
  400b5a:	f107 0314 	add.w	r3, r7, #20
  400b5e:	4611      	mov	r1, r2
  400b60:	4618      	mov	r0, r3
  400b62:	4b1e      	ldr	r3, [pc, #120]	; (400bdc <xQueueGenericSend+0x154>)
  400b64:	4798      	blx	r3
  400b66:	4603      	mov	r3, r0
  400b68:	2b00      	cmp	r3, #0
  400b6a:	d11d      	bne.n	400ba8 <xQueueGenericSend+0x120>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400b6c:	68f8      	ldr	r0, [r7, #12]
  400b6e:	4b1c      	ldr	r3, [pc, #112]	; (400be0 <xQueueGenericSend+0x158>)
  400b70:	4798      	blx	r3
  400b72:	4603      	mov	r3, r0
  400b74:	2b00      	cmp	r3, #0
  400b76:	d011      	beq.n	400b9c <xQueueGenericSend+0x114>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400b78:	68fb      	ldr	r3, [r7, #12]
  400b7a:	3310      	adds	r3, #16
  400b7c:	687a      	ldr	r2, [r7, #4]
  400b7e:	4611      	mov	r1, r2
  400b80:	4618      	mov	r0, r3
  400b82:	4b18      	ldr	r3, [pc, #96]	; (400be4 <xQueueGenericSend+0x15c>)
  400b84:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400b86:	68f8      	ldr	r0, [r7, #12]
  400b88:	4b17      	ldr	r3, [pc, #92]	; (400be8 <xQueueGenericSend+0x160>)
  400b8a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400b8c:	4b17      	ldr	r3, [pc, #92]	; (400bec <xQueueGenericSend+0x164>)
  400b8e:	4798      	blx	r3
  400b90:	4603      	mov	r3, r0
  400b92:	2b00      	cmp	r3, #0
  400b94:	d198      	bne.n	400ac8 <xQueueGenericSend+0x40>
				{
					portYIELD_WITHIN_API();
  400b96:	4b0d      	ldr	r3, [pc, #52]	; (400bcc <xQueueGenericSend+0x144>)
  400b98:	4798      	blx	r3
  400b9a:	e795      	b.n	400ac8 <xQueueGenericSend+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400b9c:	68f8      	ldr	r0, [r7, #12]
  400b9e:	4b12      	ldr	r3, [pc, #72]	; (400be8 <xQueueGenericSend+0x160>)
  400ba0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400ba2:	4b12      	ldr	r3, [pc, #72]	; (400bec <xQueueGenericSend+0x164>)
  400ba4:	4798      	blx	r3
  400ba6:	e78f      	b.n	400ac8 <xQueueGenericSend+0x40>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400ba8:	68f8      	ldr	r0, [r7, #12]
  400baa:	4b0f      	ldr	r3, [pc, #60]	; (400be8 <xQueueGenericSend+0x160>)
  400bac:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400bae:	4b0f      	ldr	r3, [pc, #60]	; (400bec <xQueueGenericSend+0x164>)
  400bb0:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400bb2:	2300      	movs	r3, #0
		}
	}
}
  400bb4:	4618      	mov	r0, r3
  400bb6:	3720      	adds	r7, #32
  400bb8:	46bd      	mov	sp, r7
  400bba:	bd80      	pop	{r7, pc}
  400bbc:	0040059d 	.word	0x0040059d
  400bc0:	00400555 	.word	0x00400555
  400bc4:	00400e81 	.word	0x00400e81
  400bc8:	00401771 	.word	0x00401771
  400bcc:	00400539 	.word	0x00400539
  400bd0:	00400575 	.word	0x00400575
  400bd4:	0040182d 	.word	0x0040182d
  400bd8:	00401331 	.word	0x00401331
  400bdc:	00401869 	.word	0x00401869
  400be0:	0040106d 	.word	0x0040106d
  400be4:	00401689 	.word	0x00401689
  400be8:	00400f91 	.word	0x00400f91
  400bec:	0040134d 	.word	0x0040134d

00400bf0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
  400bf0:	b580      	push	{r7, lr}
  400bf2:	b086      	sub	sp, #24
  400bf4:	af00      	add	r7, sp, #0
  400bf6:	60f8      	str	r0, [r7, #12]
  400bf8:	60b9      	str	r1, [r7, #8]
  400bfa:	607a      	str	r2, [r7, #4]
  400bfc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
  400bfe:	68fb      	ldr	r3, [r7, #12]
  400c00:	2b00      	cmp	r3, #0
  400c02:	d103      	bne.n	400c0c <xQueueGenericSendFromISR+0x1c>
  400c04:	4b25      	ldr	r3, [pc, #148]	; (400c9c <xQueueGenericSendFromISR+0xac>)
  400c06:	4798      	blx	r3
  400c08:	bf00      	nop
  400c0a:	e7fd      	b.n	400c08 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400c0c:	68bb      	ldr	r3, [r7, #8]
  400c0e:	2b00      	cmp	r3, #0
  400c10:	d103      	bne.n	400c1a <xQueueGenericSendFromISR+0x2a>
  400c12:	68fb      	ldr	r3, [r7, #12]
  400c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400c16:	2b00      	cmp	r3, #0
  400c18:	d101      	bne.n	400c1e <xQueueGenericSendFromISR+0x2e>
  400c1a:	2301      	movs	r3, #1
  400c1c:	e000      	b.n	400c20 <xQueueGenericSendFromISR+0x30>
  400c1e:	2300      	movs	r3, #0
  400c20:	2b00      	cmp	r3, #0
  400c22:	d103      	bne.n	400c2c <xQueueGenericSendFromISR+0x3c>
  400c24:	4b1d      	ldr	r3, [pc, #116]	; (400c9c <xQueueGenericSendFromISR+0xac>)
  400c26:	4798      	blx	r3
  400c28:	bf00      	nop
  400c2a:	e7fd      	b.n	400c28 <xQueueGenericSendFromISR+0x38>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  400c2c:	4b1b      	ldr	r3, [pc, #108]	; (400c9c <xQueueGenericSendFromISR+0xac>)
  400c2e:	4798      	blx	r3
  400c30:	6138      	str	r0, [r7, #16]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400c32:	68fb      	ldr	r3, [r7, #12]
  400c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400c36:	68fb      	ldr	r3, [r7, #12]
  400c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  400c3a:	429a      	cmp	r2, r3
  400c3c:	d224      	bcs.n	400c88 <xQueueGenericSendFromISR+0x98>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400c3e:	683a      	ldr	r2, [r7, #0]
  400c40:	68b9      	ldr	r1, [r7, #8]
  400c42:	68f8      	ldr	r0, [r7, #12]
  400c44:	4b16      	ldr	r3, [pc, #88]	; (400ca0 <xQueueGenericSendFromISR+0xb0>)
  400c46:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400c48:	68fb      	ldr	r3, [r7, #12]
  400c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c50:	d112      	bne.n	400c78 <xQueueGenericSendFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c52:	68fb      	ldr	r3, [r7, #12]
  400c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400c56:	2b00      	cmp	r3, #0
  400c58:	d013      	beq.n	400c82 <xQueueGenericSendFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c5a:	68fb      	ldr	r3, [r7, #12]
  400c5c:	3324      	adds	r3, #36	; 0x24
  400c5e:	4618      	mov	r0, r3
  400c60:	4b10      	ldr	r3, [pc, #64]	; (400ca4 <xQueueGenericSendFromISR+0xb4>)
  400c62:	4798      	blx	r3
  400c64:	4603      	mov	r3, r0
  400c66:	2b00      	cmp	r3, #0
  400c68:	d00b      	beq.n	400c82 <xQueueGenericSendFromISR+0x92>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
  400c6a:	687b      	ldr	r3, [r7, #4]
  400c6c:	2b00      	cmp	r3, #0
  400c6e:	d008      	beq.n	400c82 <xQueueGenericSendFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
  400c70:	687b      	ldr	r3, [r7, #4]
  400c72:	2201      	movs	r2, #1
  400c74:	601a      	str	r2, [r3, #0]
  400c76:	e004      	b.n	400c82 <xQueueGenericSendFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400c78:	68fb      	ldr	r3, [r7, #12]
  400c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400c7c:	1c5a      	adds	r2, r3, #1
  400c7e:	68fb      	ldr	r3, [r7, #12]
  400c80:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
  400c82:	2301      	movs	r3, #1
  400c84:	617b      	str	r3, [r7, #20]
  400c86:	e001      	b.n	400c8c <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400c88:	2300      	movs	r3, #0
  400c8a:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
  400c8c:	6938      	ldr	r0, [r7, #16]
  400c8e:	4b06      	ldr	r3, [pc, #24]	; (400ca8 <xQueueGenericSendFromISR+0xb8>)
  400c90:	4798      	blx	r3

	return xReturn;
  400c92:	697b      	ldr	r3, [r7, #20]
}
  400c94:	4618      	mov	r0, r3
  400c96:	3718      	adds	r7, #24
  400c98:	46bd      	mov	sp, r7
  400c9a:	bd80      	pop	{r7, pc}
  400c9c:	0040059d 	.word	0x0040059d
  400ca0:	00400e81 	.word	0x00400e81
  400ca4:	00401771 	.word	0x00401771
  400ca8:	004005af 	.word	0x004005af

00400cac <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
  400cac:	b580      	push	{r7, lr}
  400cae:	b088      	sub	sp, #32
  400cb0:	af00      	add	r7, sp, #0
  400cb2:	60f8      	str	r0, [r7, #12]
  400cb4:	60b9      	str	r1, [r7, #8]
  400cb6:	607a      	str	r2, [r7, #4]
  400cb8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
  400cba:	2300      	movs	r3, #0
  400cbc:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
  400cbe:	68fb      	ldr	r3, [r7, #12]
  400cc0:	2b00      	cmp	r3, #0
  400cc2:	d103      	bne.n	400ccc <xQueueGenericReceive+0x20>
  400cc4:	4b5f      	ldr	r3, [pc, #380]	; (400e44 <xQueueGenericReceive+0x198>)
  400cc6:	4798      	blx	r3
  400cc8:	bf00      	nop
  400cca:	e7fd      	b.n	400cc8 <xQueueGenericReceive+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
  400ccc:	68bb      	ldr	r3, [r7, #8]
  400cce:	2b00      	cmp	r3, #0
  400cd0:	d103      	bne.n	400cda <xQueueGenericReceive+0x2e>
  400cd2:	68fb      	ldr	r3, [r7, #12]
  400cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400cd6:	2b00      	cmp	r3, #0
  400cd8:	d101      	bne.n	400cde <xQueueGenericReceive+0x32>
  400cda:	2301      	movs	r3, #1
  400cdc:	e000      	b.n	400ce0 <xQueueGenericReceive+0x34>
  400cde:	2300      	movs	r3, #0
  400ce0:	2b00      	cmp	r3, #0
  400ce2:	d103      	bne.n	400cec <xQueueGenericReceive+0x40>
  400ce4:	4b57      	ldr	r3, [pc, #348]	; (400e44 <xQueueGenericReceive+0x198>)
  400ce6:	4798      	blx	r3
  400ce8:	bf00      	nop
  400cea:	e7fd      	b.n	400ce8 <xQueueGenericReceive+0x3c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  400cec:	4b56      	ldr	r3, [pc, #344]	; (400e48 <xQueueGenericReceive+0x19c>)
  400cee:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
  400cf0:	68fb      	ldr	r3, [r7, #12]
  400cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400cf4:	2b00      	cmp	r3, #0
  400cf6:	d03b      	beq.n	400d70 <xQueueGenericReceive+0xc4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
  400cf8:	68fb      	ldr	r3, [r7, #12]
  400cfa:	68db      	ldr	r3, [r3, #12]
  400cfc:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400cfe:	68b9      	ldr	r1, [r7, #8]
  400d00:	68f8      	ldr	r0, [r7, #12]
  400d02:	4b52      	ldr	r3, [pc, #328]	; (400e4c <xQueueGenericReceive+0x1a0>)
  400d04:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  400d06:	683b      	ldr	r3, [r7, #0]
  400d08:	2b00      	cmp	r3, #0
  400d0a:	d11c      	bne.n	400d46 <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
  400d0c:	68fb      	ldr	r3, [r7, #12]
  400d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400d10:	1e5a      	subs	r2, r3, #1
  400d12:	68fb      	ldr	r3, [r7, #12]
  400d14:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400d16:	68fb      	ldr	r3, [r7, #12]
  400d18:	681b      	ldr	r3, [r3, #0]
  400d1a:	2b00      	cmp	r3, #0
  400d1c:	d104      	bne.n	400d28 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
  400d1e:	4b4c      	ldr	r3, [pc, #304]	; (400e50 <xQueueGenericReceive+0x1a4>)
  400d20:	4798      	blx	r3
  400d22:	4602      	mov	r2, r0
  400d24:	68fb      	ldr	r3, [r7, #12]
  400d26:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400d28:	68fb      	ldr	r3, [r7, #12]
  400d2a:	691b      	ldr	r3, [r3, #16]
  400d2c:	2b00      	cmp	r3, #0
  400d2e:	d01b      	beq.n	400d68 <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400d30:	68fb      	ldr	r3, [r7, #12]
  400d32:	3310      	adds	r3, #16
  400d34:	4618      	mov	r0, r3
  400d36:	4b47      	ldr	r3, [pc, #284]	; (400e54 <xQueueGenericReceive+0x1a8>)
  400d38:	4798      	blx	r3
  400d3a:	4603      	mov	r3, r0
  400d3c:	2b01      	cmp	r3, #1
  400d3e:	d113      	bne.n	400d68 <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
  400d40:	4b45      	ldr	r3, [pc, #276]	; (400e58 <xQueueGenericReceive+0x1ac>)
  400d42:	4798      	blx	r3
  400d44:	e010      	b.n	400d68 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
  400d46:	68fb      	ldr	r3, [r7, #12]
  400d48:	69ba      	ldr	r2, [r7, #24]
  400d4a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400d4c:	68fb      	ldr	r3, [r7, #12]
  400d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400d50:	2b00      	cmp	r3, #0
  400d52:	d009      	beq.n	400d68 <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400d54:	68fb      	ldr	r3, [r7, #12]
  400d56:	3324      	adds	r3, #36	; 0x24
  400d58:	4618      	mov	r0, r3
  400d5a:	4b3e      	ldr	r3, [pc, #248]	; (400e54 <xQueueGenericReceive+0x1a8>)
  400d5c:	4798      	blx	r3
  400d5e:	4603      	mov	r3, r0
  400d60:	2b00      	cmp	r3, #0
  400d62:	d001      	beq.n	400d68 <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
  400d64:	4b3c      	ldr	r3, [pc, #240]	; (400e58 <xQueueGenericReceive+0x1ac>)
  400d66:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
  400d68:	4b3c      	ldr	r3, [pc, #240]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400d6a:	4798      	blx	r3
				return pdPASS;
  400d6c:	2301      	movs	r3, #1
  400d6e:	e064      	b.n	400e3a <xQueueGenericReceive+0x18e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
  400d70:	687b      	ldr	r3, [r7, #4]
  400d72:	2b00      	cmp	r3, #0
  400d74:	d103      	bne.n	400d7e <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400d76:	4b39      	ldr	r3, [pc, #228]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400d78:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  400d7a:	2300      	movs	r3, #0
  400d7c:	e05d      	b.n	400e3a <xQueueGenericReceive+0x18e>
				}
				else if( xEntryTimeSet == pdFALSE )
  400d7e:	69fb      	ldr	r3, [r7, #28]
  400d80:	2b00      	cmp	r3, #0
  400d82:	d106      	bne.n	400d92 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400d84:	f107 0310 	add.w	r3, r7, #16
  400d88:	4618      	mov	r0, r3
  400d8a:	4b35      	ldr	r3, [pc, #212]	; (400e60 <xQueueGenericReceive+0x1b4>)
  400d8c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  400d8e:	2301      	movs	r3, #1
  400d90:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
  400d92:	4b32      	ldr	r3, [pc, #200]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400d94:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400d96:	4b33      	ldr	r3, [pc, #204]	; (400e64 <xQueueGenericReceive+0x1b8>)
  400d98:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d9a:	4b2b      	ldr	r3, [pc, #172]	; (400e48 <xQueueGenericReceive+0x19c>)
  400d9c:	4798      	blx	r3
  400d9e:	68fb      	ldr	r3, [r7, #12]
  400da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  400da2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400da6:	d102      	bne.n	400dae <xQueueGenericReceive+0x102>
  400da8:	68fb      	ldr	r3, [r7, #12]
  400daa:	2200      	movs	r2, #0
  400dac:	645a      	str	r2, [r3, #68]	; 0x44
  400dae:	68fb      	ldr	r3, [r7, #12]
  400db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400db2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400db6:	d102      	bne.n	400dbe <xQueueGenericReceive+0x112>
  400db8:	68fb      	ldr	r3, [r7, #12]
  400dba:	2200      	movs	r2, #0
  400dbc:	649a      	str	r2, [r3, #72]	; 0x48
  400dbe:	4b27      	ldr	r3, [pc, #156]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400dc0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400dc2:	1d3a      	adds	r2, r7, #4
  400dc4:	f107 0310 	add.w	r3, r7, #16
  400dc8:	4611      	mov	r1, r2
  400dca:	4618      	mov	r0, r3
  400dcc:	4b26      	ldr	r3, [pc, #152]	; (400e68 <xQueueGenericReceive+0x1bc>)
  400dce:	4798      	blx	r3
  400dd0:	4603      	mov	r3, r0
  400dd2:	2b00      	cmp	r3, #0
  400dd4:	d12b      	bne.n	400e2e <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400dd6:	68f8      	ldr	r0, [r7, #12]
  400dd8:	4b24      	ldr	r3, [pc, #144]	; (400e6c <xQueueGenericReceive+0x1c0>)
  400dda:	4798      	blx	r3
  400ddc:	4603      	mov	r3, r0
  400dde:	2b00      	cmp	r3, #0
  400de0:	d01f      	beq.n	400e22 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400de2:	68fb      	ldr	r3, [r7, #12]
  400de4:	681b      	ldr	r3, [r3, #0]
  400de6:	2b00      	cmp	r3, #0
  400de8:	d108      	bne.n	400dfc <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
  400dea:	4b17      	ldr	r3, [pc, #92]	; (400e48 <xQueueGenericReceive+0x19c>)
  400dec:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400dee:	68fb      	ldr	r3, [r7, #12]
  400df0:	685b      	ldr	r3, [r3, #4]
  400df2:	4618      	mov	r0, r3
  400df4:	4b1e      	ldr	r3, [pc, #120]	; (400e70 <xQueueGenericReceive+0x1c4>)
  400df6:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
  400df8:	4b18      	ldr	r3, [pc, #96]	; (400e5c <xQueueGenericReceive+0x1b0>)
  400dfa:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400dfc:	68fb      	ldr	r3, [r7, #12]
  400dfe:	3324      	adds	r3, #36	; 0x24
  400e00:	687a      	ldr	r2, [r7, #4]
  400e02:	4611      	mov	r1, r2
  400e04:	4618      	mov	r0, r3
  400e06:	4b1b      	ldr	r3, [pc, #108]	; (400e74 <xQueueGenericReceive+0x1c8>)
  400e08:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400e0a:	68f8      	ldr	r0, [r7, #12]
  400e0c:	4b1a      	ldr	r3, [pc, #104]	; (400e78 <xQueueGenericReceive+0x1cc>)
  400e0e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400e10:	4b1a      	ldr	r3, [pc, #104]	; (400e7c <xQueueGenericReceive+0x1d0>)
  400e12:	4798      	blx	r3
  400e14:	4603      	mov	r3, r0
  400e16:	2b00      	cmp	r3, #0
  400e18:	f47f af68 	bne.w	400cec <xQueueGenericReceive+0x40>
				{
					portYIELD_WITHIN_API();
  400e1c:	4b0e      	ldr	r3, [pc, #56]	; (400e58 <xQueueGenericReceive+0x1ac>)
  400e1e:	4798      	blx	r3
  400e20:	e764      	b.n	400cec <xQueueGenericReceive+0x40>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400e22:	68f8      	ldr	r0, [r7, #12]
  400e24:	4b14      	ldr	r3, [pc, #80]	; (400e78 <xQueueGenericReceive+0x1cc>)
  400e26:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400e28:	4b14      	ldr	r3, [pc, #80]	; (400e7c <xQueueGenericReceive+0x1d0>)
  400e2a:	4798      	blx	r3
  400e2c:	e75e      	b.n	400cec <xQueueGenericReceive+0x40>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  400e2e:	68f8      	ldr	r0, [r7, #12]
  400e30:	4b11      	ldr	r3, [pc, #68]	; (400e78 <xQueueGenericReceive+0x1cc>)
  400e32:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400e34:	4b11      	ldr	r3, [pc, #68]	; (400e7c <xQueueGenericReceive+0x1d0>)
  400e36:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  400e38:	2300      	movs	r3, #0
		}
	}
}
  400e3a:	4618      	mov	r0, r3
  400e3c:	3720      	adds	r7, #32
  400e3e:	46bd      	mov	sp, r7
  400e40:	bd80      	pop	{r7, pc}
  400e42:	bf00      	nop
  400e44:	0040059d 	.word	0x0040059d
  400e48:	00400555 	.word	0x00400555
  400e4c:	00400f41 	.word	0x00400f41
  400e50:	00401be9 	.word	0x00401be9
  400e54:	00401771 	.word	0x00401771
  400e58:	00400539 	.word	0x00400539
  400e5c:	00400575 	.word	0x00400575
  400e60:	0040182d 	.word	0x0040182d
  400e64:	00401331 	.word	0x00401331
  400e68:	00401869 	.word	0x00401869
  400e6c:	00401039 	.word	0x00401039
  400e70:	00401c45 	.word	0x00401c45
  400e74:	00401689 	.word	0x00401689
  400e78:	00400f91 	.word	0x00400f91
  400e7c:	0040134d 	.word	0x0040134d

00400e80 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
  400e80:	b580      	push	{r7, lr}
  400e82:	b084      	sub	sp, #16
  400e84:	af00      	add	r7, sp, #0
  400e86:	60f8      	str	r0, [r7, #12]
  400e88:	60b9      	str	r1, [r7, #8]
  400e8a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
  400e8c:	68fb      	ldr	r3, [r7, #12]
  400e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400e90:	2b00      	cmp	r3, #0
  400e92:	d10c      	bne.n	400eae <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400e94:	68fb      	ldr	r3, [r7, #12]
  400e96:	681b      	ldr	r3, [r3, #0]
  400e98:	2b00      	cmp	r3, #0
  400e9a:	d143      	bne.n	400f24 <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400e9c:	68fb      	ldr	r3, [r7, #12]
  400e9e:	685b      	ldr	r3, [r3, #4]
  400ea0:	4618      	mov	r0, r3
  400ea2:	4b25      	ldr	r3, [pc, #148]	; (400f38 <prvCopyDataToQueue+0xb8>)
  400ea4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400ea6:	68fb      	ldr	r3, [r7, #12]
  400ea8:	2200      	movs	r2, #0
  400eaa:	605a      	str	r2, [r3, #4]
  400eac:	e03a      	b.n	400f24 <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
  400eae:	687b      	ldr	r3, [r7, #4]
  400eb0:	2b00      	cmp	r3, #0
  400eb2:	d119      	bne.n	400ee8 <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400eb4:	68fb      	ldr	r3, [r7, #12]
  400eb6:	6898      	ldr	r0, [r3, #8]
  400eb8:	68fb      	ldr	r3, [r7, #12]
  400eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ebc:	461a      	mov	r2, r3
  400ebe:	68b9      	ldr	r1, [r7, #8]
  400ec0:	4b1e      	ldr	r3, [pc, #120]	; (400f3c <prvCopyDataToQueue+0xbc>)
  400ec2:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400ec4:	68fb      	ldr	r3, [r7, #12]
  400ec6:	689a      	ldr	r2, [r3, #8]
  400ec8:	68fb      	ldr	r3, [r7, #12]
  400eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ecc:	441a      	add	r2, r3
  400ece:	68fb      	ldr	r3, [r7, #12]
  400ed0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
  400ed2:	68fb      	ldr	r3, [r7, #12]
  400ed4:	689a      	ldr	r2, [r3, #8]
  400ed6:	68fb      	ldr	r3, [r7, #12]
  400ed8:	685b      	ldr	r3, [r3, #4]
  400eda:	429a      	cmp	r2, r3
  400edc:	d322      	bcc.n	400f24 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400ede:	68fb      	ldr	r3, [r7, #12]
  400ee0:	681a      	ldr	r2, [r3, #0]
  400ee2:	68fb      	ldr	r3, [r7, #12]
  400ee4:	609a      	str	r2, [r3, #8]
  400ee6:	e01d      	b.n	400f24 <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
  400ee8:	68fb      	ldr	r3, [r7, #12]
  400eea:	68d8      	ldr	r0, [r3, #12]
  400eec:	68fb      	ldr	r3, [r7, #12]
  400eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400ef0:	461a      	mov	r2, r3
  400ef2:	68b9      	ldr	r1, [r7, #8]
  400ef4:	4b11      	ldr	r3, [pc, #68]	; (400f3c <prvCopyDataToQueue+0xbc>)
  400ef6:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
  400ef8:	68fb      	ldr	r3, [r7, #12]
  400efa:	68da      	ldr	r2, [r3, #12]
  400efc:	68fb      	ldr	r3, [r7, #12]
  400efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f00:	425b      	negs	r3, r3
  400f02:	441a      	add	r2, r3
  400f04:	68fb      	ldr	r3, [r7, #12]
  400f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
  400f08:	68fb      	ldr	r3, [r7, #12]
  400f0a:	68da      	ldr	r2, [r3, #12]
  400f0c:	68fb      	ldr	r3, [r7, #12]
  400f0e:	681b      	ldr	r3, [r3, #0]
  400f10:	429a      	cmp	r2, r3
  400f12:	d207      	bcs.n	400f24 <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400f14:	68fb      	ldr	r3, [r7, #12]
  400f16:	685a      	ldr	r2, [r3, #4]
  400f18:	68fb      	ldr	r3, [r7, #12]
  400f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f1c:	425b      	negs	r3, r3
  400f1e:	441a      	add	r2, r3
  400f20:	68fb      	ldr	r3, [r7, #12]
  400f22:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400f24:	68fb      	ldr	r3, [r7, #12]
  400f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  400f28:	1c5a      	adds	r2, r3, #1
  400f2a:	68fb      	ldr	r3, [r7, #12]
  400f2c:	639a      	str	r2, [r3, #56]	; 0x38
}
  400f2e:	bf00      	nop
  400f30:	3710      	adds	r7, #16
  400f32:	46bd      	mov	sp, r7
  400f34:	bd80      	pop	{r7, pc}
  400f36:	bf00      	nop
  400f38:	00401cf9 	.word	0x00401cf9
  400f3c:	004057d1 	.word	0x004057d1

00400f40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
  400f40:	b580      	push	{r7, lr}
  400f42:	b082      	sub	sp, #8
  400f44:	af00      	add	r7, sp, #0
  400f46:	6078      	str	r0, [r7, #4]
  400f48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
  400f4a:	687b      	ldr	r3, [r7, #4]
  400f4c:	681b      	ldr	r3, [r3, #0]
  400f4e:	2b00      	cmp	r3, #0
  400f50:	d018      	beq.n	400f84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
  400f52:	687b      	ldr	r3, [r7, #4]
  400f54:	68da      	ldr	r2, [r3, #12]
  400f56:	687b      	ldr	r3, [r7, #4]
  400f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f5a:	441a      	add	r2, r3
  400f5c:	687b      	ldr	r3, [r7, #4]
  400f5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
  400f60:	687b      	ldr	r3, [r7, #4]
  400f62:	68da      	ldr	r2, [r3, #12]
  400f64:	687b      	ldr	r3, [r7, #4]
  400f66:	685b      	ldr	r3, [r3, #4]
  400f68:	429a      	cmp	r2, r3
  400f6a:	d303      	bcc.n	400f74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
  400f6c:	687b      	ldr	r3, [r7, #4]
  400f6e:	681a      	ldr	r2, [r3, #0]
  400f70:	687b      	ldr	r3, [r7, #4]
  400f72:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
  400f74:	687b      	ldr	r3, [r7, #4]
  400f76:	68d9      	ldr	r1, [r3, #12]
  400f78:	687b      	ldr	r3, [r7, #4]
  400f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  400f7c:	461a      	mov	r2, r3
  400f7e:	6838      	ldr	r0, [r7, #0]
  400f80:	4b02      	ldr	r3, [pc, #8]	; (400f8c <prvCopyDataFromQueue+0x4c>)
  400f82:	4798      	blx	r3
	}
}
  400f84:	bf00      	nop
  400f86:	3708      	adds	r7, #8
  400f88:	46bd      	mov	sp, r7
  400f8a:	bd80      	pop	{r7, pc}
  400f8c:	004057d1 	.word	0x004057d1

00400f90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
  400f90:	b580      	push	{r7, lr}
  400f92:	b082      	sub	sp, #8
  400f94:	af00      	add	r7, sp, #0
  400f96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400f98:	4b23      	ldr	r3, [pc, #140]	; (401028 <prvUnlockQueue+0x98>)
  400f9a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400f9c:	e012      	b.n	400fc4 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f9e:	687b      	ldr	r3, [r7, #4]
  400fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  400fa2:	2b00      	cmp	r3, #0
  400fa4:	d013      	beq.n	400fce <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400fa6:	687b      	ldr	r3, [r7, #4]
  400fa8:	3324      	adds	r3, #36	; 0x24
  400faa:	4618      	mov	r0, r3
  400fac:	4b1f      	ldr	r3, [pc, #124]	; (40102c <prvUnlockQueue+0x9c>)
  400fae:	4798      	blx	r3
  400fb0:	4603      	mov	r3, r0
  400fb2:	2b00      	cmp	r3, #0
  400fb4:	d001      	beq.n	400fba <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
  400fb6:	4b1e      	ldr	r3, [pc, #120]	; (401030 <prvUnlockQueue+0xa0>)
  400fb8:	4798      	blx	r3
				}

				--( pxQueue->xTxLock );
  400fba:	687b      	ldr	r3, [r7, #4]
  400fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400fbe:	1e5a      	subs	r2, r3, #1
  400fc0:	687b      	ldr	r3, [r7, #4]
  400fc2:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400fc4:	687b      	ldr	r3, [r7, #4]
  400fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  400fc8:	2b00      	cmp	r3, #0
  400fca:	dce8      	bgt.n	400f9e <prvUnlockQueue+0xe>
  400fcc:	e000      	b.n	400fd0 <prvUnlockQueue+0x40>
			}
			else
			{
				break;
  400fce:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400fd0:	687b      	ldr	r3, [r7, #4]
  400fd2:	f04f 32ff 	mov.w	r2, #4294967295
  400fd6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400fd8:	4b16      	ldr	r3, [pc, #88]	; (401034 <prvUnlockQueue+0xa4>)
  400fda:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400fdc:	4b12      	ldr	r3, [pc, #72]	; (401028 <prvUnlockQueue+0x98>)
  400fde:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400fe0:	e012      	b.n	401008 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400fe2:	687b      	ldr	r3, [r7, #4]
  400fe4:	691b      	ldr	r3, [r3, #16]
  400fe6:	2b00      	cmp	r3, #0
  400fe8:	d013      	beq.n	401012 <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400fea:	687b      	ldr	r3, [r7, #4]
  400fec:	3310      	adds	r3, #16
  400fee:	4618      	mov	r0, r3
  400ff0:	4b0e      	ldr	r3, [pc, #56]	; (40102c <prvUnlockQueue+0x9c>)
  400ff2:	4798      	blx	r3
  400ff4:	4603      	mov	r3, r0
  400ff6:	2b00      	cmp	r3, #0
  400ff8:	d001      	beq.n	400ffe <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
  400ffa:	4b0d      	ldr	r3, [pc, #52]	; (401030 <prvUnlockQueue+0xa0>)
  400ffc:	4798      	blx	r3
				}

				--( pxQueue->xRxLock );
  400ffe:	687b      	ldr	r3, [r7, #4]
  401000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  401002:	1e5a      	subs	r2, r3, #1
  401004:	687b      	ldr	r3, [r7, #4]
  401006:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401008:	687b      	ldr	r3, [r7, #4]
  40100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  40100c:	2b00      	cmp	r3, #0
  40100e:	dce8      	bgt.n	400fe2 <prvUnlockQueue+0x52>
  401010:	e000      	b.n	401014 <prvUnlockQueue+0x84>
			}
			else
			{
				break;
  401012:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  401014:	687b      	ldr	r3, [r7, #4]
  401016:	f04f 32ff 	mov.w	r2, #4294967295
  40101a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  40101c:	4b05      	ldr	r3, [pc, #20]	; (401034 <prvUnlockQueue+0xa4>)
  40101e:	4798      	blx	r3
}
  401020:	bf00      	nop
  401022:	3708      	adds	r7, #8
  401024:	46bd      	mov	sp, r7
  401026:	bd80      	pop	{r7, pc}
  401028:	00400555 	.word	0x00400555
  40102c:	00401771 	.word	0x00401771
  401030:	0040191d 	.word	0x0040191d
  401034:	00400575 	.word	0x00400575

00401038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
  401038:	b580      	push	{r7, lr}
  40103a:	b084      	sub	sp, #16
  40103c:	af00      	add	r7, sp, #0
  40103e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  401040:	4b08      	ldr	r3, [pc, #32]	; (401064 <prvIsQueueEmpty+0x2c>)
  401042:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
  401044:	687b      	ldr	r3, [r7, #4]
  401046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401048:	2b00      	cmp	r3, #0
  40104a:	bf0c      	ite	eq
  40104c:	2301      	moveq	r3, #1
  40104e:	2300      	movne	r3, #0
  401050:	b2db      	uxtb	r3, r3
  401052:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  401054:	4b04      	ldr	r3, [pc, #16]	; (401068 <prvIsQueueEmpty+0x30>)
  401056:	4798      	blx	r3

	return xReturn;
  401058:	68fb      	ldr	r3, [r7, #12]
}
  40105a:	4618      	mov	r0, r3
  40105c:	3710      	adds	r7, #16
  40105e:	46bd      	mov	sp, r7
  401060:	bd80      	pop	{r7, pc}
  401062:	bf00      	nop
  401064:	00400555 	.word	0x00400555
  401068:	00400575 	.word	0x00400575

0040106c <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
  40106c:	b580      	push	{r7, lr}
  40106e:	b084      	sub	sp, #16
  401070:	af00      	add	r7, sp, #0
  401072:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
  401074:	4b09      	ldr	r3, [pc, #36]	; (40109c <prvIsQueueFull+0x30>)
  401076:	4798      	blx	r3
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
  401078:	687b      	ldr	r3, [r7, #4]
  40107a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40107c:	687b      	ldr	r3, [r7, #4]
  40107e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  401080:	429a      	cmp	r2, r3
  401082:	bf0c      	ite	eq
  401084:	2301      	moveq	r3, #1
  401086:	2300      	movne	r3, #0
  401088:	b2db      	uxtb	r3, r3
  40108a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
  40108c:	4b04      	ldr	r3, [pc, #16]	; (4010a0 <prvIsQueueFull+0x34>)
  40108e:	4798      	blx	r3

	return xReturn;
  401090:	68fb      	ldr	r3, [r7, #12]
}
  401092:	4618      	mov	r0, r3
  401094:	3710      	adds	r7, #16
  401096:	46bd      	mov	sp, r7
  401098:	bd80      	pop	{r7, pc}
  40109a:	bf00      	nop
  40109c:	00400555 	.word	0x00400555
  4010a0:	00400575 	.word	0x00400575

004010a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
  4010a4:	b580      	push	{r7, lr}
  4010a6:	b082      	sub	sp, #8
  4010a8:	af00      	add	r7, sp, #0
  4010aa:	6078      	str	r0, [r7, #4]
  4010ac:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  4010ae:	4b12      	ldr	r3, [pc, #72]	; (4010f8 <vQueueWaitForMessageRestricted+0x54>)
  4010b0:	4798      	blx	r3
  4010b2:	687b      	ldr	r3, [r7, #4]
  4010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  4010b6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010ba:	d102      	bne.n	4010c2 <vQueueWaitForMessageRestricted+0x1e>
  4010bc:	687b      	ldr	r3, [r7, #4]
  4010be:	2200      	movs	r2, #0
  4010c0:	645a      	str	r2, [r3, #68]	; 0x44
  4010c2:	687b      	ldr	r3, [r7, #4]
  4010c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4010c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4010ca:	d102      	bne.n	4010d2 <vQueueWaitForMessageRestricted+0x2e>
  4010cc:	687b      	ldr	r3, [r7, #4]
  4010ce:	2200      	movs	r2, #0
  4010d0:	649a      	str	r2, [r3, #72]	; 0x48
  4010d2:	4b0a      	ldr	r3, [pc, #40]	; (4010fc <vQueueWaitForMessageRestricted+0x58>)
  4010d4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
  4010d6:	687b      	ldr	r3, [r7, #4]
  4010d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4010da:	2b00      	cmp	r3, #0
  4010dc:	d105      	bne.n	4010ea <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4010de:	687b      	ldr	r3, [r7, #4]
  4010e0:	3324      	adds	r3, #36	; 0x24
  4010e2:	6839      	ldr	r1, [r7, #0]
  4010e4:	4618      	mov	r0, r3
  4010e6:	4b06      	ldr	r3, [pc, #24]	; (401100 <vQueueWaitForMessageRestricted+0x5c>)
  4010e8:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
  4010ea:	6878      	ldr	r0, [r7, #4]
  4010ec:	4b05      	ldr	r3, [pc, #20]	; (401104 <vQueueWaitForMessageRestricted+0x60>)
  4010ee:	4798      	blx	r3
	}
  4010f0:	bf00      	nop
  4010f2:	3708      	adds	r7, #8
  4010f4:	46bd      	mov	sp, r7
  4010f6:	bd80      	pop	{r7, pc}
  4010f8:	00400555 	.word	0x00400555
  4010fc:	00400575 	.word	0x00400575
  401100:	0040170d 	.word	0x0040170d
  401104:	00400f91 	.word	0x00400f91

00401108 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
  401108:	b590      	push	{r4, r7, lr}
  40110a:	b08b      	sub	sp, #44	; 0x2c
  40110c:	af02      	add	r7, sp, #8
  40110e:	60f8      	str	r0, [r7, #12]
  401110:	60b9      	str	r1, [r7, #8]
  401112:	603b      	str	r3, [r7, #0]
  401114:	4613      	mov	r3, r2
  401116:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
  401118:	68fb      	ldr	r3, [r7, #12]
  40111a:	2b00      	cmp	r3, #0
  40111c:	d103      	bne.n	401126 <xTaskGenericCreate+0x1e>
  40111e:	4b54      	ldr	r3, [pc, #336]	; (401270 <xTaskGenericCreate+0x168>)
  401120:	4798      	blx	r3
  401122:	bf00      	nop
  401124:	e7fd      	b.n	401122 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
  401126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  401128:	2b04      	cmp	r3, #4
  40112a:	d903      	bls.n	401134 <xTaskGenericCreate+0x2c>
  40112c:	4b50      	ldr	r3, [pc, #320]	; (401270 <xTaskGenericCreate+0x168>)
  40112e:	4798      	blx	r3
  401130:	bf00      	nop
  401132:	e7fd      	b.n	401130 <xTaskGenericCreate+0x28>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  401134:	88fb      	ldrh	r3, [r7, #6]
  401136:	6bb9      	ldr	r1, [r7, #56]	; 0x38
  401138:	4618      	mov	r0, r3
  40113a:	4b4e      	ldr	r3, [pc, #312]	; (401274 <xTaskGenericCreate+0x16c>)
  40113c:	4798      	blx	r3
  40113e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
  401140:	69bb      	ldr	r3, [r7, #24]
  401142:	2b00      	cmp	r3, #0
  401144:	d07d      	beq.n	401242 <xTaskGenericCreate+0x13a>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
  401146:	69bb      	ldr	r3, [r7, #24]
  401148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40114a:	88f9      	ldrh	r1, [r7, #6]
  40114c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  401150:	440b      	add	r3, r1
  401152:	009b      	lsls	r3, r3, #2
  401154:	4413      	add	r3, r2
  401156:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
  401158:	697b      	ldr	r3, [r7, #20]
  40115a:	f023 0307 	bic.w	r3, r3, #7
  40115e:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
  401160:	697b      	ldr	r3, [r7, #20]
  401162:	f003 0307 	and.w	r3, r3, #7
  401166:	2b00      	cmp	r3, #0
  401168:	d003      	beq.n	401172 <xTaskGenericCreate+0x6a>
  40116a:	4b41      	ldr	r3, [pc, #260]	; (401270 <xTaskGenericCreate+0x168>)
  40116c:	4798      	blx	r3
  40116e:	bf00      	nop
  401170:	e7fd      	b.n	40116e <xTaskGenericCreate+0x66>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  401172:	88fb      	ldrh	r3, [r7, #6]
  401174:	9300      	str	r3, [sp, #0]
  401176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  401178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40117a:	68b9      	ldr	r1, [r7, #8]
  40117c:	69b8      	ldr	r0, [r7, #24]
  40117e:	4c3e      	ldr	r4, [pc, #248]	; (401278 <xTaskGenericCreate+0x170>)
  401180:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401182:	683a      	ldr	r2, [r7, #0]
  401184:	68f9      	ldr	r1, [r7, #12]
  401186:	6978      	ldr	r0, [r7, #20]
  401188:	4b3c      	ldr	r3, [pc, #240]	; (40127c <xTaskGenericCreate+0x174>)
  40118a:	4798      	blx	r3
  40118c:	4602      	mov	r2, r0
  40118e:	69bb      	ldr	r3, [r7, #24]
  401190:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
  401192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  401194:	2b00      	cmp	r3, #0
  401196:	d002      	beq.n	40119e <xTaskGenericCreate+0x96>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
  401198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  40119a:	69ba      	ldr	r2, [r7, #24]
  40119c:	601a      	str	r2, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
  40119e:	4b38      	ldr	r3, [pc, #224]	; (401280 <xTaskGenericCreate+0x178>)
  4011a0:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4011a2:	4b38      	ldr	r3, [pc, #224]	; (401284 <xTaskGenericCreate+0x17c>)
  4011a4:	681b      	ldr	r3, [r3, #0]
  4011a6:	3301      	adds	r3, #1
  4011a8:	4a36      	ldr	r2, [pc, #216]	; (401284 <xTaskGenericCreate+0x17c>)
  4011aa:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4011ac:	4b36      	ldr	r3, [pc, #216]	; (401288 <xTaskGenericCreate+0x180>)
  4011ae:	681b      	ldr	r3, [r3, #0]
  4011b0:	2b00      	cmp	r3, #0
  4011b2:	d109      	bne.n	4011c8 <xTaskGenericCreate+0xc0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4011b4:	4a34      	ldr	r2, [pc, #208]	; (401288 <xTaskGenericCreate+0x180>)
  4011b6:	69bb      	ldr	r3, [r7, #24]
  4011b8:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
  4011ba:	4b32      	ldr	r3, [pc, #200]	; (401284 <xTaskGenericCreate+0x17c>)
  4011bc:	681b      	ldr	r3, [r3, #0]
  4011be:	2b01      	cmp	r3, #1
  4011c0:	d10f      	bne.n	4011e2 <xTaskGenericCreate+0xda>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
  4011c2:	4b32      	ldr	r3, [pc, #200]	; (40128c <xTaskGenericCreate+0x184>)
  4011c4:	4798      	blx	r3
  4011c6:	e00c      	b.n	4011e2 <xTaskGenericCreate+0xda>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  4011c8:	4b31      	ldr	r3, [pc, #196]	; (401290 <xTaskGenericCreate+0x188>)
  4011ca:	681b      	ldr	r3, [r3, #0]
  4011cc:	2b00      	cmp	r3, #0
  4011ce:	d108      	bne.n	4011e2 <xTaskGenericCreate+0xda>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  4011d0:	4b2d      	ldr	r3, [pc, #180]	; (401288 <xTaskGenericCreate+0x180>)
  4011d2:	681b      	ldr	r3, [r3, #0]
  4011d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4011d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4011d8:	429a      	cmp	r2, r3
  4011da:	d802      	bhi.n	4011e2 <xTaskGenericCreate+0xda>
					{
						pxCurrentTCB = pxNewTCB;
  4011dc:	4a2a      	ldr	r2, [pc, #168]	; (401288 <xTaskGenericCreate+0x180>)
  4011de:	69bb      	ldr	r3, [r7, #24]
  4011e0:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
  4011e2:	69bb      	ldr	r3, [r7, #24]
  4011e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4011e6:	4b2b      	ldr	r3, [pc, #172]	; (401294 <xTaskGenericCreate+0x18c>)
  4011e8:	681b      	ldr	r3, [r3, #0]
  4011ea:	429a      	cmp	r2, r3
  4011ec:	d903      	bls.n	4011f6 <xTaskGenericCreate+0xee>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
  4011ee:	69bb      	ldr	r3, [r7, #24]
  4011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4011f2:	4a28      	ldr	r2, [pc, #160]	; (401294 <xTaskGenericCreate+0x18c>)
  4011f4:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4011f6:	4b28      	ldr	r3, [pc, #160]	; (401298 <xTaskGenericCreate+0x190>)
  4011f8:	681a      	ldr	r2, [r3, #0]
  4011fa:	69bb      	ldr	r3, [r7, #24]
  4011fc:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
  4011fe:	4b26      	ldr	r3, [pc, #152]	; (401298 <xTaskGenericCreate+0x190>)
  401200:	681b      	ldr	r3, [r3, #0]
  401202:	3301      	adds	r3, #1
  401204:	4a24      	ldr	r2, [pc, #144]	; (401298 <xTaskGenericCreate+0x190>)
  401206:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
  401208:	69bb      	ldr	r3, [r7, #24]
  40120a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40120c:	4b23      	ldr	r3, [pc, #140]	; (40129c <xTaskGenericCreate+0x194>)
  40120e:	681b      	ldr	r3, [r3, #0]
  401210:	429a      	cmp	r2, r3
  401212:	d903      	bls.n	40121c <xTaskGenericCreate+0x114>
  401214:	69bb      	ldr	r3, [r7, #24]
  401216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401218:	4a20      	ldr	r2, [pc, #128]	; (40129c <xTaskGenericCreate+0x194>)
  40121a:	6013      	str	r3, [r2, #0]
  40121c:	69bb      	ldr	r3, [r7, #24]
  40121e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401220:	4613      	mov	r3, r2
  401222:	009b      	lsls	r3, r3, #2
  401224:	4413      	add	r3, r2
  401226:	009b      	lsls	r3, r3, #2
  401228:	4a1d      	ldr	r2, [pc, #116]	; (4012a0 <xTaskGenericCreate+0x198>)
  40122a:	441a      	add	r2, r3
  40122c:	69bb      	ldr	r3, [r7, #24]
  40122e:	3304      	adds	r3, #4
  401230:	4619      	mov	r1, r3
  401232:	4610      	mov	r0, r2
  401234:	4b1b      	ldr	r3, [pc, #108]	; (4012a4 <xTaskGenericCreate+0x19c>)
  401236:	4798      	blx	r3

			xReturn = pdPASS;
  401238:	2301      	movs	r3, #1
  40123a:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  40123c:	4b1a      	ldr	r3, [pc, #104]	; (4012a8 <xTaskGenericCreate+0x1a0>)
  40123e:	4798      	blx	r3
  401240:	e002      	b.n	401248 <xTaskGenericCreate+0x140>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401242:	f04f 33ff 	mov.w	r3, #4294967295
  401246:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
  401248:	69fb      	ldr	r3, [r7, #28]
  40124a:	2b01      	cmp	r3, #1
  40124c:	d10b      	bne.n	401266 <xTaskGenericCreate+0x15e>
	{
		if( xSchedulerRunning != pdFALSE )
  40124e:	4b10      	ldr	r3, [pc, #64]	; (401290 <xTaskGenericCreate+0x188>)
  401250:	681b      	ldr	r3, [r3, #0]
  401252:	2b00      	cmp	r3, #0
  401254:	d007      	beq.n	401266 <xTaskGenericCreate+0x15e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401256:	4b0c      	ldr	r3, [pc, #48]	; (401288 <xTaskGenericCreate+0x180>)
  401258:	681b      	ldr	r3, [r3, #0]
  40125a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40125c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40125e:	429a      	cmp	r2, r3
  401260:	d201      	bcs.n	401266 <xTaskGenericCreate+0x15e>
			{
				portYIELD_WITHIN_API();
  401262:	4b12      	ldr	r3, [pc, #72]	; (4012ac <xTaskGenericCreate+0x1a4>)
  401264:	4798      	blx	r3
			}
		}
	}

	return xReturn;
  401266:	69fb      	ldr	r3, [r7, #28]
}
  401268:	4618      	mov	r0, r3
  40126a:	3724      	adds	r7, #36	; 0x24
  40126c:	46bd      	mov	sp, r7
  40126e:	bd90      	pop	{r4, r7, pc}
  401270:	0040059d 	.word	0x0040059d
  401274:	00401b55 	.word	0x00401b55
  401278:	0040195d 	.word	0x0040195d
  40127c:	00400449 	.word	0x00400449
  401280:	00400555 	.word	0x00400555
  401284:	2040aaec 	.word	0x2040aaec
  401288:	2040aa14 	.word	0x2040aa14
  40128c:	004019d1 	.word	0x004019d1
  401290:	2040aafc 	.word	0x2040aafc
  401294:	2040aaf4 	.word	0x2040aaf4
  401298:	2040ab10 	.word	0x2040ab10
  40129c:	2040aaf8 	.word	0x2040aaf8
  4012a0:	2040aa18 	.word	0x2040aa18
  4012a4:	0040028b 	.word	0x0040028b
  4012a8:	00400575 	.word	0x00400575
  4012ac:	00400539 	.word	0x00400539

004012b0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
  4012b0:	b590      	push	{r4, r7, lr}
  4012b2:	b087      	sub	sp, #28
  4012b4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
  4012b6:	2300      	movs	r3, #0
  4012b8:	9303      	str	r3, [sp, #12]
  4012ba:	2300      	movs	r3, #0
  4012bc:	9302      	str	r3, [sp, #8]
  4012be:	2300      	movs	r3, #0
  4012c0:	9301      	str	r3, [sp, #4]
  4012c2:	2300      	movs	r3, #0
  4012c4:	9300      	str	r3, [sp, #0]
  4012c6:	2300      	movs	r3, #0
  4012c8:	2282      	movs	r2, #130	; 0x82
  4012ca:	4911      	ldr	r1, [pc, #68]	; (401310 <vTaskStartScheduler+0x60>)
  4012cc:	4811      	ldr	r0, [pc, #68]	; (401314 <vTaskStartScheduler+0x64>)
  4012ce:	4c12      	ldr	r4, [pc, #72]	; (401318 <vTaskStartScheduler+0x68>)
  4012d0:	47a0      	blx	r4
  4012d2:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  4012d4:	687b      	ldr	r3, [r7, #4]
  4012d6:	2b01      	cmp	r3, #1
  4012d8:	d102      	bne.n	4012e0 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
  4012da:	4b10      	ldr	r3, [pc, #64]	; (40131c <vTaskStartScheduler+0x6c>)
  4012dc:	4798      	blx	r3
  4012de:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
  4012e0:	687b      	ldr	r3, [r7, #4]
  4012e2:	2b01      	cmp	r3, #1
  4012e4:	d109      	bne.n	4012fa <vTaskStartScheduler+0x4a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
  4012e6:	4b0e      	ldr	r3, [pc, #56]	; (401320 <vTaskStartScheduler+0x70>)
  4012e8:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
  4012ea:	4b0e      	ldr	r3, [pc, #56]	; (401324 <vTaskStartScheduler+0x74>)
  4012ec:	2201      	movs	r2, #1
  4012ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
  4012f0:	4b0d      	ldr	r3, [pc, #52]	; (401328 <vTaskStartScheduler+0x78>)
  4012f2:	2200      	movs	r2, #0
  4012f4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  4012f6:	4b0d      	ldr	r3, [pc, #52]	; (40132c <vTaskStartScheduler+0x7c>)
  4012f8:	4798      	blx	r3
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
  4012fa:	687b      	ldr	r3, [r7, #4]
  4012fc:	2b00      	cmp	r3, #0
  4012fe:	d103      	bne.n	401308 <vTaskStartScheduler+0x58>
  401300:	4b07      	ldr	r3, [pc, #28]	; (401320 <vTaskStartScheduler+0x70>)
  401302:	4798      	blx	r3
  401304:	bf00      	nop
  401306:	e7fd      	b.n	401304 <vTaskStartScheduler+0x54>
}
  401308:	bf00      	nop
  40130a:	370c      	adds	r7, #12
  40130c:	46bd      	mov	sp, r7
  40130e:	bd90      	pop	{r4, r7, pc}
  401310:	004087e4 	.word	0x004087e4
  401314:	00401935 	.word	0x00401935
  401318:	00401109 	.word	0x00401109
  40131c:	00401d7d 	.word	0x00401d7d
  401320:	0040059d 	.word	0x0040059d
  401324:	2040aafc 	.word	0x2040aafc
  401328:	2040aaf0 	.word	0x2040aaf0
  40132c:	004004e1 	.word	0x004004e1

00401330 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  401330:	b480      	push	{r7}
  401332:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
  401334:	4b04      	ldr	r3, [pc, #16]	; (401348 <vTaskSuspendAll+0x18>)
  401336:	681b      	ldr	r3, [r3, #0]
  401338:	3301      	adds	r3, #1
  40133a:	4a03      	ldr	r2, [pc, #12]	; (401348 <vTaskSuspendAll+0x18>)
  40133c:	6013      	str	r3, [r2, #0]
}
  40133e:	bf00      	nop
  401340:	46bd      	mov	sp, r7
  401342:	f85d 7b04 	ldr.w	r7, [sp], #4
  401346:	4770      	bx	lr
  401348:	2040ab00 	.word	0x2040ab00

0040134c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
  40134c:	b590      	push	{r4, r7, lr}
  40134e:	b083      	sub	sp, #12
  401350:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
  401352:	2300      	movs	r3, #0
  401354:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401356:	4b36      	ldr	r3, [pc, #216]	; (401430 <xTaskResumeAll+0xe4>)
  401358:	681b      	ldr	r3, [r3, #0]
  40135a:	2b00      	cmp	r3, #0
  40135c:	d103      	bne.n	401366 <xTaskResumeAll+0x1a>
  40135e:	4b35      	ldr	r3, [pc, #212]	; (401434 <xTaskResumeAll+0xe8>)
  401360:	4798      	blx	r3
  401362:	bf00      	nop
  401364:	e7fd      	b.n	401362 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401366:	4b34      	ldr	r3, [pc, #208]	; (401438 <xTaskResumeAll+0xec>)
  401368:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  40136a:	4b31      	ldr	r3, [pc, #196]	; (401430 <xTaskResumeAll+0xe4>)
  40136c:	681b      	ldr	r3, [r3, #0]
  40136e:	3b01      	subs	r3, #1
  401370:	4a2f      	ldr	r2, [pc, #188]	; (401430 <xTaskResumeAll+0xe4>)
  401372:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401374:	4b2e      	ldr	r3, [pc, #184]	; (401430 <xTaskResumeAll+0xe4>)
  401376:	681b      	ldr	r3, [r3, #0]
  401378:	2b00      	cmp	r3, #0
  40137a:	d152      	bne.n	401422 <xTaskResumeAll+0xd6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
  40137c:	4b2f      	ldr	r3, [pc, #188]	; (40143c <xTaskResumeAll+0xf0>)
  40137e:	681b      	ldr	r3, [r3, #0]
  401380:	2b00      	cmp	r3, #0
  401382:	d04e      	beq.n	401422 <xTaskResumeAll+0xd6>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
  401384:	2300      	movs	r3, #0
  401386:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  401388:	e027      	b.n	4013da <xTaskResumeAll+0x8e>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
  40138a:	4b2d      	ldr	r3, [pc, #180]	; (401440 <xTaskResumeAll+0xf4>)
  40138c:	68db      	ldr	r3, [r3, #12]
  40138e:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
  401390:	f104 0318 	add.w	r3, r4, #24
  401394:	4618      	mov	r0, r3
  401396:	4b2b      	ldr	r3, [pc, #172]	; (401444 <xTaskResumeAll+0xf8>)
  401398:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
  40139a:	1d23      	adds	r3, r4, #4
  40139c:	4618      	mov	r0, r3
  40139e:	4b29      	ldr	r3, [pc, #164]	; (401444 <xTaskResumeAll+0xf8>)
  4013a0:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
  4013a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4013a4:	4b28      	ldr	r3, [pc, #160]	; (401448 <xTaskResumeAll+0xfc>)
  4013a6:	681b      	ldr	r3, [r3, #0]
  4013a8:	429a      	cmp	r2, r3
  4013aa:	d902      	bls.n	4013b2 <xTaskResumeAll+0x66>
  4013ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4013ae:	4a26      	ldr	r2, [pc, #152]	; (401448 <xTaskResumeAll+0xfc>)
  4013b0:	6013      	str	r3, [r2, #0]
  4013b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4013b4:	4613      	mov	r3, r2
  4013b6:	009b      	lsls	r3, r3, #2
  4013b8:	4413      	add	r3, r2
  4013ba:	009b      	lsls	r3, r3, #2
  4013bc:	4a23      	ldr	r2, [pc, #140]	; (40144c <xTaskResumeAll+0x100>)
  4013be:	4413      	add	r3, r2
  4013c0:	1d22      	adds	r2, r4, #4
  4013c2:	4611      	mov	r1, r2
  4013c4:	4618      	mov	r0, r3
  4013c6:	4b22      	ldr	r3, [pc, #136]	; (401450 <xTaskResumeAll+0x104>)
  4013c8:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4013ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4013cc:	4b21      	ldr	r3, [pc, #132]	; (401454 <xTaskResumeAll+0x108>)
  4013ce:	681b      	ldr	r3, [r3, #0]
  4013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4013d2:	429a      	cmp	r2, r3
  4013d4:	d301      	bcc.n	4013da <xTaskResumeAll+0x8e>
					{
						xYieldRequired = pdTRUE;
  4013d6:	2301      	movs	r3, #1
  4013d8:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
  4013da:	4b19      	ldr	r3, [pc, #100]	; (401440 <xTaskResumeAll+0xf4>)
  4013dc:	681b      	ldr	r3, [r3, #0]
  4013de:	2b00      	cmp	r3, #0
  4013e0:	d1d3      	bne.n	40138a <xTaskResumeAll+0x3e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4013e2:	4b1d      	ldr	r3, [pc, #116]	; (401458 <xTaskResumeAll+0x10c>)
  4013e4:	681b      	ldr	r3, [r3, #0]
  4013e6:	2b00      	cmp	r3, #0
  4013e8:	d00d      	beq.n	401406 <xTaskResumeAll+0xba>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4013ea:	e006      	b.n	4013fa <xTaskResumeAll+0xae>
					{
						vTaskIncrementTick();
  4013ec:	4b1b      	ldr	r3, [pc, #108]	; (40145c <xTaskResumeAll+0x110>)
  4013ee:	4798      	blx	r3
						--uxMissedTicks;
  4013f0:	4b19      	ldr	r3, [pc, #100]	; (401458 <xTaskResumeAll+0x10c>)
  4013f2:	681b      	ldr	r3, [r3, #0]
  4013f4:	3b01      	subs	r3, #1
  4013f6:	4a18      	ldr	r2, [pc, #96]	; (401458 <xTaskResumeAll+0x10c>)
  4013f8:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
  4013fa:	4b17      	ldr	r3, [pc, #92]	; (401458 <xTaskResumeAll+0x10c>)
  4013fc:	681b      	ldr	r3, [r3, #0]
  4013fe:	2b00      	cmp	r3, #0
  401400:	d1f4      	bne.n	4013ec <xTaskResumeAll+0xa0>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
  401402:	2301      	movs	r3, #1
  401404:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
  401406:	683b      	ldr	r3, [r7, #0]
  401408:	2b01      	cmp	r3, #1
  40140a:	d003      	beq.n	401414 <xTaskResumeAll+0xc8>
  40140c:	4b14      	ldr	r3, [pc, #80]	; (401460 <xTaskResumeAll+0x114>)
  40140e:	681b      	ldr	r3, [r3, #0]
  401410:	2b01      	cmp	r3, #1
  401412:	d106      	bne.n	401422 <xTaskResumeAll+0xd6>
				{
					xAlreadyYielded = pdTRUE;
  401414:	2301      	movs	r3, #1
  401416:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
  401418:	4b11      	ldr	r3, [pc, #68]	; (401460 <xTaskResumeAll+0x114>)
  40141a:	2200      	movs	r2, #0
  40141c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
  40141e:	4b11      	ldr	r3, [pc, #68]	; (401464 <xTaskResumeAll+0x118>)
  401420:	4798      	blx	r3
				}
			}
		}
	}
	taskEXIT_CRITICAL();
  401422:	4b11      	ldr	r3, [pc, #68]	; (401468 <xTaskResumeAll+0x11c>)
  401424:	4798      	blx	r3

	return xAlreadyYielded;
  401426:	687b      	ldr	r3, [r7, #4]
}
  401428:	4618      	mov	r0, r3
  40142a:	370c      	adds	r7, #12
  40142c:	46bd      	mov	sp, r7
  40142e:	bd90      	pop	{r4, r7, pc}
  401430:	2040ab00 	.word	0x2040ab00
  401434:	0040059d 	.word	0x0040059d
  401438:	00400555 	.word	0x00400555
  40143c:	2040aaec 	.word	0x2040aaec
  401440:	2040aaac 	.word	0x2040aaac
  401444:	0040034d 	.word	0x0040034d
  401448:	2040aaf8 	.word	0x2040aaf8
  40144c:	2040aa18 	.word	0x2040aa18
  401450:	0040028b 	.word	0x0040028b
  401454:	2040aa14 	.word	0x2040aa14
  401458:	2040ab04 	.word	0x2040ab04
  40145c:	00401499 	.word	0x00401499
  401460:	2040ab08 	.word	0x2040ab08
  401464:	00400539 	.word	0x00400539
  401468:	00400575 	.word	0x00400575

0040146c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
  40146c:	b580      	push	{r7, lr}
  40146e:	b082      	sub	sp, #8
  401470:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
  401472:	4b06      	ldr	r3, [pc, #24]	; (40148c <xTaskGetTickCount+0x20>)
  401474:	4798      	blx	r3
	{
		xTicks = xTickCount;
  401476:	4b06      	ldr	r3, [pc, #24]	; (401490 <xTaskGetTickCount+0x24>)
  401478:	681b      	ldr	r3, [r3, #0]
  40147a:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
  40147c:	4b05      	ldr	r3, [pc, #20]	; (401494 <xTaskGetTickCount+0x28>)
  40147e:	4798      	blx	r3

	return xTicks;
  401480:	687b      	ldr	r3, [r7, #4]
}
  401482:	4618      	mov	r0, r3
  401484:	3708      	adds	r7, #8
  401486:	46bd      	mov	sp, r7
  401488:	bd80      	pop	{r7, pc}
  40148a:	bf00      	nop
  40148c:	00400555 	.word	0x00400555
  401490:	2040aaf0 	.word	0x2040aaf0
  401494:	00400575 	.word	0x00400575

00401498 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
  401498:	b580      	push	{r7, lr}
  40149a:	b084      	sub	sp, #16
  40149c:	af00      	add	r7, sp, #0

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  40149e:	4b45      	ldr	r3, [pc, #276]	; (4015b4 <vTaskIncrementTick+0x11c>)
  4014a0:	681b      	ldr	r3, [r3, #0]
  4014a2:	2b00      	cmp	r3, #0
  4014a4:	d17b      	bne.n	40159e <vTaskIncrementTick+0x106>
	{
		++xTickCount;
  4014a6:	4b44      	ldr	r3, [pc, #272]	; (4015b8 <vTaskIncrementTick+0x120>)
  4014a8:	681b      	ldr	r3, [r3, #0]
  4014aa:	3301      	adds	r3, #1
  4014ac:	4a42      	ldr	r2, [pc, #264]	; (4015b8 <vTaskIncrementTick+0x120>)
  4014ae:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
  4014b0:	4b41      	ldr	r3, [pc, #260]	; (4015b8 <vTaskIncrementTick+0x120>)
  4014b2:	681b      	ldr	r3, [r3, #0]
  4014b4:	2b00      	cmp	r3, #0
  4014b6:	d12a      	bne.n	40150e <vTaskIncrementTick+0x76>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
  4014b8:	4b40      	ldr	r3, [pc, #256]	; (4015bc <vTaskIncrementTick+0x124>)
  4014ba:	681b      	ldr	r3, [r3, #0]
  4014bc:	681b      	ldr	r3, [r3, #0]
  4014be:	2b00      	cmp	r3, #0
  4014c0:	d003      	beq.n	4014ca <vTaskIncrementTick+0x32>
  4014c2:	4b3f      	ldr	r3, [pc, #252]	; (4015c0 <vTaskIncrementTick+0x128>)
  4014c4:	4798      	blx	r3
  4014c6:	bf00      	nop
  4014c8:	e7fd      	b.n	4014c6 <vTaskIncrementTick+0x2e>

			pxTemp = pxDelayedTaskList;
  4014ca:	4b3c      	ldr	r3, [pc, #240]	; (4015bc <vTaskIncrementTick+0x124>)
  4014cc:	681b      	ldr	r3, [r3, #0]
  4014ce:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
  4014d0:	4b3c      	ldr	r3, [pc, #240]	; (4015c4 <vTaskIncrementTick+0x12c>)
  4014d2:	681b      	ldr	r3, [r3, #0]
  4014d4:	4a39      	ldr	r2, [pc, #228]	; (4015bc <vTaskIncrementTick+0x124>)
  4014d6:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
  4014d8:	4a3a      	ldr	r2, [pc, #232]	; (4015c4 <vTaskIncrementTick+0x12c>)
  4014da:	68fb      	ldr	r3, [r7, #12]
  4014dc:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
  4014de:	4b3a      	ldr	r3, [pc, #232]	; (4015c8 <vTaskIncrementTick+0x130>)
  4014e0:	681b      	ldr	r3, [r3, #0]
  4014e2:	3301      	adds	r3, #1
  4014e4:	4a38      	ldr	r2, [pc, #224]	; (4015c8 <vTaskIncrementTick+0x130>)
  4014e6:	6013      	str	r3, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4014e8:	4b34      	ldr	r3, [pc, #208]	; (4015bc <vTaskIncrementTick+0x124>)
  4014ea:	681b      	ldr	r3, [r3, #0]
  4014ec:	681b      	ldr	r3, [r3, #0]
  4014ee:	2b00      	cmp	r3, #0
  4014f0:	d104      	bne.n	4014fc <vTaskIncrementTick+0x64>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
  4014f2:	4b36      	ldr	r3, [pc, #216]	; (4015cc <vTaskIncrementTick+0x134>)
  4014f4:	f04f 32ff 	mov.w	r2, #4294967295
  4014f8:	601a      	str	r2, [r3, #0]
  4014fa:	e008      	b.n	40150e <vTaskIncrementTick+0x76>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4014fc:	4b2f      	ldr	r3, [pc, #188]	; (4015bc <vTaskIncrementTick+0x124>)
  4014fe:	681b      	ldr	r3, [r3, #0]
  401500:	68db      	ldr	r3, [r3, #12]
  401502:	68db      	ldr	r3, [r3, #12]
  401504:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401506:	68bb      	ldr	r3, [r7, #8]
  401508:	685b      	ldr	r3, [r3, #4]
  40150a:	4a30      	ldr	r2, [pc, #192]	; (4015cc <vTaskIncrementTick+0x134>)
  40150c:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
  40150e:	4b2a      	ldr	r3, [pc, #168]	; (4015b8 <vTaskIncrementTick+0x120>)
  401510:	681a      	ldr	r2, [r3, #0]
  401512:	4b2e      	ldr	r3, [pc, #184]	; (4015cc <vTaskIncrementTick+0x134>)
  401514:	681b      	ldr	r3, [r3, #0]
  401516:	429a      	cmp	r2, r3
  401518:	d347      	bcc.n	4015aa <vTaskIncrementTick+0x112>
  40151a:	4b28      	ldr	r3, [pc, #160]	; (4015bc <vTaskIncrementTick+0x124>)
  40151c:	681b      	ldr	r3, [r3, #0]
  40151e:	681b      	ldr	r3, [r3, #0]
  401520:	2b00      	cmp	r3, #0
  401522:	d104      	bne.n	40152e <vTaskIncrementTick+0x96>
  401524:	4b29      	ldr	r3, [pc, #164]	; (4015cc <vTaskIncrementTick+0x134>)
  401526:	f04f 32ff 	mov.w	r2, #4294967295
  40152a:	601a      	str	r2, [r3, #0]
  40152c:	e03d      	b.n	4015aa <vTaskIncrementTick+0x112>
  40152e:	4b23      	ldr	r3, [pc, #140]	; (4015bc <vTaskIncrementTick+0x124>)
  401530:	681b      	ldr	r3, [r3, #0]
  401532:	68db      	ldr	r3, [r3, #12]
  401534:	68db      	ldr	r3, [r3, #12]
  401536:	60bb      	str	r3, [r7, #8]
  401538:	68bb      	ldr	r3, [r7, #8]
  40153a:	685b      	ldr	r3, [r3, #4]
  40153c:	607b      	str	r3, [r7, #4]
  40153e:	4b1e      	ldr	r3, [pc, #120]	; (4015b8 <vTaskIncrementTick+0x120>)
  401540:	681a      	ldr	r2, [r3, #0]
  401542:	687b      	ldr	r3, [r7, #4]
  401544:	429a      	cmp	r2, r3
  401546:	d203      	bcs.n	401550 <vTaskIncrementTick+0xb8>
  401548:	4a20      	ldr	r2, [pc, #128]	; (4015cc <vTaskIncrementTick+0x134>)
  40154a:	687b      	ldr	r3, [r7, #4]
  40154c:	6013      	str	r3, [r2, #0]
  40154e:	e02c      	b.n	4015aa <vTaskIncrementTick+0x112>
  401550:	68bb      	ldr	r3, [r7, #8]
  401552:	3304      	adds	r3, #4
  401554:	4618      	mov	r0, r3
  401556:	4b1e      	ldr	r3, [pc, #120]	; (4015d0 <vTaskIncrementTick+0x138>)
  401558:	4798      	blx	r3
  40155a:	68bb      	ldr	r3, [r7, #8]
  40155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40155e:	2b00      	cmp	r3, #0
  401560:	d004      	beq.n	40156c <vTaskIncrementTick+0xd4>
  401562:	68bb      	ldr	r3, [r7, #8]
  401564:	3318      	adds	r3, #24
  401566:	4618      	mov	r0, r3
  401568:	4b19      	ldr	r3, [pc, #100]	; (4015d0 <vTaskIncrementTick+0x138>)
  40156a:	4798      	blx	r3
  40156c:	68bb      	ldr	r3, [r7, #8]
  40156e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401570:	4b18      	ldr	r3, [pc, #96]	; (4015d4 <vTaskIncrementTick+0x13c>)
  401572:	681b      	ldr	r3, [r3, #0]
  401574:	429a      	cmp	r2, r3
  401576:	d903      	bls.n	401580 <vTaskIncrementTick+0xe8>
  401578:	68bb      	ldr	r3, [r7, #8]
  40157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40157c:	4a15      	ldr	r2, [pc, #84]	; (4015d4 <vTaskIncrementTick+0x13c>)
  40157e:	6013      	str	r3, [r2, #0]
  401580:	68bb      	ldr	r3, [r7, #8]
  401582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401584:	4613      	mov	r3, r2
  401586:	009b      	lsls	r3, r3, #2
  401588:	4413      	add	r3, r2
  40158a:	009b      	lsls	r3, r3, #2
  40158c:	4a12      	ldr	r2, [pc, #72]	; (4015d8 <vTaskIncrementTick+0x140>)
  40158e:	441a      	add	r2, r3
  401590:	68bb      	ldr	r3, [r7, #8]
  401592:	3304      	adds	r3, #4
  401594:	4619      	mov	r1, r3
  401596:	4610      	mov	r0, r2
  401598:	4b10      	ldr	r3, [pc, #64]	; (4015dc <vTaskIncrementTick+0x144>)
  40159a:	4798      	blx	r3
  40159c:	e7bd      	b.n	40151a <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
  40159e:	4b10      	ldr	r3, [pc, #64]	; (4015e0 <vTaskIncrementTick+0x148>)
  4015a0:	681b      	ldr	r3, [r3, #0]
  4015a2:	3301      	adds	r3, #1
  4015a4:	4a0e      	ldr	r2, [pc, #56]	; (4015e0 <vTaskIncrementTick+0x148>)
  4015a6:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
  4015a8:	e7ff      	b.n	4015aa <vTaskIncrementTick+0x112>
  4015aa:	bf00      	nop
  4015ac:	3710      	adds	r7, #16
  4015ae:	46bd      	mov	sp, r7
  4015b0:	bd80      	pop	{r7, pc}
  4015b2:	bf00      	nop
  4015b4:	2040ab00 	.word	0x2040ab00
  4015b8:	2040aaf0 	.word	0x2040aaf0
  4015bc:	2040aaa4 	.word	0x2040aaa4
  4015c0:	0040059d 	.word	0x0040059d
  4015c4:	2040aaa8 	.word	0x2040aaa8
  4015c8:	2040ab0c 	.word	0x2040ab0c
  4015cc:	20400008 	.word	0x20400008
  4015d0:	0040034d 	.word	0x0040034d
  4015d4:	2040aaf8 	.word	0x2040aaf8
  4015d8:	2040aa18 	.word	0x2040aa18
  4015dc:	0040028b 	.word	0x0040028b
  4015e0:	2040ab04 	.word	0x2040ab04

004015e4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  4015e4:	b580      	push	{r7, lr}
  4015e6:	b082      	sub	sp, #8
  4015e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
  4015ea:	4b21      	ldr	r3, [pc, #132]	; (401670 <vTaskSwitchContext+0x8c>)
  4015ec:	681b      	ldr	r3, [r3, #0]
  4015ee:	2b00      	cmp	r3, #0
  4015f0:	d010      	beq.n	401614 <vTaskSwitchContext+0x30>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
  4015f2:	4b20      	ldr	r3, [pc, #128]	; (401674 <vTaskSwitchContext+0x90>)
  4015f4:	2201      	movs	r2, #1
  4015f6:	601a      	str	r2, [r3, #0]

		taskSELECT_HIGHEST_PRIORITY_TASK();

		traceTASK_SWITCHED_IN();
	}
}
  4015f8:	e035      	b.n	401666 <vTaskSwitchContext+0x82>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4015fa:	4b1f      	ldr	r3, [pc, #124]	; (401678 <vTaskSwitchContext+0x94>)
  4015fc:	681b      	ldr	r3, [r3, #0]
  4015fe:	2b00      	cmp	r3, #0
  401600:	d103      	bne.n	40160a <vTaskSwitchContext+0x26>
  401602:	4b1e      	ldr	r3, [pc, #120]	; (40167c <vTaskSwitchContext+0x98>)
  401604:	4798      	blx	r3
  401606:	bf00      	nop
  401608:	e7fd      	b.n	401606 <vTaskSwitchContext+0x22>
  40160a:	4b1b      	ldr	r3, [pc, #108]	; (401678 <vTaskSwitchContext+0x94>)
  40160c:	681b      	ldr	r3, [r3, #0]
  40160e:	3b01      	subs	r3, #1
  401610:	4a19      	ldr	r2, [pc, #100]	; (401678 <vTaskSwitchContext+0x94>)
  401612:	6013      	str	r3, [r2, #0]
  401614:	4b18      	ldr	r3, [pc, #96]	; (401678 <vTaskSwitchContext+0x94>)
  401616:	681a      	ldr	r2, [r3, #0]
  401618:	4919      	ldr	r1, [pc, #100]	; (401680 <vTaskSwitchContext+0x9c>)
  40161a:	4613      	mov	r3, r2
  40161c:	009b      	lsls	r3, r3, #2
  40161e:	4413      	add	r3, r2
  401620:	009b      	lsls	r3, r3, #2
  401622:	440b      	add	r3, r1
  401624:	681b      	ldr	r3, [r3, #0]
  401626:	2b00      	cmp	r3, #0
  401628:	d0e7      	beq.n	4015fa <vTaskSwitchContext+0x16>
  40162a:	4b13      	ldr	r3, [pc, #76]	; (401678 <vTaskSwitchContext+0x94>)
  40162c:	681a      	ldr	r2, [r3, #0]
  40162e:	4613      	mov	r3, r2
  401630:	009b      	lsls	r3, r3, #2
  401632:	4413      	add	r3, r2
  401634:	009b      	lsls	r3, r3, #2
  401636:	4a12      	ldr	r2, [pc, #72]	; (401680 <vTaskSwitchContext+0x9c>)
  401638:	4413      	add	r3, r2
  40163a:	607b      	str	r3, [r7, #4]
  40163c:	687b      	ldr	r3, [r7, #4]
  40163e:	685b      	ldr	r3, [r3, #4]
  401640:	685a      	ldr	r2, [r3, #4]
  401642:	687b      	ldr	r3, [r7, #4]
  401644:	605a      	str	r2, [r3, #4]
  401646:	687b      	ldr	r3, [r7, #4]
  401648:	685a      	ldr	r2, [r3, #4]
  40164a:	687b      	ldr	r3, [r7, #4]
  40164c:	3308      	adds	r3, #8
  40164e:	429a      	cmp	r2, r3
  401650:	d104      	bne.n	40165c <vTaskSwitchContext+0x78>
  401652:	687b      	ldr	r3, [r7, #4]
  401654:	685b      	ldr	r3, [r3, #4]
  401656:	685a      	ldr	r2, [r3, #4]
  401658:	687b      	ldr	r3, [r7, #4]
  40165a:	605a      	str	r2, [r3, #4]
  40165c:	687b      	ldr	r3, [r7, #4]
  40165e:	685b      	ldr	r3, [r3, #4]
  401660:	68db      	ldr	r3, [r3, #12]
  401662:	4a08      	ldr	r2, [pc, #32]	; (401684 <vTaskSwitchContext+0xa0>)
  401664:	6013      	str	r3, [r2, #0]
}
  401666:	bf00      	nop
  401668:	3708      	adds	r7, #8
  40166a:	46bd      	mov	sp, r7
  40166c:	bd80      	pop	{r7, pc}
  40166e:	bf00      	nop
  401670:	2040ab00 	.word	0x2040ab00
  401674:	2040ab08 	.word	0x2040ab08
  401678:	2040aaf8 	.word	0x2040aaf8
  40167c:	0040059d 	.word	0x0040059d
  401680:	2040aa18 	.word	0x2040aa18
  401684:	2040aa14 	.word	0x2040aa14

00401688 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
  401688:	b580      	push	{r7, lr}
  40168a:	b084      	sub	sp, #16
  40168c:	af00      	add	r7, sp, #0
  40168e:	6078      	str	r0, [r7, #4]
  401690:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
  401692:	687b      	ldr	r3, [r7, #4]
  401694:	2b00      	cmp	r3, #0
  401696:	d103      	bne.n	4016a0 <vTaskPlaceOnEventList+0x18>
  401698:	4b14      	ldr	r3, [pc, #80]	; (4016ec <vTaskPlaceOnEventList+0x64>)
  40169a:	4798      	blx	r3
  40169c:	bf00      	nop
  40169e:	e7fd      	b.n	40169c <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  4016a0:	4b13      	ldr	r3, [pc, #76]	; (4016f0 <vTaskPlaceOnEventList+0x68>)
  4016a2:	681b      	ldr	r3, [r3, #0]
  4016a4:	3318      	adds	r3, #24
  4016a6:	4619      	mov	r1, r3
  4016a8:	6878      	ldr	r0, [r7, #4]
  4016aa:	4b12      	ldr	r3, [pc, #72]	; (4016f4 <vTaskPlaceOnEventList+0x6c>)
  4016ac:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  4016ae:	4b10      	ldr	r3, [pc, #64]	; (4016f0 <vTaskPlaceOnEventList+0x68>)
  4016b0:	681b      	ldr	r3, [r3, #0]
  4016b2:	3304      	adds	r3, #4
  4016b4:	4618      	mov	r0, r3
  4016b6:	4b10      	ldr	r3, [pc, #64]	; (4016f8 <vTaskPlaceOnEventList+0x70>)
  4016b8:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  4016ba:	683b      	ldr	r3, [r7, #0]
  4016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016c0:	d107      	bne.n	4016d2 <vTaskPlaceOnEventList+0x4a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  4016c2:	4b0b      	ldr	r3, [pc, #44]	; (4016f0 <vTaskPlaceOnEventList+0x68>)
  4016c4:	681b      	ldr	r3, [r3, #0]
  4016c6:	3304      	adds	r3, #4
  4016c8:	4619      	mov	r1, r3
  4016ca:	480c      	ldr	r0, [pc, #48]	; (4016fc <vTaskPlaceOnEventList+0x74>)
  4016cc:	4b0c      	ldr	r3, [pc, #48]	; (401700 <vTaskPlaceOnEventList+0x78>)
  4016ce:	4798      	blx	r3
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
  4016d0:	e007      	b.n	4016e2 <vTaskPlaceOnEventList+0x5a>
			xTimeToWake = xTickCount + xTicksToWait;
  4016d2:	4b0c      	ldr	r3, [pc, #48]	; (401704 <vTaskPlaceOnEventList+0x7c>)
  4016d4:	681a      	ldr	r2, [r3, #0]
  4016d6:	683b      	ldr	r3, [r7, #0]
  4016d8:	4413      	add	r3, r2
  4016da:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4016dc:	68f8      	ldr	r0, [r7, #12]
  4016de:	4b0a      	ldr	r3, [pc, #40]	; (401708 <vTaskPlaceOnEventList+0x80>)
  4016e0:	4798      	blx	r3
}
  4016e2:	bf00      	nop
  4016e4:	3710      	adds	r7, #16
  4016e6:	46bd      	mov	sp, r7
  4016e8:	bd80      	pop	{r7, pc}
  4016ea:	bf00      	nop
  4016ec:	0040059d 	.word	0x0040059d
  4016f0:	2040aa14 	.word	0x2040aa14
  4016f4:	004002db 	.word	0x004002db
  4016f8:	0040034d 	.word	0x0040034d
  4016fc:	2040aad8 	.word	0x2040aad8
  401700:	0040028b 	.word	0x0040028b
  401704:	2040aaf0 	.word	0x2040aaf0
  401708:	00401ae5 	.word	0x00401ae5

0040170c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
  40170c:	b580      	push	{r7, lr}
  40170e:	b084      	sub	sp, #16
  401710:	af00      	add	r7, sp, #0
  401712:	6078      	str	r0, [r7, #4]
  401714:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
  401716:	687b      	ldr	r3, [r7, #4]
  401718:	2b00      	cmp	r3, #0
  40171a:	d103      	bne.n	401724 <vTaskPlaceOnEventListRestricted+0x18>
  40171c:	4b0e      	ldr	r3, [pc, #56]	; (401758 <vTaskPlaceOnEventListRestricted+0x4c>)
  40171e:	4798      	blx	r3
  401720:	bf00      	nop
  401722:	e7fd      	b.n	401720 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
  401724:	4b0d      	ldr	r3, [pc, #52]	; (40175c <vTaskPlaceOnEventListRestricted+0x50>)
  401726:	681b      	ldr	r3, [r3, #0]
  401728:	3318      	adds	r3, #24
  40172a:	4619      	mov	r1, r3
  40172c:	6878      	ldr	r0, [r7, #4]
  40172e:	4b0c      	ldr	r3, [pc, #48]	; (401760 <vTaskPlaceOnEventListRestricted+0x54>)
  401730:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
  401732:	4b0a      	ldr	r3, [pc, #40]	; (40175c <vTaskPlaceOnEventListRestricted+0x50>)
  401734:	681b      	ldr	r3, [r3, #0]
  401736:	3304      	adds	r3, #4
  401738:	4618      	mov	r0, r3
  40173a:	4b0a      	ldr	r3, [pc, #40]	; (401764 <vTaskPlaceOnEventListRestricted+0x58>)
  40173c:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
  40173e:	4b0a      	ldr	r3, [pc, #40]	; (401768 <vTaskPlaceOnEventListRestricted+0x5c>)
  401740:	681a      	ldr	r2, [r3, #0]
  401742:	683b      	ldr	r3, [r7, #0]
  401744:	4413      	add	r3, r2
  401746:	60fb      	str	r3, [r7, #12]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
  401748:	68f8      	ldr	r0, [r7, #12]
  40174a:	4b08      	ldr	r3, [pc, #32]	; (40176c <vTaskPlaceOnEventListRestricted+0x60>)
  40174c:	4798      	blx	r3
	}
  40174e:	bf00      	nop
  401750:	3710      	adds	r7, #16
  401752:	46bd      	mov	sp, r7
  401754:	bd80      	pop	{r7, pc}
  401756:	bf00      	nop
  401758:	0040059d 	.word	0x0040059d
  40175c:	2040aa14 	.word	0x2040aa14
  401760:	0040028b 	.word	0x0040028b
  401764:	0040034d 	.word	0x0040034d
  401768:	2040aaf0 	.word	0x2040aaf0
  40176c:	00401ae5 	.word	0x00401ae5

00401770 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
  401770:	b580      	push	{r7, lr}
  401772:	b084      	sub	sp, #16
  401774:	af00      	add	r7, sp, #0
  401776:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401778:	687b      	ldr	r3, [r7, #4]
  40177a:	68db      	ldr	r3, [r3, #12]
  40177c:	68db      	ldr	r3, [r3, #12]
  40177e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
  401780:	68bb      	ldr	r3, [r7, #8]
  401782:	2b00      	cmp	r3, #0
  401784:	d103      	bne.n	40178e <xTaskRemoveFromEventList+0x1e>
  401786:	4b21      	ldr	r3, [pc, #132]	; (40180c <xTaskRemoveFromEventList+0x9c>)
  401788:	4798      	blx	r3
  40178a:	bf00      	nop
  40178c:	e7fd      	b.n	40178a <xTaskRemoveFromEventList+0x1a>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40178e:	68bb      	ldr	r3, [r7, #8]
  401790:	3318      	adds	r3, #24
  401792:	4618      	mov	r0, r3
  401794:	4b1e      	ldr	r3, [pc, #120]	; (401810 <xTaskRemoveFromEventList+0xa0>)
  401796:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401798:	4b1e      	ldr	r3, [pc, #120]	; (401814 <xTaskRemoveFromEventList+0xa4>)
  40179a:	681b      	ldr	r3, [r3, #0]
  40179c:	2b00      	cmp	r3, #0
  40179e:	d11d      	bne.n	4017dc <xTaskRemoveFromEventList+0x6c>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4017a0:	68bb      	ldr	r3, [r7, #8]
  4017a2:	3304      	adds	r3, #4
  4017a4:	4618      	mov	r0, r3
  4017a6:	4b1a      	ldr	r3, [pc, #104]	; (401810 <xTaskRemoveFromEventList+0xa0>)
  4017a8:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
  4017aa:	68bb      	ldr	r3, [r7, #8]
  4017ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4017ae:	4b1a      	ldr	r3, [pc, #104]	; (401818 <xTaskRemoveFromEventList+0xa8>)
  4017b0:	681b      	ldr	r3, [r3, #0]
  4017b2:	429a      	cmp	r2, r3
  4017b4:	d903      	bls.n	4017be <xTaskRemoveFromEventList+0x4e>
  4017b6:	68bb      	ldr	r3, [r7, #8]
  4017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4017ba:	4a17      	ldr	r2, [pc, #92]	; (401818 <xTaskRemoveFromEventList+0xa8>)
  4017bc:	6013      	str	r3, [r2, #0]
  4017be:	68bb      	ldr	r3, [r7, #8]
  4017c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4017c2:	4613      	mov	r3, r2
  4017c4:	009b      	lsls	r3, r3, #2
  4017c6:	4413      	add	r3, r2
  4017c8:	009b      	lsls	r3, r3, #2
  4017ca:	4a14      	ldr	r2, [pc, #80]	; (40181c <xTaskRemoveFromEventList+0xac>)
  4017cc:	441a      	add	r2, r3
  4017ce:	68bb      	ldr	r3, [r7, #8]
  4017d0:	3304      	adds	r3, #4
  4017d2:	4619      	mov	r1, r3
  4017d4:	4610      	mov	r0, r2
  4017d6:	4b12      	ldr	r3, [pc, #72]	; (401820 <xTaskRemoveFromEventList+0xb0>)
  4017d8:	4798      	blx	r3
  4017da:	e005      	b.n	4017e8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4017dc:	68bb      	ldr	r3, [r7, #8]
  4017de:	3318      	adds	r3, #24
  4017e0:	4619      	mov	r1, r3
  4017e2:	4810      	ldr	r0, [pc, #64]	; (401824 <xTaskRemoveFromEventList+0xb4>)
  4017e4:	4b0e      	ldr	r3, [pc, #56]	; (401820 <xTaskRemoveFromEventList+0xb0>)
  4017e6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4017e8:	68bb      	ldr	r3, [r7, #8]
  4017ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4017ec:	4b0e      	ldr	r3, [pc, #56]	; (401828 <xTaskRemoveFromEventList+0xb8>)
  4017ee:	681b      	ldr	r3, [r3, #0]
  4017f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4017f2:	429a      	cmp	r2, r3
  4017f4:	d302      	bcc.n	4017fc <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
  4017f6:	2301      	movs	r3, #1
  4017f8:	60fb      	str	r3, [r7, #12]
  4017fa:	e001      	b.n	401800 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
  4017fc:	2300      	movs	r3, #0
  4017fe:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
  401800:	68fb      	ldr	r3, [r7, #12]
}
  401802:	4618      	mov	r0, r3
  401804:	3710      	adds	r7, #16
  401806:	46bd      	mov	sp, r7
  401808:	bd80      	pop	{r7, pc}
  40180a:	bf00      	nop
  40180c:	0040059d 	.word	0x0040059d
  401810:	0040034d 	.word	0x0040034d
  401814:	2040ab00 	.word	0x2040ab00
  401818:	2040aaf8 	.word	0x2040aaf8
  40181c:	2040aa18 	.word	0x2040aa18
  401820:	0040028b 	.word	0x0040028b
  401824:	2040aaac 	.word	0x2040aaac
  401828:	2040aa14 	.word	0x2040aa14

0040182c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
  40182c:	b580      	push	{r7, lr}
  40182e:	b082      	sub	sp, #8
  401830:	af00      	add	r7, sp, #0
  401832:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
  401834:	687b      	ldr	r3, [r7, #4]
  401836:	2b00      	cmp	r3, #0
  401838:	d103      	bne.n	401842 <vTaskSetTimeOutState+0x16>
  40183a:	4b08      	ldr	r3, [pc, #32]	; (40185c <vTaskSetTimeOutState+0x30>)
  40183c:	4798      	blx	r3
  40183e:	bf00      	nop
  401840:	e7fd      	b.n	40183e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401842:	4b07      	ldr	r3, [pc, #28]	; (401860 <vTaskSetTimeOutState+0x34>)
  401844:	681a      	ldr	r2, [r3, #0]
  401846:	687b      	ldr	r3, [r7, #4]
  401848:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40184a:	4b06      	ldr	r3, [pc, #24]	; (401864 <vTaskSetTimeOutState+0x38>)
  40184c:	681a      	ldr	r2, [r3, #0]
  40184e:	687b      	ldr	r3, [r7, #4]
  401850:	605a      	str	r2, [r3, #4]
}
  401852:	bf00      	nop
  401854:	3708      	adds	r7, #8
  401856:	46bd      	mov	sp, r7
  401858:	bd80      	pop	{r7, pc}
  40185a:	bf00      	nop
  40185c:	0040059d 	.word	0x0040059d
  401860:	2040ab0c 	.word	0x2040ab0c
  401864:	2040aaf0 	.word	0x2040aaf0

00401868 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
  401868:	b580      	push	{r7, lr}
  40186a:	b084      	sub	sp, #16
  40186c:	af00      	add	r7, sp, #0
  40186e:	6078      	str	r0, [r7, #4]
  401870:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
  401872:	687b      	ldr	r3, [r7, #4]
  401874:	2b00      	cmp	r3, #0
  401876:	d103      	bne.n	401880 <xTaskCheckForTimeOut+0x18>
  401878:	4b22      	ldr	r3, [pc, #136]	; (401904 <xTaskCheckForTimeOut+0x9c>)
  40187a:	4798      	blx	r3
  40187c:	bf00      	nop
  40187e:	e7fd      	b.n	40187c <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
  401880:	683b      	ldr	r3, [r7, #0]
  401882:	2b00      	cmp	r3, #0
  401884:	d103      	bne.n	40188e <xTaskCheckForTimeOut+0x26>
  401886:	4b1f      	ldr	r3, [pc, #124]	; (401904 <xTaskCheckForTimeOut+0x9c>)
  401888:	4798      	blx	r3
  40188a:	bf00      	nop
  40188c:	e7fd      	b.n	40188a <xTaskCheckForTimeOut+0x22>

	taskENTER_CRITICAL();
  40188e:	4b1e      	ldr	r3, [pc, #120]	; (401908 <xTaskCheckForTimeOut+0xa0>)
  401890:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401892:	683b      	ldr	r3, [r7, #0]
  401894:	681b      	ldr	r3, [r3, #0]
  401896:	f1b3 3fff 	cmp.w	r3, #4294967295
  40189a:	d102      	bne.n	4018a2 <xTaskCheckForTimeOut+0x3a>
			{
				xReturn = pdFALSE;
  40189c:	2300      	movs	r3, #0
  40189e:	60fb      	str	r3, [r7, #12]
  4018a0:	e029      	b.n	4018f6 <xTaskCheckForTimeOut+0x8e>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
  4018a2:	687b      	ldr	r3, [r7, #4]
  4018a4:	681a      	ldr	r2, [r3, #0]
  4018a6:	4b19      	ldr	r3, [pc, #100]	; (40190c <xTaskCheckForTimeOut+0xa4>)
  4018a8:	681b      	ldr	r3, [r3, #0]
  4018aa:	429a      	cmp	r2, r3
  4018ac:	d008      	beq.n	4018c0 <xTaskCheckForTimeOut+0x58>
  4018ae:	687b      	ldr	r3, [r7, #4]
  4018b0:	685a      	ldr	r2, [r3, #4]
  4018b2:	4b17      	ldr	r3, [pc, #92]	; (401910 <xTaskCheckForTimeOut+0xa8>)
  4018b4:	681b      	ldr	r3, [r3, #0]
  4018b6:	429a      	cmp	r2, r3
  4018b8:	d802      	bhi.n	4018c0 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  4018ba:	2301      	movs	r3, #1
  4018bc:	60fb      	str	r3, [r7, #12]
  4018be:	e01a      	b.n	4018f6 <xTaskCheckForTimeOut+0x8e>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
  4018c0:	4b13      	ldr	r3, [pc, #76]	; (401910 <xTaskCheckForTimeOut+0xa8>)
  4018c2:	681a      	ldr	r2, [r3, #0]
  4018c4:	687b      	ldr	r3, [r7, #4]
  4018c6:	685b      	ldr	r3, [r3, #4]
  4018c8:	1ad2      	subs	r2, r2, r3
  4018ca:	683b      	ldr	r3, [r7, #0]
  4018cc:	681b      	ldr	r3, [r3, #0]
  4018ce:	429a      	cmp	r2, r3
  4018d0:	d20f      	bcs.n	4018f2 <xTaskCheckForTimeOut+0x8a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
  4018d2:	4b0f      	ldr	r3, [pc, #60]	; (401910 <xTaskCheckForTimeOut+0xa8>)
  4018d4:	681a      	ldr	r2, [r3, #0]
  4018d6:	687b      	ldr	r3, [r7, #4]
  4018d8:	685b      	ldr	r3, [r3, #4]
  4018da:	1ad3      	subs	r3, r2, r3
  4018dc:	683a      	ldr	r2, [r7, #0]
  4018de:	6812      	ldr	r2, [r2, #0]
  4018e0:	1ad2      	subs	r2, r2, r3
  4018e2:	683b      	ldr	r3, [r7, #0]
  4018e4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4018e6:	6878      	ldr	r0, [r7, #4]
  4018e8:	4b0a      	ldr	r3, [pc, #40]	; (401914 <xTaskCheckForTimeOut+0xac>)
  4018ea:	4798      	blx	r3
			xReturn = pdFALSE;
  4018ec:	2300      	movs	r3, #0
  4018ee:	60fb      	str	r3, [r7, #12]
  4018f0:	e001      	b.n	4018f6 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			xReturn = pdTRUE;
  4018f2:	2301      	movs	r3, #1
  4018f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  4018f6:	4b08      	ldr	r3, [pc, #32]	; (401918 <xTaskCheckForTimeOut+0xb0>)
  4018f8:	4798      	blx	r3

	return xReturn;
  4018fa:	68fb      	ldr	r3, [r7, #12]
}
  4018fc:	4618      	mov	r0, r3
  4018fe:	3710      	adds	r7, #16
  401900:	46bd      	mov	sp, r7
  401902:	bd80      	pop	{r7, pc}
  401904:	0040059d 	.word	0x0040059d
  401908:	00400555 	.word	0x00400555
  40190c:	2040ab0c 	.word	0x2040ab0c
  401910:	2040aaf0 	.word	0x2040aaf0
  401914:	0040182d 	.word	0x0040182d
  401918:	00400575 	.word	0x00400575

0040191c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  40191c:	b480      	push	{r7}
  40191e:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
  401920:	4b03      	ldr	r3, [pc, #12]	; (401930 <vTaskMissedYield+0x14>)
  401922:	2201      	movs	r2, #1
  401924:	601a      	str	r2, [r3, #0]
}
  401926:	bf00      	nop
  401928:	46bd      	mov	sp, r7
  40192a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40192e:	4770      	bx	lr
  401930:	2040ab08 	.word	0x2040ab08

00401934 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401934:	b580      	push	{r7, lr}
  401936:	b082      	sub	sp, #8
  401938:	af00      	add	r7, sp, #0
  40193a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
  40193c:	4b04      	ldr	r3, [pc, #16]	; (401950 <prvIdleTask+0x1c>)
  40193e:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
  401940:	4b04      	ldr	r3, [pc, #16]	; (401954 <prvIdleTask+0x20>)
  401942:	681b      	ldr	r3, [r3, #0]
  401944:	2b01      	cmp	r3, #1
  401946:	d9f9      	bls.n	40193c <prvIdleTask+0x8>
			{
				taskYIELD();
  401948:	4b03      	ldr	r3, [pc, #12]	; (401958 <prvIdleTask+0x24>)
  40194a:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
  40194c:	e7f6      	b.n	40193c <prvIdleTask+0x8>
  40194e:	bf00      	nop
  401950:	00401a55 	.word	0x00401a55
  401954:	2040aa18 	.word	0x2040aa18
  401958:	00400539 	.word	0x00400539

0040195c <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
  40195c:	b580      	push	{r7, lr}
  40195e:	b084      	sub	sp, #16
  401960:	af00      	add	r7, sp, #0
  401962:	60f8      	str	r0, [r7, #12]
  401964:	60b9      	str	r1, [r7, #8]
  401966:	607a      	str	r2, [r7, #4]
  401968:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
  40196a:	68fb      	ldr	r3, [r7, #12]
  40196c:	3334      	adds	r3, #52	; 0x34
  40196e:	220a      	movs	r2, #10
  401970:	68b9      	ldr	r1, [r7, #8]
  401972:	4618      	mov	r0, r3
  401974:	4b14      	ldr	r3, [pc, #80]	; (4019c8 <prvInitialiseTCBVariables+0x6c>)
  401976:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
  401978:	68fb      	ldr	r3, [r7, #12]
  40197a:	2200      	movs	r2, #0
  40197c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
  401980:	687b      	ldr	r3, [r7, #4]
  401982:	2b04      	cmp	r3, #4
  401984:	d901      	bls.n	40198a <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
  401986:	2304      	movs	r3, #4
  401988:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
  40198a:	68fb      	ldr	r3, [r7, #12]
  40198c:	687a      	ldr	r2, [r7, #4]
  40198e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  401990:	68fb      	ldr	r3, [r7, #12]
  401992:	687a      	ldr	r2, [r7, #4]
  401994:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401996:	68fb      	ldr	r3, [r7, #12]
  401998:	3304      	adds	r3, #4
  40199a:	4618      	mov	r0, r3
  40199c:	4b0b      	ldr	r3, [pc, #44]	; (4019cc <prvInitialiseTCBVariables+0x70>)
  40199e:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4019a0:	68fb      	ldr	r3, [r7, #12]
  4019a2:	3318      	adds	r3, #24
  4019a4:	4618      	mov	r0, r3
  4019a6:	4b09      	ldr	r3, [pc, #36]	; (4019cc <prvInitialiseTCBVariables+0x70>)
  4019a8:	4798      	blx	r3

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4019aa:	68fb      	ldr	r3, [r7, #12]
  4019ac:	68fa      	ldr	r2, [r7, #12]
  4019ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  4019b0:	687b      	ldr	r3, [r7, #4]
  4019b2:	f1c3 0205 	rsb	r2, r3, #5
  4019b6:	68fb      	ldr	r3, [r7, #12]
  4019b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4019ba:	68fb      	ldr	r3, [r7, #12]
  4019bc:	68fa      	ldr	r2, [r7, #12]
  4019be:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
  4019c0:	bf00      	nop
  4019c2:	3710      	adds	r7, #16
  4019c4:	46bd      	mov	sp, r7
  4019c6:	bd80      	pop	{r7, pc}
  4019c8:	00405cdd 	.word	0x00405cdd
  4019cc:	00400271 	.word	0x00400271

004019d0 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
  4019d0:	b580      	push	{r7, lr}
  4019d2:	b082      	sub	sp, #8
  4019d4:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4019d6:	2300      	movs	r3, #0
  4019d8:	607b      	str	r3, [r7, #4]
  4019da:	e00c      	b.n	4019f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
  4019dc:	687a      	ldr	r2, [r7, #4]
  4019de:	4613      	mov	r3, r2
  4019e0:	009b      	lsls	r3, r3, #2
  4019e2:	4413      	add	r3, r2
  4019e4:	009b      	lsls	r3, r3, #2
  4019e6:	4a12      	ldr	r2, [pc, #72]	; (401a30 <prvInitialiseTaskLists+0x60>)
  4019e8:	4413      	add	r3, r2
  4019ea:	4618      	mov	r0, r3
  4019ec:	4b11      	ldr	r3, [pc, #68]	; (401a34 <prvInitialiseTaskLists+0x64>)
  4019ee:	4798      	blx	r3
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
  4019f0:	687b      	ldr	r3, [r7, #4]
  4019f2:	3301      	adds	r3, #1
  4019f4:	607b      	str	r3, [r7, #4]
  4019f6:	687b      	ldr	r3, [r7, #4]
  4019f8:	2b04      	cmp	r3, #4
  4019fa:	d9ef      	bls.n	4019dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
  4019fc:	480e      	ldr	r0, [pc, #56]	; (401a38 <prvInitialiseTaskLists+0x68>)
  4019fe:	4b0d      	ldr	r3, [pc, #52]	; (401a34 <prvInitialiseTaskLists+0x64>)
  401a00:	4798      	blx	r3
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
  401a02:	480e      	ldr	r0, [pc, #56]	; (401a3c <prvInitialiseTaskLists+0x6c>)
  401a04:	4b0b      	ldr	r3, [pc, #44]	; (401a34 <prvInitialiseTaskLists+0x64>)
  401a06:	4798      	blx	r3
	vListInitialise( ( xList * ) &xPendingReadyList );
  401a08:	480d      	ldr	r0, [pc, #52]	; (401a40 <prvInitialiseTaskLists+0x70>)
  401a0a:	4b0a      	ldr	r3, [pc, #40]	; (401a34 <prvInitialiseTaskLists+0x64>)
  401a0c:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
  401a0e:	480d      	ldr	r0, [pc, #52]	; (401a44 <prvInitialiseTaskLists+0x74>)
  401a10:	4b08      	ldr	r3, [pc, #32]	; (401a34 <prvInitialiseTaskLists+0x64>)
  401a12:	4798      	blx	r3
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
  401a14:	480c      	ldr	r0, [pc, #48]	; (401a48 <prvInitialiseTaskLists+0x78>)
  401a16:	4b07      	ldr	r3, [pc, #28]	; (401a34 <prvInitialiseTaskLists+0x64>)
  401a18:	4798      	blx	r3
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401a1a:	4b0c      	ldr	r3, [pc, #48]	; (401a4c <prvInitialiseTaskLists+0x7c>)
  401a1c:	4a06      	ldr	r2, [pc, #24]	; (401a38 <prvInitialiseTaskLists+0x68>)
  401a1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401a20:	4b0b      	ldr	r3, [pc, #44]	; (401a50 <prvInitialiseTaskLists+0x80>)
  401a22:	4a06      	ldr	r2, [pc, #24]	; (401a3c <prvInitialiseTaskLists+0x6c>)
  401a24:	601a      	str	r2, [r3, #0]
}
  401a26:	bf00      	nop
  401a28:	3708      	adds	r7, #8
  401a2a:	46bd      	mov	sp, r7
  401a2c:	bd80      	pop	{r7, pc}
  401a2e:	bf00      	nop
  401a30:	2040aa18 	.word	0x2040aa18
  401a34:	00400231 	.word	0x00400231
  401a38:	2040aa7c 	.word	0x2040aa7c
  401a3c:	2040aa90 	.word	0x2040aa90
  401a40:	2040aaac 	.word	0x2040aaac
  401a44:	2040aac0 	.word	0x2040aac0
  401a48:	2040aad8 	.word	0x2040aad8
  401a4c:	2040aaa4 	.word	0x2040aaa4
  401a50:	2040aaa8 	.word	0x2040aaa8

00401a54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  401a54:	b580      	push	{r7, lr}
  401a56:	b082      	sub	sp, #8
  401a58:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401a5a:	e028      	b.n	401aae <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
  401a5c:	4b18      	ldr	r3, [pc, #96]	; (401ac0 <prvCheckTasksWaitingTermination+0x6c>)
  401a5e:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401a60:	4b18      	ldr	r3, [pc, #96]	; (401ac4 <prvCheckTasksWaitingTermination+0x70>)
  401a62:	681b      	ldr	r3, [r3, #0]
  401a64:	2b00      	cmp	r3, #0
  401a66:	bf0c      	ite	eq
  401a68:	2301      	moveq	r3, #1
  401a6a:	2300      	movne	r3, #0
  401a6c:	b2db      	uxtb	r3, r3
  401a6e:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
  401a70:	4b15      	ldr	r3, [pc, #84]	; (401ac8 <prvCheckTasksWaitingTermination+0x74>)
  401a72:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
  401a74:	687b      	ldr	r3, [r7, #4]
  401a76:	2b00      	cmp	r3, #0
  401a78:	d119      	bne.n	401aae <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
  401a7a:	4b14      	ldr	r3, [pc, #80]	; (401acc <prvCheckTasksWaitingTermination+0x78>)
  401a7c:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
  401a7e:	4b11      	ldr	r3, [pc, #68]	; (401ac4 <prvCheckTasksWaitingTermination+0x70>)
  401a80:	68db      	ldr	r3, [r3, #12]
  401a82:	68db      	ldr	r3, [r3, #12]
  401a84:	603b      	str	r3, [r7, #0]
					uxListRemove( &( pxTCB->xGenericListItem ) );
  401a86:	683b      	ldr	r3, [r7, #0]
  401a88:	3304      	adds	r3, #4
  401a8a:	4618      	mov	r0, r3
  401a8c:	4b10      	ldr	r3, [pc, #64]	; (401ad0 <prvCheckTasksWaitingTermination+0x7c>)
  401a8e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401a90:	4b10      	ldr	r3, [pc, #64]	; (401ad4 <prvCheckTasksWaitingTermination+0x80>)
  401a92:	681b      	ldr	r3, [r3, #0]
  401a94:	3b01      	subs	r3, #1
  401a96:	4a0f      	ldr	r2, [pc, #60]	; (401ad4 <prvCheckTasksWaitingTermination+0x80>)
  401a98:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401a9a:	4b0f      	ldr	r3, [pc, #60]	; (401ad8 <prvCheckTasksWaitingTermination+0x84>)
  401a9c:	681b      	ldr	r3, [r3, #0]
  401a9e:	3b01      	subs	r3, #1
  401aa0:	4a0d      	ldr	r2, [pc, #52]	; (401ad8 <prvCheckTasksWaitingTermination+0x84>)
  401aa2:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
  401aa4:	4b0d      	ldr	r3, [pc, #52]	; (401adc <prvCheckTasksWaitingTermination+0x88>)
  401aa6:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
  401aa8:	6838      	ldr	r0, [r7, #0]
  401aaa:	4b0d      	ldr	r3, [pc, #52]	; (401ae0 <prvCheckTasksWaitingTermination+0x8c>)
  401aac:	4798      	blx	r3
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
  401aae:	4b0a      	ldr	r3, [pc, #40]	; (401ad8 <prvCheckTasksWaitingTermination+0x84>)
  401ab0:	681b      	ldr	r3, [r3, #0]
  401ab2:	2b00      	cmp	r3, #0
  401ab4:	d1d2      	bne.n	401a5c <prvCheckTasksWaitingTermination+0x8>
			}
		}
	}
	#endif
}
  401ab6:	bf00      	nop
  401ab8:	3708      	adds	r7, #8
  401aba:	46bd      	mov	sp, r7
  401abc:	bd80      	pop	{r7, pc}
  401abe:	bf00      	nop
  401ac0:	00401331 	.word	0x00401331
  401ac4:	2040aac0 	.word	0x2040aac0
  401ac8:	0040134d 	.word	0x0040134d
  401acc:	00400555 	.word	0x00400555
  401ad0:	0040034d 	.word	0x0040034d
  401ad4:	2040aaec 	.word	0x2040aaec
  401ad8:	2040aad4 	.word	0x2040aad4
  401adc:	00400575 	.word	0x00400575
  401ae0:	00401bc5 	.word	0x00401bc5

00401ae4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
  401ae4:	b580      	push	{r7, lr}
  401ae6:	b082      	sub	sp, #8
  401ae8:	af00      	add	r7, sp, #0
  401aea:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401aec:	4b13      	ldr	r3, [pc, #76]	; (401b3c <prvAddCurrentTaskToDelayedList+0x58>)
  401aee:	681b      	ldr	r3, [r3, #0]
  401af0:	687a      	ldr	r2, [r7, #4]
  401af2:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
  401af4:	4b12      	ldr	r3, [pc, #72]	; (401b40 <prvAddCurrentTaskToDelayedList+0x5c>)
  401af6:	681b      	ldr	r3, [r3, #0]
  401af8:	687a      	ldr	r2, [r7, #4]
  401afa:	429a      	cmp	r2, r3
  401afc:	d209      	bcs.n	401b12 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401afe:	4b11      	ldr	r3, [pc, #68]	; (401b44 <prvAddCurrentTaskToDelayedList+0x60>)
  401b00:	681a      	ldr	r2, [r3, #0]
  401b02:	4b0e      	ldr	r3, [pc, #56]	; (401b3c <prvAddCurrentTaskToDelayedList+0x58>)
  401b04:	681b      	ldr	r3, [r3, #0]
  401b06:	3304      	adds	r3, #4
  401b08:	4619      	mov	r1, r3
  401b0a:	4610      	mov	r0, r2
  401b0c:	4b0e      	ldr	r3, [pc, #56]	; (401b48 <prvAddCurrentTaskToDelayedList+0x64>)
  401b0e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
  401b10:	e010      	b.n	401b34 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
  401b12:	4b0e      	ldr	r3, [pc, #56]	; (401b4c <prvAddCurrentTaskToDelayedList+0x68>)
  401b14:	681a      	ldr	r2, [r3, #0]
  401b16:	4b09      	ldr	r3, [pc, #36]	; (401b3c <prvAddCurrentTaskToDelayedList+0x58>)
  401b18:	681b      	ldr	r3, [r3, #0]
  401b1a:	3304      	adds	r3, #4
  401b1c:	4619      	mov	r1, r3
  401b1e:	4610      	mov	r0, r2
  401b20:	4b09      	ldr	r3, [pc, #36]	; (401b48 <prvAddCurrentTaskToDelayedList+0x64>)
  401b22:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401b24:	4b0a      	ldr	r3, [pc, #40]	; (401b50 <prvAddCurrentTaskToDelayedList+0x6c>)
  401b26:	681b      	ldr	r3, [r3, #0]
  401b28:	687a      	ldr	r2, [r7, #4]
  401b2a:	429a      	cmp	r2, r3
  401b2c:	d202      	bcs.n	401b34 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
  401b2e:	4a08      	ldr	r2, [pc, #32]	; (401b50 <prvAddCurrentTaskToDelayedList+0x6c>)
  401b30:	687b      	ldr	r3, [r7, #4]
  401b32:	6013      	str	r3, [r2, #0]
}
  401b34:	bf00      	nop
  401b36:	3708      	adds	r7, #8
  401b38:	46bd      	mov	sp, r7
  401b3a:	bd80      	pop	{r7, pc}
  401b3c:	2040aa14 	.word	0x2040aa14
  401b40:	2040aaf0 	.word	0x2040aaf0
  401b44:	2040aaa8 	.word	0x2040aaa8
  401b48:	004002db 	.word	0x004002db
  401b4c:	2040aaa4 	.word	0x2040aaa4
  401b50:	20400008 	.word	0x20400008

00401b54 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
  401b54:	b580      	push	{r7, lr}
  401b56:	b084      	sub	sp, #16
  401b58:	af00      	add	r7, sp, #0
  401b5a:	4603      	mov	r3, r0
  401b5c:	6039      	str	r1, [r7, #0]
  401b5e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
  401b60:	204c      	movs	r0, #76	; 0x4c
  401b62:	4b15      	ldr	r3, [pc, #84]	; (401bb8 <prvAllocateTCBAndStack+0x64>)
  401b64:	4798      	blx	r3
  401b66:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
  401b68:	68fb      	ldr	r3, [r7, #12]
  401b6a:	2b00      	cmp	r3, #0
  401b6c:	d01e      	beq.n	401bac <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
  401b6e:	683b      	ldr	r3, [r7, #0]
  401b70:	2b00      	cmp	r3, #0
  401b72:	d106      	bne.n	401b82 <prvAllocateTCBAndStack+0x2e>
  401b74:	88fb      	ldrh	r3, [r7, #6]
  401b76:	009b      	lsls	r3, r3, #2
  401b78:	4618      	mov	r0, r3
  401b7a:	4b0f      	ldr	r3, [pc, #60]	; (401bb8 <prvAllocateTCBAndStack+0x64>)
  401b7c:	4798      	blx	r3
  401b7e:	4603      	mov	r3, r0
  401b80:	e000      	b.n	401b84 <prvAllocateTCBAndStack+0x30>
  401b82:	683b      	ldr	r3, [r7, #0]
  401b84:	68fa      	ldr	r2, [r7, #12]
  401b86:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
  401b88:	68fb      	ldr	r3, [r7, #12]
  401b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b8c:	2b00      	cmp	r3, #0
  401b8e:	d105      	bne.n	401b9c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
  401b90:	68f8      	ldr	r0, [r7, #12]
  401b92:	4b0a      	ldr	r3, [pc, #40]	; (401bbc <prvAllocateTCBAndStack+0x68>)
  401b94:	4798      	blx	r3
			pxNewTCB = NULL;
  401b96:	2300      	movs	r3, #0
  401b98:	60fb      	str	r3, [r7, #12]
  401b9a:	e007      	b.n	401bac <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
  401b9c:	68fb      	ldr	r3, [r7, #12]
  401b9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
  401ba0:	88fb      	ldrh	r3, [r7, #6]
  401ba2:	009b      	lsls	r3, r3, #2
  401ba4:	461a      	mov	r2, r3
  401ba6:	21a5      	movs	r1, #165	; 0xa5
  401ba8:	4b05      	ldr	r3, [pc, #20]	; (401bc0 <prvAllocateTCBAndStack+0x6c>)
  401baa:	4798      	blx	r3
		}
	}

	return pxNewTCB;
  401bac:	68fb      	ldr	r3, [r7, #12]
}
  401bae:	4618      	mov	r0, r3
  401bb0:	3710      	adds	r7, #16
  401bb2:	46bd      	mov	sp, r7
  401bb4:	bd80      	pop	{r7, pc}
  401bb6:	bf00      	nop
  401bb8:	00400685 	.word	0x00400685
  401bbc:	00400791 	.word	0x00400791
  401bc0:	00405905 	.word	0x00405905

00401bc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
  401bc4:	b580      	push	{r7, lr}
  401bc6:	b082      	sub	sp, #8
  401bc8:	af00      	add	r7, sp, #0
  401bca:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
  401bcc:	687b      	ldr	r3, [r7, #4]
  401bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bd0:	4618      	mov	r0, r3
  401bd2:	4b04      	ldr	r3, [pc, #16]	; (401be4 <prvDeleteTCB+0x20>)
  401bd4:	4798      	blx	r3
		vPortFree( pxTCB );
  401bd6:	6878      	ldr	r0, [r7, #4]
  401bd8:	4b02      	ldr	r3, [pc, #8]	; (401be4 <prvDeleteTCB+0x20>)
  401bda:	4798      	blx	r3
	}
  401bdc:	bf00      	nop
  401bde:	3708      	adds	r7, #8
  401be0:	46bd      	mov	sp, r7
  401be2:	bd80      	pop	{r7, pc}
  401be4:	00400791 	.word	0x00400791

00401be8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
  401be8:	b480      	push	{r7}
  401bea:	b083      	sub	sp, #12
  401bec:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
  401bee:	4b05      	ldr	r3, [pc, #20]	; (401c04 <xTaskGetCurrentTaskHandle+0x1c>)
  401bf0:	681b      	ldr	r3, [r3, #0]
  401bf2:	607b      	str	r3, [r7, #4]

		return xReturn;
  401bf4:	687b      	ldr	r3, [r7, #4]
	}
  401bf6:	4618      	mov	r0, r3
  401bf8:	370c      	adds	r7, #12
  401bfa:	46bd      	mov	sp, r7
  401bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c00:	4770      	bx	lr
  401c02:	bf00      	nop
  401c04:	2040aa14 	.word	0x2040aa14

00401c08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
  401c08:	b480      	push	{r7}
  401c0a:	b083      	sub	sp, #12
  401c0c:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
  401c0e:	4b0b      	ldr	r3, [pc, #44]	; (401c3c <xTaskGetSchedulerState+0x34>)
  401c10:	681b      	ldr	r3, [r3, #0]
  401c12:	2b00      	cmp	r3, #0
  401c14:	d102      	bne.n	401c1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401c16:	2300      	movs	r3, #0
  401c18:	607b      	str	r3, [r7, #4]
  401c1a:	e008      	b.n	401c2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
  401c1c:	4b08      	ldr	r3, [pc, #32]	; (401c40 <xTaskGetSchedulerState+0x38>)
  401c1e:	681b      	ldr	r3, [r3, #0]
  401c20:	2b00      	cmp	r3, #0
  401c22:	d102      	bne.n	401c2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
  401c24:	2301      	movs	r3, #1
  401c26:	607b      	str	r3, [r7, #4]
  401c28:	e001      	b.n	401c2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401c2a:	2302      	movs	r3, #2
  401c2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
  401c2e:	687b      	ldr	r3, [r7, #4]
	}
  401c30:	4618      	mov	r0, r3
  401c32:	370c      	adds	r7, #12
  401c34:	46bd      	mov	sp, r7
  401c36:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c3a:	4770      	bx	lr
  401c3c:	2040aafc 	.word	0x2040aafc
  401c40:	2040ab00 	.word	0x2040ab00

00401c44 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
  401c44:	b580      	push	{r7, lr}
  401c46:	b084      	sub	sp, #16
  401c48:	af00      	add	r7, sp, #0
  401c4a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401c4c:	687b      	ldr	r3, [r7, #4]
  401c4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401c50:	687b      	ldr	r3, [r7, #4]
  401c52:	2b00      	cmp	r3, #0
  401c54:	d041      	beq.n	401cda <vTaskPriorityInherit+0x96>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401c56:	68fb      	ldr	r3, [r7, #12]
  401c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c5a:	4b22      	ldr	r3, [pc, #136]	; (401ce4 <vTaskPriorityInherit+0xa0>)
  401c5c:	681b      	ldr	r3, [r3, #0]
  401c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c60:	429a      	cmp	r2, r3
  401c62:	d23a      	bcs.n	401cda <vTaskPriorityInherit+0x96>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
  401c64:	4b1f      	ldr	r3, [pc, #124]	; (401ce4 <vTaskPriorityInherit+0xa0>)
  401c66:	681b      	ldr	r3, [r3, #0]
  401c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401c6a:	f1c3 0205 	rsb	r2, r3, #5
  401c6e:	68fb      	ldr	r3, [r7, #12]
  401c70:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401c72:	68fb      	ldr	r3, [r7, #12]
  401c74:	6959      	ldr	r1, [r3, #20]
  401c76:	68fb      	ldr	r3, [r7, #12]
  401c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c7a:	4613      	mov	r3, r2
  401c7c:	009b      	lsls	r3, r3, #2
  401c7e:	4413      	add	r3, r2
  401c80:	009b      	lsls	r3, r3, #2
  401c82:	4a19      	ldr	r2, [pc, #100]	; (401ce8 <vTaskPriorityInherit+0xa4>)
  401c84:	4413      	add	r3, r2
  401c86:	4299      	cmp	r1, r3
  401c88:	d122      	bne.n	401cd0 <vTaskPriorityInherit+0x8c>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401c8a:	68fb      	ldr	r3, [r7, #12]
  401c8c:	3304      	adds	r3, #4
  401c8e:	4618      	mov	r0, r3
  401c90:	4b16      	ldr	r3, [pc, #88]	; (401cec <vTaskPriorityInherit+0xa8>)
  401c92:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401c94:	4b13      	ldr	r3, [pc, #76]	; (401ce4 <vTaskPriorityInherit+0xa0>)
  401c96:	681b      	ldr	r3, [r3, #0]
  401c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c9a:	68fb      	ldr	r3, [r7, #12]
  401c9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
  401c9e:	68fb      	ldr	r3, [r7, #12]
  401ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401ca2:	4b13      	ldr	r3, [pc, #76]	; (401cf0 <vTaskPriorityInherit+0xac>)
  401ca4:	681b      	ldr	r3, [r3, #0]
  401ca6:	429a      	cmp	r2, r3
  401ca8:	d903      	bls.n	401cb2 <vTaskPriorityInherit+0x6e>
  401caa:	68fb      	ldr	r3, [r7, #12]
  401cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401cae:	4a10      	ldr	r2, [pc, #64]	; (401cf0 <vTaskPriorityInherit+0xac>)
  401cb0:	6013      	str	r3, [r2, #0]
  401cb2:	68fb      	ldr	r3, [r7, #12]
  401cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401cb6:	4613      	mov	r3, r2
  401cb8:	009b      	lsls	r3, r3, #2
  401cba:	4413      	add	r3, r2
  401cbc:	009b      	lsls	r3, r3, #2
  401cbe:	4a0a      	ldr	r2, [pc, #40]	; (401ce8 <vTaskPriorityInherit+0xa4>)
  401cc0:	441a      	add	r2, r3
  401cc2:	68fb      	ldr	r3, [r7, #12]
  401cc4:	3304      	adds	r3, #4
  401cc6:	4619      	mov	r1, r3
  401cc8:	4610      	mov	r0, r2
  401cca:	4b0a      	ldr	r3, [pc, #40]	; (401cf4 <vTaskPriorityInherit+0xb0>)
  401ccc:	4798      	blx	r3
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
  401cce:	e004      	b.n	401cda <vTaskPriorityInherit+0x96>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401cd0:	4b04      	ldr	r3, [pc, #16]	; (401ce4 <vTaskPriorityInherit+0xa0>)
  401cd2:	681b      	ldr	r3, [r3, #0]
  401cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401cd6:	68fb      	ldr	r3, [r7, #12]
  401cd8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
  401cda:	bf00      	nop
  401cdc:	3710      	adds	r7, #16
  401cde:	46bd      	mov	sp, r7
  401ce0:	bd80      	pop	{r7, pc}
  401ce2:	bf00      	nop
  401ce4:	2040aa14 	.word	0x2040aa14
  401ce8:	2040aa18 	.word	0x2040aa18
  401cec:	0040034d 	.word	0x0040034d
  401cf0:	2040aaf8 	.word	0x2040aaf8
  401cf4:	0040028b 	.word	0x0040028b

00401cf8 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
  401cf8:	b580      	push	{r7, lr}
  401cfa:	b084      	sub	sp, #16
  401cfc:	af00      	add	r7, sp, #0
  401cfe:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
  401d00:	687b      	ldr	r3, [r7, #4]
  401d02:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
  401d04:	687b      	ldr	r3, [r7, #4]
  401d06:	2b00      	cmp	r3, #0
  401d08:	d02c      	beq.n	401d64 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401d0a:	68fb      	ldr	r3, [r7, #12]
  401d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d0e:	68fb      	ldr	r3, [r7, #12]
  401d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  401d12:	429a      	cmp	r2, r3
  401d14:	d026      	beq.n	401d64 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
  401d16:	68fb      	ldr	r3, [r7, #12]
  401d18:	3304      	adds	r3, #4
  401d1a:	4618      	mov	r0, r3
  401d1c:	4b13      	ldr	r3, [pc, #76]	; (401d6c <vTaskPriorityDisinherit+0x74>)
  401d1e:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
  401d20:	68fb      	ldr	r3, [r7, #12]
  401d22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  401d24:	68fb      	ldr	r3, [r7, #12]
  401d26:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
  401d28:	68fb      	ldr	r3, [r7, #12]
  401d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d2c:	f1c3 0205 	rsb	r2, r3, #5
  401d30:	68fb      	ldr	r3, [r7, #12]
  401d32:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
  401d34:	68fb      	ldr	r3, [r7, #12]
  401d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d38:	4b0d      	ldr	r3, [pc, #52]	; (401d70 <vTaskPriorityDisinherit+0x78>)
  401d3a:	681b      	ldr	r3, [r3, #0]
  401d3c:	429a      	cmp	r2, r3
  401d3e:	d903      	bls.n	401d48 <vTaskPriorityDisinherit+0x50>
  401d40:	68fb      	ldr	r3, [r7, #12]
  401d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d44:	4a0a      	ldr	r2, [pc, #40]	; (401d70 <vTaskPriorityDisinherit+0x78>)
  401d46:	6013      	str	r3, [r2, #0]
  401d48:	68fb      	ldr	r3, [r7, #12]
  401d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401d4c:	4613      	mov	r3, r2
  401d4e:	009b      	lsls	r3, r3, #2
  401d50:	4413      	add	r3, r2
  401d52:	009b      	lsls	r3, r3, #2
  401d54:	4a07      	ldr	r2, [pc, #28]	; (401d74 <vTaskPriorityDisinherit+0x7c>)
  401d56:	441a      	add	r2, r3
  401d58:	68fb      	ldr	r3, [r7, #12]
  401d5a:	3304      	adds	r3, #4
  401d5c:	4619      	mov	r1, r3
  401d5e:	4610      	mov	r0, r2
  401d60:	4b05      	ldr	r3, [pc, #20]	; (401d78 <vTaskPriorityDisinherit+0x80>)
  401d62:	4798      	blx	r3
			}
		}
	}
  401d64:	bf00      	nop
  401d66:	3710      	adds	r7, #16
  401d68:	46bd      	mov	sp, r7
  401d6a:	bd80      	pop	{r7, pc}
  401d6c:	0040034d 	.word	0x0040034d
  401d70:	2040aaf8 	.word	0x2040aaf8
  401d74:	2040aa18 	.word	0x2040aa18
  401d78:	0040028b 	.word	0x0040028b

00401d7c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
  401d7c:	b590      	push	{r4, r7, lr}
  401d7e:	b087      	sub	sp, #28
  401d80:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
  401d82:	2300      	movs	r3, #0
  401d84:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  401d86:	4b11      	ldr	r3, [pc, #68]	; (401dcc <xTimerCreateTimerTask+0x50>)
  401d88:	4798      	blx	r3

	if( xTimerQueue != NULL )
  401d8a:	4b11      	ldr	r3, [pc, #68]	; (401dd0 <xTimerCreateTimerTask+0x54>)
  401d8c:	681b      	ldr	r3, [r3, #0]
  401d8e:	2b00      	cmp	r3, #0
  401d90:	d00f      	beq.n	401db2 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401d92:	2300      	movs	r3, #0
  401d94:	9303      	str	r3, [sp, #12]
  401d96:	2300      	movs	r3, #0
  401d98:	9302      	str	r3, [sp, #8]
  401d9a:	2300      	movs	r3, #0
  401d9c:	9301      	str	r3, [sp, #4]
  401d9e:	2304      	movs	r3, #4
  401da0:	9300      	str	r3, [sp, #0]
  401da2:	2300      	movs	r3, #0
  401da4:	f44f 7282 	mov.w	r2, #260	; 0x104
  401da8:	490a      	ldr	r1, [pc, #40]	; (401dd4 <xTimerCreateTimerTask+0x58>)
  401daa:	480b      	ldr	r0, [pc, #44]	; (401dd8 <xTimerCreateTimerTask+0x5c>)
  401dac:	4c0b      	ldr	r4, [pc, #44]	; (401ddc <xTimerCreateTimerTask+0x60>)
  401dae:	47a0      	blx	r4
  401db0:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
  401db2:	687b      	ldr	r3, [r7, #4]
  401db4:	2b00      	cmp	r3, #0
  401db6:	d103      	bne.n	401dc0 <xTimerCreateTimerTask+0x44>
  401db8:	4b09      	ldr	r3, [pc, #36]	; (401de0 <xTimerCreateTimerTask+0x64>)
  401dba:	4798      	blx	r3
  401dbc:	bf00      	nop
  401dbe:	e7fd      	b.n	401dbc <xTimerCreateTimerTask+0x40>
	return xReturn;
  401dc0:	687b      	ldr	r3, [r7, #4]
}
  401dc2:	4618      	mov	r0, r3
  401dc4:	370c      	adds	r7, #12
  401dc6:	46bd      	mov	sp, r7
  401dc8:	bd90      	pop	{r4, r7, pc}
  401dca:	bf00      	nop
  401dcc:	00402299 	.word	0x00402299
  401dd0:	2040ab44 	.word	0x2040ab44
  401dd4:	00408804 	.word	0x00408804
  401dd8:	00401ef5 	.word	0x00401ef5
  401ddc:	00401109 	.word	0x00401109
  401de0:	0040059d 	.word	0x0040059d

00401de4 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
  401de4:	b590      	push	{r4, r7, lr}
  401de6:	b089      	sub	sp, #36	; 0x24
  401de8:	af00      	add	r7, sp, #0
  401dea:	60f8      	str	r0, [r7, #12]
  401dec:	60b9      	str	r1, [r7, #8]
  401dee:	607a      	str	r2, [r7, #4]
  401df0:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
  401df2:	2300      	movs	r3, #0
  401df4:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401df6:	4b1a      	ldr	r3, [pc, #104]	; (401e60 <xTimerGenericCommand+0x7c>)
  401df8:	681b      	ldr	r3, [r3, #0]
  401dfa:	2b00      	cmp	r3, #0
  401dfc:	d02a      	beq.n	401e54 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  401dfe:	68bb      	ldr	r3, [r7, #8]
  401e00:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
  401e02:	687b      	ldr	r3, [r7, #4]
  401e04:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
  401e06:	68fb      	ldr	r3, [r7, #12]
  401e08:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
  401e0a:	683b      	ldr	r3, [r7, #0]
  401e0c:	2b00      	cmp	r3, #0
  401e0e:	d118      	bne.n	401e42 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401e10:	4b14      	ldr	r3, [pc, #80]	; (401e64 <xTimerGenericCommand+0x80>)
  401e12:	4798      	blx	r3
  401e14:	4603      	mov	r3, r0
  401e16:	2b01      	cmp	r3, #1
  401e18:	d109      	bne.n	401e2e <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
  401e1a:	4b11      	ldr	r3, [pc, #68]	; (401e60 <xTimerGenericCommand+0x7c>)
  401e1c:	6818      	ldr	r0, [r3, #0]
  401e1e:	f107 0110 	add.w	r1, r7, #16
  401e22:	2300      	movs	r3, #0
  401e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  401e26:	4c10      	ldr	r4, [pc, #64]	; (401e68 <xTimerGenericCommand+0x84>)
  401e28:	47a0      	blx	r4
  401e2a:	61f8      	str	r0, [r7, #28]
  401e2c:	e012      	b.n	401e54 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401e2e:	4b0c      	ldr	r3, [pc, #48]	; (401e60 <xTimerGenericCommand+0x7c>)
  401e30:	6818      	ldr	r0, [r3, #0]
  401e32:	f107 0110 	add.w	r1, r7, #16
  401e36:	2300      	movs	r3, #0
  401e38:	2200      	movs	r2, #0
  401e3a:	4c0b      	ldr	r4, [pc, #44]	; (401e68 <xTimerGenericCommand+0x84>)
  401e3c:	47a0      	blx	r4
  401e3e:	61f8      	str	r0, [r7, #28]
  401e40:	e008      	b.n	401e54 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401e42:	4b07      	ldr	r3, [pc, #28]	; (401e60 <xTimerGenericCommand+0x7c>)
  401e44:	6818      	ldr	r0, [r3, #0]
  401e46:	f107 0110 	add.w	r1, r7, #16
  401e4a:	2300      	movs	r3, #0
  401e4c:	683a      	ldr	r2, [r7, #0]
  401e4e:	4c07      	ldr	r4, [pc, #28]	; (401e6c <xTimerGenericCommand+0x88>)
  401e50:	47a0      	blx	r4
  401e52:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
  401e54:	69fb      	ldr	r3, [r7, #28]
}
  401e56:	4618      	mov	r0, r3
  401e58:	3724      	adds	r7, #36	; 0x24
  401e5a:	46bd      	mov	sp, r7
  401e5c:	bd90      	pop	{r4, r7, pc}
  401e5e:	bf00      	nop
  401e60:	2040ab44 	.word	0x2040ab44
  401e64:	00401c09 	.word	0x00401c09
  401e68:	00400a89 	.word	0x00400a89
  401e6c:	00400bf1 	.word	0x00400bf1

00401e70 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
  401e70:	b590      	push	{r4, r7, lr}
  401e72:	b087      	sub	sp, #28
  401e74:	af02      	add	r7, sp, #8
  401e76:	6078      	str	r0, [r7, #4]
  401e78:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401e7a:	4b19      	ldr	r3, [pc, #100]	; (401ee0 <prvProcessExpiredTimer+0x70>)
  401e7c:	681b      	ldr	r3, [r3, #0]
  401e7e:	68db      	ldr	r3, [r3, #12]
  401e80:	68db      	ldr	r3, [r3, #12]
  401e82:	60fb      	str	r3, [r7, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
  401e84:	68fb      	ldr	r3, [r7, #12]
  401e86:	3304      	adds	r3, #4
  401e88:	4618      	mov	r0, r3
  401e8a:	4b16      	ldr	r3, [pc, #88]	; (401ee4 <prvProcessExpiredTimer+0x74>)
  401e8c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  401e8e:	68fb      	ldr	r3, [r7, #12]
  401e90:	69db      	ldr	r3, [r3, #28]
  401e92:	2b01      	cmp	r3, #1
  401e94:	d11b      	bne.n	401ece <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401e96:	68fb      	ldr	r3, [r7, #12]
  401e98:	699a      	ldr	r2, [r3, #24]
  401e9a:	687b      	ldr	r3, [r7, #4]
  401e9c:	18d1      	adds	r1, r2, r3
  401e9e:	687b      	ldr	r3, [r7, #4]
  401ea0:	683a      	ldr	r2, [r7, #0]
  401ea2:	68f8      	ldr	r0, [r7, #12]
  401ea4:	4c10      	ldr	r4, [pc, #64]	; (401ee8 <prvProcessExpiredTimer+0x78>)
  401ea6:	47a0      	blx	r4
  401ea8:	4603      	mov	r3, r0
  401eaa:	2b01      	cmp	r3, #1
  401eac:	d10f      	bne.n	401ece <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  401eae:	2300      	movs	r3, #0
  401eb0:	9300      	str	r3, [sp, #0]
  401eb2:	2300      	movs	r3, #0
  401eb4:	687a      	ldr	r2, [r7, #4]
  401eb6:	2100      	movs	r1, #0
  401eb8:	68f8      	ldr	r0, [r7, #12]
  401eba:	4c0c      	ldr	r4, [pc, #48]	; (401eec <prvProcessExpiredTimer+0x7c>)
  401ebc:	47a0      	blx	r4
  401ebe:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
  401ec0:	68bb      	ldr	r3, [r7, #8]
  401ec2:	2b00      	cmp	r3, #0
  401ec4:	d103      	bne.n	401ece <prvProcessExpiredTimer+0x5e>
  401ec6:	4b0a      	ldr	r3, [pc, #40]	; (401ef0 <prvProcessExpiredTimer+0x80>)
  401ec8:	4798      	blx	r3
  401eca:	bf00      	nop
  401ecc:	e7fd      	b.n	401eca <prvProcessExpiredTimer+0x5a>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  401ece:	68fb      	ldr	r3, [r7, #12]
  401ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  401ed2:	68f8      	ldr	r0, [r7, #12]
  401ed4:	4798      	blx	r3
}
  401ed6:	bf00      	nop
  401ed8:	3714      	adds	r7, #20
  401eda:	46bd      	mov	sp, r7
  401edc:	bd90      	pop	{r4, r7, pc}
  401ede:	bf00      	nop
  401ee0:	2040ab3c 	.word	0x2040ab3c
  401ee4:	0040034d 	.word	0x0040034d
  401ee8:	0040203d 	.word	0x0040203d
  401eec:	00401de5 	.word	0x00401de5
  401ef0:	0040059d 	.word	0x0040059d

00401ef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  401ef4:	b580      	push	{r7, lr}
  401ef6:	b084      	sub	sp, #16
  401ef8:	af00      	add	r7, sp, #0
  401efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401efc:	f107 0308 	add.w	r3, r7, #8
  401f00:	4618      	mov	r0, r3
  401f02:	4b05      	ldr	r3, [pc, #20]	; (401f18 <prvTimerTask+0x24>)
  401f04:	4798      	blx	r3
  401f06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  401f08:	68bb      	ldr	r3, [r7, #8]
  401f0a:	4619      	mov	r1, r3
  401f0c:	68f8      	ldr	r0, [r7, #12]
  401f0e:	4b03      	ldr	r3, [pc, #12]	; (401f1c <prvTimerTask+0x28>)
  401f10:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
  401f12:	4b03      	ldr	r3, [pc, #12]	; (401f20 <prvTimerTask+0x2c>)
  401f14:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  401f16:	e7f1      	b.n	401efc <prvTimerTask+0x8>
  401f18:	00401fa9 	.word	0x00401fa9
  401f1c:	00401f25 	.word	0x00401f25
  401f20:	004020c5 	.word	0x004020c5

00401f24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
  401f24:	b580      	push	{r7, lr}
  401f26:	b084      	sub	sp, #16
  401f28:	af00      	add	r7, sp, #0
  401f2a:	6078      	str	r0, [r7, #4]
  401f2c:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
  401f2e:	4b17      	ldr	r3, [pc, #92]	; (401f8c <prvProcessTimerOrBlockTask+0x68>)
  401f30:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401f32:	f107 0308 	add.w	r3, r7, #8
  401f36:	4618      	mov	r0, r3
  401f38:	4b15      	ldr	r3, [pc, #84]	; (401f90 <prvProcessTimerOrBlockTask+0x6c>)
  401f3a:	4798      	blx	r3
  401f3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
  401f3e:	68bb      	ldr	r3, [r7, #8]
  401f40:	2b00      	cmp	r3, #0
  401f42:	d11d      	bne.n	401f80 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401f44:	683b      	ldr	r3, [r7, #0]
  401f46:	2b00      	cmp	r3, #0
  401f48:	d10a      	bne.n	401f60 <prvProcessTimerOrBlockTask+0x3c>
  401f4a:	687a      	ldr	r2, [r7, #4]
  401f4c:	68fb      	ldr	r3, [r7, #12]
  401f4e:	429a      	cmp	r2, r3
  401f50:	d806      	bhi.n	401f60 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
  401f52:	4b10      	ldr	r3, [pc, #64]	; (401f94 <prvProcessTimerOrBlockTask+0x70>)
  401f54:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  401f56:	68f9      	ldr	r1, [r7, #12]
  401f58:	6878      	ldr	r0, [r7, #4]
  401f5a:	4b0f      	ldr	r3, [pc, #60]	; (401f98 <prvProcessTimerOrBlockTask+0x74>)
  401f5c:	4798      	blx	r3
		else
		{
			xTaskResumeAll();
		}
	}
}
  401f5e:	e011      	b.n	401f84 <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
  401f60:	4b0e      	ldr	r3, [pc, #56]	; (401f9c <prvProcessTimerOrBlockTask+0x78>)
  401f62:	6818      	ldr	r0, [r3, #0]
  401f64:	687a      	ldr	r2, [r7, #4]
  401f66:	68fb      	ldr	r3, [r7, #12]
  401f68:	1ad3      	subs	r3, r2, r3
  401f6a:	4619      	mov	r1, r3
  401f6c:	4b0c      	ldr	r3, [pc, #48]	; (401fa0 <prvProcessTimerOrBlockTask+0x7c>)
  401f6e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401f70:	4b08      	ldr	r3, [pc, #32]	; (401f94 <prvProcessTimerOrBlockTask+0x70>)
  401f72:	4798      	blx	r3
  401f74:	4603      	mov	r3, r0
  401f76:	2b00      	cmp	r3, #0
  401f78:	d104      	bne.n	401f84 <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
  401f7a:	4b0a      	ldr	r3, [pc, #40]	; (401fa4 <prvProcessTimerOrBlockTask+0x80>)
  401f7c:	4798      	blx	r3
}
  401f7e:	e001      	b.n	401f84 <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
  401f80:	4b04      	ldr	r3, [pc, #16]	; (401f94 <prvProcessTimerOrBlockTask+0x70>)
  401f82:	4798      	blx	r3
}
  401f84:	bf00      	nop
  401f86:	3710      	adds	r7, #16
  401f88:	46bd      	mov	sp, r7
  401f8a:	bd80      	pop	{r7, pc}
  401f8c:	00401331 	.word	0x00401331
  401f90:	00401ff1 	.word	0x00401ff1
  401f94:	0040134d 	.word	0x0040134d
  401f98:	00401e71 	.word	0x00401e71
  401f9c:	2040ab44 	.word	0x2040ab44
  401fa0:	004010a5 	.word	0x004010a5
  401fa4:	00400539 	.word	0x00400539

00401fa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
  401fa8:	b480      	push	{r7}
  401faa:	b085      	sub	sp, #20
  401fac:	af00      	add	r7, sp, #0
  401fae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401fb0:	4b0e      	ldr	r3, [pc, #56]	; (401fec <prvGetNextExpireTime+0x44>)
  401fb2:	681b      	ldr	r3, [r3, #0]
  401fb4:	681b      	ldr	r3, [r3, #0]
  401fb6:	2b00      	cmp	r3, #0
  401fb8:	bf0c      	ite	eq
  401fba:	2301      	moveq	r3, #1
  401fbc:	2300      	movne	r3, #0
  401fbe:	b2db      	uxtb	r3, r3
  401fc0:	461a      	mov	r2, r3
  401fc2:	687b      	ldr	r3, [r7, #4]
  401fc4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  401fc6:	687b      	ldr	r3, [r7, #4]
  401fc8:	681b      	ldr	r3, [r3, #0]
  401fca:	2b00      	cmp	r3, #0
  401fcc:	d105      	bne.n	401fda <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401fce:	4b07      	ldr	r3, [pc, #28]	; (401fec <prvGetNextExpireTime+0x44>)
  401fd0:	681b      	ldr	r3, [r3, #0]
  401fd2:	68db      	ldr	r3, [r3, #12]
  401fd4:	681b      	ldr	r3, [r3, #0]
  401fd6:	60fb      	str	r3, [r7, #12]
  401fd8:	e001      	b.n	401fde <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
  401fda:	2300      	movs	r3, #0
  401fdc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
  401fde:	68fb      	ldr	r3, [r7, #12]
}
  401fe0:	4618      	mov	r0, r3
  401fe2:	3714      	adds	r7, #20
  401fe4:	46bd      	mov	sp, r7
  401fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fea:	4770      	bx	lr
  401fec:	2040ab3c 	.word	0x2040ab3c

00401ff0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
  401ff0:	b580      	push	{r7, lr}
  401ff2:	b084      	sub	sp, #16
  401ff4:	af00      	add	r7, sp, #0
  401ff6:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
  401ff8:	4b0d      	ldr	r3, [pc, #52]	; (402030 <prvSampleTimeNow+0x40>)
  401ffa:	4798      	blx	r3
  401ffc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
  401ffe:	4b0d      	ldr	r3, [pc, #52]	; (402034 <prvSampleTimeNow+0x44>)
  402000:	681b      	ldr	r3, [r3, #0]
  402002:	68fa      	ldr	r2, [r7, #12]
  402004:	429a      	cmp	r2, r3
  402006:	d208      	bcs.n	40201a <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
  402008:	4b0a      	ldr	r3, [pc, #40]	; (402034 <prvSampleTimeNow+0x44>)
  40200a:	681b      	ldr	r3, [r3, #0]
  40200c:	4618      	mov	r0, r3
  40200e:	4b0a      	ldr	r3, [pc, #40]	; (402038 <prvSampleTimeNow+0x48>)
  402010:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  402012:	687b      	ldr	r3, [r7, #4]
  402014:	2201      	movs	r2, #1
  402016:	601a      	str	r2, [r3, #0]
  402018:	e002      	b.n	402020 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  40201a:	687b      	ldr	r3, [r7, #4]
  40201c:	2200      	movs	r2, #0
  40201e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
  402020:	4a04      	ldr	r2, [pc, #16]	; (402034 <prvSampleTimeNow+0x44>)
  402022:	68fb      	ldr	r3, [r7, #12]
  402024:	6013      	str	r3, [r2, #0]

	return xTimeNow;
  402026:	68fb      	ldr	r3, [r7, #12]
}
  402028:	4618      	mov	r0, r3
  40202a:	3710      	adds	r7, #16
  40202c:	46bd      	mov	sp, r7
  40202e:	bd80      	pop	{r7, pc}
  402030:	0040146d 	.word	0x0040146d
  402034:	2040ab48 	.word	0x2040ab48
  402038:	004021d1 	.word	0x004021d1

0040203c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
  40203c:	b580      	push	{r7, lr}
  40203e:	b086      	sub	sp, #24
  402040:	af00      	add	r7, sp, #0
  402042:	60f8      	str	r0, [r7, #12]
  402044:	60b9      	str	r1, [r7, #8]
  402046:	607a      	str	r2, [r7, #4]
  402048:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
  40204a:	2300      	movs	r3, #0
  40204c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40204e:	68fb      	ldr	r3, [r7, #12]
  402050:	68ba      	ldr	r2, [r7, #8]
  402052:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402054:	68fb      	ldr	r3, [r7, #12]
  402056:	68fa      	ldr	r2, [r7, #12]
  402058:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
  40205a:	68ba      	ldr	r2, [r7, #8]
  40205c:	687b      	ldr	r3, [r7, #4]
  40205e:	429a      	cmp	r2, r3
  402060:	d812      	bhi.n	402088 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
  402062:	687a      	ldr	r2, [r7, #4]
  402064:	683b      	ldr	r3, [r7, #0]
  402066:	1ad2      	subs	r2, r2, r3
  402068:	68fb      	ldr	r3, [r7, #12]
  40206a:	699b      	ldr	r3, [r3, #24]
  40206c:	429a      	cmp	r2, r3
  40206e:	d302      	bcc.n	402076 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402070:	2301      	movs	r3, #1
  402072:	617b      	str	r3, [r7, #20]
  402074:	e01b      	b.n	4020ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402076:	4b10      	ldr	r3, [pc, #64]	; (4020b8 <prvInsertTimerInActiveList+0x7c>)
  402078:	681a      	ldr	r2, [r3, #0]
  40207a:	68fb      	ldr	r3, [r7, #12]
  40207c:	3304      	adds	r3, #4
  40207e:	4619      	mov	r1, r3
  402080:	4610      	mov	r0, r2
  402082:	4b0e      	ldr	r3, [pc, #56]	; (4020bc <prvInsertTimerInActiveList+0x80>)
  402084:	4798      	blx	r3
  402086:	e012      	b.n	4020ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402088:	687a      	ldr	r2, [r7, #4]
  40208a:	683b      	ldr	r3, [r7, #0]
  40208c:	429a      	cmp	r2, r3
  40208e:	d206      	bcs.n	40209e <prvInsertTimerInActiveList+0x62>
  402090:	68ba      	ldr	r2, [r7, #8]
  402092:	683b      	ldr	r3, [r7, #0]
  402094:	429a      	cmp	r2, r3
  402096:	d302      	bcc.n	40209e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402098:	2301      	movs	r3, #1
  40209a:	617b      	str	r3, [r7, #20]
  40209c:	e007      	b.n	4020ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40209e:	4b08      	ldr	r3, [pc, #32]	; (4020c0 <prvInsertTimerInActiveList+0x84>)
  4020a0:	681a      	ldr	r2, [r3, #0]
  4020a2:	68fb      	ldr	r3, [r7, #12]
  4020a4:	3304      	adds	r3, #4
  4020a6:	4619      	mov	r1, r3
  4020a8:	4610      	mov	r0, r2
  4020aa:	4b04      	ldr	r3, [pc, #16]	; (4020bc <prvInsertTimerInActiveList+0x80>)
  4020ac:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
  4020ae:	697b      	ldr	r3, [r7, #20]
}
  4020b0:	4618      	mov	r0, r3
  4020b2:	3718      	adds	r7, #24
  4020b4:	46bd      	mov	sp, r7
  4020b6:	bd80      	pop	{r7, pc}
  4020b8:	2040ab40 	.word	0x2040ab40
  4020bc:	004002db 	.word	0x004002db
  4020c0:	2040ab3c 	.word	0x2040ab3c

004020c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
  4020c4:	b590      	push	{r4, r7, lr}
  4020c6:	b08b      	sub	sp, #44	; 0x2c
  4020c8:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4020ca:	1d3b      	adds	r3, r7, #4
  4020cc:	4618      	mov	r0, r3
  4020ce:	4b38      	ldr	r3, [pc, #224]	; (4021b0 <prvProcessReceivedCommands+0xec>)
  4020d0:	4798      	blx	r3
  4020d2:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  4020d4:	e05d      	b.n	402192 <prvProcessReceivedCommands+0xce>
	{
		pxTimer = xMessage.pxTimer;
  4020d6:	693b      	ldr	r3, [r7, #16]
  4020d8:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
  4020da:	69bb      	ldr	r3, [r7, #24]
  4020dc:	2b00      	cmp	r3, #0
  4020de:	d008      	beq.n	4020f2 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4020e0:	69bb      	ldr	r3, [r7, #24]
  4020e2:	695b      	ldr	r3, [r3, #20]
  4020e4:	2b00      	cmp	r3, #0
  4020e6:	d004      	beq.n	4020f2 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
  4020e8:	69bb      	ldr	r3, [r7, #24]
  4020ea:	3304      	adds	r3, #4
  4020ec:	4618      	mov	r0, r3
  4020ee:	4b31      	ldr	r3, [pc, #196]	; (4021b4 <prvProcessReceivedCommands+0xf0>)
  4020f0:	4798      	blx	r3
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
  4020f2:	68bb      	ldr	r3, [r7, #8]
  4020f4:	2b03      	cmp	r3, #3
  4020f6:	d84b      	bhi.n	402190 <prvProcessReceivedCommands+0xcc>
  4020f8:	a201      	add	r2, pc, #4	; (adr r2, 402100 <prvProcessReceivedCommands+0x3c>)
  4020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4020fe:	bf00      	nop
  402100:	00402111 	.word	0x00402111
  402104:	00402193 	.word	0x00402193
  402108:	0040215f 	.word	0x0040215f
  40210c:	00402189 	.word	0x00402189
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
  402110:	68fa      	ldr	r2, [r7, #12]
  402112:	69bb      	ldr	r3, [r7, #24]
  402114:	699b      	ldr	r3, [r3, #24]
  402116:	18d1      	adds	r1, r2, r3
  402118:	68fb      	ldr	r3, [r7, #12]
  40211a:	69fa      	ldr	r2, [r7, #28]
  40211c:	69b8      	ldr	r0, [r7, #24]
  40211e:	4c26      	ldr	r4, [pc, #152]	; (4021b8 <prvProcessReceivedCommands+0xf4>)
  402120:	47a0      	blx	r4
  402122:	4603      	mov	r3, r0
  402124:	2b01      	cmp	r3, #1
  402126:	d134      	bne.n	402192 <prvProcessReceivedCommands+0xce>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  402128:	69bb      	ldr	r3, [r7, #24]
  40212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40212c:	69b8      	ldr	r0, [r7, #24]
  40212e:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402130:	69bb      	ldr	r3, [r7, #24]
  402132:	69db      	ldr	r3, [r3, #28]
  402134:	2b01      	cmp	r3, #1
  402136:	d12c      	bne.n	402192 <prvProcessReceivedCommands+0xce>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402138:	68fa      	ldr	r2, [r7, #12]
  40213a:	69bb      	ldr	r3, [r7, #24]
  40213c:	699b      	ldr	r3, [r3, #24]
  40213e:	441a      	add	r2, r3
  402140:	2300      	movs	r3, #0
  402142:	9300      	str	r3, [sp, #0]
  402144:	2300      	movs	r3, #0
  402146:	2100      	movs	r1, #0
  402148:	69b8      	ldr	r0, [r7, #24]
  40214a:	4c1c      	ldr	r4, [pc, #112]	; (4021bc <prvProcessReceivedCommands+0xf8>)
  40214c:	47a0      	blx	r4
  40214e:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
  402150:	697b      	ldr	r3, [r7, #20]
  402152:	2b00      	cmp	r3, #0
  402154:	d11d      	bne.n	402192 <prvProcessReceivedCommands+0xce>
  402156:	4b1a      	ldr	r3, [pc, #104]	; (4021c0 <prvProcessReceivedCommands+0xfc>)
  402158:	4798      	blx	r3
  40215a:	bf00      	nop
  40215c:	e7fd      	b.n	40215a <prvProcessReceivedCommands+0x96>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
  40215e:	68fa      	ldr	r2, [r7, #12]
  402160:	69bb      	ldr	r3, [r7, #24]
  402162:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402164:	69bb      	ldr	r3, [r7, #24]
  402166:	699b      	ldr	r3, [r3, #24]
  402168:	2b00      	cmp	r3, #0
  40216a:	d103      	bne.n	402174 <prvProcessReceivedCommands+0xb0>
  40216c:	4b14      	ldr	r3, [pc, #80]	; (4021c0 <prvProcessReceivedCommands+0xfc>)
  40216e:	4798      	blx	r3
  402170:	bf00      	nop
  402172:	e7fd      	b.n	402170 <prvProcessReceivedCommands+0xac>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402174:	69bb      	ldr	r3, [r7, #24]
  402176:	699a      	ldr	r2, [r3, #24]
  402178:	69fb      	ldr	r3, [r7, #28]
  40217a:	18d1      	adds	r1, r2, r3
  40217c:	69fb      	ldr	r3, [r7, #28]
  40217e:	69fa      	ldr	r2, [r7, #28]
  402180:	69b8      	ldr	r0, [r7, #24]
  402182:	4c0d      	ldr	r4, [pc, #52]	; (4021b8 <prvProcessReceivedCommands+0xf4>)
  402184:	47a0      	blx	r4
				break;
  402186:	e004      	b.n	402192 <prvProcessReceivedCommands+0xce>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
  402188:	69b8      	ldr	r0, [r7, #24]
  40218a:	4b0e      	ldr	r3, [pc, #56]	; (4021c4 <prvProcessReceivedCommands+0x100>)
  40218c:	4798      	blx	r3
				break;
  40218e:	e000      	b.n	402192 <prvProcessReceivedCommands+0xce>

			default	:
				/* Don't expect to get here. */
				break;
  402190:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
  402192:	4b0d      	ldr	r3, [pc, #52]	; (4021c8 <prvProcessReceivedCommands+0x104>)
  402194:	6818      	ldr	r0, [r3, #0]
  402196:	f107 0108 	add.w	r1, r7, #8
  40219a:	2300      	movs	r3, #0
  40219c:	2200      	movs	r2, #0
  40219e:	4c0b      	ldr	r4, [pc, #44]	; (4021cc <prvProcessReceivedCommands+0x108>)
  4021a0:	47a0      	blx	r4
  4021a2:	4603      	mov	r3, r0
  4021a4:	2b00      	cmp	r3, #0
  4021a6:	d196      	bne.n	4020d6 <prvProcessReceivedCommands+0x12>
		}
	}
}
  4021a8:	bf00      	nop
  4021aa:	3724      	adds	r7, #36	; 0x24
  4021ac:	46bd      	mov	sp, r7
  4021ae:	bd90      	pop	{r4, r7, pc}
  4021b0:	00401ff1 	.word	0x00401ff1
  4021b4:	0040034d 	.word	0x0040034d
  4021b8:	0040203d 	.word	0x0040203d
  4021bc:	00401de5 	.word	0x00401de5
  4021c0:	0040059d 	.word	0x0040059d
  4021c4:	00400791 	.word	0x00400791
  4021c8:	2040ab44 	.word	0x2040ab44
  4021cc:	00400cad 	.word	0x00400cad

004021d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
  4021d0:	b590      	push	{r4, r7, lr}
  4021d2:	b08b      	sub	sp, #44	; 0x2c
  4021d4:	af02      	add	r7, sp, #8
  4021d6:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4021d8:	e03e      	b.n	402258 <prvSwitchTimerLists+0x88>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4021da:	4b29      	ldr	r3, [pc, #164]	; (402280 <prvSwitchTimerLists+0xb0>)
  4021dc:	681b      	ldr	r3, [r3, #0]
  4021de:	68db      	ldr	r3, [r3, #12]
  4021e0:	681b      	ldr	r3, [r3, #0]
  4021e2:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4021e4:	4b26      	ldr	r3, [pc, #152]	; (402280 <prvSwitchTimerLists+0xb0>)
  4021e6:	681b      	ldr	r3, [r3, #0]
  4021e8:	68db      	ldr	r3, [r3, #12]
  4021ea:	68db      	ldr	r3, [r3, #12]
  4021ec:	61bb      	str	r3, [r7, #24]
		uxListRemove( &( pxTimer->xTimerListItem ) );
  4021ee:	69bb      	ldr	r3, [r7, #24]
  4021f0:	3304      	adds	r3, #4
  4021f2:	4618      	mov	r0, r3
  4021f4:	4b23      	ldr	r3, [pc, #140]	; (402284 <prvSwitchTimerLists+0xb4>)
  4021f6:	4798      	blx	r3

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
  4021f8:	69bb      	ldr	r3, [r7, #24]
  4021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4021fc:	69b8      	ldr	r0, [r7, #24]
  4021fe:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
  402200:	69bb      	ldr	r3, [r7, #24]
  402202:	69db      	ldr	r3, [r3, #28]
  402204:	2b01      	cmp	r3, #1
  402206:	d127      	bne.n	402258 <prvSwitchTimerLists+0x88>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402208:	69bb      	ldr	r3, [r7, #24]
  40220a:	699a      	ldr	r2, [r3, #24]
  40220c:	69fb      	ldr	r3, [r7, #28]
  40220e:	4413      	add	r3, r2
  402210:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
  402212:	697a      	ldr	r2, [r7, #20]
  402214:	69fb      	ldr	r3, [r7, #28]
  402216:	429a      	cmp	r2, r3
  402218:	d90e      	bls.n	402238 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  40221a:	69bb      	ldr	r3, [r7, #24]
  40221c:	697a      	ldr	r2, [r7, #20]
  40221e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402220:	69bb      	ldr	r3, [r7, #24]
  402222:	69ba      	ldr	r2, [r7, #24]
  402224:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402226:	4b16      	ldr	r3, [pc, #88]	; (402280 <prvSwitchTimerLists+0xb0>)
  402228:	681a      	ldr	r2, [r3, #0]
  40222a:	69bb      	ldr	r3, [r7, #24]
  40222c:	3304      	adds	r3, #4
  40222e:	4619      	mov	r1, r3
  402230:	4610      	mov	r0, r2
  402232:	4b15      	ldr	r3, [pc, #84]	; (402288 <prvSwitchTimerLists+0xb8>)
  402234:	4798      	blx	r3
  402236:	e00f      	b.n	402258 <prvSwitchTimerLists+0x88>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
  402238:	2300      	movs	r3, #0
  40223a:	9300      	str	r3, [sp, #0]
  40223c:	2300      	movs	r3, #0
  40223e:	69fa      	ldr	r2, [r7, #28]
  402240:	2100      	movs	r1, #0
  402242:	69b8      	ldr	r0, [r7, #24]
  402244:	4c11      	ldr	r4, [pc, #68]	; (40228c <prvSwitchTimerLists+0xbc>)
  402246:	47a0      	blx	r4
  402248:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
  40224a:	693b      	ldr	r3, [r7, #16]
  40224c:	2b00      	cmp	r3, #0
  40224e:	d103      	bne.n	402258 <prvSwitchTimerLists+0x88>
  402250:	4b0f      	ldr	r3, [pc, #60]	; (402290 <prvSwitchTimerLists+0xc0>)
  402252:	4798      	blx	r3
  402254:	bf00      	nop
  402256:	e7fd      	b.n	402254 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402258:	4b09      	ldr	r3, [pc, #36]	; (402280 <prvSwitchTimerLists+0xb0>)
  40225a:	681b      	ldr	r3, [r3, #0]
  40225c:	681b      	ldr	r3, [r3, #0]
  40225e:	2b00      	cmp	r3, #0
  402260:	d1bb      	bne.n	4021da <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
  402262:	4b07      	ldr	r3, [pc, #28]	; (402280 <prvSwitchTimerLists+0xb0>)
  402264:	681b      	ldr	r3, [r3, #0]
  402266:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
  402268:	4b0a      	ldr	r3, [pc, #40]	; (402294 <prvSwitchTimerLists+0xc4>)
  40226a:	681b      	ldr	r3, [r3, #0]
  40226c:	4a04      	ldr	r2, [pc, #16]	; (402280 <prvSwitchTimerLists+0xb0>)
  40226e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
  402270:	4a08      	ldr	r2, [pc, #32]	; (402294 <prvSwitchTimerLists+0xc4>)
  402272:	68fb      	ldr	r3, [r7, #12]
  402274:	6013      	str	r3, [r2, #0]
}
  402276:	bf00      	nop
  402278:	3724      	adds	r7, #36	; 0x24
  40227a:	46bd      	mov	sp, r7
  40227c:	bd90      	pop	{r4, r7, pc}
  40227e:	bf00      	nop
  402280:	2040ab3c 	.word	0x2040ab3c
  402284:	0040034d 	.word	0x0040034d
  402288:	004002db 	.word	0x004002db
  40228c:	00401de5 	.word	0x00401de5
  402290:	0040059d 	.word	0x0040059d
  402294:	2040ab40 	.word	0x2040ab40

00402298 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402298:	b580      	push	{r7, lr}
  40229a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40229c:	4b0e      	ldr	r3, [pc, #56]	; (4022d8 <prvCheckForValidListAndQueue+0x40>)
  40229e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4022a0:	4b0e      	ldr	r3, [pc, #56]	; (4022dc <prvCheckForValidListAndQueue+0x44>)
  4022a2:	681b      	ldr	r3, [r3, #0]
  4022a4:	2b00      	cmp	r3, #0
  4022a6:	d113      	bne.n	4022d0 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
  4022a8:	480d      	ldr	r0, [pc, #52]	; (4022e0 <prvCheckForValidListAndQueue+0x48>)
  4022aa:	4b0e      	ldr	r3, [pc, #56]	; (4022e4 <prvCheckForValidListAndQueue+0x4c>)
  4022ac:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
  4022ae:	480e      	ldr	r0, [pc, #56]	; (4022e8 <prvCheckForValidListAndQueue+0x50>)
  4022b0:	4b0c      	ldr	r3, [pc, #48]	; (4022e4 <prvCheckForValidListAndQueue+0x4c>)
  4022b2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
  4022b4:	4b0d      	ldr	r3, [pc, #52]	; (4022ec <prvCheckForValidListAndQueue+0x54>)
  4022b6:	4a0a      	ldr	r2, [pc, #40]	; (4022e0 <prvCheckForValidListAndQueue+0x48>)
  4022b8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4022ba:	4b0d      	ldr	r3, [pc, #52]	; (4022f0 <prvCheckForValidListAndQueue+0x58>)
  4022bc:	4a0a      	ldr	r2, [pc, #40]	; (4022e8 <prvCheckForValidListAndQueue+0x50>)
  4022be:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
  4022c0:	2200      	movs	r2, #0
  4022c2:	210c      	movs	r1, #12
  4022c4:	2005      	movs	r0, #5
  4022c6:	4b0b      	ldr	r3, [pc, #44]	; (4022f4 <prvCheckForValidListAndQueue+0x5c>)
  4022c8:	4798      	blx	r3
  4022ca:	4602      	mov	r2, r0
  4022cc:	4b03      	ldr	r3, [pc, #12]	; (4022dc <prvCheckForValidListAndQueue+0x44>)
  4022ce:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
  4022d0:	4b09      	ldr	r3, [pc, #36]	; (4022f8 <prvCheckForValidListAndQueue+0x60>)
  4022d2:	4798      	blx	r3
}
  4022d4:	bf00      	nop
  4022d6:	bd80      	pop	{r7, pc}
  4022d8:	00400555 	.word	0x00400555
  4022dc:	2040ab44 	.word	0x2040ab44
  4022e0:	2040ab14 	.word	0x2040ab14
  4022e4:	00400231 	.word	0x00400231
  4022e8:	2040ab28 	.word	0x2040ab28
  4022ec:	2040ab3c 	.word	0x2040ab3c
  4022f0:	2040ab40 	.word	0x2040ab40
  4022f4:	004009f1 	.word	0x004009f1
  4022f8:	00400575 	.word	0x00400575

004022fc <ppbuf_insert_active>:

#include <string.h>
#include "PingPong.h"


int ppbuf_insert_active(ppbuf_t *p, void *data, int size){
  4022fc:	b480      	push	{r7}
  4022fe:	b089      	sub	sp, #36	; 0x24
  402300:	af00      	add	r7, sp, #0
  402302:	60f8      	str	r0, [r7, #12]
  402304:	60b9      	str	r1, [r7, #8]
  402306:	607a      	str	r2, [r7, #4]
	int ret = 0;
  402308:	2300      	movs	r3, #0
  40230a:	61fb      	str	r3, [r7, #28]
	unsigned int *ptr;

	if(p == NULL || data == NULL || size == 0) {
  40230c:	68fb      	ldr	r3, [r7, #12]
  40230e:	2b00      	cmp	r3, #0
  402310:	d005      	beq.n	40231e <ppbuf_insert_active+0x22>
  402312:	68bb      	ldr	r3, [r7, #8]
  402314:	2b00      	cmp	r3, #0
  402316:	d002      	beq.n	40231e <ppbuf_insert_active+0x22>
  402318:	687b      	ldr	r3, [r7, #4]
  40231a:	2b00      	cmp	r3, #0
  40231c:	d103      	bne.n	402326 <ppbuf_insert_active+0x2a>
		/* check your parameters */
		ret = -1;
  40231e:	f04f 33ff 	mov.w	r3, #4294967295
  402322:	61fb      	str	r3, [r7, #28]
  402324:	e033      	b.n	40238e <ppbuf_insert_active+0x92>
	} else {
		if(size > (p->buffer_size - p->put_index)) {
  402326:	68fb      	ldr	r3, [r7, #12]
  402328:	689a      	ldr	r2, [r3, #8]
  40232a:	68fb      	ldr	r3, [r7, #12]
  40232c:	68db      	ldr	r3, [r3, #12]
  40232e:	1ad2      	subs	r2, r2, r3
  402330:	687b      	ldr	r3, [r7, #4]
  402332:	429a      	cmp	r2, r3
  402334:	da03      	bge.n	40233e <ppbuf_insert_active+0x42>
			/* not enough room for new samples */
			ret = -1;
  402336:	f04f 33ff 	mov.w	r3, #4294967295
  40233a:	61fb      	str	r3, [r7, #28]
  40233c:	e027      	b.n	40238e <ppbuf_insert_active+0x92>
		} else {
			/* take the current position */
			int mem_position = ((p->ping) * p->buffer_size) + p->put_index;
  40233e:	68fb      	ldr	r3, [r7, #12]
  402340:	791b      	ldrb	r3, [r3, #4]
  402342:	461a      	mov	r2, r3
  402344:	68fb      	ldr	r3, [r7, #12]
  402346:	689b      	ldr	r3, [r3, #8]
  402348:	fb03 f202 	mul.w	r2, r3, r2
  40234c:	68fb      	ldr	r3, [r7, #12]
  40234e:	68db      	ldr	r3, [r3, #12]
  402350:	4413      	add	r3, r2
  402352:	61bb      	str	r3, [r7, #24]
			ptr = (unsigned int *)p->buffer_data; //uint8_t
  402354:	68fb      	ldr	r3, [r7, #12]
  402356:	681b      	ldr	r3, [r3, #0]
  402358:	617b      	str	r3, [r7, #20]

			/* copy the contents */
			memcpy(&ptr[mem_position], data, sizeof(int));
  40235a:	69bb      	ldr	r3, [r7, #24]
  40235c:	009b      	lsls	r3, r3, #2
  40235e:	697a      	ldr	r2, [r7, #20]
  402360:	4413      	add	r3, r2
  402362:	68ba      	ldr	r2, [r7, #8]
  402364:	6812      	ldr	r2, [r2, #0]
  402366:	601a      	str	r2, [r3, #0]

			/* update put index */
			p->put_index += size;
  402368:	68fb      	ldr	r3, [r7, #12]
  40236a:	68da      	ldr	r2, [r3, #12]
  40236c:	687b      	ldr	r3, [r7, #4]
  40236e:	441a      	add	r2, r3
  402370:	68fb      	ldr	r3, [r7, #12]
  402372:	60da      	str	r2, [r3, #12]
			p->full_signal = (p->put_index >= p->buffer_size?true:false);
  402374:	68fb      	ldr	r3, [r7, #12]
  402376:	68da      	ldr	r2, [r3, #12]
  402378:	68fb      	ldr	r3, [r7, #12]
  40237a:	689b      	ldr	r3, [r3, #8]
  40237c:	429a      	cmp	r2, r3
  40237e:	bfac      	ite	ge
  402380:	2301      	movge	r3, #1
  402382:	2300      	movlt	r3, #0
  402384:	b2da      	uxtb	r2, r3
  402386:	68fb      	ldr	r3, [r7, #12]
  402388:	751a      	strb	r2, [r3, #20]

			/* swap will only generated when ppbuf_get_full_signal is called */
			ret = 0;
  40238a:	2300      	movs	r3, #0
  40238c:	61fb      	str	r3, [r7, #28]
		}
	}
	return(ret);
  40238e:	69fb      	ldr	r3, [r7, #28]
}
  402390:	4618      	mov	r0, r3
  402392:	3724      	adds	r7, #36	; 0x24
  402394:	46bd      	mov	sp, r7
  402396:	f85d 7b04 	ldr.w	r7, [sp], #4
  40239a:	4770      	bx	lr

0040239c <ppbuf_remove_inactive>:

int ppbuf_remove_inactive(ppbuf_t *p, void *data, int size){
  40239c:	b480      	push	{r7}
  40239e:	b089      	sub	sp, #36	; 0x24
  4023a0:	af00      	add	r7, sp, #0
  4023a2:	60f8      	str	r0, [r7, #12]
  4023a4:	60b9      	str	r1, [r7, #8]
  4023a6:	607a      	str	r2, [r7, #4]
	int ret = 0;
  4023a8:	2300      	movs	r3, #0
  4023aa:	61fb      	str	r3, [r7, #28]
	unsigned int *ptr;

	if(p == NULL || data == NULL || size == 0) {
  4023ac:	68fb      	ldr	r3, [r7, #12]
  4023ae:	2b00      	cmp	r3, #0
  4023b0:	d005      	beq.n	4023be <ppbuf_remove_inactive+0x22>
  4023b2:	68bb      	ldr	r3, [r7, #8]
  4023b4:	2b00      	cmp	r3, #0
  4023b6:	d002      	beq.n	4023be <ppbuf_remove_inactive+0x22>
  4023b8:	687b      	ldr	r3, [r7, #4]
  4023ba:	2b00      	cmp	r3, #0
  4023bc:	d103      	bne.n	4023c6 <ppbuf_remove_inactive+0x2a>
		/* check your parameters */
		ret = -1;
  4023be:	f04f 33ff 	mov.w	r3, #4294967295
  4023c2:	61fb      	str	r3, [r7, #28]
  4023c4:	e029      	b.n	40241a <ppbuf_remove_inactive+0x7e>
	} else {
		if(size > (p->buffer_size - p->get_index)) {
  4023c6:	68fb      	ldr	r3, [r7, #12]
  4023c8:	689a      	ldr	r2, [r3, #8]
  4023ca:	68fb      	ldr	r3, [r7, #12]
  4023cc:	691b      	ldr	r3, [r3, #16]
  4023ce:	1ad2      	subs	r2, r2, r3
  4023d0:	687b      	ldr	r3, [r7, #4]
  4023d2:	429a      	cmp	r2, r3
  4023d4:	da03      	bge.n	4023de <ppbuf_remove_inactive+0x42>
			/* not enough data in sample buffer */
			ret = -1;
  4023d6:	f04f 33ff 	mov.w	r3, #4294967295
  4023da:	61fb      	str	r3, [r7, #28]
  4023dc:	e01d      	b.n	40241a <ppbuf_remove_inactive+0x7e>
		} else {
			/* take the current position */
			int mem_position = ((p->pong) * p->buffer_size) + p->get_index;
  4023de:	68fb      	ldr	r3, [r7, #12]
  4023e0:	795b      	ldrb	r3, [r3, #5]
  4023e2:	461a      	mov	r2, r3
  4023e4:	68fb      	ldr	r3, [r7, #12]
  4023e6:	689b      	ldr	r3, [r3, #8]
  4023e8:	fb03 f202 	mul.w	r2, r3, r2
  4023ec:	68fb      	ldr	r3, [r7, #12]
  4023ee:	691b      	ldr	r3, [r3, #16]
  4023f0:	4413      	add	r3, r2
  4023f2:	61bb      	str	r3, [r7, #24]
			ptr = (unsigned int *)p->buffer_data;
  4023f4:	68fb      	ldr	r3, [r7, #12]
  4023f6:	681b      	ldr	r3, [r3, #0]
  4023f8:	617b      	str	r3, [r7, #20]

			/* copy the contents */
			memcpy(data,&ptr[mem_position], sizeof(int));
  4023fa:	69bb      	ldr	r3, [r7, #24]
  4023fc:	009b      	lsls	r3, r3, #2
  4023fe:	697a      	ldr	r2, [r7, #20]
  402400:	4413      	add	r3, r2
  402402:	681b      	ldr	r3, [r3, #0]
  402404:	461a      	mov	r2, r3
  402406:	68bb      	ldr	r3, [r7, #8]
  402408:	601a      	str	r2, [r3, #0]

			/* update put index */
			p->get_index += size;
  40240a:	68fb      	ldr	r3, [r7, #12]
  40240c:	691a      	ldr	r2, [r3, #16]
  40240e:	687b      	ldr	r3, [r7, #4]
  402410:	441a      	add	r2, r3
  402412:	68fb      	ldr	r3, [r7, #12]
  402414:	611a      	str	r2, [r3, #16]

			/* when buffer is empty we are not able to extract anymore data */
			ret = 0;
  402416:	2300      	movs	r3, #0
  402418:	61fb      	str	r3, [r7, #28]
		}
	}
	return(ret);
  40241a:	69fb      	ldr	r3, [r7, #28]


}
  40241c:	4618      	mov	r0, r3
  40241e:	3724      	adds	r7, #36	; 0x24
  402420:	46bd      	mov	sp, r7
  402422:	f85d 7b04 	ldr.w	r7, [sp], #4
  402426:	4770      	bx	lr

00402428 <ppbuf_get_full_signal>:
		mem_position = ((p->pong) * p->buffer_size) + i;
		p->buffer_data[mem_position] = b[i];
	}
}

bool ppbuf_get_full_signal(ppbuf_t *p, bool consume) {
  402428:	b480      	push	{r7}
  40242a:	b085      	sub	sp, #20
  40242c:	af00      	add	r7, sp, #0
  40242e:	6078      	str	r0, [r7, #4]
  402430:	460b      	mov	r3, r1
  402432:	70fb      	strb	r3, [r7, #3]
	/* take the last signaled full occurrence */
	bool ret = (p != NULL ? p->full_signal : false);
  402434:	687b      	ldr	r3, [r7, #4]
  402436:	2b00      	cmp	r3, #0
  402438:	d005      	beq.n	402446 <ppbuf_get_full_signal+0x1e>
  40243a:	687b      	ldr	r3, [r7, #4]
  40243c:	7d1b      	ldrb	r3, [r3, #20]
  40243e:	2b00      	cmp	r3, #0
  402440:	d001      	beq.n	402446 <ppbuf_get_full_signal+0x1e>
  402442:	2301      	movs	r3, #1
  402444:	e000      	b.n	402448 <ppbuf_get_full_signal+0x20>
  402446:	2300      	movs	r3, #0
  402448:	73fb      	strb	r3, [r7, #15]

	if((consume != false) && (p != NULL) && (ret != false)) {
  40244a:	78fb      	ldrb	r3, [r7, #3]
  40244c:	2b00      	cmp	r3, #0
  40244e:	d026      	beq.n	40249e <ppbuf_get_full_signal+0x76>
  402450:	687b      	ldr	r3, [r7, #4]
  402452:	2b00      	cmp	r3, #0
  402454:	d023      	beq.n	40249e <ppbuf_get_full_signal+0x76>
  402456:	7bfb      	ldrb	r3, [r7, #15]
  402458:	2b00      	cmp	r3, #0
  40245a:	d020      	beq.n	40249e <ppbuf_get_full_signal+0x76>
		p->full_signal = false;
  40245c:	687b      	ldr	r3, [r7, #4]
  40245e:	2200      	movs	r2, #0
  402460:	751a      	strb	r2, [r3, #20]

		/* swap the buffer switches */
		p->ping = p->ping ^ p->pong;
  402462:	687b      	ldr	r3, [r7, #4]
  402464:	791a      	ldrb	r2, [r3, #4]
  402466:	687b      	ldr	r3, [r7, #4]
  402468:	795b      	ldrb	r3, [r3, #5]
  40246a:	4053      	eors	r3, r2
  40246c:	b2da      	uxtb	r2, r3
  40246e:	687b      	ldr	r3, [r7, #4]
  402470:	711a      	strb	r2, [r3, #4]
		p->pong = p->pong ^ p->ping;
  402472:	687b      	ldr	r3, [r7, #4]
  402474:	795a      	ldrb	r2, [r3, #5]
  402476:	687b      	ldr	r3, [r7, #4]
  402478:	791b      	ldrb	r3, [r3, #4]
  40247a:	4053      	eors	r3, r2
  40247c:	b2da      	uxtb	r2, r3
  40247e:	687b      	ldr	r3, [r7, #4]
  402480:	715a      	strb	r2, [r3, #5]
		p->ping = p->ping ^ p->pong;
  402482:	687b      	ldr	r3, [r7, #4]
  402484:	791a      	ldrb	r2, [r3, #4]
  402486:	687b      	ldr	r3, [r7, #4]
  402488:	795b      	ldrb	r3, [r3, #5]
  40248a:	4053      	eors	r3, r2
  40248c:	b2da      	uxtb	r2, r3
  40248e:	687b      	ldr	r3, [r7, #4]
  402490:	711a      	strb	r2, [r3, #4]

		/* resets the buffer position */
		p->get_index = 0;
  402492:	687b      	ldr	r3, [r7, #4]
  402494:	2200      	movs	r2, #0
  402496:	611a      	str	r2, [r3, #16]
		p->put_index = 0;
  402498:	687b      	ldr	r3, [r7, #4]
  40249a:	2200      	movs	r2, #0
  40249c:	60da      	str	r2, [r3, #12]
		
		//ppbuf_lowpass(p);
		
	}

	return(ret);
  40249e:	7bfb      	ldrb	r3, [r7, #15]
}
  4024a0:	4618      	mov	r0, r3
  4024a2:	3714      	adds	r7, #20
  4024a4:	46bd      	mov	sp, r7
  4024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024aa:	4770      	bx	lr

004024ac <afec_ch_sanity_check>:
 * \param channel  AFEC channel number.
 *
 */
static inline void afec_ch_sanity_check(Afec *const afec,
		const enum afec_channel_num channel)
{
  4024ac:	b480      	push	{r7}
  4024ae:	b083      	sub	sp, #12
  4024b0:	af00      	add	r7, sp, #0
  4024b2:	6078      	str	r0, [r7, #4]
  4024b4:	460b      	mov	r3, r1
  4024b6:	807b      	strh	r3, [r7, #2]
	#endif
	} else if (afec == AFEC1) {
		Assert(channel < NB_CH_AFE1);
	}
	UNUSED(channel);
}
  4024b8:	bf00      	nop
  4024ba:	370c      	adds	r7, #12
  4024bc:	46bd      	mov	sp, r7
  4024be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024c2:	4770      	bx	lr

004024c4 <afec_set_trigger>:
 * \param trigger Conversion trigger.
 *
 */
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
  4024c4:	b480      	push	{r7}
  4024c6:	b085      	sub	sp, #20
  4024c8:	af00      	add	r7, sp, #0
  4024ca:	6078      	str	r0, [r7, #4]
  4024cc:	460b      	mov	r3, r1
  4024ce:	70fb      	strb	r3, [r7, #3]
	uint32_t reg;

	reg = afec->AFEC_MR;
  4024d0:	687b      	ldr	r3, [r7, #4]
  4024d2:	685b      	ldr	r3, [r3, #4]
  4024d4:	60fb      	str	r3, [r7, #12]

	if (trigger == AFEC_TRIG_FREERUN) {
  4024d6:	78fb      	ldrb	r3, [r7, #3]
  4024d8:	2bff      	cmp	r3, #255	; 0xff
  4024da:	d104      	bne.n	4024e6 <afec_set_trigger+0x22>
		reg |= AFEC_MR_FREERUN_ON;
  4024dc:	68fb      	ldr	r3, [r7, #12]
  4024de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4024e2:	60fb      	str	r3, [r7, #12]
  4024e4:	e007      	b.n	4024f6 <afec_set_trigger+0x32>
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  4024e6:	68fb      	ldr	r3, [r7, #12]
  4024e8:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
  4024ec:	60fb      	str	r3, [r7, #12]
		reg |= trigger;
  4024ee:	78fb      	ldrb	r3, [r7, #3]
  4024f0:	68fa      	ldr	r2, [r7, #12]
  4024f2:	4313      	orrs	r3, r2
  4024f4:	60fb      	str	r3, [r7, #12]
	}

	afec->AFEC_MR = reg;
  4024f6:	687b      	ldr	r3, [r7, #4]
  4024f8:	68fa      	ldr	r2, [r7, #12]
  4024fa:	605a      	str	r2, [r3, #4]
}
  4024fc:	bf00      	nop
  4024fe:	3714      	adds	r7, #20
  402500:	46bd      	mov	sp, r7
  402502:	f85d 7b04 	ldr.w	r7, [sp], #4
  402506:	4770      	bx	lr

00402508 <afec_channel_enable>:
 * \param afec  Base address of the AFEC.
 * \param afec_ch AFEC channel number.
 */
static inline void afec_channel_enable(Afec *const afec,
		const enum afec_channel_num afec_ch)
{
  402508:	b580      	push	{r7, lr}
  40250a:	b082      	sub	sp, #8
  40250c:	af00      	add	r7, sp, #0
  40250e:	6078      	str	r0, [r7, #4]
  402510:	460b      	mov	r3, r1
  402512:	807b      	strh	r3, [r7, #2]
	if (afec_ch != AFEC_CHANNEL_ALL) {
  402514:	887b      	ldrh	r3, [r7, #2]
  402516:	f640 72ff 	movw	r2, #4095	; 0xfff
  40251a:	4293      	cmp	r3, r2
  40251c:	d004      	beq.n	402528 <afec_channel_enable+0x20>
		afec_ch_sanity_check(afec, afec_ch);
  40251e:	887b      	ldrh	r3, [r7, #2]
  402520:	4619      	mov	r1, r3
  402522:	6878      	ldr	r0, [r7, #4]
  402524:	4b0a      	ldr	r3, [pc, #40]	; (402550 <afec_channel_enable+0x48>)
  402526:	4798      	blx	r3
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  402528:	887b      	ldrh	r3, [r7, #2]
  40252a:	f640 72ff 	movw	r2, #4095	; 0xfff
  40252e:	4293      	cmp	r3, r2
  402530:	d005      	beq.n	40253e <afec_channel_enable+0x36>
  402532:	887b      	ldrh	r3, [r7, #2]
  402534:	2201      	movs	r2, #1
  402536:	fa02 f303 	lsl.w	r3, r2, r3
  40253a:	461a      	mov	r2, r3
  40253c:	e001      	b.n	402542 <afec_channel_enable+0x3a>
  40253e:	f640 72ff 	movw	r2, #4095	; 0xfff
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  402542:	687b      	ldr	r3, [r7, #4]
  402544:	615a      	str	r2, [r3, #20]
}
  402546:	bf00      	nop
  402548:	3708      	adds	r7, #8
  40254a:	46bd      	mov	sp, r7
  40254c:	bd80      	pop	{r7, pc}
  40254e:	bf00      	nop
  402550:	004024ad 	.word	0x004024ad

00402554 <afec_channel_get_value>:
 *
 * \return AFEC converted value of the selected channel.
 */
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
  402554:	b580      	push	{r7, lr}
  402556:	b082      	sub	sp, #8
  402558:	af00      	add	r7, sp, #0
  40255a:	6078      	str	r0, [r7, #4]
  40255c:	460b      	mov	r3, r1
  40255e:	807b      	strh	r3, [r7, #2]
	afec_ch_sanity_check(afec, afec_ch);
  402560:	887b      	ldrh	r3, [r7, #2]
  402562:	4619      	mov	r1, r3
  402564:	6878      	ldr	r0, [r7, #4]
  402566:	4b05      	ldr	r3, [pc, #20]	; (40257c <afec_channel_get_value+0x28>)
  402568:	4798      	blx	r3

	afec->AFEC_CSELR = afec_ch;
  40256a:	887a      	ldrh	r2, [r7, #2]
  40256c:	687b      	ldr	r3, [r7, #4]
  40256e:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  402570:	687b      	ldr	r3, [r7, #4]
  402572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
  402574:	4618      	mov	r0, r3
  402576:	3708      	adds	r7, #8
  402578:	46bd      	mov	sp, r7
  40257a:	bd80      	pop	{r7, pc}
  40257c:	004024ad 	.word	0x004024ad

00402580 <afec_channel_set_analog_offset>:
 * \param afec_ch AFEC channel number.
 * \param aoffset  Analog offset value.
 */
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
  402580:	b580      	push	{r7, lr}
  402582:	b082      	sub	sp, #8
  402584:	af00      	add	r7, sp, #0
  402586:	6078      	str	r0, [r7, #4]
  402588:	460b      	mov	r3, r1
  40258a:	807b      	strh	r3, [r7, #2]
  40258c:	4613      	mov	r3, r2
  40258e:	803b      	strh	r3, [r7, #0]
	afec_ch_sanity_check(afec, afec_ch);
  402590:	887b      	ldrh	r3, [r7, #2]
  402592:	4619      	mov	r1, r3
  402594:	6878      	ldr	r0, [r7, #4]
  402596:	4b07      	ldr	r3, [pc, #28]	; (4025b4 <afec_channel_set_analog_offset+0x34>)
  402598:	4798      	blx	r3

	afec->AFEC_CSELR = afec_ch;
  40259a:	887a      	ldrh	r2, [r7, #2]
  40259c:	687b      	ldr	r3, [r7, #4]
  40259e:	665a      	str	r2, [r3, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4025a0:	883b      	ldrh	r3, [r7, #0]
  4025a2:	f3c3 020b 	ubfx	r2, r3, #0, #12
  4025a6:	687b      	ldr	r3, [r7, #4]
  4025a8:	66da      	str	r2, [r3, #108]	; 0x6c
}
  4025aa:	bf00      	nop
  4025ac:	3708      	adds	r7, #8
  4025ae:	46bd      	mov	sp, r7
  4025b0:	bd80      	pop	{r7, pc}
  4025b2:	bf00      	nop
  4025b4:	004024ad 	.word	0x004024ad

004025b8 <osc_get_rate>:
{
  4025b8:	b480      	push	{r7}
  4025ba:	b083      	sub	sp, #12
  4025bc:	af00      	add	r7, sp, #0
  4025be:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4025c0:	687b      	ldr	r3, [r7, #4]
  4025c2:	2b07      	cmp	r3, #7
  4025c4:	d825      	bhi.n	402612 <osc_get_rate+0x5a>
  4025c6:	a201      	add	r2, pc, #4	; (adr r2, 4025cc <osc_get_rate+0x14>)
  4025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4025cc:	004025ed 	.word	0x004025ed
  4025d0:	004025f3 	.word	0x004025f3
  4025d4:	004025f9 	.word	0x004025f9
  4025d8:	004025ff 	.word	0x004025ff
  4025dc:	00402603 	.word	0x00402603
  4025e0:	00402607 	.word	0x00402607
  4025e4:	0040260b 	.word	0x0040260b
  4025e8:	0040260f 	.word	0x0040260f
		return OSC_SLCK_32K_RC_HZ;
  4025ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4025f0:	e010      	b.n	402614 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4025f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4025f6:	e00d      	b.n	402614 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4025f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4025fc:	e00a      	b.n	402614 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4025fe:	4b08      	ldr	r3, [pc, #32]	; (402620 <osc_get_rate+0x68>)
  402600:	e008      	b.n	402614 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  402602:	4b08      	ldr	r3, [pc, #32]	; (402624 <osc_get_rate+0x6c>)
  402604:	e006      	b.n	402614 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  402606:	4b08      	ldr	r3, [pc, #32]	; (402628 <osc_get_rate+0x70>)
  402608:	e004      	b.n	402614 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40260a:	4b07      	ldr	r3, [pc, #28]	; (402628 <osc_get_rate+0x70>)
  40260c:	e002      	b.n	402614 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40260e:	4b06      	ldr	r3, [pc, #24]	; (402628 <osc_get_rate+0x70>)
  402610:	e000      	b.n	402614 <osc_get_rate+0x5c>
	return 0;
  402612:	2300      	movs	r3, #0
}
  402614:	4618      	mov	r0, r3
  402616:	370c      	adds	r7, #12
  402618:	46bd      	mov	sp, r7
  40261a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40261e:	4770      	bx	lr
  402620:	003d0900 	.word	0x003d0900
  402624:	007a1200 	.word	0x007a1200
  402628:	00b71b00 	.word	0x00b71b00

0040262c <sysclk_get_main_hz>:
{
  40262c:	b580      	push	{r7, lr}
  40262e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402630:	2006      	movs	r0, #6
  402632:	4b05      	ldr	r3, [pc, #20]	; (402648 <sysclk_get_main_hz+0x1c>)
  402634:	4798      	blx	r3
  402636:	4602      	mov	r2, r0
  402638:	4613      	mov	r3, r2
  40263a:	009b      	lsls	r3, r3, #2
  40263c:	4413      	add	r3, r2
  40263e:	009a      	lsls	r2, r3, #2
  402640:	4413      	add	r3, r2
}
  402642:	4618      	mov	r0, r3
  402644:	bd80      	pop	{r7, pc}
  402646:	bf00      	nop
  402648:	004025b9 	.word	0x004025b9

0040264c <sysclk_get_cpu_hz>:
{
  40264c:	b580      	push	{r7, lr}
  40264e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402650:	4b02      	ldr	r3, [pc, #8]	; (40265c <sysclk_get_cpu_hz+0x10>)
  402652:	4798      	blx	r3
  402654:	4603      	mov	r3, r0
}
  402656:	4618      	mov	r0, r3
  402658:	bd80      	pop	{r7, pc}
  40265a:	bf00      	nop
  40265c:	0040262d 	.word	0x0040262d

00402660 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
  402660:	b580      	push	{r7, lr}
  402662:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  402664:	4b02      	ldr	r3, [pc, #8]	; (402670 <sysclk_get_peripheral_hz+0x10>)
  402666:	4798      	blx	r3
  402668:	4603      	mov	r3, r0
  40266a:	085b      	lsrs	r3, r3, #1
		(((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 : (1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos))) * CONFIG_SYSCLK_DIV);
}
  40266c:	4618      	mov	r0, r3
  40266e:	bd80      	pop	{r7, pc}
  402670:	0040262d 	.word	0x0040262d

00402674 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  402674:	b580      	push	{r7, lr}
  402676:	b082      	sub	sp, #8
  402678:	af00      	add	r7, sp, #0
  40267a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  40267c:	6878      	ldr	r0, [r7, #4]
  40267e:	4b03      	ldr	r3, [pc, #12]	; (40268c <sysclk_enable_peripheral_clock+0x18>)
  402680:	4798      	blx	r3
}
  402682:	bf00      	nop
  402684:	3708      	adds	r7, #8
  402686:	46bd      	mov	sp, r7
  402688:	bd80      	pop	{r7, pc}
  40268a:	bf00      	nop
  40268c:	00404795 	.word	0x00404795

00402690 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  402690:	b580      	push	{r7, lr}
  402692:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  402694:	200a      	movs	r0, #10
  402696:	4b08      	ldr	r3, [pc, #32]	; (4026b8 <ioport_init+0x28>)
  402698:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  40269a:	200b      	movs	r0, #11
  40269c:	4b06      	ldr	r3, [pc, #24]	; (4026b8 <ioport_init+0x28>)
  40269e:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  4026a0:	200c      	movs	r0, #12
  4026a2:	4b05      	ldr	r3, [pc, #20]	; (4026b8 <ioport_init+0x28>)
  4026a4:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  4026a6:	2010      	movs	r0, #16
  4026a8:	4b03      	ldr	r3, [pc, #12]	; (4026b8 <ioport_init+0x28>)
  4026aa:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  4026ac:	2011      	movs	r0, #17
  4026ae:	4b02      	ldr	r3, [pc, #8]	; (4026b8 <ioport_init+0x28>)
  4026b0:	4798      	blx	r3
	arch_ioport_init();
}
  4026b2:	bf00      	nop
  4026b4:	bd80      	pop	{r7, pc}
  4026b6:	bf00      	nop
  4026b8:	00402675 	.word	0x00402675

004026bc <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
  4026bc:	b580      	push	{r7, lr}
  4026be:	b08c      	sub	sp, #48	; 0x30
  4026c0:	af00      	add	r7, sp, #0
  4026c2:	6078      	str	r0, [r7, #4]
  4026c4:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  4026c6:	4b49      	ldr	r3, [pc, #292]	; (4027ec <usart_serial_init+0x130>)
  4026c8:	4798      	blx	r3
  4026ca:	4603      	mov	r3, r0
  4026cc:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
  4026ce:	683b      	ldr	r3, [r7, #0]
  4026d0:	681b      	ldr	r3, [r3, #0]
  4026d2:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
  4026d4:	683b      	ldr	r3, [r7, #0]
  4026d6:	689b      	ldr	r3, [r3, #8]
  4026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  4026da:	683b      	ldr	r3, [r7, #0]
  4026dc:	681b      	ldr	r3, [r3, #0]
  4026de:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
  4026e0:	683b      	ldr	r3, [r7, #0]
  4026e2:	685b      	ldr	r3, [r3, #4]
  4026e4:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
  4026e6:	683b      	ldr	r3, [r7, #0]
  4026e8:	689b      	ldr	r3, [r3, #8]
  4026ea:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
  4026ec:	683b      	ldr	r3, [r7, #0]
  4026ee:	68db      	ldr	r3, [r3, #12]
  4026f0:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4026f2:	2300      	movs	r3, #0
  4026f4:	61fb      	str	r3, [r7, #28]
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4026f6:	687b      	ldr	r3, [r7, #4]
  4026f8:	4a3d      	ldr	r2, [pc, #244]	; (4027f0 <usart_serial_init+0x134>)
  4026fa:	4293      	cmp	r3, r2
  4026fc:	d108      	bne.n	402710 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART0);
  4026fe:	2007      	movs	r0, #7
  402700:	4b3c      	ldr	r3, [pc, #240]	; (4027f4 <usart_serial_init+0x138>)
  402702:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402704:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402708:	4619      	mov	r1, r3
  40270a:	6878      	ldr	r0, [r7, #4]
  40270c:	4b3a      	ldr	r3, [pc, #232]	; (4027f8 <usart_serial_init+0x13c>)
  40270e:	4798      	blx	r3
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402710:	687b      	ldr	r3, [r7, #4]
  402712:	4a3a      	ldr	r2, [pc, #232]	; (4027fc <usart_serial_init+0x140>)
  402714:	4293      	cmp	r3, r2
  402716:	d108      	bne.n	40272a <usart_serial_init+0x6e>
		sysclk_enable_peripheral_clock(ID_UART1);
  402718:	2008      	movs	r0, #8
  40271a:	4b36      	ldr	r3, [pc, #216]	; (4027f4 <usart_serial_init+0x138>)
  40271c:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  40271e:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402722:	4619      	mov	r1, r3
  402724:	6878      	ldr	r0, [r7, #4]
  402726:	4b34      	ldr	r3, [pc, #208]	; (4027f8 <usart_serial_init+0x13c>)
  402728:	4798      	blx	r3
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40272a:	687b      	ldr	r3, [r7, #4]
  40272c:	4a34      	ldr	r2, [pc, #208]	; (402800 <usart_serial_init+0x144>)
  40272e:	4293      	cmp	r3, r2
  402730:	d108      	bne.n	402744 <usart_serial_init+0x88>
		sysclk_enable_peripheral_clock(ID_UART2);
  402732:	202c      	movs	r0, #44	; 0x2c
  402734:	4b2f      	ldr	r3, [pc, #188]	; (4027f4 <usart_serial_init+0x138>)
  402736:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402738:	f107 0324 	add.w	r3, r7, #36	; 0x24
  40273c:	4619      	mov	r1, r3
  40273e:	6878      	ldr	r0, [r7, #4]
  402740:	4b2d      	ldr	r3, [pc, #180]	; (4027f8 <usart_serial_init+0x13c>)
  402742:	4798      	blx	r3
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402744:	687b      	ldr	r3, [r7, #4]
  402746:	4a2f      	ldr	r2, [pc, #188]	; (402804 <usart_serial_init+0x148>)
  402748:	4293      	cmp	r3, r2
  40274a:	d108      	bne.n	40275e <usart_serial_init+0xa2>
		sysclk_enable_peripheral_clock(ID_UART3);
  40274c:	202d      	movs	r0, #45	; 0x2d
  40274e:	4b29      	ldr	r3, [pc, #164]	; (4027f4 <usart_serial_init+0x138>)
  402750:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  402752:	f107 0324 	add.w	r3, r7, #36	; 0x24
  402756:	4619      	mov	r1, r3
  402758:	6878      	ldr	r0, [r7, #4]
  40275a:	4b27      	ldr	r3, [pc, #156]	; (4027f8 <usart_serial_init+0x13c>)
  40275c:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40275e:	687b      	ldr	r3, [r7, #4]
  402760:	4a29      	ldr	r2, [pc, #164]	; (402808 <usart_serial_init+0x14c>)
  402762:	4293      	cmp	r3, r2
  402764:	d111      	bne.n	40278a <usart_serial_init+0xce>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
  402766:	200d      	movs	r0, #13
  402768:	4b22      	ldr	r3, [pc, #136]	; (4027f4 <usart_serial_init+0x138>)
  40276a:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  40276c:	4b1f      	ldr	r3, [pc, #124]	; (4027ec <usart_serial_init+0x130>)
  40276e:	4798      	blx	r3
  402770:	4602      	mov	r2, r0
  402772:	f107 030c 	add.w	r3, r7, #12
  402776:	4619      	mov	r1, r3
  402778:	6878      	ldr	r0, [r7, #4]
  40277a:	4b24      	ldr	r3, [pc, #144]	; (40280c <usart_serial_init+0x150>)
  40277c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  40277e:	6878      	ldr	r0, [r7, #4]
  402780:	4b23      	ldr	r3, [pc, #140]	; (402810 <usart_serial_init+0x154>)
  402782:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402784:	6878      	ldr	r0, [r7, #4]
  402786:	4b23      	ldr	r3, [pc, #140]	; (402814 <usart_serial_init+0x158>)
  402788:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40278a:	687b      	ldr	r3, [r7, #4]
  40278c:	4a22      	ldr	r2, [pc, #136]	; (402818 <usart_serial_init+0x15c>)
  40278e:	4293      	cmp	r3, r2
  402790:	d111      	bne.n	4027b6 <usart_serial_init+0xfa>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
  402792:	200e      	movs	r0, #14
  402794:	4b17      	ldr	r3, [pc, #92]	; (4027f4 <usart_serial_init+0x138>)
  402796:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402798:	4b14      	ldr	r3, [pc, #80]	; (4027ec <usart_serial_init+0x130>)
  40279a:	4798      	blx	r3
  40279c:	4602      	mov	r2, r0
  40279e:	f107 030c 	add.w	r3, r7, #12
  4027a2:	4619      	mov	r1, r3
  4027a4:	6878      	ldr	r0, [r7, #4]
  4027a6:	4b19      	ldr	r3, [pc, #100]	; (40280c <usart_serial_init+0x150>)
  4027a8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4027aa:	6878      	ldr	r0, [r7, #4]
  4027ac:	4b18      	ldr	r3, [pc, #96]	; (402810 <usart_serial_init+0x154>)
  4027ae:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4027b0:	6878      	ldr	r0, [r7, #4]
  4027b2:	4b18      	ldr	r3, [pc, #96]	; (402814 <usart_serial_init+0x158>)
  4027b4:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4027b6:	687b      	ldr	r3, [r7, #4]
  4027b8:	4a18      	ldr	r2, [pc, #96]	; (40281c <usart_serial_init+0x160>)
  4027ba:	4293      	cmp	r3, r2
  4027bc:	d111      	bne.n	4027e2 <usart_serial_init+0x126>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
  4027be:	200f      	movs	r0, #15
  4027c0:	4b0c      	ldr	r3, [pc, #48]	; (4027f4 <usart_serial_init+0x138>)
  4027c2:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  4027c4:	4b09      	ldr	r3, [pc, #36]	; (4027ec <usart_serial_init+0x130>)
  4027c6:	4798      	blx	r3
  4027c8:	4602      	mov	r2, r0
  4027ca:	f107 030c 	add.w	r3, r7, #12
  4027ce:	4619      	mov	r1, r3
  4027d0:	6878      	ldr	r0, [r7, #4]
  4027d2:	4b0e      	ldr	r3, [pc, #56]	; (40280c <usart_serial_init+0x150>)
  4027d4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  4027d6:	6878      	ldr	r0, [r7, #4]
  4027d8:	4b0d      	ldr	r3, [pc, #52]	; (402810 <usart_serial_init+0x154>)
  4027da:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4027dc:	6878      	ldr	r0, [r7, #4]
  4027de:	4b0d      	ldr	r3, [pc, #52]	; (402814 <usart_serial_init+0x158>)
  4027e0:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
  4027e2:	bf00      	nop
  4027e4:	3730      	adds	r7, #48	; 0x30
  4027e6:	46bd      	mov	sp, r7
  4027e8:	bd80      	pop	{r7, pc}
  4027ea:	bf00      	nop
  4027ec:	00402661 	.word	0x00402661
  4027f0:	400e0800 	.word	0x400e0800
  4027f4:	00402675 	.word	0x00402675
  4027f8:	00404819 	.word	0x00404819
  4027fc:	400e0a00 	.word	0x400e0a00
  402800:	400e1a00 	.word	0x400e1a00
  402804:	400e1c00 	.word	0x400e1c00
  402808:	40024000 	.word	0x40024000
  40280c:	004049b1 	.word	0x004049b1
  402810:	00404a35 	.word	0x00404a35
  402814:	00404a69 	.word	0x00404a69
  402818:	40028000 	.word	0x40028000
  40281c:	4002c000 	.word	0x4002c000

00402820 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  402820:	b580      	push	{r7, lr}
  402822:	b082      	sub	sp, #8
  402824:	af00      	add	r7, sp, #0
  402826:	6078      	str	r0, [r7, #4]
  402828:	460b      	mov	r3, r1
  40282a:	70fb      	strb	r3, [r7, #3]
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40282c:	687b      	ldr	r3, [r7, #4]
  40282e:	4a36      	ldr	r2, [pc, #216]	; (402908 <usart_serial_putchar+0xe8>)
  402830:	4293      	cmp	r3, r2
  402832:	d10a      	bne.n	40284a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  402834:	bf00      	nop
  402836:	78fb      	ldrb	r3, [r7, #3]
  402838:	4619      	mov	r1, r3
  40283a:	6878      	ldr	r0, [r7, #4]
  40283c:	4b33      	ldr	r3, [pc, #204]	; (40290c <usart_serial_putchar+0xec>)
  40283e:	4798      	blx	r3
  402840:	4603      	mov	r3, r0
  402842:	2b00      	cmp	r3, #0
  402844:	d1f7      	bne.n	402836 <usart_serial_putchar+0x16>
		return 1;
  402846:	2301      	movs	r3, #1
  402848:	e05a      	b.n	402900 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40284a:	687b      	ldr	r3, [r7, #4]
  40284c:	4a30      	ldr	r2, [pc, #192]	; (402910 <usart_serial_putchar+0xf0>)
  40284e:	4293      	cmp	r3, r2
  402850:	d10a      	bne.n	402868 <usart_serial_putchar+0x48>
		while (uart_write((Uart*)p_usart, c)!=0);
  402852:	bf00      	nop
  402854:	78fb      	ldrb	r3, [r7, #3]
  402856:	4619      	mov	r1, r3
  402858:	6878      	ldr	r0, [r7, #4]
  40285a:	4b2c      	ldr	r3, [pc, #176]	; (40290c <usart_serial_putchar+0xec>)
  40285c:	4798      	blx	r3
  40285e:	4603      	mov	r3, r0
  402860:	2b00      	cmp	r3, #0
  402862:	d1f7      	bne.n	402854 <usart_serial_putchar+0x34>
		return 1;
  402864:	2301      	movs	r3, #1
  402866:	e04b      	b.n	402900 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402868:	687b      	ldr	r3, [r7, #4]
  40286a:	4a2a      	ldr	r2, [pc, #168]	; (402914 <usart_serial_putchar+0xf4>)
  40286c:	4293      	cmp	r3, r2
  40286e:	d10a      	bne.n	402886 <usart_serial_putchar+0x66>
		while (uart_write((Uart*)p_usart, c)!=0);
  402870:	bf00      	nop
  402872:	78fb      	ldrb	r3, [r7, #3]
  402874:	4619      	mov	r1, r3
  402876:	6878      	ldr	r0, [r7, #4]
  402878:	4b24      	ldr	r3, [pc, #144]	; (40290c <usart_serial_putchar+0xec>)
  40287a:	4798      	blx	r3
  40287c:	4603      	mov	r3, r0
  40287e:	2b00      	cmp	r3, #0
  402880:	d1f7      	bne.n	402872 <usart_serial_putchar+0x52>
		return 1;
  402882:	2301      	movs	r3, #1
  402884:	e03c      	b.n	402900 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402886:	687b      	ldr	r3, [r7, #4]
  402888:	4a23      	ldr	r2, [pc, #140]	; (402918 <usart_serial_putchar+0xf8>)
  40288a:	4293      	cmp	r3, r2
  40288c:	d10a      	bne.n	4028a4 <usart_serial_putchar+0x84>
		while (uart_write((Uart*)p_usart, c)!=0);
  40288e:	bf00      	nop
  402890:	78fb      	ldrb	r3, [r7, #3]
  402892:	4619      	mov	r1, r3
  402894:	6878      	ldr	r0, [r7, #4]
  402896:	4b1d      	ldr	r3, [pc, #116]	; (40290c <usart_serial_putchar+0xec>)
  402898:	4798      	blx	r3
  40289a:	4603      	mov	r3, r0
  40289c:	2b00      	cmp	r3, #0
  40289e:	d1f7      	bne.n	402890 <usart_serial_putchar+0x70>
		return 1;
  4028a0:	2301      	movs	r3, #1
  4028a2:	e02d      	b.n	402900 <usart_serial_putchar+0xe0>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4028a4:	687b      	ldr	r3, [r7, #4]
  4028a6:	4a1d      	ldr	r2, [pc, #116]	; (40291c <usart_serial_putchar+0xfc>)
  4028a8:	4293      	cmp	r3, r2
  4028aa:	d10a      	bne.n	4028c2 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
  4028ac:	bf00      	nop
  4028ae:	78fb      	ldrb	r3, [r7, #3]
  4028b0:	4619      	mov	r1, r3
  4028b2:	6878      	ldr	r0, [r7, #4]
  4028b4:	4b1a      	ldr	r3, [pc, #104]	; (402920 <usart_serial_putchar+0x100>)
  4028b6:	4798      	blx	r3
  4028b8:	4603      	mov	r3, r0
  4028ba:	2b00      	cmp	r3, #0
  4028bc:	d1f7      	bne.n	4028ae <usart_serial_putchar+0x8e>
		return 1;
  4028be:	2301      	movs	r3, #1
  4028c0:	e01e      	b.n	402900 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4028c2:	687b      	ldr	r3, [r7, #4]
  4028c4:	4a17      	ldr	r2, [pc, #92]	; (402924 <usart_serial_putchar+0x104>)
  4028c6:	4293      	cmp	r3, r2
  4028c8:	d10a      	bne.n	4028e0 <usart_serial_putchar+0xc0>
		while (usart_write(p_usart, c)!=0);
  4028ca:	bf00      	nop
  4028cc:	78fb      	ldrb	r3, [r7, #3]
  4028ce:	4619      	mov	r1, r3
  4028d0:	6878      	ldr	r0, [r7, #4]
  4028d2:	4b13      	ldr	r3, [pc, #76]	; (402920 <usart_serial_putchar+0x100>)
  4028d4:	4798      	blx	r3
  4028d6:	4603      	mov	r3, r0
  4028d8:	2b00      	cmp	r3, #0
  4028da:	d1f7      	bne.n	4028cc <usart_serial_putchar+0xac>
		return 1;
  4028dc:	2301      	movs	r3, #1
  4028de:	e00f      	b.n	402900 <usart_serial_putchar+0xe0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4028e0:	687b      	ldr	r3, [r7, #4]
  4028e2:	4a11      	ldr	r2, [pc, #68]	; (402928 <usart_serial_putchar+0x108>)
  4028e4:	4293      	cmp	r3, r2
  4028e6:	d10a      	bne.n	4028fe <usart_serial_putchar+0xde>
		while (usart_write(p_usart, c)!=0);
  4028e8:	bf00      	nop
  4028ea:	78fb      	ldrb	r3, [r7, #3]
  4028ec:	4619      	mov	r1, r3
  4028ee:	6878      	ldr	r0, [r7, #4]
  4028f0:	4b0b      	ldr	r3, [pc, #44]	; (402920 <usart_serial_putchar+0x100>)
  4028f2:	4798      	blx	r3
  4028f4:	4603      	mov	r3, r0
  4028f6:	2b00      	cmp	r3, #0
  4028f8:	d1f7      	bne.n	4028ea <usart_serial_putchar+0xca>
		return 1;
  4028fa:	2301      	movs	r3, #1
  4028fc:	e000      	b.n	402900 <usart_serial_putchar+0xe0>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4028fe:	2300      	movs	r3, #0
}
  402900:	4618      	mov	r0, r3
  402902:	3708      	adds	r7, #8
  402904:	46bd      	mov	sp, r7
  402906:	bd80      	pop	{r7, pc}
  402908:	400e0800 	.word	0x400e0800
  40290c:	00404871 	.word	0x00404871
  402910:	400e0a00 	.word	0x400e0a00
  402914:	400e1a00 	.word	0x400e1a00
  402918:	400e1c00 	.word	0x400e1c00
  40291c:	40024000 	.word	0x40024000
  402920:	00404ad5 	.word	0x00404ad5
  402924:	40028000 	.word	0x40028000
  402928:	4002c000 	.word	0x4002c000

0040292c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  40292c:	b580      	push	{r7, lr}
  40292e:	b084      	sub	sp, #16
  402930:	af00      	add	r7, sp, #0
  402932:	6078      	str	r0, [r7, #4]
  402934:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
  402936:	2300      	movs	r3, #0
  402938:	60fb      	str	r3, [r7, #12]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40293a:	687b      	ldr	r3, [r7, #4]
  40293c:	4a34      	ldr	r2, [pc, #208]	; (402a10 <usart_serial_getchar+0xe4>)
  40293e:	4293      	cmp	r3, r2
  402940:	d107      	bne.n	402952 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
  402942:	bf00      	nop
  402944:	6839      	ldr	r1, [r7, #0]
  402946:	6878      	ldr	r0, [r7, #4]
  402948:	4b32      	ldr	r3, [pc, #200]	; (402a14 <usart_serial_getchar+0xe8>)
  40294a:	4798      	blx	r3
  40294c:	4603      	mov	r3, r0
  40294e:	2b00      	cmp	r3, #0
  402950:	d1f8      	bne.n	402944 <usart_serial_getchar+0x18>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402952:	687b      	ldr	r3, [r7, #4]
  402954:	4a30      	ldr	r2, [pc, #192]	; (402a18 <usart_serial_getchar+0xec>)
  402956:	4293      	cmp	r3, r2
  402958:	d107      	bne.n	40296a <usart_serial_getchar+0x3e>
		while (uart_read((Uart*)p_usart, data));
  40295a:	bf00      	nop
  40295c:	6839      	ldr	r1, [r7, #0]
  40295e:	6878      	ldr	r0, [r7, #4]
  402960:	4b2c      	ldr	r3, [pc, #176]	; (402a14 <usart_serial_getchar+0xe8>)
  402962:	4798      	blx	r3
  402964:	4603      	mov	r3, r0
  402966:	2b00      	cmp	r3, #0
  402968:	d1f8      	bne.n	40295c <usart_serial_getchar+0x30>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40296a:	687b      	ldr	r3, [r7, #4]
  40296c:	4a2b      	ldr	r2, [pc, #172]	; (402a1c <usart_serial_getchar+0xf0>)
  40296e:	4293      	cmp	r3, r2
  402970:	d107      	bne.n	402982 <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
  402972:	bf00      	nop
  402974:	6839      	ldr	r1, [r7, #0]
  402976:	6878      	ldr	r0, [r7, #4]
  402978:	4b26      	ldr	r3, [pc, #152]	; (402a14 <usart_serial_getchar+0xe8>)
  40297a:	4798      	blx	r3
  40297c:	4603      	mov	r3, r0
  40297e:	2b00      	cmp	r3, #0
  402980:	d1f8      	bne.n	402974 <usart_serial_getchar+0x48>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402982:	687b      	ldr	r3, [r7, #4]
  402984:	4a26      	ldr	r2, [pc, #152]	; (402a20 <usart_serial_getchar+0xf4>)
  402986:	4293      	cmp	r3, r2
  402988:	d107      	bne.n	40299a <usart_serial_getchar+0x6e>
		while (uart_read((Uart*)p_usart, data));
  40298a:	bf00      	nop
  40298c:	6839      	ldr	r1, [r7, #0]
  40298e:	6878      	ldr	r0, [r7, #4]
  402990:	4b20      	ldr	r3, [pc, #128]	; (402a14 <usart_serial_getchar+0xe8>)
  402992:	4798      	blx	r3
  402994:	4603      	mov	r3, r0
  402996:	2b00      	cmp	r3, #0
  402998:	d1f8      	bne.n	40298c <usart_serial_getchar+0x60>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40299a:	687b      	ldr	r3, [r7, #4]
  40299c:	4a21      	ldr	r2, [pc, #132]	; (402a24 <usart_serial_getchar+0xf8>)
  40299e:	4293      	cmp	r3, r2
  4029a0:	d10d      	bne.n	4029be <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
  4029a2:	bf00      	nop
  4029a4:	f107 030c 	add.w	r3, r7, #12
  4029a8:	4619      	mov	r1, r3
  4029aa:	6878      	ldr	r0, [r7, #4]
  4029ac:	4b1e      	ldr	r3, [pc, #120]	; (402a28 <usart_serial_getchar+0xfc>)
  4029ae:	4798      	blx	r3
  4029b0:	4603      	mov	r3, r0
  4029b2:	2b00      	cmp	r3, #0
  4029b4:	d1f6      	bne.n	4029a4 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
  4029b6:	68fb      	ldr	r3, [r7, #12]
  4029b8:	b2da      	uxtb	r2, r3
  4029ba:	683b      	ldr	r3, [r7, #0]
  4029bc:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4029be:	687b      	ldr	r3, [r7, #4]
  4029c0:	4a1a      	ldr	r2, [pc, #104]	; (402a2c <usart_serial_getchar+0x100>)
  4029c2:	4293      	cmp	r3, r2
  4029c4:	d10d      	bne.n	4029e2 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
  4029c6:	bf00      	nop
  4029c8:	f107 030c 	add.w	r3, r7, #12
  4029cc:	4619      	mov	r1, r3
  4029ce:	6878      	ldr	r0, [r7, #4]
  4029d0:	4b15      	ldr	r3, [pc, #84]	; (402a28 <usart_serial_getchar+0xfc>)
  4029d2:	4798      	blx	r3
  4029d4:	4603      	mov	r3, r0
  4029d6:	2b00      	cmp	r3, #0
  4029d8:	d1f6      	bne.n	4029c8 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
  4029da:	68fb      	ldr	r3, [r7, #12]
  4029dc:	b2da      	uxtb	r2, r3
  4029de:	683b      	ldr	r3, [r7, #0]
  4029e0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4029e2:	687b      	ldr	r3, [r7, #4]
  4029e4:	4a12      	ldr	r2, [pc, #72]	; (402a30 <usart_serial_getchar+0x104>)
  4029e6:	4293      	cmp	r3, r2
  4029e8:	d10d      	bne.n	402a06 <usart_serial_getchar+0xda>
		while (usart_read(p_usart, &val));
  4029ea:	bf00      	nop
  4029ec:	f107 030c 	add.w	r3, r7, #12
  4029f0:	4619      	mov	r1, r3
  4029f2:	6878      	ldr	r0, [r7, #4]
  4029f4:	4b0c      	ldr	r3, [pc, #48]	; (402a28 <usart_serial_getchar+0xfc>)
  4029f6:	4798      	blx	r3
  4029f8:	4603      	mov	r3, r0
  4029fa:	2b00      	cmp	r3, #0
  4029fc:	d1f6      	bne.n	4029ec <usart_serial_getchar+0xc0>
		*data = (uint8_t)(val & 0xFF);
  4029fe:	68fb      	ldr	r3, [r7, #12]
  402a00:	b2da      	uxtb	r2, r3
  402a02:	683b      	ldr	r3, [r7, #0]
  402a04:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402a06:	bf00      	nop
  402a08:	3710      	adds	r7, #16
  402a0a:	46bd      	mov	sp, r7
  402a0c:	bd80      	pop	{r7, pc}
  402a0e:	bf00      	nop
  402a10:	400e0800 	.word	0x400e0800
  402a14:	004048a1 	.word	0x004048a1
  402a18:	400e0a00 	.word	0x400e0a00
  402a1c:	400e1a00 	.word	0x400e1a00
  402a20:	400e1c00 	.word	0x400e1c00
  402a24:	40024000 	.word	0x40024000
  402a28:	00404b07 	.word	0x00404b07
  402a2c:	40028000 	.word	0x40028000
  402a30:	4002c000 	.word	0x4002c000

00402a34 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
  402a34:	b580      	push	{r7, lr}
  402a36:	b082      	sub	sp, #8
  402a38:	af00      	add	r7, sp, #0
  402a3a:	6078      	str	r0, [r7, #4]
  402a3c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
  402a3e:	4a0f      	ldr	r2, [pc, #60]	; (402a7c <stdio_serial_init+0x48>)
  402a40:	687b      	ldr	r3, [r7, #4]
  402a42:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402a44:	4b0e      	ldr	r3, [pc, #56]	; (402a80 <stdio_serial_init+0x4c>)
  402a46:	4a0f      	ldr	r2, [pc, #60]	; (402a84 <stdio_serial_init+0x50>)
  402a48:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402a4a:	4b0f      	ldr	r3, [pc, #60]	; (402a88 <stdio_serial_init+0x54>)
  402a4c:	4a0f      	ldr	r2, [pc, #60]	; (402a8c <stdio_serial_init+0x58>)
  402a4e:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
  402a50:	6839      	ldr	r1, [r7, #0]
  402a52:	6878      	ldr	r0, [r7, #4]
  402a54:	4b0e      	ldr	r3, [pc, #56]	; (402a90 <stdio_serial_init+0x5c>)
  402a56:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402a58:	4b0e      	ldr	r3, [pc, #56]	; (402a94 <stdio_serial_init+0x60>)
  402a5a:	681b      	ldr	r3, [r3, #0]
  402a5c:	689b      	ldr	r3, [r3, #8]
  402a5e:	2100      	movs	r1, #0
  402a60:	4618      	mov	r0, r3
  402a62:	4b0d      	ldr	r3, [pc, #52]	; (402a98 <stdio_serial_init+0x64>)
  402a64:	4798      	blx	r3
	setbuf(stdin, NULL);
  402a66:	4b0b      	ldr	r3, [pc, #44]	; (402a94 <stdio_serial_init+0x60>)
  402a68:	681b      	ldr	r3, [r3, #0]
  402a6a:	685b      	ldr	r3, [r3, #4]
  402a6c:	2100      	movs	r1, #0
  402a6e:	4618      	mov	r0, r3
  402a70:	4b09      	ldr	r3, [pc, #36]	; (402a98 <stdio_serial_init+0x64>)
  402a72:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
  402a74:	bf00      	nop
  402a76:	3708      	adds	r7, #8
  402a78:	46bd      	mov	sp, r7
  402a7a:	bd80      	pop	{r7, pc}
  402a7c:	204203d8 	.word	0x204203d8
  402a80:	204203d4 	.word	0x204203d4
  402a84:	00402821 	.word	0x00402821
  402a88:	204203d0 	.word	0x204203d0
  402a8c:	0040292d 	.word	0x0040292d
  402a90:	004026bd 	.word	0x004026bd
  402a94:	2040003c 	.word	0x2040003c
  402a98:	00405a4d 	.word	0x00405a4d

00402a9c <vApplicationMallocFailedHook>:
extern void vApplicationTickHook(void)
{
}

extern void vApplicationMallocFailedHook(void)
{
  402a9c:	b580      	push	{r7, lr}
  402a9e:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
  402aa0:	4b01      	ldr	r3, [pc, #4]	; (402aa8 <vApplicationMallocFailedHook+0xc>)
  402aa2:	4798      	blx	r3
  402aa4:	bf00      	nop
  402aa6:	e7fd      	b.n	402aa4 <vApplicationMallocFailedHook+0x8>
  402aa8:	0040059d 	.word	0x0040059d

00402aac <TC0_Handler>:
/* Callbacks / Handler                                                 */
/************************************************************************/
/**
*  Interrupt handler for TC1 interrupt.
*/
void TC0_Handler(void){
  402aac:	b580      	push	{r7, lr}
  402aae:	b082      	sub	sp, #8
  402ab0:	af00      	add	r7, sp, #0
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrup��o foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC0, 0);
  402ab2:	2100      	movs	r1, #0
  402ab4:	4804      	ldr	r0, [pc, #16]	; (402ac8 <TC0_Handler+0x1c>)
  402ab6:	4b05      	ldr	r3, [pc, #20]	; (402acc <TC0_Handler+0x20>)
  402ab8:	4798      	blx	r3
  402aba:	4603      	mov	r3, r0
  402abc:	607b      	str	r3, [r7, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  402abe:	687b      	ldr	r3, [r7, #4]

}
  402ac0:	bf00      	nop
  402ac2:	3708      	adds	r7, #8
  402ac4:	46bd      	mov	sp, r7
  402ac6:	bd80      	pop	{r7, pc}
  402ac8:	4000c000 	.word	0x4000c000
  402acc:	00403115 	.word	0x00403115

00402ad0 <Saturation>:
static void Volume(){
	g_ul_value  = (int) ((float) g_ul_value * volume);

}

static void Saturation(int value) {
  402ad0:	b480      	push	{r7}
  402ad2:	b085      	sub	sp, #20
  402ad4:	af00      	add	r7, sp, #0
  402ad6:	6078      	str	r0, [r7, #4]
	int sat_value = (int) ((100 - value) * ground / 100) + 20;
  402ad8:	687b      	ldr	r3, [r7, #4]
  402ada:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  402ade:	4a17      	ldr	r2, [pc, #92]	; (402b3c <Saturation+0x6c>)
  402ae0:	6812      	ldr	r2, [r2, #0]
  402ae2:	fb02 f303 	mul.w	r3, r2, r3
  402ae6:	4a16      	ldr	r2, [pc, #88]	; (402b40 <Saturation+0x70>)
  402ae8:	fb82 1203 	smull	r1, r2, r2, r3
  402aec:	1152      	asrs	r2, r2, #5
  402aee:	17db      	asrs	r3, r3, #31
  402af0:	1ad3      	subs	r3, r2, r3
  402af2:	3314      	adds	r3, #20
  402af4:	60fb      	str	r3, [r7, #12]
	
	if (g_ul_value > ground + sat_value) g_ul_value = ground + sat_value;
  402af6:	4b11      	ldr	r3, [pc, #68]	; (402b3c <Saturation+0x6c>)
  402af8:	681a      	ldr	r2, [r3, #0]
  402afa:	68fb      	ldr	r3, [r7, #12]
  402afc:	441a      	add	r2, r3
  402afe:	4b11      	ldr	r3, [pc, #68]	; (402b44 <Saturation+0x74>)
  402b00:	681b      	ldr	r3, [r3, #0]
  402b02:	429a      	cmp	r2, r3
  402b04:	da05      	bge.n	402b12 <Saturation+0x42>
  402b06:	4b0d      	ldr	r3, [pc, #52]	; (402b3c <Saturation+0x6c>)
  402b08:	681a      	ldr	r2, [r3, #0]
  402b0a:	68fb      	ldr	r3, [r7, #12]
  402b0c:	4413      	add	r3, r2
  402b0e:	4a0d      	ldr	r2, [pc, #52]	; (402b44 <Saturation+0x74>)
  402b10:	6013      	str	r3, [r2, #0]
	if (g_ul_value < ground - sat_value) g_ul_value = ground - sat_value;
  402b12:	4b0a      	ldr	r3, [pc, #40]	; (402b3c <Saturation+0x6c>)
  402b14:	681a      	ldr	r2, [r3, #0]
  402b16:	68fb      	ldr	r3, [r7, #12]
  402b18:	1ad2      	subs	r2, r2, r3
  402b1a:	4b0a      	ldr	r3, [pc, #40]	; (402b44 <Saturation+0x74>)
  402b1c:	681b      	ldr	r3, [r3, #0]
  402b1e:	429a      	cmp	r2, r3
  402b20:	dd05      	ble.n	402b2e <Saturation+0x5e>
  402b22:	4b06      	ldr	r3, [pc, #24]	; (402b3c <Saturation+0x6c>)
  402b24:	681a      	ldr	r2, [r3, #0]
  402b26:	68fb      	ldr	r3, [r7, #12]
  402b28:	1ad3      	subs	r3, r2, r3
  402b2a:	4a06      	ldr	r2, [pc, #24]	; (402b44 <Saturation+0x74>)
  402b2c:	6013      	str	r3, [r2, #0]
}
  402b2e:	bf00      	nop
  402b30:	3714      	adds	r7, #20
  402b32:	46bd      	mov	sp, r7
  402b34:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b38:	4770      	bx	lr
  402b3a:	bf00      	nop
  402b3c:	20400030 	.word	0x20400030
  402b40:	51eb851f 	.word	0x51eb851f
  402b44:	20420314 	.word	0x20420314

00402b48 <Gain>:

static void Gain(int value) {
  402b48:	b480      	push	{r7}
  402b4a:	b085      	sub	sp, #20
  402b4c:	af00      	add	r7, sp, #0
  402b4e:	6078      	str	r0, [r7, #4]
	int percent100 = 50;
  402b50:	2332      	movs	r3, #50	; 0x32
  402b52:	60fb      	str	r3, [r7, #12]
	
	g_ul_value = (int) (((g_ul_value - ground) * value / percent100) + ground);
  402b54:	4b0a      	ldr	r3, [pc, #40]	; (402b80 <Gain+0x38>)
  402b56:	681a      	ldr	r2, [r3, #0]
  402b58:	4b0a      	ldr	r3, [pc, #40]	; (402b84 <Gain+0x3c>)
  402b5a:	681b      	ldr	r3, [r3, #0]
  402b5c:	1ad3      	subs	r3, r2, r3
  402b5e:	687a      	ldr	r2, [r7, #4]
  402b60:	fb02 f203 	mul.w	r2, r2, r3
  402b64:	68fb      	ldr	r3, [r7, #12]
  402b66:	fb92 f2f3 	sdiv	r2, r2, r3
  402b6a:	4b06      	ldr	r3, [pc, #24]	; (402b84 <Gain+0x3c>)
  402b6c:	681b      	ldr	r3, [r3, #0]
  402b6e:	4413      	add	r3, r2
  402b70:	4a03      	ldr	r2, [pc, #12]	; (402b80 <Gain+0x38>)
  402b72:	6013      	str	r3, [r2, #0]
}
  402b74:	bf00      	nop
  402b76:	3714      	adds	r7, #20
  402b78:	46bd      	mov	sp, r7
  402b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b7e:	4770      	bx	lr
  402b80:	20420314 	.word	0x20420314
  402b84:	20400030 	.word	0x20400030

00402b88 <lowPassFrequency>:

static void lowPassFrequency(int CUTOFF)
{
  402b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402b8c:	b08b      	sub	sp, #44	; 0x2c
  402b8e:	af00      	add	r7, sp, #0
  402b90:	6078      	str	r0, [r7, #4]
	double RC = 1.0/(CUTOFF*2*3.14);
  402b92:	687b      	ldr	r3, [r7, #4]
  402b94:	005a      	lsls	r2, r3, #1
  402b96:	4b42      	ldr	r3, [pc, #264]	; (402ca0 <lowPassFrequency+0x118>)
  402b98:	4610      	mov	r0, r2
  402b9a:	4798      	blx	r3
  402b9c:	4c41      	ldr	r4, [pc, #260]	; (402ca4 <lowPassFrequency+0x11c>)
  402b9e:	a33c      	add	r3, pc, #240	; (adr r3, 402c90 <lowPassFrequency+0x108>)
  402ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ba4:	47a0      	blx	r4
  402ba6:	4603      	mov	r3, r0
  402ba8:	460c      	mov	r4, r1
  402baa:	461a      	mov	r2, r3
  402bac:	4623      	mov	r3, r4
  402bae:	4c3e      	ldr	r4, [pc, #248]	; (402ca8 <lowPassFrequency+0x120>)
  402bb0:	f04f 0000 	mov.w	r0, #0
  402bb4:	493d      	ldr	r1, [pc, #244]	; (402cac <lowPassFrequency+0x124>)
  402bb6:	47a0      	blx	r4
  402bb8:	4603      	mov	r3, r0
  402bba:	460c      	mov	r4, r1
  402bbc:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double dt = 1.0/22000;
  402bc0:	a435      	add	r4, pc, #212	; (adr r4, 402c98 <lowPassFrequency+0x110>)
  402bc2:	e9d4 3400 	ldrd	r3, r4, [r4]
  402bc6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double alpha = dt/(RC+dt);
  402bca:	4c39      	ldr	r4, [pc, #228]	; (402cb0 <lowPassFrequency+0x128>)
  402bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
  402bd0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
  402bd4:	47a0      	blx	r4
  402bd6:	4603      	mov	r3, r0
  402bd8:	460c      	mov	r4, r1
  402bda:	461a      	mov	r2, r3
  402bdc:	4623      	mov	r3, r4
  402bde:	4c32      	ldr	r4, [pc, #200]	; (402ca8 <lowPassFrequency+0x120>)
  402be0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
  402be4:	47a0      	blx	r4
  402be6:	4603      	mov	r3, r0
  402be8:	460c      	mov	r4, r1
  402bea:	e9c7 3404 	strd	r3, r4, [r7, #16]
	
	int current = g_ul_value - ground;
  402bee:	4b31      	ldr	r3, [pc, #196]	; (402cb4 <lowPassFrequency+0x12c>)
  402bf0:	681a      	ldr	r2, [r3, #0]
  402bf2:	4b31      	ldr	r3, [pc, #196]	; (402cb8 <lowPassFrequency+0x130>)
  402bf4:	681b      	ldr	r3, [r3, #0]
  402bf6:	1ad3      	subs	r3, r2, r3
  402bf8:	60fb      	str	r3, [r7, #12]
	int past = g_ul_value_old - ground;
  402bfa:	4b30      	ldr	r3, [pc, #192]	; (402cbc <lowPassFrequency+0x134>)
  402bfc:	681a      	ldr	r2, [r3, #0]
  402bfe:	4b2e      	ldr	r3, [pc, #184]	; (402cb8 <lowPassFrequency+0x130>)
  402c00:	681b      	ldr	r3, [r3, #0]
  402c02:	1ad3      	subs	r3, r2, r3
  402c04:	60bb      	str	r3, [r7, #8]
	
	g_ul_value = (int) ((double) past + (alpha*((double) current - (double) past)) + ground);
  402c06:	4b26      	ldr	r3, [pc, #152]	; (402ca0 <lowPassFrequency+0x118>)
  402c08:	68b8      	ldr	r0, [r7, #8]
  402c0a:	4798      	blx	r3
  402c0c:	4605      	mov	r5, r0
  402c0e:	460e      	mov	r6, r1
  402c10:	4b23      	ldr	r3, [pc, #140]	; (402ca0 <lowPassFrequency+0x118>)
  402c12:	68f8      	ldr	r0, [r7, #12]
  402c14:	4798      	blx	r3
  402c16:	4680      	mov	r8, r0
  402c18:	4689      	mov	r9, r1
  402c1a:	4b21      	ldr	r3, [pc, #132]	; (402ca0 <lowPassFrequency+0x118>)
  402c1c:	68b8      	ldr	r0, [r7, #8]
  402c1e:	4798      	blx	r3
  402c20:	4602      	mov	r2, r0
  402c22:	460b      	mov	r3, r1
  402c24:	4c26      	ldr	r4, [pc, #152]	; (402cc0 <lowPassFrequency+0x138>)
  402c26:	4640      	mov	r0, r8
  402c28:	4649      	mov	r1, r9
  402c2a:	47a0      	blx	r4
  402c2c:	4603      	mov	r3, r0
  402c2e:	460c      	mov	r4, r1
  402c30:	4618      	mov	r0, r3
  402c32:	4621      	mov	r1, r4
  402c34:	4c1b      	ldr	r4, [pc, #108]	; (402ca4 <lowPassFrequency+0x11c>)
  402c36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
  402c3a:	47a0      	blx	r4
  402c3c:	4603      	mov	r3, r0
  402c3e:	460c      	mov	r4, r1
  402c40:	461a      	mov	r2, r3
  402c42:	4623      	mov	r3, r4
  402c44:	4c1a      	ldr	r4, [pc, #104]	; (402cb0 <lowPassFrequency+0x128>)
  402c46:	4628      	mov	r0, r5
  402c48:	4631      	mov	r1, r6
  402c4a:	47a0      	blx	r4
  402c4c:	4603      	mov	r3, r0
  402c4e:	460c      	mov	r4, r1
  402c50:	461d      	mov	r5, r3
  402c52:	4626      	mov	r6, r4
  402c54:	4b18      	ldr	r3, [pc, #96]	; (402cb8 <lowPassFrequency+0x130>)
  402c56:	681a      	ldr	r2, [r3, #0]
  402c58:	4b11      	ldr	r3, [pc, #68]	; (402ca0 <lowPassFrequency+0x118>)
  402c5a:	4610      	mov	r0, r2
  402c5c:	4798      	blx	r3
  402c5e:	4602      	mov	r2, r0
  402c60:	460b      	mov	r3, r1
  402c62:	4c13      	ldr	r4, [pc, #76]	; (402cb0 <lowPassFrequency+0x128>)
  402c64:	4628      	mov	r0, r5
  402c66:	4631      	mov	r1, r6
  402c68:	47a0      	blx	r4
  402c6a:	4603      	mov	r3, r0
  402c6c:	460c      	mov	r4, r1
  402c6e:	4619      	mov	r1, r3
  402c70:	4622      	mov	r2, r4
  402c72:	4b14      	ldr	r3, [pc, #80]	; (402cc4 <lowPassFrequency+0x13c>)
  402c74:	4608      	mov	r0, r1
  402c76:	4611      	mov	r1, r2
  402c78:	4798      	blx	r3
  402c7a:	4602      	mov	r2, r0
  402c7c:	4b0d      	ldr	r3, [pc, #52]	; (402cb4 <lowPassFrequency+0x12c>)
  402c7e:	601a      	str	r2, [r3, #0]
}
  402c80:	bf00      	nop
  402c82:	372c      	adds	r7, #44	; 0x2c
  402c84:	46bd      	mov	sp, r7
  402c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  402c8a:	bf00      	nop
  402c8c:	f3af 8000 	nop.w
  402c90:	51eb851f 	.word	0x51eb851f
  402c94:	40091eb8 	.word	0x40091eb8
  402c98:	4a19b16e 	.word	0x4a19b16e
  402c9c:	3f07d4ce 	.word	0x3f07d4ce
  402ca0:	00405219 	.word	0x00405219
  402ca4:	004052e5 	.word	0x004052e5
  402ca8:	00405539 	.word	0x00405539
  402cac:	3ff00000 	.word	0x3ff00000
  402cb0:	00404f81 	.word	0x00404f81
  402cb4:	20420314 	.word	0x20420314
  402cb8:	20400030 	.word	0x20400030
  402cbc:	20420310 	.word	0x20420310
  402cc0:	00404f7d 	.word	0x00404f7d
  402cc4:	00405709 	.word	0x00405709

00402cc8 <AFEC_Audio_callback>:

static void AFEC_Audio_callback(void){
  402cc8:	b580      	push	{r7, lr}
  402cca:	af00      	add	r7, sp, #0
	/** The conversion data value */

	// check swap
	if(ppbuf_get_full_signal(&buffer,false) == true) {
  402ccc:	2100      	movs	r1, #0
  402cce:	482b      	ldr	r0, [pc, #172]	; (402d7c <AFEC_Audio_callback+0xb4>)
  402cd0:	4b2b      	ldr	r3, [pc, #172]	; (402d80 <AFEC_Audio_callback+0xb8>)
  402cd2:	4798      	blx	r3
  402cd4:	4603      	mov	r3, r0
  402cd6:	2b00      	cmp	r3, #0
  402cd8:	d018      	beq.n	402d0c <AFEC_Audio_callback+0x44>
		ppbuf_get_full_signal(&buffer,true); // swap
  402cda:	2101      	movs	r1, #1
  402cdc:	4827      	ldr	r0, [pc, #156]	; (402d7c <AFEC_Audio_callback+0xb4>)
  402cde:	4b28      	ldr	r3, [pc, #160]	; (402d80 <AFEC_Audio_callback+0xb8>)
  402ce0:	4798      	blx	r3
		printf("Signal: %d\n", g_ul_value);
  402ce2:	4b28      	ldr	r3, [pc, #160]	; (402d84 <AFEC_Audio_callback+0xbc>)
  402ce4:	681b      	ldr	r3, [r3, #0]
  402ce6:	4619      	mov	r1, r3
  402ce8:	4827      	ldr	r0, [pc, #156]	; (402d88 <AFEC_Audio_callback+0xc0>)
  402cea:	4b28      	ldr	r3, [pc, #160]	; (402d8c <AFEC_Audio_callback+0xc4>)
  402cec:	4798      	blx	r3
		printf("Average: %d\n", count/11000);
  402cee:	4b28      	ldr	r3, [pc, #160]	; (402d90 <AFEC_Audio_callback+0xc8>)
  402cf0:	681b      	ldr	r3, [r3, #0]
  402cf2:	4a28      	ldr	r2, [pc, #160]	; (402d94 <AFEC_Audio_callback+0xcc>)
  402cf4:	fb82 1203 	smull	r1, r2, r2, r3
  402cf8:	1312      	asrs	r2, r2, #12
  402cfa:	17db      	asrs	r3, r3, #31
  402cfc:	1ad3      	subs	r3, r2, r3
  402cfe:	4619      	mov	r1, r3
  402d00:	4825      	ldr	r0, [pc, #148]	; (402d98 <AFEC_Audio_callback+0xd0>)
  402d02:	4b22      	ldr	r3, [pc, #136]	; (402d8c <AFEC_Audio_callback+0xc4>)
  402d04:	4798      	blx	r3
		count = 0;
  402d06:	4b22      	ldr	r3, [pc, #136]	; (402d90 <AFEC_Audio_callback+0xc8>)
  402d08:	2200      	movs	r2, #0
  402d0a:	601a      	str	r2, [r3, #0]
	}
	
	g_ul_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_PIN);
  402d0c:	2100      	movs	r1, #0
  402d0e:	4823      	ldr	r0, [pc, #140]	; (402d9c <AFEC_Audio_callback+0xd4>)
  402d10:	4b23      	ldr	r3, [pc, #140]	; (402da0 <AFEC_Audio_callback+0xd8>)
  402d12:	4798      	blx	r3
  402d14:	4603      	mov	r3, r0
  402d16:	461a      	mov	r2, r3
  402d18:	4b1a      	ldr	r3, [pc, #104]	; (402d84 <AFEC_Audio_callback+0xbc>)
  402d1a:	601a      	str	r2, [r3, #0]
	
	/*        EFFECTS        */
	Saturation(saturation_value);
  402d1c:	4b21      	ldr	r3, [pc, #132]	; (402da4 <AFEC_Audio_callback+0xdc>)
  402d1e:	681b      	ldr	r3, [r3, #0]
  402d20:	4618      	mov	r0, r3
  402d22:	4b21      	ldr	r3, [pc, #132]	; (402da8 <AFEC_Audio_callback+0xe0>)
  402d24:	4798      	blx	r3
	Gain(gain_value);
  402d26:	4b21      	ldr	r3, [pc, #132]	; (402dac <AFEC_Audio_callback+0xe4>)
  402d28:	681b      	ldr	r3, [r3, #0]
  402d2a:	4618      	mov	r0, r3
  402d2c:	4b20      	ldr	r3, [pc, #128]	; (402db0 <AFEC_Audio_callback+0xe8>)
  402d2e:	4798      	blx	r3
	lowPassFrequency(lowpass_value);
  402d30:	4b20      	ldr	r3, [pc, #128]	; (402db4 <AFEC_Audio_callback+0xec>)
  402d32:	681b      	ldr	r3, [r3, #0]
  402d34:	4618      	mov	r0, r3
  402d36:	4b20      	ldr	r3, [pc, #128]	; (402db8 <AFEC_Audio_callback+0xf0>)
  402d38:	4798      	blx	r3
	
	
	count += g_ul_value;
  402d3a:	4b15      	ldr	r3, [pc, #84]	; (402d90 <AFEC_Audio_callback+0xc8>)
  402d3c:	681a      	ldr	r2, [r3, #0]
  402d3e:	4b11      	ldr	r3, [pc, #68]	; (402d84 <AFEC_Audio_callback+0xbc>)
  402d40:	681b      	ldr	r3, [r3, #0]
  402d42:	4413      	add	r3, r2
  402d44:	4a12      	ldr	r2, [pc, #72]	; (402d90 <AFEC_Audio_callback+0xc8>)
  402d46:	6013      	str	r3, [r2, #0]
	g_ul_value_old = g_ul_value;
  402d48:	4b0e      	ldr	r3, [pc, #56]	; (402d84 <AFEC_Audio_callback+0xbc>)
  402d4a:	681b      	ldr	r3, [r3, #0]
  402d4c:	4a1b      	ldr	r2, [pc, #108]	; (402dbc <AFEC_Audio_callback+0xf4>)
  402d4e:	6013      	str	r3, [r2, #0]
	ppbuf_insert_active(&buffer, &g_ul_value, 1);
  402d50:	2201      	movs	r2, #1
  402d52:	490c      	ldr	r1, [pc, #48]	; (402d84 <AFEC_Audio_callback+0xbc>)
  402d54:	4809      	ldr	r0, [pc, #36]	; (402d7c <AFEC_Audio_callback+0xb4>)
  402d56:	4b1a      	ldr	r3, [pc, #104]	; (402dc0 <AFEC_Audio_callback+0xf8>)
  402d58:	4798      	blx	r3
	ppbuf_remove_inactive(&buffer, &buf, 1);	
  402d5a:	2201      	movs	r2, #1
  402d5c:	4919      	ldr	r1, [pc, #100]	; (402dc4 <AFEC_Audio_callback+0xfc>)
  402d5e:	4807      	ldr	r0, [pc, #28]	; (402d7c <AFEC_Audio_callback+0xb4>)
  402d60:	4b19      	ldr	r3, [pc, #100]	; (402dc8 <AFEC_Audio_callback+0x100>)
  402d62:	4798      	blx	r3
	
	dacc_get_interrupt_status(DACC_BASE);
  402d64:	4819      	ldr	r0, [pc, #100]	; (402dcc <AFEC_Audio_callback+0x104>)
  402d66:	4b1a      	ldr	r3, [pc, #104]	; (402dd0 <AFEC_Audio_callback+0x108>)
  402d68:	4798      	blx	r3
	dacc_write_conversion_data(DACC_BASE, buf, DACC_CHANNEL);
  402d6a:	4b16      	ldr	r3, [pc, #88]	; (402dc4 <AFEC_Audio_callback+0xfc>)
  402d6c:	681b      	ldr	r3, [r3, #0]
  402d6e:	2200      	movs	r2, #0
  402d70:	4619      	mov	r1, r3
  402d72:	4816      	ldr	r0, [pc, #88]	; (402dcc <AFEC_Audio_callback+0x104>)
  402d74:	4b17      	ldr	r3, [pc, #92]	; (402dd4 <AFEC_Audio_callback+0x10c>)
  402d76:	4798      	blx	r3

}
  402d78:	bf00      	nop
  402d7a:	bd80      	pop	{r7, pc}
  402d7c:	2040000c 	.word	0x2040000c
  402d80:	00402429 	.word	0x00402429
  402d84:	20420314 	.word	0x20420314
  402d88:	00408824 	.word	0x00408824
  402d8c:	004057a9 	.word	0x004057a9
  402d90:	20420318 	.word	0x20420318
  402d94:	5f533929 	.word	0x5f533929
  402d98:	00408830 	.word	0x00408830
  402d9c:	4003c000 	.word	0x4003c000
  402da0:	00402555 	.word	0x00402555
  402da4:	20400024 	.word	0x20400024
  402da8:	00402ad1 	.word	0x00402ad1
  402dac:	20400028 	.word	0x20400028
  402db0:	00402b49 	.word	0x00402b49
  402db4:	2040002c 	.word	0x2040002c
  402db8:	00402b89 	.word	0x00402b89
  402dbc:	20420310 	.word	0x20420310
  402dc0:	004022fd 	.word	0x004022fd
  402dc4:	2042030c 	.word	0x2042030c
  402dc8:	0040239d 	.word	0x0040239d
  402dcc:	40040000 	.word	0x40040000
  402dd0:	004001c7 	.word	0x004001c7
  402dd4:	004001df 	.word	0x004001df

00402dd8 <configure_console>:
 * 8 bits
 * 1 stop bit
 * sem paridade
 */
static void configure_console(void)
{
  402dd8:	b590      	push	{r4, r7, lr}
  402dda:	b085      	sub	sp, #20
  402ddc:	af00      	add	r7, sp, #0
 
	const usart_serial_options_t uart_serial_options = {
  402dde:	4b08      	ldr	r3, [pc, #32]	; (402e00 <configure_console+0x28>)
  402de0:	463c      	mov	r4, r7
  402de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.paritytype = CONF_UART_PARITY,
		.stopbits   = CONF_UART_STOP_BITS,
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
  402de8:	200e      	movs	r0, #14
  402dea:	4b06      	ldr	r3, [pc, #24]	; (402e04 <configure_console+0x2c>)
  402dec:	4798      	blx	r3
	stdio_serial_init(CONF_UART, &uart_serial_options);
  402dee:	463b      	mov	r3, r7
  402df0:	4619      	mov	r1, r3
  402df2:	4805      	ldr	r0, [pc, #20]	; (402e08 <configure_console+0x30>)
  402df4:	4b05      	ldr	r3, [pc, #20]	; (402e0c <configure_console+0x34>)
  402df6:	4798      	blx	r3
}
  402df8:	bf00      	nop
  402dfa:	3714      	adds	r7, #20
  402dfc:	46bd      	mov	sp, r7
  402dfe:	bd90      	pop	{r4, r7, pc}
  402e00:	00408840 	.word	0x00408840
  402e04:	00402675 	.word	0x00402675
  402e08:	40028000 	.word	0x40028000
  402e0c:	00402a35 	.word	0x00402a35

00402e10 <config_ADC_AUDIO>:

static void config_ADC_AUDIO(void){
  402e10:	b590      	push	{r4, r7, lr}
  402e12:	b08b      	sub	sp, #44	; 0x2c
  402e14:	af00      	add	r7, sp, #0
/************************************* 
   * Ativa e configura AFEC
   *************************************/  
  /* Ativa AFEC - 0 */
	afec_enable(AFEC0);
  402e16:	4821      	ldr	r0, [pc, #132]	; (402e9c <config_ADC_AUDIO+0x8c>)
  402e18:	4b21      	ldr	r3, [pc, #132]	; (402ea0 <config_ADC_AUDIO+0x90>)
  402e1a:	4798      	blx	r3

	/* struct de configuracao do AFEC */
	struct afec_config afec_cfg;

	/* Carrega parametros padrao */
	afec_get_config_defaults(&afec_cfg);
  402e1c:	f107 0310 	add.w	r3, r7, #16
  402e20:	4618      	mov	r0, r3
  402e22:	4b20      	ldr	r3, [pc, #128]	; (402ea4 <config_ADC_AUDIO+0x94>)
  402e24:	4798      	blx	r3

	/* Configura AFEC */
	afec_init(AFEC0, &afec_cfg);
  402e26:	f107 0310 	add.w	r3, r7, #16
  402e2a:	4619      	mov	r1, r3
  402e2c:	481b      	ldr	r0, [pc, #108]	; (402e9c <config_ADC_AUDIO+0x8c>)
  402e2e:	4b1e      	ldr	r3, [pc, #120]	; (402ea8 <config_ADC_AUDIO+0x98>)
  402e30:	4798      	blx	r3
  
	/* Configura trigger por software */
	afec_set_trigger(AFEC0, AFEC_TRIG_TIO_CH_0);
  402e32:	2103      	movs	r1, #3
  402e34:	4819      	ldr	r0, [pc, #100]	; (402e9c <config_ADC_AUDIO+0x8c>)
  402e36:	4b1d      	ldr	r3, [pc, #116]	; (402eac <config_ADC_AUDIO+0x9c>)
  402e38:	4798      	blx	r3
		
	AFEC0->AFEC_MR |= 3;
  402e3a:	4a18      	ldr	r2, [pc, #96]	; (402e9c <config_ADC_AUDIO+0x8c>)
  402e3c:	4b17      	ldr	r3, [pc, #92]	; (402e9c <config_ADC_AUDIO+0x8c>)
  402e3e:	685b      	ldr	r3, [r3, #4]
  402e40:	f043 0303 	orr.w	r3, r3, #3
  402e44:	6053      	str	r3, [r2, #4]
  
	/* configura call back */
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0,	AFEC_Audio_callback, 1); 
  402e46:	2301      	movs	r3, #1
  402e48:	4a19      	ldr	r2, [pc, #100]	; (402eb0 <config_ADC_AUDIO+0xa0>)
  402e4a:	2100      	movs	r1, #0
  402e4c:	4813      	ldr	r0, [pc, #76]	; (402e9c <config_ADC_AUDIO+0x8c>)
  402e4e:	4c19      	ldr	r4, [pc, #100]	; (402eb4 <config_ADC_AUDIO+0xa4>)
  402e50:	47a0      	blx	r4
   
	/*** Configuracao espec�fica do canal AFEC ***/
	struct afec_ch_config afec_ch_cfg;
	afec_ch_get_config_defaults(&afec_ch_cfg);
  402e52:	f107 030c 	add.w	r3, r7, #12
  402e56:	4618      	mov	r0, r3
  402e58:	4b17      	ldr	r3, [pc, #92]	; (402eb8 <config_ADC_AUDIO+0xa8>)
  402e5a:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  402e5c:	2300      	movs	r3, #0
  402e5e:	737b      	strb	r3, [r7, #13]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_PIN, &afec_ch_cfg);
  402e60:	f107 030c 	add.w	r3, r7, #12
  402e64:	461a      	mov	r2, r3
  402e66:	2100      	movs	r1, #0
  402e68:	480c      	ldr	r0, [pc, #48]	; (402e9c <config_ADC_AUDIO+0x8c>)
  402e6a:	4b14      	ldr	r3, [pc, #80]	; (402ebc <config_ADC_AUDIO+0xac>)
  402e6c:	4798      	blx	r3
	* Calibracao:
	* Because the internal ADC offset is 0x200, it should cancel it and shift
	 down to 0.
	 */
	//afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_PIN, 0x1B0);
	afec_channel_set_analog_offset(AFEC0, AFEC_CHANNEL_PIN, 0x1A0);
  402e6e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
  402e72:	2100      	movs	r1, #0
  402e74:	4809      	ldr	r0, [pc, #36]	; (402e9c <config_ADC_AUDIO+0x8c>)
  402e76:	4b12      	ldr	r3, [pc, #72]	; (402ec0 <config_ADC_AUDIO+0xb0>)
  402e78:	4798      	blx	r3

	/***  Configura sensor de temperatura ***/
	struct afec_temp_sensor_config afec_temp_sensor_cfg;

	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  402e7a:	1d3b      	adds	r3, r7, #4
  402e7c:	4618      	mov	r0, r3
  402e7e:	4b11      	ldr	r3, [pc, #68]	; (402ec4 <config_ADC_AUDIO+0xb4>)
  402e80:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  402e82:	1d3b      	adds	r3, r7, #4
  402e84:	4619      	mov	r1, r3
  402e86:	4805      	ldr	r0, [pc, #20]	; (402e9c <config_ADC_AUDIO+0x8c>)
  402e88:	4b0f      	ldr	r3, [pc, #60]	; (402ec8 <config_ADC_AUDIO+0xb8>)
  402e8a:	4798      	blx	r3

	/* Selecina canal e inicializa convers�o */  
	afec_channel_enable(AFEC0, AFEC_CHANNEL_PIN);
  402e8c:	2100      	movs	r1, #0
  402e8e:	4803      	ldr	r0, [pc, #12]	; (402e9c <config_ADC_AUDIO+0x8c>)
  402e90:	4b0e      	ldr	r3, [pc, #56]	; (402ecc <config_ADC_AUDIO+0xbc>)
  402e92:	4798      	blx	r3
}
  402e94:	bf00      	nop
  402e96:	372c      	adds	r7, #44	; 0x2c
  402e98:	46bd      	mov	sp, r7
  402e9a:	bd90      	pop	{r4, r7, pc}
  402e9c:	4003c000 	.word	0x4003c000
  402ea0:	00404345 	.word	0x00404345
  402ea4:	00403fd5 	.word	0x00403fd5
  402ea8:	00404085 	.word	0x00404085
  402eac:	004024c5 	.word	0x004024c5
  402eb0:	00402cc9 	.word	0x00402cc9
  402eb4:	0040411d 	.word	0x0040411d
  402eb8:	00404035 	.word	0x00404035
  402ebc:	00403ef9 	.word	0x00403ef9
  402ec0:	00402581 	.word	0x00402581
  402ec4:	00404055 	.word	0x00404055
  402ec8:	00403f8d 	.word	0x00403f8d
  402ecc:	00402509 	.word	0x00402509

00402ed0 <config_DAC>:

static void config_DAC(void){
  402ed0:	b580      	push	{r7, lr}
  402ed2:	af00      	add	r7, sp, #0
	/* Enable clock for DACC */
	sysclk_enable_peripheral_clock(DACC_ID);
  402ed4:	201e      	movs	r0, #30
  402ed6:	4b05      	ldr	r3, [pc, #20]	; (402eec <config_DAC+0x1c>)
  402ed8:	4798      	blx	r3

	/* Reset DACC registers */
	dacc_reset(DACC_BASE);
  402eda:	4805      	ldr	r0, [pc, #20]	; (402ef0 <config_DAC+0x20>)
  402edc:	4b05      	ldr	r3, [pc, #20]	; (402ef4 <config_DAC+0x24>)
  402ede:	4798      	blx	r3
	dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  402ee0:	2100      	movs	r1, #0
  402ee2:	4803      	ldr	r0, [pc, #12]	; (402ef0 <config_DAC+0x20>)
  402ee4:	4b04      	ldr	r3, [pc, #16]	; (402ef8 <config_DAC+0x28>)
  402ee6:	4798      	blx	r3
}
  402ee8:	bf00      	nop
  402eea:	bd80      	pop	{r7, pc}
  402eec:	00402675 	.word	0x00402675
  402ef0:	40040000 	.word	0x40040000
  402ef4:	004001ad 	.word	0x004001ad
  402ef8:	00400205 	.word	0x00400205

00402efc <TC_init>:

/**
* Configura TimerCounter (TC) para gerar uma interrupcao no canal (ID_TC e TC_CHANNEL)
* na taxa de especificada em freq.
*/
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  402efc:	b590      	push	{r4, r7, lr}
  402efe:	b08b      	sub	sp, #44	; 0x2c
  402f00:	af02      	add	r7, sp, #8
  402f02:	60f8      	str	r0, [r7, #12]
  402f04:	60b9      	str	r1, [r7, #8]
  402f06:	607a      	str	r2, [r7, #4]
  402f08:	603b      	str	r3, [r7, #0]
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();
  402f0a:	4b1f      	ldr	r3, [pc, #124]	; (402f88 <TC_init+0x8c>)
  402f0c:	4798      	blx	r3
  402f0e:	61f8      	str	r0, [r7, #28]

	pmc_enable_periph_clk(ID_TC);
  402f10:	68bb      	ldr	r3, [r7, #8]
  402f12:	4618      	mov	r0, r3
  402f14:	4b1d      	ldr	r3, [pc, #116]	; (402f8c <TC_init+0x90>)
  402f16:	4798      	blx	r3

	/** Configura o TC para operar em  4Mhz e interrup�c�o no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  402f18:	6838      	ldr	r0, [r7, #0]
  402f1a:	f107 0114 	add.w	r1, r7, #20
  402f1e:	f107 0218 	add.w	r2, r7, #24
  402f22:	69fb      	ldr	r3, [r7, #28]
  402f24:	9300      	str	r3, [sp, #0]
  402f26:	460b      	mov	r3, r1
  402f28:	69f9      	ldr	r1, [r7, #28]
  402f2a:	4c19      	ldr	r4, [pc, #100]	; (402f90 <TC_init+0x94>)
  402f2c:	47a0      	blx	r4
	
	//PMC->PMC_SCER = 1 << 14;
	ul_tcclks = 1;
  402f2e:	2301      	movs	r3, #1
  402f30:	617b      	str	r3, [r7, #20]
	
	tc_init(TC, TC_CHANNEL, ul_tcclks 
  402f32:	6879      	ldr	r1, [r7, #4]
  402f34:	697b      	ldr	r3, [r7, #20]
  402f36:	f443 231c 	orr.w	r3, r3, #638976	; 0x9c000
  402f3a:	461a      	mov	r2, r3
  402f3c:	68f8      	ldr	r0, [r7, #12]
  402f3e:	4b15      	ldr	r3, [pc, #84]	; (402f94 <TC_init+0x98>)
  402f40:	4798      	blx	r3
							| TC_CMR_ACPA_SET /* RA Compare Effect: set */
							| TC_CMR_ACPC_CLEAR /* RC Compare Effect: clear */
							| TC_CMR_CPCTRG /* UP mode with automatic trigger on RC Compare */
	);
	
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq /8 );
  402f42:	6879      	ldr	r1, [r7, #4]
  402f44:	69bb      	ldr	r3, [r7, #24]
  402f46:	69fa      	ldr	r2, [r7, #28]
  402f48:	fbb2 f2f3 	udiv	r2, r2, r3
  402f4c:	683b      	ldr	r3, [r7, #0]
  402f4e:	fbb2 f3f3 	udiv	r3, r2, r3
  402f52:	08db      	lsrs	r3, r3, #3
  402f54:	461a      	mov	r2, r3
  402f56:	68f8      	ldr	r0, [r7, #12]
  402f58:	4b0f      	ldr	r3, [pc, #60]	; (402f98 <TC_init+0x9c>)
  402f5a:	4798      	blx	r3
	tc_write_ra(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq / 8 / 2);
  402f5c:	6879      	ldr	r1, [r7, #4]
  402f5e:	69bb      	ldr	r3, [r7, #24]
  402f60:	69fa      	ldr	r2, [r7, #28]
  402f62:	fbb2 f2f3 	udiv	r2, r2, r3
  402f66:	683b      	ldr	r3, [r7, #0]
  402f68:	fbb2 f3f3 	udiv	r3, r2, r3
  402f6c:	091b      	lsrs	r3, r3, #4
  402f6e:	461a      	mov	r2, r3
  402f70:	68f8      	ldr	r0, [r7, #12]
  402f72:	4b0a      	ldr	r3, [pc, #40]	; (402f9c <TC_init+0xa0>)
  402f74:	4798      	blx	r3

	tc_start(TC, TC_CHANNEL);
  402f76:	687b      	ldr	r3, [r7, #4]
  402f78:	4619      	mov	r1, r3
  402f7a:	68f8      	ldr	r0, [r7, #12]
  402f7c:	4b08      	ldr	r3, [pc, #32]	; (402fa0 <TC_init+0xa4>)
  402f7e:	4798      	blx	r3
}
  402f80:	bf00      	nop
  402f82:	3724      	adds	r7, #36	; 0x24
  402f84:	46bd      	mov	sp, r7
  402f86:	bd90      	pop	{r4, r7, pc}
  402f88:	0040264d 	.word	0x0040264d
  402f8c:	00404795 	.word	0x00404795
  402f90:	00403139 	.word	0x00403139
  402f94:	0040306d 	.word	0x0040306d
  402f98:	004030ef 	.word	0x004030ef
  402f9c:	004030c9 	.word	0x004030c9
  402fa0:	004030a7 	.word	0x004030a7

00402fa4 <task_adc_to_dac>:
// 	pmc_enable_periph_clk(BUT_PIO_ID);
// 	pio_set_input(BUT_PIO, BUT_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
// 
// };

void task_adc_to_dac(void) {
  402fa4:	b598      	push	{r3, r4, r7, lr}
  402fa6:	af00      	add	r7, sp, #0
	
	config_ADC_AUDIO();
  402fa8:	4b0a      	ldr	r3, [pc, #40]	; (402fd4 <task_adc_to_dac+0x30>)
  402faa:	4798      	blx	r3
	
	TC_init(TC0, ID_TC0, 0, 22000);
  402fac:	f245 53f0 	movw	r3, #22000	; 0x55f0
  402fb0:	2200      	movs	r2, #0
  402fb2:	2117      	movs	r1, #23
  402fb4:	4808      	ldr	r0, [pc, #32]	; (402fd8 <task_adc_to_dac+0x34>)
  402fb6:	4c09      	ldr	r4, [pc, #36]	; (402fdc <task_adc_to_dac+0x38>)
  402fb8:	47a0      	blx	r4

	config_DAC();
  402fba:	4b09      	ldr	r3, [pc, #36]	; (402fe0 <task_adc_to_dac+0x3c>)
  402fbc:	4798      	blx	r3
	
	saturation_value = 0;
  402fbe:	4b09      	ldr	r3, [pc, #36]	; (402fe4 <task_adc_to_dac+0x40>)
  402fc0:	2200      	movs	r2, #0
  402fc2:	601a      	str	r2, [r3, #0]
	gain_value = 50;
  402fc4:	4b08      	ldr	r3, [pc, #32]	; (402fe8 <task_adc_to_dac+0x44>)
  402fc6:	2232      	movs	r2, #50	; 0x32
  402fc8:	601a      	str	r2, [r3, #0]
	lowpass_value = 10000;
  402fca:	4b08      	ldr	r3, [pc, #32]	; (402fec <task_adc_to_dac+0x48>)
  402fcc:	f242 7210 	movw	r2, #10000	; 0x2710
  402fd0:	601a      	str	r2, [r3, #0]
	
	while(1) {
  402fd2:	e7fe      	b.n	402fd2 <task_adc_to_dac+0x2e>
  402fd4:	00402e11 	.word	0x00402e11
  402fd8:	4000c000 	.word	0x4000c000
  402fdc:	00402efd 	.word	0x00402efd
  402fe0:	00402ed1 	.word	0x00402ed1
  402fe4:	20400024 	.word	0x20400024
  402fe8:	20400028 	.word	0x20400028
  402fec:	2040002c 	.word	0x2040002c

00402ff0 <main>:

/************************************************************************/
/* Main                                                                 */
/************************************************************************/
int main(void)
{
  402ff0:	b590      	push	{r4, r7, lr}
  402ff2:	b085      	sub	sp, #20
  402ff4:	af04      	add	r7, sp, #16

	/* Initialize the SAM system. */
	sysclk_init();
  402ff6:	4b11      	ldr	r3, [pc, #68]	; (40303c <main+0x4c>)
  402ff8:	4798      	blx	r3
	ioport_init();
  402ffa:	4b11      	ldr	r3, [pc, #68]	; (403040 <main+0x50>)
  402ffc:	4798      	blx	r3
	board_init();
  402ffe:	4b11      	ldr	r3, [pc, #68]	; (403044 <main+0x54>)
  403000:	4798      	blx	r3
  
	/* inicializa delay */
	delay_init(sysclk_get_cpu_hz());

	/* inicializa console (printf) */
	configure_console();
  403002:	4b11      	ldr	r3, [pc, #68]	; (403048 <main+0x58>)
  403004:	4798      	blx	r3
  
	/* Output example information. */
	puts(STRING_HEADER);
  403006:	4811      	ldr	r0, [pc, #68]	; (40304c <main+0x5c>)
  403008:	4b11      	ldr	r3, [pc, #68]	; (403050 <main+0x60>)
  40300a:	4798      	blx	r3
	
	/*BUT_init();*/
	
	if (xTaskCreate(task_adc_to_dac, "AudioTask", TASK_TRIGGER_STACK_SIZE, NULL,
  40300c:	2300      	movs	r3, #0
  40300e:	9303      	str	r3, [sp, #12]
  403010:	2300      	movs	r3, #0
  403012:	9302      	str	r3, [sp, #8]
  403014:	2300      	movs	r3, #0
  403016:	9301      	str	r3, [sp, #4]
  403018:	2300      	movs	r3, #0
  40301a:	9300      	str	r3, [sp, #0]
  40301c:	2300      	movs	r3, #0
  40301e:	f44f 7280 	mov.w	r2, #256	; 0x100
  403022:	490c      	ldr	r1, [pc, #48]	; (403054 <main+0x64>)
  403024:	480c      	ldr	r0, [pc, #48]	; (403058 <main+0x68>)
  403026:	4c0d      	ldr	r4, [pc, #52]	; (40305c <main+0x6c>)
  403028:	47a0      	blx	r4
  40302a:	4603      	mov	r3, r0
  40302c:	2b01      	cmp	r3, #1
  40302e:	d002      	beq.n	403036 <main+0x46>
	TASK_TRIGGER_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  403030:	480b      	ldr	r0, [pc, #44]	; (403060 <main+0x70>)
  403032:	4b0c      	ldr	r3, [pc, #48]	; (403064 <main+0x74>)
  403034:	4798      	blx	r3
	}
	
	vTaskStartScheduler();
  403036:	4b0c      	ldr	r3, [pc, #48]	; (403068 <main+0x78>)
  403038:	4798      	blx	r3

	while (1) {
  40303a:	e7fe      	b.n	40303a <main+0x4a>
  40303c:	004034e1 	.word	0x004034e1
  403040:	00402691 	.word	0x00402691
  403044:	00403ab1 	.word	0x00403ab1
  403048:	00402dd9 	.word	0x00402dd9
  40304c:	00408850 	.word	0x00408850
  403050:	00405a3d 	.word	0x00405a3d
  403054:	004088b0 	.word	0x004088b0
  403058:	00402fa5 	.word	0x00402fa5
  40305c:	00401109 	.word	0x00401109
  403060:	004088bc 	.word	0x004088bc
  403064:	004057a9 	.word	0x004057a9
  403068:	004012b1 	.word	0x004012b1

0040306c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  40306c:	b480      	push	{r7}
  40306e:	b087      	sub	sp, #28
  403070:	af00      	add	r7, sp, #0
  403072:	60f8      	str	r0, [r7, #12]
  403074:	60b9      	str	r1, [r7, #8]
  403076:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  403078:	68fa      	ldr	r2, [r7, #12]
  40307a:	68bb      	ldr	r3, [r7, #8]
  40307c:	019b      	lsls	r3, r3, #6
  40307e:	4413      	add	r3, r2
  403080:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  403082:	697b      	ldr	r3, [r7, #20]
  403084:	2202      	movs	r2, #2
  403086:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  403088:	697b      	ldr	r3, [r7, #20]
  40308a:	f04f 32ff 	mov.w	r2, #4294967295
  40308e:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  403090:	697b      	ldr	r3, [r7, #20]
  403092:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  403094:	697b      	ldr	r3, [r7, #20]
  403096:	687a      	ldr	r2, [r7, #4]
  403098:	605a      	str	r2, [r3, #4]
}
  40309a:	bf00      	nop
  40309c:	371c      	adds	r7, #28
  40309e:	46bd      	mov	sp, r7
  4030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030a4:	4770      	bx	lr

004030a6 <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4030a6:	b480      	push	{r7}
  4030a8:	b083      	sub	sp, #12
  4030aa:	af00      	add	r7, sp, #0
  4030ac:	6078      	str	r0, [r7, #4]
  4030ae:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4030b0:	687a      	ldr	r2, [r7, #4]
  4030b2:	683b      	ldr	r3, [r7, #0]
  4030b4:	019b      	lsls	r3, r3, #6
  4030b6:	4413      	add	r3, r2
  4030b8:	2205      	movs	r2, #5
  4030ba:	601a      	str	r2, [r3, #0]
}
  4030bc:	bf00      	nop
  4030be:	370c      	adds	r7, #12
  4030c0:	46bd      	mov	sp, r7
  4030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030c6:	4770      	bx	lr

004030c8 <tc_write_ra>:
 */
void tc_write_ra(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  4030c8:	b480      	push	{r7}
  4030ca:	b085      	sub	sp, #20
  4030cc:	af00      	add	r7, sp, #0
  4030ce:	60f8      	str	r0, [r7, #12]
  4030d0:	60b9      	str	r1, [r7, #8]
  4030d2:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  4030d4:	68fa      	ldr	r2, [r7, #12]
  4030d6:	68bb      	ldr	r3, [r7, #8]
  4030d8:	019b      	lsls	r3, r3, #6
  4030da:	4413      	add	r3, r2
  4030dc:	3314      	adds	r3, #20
  4030de:	687a      	ldr	r2, [r7, #4]
  4030e0:	601a      	str	r2, [r3, #0]
}
  4030e2:	bf00      	nop
  4030e4:	3714      	adds	r7, #20
  4030e6:	46bd      	mov	sp, r7
  4030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030ec:	4770      	bx	lr

004030ee <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  4030ee:	b480      	push	{r7}
  4030f0:	b085      	sub	sp, #20
  4030f2:	af00      	add	r7, sp, #0
  4030f4:	60f8      	str	r0, [r7, #12]
  4030f6:	60b9      	str	r1, [r7, #8]
  4030f8:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4030fa:	68fa      	ldr	r2, [r7, #12]
  4030fc:	68bb      	ldr	r3, [r7, #8]
  4030fe:	019b      	lsls	r3, r3, #6
  403100:	4413      	add	r3, r2
  403102:	331c      	adds	r3, #28
  403104:	687a      	ldr	r2, [r7, #4]
  403106:	601a      	str	r2, [r3, #0]
}
  403108:	bf00      	nop
  40310a:	3714      	adds	r7, #20
  40310c:	46bd      	mov	sp, r7
  40310e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403112:	4770      	bx	lr

00403114 <tc_get_status>:
 * \return The current TC status.
 */
uint32_t tc_get_status(
		Tc *p_tc,
		uint32_t ul_channel)
{
  403114:	b480      	push	{r7}
  403116:	b085      	sub	sp, #20
  403118:	af00      	add	r7, sp, #0
  40311a:	6078      	str	r0, [r7, #4]
  40311c:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40311e:	687a      	ldr	r2, [r7, #4]
  403120:	683b      	ldr	r3, [r7, #0]
  403122:	019b      	lsls	r3, r3, #6
  403124:	4413      	add	r3, r2
  403126:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
  403128:	68fb      	ldr	r3, [r7, #12]
  40312a:	6a1b      	ldr	r3, [r3, #32]
}
  40312c:	4618      	mov	r0, r3
  40312e:	3714      	adds	r7, #20
  403130:	46bd      	mov	sp, r7
  403132:	f85d 7b04 	ldr.w	r7, [sp], #4
  403136:	4770      	bx	lr

00403138 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  403138:	b480      	push	{r7}
  40313a:	b08d      	sub	sp, #52	; 0x34
  40313c:	af00      	add	r7, sp, #0
  40313e:	60f8      	str	r0, [r7, #12]
  403140:	60b9      	str	r1, [r7, #8]
  403142:	607a      	str	r2, [r7, #4]
  403144:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  403146:	2302      	movs	r3, #2
  403148:	613b      	str	r3, [r7, #16]
  40314a:	2308      	movs	r3, #8
  40314c:	617b      	str	r3, [r7, #20]
  40314e:	2320      	movs	r3, #32
  403150:	61bb      	str	r3, [r7, #24]
  403152:	2380      	movs	r3, #128	; 0x80
  403154:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  403156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  403158:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40315a:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  40315c:	2300      	movs	r3, #0
  40315e:	62fb      	str	r3, [r7, #44]	; 0x2c
  403160:	e01a      	b.n	403198 <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  403162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403164:	009b      	lsls	r3, r3, #2
  403166:	f107 0230 	add.w	r2, r7, #48	; 0x30
  40316a:	4413      	add	r3, r2
  40316c:	f853 3c20 	ldr.w	r3, [r3, #-32]
  403170:	68ba      	ldr	r2, [r7, #8]
  403172:	fbb2 f3f3 	udiv	r3, r2, r3
  403176:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  403178:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40317a:	0c1b      	lsrs	r3, r3, #16
  40317c:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  40317e:	68fa      	ldr	r2, [r7, #12]
  403180:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403182:	429a      	cmp	r2, r3
  403184:	d901      	bls.n	40318a <tc_find_mck_divisor+0x52>
			return 0;
  403186:	2300      	movs	r3, #0
  403188:	e023      	b.n	4031d2 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  40318a:	68fa      	ldr	r2, [r7, #12]
  40318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40318e:	429a      	cmp	r2, r3
  403190:	d206      	bcs.n	4031a0 <tc_find_mck_divisor+0x68>
			ul_index++) {
  403192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  403194:	3301      	adds	r3, #1
  403196:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  403198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40319a:	2b04      	cmp	r3, #4
  40319c:	d9e1      	bls.n	403162 <tc_find_mck_divisor+0x2a>
  40319e:	e000      	b.n	4031a2 <tc_find_mck_divisor+0x6a>
			break;
  4031a0:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  4031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4031a4:	2b04      	cmp	r3, #4
  4031a6:	d901      	bls.n	4031ac <tc_find_mck_divisor+0x74>
		return 0;
  4031a8:	2300      	movs	r3, #0
  4031aa:	e012      	b.n	4031d2 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  4031ac:	687b      	ldr	r3, [r7, #4]
  4031ae:	2b00      	cmp	r3, #0
  4031b0:	d008      	beq.n	4031c4 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  4031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4031b4:	009b      	lsls	r3, r3, #2
  4031b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
  4031ba:	4413      	add	r3, r2
  4031bc:	f853 2c20 	ldr.w	r2, [r3, #-32]
  4031c0:	687b      	ldr	r3, [r7, #4]
  4031c2:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  4031c4:	683b      	ldr	r3, [r7, #0]
  4031c6:	2b00      	cmp	r3, #0
  4031c8:	d002      	beq.n	4031d0 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  4031ca:	683b      	ldr	r3, [r7, #0]
  4031cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4031ce:	601a      	str	r2, [r3, #0]
	}

	return 1;
  4031d0:	2301      	movs	r3, #1
}
  4031d2:	4618      	mov	r0, r3
  4031d4:	3734      	adds	r7, #52	; 0x34
  4031d6:	46bd      	mov	sp, r7
  4031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031dc:	4770      	bx	lr
	...

004031e0 <osc_enable>:
{
  4031e0:	b580      	push	{r7, lr}
  4031e2:	b082      	sub	sp, #8
  4031e4:	af00      	add	r7, sp, #0
  4031e6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4031e8:	687b      	ldr	r3, [r7, #4]
  4031ea:	2b07      	cmp	r3, #7
  4031ec:	d831      	bhi.n	403252 <osc_enable+0x72>
  4031ee:	a201      	add	r2, pc, #4	; (adr r2, 4031f4 <osc_enable+0x14>)
  4031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4031f4:	00403251 	.word	0x00403251
  4031f8:	00403215 	.word	0x00403215
  4031fc:	0040321d 	.word	0x0040321d
  403200:	00403225 	.word	0x00403225
  403204:	0040322d 	.word	0x0040322d
  403208:	00403235 	.word	0x00403235
  40320c:	0040323d 	.word	0x0040323d
  403210:	00403247 	.word	0x00403247
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  403214:	2000      	movs	r0, #0
  403216:	4b11      	ldr	r3, [pc, #68]	; (40325c <osc_enable+0x7c>)
  403218:	4798      	blx	r3
		break;
  40321a:	e01a      	b.n	403252 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  40321c:	2001      	movs	r0, #1
  40321e:	4b0f      	ldr	r3, [pc, #60]	; (40325c <osc_enable+0x7c>)
  403220:	4798      	blx	r3
		break;
  403222:	e016      	b.n	403252 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  403224:	2000      	movs	r0, #0
  403226:	4b0e      	ldr	r3, [pc, #56]	; (403260 <osc_enable+0x80>)
  403228:	4798      	blx	r3
		break;
  40322a:	e012      	b.n	403252 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40322c:	2010      	movs	r0, #16
  40322e:	4b0c      	ldr	r3, [pc, #48]	; (403260 <osc_enable+0x80>)
  403230:	4798      	blx	r3
		break;
  403232:	e00e      	b.n	403252 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  403234:	2020      	movs	r0, #32
  403236:	4b0a      	ldr	r3, [pc, #40]	; (403260 <osc_enable+0x80>)
  403238:	4798      	blx	r3
		break;
  40323a:	e00a      	b.n	403252 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40323c:	213e      	movs	r1, #62	; 0x3e
  40323e:	2000      	movs	r0, #0
  403240:	4b08      	ldr	r3, [pc, #32]	; (403264 <osc_enable+0x84>)
  403242:	4798      	blx	r3
		break;
  403244:	e005      	b.n	403252 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  403246:	213e      	movs	r1, #62	; 0x3e
  403248:	2001      	movs	r0, #1
  40324a:	4b06      	ldr	r3, [pc, #24]	; (403264 <osc_enable+0x84>)
  40324c:	4798      	blx	r3
		break;
  40324e:	e000      	b.n	403252 <osc_enable+0x72>
		break;
  403250:	bf00      	nop
}
  403252:	bf00      	nop
  403254:	3708      	adds	r7, #8
  403256:	46bd      	mov	sp, r7
  403258:	bd80      	pop	{r7, pc}
  40325a:	bf00      	nop
  40325c:	004045d1 	.word	0x004045d1
  403260:	0040463d 	.word	0x0040463d
  403264:	004046ad 	.word	0x004046ad

00403268 <osc_is_ready>:
{
  403268:	b580      	push	{r7, lr}
  40326a:	b082      	sub	sp, #8
  40326c:	af00      	add	r7, sp, #0
  40326e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403270:	687b      	ldr	r3, [r7, #4]
  403272:	2b07      	cmp	r3, #7
  403274:	d826      	bhi.n	4032c4 <osc_is_ready+0x5c>
  403276:	a201      	add	r2, pc, #4	; (adr r2, 40327c <osc_is_ready+0x14>)
  403278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40327c:	0040329d 	.word	0x0040329d
  403280:	004032a1 	.word	0x004032a1
  403284:	004032a1 	.word	0x004032a1
  403288:	004032b3 	.word	0x004032b3
  40328c:	004032b3 	.word	0x004032b3
  403290:	004032b3 	.word	0x004032b3
  403294:	004032b3 	.word	0x004032b3
  403298:	004032b3 	.word	0x004032b3
		return 1;
  40329c:	2301      	movs	r3, #1
  40329e:	e012      	b.n	4032c6 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  4032a0:	4b0b      	ldr	r3, [pc, #44]	; (4032d0 <osc_is_ready+0x68>)
  4032a2:	4798      	blx	r3
  4032a4:	4603      	mov	r3, r0
  4032a6:	2b00      	cmp	r3, #0
  4032a8:	bf14      	ite	ne
  4032aa:	2301      	movne	r3, #1
  4032ac:	2300      	moveq	r3, #0
  4032ae:	b2db      	uxtb	r3, r3
  4032b0:	e009      	b.n	4032c6 <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  4032b2:	4b08      	ldr	r3, [pc, #32]	; (4032d4 <osc_is_ready+0x6c>)
  4032b4:	4798      	blx	r3
  4032b6:	4603      	mov	r3, r0
  4032b8:	2b00      	cmp	r3, #0
  4032ba:	bf14      	ite	ne
  4032bc:	2301      	movne	r3, #1
  4032be:	2300      	moveq	r3, #0
  4032c0:	b2db      	uxtb	r3, r3
  4032c2:	e000      	b.n	4032c6 <osc_is_ready+0x5e>
	return 0;
  4032c4:	2300      	movs	r3, #0
}
  4032c6:	4618      	mov	r0, r3
  4032c8:	3708      	adds	r7, #8
  4032ca:	46bd      	mov	sp, r7
  4032cc:	bd80      	pop	{r7, pc}
  4032ce:	bf00      	nop
  4032d0:	00404609 	.word	0x00404609
  4032d4:	00404725 	.word	0x00404725

004032d8 <osc_get_rate>:
{
  4032d8:	b480      	push	{r7}
  4032da:	b083      	sub	sp, #12
  4032dc:	af00      	add	r7, sp, #0
  4032de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4032e0:	687b      	ldr	r3, [r7, #4]
  4032e2:	2b07      	cmp	r3, #7
  4032e4:	d825      	bhi.n	403332 <osc_get_rate+0x5a>
  4032e6:	a201      	add	r2, pc, #4	; (adr r2, 4032ec <osc_get_rate+0x14>)
  4032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4032ec:	0040330d 	.word	0x0040330d
  4032f0:	00403313 	.word	0x00403313
  4032f4:	00403319 	.word	0x00403319
  4032f8:	0040331f 	.word	0x0040331f
  4032fc:	00403323 	.word	0x00403323
  403300:	00403327 	.word	0x00403327
  403304:	0040332b 	.word	0x0040332b
  403308:	0040332f 	.word	0x0040332f
		return OSC_SLCK_32K_RC_HZ;
  40330c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403310:	e010      	b.n	403334 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  403312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403316:	e00d      	b.n	403334 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  403318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40331c:	e00a      	b.n	403334 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40331e:	4b08      	ldr	r3, [pc, #32]	; (403340 <osc_get_rate+0x68>)
  403320:	e008      	b.n	403334 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  403322:	4b08      	ldr	r3, [pc, #32]	; (403344 <osc_get_rate+0x6c>)
  403324:	e006      	b.n	403334 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  403326:	4b08      	ldr	r3, [pc, #32]	; (403348 <osc_get_rate+0x70>)
  403328:	e004      	b.n	403334 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40332a:	4b07      	ldr	r3, [pc, #28]	; (403348 <osc_get_rate+0x70>)
  40332c:	e002      	b.n	403334 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40332e:	4b06      	ldr	r3, [pc, #24]	; (403348 <osc_get_rate+0x70>)
  403330:	e000      	b.n	403334 <osc_get_rate+0x5c>
	return 0;
  403332:	2300      	movs	r3, #0
}
  403334:	4618      	mov	r0, r3
  403336:	370c      	adds	r7, #12
  403338:	46bd      	mov	sp, r7
  40333a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40333e:	4770      	bx	lr
  403340:	003d0900 	.word	0x003d0900
  403344:	007a1200 	.word	0x007a1200
  403348:	00b71b00 	.word	0x00b71b00

0040334c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  40334c:	b580      	push	{r7, lr}
  40334e:	b082      	sub	sp, #8
  403350:	af00      	add	r7, sp, #0
  403352:	4603      	mov	r3, r0
  403354:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  403356:	bf00      	nop
  403358:	79fb      	ldrb	r3, [r7, #7]
  40335a:	4618      	mov	r0, r3
  40335c:	4b05      	ldr	r3, [pc, #20]	; (403374 <osc_wait_ready+0x28>)
  40335e:	4798      	blx	r3
  403360:	4603      	mov	r3, r0
  403362:	f083 0301 	eor.w	r3, r3, #1
  403366:	b2db      	uxtb	r3, r3
  403368:	2b00      	cmp	r3, #0
  40336a:	d1f5      	bne.n	403358 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  40336c:	bf00      	nop
  40336e:	3708      	adds	r7, #8
  403370:	46bd      	mov	sp, r7
  403372:	bd80      	pop	{r7, pc}
  403374:	00403269 	.word	0x00403269

00403378 <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  403378:	b580      	push	{r7, lr}
  40337a:	b086      	sub	sp, #24
  40337c:	af00      	add	r7, sp, #0
  40337e:	60f8      	str	r0, [r7, #12]
  403380:	607a      	str	r2, [r7, #4]
  403382:	603b      	str	r3, [r7, #0]
  403384:	460b      	mov	r3, r1
  403386:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  403388:	687b      	ldr	r3, [r7, #4]
  40338a:	2b00      	cmp	r3, #0
  40338c:	d107      	bne.n	40339e <pll_config_init+0x26>
  40338e:	683b      	ldr	r3, [r7, #0]
  403390:	2b00      	cmp	r3, #0
  403392:	d104      	bne.n	40339e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  403394:	68fb      	ldr	r3, [r7, #12]
  403396:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  40339a:	601a      	str	r2, [r3, #0]
  40339c:	e019      	b.n	4033d2 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40339e:	7afb      	ldrb	r3, [r7, #11]
  4033a0:	4618      	mov	r0, r3
  4033a2:	4b0e      	ldr	r3, [pc, #56]	; (4033dc <pll_config_init+0x64>)
  4033a4:	4798      	blx	r3
  4033a6:	4602      	mov	r2, r0
  4033a8:	687b      	ldr	r3, [r7, #4]
  4033aa:	fbb2 f3f3 	udiv	r3, r2, r3
  4033ae:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4033b0:	697b      	ldr	r3, [r7, #20]
  4033b2:	683a      	ldr	r2, [r7, #0]
  4033b4:	fb02 f303 	mul.w	r3, r2, r3
  4033b8:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4033ba:	683b      	ldr	r3, [r7, #0]
  4033bc:	3b01      	subs	r3, #1
  4033be:	041a      	lsls	r2, r3, #16
  4033c0:	4b07      	ldr	r3, [pc, #28]	; (4033e0 <pll_config_init+0x68>)
  4033c2:	4013      	ands	r3, r2
  4033c4:	687a      	ldr	r2, [r7, #4]
  4033c6:	b2d2      	uxtb	r2, r2
  4033c8:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4033ca:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4033ce:	68fb      	ldr	r3, [r7, #12]
  4033d0:	601a      	str	r2, [r3, #0]
	}
}
  4033d2:	bf00      	nop
  4033d4:	3718      	adds	r7, #24
  4033d6:	46bd      	mov	sp, r7
  4033d8:	bd80      	pop	{r7, pc}
  4033da:	bf00      	nop
  4033dc:	004032d9 	.word	0x004032d9
  4033e0:	07ff0000 	.word	0x07ff0000

004033e4 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4033e4:	b580      	push	{r7, lr}
  4033e6:	b082      	sub	sp, #8
  4033e8:	af00      	add	r7, sp, #0
  4033ea:	6078      	str	r0, [r7, #4]
  4033ec:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4033ee:	683b      	ldr	r3, [r7, #0]
  4033f0:	2b00      	cmp	r3, #0
  4033f2:	d108      	bne.n	403406 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4033f4:	4b09      	ldr	r3, [pc, #36]	; (40341c <pll_enable+0x38>)
  4033f6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4033f8:	4a09      	ldr	r2, [pc, #36]	; (403420 <pll_enable+0x3c>)
  4033fa:	687b      	ldr	r3, [r7, #4]
  4033fc:	681b      	ldr	r3, [r3, #0]
  4033fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  403402:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  403404:	e005      	b.n	403412 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  403406:	4a06      	ldr	r2, [pc, #24]	; (403420 <pll_enable+0x3c>)
  403408:	687b      	ldr	r3, [r7, #4]
  40340a:	681b      	ldr	r3, [r3, #0]
  40340c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  403410:	61d3      	str	r3, [r2, #28]
}
  403412:	bf00      	nop
  403414:	3708      	adds	r7, #8
  403416:	46bd      	mov	sp, r7
  403418:	bd80      	pop	{r7, pc}
  40341a:	bf00      	nop
  40341c:	00404741 	.word	0x00404741
  403420:	400e0600 	.word	0x400e0600

00403424 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  403424:	b580      	push	{r7, lr}
  403426:	b082      	sub	sp, #8
  403428:	af00      	add	r7, sp, #0
  40342a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40342c:	687b      	ldr	r3, [r7, #4]
  40342e:	2b00      	cmp	r3, #0
  403430:	d103      	bne.n	40343a <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  403432:	4b05      	ldr	r3, [pc, #20]	; (403448 <pll_is_locked+0x24>)
  403434:	4798      	blx	r3
  403436:	4603      	mov	r3, r0
  403438:	e002      	b.n	403440 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  40343a:	4b04      	ldr	r3, [pc, #16]	; (40344c <pll_is_locked+0x28>)
  40343c:	4798      	blx	r3
  40343e:	4603      	mov	r3, r0
	}
}
  403440:	4618      	mov	r0, r3
  403442:	3708      	adds	r7, #8
  403444:	46bd      	mov	sp, r7
  403446:	bd80      	pop	{r7, pc}
  403448:	0040475d 	.word	0x0040475d
  40344c:	00404779 	.word	0x00404779

00403450 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  403450:	b580      	push	{r7, lr}
  403452:	b082      	sub	sp, #8
  403454:	af00      	add	r7, sp, #0
  403456:	4603      	mov	r3, r0
  403458:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40345a:	79fb      	ldrb	r3, [r7, #7]
  40345c:	3b03      	subs	r3, #3
  40345e:	2b04      	cmp	r3, #4
  403460:	d808      	bhi.n	403474 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  403462:	79fb      	ldrb	r3, [r7, #7]
  403464:	4618      	mov	r0, r3
  403466:	4b06      	ldr	r3, [pc, #24]	; (403480 <pll_enable_source+0x30>)
  403468:	4798      	blx	r3
		osc_wait_ready(e_src);
  40346a:	79fb      	ldrb	r3, [r7, #7]
  40346c:	4618      	mov	r0, r3
  40346e:	4b05      	ldr	r3, [pc, #20]	; (403484 <pll_enable_source+0x34>)
  403470:	4798      	blx	r3
		break;
  403472:	e000      	b.n	403476 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  403474:	bf00      	nop
	}
}
  403476:	bf00      	nop
  403478:	3708      	adds	r7, #8
  40347a:	46bd      	mov	sp, r7
  40347c:	bd80      	pop	{r7, pc}
  40347e:	bf00      	nop
  403480:	004031e1 	.word	0x004031e1
  403484:	0040334d 	.word	0x0040334d

00403488 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  403488:	b580      	push	{r7, lr}
  40348a:	b082      	sub	sp, #8
  40348c:	af00      	add	r7, sp, #0
  40348e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403490:	bf00      	nop
  403492:	6878      	ldr	r0, [r7, #4]
  403494:	4b04      	ldr	r3, [pc, #16]	; (4034a8 <pll_wait_for_lock+0x20>)
  403496:	4798      	blx	r3
  403498:	4603      	mov	r3, r0
  40349a:	2b00      	cmp	r3, #0
  40349c:	d0f9      	beq.n	403492 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40349e:	2300      	movs	r3, #0
}
  4034a0:	4618      	mov	r0, r3
  4034a2:	3708      	adds	r7, #8
  4034a4:	46bd      	mov	sp, r7
  4034a6:	bd80      	pop	{r7, pc}
  4034a8:	00403425 	.word	0x00403425

004034ac <sysclk_get_main_hz>:
{
  4034ac:	b580      	push	{r7, lr}
  4034ae:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4034b0:	2006      	movs	r0, #6
  4034b2:	4b05      	ldr	r3, [pc, #20]	; (4034c8 <sysclk_get_main_hz+0x1c>)
  4034b4:	4798      	blx	r3
  4034b6:	4602      	mov	r2, r0
  4034b8:	4613      	mov	r3, r2
  4034ba:	009b      	lsls	r3, r3, #2
  4034bc:	4413      	add	r3, r2
  4034be:	009a      	lsls	r2, r3, #2
  4034c0:	4413      	add	r3, r2
}
  4034c2:	4618      	mov	r0, r3
  4034c4:	bd80      	pop	{r7, pc}
  4034c6:	bf00      	nop
  4034c8:	004032d9 	.word	0x004032d9

004034cc <sysclk_get_cpu_hz>:
{
  4034cc:	b580      	push	{r7, lr}
  4034ce:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4034d0:	4b02      	ldr	r3, [pc, #8]	; (4034dc <sysclk_get_cpu_hz+0x10>)
  4034d2:	4798      	blx	r3
  4034d4:	4603      	mov	r3, r0
}
  4034d6:	4618      	mov	r0, r3
  4034d8:	bd80      	pop	{r7, pc}
  4034da:	bf00      	nop
  4034dc:	004034ad 	.word	0x004034ad

004034e0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4034e0:	b590      	push	{r4, r7, lr}
  4034e2:	b083      	sub	sp, #12
  4034e4:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4034e6:	4813      	ldr	r0, [pc, #76]	; (403534 <sysclk_init+0x54>)
  4034e8:	4b13      	ldr	r3, [pc, #76]	; (403538 <sysclk_init+0x58>)
  4034ea:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4034ec:	2006      	movs	r0, #6
  4034ee:	4b13      	ldr	r3, [pc, #76]	; (40353c <sysclk_init+0x5c>)
  4034f0:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4034f2:	1d38      	adds	r0, r7, #4
  4034f4:	2319      	movs	r3, #25
  4034f6:	2201      	movs	r2, #1
  4034f8:	2106      	movs	r1, #6
  4034fa:	4c11      	ldr	r4, [pc, #68]	; (403540 <sysclk_init+0x60>)
  4034fc:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4034fe:	1d3b      	adds	r3, r7, #4
  403500:	2100      	movs	r1, #0
  403502:	4618      	mov	r0, r3
  403504:	4b0f      	ldr	r3, [pc, #60]	; (403544 <sysclk_init+0x64>)
  403506:	4798      	blx	r3
		pll_wait_for_lock(0);
  403508:	2000      	movs	r0, #0
  40350a:	4b0f      	ldr	r3, [pc, #60]	; (403548 <sysclk_init+0x68>)
  40350c:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40350e:	2002      	movs	r0, #2
  403510:	4b0e      	ldr	r3, [pc, #56]	; (40354c <sysclk_init+0x6c>)
  403512:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403514:	2000      	movs	r0, #0
  403516:	4b0e      	ldr	r3, [pc, #56]	; (403550 <sysclk_init+0x70>)
  403518:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40351a:	4b0e      	ldr	r3, [pc, #56]	; (403554 <sysclk_init+0x74>)
  40351c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40351e:	4b0e      	ldr	r3, [pc, #56]	; (403558 <sysclk_init+0x78>)
  403520:	4798      	blx	r3
  403522:	4603      	mov	r3, r0
  403524:	4618      	mov	r0, r3
  403526:	4b04      	ldr	r3, [pc, #16]	; (403538 <sysclk_init+0x58>)
  403528:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40352a:	bf00      	nop
  40352c:	370c      	adds	r7, #12
  40352e:	46bd      	mov	sp, r7
  403530:	bd90      	pop	{r4, r7, pc}
  403532:	bf00      	nop
  403534:	11e1a300 	.word	0x11e1a300
  403538:	00404e05 	.word	0x00404e05
  40353c:	00403451 	.word	0x00403451
  403540:	00403379 	.word	0x00403379
  403544:	004033e5 	.word	0x004033e5
  403548:	00403489 	.word	0x00403489
  40354c:	004044d1 	.word	0x004044d1
  403550:	0040454d 	.word	0x0040454d
  403554:	00404c9d 	.word	0x00404c9d
  403558:	004034cd 	.word	0x004034cd

0040355c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40355c:	b580      	push	{r7, lr}
  40355e:	b086      	sub	sp, #24
  403560:	af00      	add	r7, sp, #0
  403562:	60f8      	str	r0, [r7, #12]
  403564:	60b9      	str	r1, [r7, #8]
  403566:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  403568:	2300      	movs	r3, #0
  40356a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  40356c:	68fb      	ldr	r3, [r7, #12]
  40356e:	2b00      	cmp	r3, #0
  403570:	d012      	beq.n	403598 <_read+0x3c>
		return -1;
  403572:	f04f 33ff 	mov.w	r3, #4294967295
  403576:	e013      	b.n	4035a0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  403578:	4b0b      	ldr	r3, [pc, #44]	; (4035a8 <_read+0x4c>)
  40357a:	681b      	ldr	r3, [r3, #0]
  40357c:	4a0b      	ldr	r2, [pc, #44]	; (4035ac <_read+0x50>)
  40357e:	6812      	ldr	r2, [r2, #0]
  403580:	68b9      	ldr	r1, [r7, #8]
  403582:	4610      	mov	r0, r2
  403584:	4798      	blx	r3
		ptr++;
  403586:	68bb      	ldr	r3, [r7, #8]
  403588:	3301      	adds	r3, #1
  40358a:	60bb      	str	r3, [r7, #8]
		nChars++;
  40358c:	697b      	ldr	r3, [r7, #20]
  40358e:	3301      	adds	r3, #1
  403590:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  403592:	687b      	ldr	r3, [r7, #4]
  403594:	3b01      	subs	r3, #1
  403596:	607b      	str	r3, [r7, #4]
  403598:	687b      	ldr	r3, [r7, #4]
  40359a:	2b00      	cmp	r3, #0
  40359c:	dcec      	bgt.n	403578 <_read+0x1c>
	}
	return nChars;
  40359e:	697b      	ldr	r3, [r7, #20]
}
  4035a0:	4618      	mov	r0, r3
  4035a2:	3718      	adds	r7, #24
  4035a4:	46bd      	mov	sp, r7
  4035a6:	bd80      	pop	{r7, pc}
  4035a8:	204203d0 	.word	0x204203d0
  4035ac:	204203d8 	.word	0x204203d8

004035b0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4035b0:	b580      	push	{r7, lr}
  4035b2:	b086      	sub	sp, #24
  4035b4:	af00      	add	r7, sp, #0
  4035b6:	60f8      	str	r0, [r7, #12]
  4035b8:	60b9      	str	r1, [r7, #8]
  4035ba:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4035bc:	2300      	movs	r3, #0
  4035be:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  4035c0:	68fb      	ldr	r3, [r7, #12]
  4035c2:	2b01      	cmp	r3, #1
  4035c4:	d01e      	beq.n	403604 <_write+0x54>
  4035c6:	68fb      	ldr	r3, [r7, #12]
  4035c8:	2b02      	cmp	r3, #2
  4035ca:	d01b      	beq.n	403604 <_write+0x54>
  4035cc:	68fb      	ldr	r3, [r7, #12]
  4035ce:	2b03      	cmp	r3, #3
  4035d0:	d018      	beq.n	403604 <_write+0x54>
		return -1;
  4035d2:	f04f 33ff 	mov.w	r3, #4294967295
  4035d6:	e019      	b.n	40360c <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4035d8:	4b0e      	ldr	r3, [pc, #56]	; (403614 <_write+0x64>)
  4035da:	681a      	ldr	r2, [r3, #0]
  4035dc:	4b0e      	ldr	r3, [pc, #56]	; (403618 <_write+0x68>)
  4035de:	6818      	ldr	r0, [r3, #0]
  4035e0:	68bb      	ldr	r3, [r7, #8]
  4035e2:	1c59      	adds	r1, r3, #1
  4035e4:	60b9      	str	r1, [r7, #8]
  4035e6:	781b      	ldrb	r3, [r3, #0]
  4035e8:	4619      	mov	r1, r3
  4035ea:	4790      	blx	r2
  4035ec:	4603      	mov	r3, r0
  4035ee:	2b00      	cmp	r3, #0
  4035f0:	da02      	bge.n	4035f8 <_write+0x48>
			return -1;
  4035f2:	f04f 33ff 	mov.w	r3, #4294967295
  4035f6:	e009      	b.n	40360c <_write+0x5c>
		}
		++nChars;
  4035f8:	697b      	ldr	r3, [r7, #20]
  4035fa:	3301      	adds	r3, #1
  4035fc:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  4035fe:	687b      	ldr	r3, [r7, #4]
  403600:	3b01      	subs	r3, #1
  403602:	607b      	str	r3, [r7, #4]
  403604:	687b      	ldr	r3, [r7, #4]
  403606:	2b00      	cmp	r3, #0
  403608:	d1e6      	bne.n	4035d8 <_write+0x28>
	}
	return nChars;
  40360a:	697b      	ldr	r3, [r7, #20]
}
  40360c:	4618      	mov	r0, r3
  40360e:	3718      	adds	r7, #24
  403610:	46bd      	mov	sp, r7
  403612:	bd80      	pop	{r7, pc}
  403614:	204203d4 	.word	0x204203d4
  403618:	204203d8 	.word	0x204203d8

0040361c <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  40361c:	b480      	push	{r7}
  40361e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  403620:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403624:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  403628:	4b09      	ldr	r3, [pc, #36]	; (403650 <SCB_EnableICache+0x34>)
  40362a:	2200      	movs	r2, #0
  40362c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  403630:	4a07      	ldr	r2, [pc, #28]	; (403650 <SCB_EnableICache+0x34>)
  403632:	4b07      	ldr	r3, [pc, #28]	; (403650 <SCB_EnableICache+0x34>)
  403634:	695b      	ldr	r3, [r3, #20]
  403636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  40363a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  40363c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403640:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  403644:	bf00      	nop
  403646:	46bd      	mov	sp, r7
  403648:	f85d 7b04 	ldr.w	r7, [sp], #4
  40364c:	4770      	bx	lr
  40364e:	bf00      	nop
  403650:	e000ed00 	.word	0xe000ed00

00403654 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  403654:	b480      	push	{r7}
  403656:	b08b      	sub	sp, #44	; 0x2c
  403658:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40365a:	4b26      	ldr	r3, [pc, #152]	; (4036f4 <SCB_EnableDCache+0xa0>)
  40365c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  403660:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  403662:	69fb      	ldr	r3, [r7, #28]
  403664:	0b5b      	lsrs	r3, r3, #13
  403666:	f3c3 030e 	ubfx	r3, r3, #0, #15
  40366a:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40366c:	69fb      	ldr	r3, [r7, #28]
  40366e:	f003 0307 	and.w	r3, r3, #7
  403672:	3304      	adds	r3, #4
  403674:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  403676:	69fb      	ldr	r3, [r7, #28]
  403678:	08db      	lsrs	r3, r3, #3
  40367a:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40367e:	617b      	str	r3, [r7, #20]
  403680:	697b      	ldr	r3, [r7, #20]
  403682:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  403684:	68bb      	ldr	r3, [r7, #8]
  403686:	fab3 f383 	clz	r3, r3
  40368a:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  40368c:	687b      	ldr	r3, [r7, #4]
  40368e:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  403690:	f003 031f 	and.w	r3, r3, #31
  403694:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  403696:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  40369a:	697b      	ldr	r3, [r7, #20]
  40369c:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  40369e:	6a3a      	ldr	r2, [r7, #32]
  4036a0:	693b      	ldr	r3, [r7, #16]
  4036a2:	fa02 f303 	lsl.w	r3, r2, r3
  4036a6:	4619      	mov	r1, r3
  4036a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  4036aa:	69bb      	ldr	r3, [r7, #24]
  4036ac:	fa02 f303 	lsl.w	r3, r2, r3
  4036b0:	430b      	orrs	r3, r1
  4036b2:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  4036b4:	4a0f      	ldr	r2, [pc, #60]	; (4036f4 <SCB_EnableDCache+0xa0>)
  4036b6:	68fb      	ldr	r3, [r7, #12]
  4036b8:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  4036bc:	6a3b      	ldr	r3, [r7, #32]
  4036be:	1e5a      	subs	r2, r3, #1
  4036c0:	623a      	str	r2, [r7, #32]
  4036c2:	2b00      	cmp	r3, #0
  4036c4:	d1eb      	bne.n	40369e <SCB_EnableDCache+0x4a>
        } while(sets--);
  4036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4036c8:	1e5a      	subs	r2, r3, #1
  4036ca:	627a      	str	r2, [r7, #36]	; 0x24
  4036cc:	2b00      	cmp	r3, #0
  4036ce:	d1e4      	bne.n	40369a <SCB_EnableDCache+0x46>
  4036d0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4036d4:	4a07      	ldr	r2, [pc, #28]	; (4036f4 <SCB_EnableDCache+0xa0>)
  4036d6:	4b07      	ldr	r3, [pc, #28]	; (4036f4 <SCB_EnableDCache+0xa0>)
  4036d8:	695b      	ldr	r3, [r3, #20]
  4036da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4036de:	6153      	str	r3, [r2, #20]
  4036e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4036e4:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  4036e8:	bf00      	nop
  4036ea:	372c      	adds	r7, #44	; 0x2c
  4036ec:	46bd      	mov	sp, r7
  4036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4036f2:	4770      	bx	lr
  4036f4:	e000ed00 	.word	0xe000ed00

004036f8 <sysclk_enable_peripheral_clock>:
{
  4036f8:	b580      	push	{r7, lr}
  4036fa:	b082      	sub	sp, #8
  4036fc:	af00      	add	r7, sp, #0
  4036fe:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  403700:	6878      	ldr	r0, [r7, #4]
  403702:	4b03      	ldr	r3, [pc, #12]	; (403710 <sysclk_enable_peripheral_clock+0x18>)
  403704:	4798      	blx	r3
}
  403706:	bf00      	nop
  403708:	3708      	adds	r7, #8
  40370a:	46bd      	mov	sp, r7
  40370c:	bd80      	pop	{r7, pc}
  40370e:	bf00      	nop
  403710:	00404795 	.word	0x00404795

00403714 <ioport_init>:
{
  403714:	b580      	push	{r7, lr}
  403716:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  403718:	200a      	movs	r0, #10
  40371a:	4b08      	ldr	r3, [pc, #32]	; (40373c <ioport_init+0x28>)
  40371c:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  40371e:	200b      	movs	r0, #11
  403720:	4b06      	ldr	r3, [pc, #24]	; (40373c <ioport_init+0x28>)
  403722:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  403724:	200c      	movs	r0, #12
  403726:	4b05      	ldr	r3, [pc, #20]	; (40373c <ioport_init+0x28>)
  403728:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  40372a:	2010      	movs	r0, #16
  40372c:	4b03      	ldr	r3, [pc, #12]	; (40373c <ioport_init+0x28>)
  40372e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  403730:	2011      	movs	r0, #17
  403732:	4b02      	ldr	r3, [pc, #8]	; (40373c <ioport_init+0x28>)
  403734:	4798      	blx	r3
}
  403736:	bf00      	nop
  403738:	bd80      	pop	{r7, pc}
  40373a:	bf00      	nop
  40373c:	004036f9 	.word	0x004036f9

00403740 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  403740:	b480      	push	{r7}
  403742:	b089      	sub	sp, #36	; 0x24
  403744:	af00      	add	r7, sp, #0
  403746:	6078      	str	r0, [r7, #4]
  403748:	687b      	ldr	r3, [r7, #4]
  40374a:	61fb      	str	r3, [r7, #28]
  40374c:	69fb      	ldr	r3, [r7, #28]
  40374e:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  403750:	69bb      	ldr	r3, [r7, #24]
  403752:	095a      	lsrs	r2, r3, #5
  403754:	69fb      	ldr	r3, [r7, #28]
  403756:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  403758:	697b      	ldr	r3, [r7, #20]
  40375a:	f003 031f 	and.w	r3, r3, #31
  40375e:	2101      	movs	r1, #1
  403760:	fa01 f303 	lsl.w	r3, r1, r3
  403764:	613a      	str	r2, [r7, #16]
  403766:	60fb      	str	r3, [r7, #12]
  403768:	693b      	ldr	r3, [r7, #16]
  40376a:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40376c:	68ba      	ldr	r2, [r7, #8]
  40376e:	4b06      	ldr	r3, [pc, #24]	; (403788 <ioport_disable_pin+0x48>)
  403770:	4413      	add	r3, r2
  403772:	025b      	lsls	r3, r3, #9
  403774:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  403776:	68fb      	ldr	r3, [r7, #12]
  403778:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  40377a:	bf00      	nop
  40377c:	3724      	adds	r7, #36	; 0x24
  40377e:	46bd      	mov	sp, r7
  403780:	f85d 7b04 	ldr.w	r7, [sp], #4
  403784:	4770      	bx	lr
  403786:	bf00      	nop
  403788:	00200707 	.word	0x00200707

0040378c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  40378c:	b480      	push	{r7}
  40378e:	b08d      	sub	sp, #52	; 0x34
  403790:	af00      	add	r7, sp, #0
  403792:	6078      	str	r0, [r7, #4]
  403794:	6039      	str	r1, [r7, #0]
  403796:	687b      	ldr	r3, [r7, #4]
  403798:	62fb      	str	r3, [r7, #44]	; 0x2c
  40379a:	683b      	ldr	r3, [r7, #0]
  40379c:	62bb      	str	r3, [r7, #40]	; 0x28
  40379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4037a0:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4037a4:	095a      	lsrs	r2, r3, #5
  4037a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4037a8:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4037aa:	6a3b      	ldr	r3, [r7, #32]
  4037ac:	f003 031f 	and.w	r3, r3, #31
  4037b0:	2101      	movs	r1, #1
  4037b2:	fa01 f303 	lsl.w	r3, r1, r3
  4037b6:	61fa      	str	r2, [r7, #28]
  4037b8:	61bb      	str	r3, [r7, #24]
  4037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4037bc:	617b      	str	r3, [r7, #20]
  4037be:	69fb      	ldr	r3, [r7, #28]
  4037c0:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4037c2:	693a      	ldr	r2, [r7, #16]
  4037c4:	4b37      	ldr	r3, [pc, #220]	; (4038a4 <ioport_set_pin_mode+0x118>)
  4037c6:	4413      	add	r3, r2
  4037c8:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4037ca:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4037cc:	697b      	ldr	r3, [r7, #20]
  4037ce:	f003 0308 	and.w	r3, r3, #8
  4037d2:	2b00      	cmp	r3, #0
  4037d4:	d003      	beq.n	4037de <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4037d6:	68fb      	ldr	r3, [r7, #12]
  4037d8:	69ba      	ldr	r2, [r7, #24]
  4037da:	665a      	str	r2, [r3, #100]	; 0x64
  4037dc:	e002      	b.n	4037e4 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4037de:	68fb      	ldr	r3, [r7, #12]
  4037e0:	69ba      	ldr	r2, [r7, #24]
  4037e2:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4037e4:	697b      	ldr	r3, [r7, #20]
  4037e6:	f003 0310 	and.w	r3, r3, #16
  4037ea:	2b00      	cmp	r3, #0
  4037ec:	d004      	beq.n	4037f8 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  4037ee:	68fb      	ldr	r3, [r7, #12]
  4037f0:	69ba      	ldr	r2, [r7, #24]
  4037f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  4037f6:	e003      	b.n	403800 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  4037f8:	68fb      	ldr	r3, [r7, #12]
  4037fa:	69ba      	ldr	r2, [r7, #24]
  4037fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  403800:	697b      	ldr	r3, [r7, #20]
  403802:	f003 0320 	and.w	r3, r3, #32
  403806:	2b00      	cmp	r3, #0
  403808:	d003      	beq.n	403812 <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  40380a:	68fb      	ldr	r3, [r7, #12]
  40380c:	69ba      	ldr	r2, [r7, #24]
  40380e:	651a      	str	r2, [r3, #80]	; 0x50
  403810:	e002      	b.n	403818 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  403812:	68fb      	ldr	r3, [r7, #12]
  403814:	69ba      	ldr	r2, [r7, #24]
  403816:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  403818:	697b      	ldr	r3, [r7, #20]
  40381a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40381e:	2b00      	cmp	r3, #0
  403820:	d003      	beq.n	40382a <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  403822:	68fb      	ldr	r3, [r7, #12]
  403824:	69ba      	ldr	r2, [r7, #24]
  403826:	621a      	str	r2, [r3, #32]
  403828:	e002      	b.n	403830 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  40382a:	68fb      	ldr	r3, [r7, #12]
  40382c:	69ba      	ldr	r2, [r7, #24]
  40382e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  403830:	697b      	ldr	r3, [r7, #20]
  403832:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403836:	2b00      	cmp	r3, #0
  403838:	d004      	beq.n	403844 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  40383a:	68fb      	ldr	r3, [r7, #12]
  40383c:	69ba      	ldr	r2, [r7, #24]
  40383e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  403842:	e003      	b.n	40384c <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  403844:	68fb      	ldr	r3, [r7, #12]
  403846:	69ba      	ldr	r2, [r7, #24]
  403848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  40384c:	697b      	ldr	r3, [r7, #20]
  40384e:	f003 0301 	and.w	r3, r3, #1
  403852:	2b00      	cmp	r3, #0
  403854:	d006      	beq.n	403864 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  403856:	68fb      	ldr	r3, [r7, #12]
  403858:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40385a:	69bb      	ldr	r3, [r7, #24]
  40385c:	431a      	orrs	r2, r3
  40385e:	68fb      	ldr	r3, [r7, #12]
  403860:	671a      	str	r2, [r3, #112]	; 0x70
  403862:	e006      	b.n	403872 <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  403864:	68fb      	ldr	r3, [r7, #12]
  403866:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  403868:	69bb      	ldr	r3, [r7, #24]
  40386a:	43db      	mvns	r3, r3
  40386c:	401a      	ands	r2, r3
  40386e:	68fb      	ldr	r3, [r7, #12]
  403870:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  403872:	697b      	ldr	r3, [r7, #20]
  403874:	f003 0302 	and.w	r3, r3, #2
  403878:	2b00      	cmp	r3, #0
  40387a:	d006      	beq.n	40388a <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  40387c:	68fb      	ldr	r3, [r7, #12]
  40387e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  403880:	69bb      	ldr	r3, [r7, #24]
  403882:	431a      	orrs	r2, r3
  403884:	68fb      	ldr	r3, [r7, #12]
  403886:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  403888:	e006      	b.n	403898 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40388a:	68fb      	ldr	r3, [r7, #12]
  40388c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40388e:	69bb      	ldr	r3, [r7, #24]
  403890:	43db      	mvns	r3, r3
  403892:	401a      	ands	r2, r3
  403894:	68fb      	ldr	r3, [r7, #12]
  403896:	675a      	str	r2, [r3, #116]	; 0x74
  403898:	bf00      	nop
  40389a:	3734      	adds	r7, #52	; 0x34
  40389c:	46bd      	mov	sp, r7
  40389e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4038a2:	4770      	bx	lr
  4038a4:	00200707 	.word	0x00200707

004038a8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4038a8:	b480      	push	{r7}
  4038aa:	b08d      	sub	sp, #52	; 0x34
  4038ac:	af00      	add	r7, sp, #0
  4038ae:	6078      	str	r0, [r7, #4]
  4038b0:	460b      	mov	r3, r1
  4038b2:	70fb      	strb	r3, [r7, #3]
  4038b4:	687b      	ldr	r3, [r7, #4]
  4038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4038b8:	78fb      	ldrb	r3, [r7, #3]
  4038ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4038c0:	627b      	str	r3, [r7, #36]	; 0x24
  4038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4038c4:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4038c6:	6a3b      	ldr	r3, [r7, #32]
  4038c8:	095b      	lsrs	r3, r3, #5
  4038ca:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4038cc:	69fa      	ldr	r2, [r7, #28]
  4038ce:	4b17      	ldr	r3, [pc, #92]	; (40392c <ioport_set_pin_dir+0x84>)
  4038d0:	4413      	add	r3, r2
  4038d2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4038d4:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4038d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4038da:	2b01      	cmp	r3, #1
  4038dc:	d109      	bne.n	4038f2 <ioport_set_pin_dir+0x4a>
  4038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4038e0:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4038e2:	697b      	ldr	r3, [r7, #20]
  4038e4:	f003 031f 	and.w	r3, r3, #31
  4038e8:	2201      	movs	r2, #1
  4038ea:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4038ec:	69bb      	ldr	r3, [r7, #24]
  4038ee:	611a      	str	r2, [r3, #16]
  4038f0:	e00c      	b.n	40390c <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  4038f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4038f6:	2b00      	cmp	r3, #0
  4038f8:	d108      	bne.n	40390c <ioport_set_pin_dir+0x64>
  4038fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4038fc:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  4038fe:	693b      	ldr	r3, [r7, #16]
  403900:	f003 031f 	and.w	r3, r3, #31
  403904:	2201      	movs	r2, #1
  403906:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  403908:	69bb      	ldr	r3, [r7, #24]
  40390a:	615a      	str	r2, [r3, #20]
  40390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40390e:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  403910:	68fb      	ldr	r3, [r7, #12]
  403912:	f003 031f 	and.w	r3, r3, #31
  403916:	2201      	movs	r2, #1
  403918:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40391a:	69bb      	ldr	r3, [r7, #24]
  40391c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  403920:	bf00      	nop
  403922:	3734      	adds	r7, #52	; 0x34
  403924:	46bd      	mov	sp, r7
  403926:	f85d 7b04 	ldr.w	r7, [sp], #4
  40392a:	4770      	bx	lr
  40392c:	00200707 	.word	0x00200707

00403930 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  403930:	b480      	push	{r7}
  403932:	b08b      	sub	sp, #44	; 0x2c
  403934:	af00      	add	r7, sp, #0
  403936:	6078      	str	r0, [r7, #4]
  403938:	460b      	mov	r3, r1
  40393a:	70fb      	strb	r3, [r7, #3]
  40393c:	687b      	ldr	r3, [r7, #4]
  40393e:	627b      	str	r3, [r7, #36]	; 0x24
  403940:	78fb      	ldrb	r3, [r7, #3]
  403942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  403946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403948:	61fb      	str	r3, [r7, #28]
  40394a:	69fb      	ldr	r3, [r7, #28]
  40394c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40394e:	69bb      	ldr	r3, [r7, #24]
  403950:	095b      	lsrs	r3, r3, #5
  403952:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  403954:	697a      	ldr	r2, [r7, #20]
  403956:	4b10      	ldr	r3, [pc, #64]	; (403998 <ioport_set_pin_level+0x68>)
  403958:	4413      	add	r3, r2
  40395a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40395c:	613b      	str	r3, [r7, #16]

	if (level) {
  40395e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  403962:	2b00      	cmp	r3, #0
  403964:	d009      	beq.n	40397a <ioport_set_pin_level+0x4a>
  403966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  403968:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40396a:	68fb      	ldr	r3, [r7, #12]
  40396c:	f003 031f 	and.w	r3, r3, #31
  403970:	2201      	movs	r2, #1
  403972:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  403974:	693b      	ldr	r3, [r7, #16]
  403976:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  403978:	e008      	b.n	40398c <ioport_set_pin_level+0x5c>
  40397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40397c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40397e:	68bb      	ldr	r3, [r7, #8]
  403980:	f003 031f 	and.w	r3, r3, #31
  403984:	2201      	movs	r2, #1
  403986:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  403988:	693b      	ldr	r3, [r7, #16]
  40398a:	635a      	str	r2, [r3, #52]	; 0x34
  40398c:	bf00      	nop
  40398e:	372c      	adds	r7, #44	; 0x2c
  403990:	46bd      	mov	sp, r7
  403992:	f85d 7b04 	ldr.w	r7, [sp], #4
  403996:	4770      	bx	lr
  403998:	00200707 	.word	0x00200707

0040399c <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  40399c:	b480      	push	{r7}
  40399e:	b08d      	sub	sp, #52	; 0x34
  4039a0:	af00      	add	r7, sp, #0
  4039a2:	6078      	str	r0, [r7, #4]
  4039a4:	460b      	mov	r3, r1
  4039a6:	70fb      	strb	r3, [r7, #3]
  4039a8:	687b      	ldr	r3, [r7, #4]
  4039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  4039ac:	78fb      	ldrb	r3, [r7, #3]
  4039ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4039b4:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4039b8:	095a      	lsrs	r2, r3, #5
  4039ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4039bc:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4039be:	6a3b      	ldr	r3, [r7, #32]
  4039c0:	f003 031f 	and.w	r3, r3, #31
  4039c4:	2101      	movs	r1, #1
  4039c6:	fa01 f303 	lsl.w	r3, r1, r3
  4039ca:	61fa      	str	r2, [r7, #28]
  4039cc:	61bb      	str	r3, [r7, #24]
  4039ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4039d2:	75fb      	strb	r3, [r7, #23]
  4039d4:	69fb      	ldr	r3, [r7, #28]
  4039d6:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4039d8:	693a      	ldr	r2, [r7, #16]
  4039da:	4b23      	ldr	r3, [pc, #140]	; (403a68 <ioport_set_pin_sense_mode+0xcc>)
  4039dc:	4413      	add	r3, r2
  4039de:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4039e0:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4039e2:	7dfb      	ldrb	r3, [r7, #23]
  4039e4:	3b01      	subs	r3, #1
  4039e6:	2b03      	cmp	r3, #3
  4039e8:	d82e      	bhi.n	403a48 <ioport_set_pin_sense_mode+0xac>
  4039ea:	a201      	add	r2, pc, #4	; (adr r2, 4039f0 <ioport_set_pin_sense_mode+0x54>)
  4039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4039f0:	00403a25 	.word	0x00403a25
  4039f4:	00403a37 	.word	0x00403a37
  4039f8:	00403a01 	.word	0x00403a01
  4039fc:	00403a13 	.word	0x00403a13
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  403a00:	68fb      	ldr	r3, [r7, #12]
  403a02:	69ba      	ldr	r2, [r7, #24]
  403a04:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  403a08:	68fb      	ldr	r3, [r7, #12]
  403a0a:	69ba      	ldr	r2, [r7, #24]
  403a0c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  403a10:	e01f      	b.n	403a52 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  403a12:	68fb      	ldr	r3, [r7, #12]
  403a14:	69ba      	ldr	r2, [r7, #24]
  403a16:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  403a1a:	68fb      	ldr	r3, [r7, #12]
  403a1c:	69ba      	ldr	r2, [r7, #24]
  403a1e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  403a22:	e016      	b.n	403a52 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  403a24:	68fb      	ldr	r3, [r7, #12]
  403a26:	69ba      	ldr	r2, [r7, #24]
  403a28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  403a2c:	68fb      	ldr	r3, [r7, #12]
  403a2e:	69ba      	ldr	r2, [r7, #24]
  403a30:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  403a34:	e00d      	b.n	403a52 <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  403a36:	68fb      	ldr	r3, [r7, #12]
  403a38:	69ba      	ldr	r2, [r7, #24]
  403a3a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  403a3e:	68fb      	ldr	r3, [r7, #12]
  403a40:	69ba      	ldr	r2, [r7, #24]
  403a42:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  403a46:	e004      	b.n	403a52 <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  403a48:	68fb      	ldr	r3, [r7, #12]
  403a4a:	69ba      	ldr	r2, [r7, #24]
  403a4c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  403a50:	e003      	b.n	403a5a <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  403a52:	68fb      	ldr	r3, [r7, #12]
  403a54:	69ba      	ldr	r2, [r7, #24]
  403a56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  403a5a:	bf00      	nop
  403a5c:	3734      	adds	r7, #52	; 0x34
  403a5e:	46bd      	mov	sp, r7
  403a60:	f85d 7b04 	ldr.w	r7, [sp], #4
  403a64:	4770      	bx	lr
  403a66:	bf00      	nop
  403a68:	00200707 	.word	0x00200707

00403a6c <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  403a6c:	b480      	push	{r7}
  403a6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  403a70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403a74:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  403a78:	4a0c      	ldr	r2, [pc, #48]	; (403aac <tcm_disable+0x40>)
  403a7a:	4b0c      	ldr	r3, [pc, #48]	; (403aac <tcm_disable+0x40>)
  403a7c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  403a80:	f023 0301 	bic.w	r3, r3, #1
  403a84:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  403a88:	4a08      	ldr	r2, [pc, #32]	; (403aac <tcm_disable+0x40>)
  403a8a:	4b08      	ldr	r3, [pc, #32]	; (403aac <tcm_disable+0x40>)
  403a8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  403a90:	f023 0301 	bic.w	r3, r3, #1
  403a94:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  403a98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  403a9c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  403aa0:	bf00      	nop
  403aa2:	46bd      	mov	sp, r7
  403aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403aa8:	4770      	bx	lr
  403aaa:	bf00      	nop
  403aac:	e000ed00 	.word	0xe000ed00

00403ab0 <board_init>:
#endif

void board_init(void)
{
  403ab0:	b580      	push	{r7, lr}
  403ab2:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  403ab4:	4b1e      	ldr	r3, [pc, #120]	; (403b30 <board_init+0x80>)
  403ab6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403aba:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  403abc:	4b1d      	ldr	r3, [pc, #116]	; (403b34 <board_init+0x84>)
  403abe:	4798      	blx	r3
	SCB_EnableDCache();
  403ac0:	4b1d      	ldr	r3, [pc, #116]	; (403b38 <board_init+0x88>)
  403ac2:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  403ac4:	4b1d      	ldr	r3, [pc, #116]	; (403b3c <board_init+0x8c>)
  403ac6:	4a1e      	ldr	r2, [pc, #120]	; (403b40 <board_init+0x90>)
  403ac8:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  403aca:	4b1c      	ldr	r3, [pc, #112]	; (403b3c <board_init+0x8c>)
  403acc:	4a1d      	ldr	r2, [pc, #116]	; (403b44 <board_init+0x94>)
  403ace:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  403ad0:	4b1d      	ldr	r3, [pc, #116]	; (403b48 <board_init+0x98>)
  403ad2:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  403ad4:	4b1d      	ldr	r3, [pc, #116]	; (403b4c <board_init+0x9c>)
  403ad6:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  403ad8:	2101      	movs	r1, #1
  403ada:	2048      	movs	r0, #72	; 0x48
  403adc:	4b1c      	ldr	r3, [pc, #112]	; (403b50 <board_init+0xa0>)
  403ade:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  403ae0:	2101      	movs	r1, #1
  403ae2:	2048      	movs	r0, #72	; 0x48
  403ae4:	4b1b      	ldr	r3, [pc, #108]	; (403b54 <board_init+0xa4>)
  403ae6:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  403ae8:	2100      	movs	r1, #0
  403aea:	200b      	movs	r0, #11
  403aec:	4b18      	ldr	r3, [pc, #96]	; (403b50 <board_init+0xa0>)
  403aee:	4798      	blx	r3
  403af0:	2188      	movs	r1, #136	; 0x88
  403af2:	200b      	movs	r0, #11
  403af4:	4b18      	ldr	r3, [pc, #96]	; (403b58 <board_init+0xa8>)
  403af6:	4798      	blx	r3
  403af8:	2102      	movs	r1, #2
  403afa:	200b      	movs	r0, #11
  403afc:	4b17      	ldr	r3, [pc, #92]	; (403b5c <board_init+0xac>)
  403afe:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  403b00:	2100      	movs	r1, #0
  403b02:	2015      	movs	r0, #21
  403b04:	4b14      	ldr	r3, [pc, #80]	; (403b58 <board_init+0xa8>)
  403b06:	4798      	blx	r3
  403b08:	2015      	movs	r0, #21
  403b0a:	4b15      	ldr	r3, [pc, #84]	; (403b60 <board_init+0xb0>)
  403b0c:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  403b0e:	4a15      	ldr	r2, [pc, #84]	; (403b64 <board_init+0xb4>)
  403b10:	4b14      	ldr	r3, [pc, #80]	; (403b64 <board_init+0xb4>)
  403b12:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  403b16:	f043 0310 	orr.w	r3, r3, #16
  403b1a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  403b1e:	2103      	movs	r1, #3
  403b20:	2024      	movs	r0, #36	; 0x24
  403b22:	4b0d      	ldr	r3, [pc, #52]	; (403b58 <board_init+0xa8>)
  403b24:	4798      	blx	r3
  403b26:	2024      	movs	r0, #36	; 0x24
  403b28:	4b0d      	ldr	r3, [pc, #52]	; (403b60 <board_init+0xb0>)
  403b2a:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  403b2c:	bf00      	nop
  403b2e:	bd80      	pop	{r7, pc}
  403b30:	400e1850 	.word	0x400e1850
  403b34:	0040361d 	.word	0x0040361d
  403b38:	00403655 	.word	0x00403655
  403b3c:	400e0c00 	.word	0x400e0c00
  403b40:	5a00080c 	.word	0x5a00080c
  403b44:	5a00070c 	.word	0x5a00070c
  403b48:	00403a6d 	.word	0x00403a6d
  403b4c:	00403715 	.word	0x00403715
  403b50:	004038a9 	.word	0x004038a9
  403b54:	00403931 	.word	0x00403931
  403b58:	0040378d 	.word	0x0040378d
  403b5c:	0040399d 	.word	0x0040399d
  403b60:	00403741 	.word	0x00403741
  403b64:	40088000 	.word	0x40088000

00403b68 <NVIC_EnableIRQ>:
{
  403b68:	b480      	push	{r7}
  403b6a:	b083      	sub	sp, #12
  403b6c:	af00      	add	r7, sp, #0
  403b6e:	4603      	mov	r3, r0
  403b70:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403b72:	4909      	ldr	r1, [pc, #36]	; (403b98 <NVIC_EnableIRQ+0x30>)
  403b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403b78:	095b      	lsrs	r3, r3, #5
  403b7a:	79fa      	ldrb	r2, [r7, #7]
  403b7c:	f002 021f 	and.w	r2, r2, #31
  403b80:	2001      	movs	r0, #1
  403b82:	fa00 f202 	lsl.w	r2, r0, r2
  403b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403b8a:	bf00      	nop
  403b8c:	370c      	adds	r7, #12
  403b8e:	46bd      	mov	sp, r7
  403b90:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b94:	4770      	bx	lr
  403b96:	bf00      	nop
  403b98:	e000e100 	.word	0xe000e100

00403b9c <NVIC_ClearPendingIRQ>:
{
  403b9c:	b480      	push	{r7}
  403b9e:	b083      	sub	sp, #12
  403ba0:	af00      	add	r7, sp, #0
  403ba2:	4603      	mov	r3, r0
  403ba4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  403ba6:	4909      	ldr	r1, [pc, #36]	; (403bcc <NVIC_ClearPendingIRQ+0x30>)
  403ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403bac:	095b      	lsrs	r3, r3, #5
  403bae:	79fa      	ldrb	r2, [r7, #7]
  403bb0:	f002 021f 	and.w	r2, r2, #31
  403bb4:	2001      	movs	r0, #1
  403bb6:	fa00 f202 	lsl.w	r2, r0, r2
  403bba:	3360      	adds	r3, #96	; 0x60
  403bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  403bc0:	bf00      	nop
  403bc2:	370c      	adds	r7, #12
  403bc4:	46bd      	mov	sp, r7
  403bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
  403bca:	4770      	bx	lr
  403bcc:	e000e100 	.word	0xe000e100

00403bd0 <NVIC_SetPriority>:
{
  403bd0:	b480      	push	{r7}
  403bd2:	b083      	sub	sp, #12
  403bd4:	af00      	add	r7, sp, #0
  403bd6:	4603      	mov	r3, r0
  403bd8:	6039      	str	r1, [r7, #0]
  403bda:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  403bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403be0:	2b00      	cmp	r3, #0
  403be2:	da0b      	bge.n	403bfc <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  403be4:	490d      	ldr	r1, [pc, #52]	; (403c1c <NVIC_SetPriority+0x4c>)
  403be6:	79fb      	ldrb	r3, [r7, #7]
  403be8:	f003 030f 	and.w	r3, r3, #15
  403bec:	3b04      	subs	r3, #4
  403bee:	683a      	ldr	r2, [r7, #0]
  403bf0:	b2d2      	uxtb	r2, r2
  403bf2:	0152      	lsls	r2, r2, #5
  403bf4:	b2d2      	uxtb	r2, r2
  403bf6:	440b      	add	r3, r1
  403bf8:	761a      	strb	r2, [r3, #24]
}
  403bfa:	e009      	b.n	403c10 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403bfc:	4908      	ldr	r1, [pc, #32]	; (403c20 <NVIC_SetPriority+0x50>)
  403bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403c02:	683a      	ldr	r2, [r7, #0]
  403c04:	b2d2      	uxtb	r2, r2
  403c06:	0152      	lsls	r2, r2, #5
  403c08:	b2d2      	uxtb	r2, r2
  403c0a:	440b      	add	r3, r1
  403c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  403c10:	bf00      	nop
  403c12:	370c      	adds	r7, #12
  403c14:	46bd      	mov	sp, r7
  403c16:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c1a:	4770      	bx	lr
  403c1c:	e000ed00 	.word	0xe000ed00
  403c20:	e000e100 	.word	0xe000e100

00403c24 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  403c24:	b480      	push	{r7}
  403c26:	b083      	sub	sp, #12
  403c28:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403c2a:	f3ef 8310 	mrs	r3, PRIMASK
  403c2e:	607b      	str	r3, [r7, #4]
  return(result);
  403c30:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  403c32:	2b00      	cmp	r3, #0
  403c34:	bf0c      	ite	eq
  403c36:	2301      	moveq	r3, #1
  403c38:	2300      	movne	r3, #0
  403c3a:	b2db      	uxtb	r3, r3
  403c3c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  403c3e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  403c40:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  403c44:	4b04      	ldr	r3, [pc, #16]	; (403c58 <cpu_irq_save+0x34>)
  403c46:	2200      	movs	r2, #0
  403c48:	701a      	strb	r2, [r3, #0]
	return flags;
  403c4a:	683b      	ldr	r3, [r7, #0]
}
  403c4c:	4618      	mov	r0, r3
  403c4e:	370c      	adds	r7, #12
  403c50:	46bd      	mov	sp, r7
  403c52:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c56:	4770      	bx	lr
  403c58:	20400034 	.word	0x20400034

00403c5c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  403c5c:	b480      	push	{r7}
  403c5e:	b083      	sub	sp, #12
  403c60:	af00      	add	r7, sp, #0
  403c62:	6078      	str	r0, [r7, #4]
	return (flags);
  403c64:	687b      	ldr	r3, [r7, #4]
  403c66:	2b00      	cmp	r3, #0
  403c68:	bf14      	ite	ne
  403c6a:	2301      	movne	r3, #1
  403c6c:	2300      	moveq	r3, #0
  403c6e:	b2db      	uxtb	r3, r3
}
  403c70:	4618      	mov	r0, r3
  403c72:	370c      	adds	r7, #12
  403c74:	46bd      	mov	sp, r7
  403c76:	f85d 7b04 	ldr.w	r7, [sp], #4
  403c7a:	4770      	bx	lr

00403c7c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  403c7c:	b580      	push	{r7, lr}
  403c7e:	b082      	sub	sp, #8
  403c80:	af00      	add	r7, sp, #0
  403c82:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  403c84:	6878      	ldr	r0, [r7, #4]
  403c86:	4b07      	ldr	r3, [pc, #28]	; (403ca4 <cpu_irq_restore+0x28>)
  403c88:	4798      	blx	r3
  403c8a:	4603      	mov	r3, r0
  403c8c:	2b00      	cmp	r3, #0
  403c8e:	d005      	beq.n	403c9c <cpu_irq_restore+0x20>
		cpu_irq_enable();
  403c90:	4b05      	ldr	r3, [pc, #20]	; (403ca8 <cpu_irq_restore+0x2c>)
  403c92:	2201      	movs	r2, #1
  403c94:	701a      	strb	r2, [r3, #0]
  403c96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403c9a:	b662      	cpsie	i
}
  403c9c:	bf00      	nop
  403c9e:	3708      	adds	r7, #8
  403ca0:	46bd      	mov	sp, r7
  403ca2:	bd80      	pop	{r7, pc}
  403ca4:	00403c5d 	.word	0x00403c5d
  403ca8:	20400034 	.word	0x20400034

00403cac <afec_ch_sanity_check>:
{
  403cac:	b480      	push	{r7}
  403cae:	b083      	sub	sp, #12
  403cb0:	af00      	add	r7, sp, #0
  403cb2:	6078      	str	r0, [r7, #4]
  403cb4:	460b      	mov	r3, r1
  403cb6:	807b      	strh	r3, [r7, #2]
}
  403cb8:	bf00      	nop
  403cba:	370c      	adds	r7, #12
  403cbc:	46bd      	mov	sp, r7
  403cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cc2:	4770      	bx	lr

00403cc4 <afec_get_interrupt_status>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
  403cc4:	b480      	push	{r7}
  403cc6:	b083      	sub	sp, #12
  403cc8:	af00      	add	r7, sp, #0
  403cca:	6078      	str	r0, [r7, #4]
	return afec->AFEC_ISR;
  403ccc:	687b      	ldr	r3, [r7, #4]
  403cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  403cd0:	4618      	mov	r0, r3
  403cd2:	370c      	adds	r7, #12
  403cd4:	46bd      	mov	sp, r7
  403cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cda:	4770      	bx	lr

00403cdc <afec_get_interrupt_mask>:
 * \param afec  Base address of the AFEC.
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
  403cdc:	b480      	push	{r7}
  403cde:	b083      	sub	sp, #12
  403ce0:	af00      	add	r7, sp, #0
  403ce2:	6078      	str	r0, [r7, #4]
	return afec->AFEC_IMR;
  403ce4:	687b      	ldr	r3, [r7, #4]
  403ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
  403ce8:	4618      	mov	r0, r3
  403cea:	370c      	adds	r7, #12
  403cec:	46bd      	mov	sp, r7
  403cee:	f85d 7b04 	ldr.w	r7, [sp], #4
  403cf2:	4770      	bx	lr

00403cf4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  403cf4:	b580      	push	{r7, lr}
  403cf6:	b084      	sub	sp, #16
  403cf8:	af00      	add	r7, sp, #0
  403cfa:	4603      	mov	r3, r0
  403cfc:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  403cfe:	79fb      	ldrb	r3, [r7, #7]
  403d00:	4a0a      	ldr	r2, [pc, #40]	; (403d2c <sleepmgr_lock_mode+0x38>)
  403d02:	5cd3      	ldrb	r3, [r2, r3]
  403d04:	2bff      	cmp	r3, #255	; 0xff
  403d06:	d100      	bne.n	403d0a <sleepmgr_lock_mode+0x16>
		while (true) {
  403d08:	e7fe      	b.n	403d08 <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  403d0a:	4b09      	ldr	r3, [pc, #36]	; (403d30 <sleepmgr_lock_mode+0x3c>)
  403d0c:	4798      	blx	r3
  403d0e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  403d10:	79fb      	ldrb	r3, [r7, #7]
  403d12:	4a06      	ldr	r2, [pc, #24]	; (403d2c <sleepmgr_lock_mode+0x38>)
  403d14:	5cd2      	ldrb	r2, [r2, r3]
  403d16:	3201      	adds	r2, #1
  403d18:	b2d1      	uxtb	r1, r2
  403d1a:	4a04      	ldr	r2, [pc, #16]	; (403d2c <sleepmgr_lock_mode+0x38>)
  403d1c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  403d1e:	68f8      	ldr	r0, [r7, #12]
  403d20:	4b04      	ldr	r3, [pc, #16]	; (403d34 <sleepmgr_lock_mode+0x40>)
  403d22:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  403d24:	bf00      	nop
  403d26:	3710      	adds	r7, #16
  403d28:	46bd      	mov	sp, r7
  403d2a:	bd80      	pop	{r7, pc}
  403d2c:	204203c8 	.word	0x204203c8
  403d30:	00403c25 	.word	0x00403c25
  403d34:	00403c7d 	.word	0x00403c7d

00403d38 <osc_get_rate>:
{
  403d38:	b480      	push	{r7}
  403d3a:	b083      	sub	sp, #12
  403d3c:	af00      	add	r7, sp, #0
  403d3e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  403d40:	687b      	ldr	r3, [r7, #4]
  403d42:	2b07      	cmp	r3, #7
  403d44:	d825      	bhi.n	403d92 <osc_get_rate+0x5a>
  403d46:	a201      	add	r2, pc, #4	; (adr r2, 403d4c <osc_get_rate+0x14>)
  403d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403d4c:	00403d6d 	.word	0x00403d6d
  403d50:	00403d73 	.word	0x00403d73
  403d54:	00403d79 	.word	0x00403d79
  403d58:	00403d7f 	.word	0x00403d7f
  403d5c:	00403d83 	.word	0x00403d83
  403d60:	00403d87 	.word	0x00403d87
  403d64:	00403d8b 	.word	0x00403d8b
  403d68:	00403d8f 	.word	0x00403d8f
		return OSC_SLCK_32K_RC_HZ;
  403d6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  403d70:	e010      	b.n	403d94 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  403d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403d76:	e00d      	b.n	403d94 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  403d78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403d7c:	e00a      	b.n	403d94 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  403d7e:	4b08      	ldr	r3, [pc, #32]	; (403da0 <osc_get_rate+0x68>)
  403d80:	e008      	b.n	403d94 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  403d82:	4b08      	ldr	r3, [pc, #32]	; (403da4 <osc_get_rate+0x6c>)
  403d84:	e006      	b.n	403d94 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  403d86:	4b08      	ldr	r3, [pc, #32]	; (403da8 <osc_get_rate+0x70>)
  403d88:	e004      	b.n	403d94 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  403d8a:	4b07      	ldr	r3, [pc, #28]	; (403da8 <osc_get_rate+0x70>)
  403d8c:	e002      	b.n	403d94 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  403d8e:	4b06      	ldr	r3, [pc, #24]	; (403da8 <osc_get_rate+0x70>)
  403d90:	e000      	b.n	403d94 <osc_get_rate+0x5c>
	return 0;
  403d92:	2300      	movs	r3, #0
}
  403d94:	4618      	mov	r0, r3
  403d96:	370c      	adds	r7, #12
  403d98:	46bd      	mov	sp, r7
  403d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d9e:	4770      	bx	lr
  403da0:	003d0900 	.word	0x003d0900
  403da4:	007a1200 	.word	0x007a1200
  403da8:	00b71b00 	.word	0x00b71b00

00403dac <sysclk_get_main_hz>:
{
  403dac:	b580      	push	{r7, lr}
  403dae:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  403db0:	2006      	movs	r0, #6
  403db2:	4b05      	ldr	r3, [pc, #20]	; (403dc8 <sysclk_get_main_hz+0x1c>)
  403db4:	4798      	blx	r3
  403db6:	4602      	mov	r2, r0
  403db8:	4613      	mov	r3, r2
  403dba:	009b      	lsls	r3, r3, #2
  403dbc:	4413      	add	r3, r2
  403dbe:	009a      	lsls	r2, r3, #2
  403dc0:	4413      	add	r3, r2
}
  403dc2:	4618      	mov	r0, r3
  403dc4:	bd80      	pop	{r7, pc}
  403dc6:	bf00      	nop
  403dc8:	00403d39 	.word	0x00403d39

00403dcc <sysclk_get_cpu_hz>:
{
  403dcc:	b580      	push	{r7, lr}
  403dce:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  403dd0:	4b02      	ldr	r3, [pc, #8]	; (403ddc <sysclk_get_cpu_hz+0x10>)
  403dd2:	4798      	blx	r3
  403dd4:	4603      	mov	r3, r0
}
  403dd6:	4618      	mov	r0, r3
  403dd8:	bd80      	pop	{r7, pc}
  403dda:	bf00      	nop
  403ddc:	00403dad 	.word	0x00403dad

00403de0 <afec_find_inst_num>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
  403de0:	b480      	push	{r7}
  403de2:	b083      	sub	sp, #12
  403de4:	af00      	add	r7, sp, #0
  403de6:	6078      	str	r0, [r7, #4]
#if defined(AFEC1)
	if (afec == AFEC1) {
  403de8:	687b      	ldr	r3, [r7, #4]
  403dea:	4a09      	ldr	r2, [pc, #36]	; (403e10 <afec_find_inst_num+0x30>)
  403dec:	4293      	cmp	r3, r2
  403dee:	d101      	bne.n	403df4 <afec_find_inst_num+0x14>
		return 1;
  403df0:	2301      	movs	r3, #1
  403df2:	e006      	b.n	403e02 <afec_find_inst_num+0x22>
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
  403df4:	687b      	ldr	r3, [r7, #4]
  403df6:	4a07      	ldr	r2, [pc, #28]	; (403e14 <afec_find_inst_num+0x34>)
  403df8:	4293      	cmp	r3, r2
  403dfa:	d101      	bne.n	403e00 <afec_find_inst_num+0x20>
		return 0;
  403dfc:	2300      	movs	r3, #0
  403dfe:	e000      	b.n	403e02 <afec_find_inst_num+0x22>
	}
#endif
	return 0;
  403e00:	2300      	movs	r3, #0
}
  403e02:	4618      	mov	r0, r3
  403e04:	370c      	adds	r7, #12
  403e06:	46bd      	mov	sp, r7
  403e08:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e0c:	4770      	bx	lr
  403e0e:	bf00      	nop
  403e10:	40064000 	.word	0x40064000
  403e14:	4003c000 	.word	0x4003c000

00403e18 <afec_find_pid>:
 * \param afec  Base address of the AFEC
 *
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
  403e18:	b480      	push	{r7}
  403e1a:	b083      	sub	sp, #12
  403e1c:	af00      	add	r7, sp, #0
  403e1e:	6078      	str	r0, [r7, #4]
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  403e20:	687b      	ldr	r3, [r7, #4]
  403e22:	4a09      	ldr	r2, [pc, #36]	; (403e48 <afec_find_pid+0x30>)
  403e24:	4293      	cmp	r3, r2
  403e26:	d101      	bne.n	403e2c <afec_find_pid+0x14>
		return ID_AFEC1;
  403e28:	2328      	movs	r3, #40	; 0x28
  403e2a:	e006      	b.n	403e3a <afec_find_pid+0x22>
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
  403e2c:	687b      	ldr	r3, [r7, #4]
  403e2e:	4a07      	ldr	r2, [pc, #28]	; (403e4c <afec_find_pid+0x34>)
  403e30:	4293      	cmp	r3, r2
  403e32:	d101      	bne.n	403e38 <afec_find_pid+0x20>
		return ID_AFEC0;
  403e34:	231d      	movs	r3, #29
  403e36:	e000      	b.n	403e3a <afec_find_pid+0x22>
	}
#endif
	return ID_AFEC0;
  403e38:	231d      	movs	r3, #29
}
  403e3a:	4618      	mov	r0, r3
  403e3c:	370c      	adds	r7, #12
  403e3e:	46bd      	mov	sp, r7
  403e40:	f85d 7b04 	ldr.w	r7, [sp], #4
  403e44:	4770      	bx	lr
  403e46:	bf00      	nop
  403e48:	40064000 	.word	0x40064000
  403e4c:	4003c000 	.word	0x4003c000

00403e50 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  403e50:	b480      	push	{r7}
  403e52:	b085      	sub	sp, #20
  403e54:	af00      	add	r7, sp, #0
  403e56:	6078      	str	r0, [r7, #4]
  403e58:	6039      	str	r1, [r7, #0]
	uint32_t reg = 0;
  403e5a:	2300      	movs	r3, #0
  403e5c:	60fb      	str	r3, [r7, #12]

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  403e5e:	683b      	ldr	r3, [r7, #0]
  403e60:	7cdb      	ldrb	r3, [r3, #19]
  403e62:	2b00      	cmp	r3, #0
  403e64:	d002      	beq.n	403e6c <afec_set_config+0x1c>
  403e66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  403e6a:	e000      	b.n	403e6e <afec_set_config+0x1e>
  403e6c:	2200      	movs	r2, #0
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  403e6e:	683b      	ldr	r3, [r7, #0]
  403e70:	6859      	ldr	r1, [r3, #4]
  403e72:	683b      	ldr	r3, [r7, #0]
  403e74:	689b      	ldr	r3, [r3, #8]
  403e76:	fbb1 f3f3 	udiv	r3, r1, r3
  403e7a:	3b01      	subs	r3, #1
  403e7c:	021b      	lsls	r3, r3, #8
  403e7e:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  403e80:	431a      	orrs	r2, r3
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  403e82:	683b      	ldr	r3, [r7, #0]
  403e84:	7c1b      	ldrb	r3, [r3, #16]
  403e86:	061b      	lsls	r3, r3, #24
  403e88:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
			AFEC_MR_ONE |
  403e8c:	431a      	orrs	r2, r3
			AFEC_MR_TRANSFER(config->transfer) |
  403e8e:	683b      	ldr	r3, [r7, #0]
  403e90:	7c5b      	ldrb	r3, [r3, #17]
  403e92:	071b      	lsls	r3, r3, #28
  403e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
			AFEC_MR_TRACKTIM(config->tracktim) |
  403e98:	431a      	orrs	r2, r3
			(config->startup_time);
  403e9a:	683b      	ldr	r3, [r7, #0]
  403e9c:	68db      	ldr	r3, [r3, #12]
			AFEC_MR_TRANSFER(config->transfer) |
  403e9e:	4313      	orrs	r3, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  403ea0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  403ea4:	60fb      	str	r3, [r7, #12]

	afec->AFEC_MR = reg;
  403ea6:	687b      	ldr	r3, [r7, #4]
  403ea8:	68fa      	ldr	r2, [r7, #12]
  403eaa:	605a      	str	r2, [r3, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  403eac:	683b      	ldr	r3, [r7, #0]
  403eae:	7d1b      	ldrb	r3, [r3, #20]
  403eb0:	2b00      	cmp	r3, #0
  403eb2:	d002      	beq.n	403eba <afec_set_config+0x6a>
  403eb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  403eb8:	e000      	b.n	403ebc <afec_set_config+0x6c>
  403eba:	2200      	movs	r2, #0
			(config->resolution) |
  403ebc:	683b      	ldr	r3, [r7, #0]
  403ebe:	681b      	ldr	r3, [r3, #0]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  403ec0:	431a      	orrs	r2, r3
			(config->stm ? AFEC_EMR_STM : 0);
  403ec2:	683b      	ldr	r3, [r7, #0]
  403ec4:	7d5b      	ldrb	r3, [r3, #21]
  403ec6:	2b00      	cmp	r3, #0
  403ec8:	d002      	beq.n	403ed0 <afec_set_config+0x80>
  403eca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  403ece:	e000      	b.n	403ed2 <afec_set_config+0x82>
  403ed0:	2300      	movs	r3, #0
			(config->resolution) |
  403ed2:	431a      	orrs	r2, r3
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  403ed4:	687b      	ldr	r3, [r7, #4]
  403ed6:	609a      	str	r2, [r3, #8]
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  403ed8:	683b      	ldr	r3, [r7, #0]
  403eda:	7d9b      	ldrb	r3, [r3, #22]
  403edc:	021b      	lsls	r3, r3, #8
  403ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
  403ee2:	f043 020c 	orr.w	r2, r3, #12
  403ee6:	687b      	ldr	r3, [r7, #4]
  403ee8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  403eec:	bf00      	nop
  403eee:	3714      	adds	r7, #20
  403ef0:	46bd      	mov	sp, r7
  403ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
  403ef6:	4770      	bx	lr

00403ef8 <afec_ch_set_config>:
 * \param channel The channel number
 * \param config   Configuration for the AFEC channel
 */
void afec_ch_set_config(Afec *const afec, const enum afec_channel_num channel,
		struct afec_ch_config *config)
{
  403ef8:	b580      	push	{r7, lr}
  403efa:	b086      	sub	sp, #24
  403efc:	af00      	add	r7, sp, #0
  403efe:	60f8      	str	r0, [r7, #12]
  403f00:	460b      	mov	r3, r1
  403f02:	607a      	str	r2, [r7, #4]
  403f04:	817b      	strh	r3, [r7, #10]
	afec_ch_sanity_check(afec, channel);
  403f06:	897b      	ldrh	r3, [r7, #10]
  403f08:	4619      	mov	r1, r3
  403f0a:	68f8      	ldr	r0, [r7, #12]
  403f0c:	4b1e      	ldr	r3, [pc, #120]	; (403f88 <afec_ch_set_config+0x90>)
  403f0e:	4798      	blx	r3
	uint32_t reg = 0;
  403f10:	2300      	movs	r3, #0
  403f12:	617b      	str	r3, [r7, #20]

	reg = afec->AFEC_DIFFR;
  403f14:	68fb      	ldr	r3, [r7, #12]
  403f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  403f18:	617b      	str	r3, [r7, #20]
	reg &= ~(0x1u << channel);
  403f1a:	897b      	ldrh	r3, [r7, #10]
  403f1c:	2201      	movs	r2, #1
  403f1e:	fa02 f303 	lsl.w	r3, r2, r3
  403f22:	43db      	mvns	r3, r3
  403f24:	697a      	ldr	r2, [r7, #20]
  403f26:	4013      	ands	r3, r2
  403f28:	617b      	str	r3, [r7, #20]
	reg |= (config->diff) ? (0x1u << channel) : 0;
  403f2a:	687b      	ldr	r3, [r7, #4]
  403f2c:	781b      	ldrb	r3, [r3, #0]
  403f2e:	2b00      	cmp	r3, #0
  403f30:	d004      	beq.n	403f3c <afec_ch_set_config+0x44>
  403f32:	897b      	ldrh	r3, [r7, #10]
  403f34:	2201      	movs	r2, #1
  403f36:	fa02 f303 	lsl.w	r3, r2, r3
  403f3a:	e000      	b.n	403f3e <afec_ch_set_config+0x46>
  403f3c:	2300      	movs	r3, #0
  403f3e:	697a      	ldr	r2, [r7, #20]
  403f40:	4313      	orrs	r3, r2
  403f42:	617b      	str	r3, [r7, #20]
	afec->AFEC_DIFFR = reg;
  403f44:	68fb      	ldr	r3, [r7, #12]
  403f46:	697a      	ldr	r2, [r7, #20]
  403f48:	661a      	str	r2, [r3, #96]	; 0x60

	reg = afec->AFEC_CGR;
  403f4a:	68fb      	ldr	r3, [r7, #12]
  403f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  403f4e:	617b      	str	r3, [r7, #20]
	reg &= ~(0x03u << (2 * channel));
  403f50:	897b      	ldrh	r3, [r7, #10]
  403f52:	005b      	lsls	r3, r3, #1
  403f54:	2203      	movs	r2, #3
  403f56:	fa02 f303 	lsl.w	r3, r2, r3
  403f5a:	43db      	mvns	r3, r3
  403f5c:	697a      	ldr	r2, [r7, #20]
  403f5e:	4013      	ands	r3, r2
  403f60:	617b      	str	r3, [r7, #20]
	reg |= (config->gain) << (2 * channel);
  403f62:	687b      	ldr	r3, [r7, #4]
  403f64:	785b      	ldrb	r3, [r3, #1]
  403f66:	461a      	mov	r2, r3
  403f68:	897b      	ldrh	r3, [r7, #10]
  403f6a:	005b      	lsls	r3, r3, #1
  403f6c:	fa02 f303 	lsl.w	r3, r2, r3
  403f70:	461a      	mov	r2, r3
  403f72:	697b      	ldr	r3, [r7, #20]
  403f74:	4313      	orrs	r3, r2
  403f76:	617b      	str	r3, [r7, #20]
	afec->AFEC_CGR = reg;
  403f78:	68fb      	ldr	r3, [r7, #12]
  403f7a:	697a      	ldr	r2, [r7, #20]
  403f7c:	655a      	str	r2, [r3, #84]	; 0x54
}
  403f7e:	bf00      	nop
  403f80:	3718      	adds	r7, #24
  403f82:	46bd      	mov	sp, r7
  403f84:	bd80      	pop	{r7, pc}
  403f86:	bf00      	nop
  403f88:	00403cad 	.word	0x00403cad

00403f8c <afec_temp_sensor_set_config>:
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC temperature sensor
 */
void afec_temp_sensor_set_config(Afec *const afec,
		struct afec_temp_sensor_config *config)
{
  403f8c:	b480      	push	{r7}
  403f8e:	b085      	sub	sp, #20
  403f90:	af00      	add	r7, sp, #0
  403f92:	6078      	str	r0, [r7, #4]
  403f94:	6039      	str	r1, [r7, #0]
	Assert(afec == AFEC0);

	uint32_t reg = 0;
  403f96:	2300      	movs	r3, #0
  403f98:	60fb      	str	r3, [r7, #12]

	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  403f9a:	683b      	ldr	r3, [r7, #0]
  403f9c:	781b      	ldrb	r3, [r3, #0]
  403f9e:	2b00      	cmp	r3, #0
  403fa0:	d001      	beq.n	403fa6 <afec_temp_sensor_set_config+0x1a>
  403fa2:	2301      	movs	r3, #1
  403fa4:	e000      	b.n	403fa8 <afec_temp_sensor_set_config+0x1c>
  403fa6:	2300      	movs	r3, #0
  403fa8:	683a      	ldr	r2, [r7, #0]
  403faa:	7852      	ldrb	r2, [r2, #1]
  403fac:	4313      	orrs	r3, r2
  403fae:	60fb      	str	r3, [r7, #12]
	afec->AFEC_TEMPMR = reg;
  403fb0:	687b      	ldr	r3, [r7, #4]
  403fb2:	68fa      	ldr	r2, [r7, #12]
  403fb4:	671a      	str	r2, [r3, #112]	; 0x70

	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  403fb6:	683b      	ldr	r3, [r7, #0]
  403fb8:	885b      	ldrh	r3, [r3, #2]
  403fba:	461a      	mov	r2, r3
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  403fbc:	683b      	ldr	r3, [r7, #0]
  403fbe:	889b      	ldrh	r3, [r3, #4]
  403fc0:	041b      	lsls	r3, r3, #16
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  403fc2:	431a      	orrs	r2, r3
  403fc4:	687b      	ldr	r3, [r7, #4]
  403fc6:	675a      	str	r2, [r3, #116]	; 0x74
			
}
  403fc8:	bf00      	nop
  403fca:	3714      	adds	r7, #20
  403fcc:	46bd      	mov	sp, r7
  403fce:	f85d 7b04 	ldr.w	r7, [sp], #4
  403fd2:	4770      	bx	lr

00403fd4 <afec_get_config_defaults>:
 * - AFE Bias Current Control value is 1
 *
 * \param cfg Pointer to configuration structure to be initiated.
 */
void afec_get_config_defaults(struct afec_config *const cfg)
{
  403fd4:	b580      	push	{r7, lr}
  403fd6:	b082      	sub	sp, #8
  403fd8:	af00      	add	r7, sp, #0
  403fda:	6078      	str	r0, [r7, #4]
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  403fdc:	687b      	ldr	r3, [r7, #4]
  403fde:	2200      	movs	r2, #0
  403fe0:	601a      	str	r2, [r3, #0]
	cfg->mck = sysclk_get_cpu_hz();
  403fe2:	4b12      	ldr	r3, [pc, #72]	; (40402c <afec_get_config_defaults+0x58>)
  403fe4:	4798      	blx	r3
  403fe6:	4602      	mov	r2, r0
  403fe8:	687b      	ldr	r3, [r7, #4]
  403fea:	605a      	str	r2, [r3, #4]
		cfg->afec_clock = 6000000UL;
  403fec:	687b      	ldr	r3, [r7, #4]
  403fee:	4a10      	ldr	r2, [pc, #64]	; (404030 <afec_get_config_defaults+0x5c>)
  403ff0:	609a      	str	r2, [r3, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  403ff2:	687b      	ldr	r3, [r7, #4]
  403ff4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  403ff8:	60da      	str	r2, [r3, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  403ffa:	687b      	ldr	r3, [r7, #4]
  403ffc:	2202      	movs	r2, #2
  403ffe:	741a      	strb	r2, [r3, #16]
		cfg->transfer = 1;
  404000:	687b      	ldr	r3, [r7, #4]
  404002:	2201      	movs	r2, #1
  404004:	745a      	strb	r2, [r3, #17]
		cfg->anach = true;
  404006:	687b      	ldr	r3, [r7, #4]
  404008:	2201      	movs	r2, #1
  40400a:	749a      	strb	r2, [r3, #18]
		cfg->useq = false;
  40400c:	687b      	ldr	r3, [r7, #4]
  40400e:	2200      	movs	r2, #0
  404010:	74da      	strb	r2, [r3, #19]
		cfg->tag = true;
  404012:	687b      	ldr	r3, [r7, #4]
  404014:	2201      	movs	r2, #1
  404016:	751a      	strb	r2, [r3, #20]
		cfg->stm = true;
  404018:	687b      	ldr	r3, [r7, #4]
  40401a:	2201      	movs	r2, #1
  40401c:	755a      	strb	r2, [r3, #21]
		cfg->ibctl = 1;
  40401e:	687b      	ldr	r3, [r7, #4]
  404020:	2201      	movs	r2, #1
  404022:	759a      	strb	r2, [r3, #22]
}
  404024:	bf00      	nop
  404026:	3708      	adds	r7, #8
  404028:	46bd      	mov	sp, r7
  40402a:	bd80      	pop	{r7, pc}
  40402c:	00403dcd 	.word	0x00403dcd
  404030:	005b8d80 	.word	0x005b8d80

00404034 <afec_ch_get_config_defaults>:
 * - Gain value is 1
 *
 * \param cfg Pointer to channel configuration structure to be initiated.
 */
void afec_ch_get_config_defaults(struct afec_ch_config *const cfg)
{
  404034:	b480      	push	{r7}
  404036:	b083      	sub	sp, #12
  404038:	af00      	add	r7, sp, #0
  40403a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->diff = false;
  40403c:	687b      	ldr	r3, [r7, #4]
  40403e:	2200      	movs	r2, #0
  404040:	701a      	strb	r2, [r3, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  404042:	687b      	ldr	r3, [r7, #4]
  404044:	2201      	movs	r2, #1
  404046:	705a      	strb	r2, [r3, #1]

}
  404048:	bf00      	nop
  40404a:	370c      	adds	r7, #12
  40404c:	46bd      	mov	sp, r7
  40404e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404052:	4770      	bx	lr

00404054 <afec_temp_sensor_get_config_defaults>:
 * \param cfg Pointer to temperature sensor configuration structure
 *        to be initiated.
 */
void afec_temp_sensor_get_config_defaults(
		struct afec_temp_sensor_config *const cfg)
{
  404054:	b480      	push	{r7}
  404056:	b083      	sub	sp, #12
  404058:	af00      	add	r7, sp, #0
  40405a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument. */
	Assert(cfg);

	cfg->rctc = false;
  40405c:	687b      	ldr	r3, [r7, #4]
  40405e:	2200      	movs	r2, #0
  404060:	701a      	strb	r2, [r3, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  404062:	687b      	ldr	r3, [r7, #4]
  404064:	2220      	movs	r2, #32
  404066:	705a      	strb	r2, [r3, #1]
	cfg->low_threshold= 0xFF;
  404068:	687b      	ldr	r3, [r7, #4]
  40406a:	22ff      	movs	r2, #255	; 0xff
  40406c:	805a      	strh	r2, [r3, #2]
	cfg->high_threshold= 0xFFF;
  40406e:	687b      	ldr	r3, [r7, #4]
  404070:	f640 72ff 	movw	r2, #4095	; 0xfff
  404074:	809a      	strh	r2, [r3, #4]
}
  404076:	bf00      	nop
  404078:	370c      	adds	r7, #12
  40407a:	46bd      	mov	sp, r7
  40407c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404080:	4770      	bx	lr
	...

00404084 <afec_init>:
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  404084:	b580      	push	{r7, lr}
  404086:	b084      	sub	sp, #16
  404088:	af00      	add	r7, sp, #0
  40408a:	6078      	str	r0, [r7, #4]
  40408c:	6039      	str	r1, [r7, #0]
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40408e:	6878      	ldr	r0, [r7, #4]
  404090:	4b1d      	ldr	r3, [pc, #116]	; (404108 <afec_init+0x84>)
  404092:	4798      	blx	r3
  404094:	4603      	mov	r3, r0
  404096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40409a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  40409e:	d101      	bne.n	4040a4 <afec_init+0x20>
		return STATUS_ERR_BUSY;
  4040a0:	2319      	movs	r3, #25
  4040a2:	e02c      	b.n	4040fe <afec_init+0x7a>
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  4040a4:	687b      	ldr	r3, [r7, #4]
  4040a6:	2201      	movs	r2, #1
  4040a8:	601a      	str	r2, [r3, #0]
	afec_set_config(afec, config);
  4040aa:	6839      	ldr	r1, [r7, #0]
  4040ac:	6878      	ldr	r0, [r7, #4]
  4040ae:	4b17      	ldr	r3, [pc, #92]	; (40410c <afec_init+0x88>)
  4040b0:	4798      	blx	r3

	uint32_t i;
	if(afec == AFEC0) {
  4040b2:	687b      	ldr	r3, [r7, #4]
  4040b4:	4a16      	ldr	r2, [pc, #88]	; (404110 <afec_init+0x8c>)
  4040b6:	4293      	cmp	r3, r2
  4040b8:	d10d      	bne.n	4040d6 <afec_init+0x52>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4040ba:	2300      	movs	r3, #0
  4040bc:	60fb      	str	r3, [r7, #12]
  4040be:	e007      	b.n	4040d0 <afec_init+0x4c>
			afec_callback_pointer[0][i] = 0;
  4040c0:	4a14      	ldr	r2, [pc, #80]	; (404114 <afec_init+0x90>)
  4040c2:	68fb      	ldr	r3, [r7, #12]
  4040c4:	2100      	movs	r1, #0
  4040c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4040ca:	68fb      	ldr	r3, [r7, #12]
  4040cc:	3301      	adds	r3, #1
  4040ce:	60fb      	str	r3, [r7, #12]
  4040d0:	68fb      	ldr	r3, [r7, #12]
  4040d2:	2b0f      	cmp	r3, #15
  4040d4:	d9f4      	bls.n	4040c0 <afec_init+0x3c>
		}
	}
	if(afec == AFEC1) {
  4040d6:	687b      	ldr	r3, [r7, #4]
  4040d8:	4a0f      	ldr	r2, [pc, #60]	; (404118 <afec_init+0x94>)
  4040da:	4293      	cmp	r3, r2
  4040dc:	d10e      	bne.n	4040fc <afec_init+0x78>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4040de:	2300      	movs	r3, #0
  4040e0:	60fb      	str	r3, [r7, #12]
  4040e2:	e008      	b.n	4040f6 <afec_init+0x72>
			afec_callback_pointer[1][i] = 0;
  4040e4:	4a0b      	ldr	r2, [pc, #44]	; (404114 <afec_init+0x90>)
  4040e6:	68fb      	ldr	r3, [r7, #12]
  4040e8:	3310      	adds	r3, #16
  4040ea:	2100      	movs	r1, #0
  4040ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4040f0:	68fb      	ldr	r3, [r7, #12]
  4040f2:	3301      	adds	r3, #1
  4040f4:	60fb      	str	r3, [r7, #12]
  4040f6:	68fb      	ldr	r3, [r7, #12]
  4040f8:	2b0f      	cmp	r3, #15
  4040fa:	d9f3      	bls.n	4040e4 <afec_init+0x60>
		}
	}

	return STATUS_OK;
  4040fc:	2300      	movs	r3, #0
}
  4040fe:	4618      	mov	r0, r3
  404100:	3710      	adds	r7, #16
  404102:	46bd      	mov	sp, r7
  404104:	bd80      	pop	{r7, pc}
  404106:	bf00      	nop
  404108:	00403cc5 	.word	0x00403cc5
  40410c:	00403e51 	.word	0x00403e51
  404110:	4003c000 	.word	0x4003c000
  404114:	204203dc 	.word	0x204203dc
  404118:	40064000 	.word	0x40064000

0040411c <afec_set_callback>:
 * \param callback  Callback function pointer
 * \param irq_level Interrupt level
 */
void afec_set_callback(Afec *const afec, enum afec_interrupt_source source,
		afec_callback_t callback, uint8_t irq_level)
{
  40411c:	b580      	push	{r7, lr}
  40411e:	b086      	sub	sp, #24
  404120:	af00      	add	r7, sp, #0
  404122:	60f8      	str	r0, [r7, #12]
  404124:	60b9      	str	r1, [r7, #8]
  404126:	607a      	str	r2, [r7, #4]
  404128:	70fb      	strb	r3, [r7, #3]
	Assert(afec);
	Assert(callback);

	uint32_t i = afec_find_inst_num(afec);
  40412a:	68f8      	ldr	r0, [r7, #12]
  40412c:	4b17      	ldr	r3, [pc, #92]	; (40418c <afec_set_callback+0x70>)
  40412e:	4798      	blx	r3
  404130:	6178      	str	r0, [r7, #20]
	afec_callback_pointer[i][source] = callback;
  404132:	4917      	ldr	r1, [pc, #92]	; (404190 <afec_set_callback+0x74>)
  404134:	697b      	ldr	r3, [r7, #20]
  404136:	011a      	lsls	r2, r3, #4
  404138:	68bb      	ldr	r3, [r7, #8]
  40413a:	4413      	add	r3, r2
  40413c:	687a      	ldr	r2, [r7, #4]
  40413e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (!i) {
  404142:	697b      	ldr	r3, [r7, #20]
  404144:	2b00      	cmp	r3, #0
  404146:	d10b      	bne.n	404160 <afec_set_callback+0x44>
		irq_register_handler(AFEC0_IRQn, irq_level);
  404148:	201d      	movs	r0, #29
  40414a:	4b12      	ldr	r3, [pc, #72]	; (404194 <afec_set_callback+0x78>)
  40414c:	4798      	blx	r3
  40414e:	78fb      	ldrb	r3, [r7, #3]
  404150:	4619      	mov	r1, r3
  404152:	201d      	movs	r0, #29
  404154:	4b10      	ldr	r3, [pc, #64]	; (404198 <afec_set_callback+0x7c>)
  404156:	4798      	blx	r3
  404158:	201d      	movs	r0, #29
  40415a:	4b10      	ldr	r3, [pc, #64]	; (40419c <afec_set_callback+0x80>)
  40415c:	4798      	blx	r3
  40415e:	e00d      	b.n	40417c <afec_set_callback+0x60>
	} else if (i == 1) {
  404160:	697b      	ldr	r3, [r7, #20]
  404162:	2b01      	cmp	r3, #1
  404164:	d10a      	bne.n	40417c <afec_set_callback+0x60>
		irq_register_handler(AFEC1_IRQn, irq_level);
  404166:	2028      	movs	r0, #40	; 0x28
  404168:	4b0a      	ldr	r3, [pc, #40]	; (404194 <afec_set_callback+0x78>)
  40416a:	4798      	blx	r3
  40416c:	78fb      	ldrb	r3, [r7, #3]
  40416e:	4619      	mov	r1, r3
  404170:	2028      	movs	r0, #40	; 0x28
  404172:	4b09      	ldr	r3, [pc, #36]	; (404198 <afec_set_callback+0x7c>)
  404174:	4798      	blx	r3
  404176:	2028      	movs	r0, #40	; 0x28
  404178:	4b08      	ldr	r3, [pc, #32]	; (40419c <afec_set_callback+0x80>)
  40417a:	4798      	blx	r3
	}
	/* Enable the specified interrupt source */
	afec_enable_interrupt(afec, source);
  40417c:	68b9      	ldr	r1, [r7, #8]
  40417e:	68f8      	ldr	r0, [r7, #12]
  404180:	4b07      	ldr	r3, [pc, #28]	; (4041a0 <afec_set_callback+0x84>)
  404182:	4798      	blx	r3
}
  404184:	bf00      	nop
  404186:	3718      	adds	r7, #24
  404188:	46bd      	mov	sp, r7
  40418a:	bd80      	pop	{r7, pc}
  40418c:	00403de1 	.word	0x00403de1
  404190:	204203dc 	.word	0x204203dc
  404194:	00403b9d 	.word	0x00403b9d
  404198:	00403bd1 	.word	0x00403bd1
  40419c:	00403b69 	.word	0x00403b69
  4041a0:	004041a5 	.word	0x004041a5

004041a4 <afec_enable_interrupt>:
 * \param afec  Base address of the AFEC.
 * \param interrupt_source Interrupts to be enabled.
 */
void afec_enable_interrupt(Afec *const afec,
		enum afec_interrupt_source interrupt_source)
{
  4041a4:	b480      	push	{r7}
  4041a6:	b083      	sub	sp, #12
  4041a8:	af00      	add	r7, sp, #0
  4041aa:	6078      	str	r0, [r7, #4]
  4041ac:	6039      	str	r1, [r7, #0]
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4041ae:	683b      	ldr	r3, [r7, #0]
  4041b0:	4a19      	ldr	r2, [pc, #100]	; (404218 <afec_enable_interrupt+0x74>)
  4041b2:	4293      	cmp	r3, r2
  4041b4:	d103      	bne.n	4041be <afec_enable_interrupt+0x1a>
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4041b6:	687b      	ldr	r3, [r7, #4]
  4041b8:	4a17      	ldr	r2, [pc, #92]	; (404218 <afec_enable_interrupt+0x74>)
  4041ba:	625a      	str	r2, [r3, #36]	; 0x24
		return;
  4041bc:	e026      	b.n	40420c <afec_enable_interrupt+0x68>
	}

	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4041be:	683b      	ldr	r3, [r7, #0]
  4041c0:	2b0b      	cmp	r3, #11
  4041c2:	d80f      	bhi.n	4041e4 <afec_enable_interrupt+0x40>
	  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  4041c4:	683b      	ldr	r3, [r7, #0]
  4041c6:	2b0b      	cmp	r3, #11
  4041c8:	d104      	bne.n	4041d4 <afec_enable_interrupt+0x30>
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4041ca:	687b      	ldr	r3, [r7, #4]
  4041cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4041d0:	625a      	str	r2, [r3, #36]	; 0x24
  4041d2:	e01b      	b.n	40420c <afec_enable_interrupt+0x68>
	  #else
		if (interrupt_source == AFEC_INTERRUPT_EOC_15) {
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;	  
	  #endif 
		} else {
			afec->AFEC_IER = 1 << interrupt_source;
  4041d4:	2201      	movs	r2, #1
  4041d6:	683b      	ldr	r3, [r7, #0]
  4041d8:	fa02 f303 	lsl.w	r3, r2, r3
  4041dc:	461a      	mov	r2, r3
  4041de:	687b      	ldr	r3, [r7, #4]
  4041e0:	625a      	str	r2, [r3, #36]	; 0x24
  4041e2:	e013      	b.n	40420c <afec_enable_interrupt+0x68>
		}
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4041e4:	683b      	ldr	r3, [r7, #0]
  4041e6:	2b0e      	cmp	r3, #14
  4041e8:	d808      	bhi.n	4041fc <afec_enable_interrupt+0x58>
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4041ea:	683b      	ldr	r3, [r7, #0]
  4041ec:	330c      	adds	r3, #12
  4041ee:	2201      	movs	r2, #1
  4041f0:	fa02 f303 	lsl.w	r3, r2, r3
  4041f4:	461a      	mov	r2, r3
  4041f6:	687b      	ldr	r3, [r7, #4]
  4041f8:	625a      	str	r2, [r3, #36]	; 0x24
  4041fa:	e007      	b.n	40420c <afec_enable_interrupt+0x68>
	} else {
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
				+ AFEC_INTERRUPT_GAP2);
  4041fc:	683b      	ldr	r3, [r7, #0]
  4041fe:	330f      	adds	r3, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  404200:	2201      	movs	r2, #1
  404202:	fa02 f303 	lsl.w	r3, r2, r3
  404206:	461a      	mov	r2, r3
  404208:	687b      	ldr	r3, [r7, #4]
  40420a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
  40420c:	370c      	adds	r7, #12
  40420e:	46bd      	mov	sp, r7
  404210:	f85d 7b04 	ldr.w	r7, [sp], #4
  404214:	4770      	bx	lr
  404216:	bf00      	nop
  404218:	47000fff 	.word	0x47000fff

0040421c <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  40421c:	b580      	push	{r7, lr}
  40421e:	b082      	sub	sp, #8
  404220:	af00      	add	r7, sp, #0
  404222:	4603      	mov	r3, r0
  404224:	6039      	str	r1, [r7, #0]
  404226:	71fb      	strb	r3, [r7, #7]
	if (afec_callback_pointer[inst_num][source]) {
  404228:	79fb      	ldrb	r3, [r7, #7]
  40422a:	490a      	ldr	r1, [pc, #40]	; (404254 <afec_interrupt+0x38>)
  40422c:	011a      	lsls	r2, r3, #4
  40422e:	683b      	ldr	r3, [r7, #0]
  404230:	4413      	add	r3, r2
  404232:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  404236:	2b00      	cmp	r3, #0
  404238:	d007      	beq.n	40424a <afec_interrupt+0x2e>
		afec_callback_pointer[inst_num][source]();
  40423a:	79fb      	ldrb	r3, [r7, #7]
  40423c:	4905      	ldr	r1, [pc, #20]	; (404254 <afec_interrupt+0x38>)
  40423e:	011a      	lsls	r2, r3, #4
  404240:	683b      	ldr	r3, [r7, #0]
  404242:	4413      	add	r3, r2
  404244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  404248:	4798      	blx	r3
	}
}
  40424a:	bf00      	nop
  40424c:	3708      	adds	r7, #8
  40424e:	46bd      	mov	sp, r7
  404250:	bd80      	pop	{r7, pc}
  404252:	bf00      	nop
  404254:	204203dc 	.word	0x204203dc

00404258 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  404258:	b590      	push	{r4, r7, lr}
  40425a:	b087      	sub	sp, #28
  40425c:	af00      	add	r7, sp, #0
  40425e:	6078      	str	r0, [r7, #4]
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  404260:	6878      	ldr	r0, [r7, #4]
  404262:	4b28      	ldr	r3, [pc, #160]	; (404304 <afec_process_callback+0xac>)
  404264:	4798      	blx	r3
  404266:	4604      	mov	r4, r0
  404268:	6878      	ldr	r0, [r7, #4]
  40426a:	4b27      	ldr	r3, [pc, #156]	; (404308 <afec_process_callback+0xb0>)
  40426c:	4798      	blx	r3
  40426e:	4603      	mov	r3, r0
  404270:	4023      	ands	r3, r4
  404272:	60fb      	str	r3, [r7, #12]
	inst_num = afec_find_inst_num(afec);
  404274:	6878      	ldr	r0, [r7, #4]
  404276:	4b25      	ldr	r3, [pc, #148]	; (40430c <afec_process_callback+0xb4>)
  404278:	4798      	blx	r3
  40427a:	6138      	str	r0, [r7, #16]

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40427c:	2300      	movs	r3, #0
  40427e:	617b      	str	r3, [r7, #20]
  404280:	e039      	b.n	4042f6 <afec_process_callback+0x9e>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  404282:	697b      	ldr	r3, [r7, #20]
  404284:	2b0b      	cmp	r3, #11
  404286:	d80f      	bhi.n	4042a8 <afec_process_callback+0x50>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  404288:	2201      	movs	r2, #1
  40428a:	697b      	ldr	r3, [r7, #20]
  40428c:	fa02 f303 	lsl.w	r3, r2, r3
  404290:	461a      	mov	r2, r3
  404292:	68fb      	ldr	r3, [r7, #12]
  404294:	4013      	ands	r3, r2
  404296:	2b00      	cmp	r3, #0
  404298:	d02a      	beq.n	4042f0 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40429a:	693b      	ldr	r3, [r7, #16]
  40429c:	b2db      	uxtb	r3, r3
  40429e:	6979      	ldr	r1, [r7, #20]
  4042a0:	4618      	mov	r0, r3
  4042a2:	4b1b      	ldr	r3, [pc, #108]	; (404310 <afec_process_callback+0xb8>)
  4042a4:	4798      	blx	r3
  4042a6:	e023      	b.n	4042f0 <afec_process_callback+0x98>
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4042a8:	697b      	ldr	r3, [r7, #20]
  4042aa:	2b0e      	cmp	r3, #14
  4042ac:	d810      	bhi.n	4042d0 <afec_process_callback+0x78>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4042ae:	697b      	ldr	r3, [r7, #20]
  4042b0:	330c      	adds	r3, #12
  4042b2:	2201      	movs	r2, #1
  4042b4:	fa02 f303 	lsl.w	r3, r2, r3
  4042b8:	461a      	mov	r2, r3
  4042ba:	68fb      	ldr	r3, [r7, #12]
  4042bc:	4013      	ands	r3, r2
  4042be:	2b00      	cmp	r3, #0
  4042c0:	d016      	beq.n	4042f0 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4042c2:	693b      	ldr	r3, [r7, #16]
  4042c4:	b2db      	uxtb	r3, r3
  4042c6:	6979      	ldr	r1, [r7, #20]
  4042c8:	4618      	mov	r0, r3
  4042ca:	4b11      	ldr	r3, [pc, #68]	; (404310 <afec_process_callback+0xb8>)
  4042cc:	4798      	blx	r3
  4042ce:	e00f      	b.n	4042f0 <afec_process_callback+0x98>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4042d0:	697b      	ldr	r3, [r7, #20]
  4042d2:	330f      	adds	r3, #15
  4042d4:	2201      	movs	r2, #1
  4042d6:	fa02 f303 	lsl.w	r3, r2, r3
  4042da:	461a      	mov	r2, r3
  4042dc:	68fb      	ldr	r3, [r7, #12]
  4042de:	4013      	ands	r3, r2
  4042e0:	2b00      	cmp	r3, #0
  4042e2:	d005      	beq.n	4042f0 <afec_process_callback+0x98>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4042e4:	693b      	ldr	r3, [r7, #16]
  4042e6:	b2db      	uxtb	r3, r3
  4042e8:	6979      	ldr	r1, [r7, #20]
  4042ea:	4618      	mov	r0, r3
  4042ec:	4b08      	ldr	r3, [pc, #32]	; (404310 <afec_process_callback+0xb8>)
  4042ee:	4798      	blx	r3
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4042f0:	697b      	ldr	r3, [r7, #20]
  4042f2:	3301      	adds	r3, #1
  4042f4:	617b      	str	r3, [r7, #20]
  4042f6:	697b      	ldr	r3, [r7, #20]
  4042f8:	2b0f      	cmp	r3, #15
  4042fa:	d9c2      	bls.n	404282 <afec_process_callback+0x2a>
			}
		}
	}
}
  4042fc:	bf00      	nop
  4042fe:	371c      	adds	r7, #28
  404300:	46bd      	mov	sp, r7
  404302:	bd90      	pop	{r4, r7, pc}
  404304:	00403cc5 	.word	0x00403cc5
  404308:	00403cdd 	.word	0x00403cdd
  40430c:	00403de1 	.word	0x00403de1
  404310:	0040421d 	.word	0x0040421d

00404314 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  404314:	b580      	push	{r7, lr}
  404316:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC0);
  404318:	4802      	ldr	r0, [pc, #8]	; (404324 <AFEC0_Handler+0x10>)
  40431a:	4b03      	ldr	r3, [pc, #12]	; (404328 <AFEC0_Handler+0x14>)
  40431c:	4798      	blx	r3
}
  40431e:	bf00      	nop
  404320:	bd80      	pop	{r7, pc}
  404322:	bf00      	nop
  404324:	4003c000 	.word	0x4003c000
  404328:	00404259 	.word	0x00404259

0040432c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40432c:	b580      	push	{r7, lr}
  40432e:	af00      	add	r7, sp, #0
	afec_process_callback(AFEC1);
  404330:	4802      	ldr	r0, [pc, #8]	; (40433c <AFEC1_Handler+0x10>)
  404332:	4b03      	ldr	r3, [pc, #12]	; (404340 <AFEC1_Handler+0x14>)
  404334:	4798      	blx	r3
}
  404336:	bf00      	nop
  404338:	bd80      	pop	{r7, pc}
  40433a:	bf00      	nop
  40433c:	40064000 	.word	0x40064000
  404340:	00404259 	.word	0x00404259

00404344 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  404344:	b580      	push	{r7, lr}
  404346:	b084      	sub	sp, #16
  404348:	af00      	add	r7, sp, #0
  40434a:	6078      	str	r0, [r7, #4]
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  40434c:	6878      	ldr	r0, [r7, #4]
  40434e:	4b06      	ldr	r3, [pc, #24]	; (404368 <afec_enable+0x24>)
  404350:	4798      	blx	r3
  404352:	60f8      	str	r0, [r7, #12]
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  404354:	68f8      	ldr	r0, [r7, #12]
  404356:	4b05      	ldr	r3, [pc, #20]	; (40436c <afec_enable+0x28>)
  404358:	4798      	blx	r3
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
  40435a:	2002      	movs	r0, #2
  40435c:	4b04      	ldr	r3, [pc, #16]	; (404370 <afec_enable+0x2c>)
  40435e:	4798      	blx	r3
}
  404360:	bf00      	nop
  404362:	3710      	adds	r7, #16
  404364:	46bd      	mov	sp, r7
  404366:	bd80      	pop	{r7, pc}
  404368:	00403e19 	.word	0x00403e19
  40436c:	00404795 	.word	0x00404795
  404370:	00403cf5 	.word	0x00403cf5

00404374 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  404374:	b480      	push	{r7}
  404376:	b083      	sub	sp, #12
  404378:	af00      	add	r7, sp, #0
  40437a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40437c:	687b      	ldr	r3, [r7, #4]
  40437e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  404380:	4618      	mov	r0, r3
  404382:	370c      	adds	r7, #12
  404384:	46bd      	mov	sp, r7
  404386:	f85d 7b04 	ldr.w	r7, [sp], #4
  40438a:	4770      	bx	lr

0040438c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40438c:	b480      	push	{r7}
  40438e:	b083      	sub	sp, #12
  404390:	af00      	add	r7, sp, #0
  404392:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  404394:	687b      	ldr	r3, [r7, #4]
  404396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  404398:	4618      	mov	r0, r3
  40439a:	370c      	adds	r7, #12
  40439c:	46bd      	mov	sp, r7
  40439e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4043a2:	4770      	bx	lr

004043a4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4043a4:	b580      	push	{r7, lr}
  4043a6:	b084      	sub	sp, #16
  4043a8:	af00      	add	r7, sp, #0
  4043aa:	6078      	str	r0, [r7, #4]
  4043ac:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4043ae:	6878      	ldr	r0, [r7, #4]
  4043b0:	4b26      	ldr	r3, [pc, #152]	; (40444c <pio_handler_process+0xa8>)
  4043b2:	4798      	blx	r3
  4043b4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  4043b6:	6878      	ldr	r0, [r7, #4]
  4043b8:	4b25      	ldr	r3, [pc, #148]	; (404450 <pio_handler_process+0xac>)
  4043ba:	4798      	blx	r3
  4043bc:	4602      	mov	r2, r0
  4043be:	68fb      	ldr	r3, [r7, #12]
  4043c0:	4013      	ands	r3, r2
  4043c2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  4043c4:	68fb      	ldr	r3, [r7, #12]
  4043c6:	2b00      	cmp	r3, #0
  4043c8:	d03c      	beq.n	404444 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  4043ca:	2300      	movs	r3, #0
  4043cc:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  4043ce:	e034      	b.n	40443a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4043d0:	4a20      	ldr	r2, [pc, #128]	; (404454 <pio_handler_process+0xb0>)
  4043d2:	68bb      	ldr	r3, [r7, #8]
  4043d4:	011b      	lsls	r3, r3, #4
  4043d6:	4413      	add	r3, r2
  4043d8:	681a      	ldr	r2, [r3, #0]
  4043da:	683b      	ldr	r3, [r7, #0]
  4043dc:	429a      	cmp	r2, r3
  4043de:	d126      	bne.n	40442e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4043e0:	4a1c      	ldr	r2, [pc, #112]	; (404454 <pio_handler_process+0xb0>)
  4043e2:	68bb      	ldr	r3, [r7, #8]
  4043e4:	011b      	lsls	r3, r3, #4
  4043e6:	4413      	add	r3, r2
  4043e8:	3304      	adds	r3, #4
  4043ea:	681a      	ldr	r2, [r3, #0]
  4043ec:	68fb      	ldr	r3, [r7, #12]
  4043ee:	4013      	ands	r3, r2
  4043f0:	2b00      	cmp	r3, #0
  4043f2:	d01c      	beq.n	40442e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4043f4:	4a17      	ldr	r2, [pc, #92]	; (404454 <pio_handler_process+0xb0>)
  4043f6:	68bb      	ldr	r3, [r7, #8]
  4043f8:	011b      	lsls	r3, r3, #4
  4043fa:	4413      	add	r3, r2
  4043fc:	330c      	adds	r3, #12
  4043fe:	681b      	ldr	r3, [r3, #0]
  404400:	4914      	ldr	r1, [pc, #80]	; (404454 <pio_handler_process+0xb0>)
  404402:	68ba      	ldr	r2, [r7, #8]
  404404:	0112      	lsls	r2, r2, #4
  404406:	440a      	add	r2, r1
  404408:	6810      	ldr	r0, [r2, #0]
  40440a:	4912      	ldr	r1, [pc, #72]	; (404454 <pio_handler_process+0xb0>)
  40440c:	68ba      	ldr	r2, [r7, #8]
  40440e:	0112      	lsls	r2, r2, #4
  404410:	440a      	add	r2, r1
  404412:	3204      	adds	r2, #4
  404414:	6812      	ldr	r2, [r2, #0]
  404416:	4611      	mov	r1, r2
  404418:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40441a:	4a0e      	ldr	r2, [pc, #56]	; (404454 <pio_handler_process+0xb0>)
  40441c:	68bb      	ldr	r3, [r7, #8]
  40441e:	011b      	lsls	r3, r3, #4
  404420:	4413      	add	r3, r2
  404422:	3304      	adds	r3, #4
  404424:	681b      	ldr	r3, [r3, #0]
  404426:	43db      	mvns	r3, r3
  404428:	68fa      	ldr	r2, [r7, #12]
  40442a:	4013      	ands	r3, r2
  40442c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40442e:	68bb      	ldr	r3, [r7, #8]
  404430:	3301      	adds	r3, #1
  404432:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  404434:	68bb      	ldr	r3, [r7, #8]
  404436:	2b06      	cmp	r3, #6
  404438:	d803      	bhi.n	404442 <pio_handler_process+0x9e>
		while (status != 0) {
  40443a:	68fb      	ldr	r3, [r7, #12]
  40443c:	2b00      	cmp	r3, #0
  40443e:	d1c7      	bne.n	4043d0 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  404440:	e000      	b.n	404444 <pio_handler_process+0xa0>
				break;
  404442:	bf00      	nop
}
  404444:	bf00      	nop
  404446:	3710      	adds	r7, #16
  404448:	46bd      	mov	sp, r7
  40444a:	bd80      	pop	{r7, pc}
  40444c:	00404375 	.word	0x00404375
  404450:	0040438d 	.word	0x0040438d
  404454:	2042031c 	.word	0x2042031c

00404458 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  404458:	b580      	push	{r7, lr}
  40445a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40445c:	210a      	movs	r1, #10
  40445e:	4802      	ldr	r0, [pc, #8]	; (404468 <PIOA_Handler+0x10>)
  404460:	4b02      	ldr	r3, [pc, #8]	; (40446c <PIOA_Handler+0x14>)
  404462:	4798      	blx	r3
}
  404464:	bf00      	nop
  404466:	bd80      	pop	{r7, pc}
  404468:	400e0e00 	.word	0x400e0e00
  40446c:	004043a5 	.word	0x004043a5

00404470 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  404470:	b580      	push	{r7, lr}
  404472:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  404474:	210b      	movs	r1, #11
  404476:	4802      	ldr	r0, [pc, #8]	; (404480 <PIOB_Handler+0x10>)
  404478:	4b02      	ldr	r3, [pc, #8]	; (404484 <PIOB_Handler+0x14>)
  40447a:	4798      	blx	r3
}
  40447c:	bf00      	nop
  40447e:	bd80      	pop	{r7, pc}
  404480:	400e1000 	.word	0x400e1000
  404484:	004043a5 	.word	0x004043a5

00404488 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  404488:	b580      	push	{r7, lr}
  40448a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  40448c:	210c      	movs	r1, #12
  40448e:	4802      	ldr	r0, [pc, #8]	; (404498 <PIOC_Handler+0x10>)
  404490:	4b02      	ldr	r3, [pc, #8]	; (40449c <PIOC_Handler+0x14>)
  404492:	4798      	blx	r3
}
  404494:	bf00      	nop
  404496:	bd80      	pop	{r7, pc}
  404498:	400e1200 	.word	0x400e1200
  40449c:	004043a5 	.word	0x004043a5

004044a0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4044a0:	b580      	push	{r7, lr}
  4044a2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4044a4:	2110      	movs	r1, #16
  4044a6:	4802      	ldr	r0, [pc, #8]	; (4044b0 <PIOD_Handler+0x10>)
  4044a8:	4b02      	ldr	r3, [pc, #8]	; (4044b4 <PIOD_Handler+0x14>)
  4044aa:	4798      	blx	r3
}
  4044ac:	bf00      	nop
  4044ae:	bd80      	pop	{r7, pc}
  4044b0:	400e1400 	.word	0x400e1400
  4044b4:	004043a5 	.word	0x004043a5

004044b8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4044b8:	b580      	push	{r7, lr}
  4044ba:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4044bc:	2111      	movs	r1, #17
  4044be:	4802      	ldr	r0, [pc, #8]	; (4044c8 <PIOE_Handler+0x10>)
  4044c0:	4b02      	ldr	r3, [pc, #8]	; (4044cc <PIOE_Handler+0x14>)
  4044c2:	4798      	blx	r3
}
  4044c4:	bf00      	nop
  4044c6:	bd80      	pop	{r7, pc}
  4044c8:	400e1600 	.word	0x400e1600
  4044cc:	004043a5 	.word	0x004043a5

004044d0 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  4044d0:	b480      	push	{r7}
  4044d2:	b083      	sub	sp, #12
  4044d4:	af00      	add	r7, sp, #0
  4044d6:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  4044d8:	687b      	ldr	r3, [r7, #4]
  4044da:	3b01      	subs	r3, #1
  4044dc:	2b03      	cmp	r3, #3
  4044de:	d81a      	bhi.n	404516 <pmc_mck_set_division+0x46>
  4044e0:	a201      	add	r2, pc, #4	; (adr r2, 4044e8 <pmc_mck_set_division+0x18>)
  4044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4044e6:	bf00      	nop
  4044e8:	004044f9 	.word	0x004044f9
  4044ec:	004044ff 	.word	0x004044ff
  4044f0:	00404507 	.word	0x00404507
  4044f4:	0040450f 	.word	0x0040450f
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4044f8:	2300      	movs	r3, #0
  4044fa:	607b      	str	r3, [r7, #4]
			break;
  4044fc:	e00e      	b.n	40451c <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  4044fe:	f44f 7380 	mov.w	r3, #256	; 0x100
  404502:	607b      	str	r3, [r7, #4]
			break;
  404504:	e00a      	b.n	40451c <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  404506:	f44f 7340 	mov.w	r3, #768	; 0x300
  40450a:	607b      	str	r3, [r7, #4]
			break;
  40450c:	e006      	b.n	40451c <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40450e:	f44f 7300 	mov.w	r3, #512	; 0x200
  404512:	607b      	str	r3, [r7, #4]
			break;
  404514:	e002      	b.n	40451c <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  404516:	2300      	movs	r3, #0
  404518:	607b      	str	r3, [r7, #4]
			break;
  40451a:	bf00      	nop
	}
	PMC->PMC_MCKR =
  40451c:	490a      	ldr	r1, [pc, #40]	; (404548 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40451e:	4b0a      	ldr	r3, [pc, #40]	; (404548 <pmc_mck_set_division+0x78>)
  404520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  404526:	687b      	ldr	r3, [r7, #4]
  404528:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  40452a:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40452c:	bf00      	nop
  40452e:	4b06      	ldr	r3, [pc, #24]	; (404548 <pmc_mck_set_division+0x78>)
  404530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404532:	f003 0308 	and.w	r3, r3, #8
  404536:	2b00      	cmp	r3, #0
  404538:	d0f9      	beq.n	40452e <pmc_mck_set_division+0x5e>
}
  40453a:	bf00      	nop
  40453c:	370c      	adds	r7, #12
  40453e:	46bd      	mov	sp, r7
  404540:	f85d 7b04 	ldr.w	r7, [sp], #4
  404544:	4770      	bx	lr
  404546:	bf00      	nop
  404548:	400e0600 	.word	0x400e0600

0040454c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40454c:	b480      	push	{r7}
  40454e:	b085      	sub	sp, #20
  404550:	af00      	add	r7, sp, #0
  404552:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404554:	491d      	ldr	r1, [pc, #116]	; (4045cc <pmc_switch_mck_to_pllack+0x80>)
  404556:	4b1d      	ldr	r3, [pc, #116]	; (4045cc <pmc_switch_mck_to_pllack+0x80>)
  404558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40455a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40455e:	687b      	ldr	r3, [r7, #4]
  404560:	4313      	orrs	r3, r2
  404562:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  404568:	60fb      	str	r3, [r7, #12]
  40456a:	e007      	b.n	40457c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40456c:	68fb      	ldr	r3, [r7, #12]
  40456e:	2b00      	cmp	r3, #0
  404570:	d101      	bne.n	404576 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  404572:	2301      	movs	r3, #1
  404574:	e023      	b.n	4045be <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  404576:	68fb      	ldr	r3, [r7, #12]
  404578:	3b01      	subs	r3, #1
  40457a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40457c:	4b13      	ldr	r3, [pc, #76]	; (4045cc <pmc_switch_mck_to_pllack+0x80>)
  40457e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404580:	f003 0308 	and.w	r3, r3, #8
  404584:	2b00      	cmp	r3, #0
  404586:	d0f1      	beq.n	40456c <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  404588:	4a10      	ldr	r2, [pc, #64]	; (4045cc <pmc_switch_mck_to_pllack+0x80>)
  40458a:	4b10      	ldr	r3, [pc, #64]	; (4045cc <pmc_switch_mck_to_pllack+0x80>)
  40458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40458e:	f023 0303 	bic.w	r3, r3, #3
  404592:	f043 0302 	orr.w	r3, r3, #2
  404596:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40459c:	60fb      	str	r3, [r7, #12]
  40459e:	e007      	b.n	4045b0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4045a0:	68fb      	ldr	r3, [r7, #12]
  4045a2:	2b00      	cmp	r3, #0
  4045a4:	d101      	bne.n	4045aa <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4045a6:	2301      	movs	r3, #1
  4045a8:	e009      	b.n	4045be <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4045aa:	68fb      	ldr	r3, [r7, #12]
  4045ac:	3b01      	subs	r3, #1
  4045ae:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4045b0:	4b06      	ldr	r3, [pc, #24]	; (4045cc <pmc_switch_mck_to_pllack+0x80>)
  4045b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4045b4:	f003 0308 	and.w	r3, r3, #8
  4045b8:	2b00      	cmp	r3, #0
  4045ba:	d0f1      	beq.n	4045a0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4045bc:	2300      	movs	r3, #0
}
  4045be:	4618      	mov	r0, r3
  4045c0:	3714      	adds	r7, #20
  4045c2:	46bd      	mov	sp, r7
  4045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4045c8:	4770      	bx	lr
  4045ca:	bf00      	nop
  4045cc:	400e0600 	.word	0x400e0600

004045d0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4045d0:	b480      	push	{r7}
  4045d2:	b083      	sub	sp, #12
  4045d4:	af00      	add	r7, sp, #0
  4045d6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4045d8:	687b      	ldr	r3, [r7, #4]
  4045da:	2b01      	cmp	r3, #1
  4045dc:	d105      	bne.n	4045ea <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4045de:	4907      	ldr	r1, [pc, #28]	; (4045fc <pmc_switch_sclk_to_32kxtal+0x2c>)
  4045e0:	4b06      	ldr	r3, [pc, #24]	; (4045fc <pmc_switch_sclk_to_32kxtal+0x2c>)
  4045e2:	689a      	ldr	r2, [r3, #8]
  4045e4:	4b06      	ldr	r3, [pc, #24]	; (404600 <pmc_switch_sclk_to_32kxtal+0x30>)
  4045e6:	4313      	orrs	r3, r2
  4045e8:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4045ea:	4b04      	ldr	r3, [pc, #16]	; (4045fc <pmc_switch_sclk_to_32kxtal+0x2c>)
  4045ec:	4a05      	ldr	r2, [pc, #20]	; (404604 <pmc_switch_sclk_to_32kxtal+0x34>)
  4045ee:	601a      	str	r2, [r3, #0]
}
  4045f0:	bf00      	nop
  4045f2:	370c      	adds	r7, #12
  4045f4:	46bd      	mov	sp, r7
  4045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4045fa:	4770      	bx	lr
  4045fc:	400e1810 	.word	0x400e1810
  404600:	a5100000 	.word	0xa5100000
  404604:	a5000008 	.word	0xa5000008

00404608 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  404608:	b480      	push	{r7}
  40460a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40460c:	4b09      	ldr	r3, [pc, #36]	; (404634 <pmc_osc_is_ready_32kxtal+0x2c>)
  40460e:	695b      	ldr	r3, [r3, #20]
  404610:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  404614:	2b00      	cmp	r3, #0
  404616:	d007      	beq.n	404628 <pmc_osc_is_ready_32kxtal+0x20>
  404618:	4b07      	ldr	r3, [pc, #28]	; (404638 <pmc_osc_is_ready_32kxtal+0x30>)
  40461a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40461c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404620:	2b00      	cmp	r3, #0
  404622:	d001      	beq.n	404628 <pmc_osc_is_ready_32kxtal+0x20>
  404624:	2301      	movs	r3, #1
  404626:	e000      	b.n	40462a <pmc_osc_is_ready_32kxtal+0x22>
  404628:	2300      	movs	r3, #0
}
  40462a:	4618      	mov	r0, r3
  40462c:	46bd      	mov	sp, r7
  40462e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404632:	4770      	bx	lr
  404634:	400e1810 	.word	0x400e1810
  404638:	400e0600 	.word	0x400e0600

0040463c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40463c:	b480      	push	{r7}
  40463e:	b083      	sub	sp, #12
  404640:	af00      	add	r7, sp, #0
  404642:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  404644:	4915      	ldr	r1, [pc, #84]	; (40469c <pmc_switch_mainck_to_fastrc+0x60>)
  404646:	4b15      	ldr	r3, [pc, #84]	; (40469c <pmc_switch_mainck_to_fastrc+0x60>)
  404648:	6a1a      	ldr	r2, [r3, #32]
  40464a:	4b15      	ldr	r3, [pc, #84]	; (4046a0 <pmc_switch_mainck_to_fastrc+0x64>)
  40464c:	4313      	orrs	r3, r2
  40464e:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404650:	bf00      	nop
  404652:	4b12      	ldr	r3, [pc, #72]	; (40469c <pmc_switch_mainck_to_fastrc+0x60>)
  404654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40465a:	2b00      	cmp	r3, #0
  40465c:	d0f9      	beq.n	404652 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40465e:	490f      	ldr	r1, [pc, #60]	; (40469c <pmc_switch_mainck_to_fastrc+0x60>)
  404660:	4b0e      	ldr	r3, [pc, #56]	; (40469c <pmc_switch_mainck_to_fastrc+0x60>)
  404662:	6a1a      	ldr	r2, [r3, #32]
  404664:	4b0f      	ldr	r3, [pc, #60]	; (4046a4 <pmc_switch_mainck_to_fastrc+0x68>)
  404666:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  404668:	687a      	ldr	r2, [r7, #4]
  40466a:	4313      	orrs	r3, r2
  40466c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  404670:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  404672:	bf00      	nop
  404674:	4b09      	ldr	r3, [pc, #36]	; (40469c <pmc_switch_mainck_to_fastrc+0x60>)
  404676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40467c:	2b00      	cmp	r3, #0
  40467e:	d0f9      	beq.n	404674 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  404680:	4906      	ldr	r1, [pc, #24]	; (40469c <pmc_switch_mainck_to_fastrc+0x60>)
  404682:	4b06      	ldr	r3, [pc, #24]	; (40469c <pmc_switch_mainck_to_fastrc+0x60>)
  404684:	6a1a      	ldr	r2, [r3, #32]
  404686:	4b08      	ldr	r3, [pc, #32]	; (4046a8 <pmc_switch_mainck_to_fastrc+0x6c>)
  404688:	4013      	ands	r3, r2
  40468a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40468e:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  404690:	bf00      	nop
  404692:	370c      	adds	r7, #12
  404694:	46bd      	mov	sp, r7
  404696:	f85d 7b04 	ldr.w	r7, [sp], #4
  40469a:	4770      	bx	lr
  40469c:	400e0600 	.word	0x400e0600
  4046a0:	00370008 	.word	0x00370008
  4046a4:	ffc8ff8f 	.word	0xffc8ff8f
  4046a8:	fec8ffff 	.word	0xfec8ffff

004046ac <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4046ac:	b480      	push	{r7}
  4046ae:	b083      	sub	sp, #12
  4046b0:	af00      	add	r7, sp, #0
  4046b2:	6078      	str	r0, [r7, #4]
  4046b4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4046b6:	687b      	ldr	r3, [r7, #4]
  4046b8:	2b00      	cmp	r3, #0
  4046ba:	d008      	beq.n	4046ce <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4046bc:	4913      	ldr	r1, [pc, #76]	; (40470c <pmc_switch_mainck_to_xtal+0x60>)
  4046be:	4b13      	ldr	r3, [pc, #76]	; (40470c <pmc_switch_mainck_to_xtal+0x60>)
  4046c0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4046c2:	4a13      	ldr	r2, [pc, #76]	; (404710 <pmc_switch_mainck_to_xtal+0x64>)
  4046c4:	401a      	ands	r2, r3
  4046c6:	4b13      	ldr	r3, [pc, #76]	; (404714 <pmc_switch_mainck_to_xtal+0x68>)
  4046c8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4046ca:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4046cc:	e018      	b.n	404700 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4046ce:	490f      	ldr	r1, [pc, #60]	; (40470c <pmc_switch_mainck_to_xtal+0x60>)
  4046d0:	4b0e      	ldr	r3, [pc, #56]	; (40470c <pmc_switch_mainck_to_xtal+0x60>)
  4046d2:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4046d4:	4b10      	ldr	r3, [pc, #64]	; (404718 <pmc_switch_mainck_to_xtal+0x6c>)
  4046d6:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4046d8:	683a      	ldr	r2, [r7, #0]
  4046da:	0212      	lsls	r2, r2, #8
  4046dc:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4046de:	431a      	orrs	r2, r3
  4046e0:	4b0e      	ldr	r3, [pc, #56]	; (40471c <pmc_switch_mainck_to_xtal+0x70>)
  4046e2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4046e4:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4046e6:	bf00      	nop
  4046e8:	4b08      	ldr	r3, [pc, #32]	; (40470c <pmc_switch_mainck_to_xtal+0x60>)
  4046ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4046ec:	f003 0301 	and.w	r3, r3, #1
  4046f0:	2b00      	cmp	r3, #0
  4046f2:	d0f9      	beq.n	4046e8 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4046f4:	4905      	ldr	r1, [pc, #20]	; (40470c <pmc_switch_mainck_to_xtal+0x60>)
  4046f6:	4b05      	ldr	r3, [pc, #20]	; (40470c <pmc_switch_mainck_to_xtal+0x60>)
  4046f8:	6a1a      	ldr	r2, [r3, #32]
  4046fa:	4b09      	ldr	r3, [pc, #36]	; (404720 <pmc_switch_mainck_to_xtal+0x74>)
  4046fc:	4313      	orrs	r3, r2
  4046fe:	620b      	str	r3, [r1, #32]
}
  404700:	bf00      	nop
  404702:	370c      	adds	r7, #12
  404704:	46bd      	mov	sp, r7
  404706:	f85d 7b04 	ldr.w	r7, [sp], #4
  40470a:	4770      	bx	lr
  40470c:	400e0600 	.word	0x400e0600
  404710:	fec8fffc 	.word	0xfec8fffc
  404714:	01370002 	.word	0x01370002
  404718:	ffc8fffc 	.word	0xffc8fffc
  40471c:	00370001 	.word	0x00370001
  404720:	01370000 	.word	0x01370000

00404724 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  404724:	b480      	push	{r7}
  404726:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  404728:	4b04      	ldr	r3, [pc, #16]	; (40473c <pmc_osc_is_ready_mainck+0x18>)
  40472a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40472c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  404730:	4618      	mov	r0, r3
  404732:	46bd      	mov	sp, r7
  404734:	f85d 7b04 	ldr.w	r7, [sp], #4
  404738:	4770      	bx	lr
  40473a:	bf00      	nop
  40473c:	400e0600 	.word	0x400e0600

00404740 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  404740:	b480      	push	{r7}
  404742:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  404744:	4b04      	ldr	r3, [pc, #16]	; (404758 <pmc_disable_pllack+0x18>)
  404746:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40474a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40474c:	bf00      	nop
  40474e:	46bd      	mov	sp, r7
  404750:	f85d 7b04 	ldr.w	r7, [sp], #4
  404754:	4770      	bx	lr
  404756:	bf00      	nop
  404758:	400e0600 	.word	0x400e0600

0040475c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40475c:	b480      	push	{r7}
  40475e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  404760:	4b04      	ldr	r3, [pc, #16]	; (404774 <pmc_is_locked_pllack+0x18>)
  404762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404764:	f003 0302 	and.w	r3, r3, #2
}
  404768:	4618      	mov	r0, r3
  40476a:	46bd      	mov	sp, r7
  40476c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404770:	4770      	bx	lr
  404772:	bf00      	nop
  404774:	400e0600 	.word	0x400e0600

00404778 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  404778:	b480      	push	{r7}
  40477a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  40477c:	4b04      	ldr	r3, [pc, #16]	; (404790 <pmc_is_locked_upll+0x18>)
  40477e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  404780:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  404784:	4618      	mov	r0, r3
  404786:	46bd      	mov	sp, r7
  404788:	f85d 7b04 	ldr.w	r7, [sp], #4
  40478c:	4770      	bx	lr
  40478e:	bf00      	nop
  404790:	400e0600 	.word	0x400e0600

00404794 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  404794:	b480      	push	{r7}
  404796:	b083      	sub	sp, #12
  404798:	af00      	add	r7, sp, #0
  40479a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  40479c:	687b      	ldr	r3, [r7, #4]
  40479e:	2b3f      	cmp	r3, #63	; 0x3f
  4047a0:	d901      	bls.n	4047a6 <pmc_enable_periph_clk+0x12>
		return 1;
  4047a2:	2301      	movs	r3, #1
  4047a4:	e02f      	b.n	404806 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4047a6:	687b      	ldr	r3, [r7, #4]
  4047a8:	2b1f      	cmp	r3, #31
  4047aa:	d813      	bhi.n	4047d4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4047ac:	4b19      	ldr	r3, [pc, #100]	; (404814 <pmc_enable_periph_clk+0x80>)
  4047ae:	699a      	ldr	r2, [r3, #24]
  4047b0:	2101      	movs	r1, #1
  4047b2:	687b      	ldr	r3, [r7, #4]
  4047b4:	fa01 f303 	lsl.w	r3, r1, r3
  4047b8:	401a      	ands	r2, r3
  4047ba:	2101      	movs	r1, #1
  4047bc:	687b      	ldr	r3, [r7, #4]
  4047be:	fa01 f303 	lsl.w	r3, r1, r3
  4047c2:	429a      	cmp	r2, r3
  4047c4:	d01e      	beq.n	404804 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4047c6:	4a13      	ldr	r2, [pc, #76]	; (404814 <pmc_enable_periph_clk+0x80>)
  4047c8:	2101      	movs	r1, #1
  4047ca:	687b      	ldr	r3, [r7, #4]
  4047cc:	fa01 f303 	lsl.w	r3, r1, r3
  4047d0:	6113      	str	r3, [r2, #16]
  4047d2:	e017      	b.n	404804 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4047d4:	687b      	ldr	r3, [r7, #4]
  4047d6:	3b20      	subs	r3, #32
  4047d8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4047da:	4b0e      	ldr	r3, [pc, #56]	; (404814 <pmc_enable_periph_clk+0x80>)
  4047dc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4047e0:	2101      	movs	r1, #1
  4047e2:	687b      	ldr	r3, [r7, #4]
  4047e4:	fa01 f303 	lsl.w	r3, r1, r3
  4047e8:	401a      	ands	r2, r3
  4047ea:	2101      	movs	r1, #1
  4047ec:	687b      	ldr	r3, [r7, #4]
  4047ee:	fa01 f303 	lsl.w	r3, r1, r3
  4047f2:	429a      	cmp	r2, r3
  4047f4:	d006      	beq.n	404804 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4047f6:	4a07      	ldr	r2, [pc, #28]	; (404814 <pmc_enable_periph_clk+0x80>)
  4047f8:	2101      	movs	r1, #1
  4047fa:	687b      	ldr	r3, [r7, #4]
  4047fc:	fa01 f303 	lsl.w	r3, r1, r3
  404800:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  404804:	2300      	movs	r3, #0
}
  404806:	4618      	mov	r0, r3
  404808:	370c      	adds	r7, #12
  40480a:	46bd      	mov	sp, r7
  40480c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404810:	4770      	bx	lr
  404812:	bf00      	nop
  404814:	400e0600 	.word	0x400e0600

00404818 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  404818:	b480      	push	{r7}
  40481a:	b085      	sub	sp, #20
  40481c:	af00      	add	r7, sp, #0
  40481e:	6078      	str	r0, [r7, #4]
  404820:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
  404822:	2300      	movs	r3, #0
  404824:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  404826:	687b      	ldr	r3, [r7, #4]
  404828:	22ac      	movs	r2, #172	; 0xac
  40482a:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  40482c:	683b      	ldr	r3, [r7, #0]
  40482e:	681a      	ldr	r2, [r3, #0]
  404830:	683b      	ldr	r3, [r7, #0]
  404832:	685b      	ldr	r3, [r3, #4]
  404834:	fbb2 f3f3 	udiv	r3, r2, r3
  404838:	091b      	lsrs	r3, r3, #4
  40483a:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40483c:	68fb      	ldr	r3, [r7, #12]
  40483e:	2b00      	cmp	r3, #0
  404840:	d003      	beq.n	40484a <uart_init+0x32>
  404842:	68fb      	ldr	r3, [r7, #12]
  404844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  404848:	d301      	bcc.n	40484e <uart_init+0x36>
		return 1;
  40484a:	2301      	movs	r3, #1
  40484c:	e00a      	b.n	404864 <uart_init+0x4c>

	p_uart->UART_BRGR = cd;
  40484e:	687b      	ldr	r3, [r7, #4]
  404850:	68fa      	ldr	r2, [r7, #12]
  404852:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  404854:	683b      	ldr	r3, [r7, #0]
  404856:	689a      	ldr	r2, [r3, #8]
  404858:	687b      	ldr	r3, [r7, #4]
  40485a:	605a      	str	r2, [r3, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40485c:	687b      	ldr	r3, [r7, #4]
  40485e:	2250      	movs	r2, #80	; 0x50
  404860:	601a      	str	r2, [r3, #0]

	return 0;
  404862:	2300      	movs	r3, #0
}
  404864:	4618      	mov	r0, r3
  404866:	3714      	adds	r7, #20
  404868:	46bd      	mov	sp, r7
  40486a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40486e:	4770      	bx	lr

00404870 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
  404870:	b480      	push	{r7}
  404872:	b083      	sub	sp, #12
  404874:	af00      	add	r7, sp, #0
  404876:	6078      	str	r0, [r7, #4]
  404878:	460b      	mov	r3, r1
  40487a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40487c:	687b      	ldr	r3, [r7, #4]
  40487e:	695b      	ldr	r3, [r3, #20]
  404880:	f003 0302 	and.w	r3, r3, #2
  404884:	2b00      	cmp	r3, #0
  404886:	d101      	bne.n	40488c <uart_write+0x1c>
		return 1;
  404888:	2301      	movs	r3, #1
  40488a:	e003      	b.n	404894 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
  40488c:	78fa      	ldrb	r2, [r7, #3]
  40488e:	687b      	ldr	r3, [r7, #4]
  404890:	61da      	str	r2, [r3, #28]
	return 0;
  404892:	2300      	movs	r3, #0
}
  404894:	4618      	mov	r0, r3
  404896:	370c      	adds	r7, #12
  404898:	46bd      	mov	sp, r7
  40489a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40489e:	4770      	bx	lr

004048a0 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
  4048a0:	b480      	push	{r7}
  4048a2:	b083      	sub	sp, #12
  4048a4:	af00      	add	r7, sp, #0
  4048a6:	6078      	str	r0, [r7, #4]
  4048a8:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4048aa:	687b      	ldr	r3, [r7, #4]
  4048ac:	695b      	ldr	r3, [r3, #20]
  4048ae:	f003 0301 	and.w	r3, r3, #1
  4048b2:	2b00      	cmp	r3, #0
  4048b4:	d101      	bne.n	4048ba <uart_read+0x1a>
		return 1;
  4048b6:	2301      	movs	r3, #1
  4048b8:	e005      	b.n	4048c6 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4048ba:	687b      	ldr	r3, [r7, #4]
  4048bc:	699b      	ldr	r3, [r3, #24]
  4048be:	b2da      	uxtb	r2, r3
  4048c0:	683b      	ldr	r3, [r7, #0]
  4048c2:	701a      	strb	r2, [r3, #0]
	return 0;
  4048c4:	2300      	movs	r3, #0
}
  4048c6:	4618      	mov	r0, r3
  4048c8:	370c      	adds	r7, #12
  4048ca:	46bd      	mov	sp, r7
  4048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4048d0:	4770      	bx	lr

004048d2 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4048d2:	b480      	push	{r7}
  4048d4:	b089      	sub	sp, #36	; 0x24
  4048d6:	af00      	add	r7, sp, #0
  4048d8:	60f8      	str	r0, [r7, #12]
  4048da:	60b9      	str	r1, [r7, #8]
  4048dc:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4048de:	68bb      	ldr	r3, [r7, #8]
  4048e0:	011a      	lsls	r2, r3, #4
  4048e2:	687b      	ldr	r3, [r7, #4]
  4048e4:	429a      	cmp	r2, r3
  4048e6:	d802      	bhi.n	4048ee <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
  4048e8:	2310      	movs	r3, #16
  4048ea:	61fb      	str	r3, [r7, #28]
  4048ec:	e001      	b.n	4048f2 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
  4048ee:	2308      	movs	r3, #8
  4048f0:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4048f2:	687b      	ldr	r3, [r7, #4]
  4048f4:	00da      	lsls	r2, r3, #3
  4048f6:	69fb      	ldr	r3, [r7, #28]
  4048f8:	68b9      	ldr	r1, [r7, #8]
  4048fa:	fb01 f303 	mul.w	r3, r1, r3
  4048fe:	085b      	lsrs	r3, r3, #1
  404900:	441a      	add	r2, r3
  404902:	69fb      	ldr	r3, [r7, #28]
  404904:	68b9      	ldr	r1, [r7, #8]
  404906:	fb01 f303 	mul.w	r3, r1, r3
  40490a:	fbb2 f3f3 	udiv	r3, r2, r3
  40490e:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
  404910:	69bb      	ldr	r3, [r7, #24]
  404912:	08db      	lsrs	r3, r3, #3
  404914:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
  404916:	69bb      	ldr	r3, [r7, #24]
  404918:	f003 0307 	and.w	r3, r3, #7
  40491c:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40491e:	697b      	ldr	r3, [r7, #20]
  404920:	2b00      	cmp	r3, #0
  404922:	d003      	beq.n	40492c <usart_set_async_baudrate+0x5a>
  404924:	697b      	ldr	r3, [r7, #20]
  404926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  40492a:	d301      	bcc.n	404930 <usart_set_async_baudrate+0x5e>
		return 1;
  40492c:	2301      	movs	r3, #1
  40492e:	e00f      	b.n	404950 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  404930:	69fb      	ldr	r3, [r7, #28]
  404932:	2b08      	cmp	r3, #8
  404934:	d105      	bne.n	404942 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
  404936:	68fb      	ldr	r3, [r7, #12]
  404938:	685b      	ldr	r3, [r3, #4]
  40493a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
  40493e:	68fb      	ldr	r3, [r7, #12]
  404940:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  404942:	693b      	ldr	r3, [r7, #16]
  404944:	041a      	lsls	r2, r3, #16
  404946:	697b      	ldr	r3, [r7, #20]
  404948:	431a      	orrs	r2, r3
  40494a:	68fb      	ldr	r3, [r7, #12]
  40494c:	621a      	str	r2, [r3, #32]

	return 0;
  40494e:	2300      	movs	r3, #0
}
  404950:	4618      	mov	r0, r3
  404952:	3724      	adds	r7, #36	; 0x24
  404954:	46bd      	mov	sp, r7
  404956:	f85d 7b04 	ldr.w	r7, [sp], #4
  40495a:	4770      	bx	lr

0040495c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
  40495c:	b580      	push	{r7, lr}
  40495e:	b082      	sub	sp, #8
  404960:	af00      	add	r7, sp, #0
  404962:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
  404964:	6878      	ldr	r0, [r7, #4]
  404966:	4b0d      	ldr	r3, [pc, #52]	; (40499c <usart_reset+0x40>)
  404968:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  40496a:	687b      	ldr	r3, [r7, #4]
  40496c:	2200      	movs	r2, #0
  40496e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
  404970:	687b      	ldr	r3, [r7, #4]
  404972:	2200      	movs	r2, #0
  404974:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
  404976:	687b      	ldr	r3, [r7, #4]
  404978:	2200      	movs	r2, #0
  40497a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
  40497c:	6878      	ldr	r0, [r7, #4]
  40497e:	4b08      	ldr	r3, [pc, #32]	; (4049a0 <usart_reset+0x44>)
  404980:	4798      	blx	r3
	usart_reset_rx(p_usart);
  404982:	6878      	ldr	r0, [r7, #4]
  404984:	4b07      	ldr	r3, [pc, #28]	; (4049a4 <usart_reset+0x48>)
  404986:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
  404988:	6878      	ldr	r0, [r7, #4]
  40498a:	4b07      	ldr	r3, [pc, #28]	; (4049a8 <usart_reset+0x4c>)
  40498c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
  40498e:	6878      	ldr	r0, [r7, #4]
  404990:	4b06      	ldr	r3, [pc, #24]	; (4049ac <usart_reset+0x50>)
  404992:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
  404994:	bf00      	nop
  404996:	3708      	adds	r7, #8
  404998:	46bd      	mov	sp, r7
  40499a:	bd80      	pop	{r7, pc}
  40499c:	00404b3d 	.word	0x00404b3d
  4049a0:	00404a4f 	.word	0x00404a4f
  4049a4:	00404a83 	.word	0x00404a83
  4049a8:	00404a9d 	.word	0x00404a9d
  4049ac:	00404ab9 	.word	0x00404ab9

004049b0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  4049b0:	b580      	push	{r7, lr}
  4049b2:	b084      	sub	sp, #16
  4049b4:	af00      	add	r7, sp, #0
  4049b6:	60f8      	str	r0, [r7, #12]
  4049b8:	60b9      	str	r1, [r7, #8]
  4049ba:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  4049bc:	68f8      	ldr	r0, [r7, #12]
  4049be:	4b1a      	ldr	r3, [pc, #104]	; (404a28 <usart_init_rs232+0x78>)
  4049c0:	4798      	blx	r3

	ul_reg_val = 0;
  4049c2:	4b1a      	ldr	r3, [pc, #104]	; (404a2c <usart_init_rs232+0x7c>)
  4049c4:	2200      	movs	r2, #0
  4049c6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4049c8:	68bb      	ldr	r3, [r7, #8]
  4049ca:	2b00      	cmp	r3, #0
  4049cc:	d009      	beq.n	4049e2 <usart_init_rs232+0x32>
  4049ce:	68bb      	ldr	r3, [r7, #8]
  4049d0:	681b      	ldr	r3, [r3, #0]
  4049d2:	687a      	ldr	r2, [r7, #4]
  4049d4:	4619      	mov	r1, r3
  4049d6:	68f8      	ldr	r0, [r7, #12]
  4049d8:	4b15      	ldr	r3, [pc, #84]	; (404a30 <usart_init_rs232+0x80>)
  4049da:	4798      	blx	r3
  4049dc:	4603      	mov	r3, r0
  4049de:	2b00      	cmp	r3, #0
  4049e0:	d001      	beq.n	4049e6 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4049e2:	2301      	movs	r3, #1
  4049e4:	e01b      	b.n	404a1e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4049e6:	68bb      	ldr	r3, [r7, #8]
  4049e8:	685a      	ldr	r2, [r3, #4]
  4049ea:	68bb      	ldr	r3, [r7, #8]
  4049ec:	689b      	ldr	r3, [r3, #8]
  4049ee:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4049f0:	68bb      	ldr	r3, [r7, #8]
  4049f2:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4049f4:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4049f6:	68bb      	ldr	r3, [r7, #8]
  4049f8:	68db      	ldr	r3, [r3, #12]
  4049fa:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4049fc:	4b0b      	ldr	r3, [pc, #44]	; (404a2c <usart_init_rs232+0x7c>)
  4049fe:	681b      	ldr	r3, [r3, #0]
  404a00:	4313      	orrs	r3, r2
  404a02:	4a0a      	ldr	r2, [pc, #40]	; (404a2c <usart_init_rs232+0x7c>)
  404a04:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
  404a06:	4b09      	ldr	r3, [pc, #36]	; (404a2c <usart_init_rs232+0x7c>)
  404a08:	681b      	ldr	r3, [r3, #0]
  404a0a:	4a08      	ldr	r2, [pc, #32]	; (404a2c <usart_init_rs232+0x7c>)
  404a0c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
  404a0e:	68fb      	ldr	r3, [r7, #12]
  404a10:	685a      	ldr	r2, [r3, #4]
  404a12:	4b06      	ldr	r3, [pc, #24]	; (404a2c <usart_init_rs232+0x7c>)
  404a14:	681b      	ldr	r3, [r3, #0]
  404a16:	431a      	orrs	r2, r3
  404a18:	68fb      	ldr	r3, [r7, #12]
  404a1a:	605a      	str	r2, [r3, #4]

	return 0;
  404a1c:	2300      	movs	r3, #0
}
  404a1e:	4618      	mov	r0, r3
  404a20:	3710      	adds	r7, #16
  404a22:	46bd      	mov	sp, r7
  404a24:	bd80      	pop	{r7, pc}
  404a26:	bf00      	nop
  404a28:	0040495d 	.word	0x0040495d
  404a2c:	2042038c 	.word	0x2042038c
  404a30:	004048d3 	.word	0x004048d3

00404a34 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
  404a34:	b480      	push	{r7}
  404a36:	b083      	sub	sp, #12
  404a38:	af00      	add	r7, sp, #0
  404a3a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
  404a3c:	687b      	ldr	r3, [r7, #4]
  404a3e:	2240      	movs	r2, #64	; 0x40
  404a40:	601a      	str	r2, [r3, #0]
}
  404a42:	bf00      	nop
  404a44:	370c      	adds	r7, #12
  404a46:	46bd      	mov	sp, r7
  404a48:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a4c:	4770      	bx	lr

00404a4e <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
  404a4e:	b480      	push	{r7}
  404a50:	b083      	sub	sp, #12
  404a52:	af00      	add	r7, sp, #0
  404a54:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  404a56:	687b      	ldr	r3, [r7, #4]
  404a58:	2288      	movs	r2, #136	; 0x88
  404a5a:	601a      	str	r2, [r3, #0]
}
  404a5c:	bf00      	nop
  404a5e:	370c      	adds	r7, #12
  404a60:	46bd      	mov	sp, r7
  404a62:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a66:	4770      	bx	lr

00404a68 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
  404a68:	b480      	push	{r7}
  404a6a:	b083      	sub	sp, #12
  404a6c:	af00      	add	r7, sp, #0
  404a6e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
  404a70:	687b      	ldr	r3, [r7, #4]
  404a72:	2210      	movs	r2, #16
  404a74:	601a      	str	r2, [r3, #0]
}
  404a76:	bf00      	nop
  404a78:	370c      	adds	r7, #12
  404a7a:	46bd      	mov	sp, r7
  404a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a80:	4770      	bx	lr

00404a82 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
  404a82:	b480      	push	{r7}
  404a84:	b083      	sub	sp, #12
  404a86:	af00      	add	r7, sp, #0
  404a88:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  404a8a:	687b      	ldr	r3, [r7, #4]
  404a8c:	2224      	movs	r2, #36	; 0x24
  404a8e:	601a      	str	r2, [r3, #0]
}
  404a90:	bf00      	nop
  404a92:	370c      	adds	r7, #12
  404a94:	46bd      	mov	sp, r7
  404a96:	f85d 7b04 	ldr.w	r7, [sp], #4
  404a9a:	4770      	bx	lr

00404a9c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
  404a9c:	b480      	push	{r7}
  404a9e:	b083      	sub	sp, #12
  404aa0:	af00      	add	r7, sp, #0
  404aa2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
  404aa4:	687b      	ldr	r3, [r7, #4]
  404aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
  404aaa:	601a      	str	r2, [r3, #0]
}
  404aac:	bf00      	nop
  404aae:	370c      	adds	r7, #12
  404ab0:	46bd      	mov	sp, r7
  404ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ab6:	4770      	bx	lr

00404ab8 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
  404ab8:	b480      	push	{r7}
  404aba:	b083      	sub	sp, #12
  404abc:	af00      	add	r7, sp, #0
  404abe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
  404ac0:	687b      	ldr	r3, [r7, #4]
  404ac2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  404ac6:	601a      	str	r2, [r3, #0]
}
  404ac8:	bf00      	nop
  404aca:	370c      	adds	r7, #12
  404acc:	46bd      	mov	sp, r7
  404ace:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ad2:	4770      	bx	lr

00404ad4 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
  404ad4:	b480      	push	{r7}
  404ad6:	b083      	sub	sp, #12
  404ad8:	af00      	add	r7, sp, #0
  404ada:	6078      	str	r0, [r7, #4]
  404adc:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  404ade:	687b      	ldr	r3, [r7, #4]
  404ae0:	695b      	ldr	r3, [r3, #20]
  404ae2:	f003 0302 	and.w	r3, r3, #2
  404ae6:	2b00      	cmp	r3, #0
  404ae8:	d101      	bne.n	404aee <usart_write+0x1a>
		return 1;
  404aea:	2301      	movs	r3, #1
  404aec:	e005      	b.n	404afa <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  404aee:	683b      	ldr	r3, [r7, #0]
  404af0:	f3c3 0208 	ubfx	r2, r3, #0, #9
  404af4:	687b      	ldr	r3, [r7, #4]
  404af6:	61da      	str	r2, [r3, #28]
	return 0;
  404af8:	2300      	movs	r3, #0
}
  404afa:	4618      	mov	r0, r3
  404afc:	370c      	adds	r7, #12
  404afe:	46bd      	mov	sp, r7
  404b00:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b04:	4770      	bx	lr

00404b06 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
  404b06:	b480      	push	{r7}
  404b08:	b083      	sub	sp, #12
  404b0a:	af00      	add	r7, sp, #0
  404b0c:	6078      	str	r0, [r7, #4]
  404b0e:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  404b10:	687b      	ldr	r3, [r7, #4]
  404b12:	695b      	ldr	r3, [r3, #20]
  404b14:	f003 0301 	and.w	r3, r3, #1
  404b18:	2b00      	cmp	r3, #0
  404b1a:	d101      	bne.n	404b20 <usart_read+0x1a>
		return 1;
  404b1c:	2301      	movs	r3, #1
  404b1e:	e006      	b.n	404b2e <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  404b20:	687b      	ldr	r3, [r7, #4]
  404b22:	699b      	ldr	r3, [r3, #24]
  404b24:	f3c3 0208 	ubfx	r2, r3, #0, #9
  404b28:	683b      	ldr	r3, [r7, #0]
  404b2a:	601a      	str	r2, [r3, #0]

	return 0;
  404b2c:	2300      	movs	r3, #0
}
  404b2e:	4618      	mov	r0, r3
  404b30:	370c      	adds	r7, #12
  404b32:	46bd      	mov	sp, r7
  404b34:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b38:	4770      	bx	lr
	...

00404b3c <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
  404b3c:	b480      	push	{r7}
  404b3e:	b083      	sub	sp, #12
  404b40:	af00      	add	r7, sp, #0
  404b42:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  404b44:	687b      	ldr	r3, [r7, #4]
  404b46:	4a04      	ldr	r2, [pc, #16]	; (404b58 <usart_disable_writeprotect+0x1c>)
  404b48:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
  404b4c:	bf00      	nop
  404b4e:	370c      	adds	r7, #12
  404b50:	46bd      	mov	sp, r7
  404b52:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b56:	4770      	bx	lr
  404b58:	55534100 	.word	0x55534100

00404b5c <cpu_irq_save>:
{
  404b5c:	b480      	push	{r7}
  404b5e:	b083      	sub	sp, #12
  404b60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  404b62:	f3ef 8310 	mrs	r3, PRIMASK
  404b66:	607b      	str	r3, [r7, #4]
  return(result);
  404b68:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  404b6a:	2b00      	cmp	r3, #0
  404b6c:	bf0c      	ite	eq
  404b6e:	2301      	moveq	r3, #1
  404b70:	2300      	movne	r3, #0
  404b72:	b2db      	uxtb	r3, r3
  404b74:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  404b76:	b672      	cpsid	i
  404b78:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  404b7c:	4b04      	ldr	r3, [pc, #16]	; (404b90 <cpu_irq_save+0x34>)
  404b7e:	2200      	movs	r2, #0
  404b80:	701a      	strb	r2, [r3, #0]
	return flags;
  404b82:	683b      	ldr	r3, [r7, #0]
}
  404b84:	4618      	mov	r0, r3
  404b86:	370c      	adds	r7, #12
  404b88:	46bd      	mov	sp, r7
  404b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  404b8e:	4770      	bx	lr
  404b90:	20400034 	.word	0x20400034

00404b94 <cpu_irq_is_enabled_flags>:
{
  404b94:	b480      	push	{r7}
  404b96:	b083      	sub	sp, #12
  404b98:	af00      	add	r7, sp, #0
  404b9a:	6078      	str	r0, [r7, #4]
	return (flags);
  404b9c:	687b      	ldr	r3, [r7, #4]
  404b9e:	2b00      	cmp	r3, #0
  404ba0:	bf14      	ite	ne
  404ba2:	2301      	movne	r3, #1
  404ba4:	2300      	moveq	r3, #0
  404ba6:	b2db      	uxtb	r3, r3
}
  404ba8:	4618      	mov	r0, r3
  404baa:	370c      	adds	r7, #12
  404bac:	46bd      	mov	sp, r7
  404bae:	f85d 7b04 	ldr.w	r7, [sp], #4
  404bb2:	4770      	bx	lr

00404bb4 <cpu_irq_restore>:
{
  404bb4:	b580      	push	{r7, lr}
  404bb6:	b082      	sub	sp, #8
  404bb8:	af00      	add	r7, sp, #0
  404bba:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  404bbc:	6878      	ldr	r0, [r7, #4]
  404bbe:	4b07      	ldr	r3, [pc, #28]	; (404bdc <cpu_irq_restore+0x28>)
  404bc0:	4798      	blx	r3
  404bc2:	4603      	mov	r3, r0
  404bc4:	2b00      	cmp	r3, #0
  404bc6:	d005      	beq.n	404bd4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  404bc8:	4b05      	ldr	r3, [pc, #20]	; (404be0 <cpu_irq_restore+0x2c>)
  404bca:	2201      	movs	r2, #1
  404bcc:	701a      	strb	r2, [r3, #0]
  404bce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  404bd2:	b662      	cpsie	i
}
  404bd4:	bf00      	nop
  404bd6:	3708      	adds	r7, #8
  404bd8:	46bd      	mov	sp, r7
  404bda:	bd80      	pop	{r7, pc}
  404bdc:	00404b95 	.word	0x00404b95
  404be0:	20400034 	.word	0x20400034

00404be4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  404be4:	b580      	push	{r7, lr}
  404be6:	b084      	sub	sp, #16
  404be8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  404bea:	4b1e      	ldr	r3, [pc, #120]	; (404c64 <Reset_Handler+0x80>)
  404bec:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  404bee:	4b1e      	ldr	r3, [pc, #120]	; (404c68 <Reset_Handler+0x84>)
  404bf0:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  404bf2:	68fa      	ldr	r2, [r7, #12]
  404bf4:	68bb      	ldr	r3, [r7, #8]
  404bf6:	429a      	cmp	r2, r3
  404bf8:	d00c      	beq.n	404c14 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  404bfa:	e007      	b.n	404c0c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  404bfc:	68bb      	ldr	r3, [r7, #8]
  404bfe:	1d1a      	adds	r2, r3, #4
  404c00:	60ba      	str	r2, [r7, #8]
  404c02:	68fa      	ldr	r2, [r7, #12]
  404c04:	1d11      	adds	r1, r2, #4
  404c06:	60f9      	str	r1, [r7, #12]
  404c08:	6812      	ldr	r2, [r2, #0]
  404c0a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  404c0c:	68bb      	ldr	r3, [r7, #8]
  404c0e:	4a17      	ldr	r2, [pc, #92]	; (404c6c <Reset_Handler+0x88>)
  404c10:	4293      	cmp	r3, r2
  404c12:	d3f3      	bcc.n	404bfc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  404c14:	4b16      	ldr	r3, [pc, #88]	; (404c70 <Reset_Handler+0x8c>)
  404c16:	60bb      	str	r3, [r7, #8]
  404c18:	e004      	b.n	404c24 <Reset_Handler+0x40>
                *pDest++ = 0;
  404c1a:	68bb      	ldr	r3, [r7, #8]
  404c1c:	1d1a      	adds	r2, r3, #4
  404c1e:	60ba      	str	r2, [r7, #8]
  404c20:	2200      	movs	r2, #0
  404c22:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  404c24:	68bb      	ldr	r3, [r7, #8]
  404c26:	4a13      	ldr	r2, [pc, #76]	; (404c74 <Reset_Handler+0x90>)
  404c28:	4293      	cmp	r3, r2
  404c2a:	d3f6      	bcc.n	404c1a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  404c2c:	4b12      	ldr	r3, [pc, #72]	; (404c78 <Reset_Handler+0x94>)
  404c2e:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  404c30:	4a12      	ldr	r2, [pc, #72]	; (404c7c <Reset_Handler+0x98>)
  404c32:	68fb      	ldr	r3, [r7, #12]
  404c34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  404c38:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  404c3a:	4b11      	ldr	r3, [pc, #68]	; (404c80 <Reset_Handler+0x9c>)
  404c3c:	4798      	blx	r3
  404c3e:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  404c40:	4a10      	ldr	r2, [pc, #64]	; (404c84 <Reset_Handler+0xa0>)
  404c42:	4b10      	ldr	r3, [pc, #64]	; (404c84 <Reset_Handler+0xa0>)
  404c44:	681b      	ldr	r3, [r3, #0]
  404c46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  404c4a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  404c4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404c50:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  404c54:	6878      	ldr	r0, [r7, #4]
  404c56:	4b0c      	ldr	r3, [pc, #48]	; (404c88 <Reset_Handler+0xa4>)
  404c58:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  404c5a:	4b0c      	ldr	r3, [pc, #48]	; (404c8c <Reset_Handler+0xa8>)
  404c5c:	4798      	blx	r3

        /* Branch to main function */
        main();
  404c5e:	4b0c      	ldr	r3, [pc, #48]	; (404c90 <Reset_Handler+0xac>)
  404c60:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  404c62:	e7fe      	b.n	404c62 <Reset_Handler+0x7e>
  404c64:	00408a78 	.word	0x00408a78
  404c68:	20400000 	.word	0x20400000
  404c6c:	204009e8 	.word	0x204009e8
  404c70:	204009e8 	.word	0x204009e8
  404c74:	20420484 	.word	0x20420484
  404c78:	00400000 	.word	0x00400000
  404c7c:	e000ed00 	.word	0xe000ed00
  404c80:	00404b5d 	.word	0x00404b5d
  404c84:	e000ed88 	.word	0xe000ed88
  404c88:	00404bb5 	.word	0x00404bb5
  404c8c:	00405759 	.word	0x00405759
  404c90:	00402ff1 	.word	0x00402ff1

00404c94 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  404c94:	b480      	push	{r7}
  404c96:	af00      	add	r7, sp, #0
        while (1) {
  404c98:	e7fe      	b.n	404c98 <Dummy_Handler+0x4>
	...

00404c9c <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  404c9c:	b480      	push	{r7}
  404c9e:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  404ca0:	4b52      	ldr	r3, [pc, #328]	; (404dec <SystemCoreClockUpdate+0x150>)
  404ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404ca4:	f003 0303 	and.w	r3, r3, #3
  404ca8:	2b01      	cmp	r3, #1
  404caa:	d014      	beq.n	404cd6 <SystemCoreClockUpdate+0x3a>
  404cac:	2b01      	cmp	r3, #1
  404cae:	d302      	bcc.n	404cb6 <SystemCoreClockUpdate+0x1a>
  404cb0:	2b02      	cmp	r3, #2
  404cb2:	d038      	beq.n	404d26 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  404cb4:	e07a      	b.n	404dac <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  404cb6:	4b4e      	ldr	r3, [pc, #312]	; (404df0 <SystemCoreClockUpdate+0x154>)
  404cb8:	695b      	ldr	r3, [r3, #20]
  404cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404cbe:	2b00      	cmp	r3, #0
  404cc0:	d004      	beq.n	404ccc <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  404cc2:	4b4c      	ldr	r3, [pc, #304]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404cc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404cc8:	601a      	str	r2, [r3, #0]
    break;
  404cca:	e06f      	b.n	404dac <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  404ccc:	4b49      	ldr	r3, [pc, #292]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404cce:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  404cd2:	601a      	str	r2, [r3, #0]
    break;
  404cd4:	e06a      	b.n	404dac <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404cd6:	4b45      	ldr	r3, [pc, #276]	; (404dec <SystemCoreClockUpdate+0x150>)
  404cd8:	6a1b      	ldr	r3, [r3, #32]
  404cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  404cde:	2b00      	cmp	r3, #0
  404ce0:	d003      	beq.n	404cea <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  404ce2:	4b44      	ldr	r3, [pc, #272]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404ce4:	4a44      	ldr	r2, [pc, #272]	; (404df8 <SystemCoreClockUpdate+0x15c>)
  404ce6:	601a      	str	r2, [r3, #0]
    break;
  404ce8:	e060      	b.n	404dac <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404cea:	4b42      	ldr	r3, [pc, #264]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404cec:	4a43      	ldr	r2, [pc, #268]	; (404dfc <SystemCoreClockUpdate+0x160>)
  404cee:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  404cf0:	4b3e      	ldr	r3, [pc, #248]	; (404dec <SystemCoreClockUpdate+0x150>)
  404cf2:	6a1b      	ldr	r3, [r3, #32]
  404cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404cf8:	2b10      	cmp	r3, #16
  404cfa:	d004      	beq.n	404d06 <SystemCoreClockUpdate+0x6a>
  404cfc:	2b20      	cmp	r3, #32
  404cfe:	d008      	beq.n	404d12 <SystemCoreClockUpdate+0x76>
  404d00:	2b00      	cmp	r3, #0
  404d02:	d00e      	beq.n	404d22 <SystemCoreClockUpdate+0x86>
          break;
  404d04:	e00e      	b.n	404d24 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  404d06:	4b3b      	ldr	r3, [pc, #236]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404d08:	681b      	ldr	r3, [r3, #0]
  404d0a:	005b      	lsls	r3, r3, #1
  404d0c:	4a39      	ldr	r2, [pc, #228]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404d0e:	6013      	str	r3, [r2, #0]
          break;
  404d10:	e008      	b.n	404d24 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  404d12:	4b38      	ldr	r3, [pc, #224]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404d14:	681a      	ldr	r2, [r3, #0]
  404d16:	4613      	mov	r3, r2
  404d18:	005b      	lsls	r3, r3, #1
  404d1a:	4413      	add	r3, r2
  404d1c:	4a35      	ldr	r2, [pc, #212]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404d1e:	6013      	str	r3, [r2, #0]
          break;
  404d20:	e000      	b.n	404d24 <SystemCoreClockUpdate+0x88>
          break;
  404d22:	bf00      	nop
    break;
  404d24:	e042      	b.n	404dac <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  404d26:	4b31      	ldr	r3, [pc, #196]	; (404dec <SystemCoreClockUpdate+0x150>)
  404d28:	6a1b      	ldr	r3, [r3, #32]
  404d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  404d2e:	2b00      	cmp	r3, #0
  404d30:	d003      	beq.n	404d3a <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  404d32:	4b30      	ldr	r3, [pc, #192]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404d34:	4a30      	ldr	r2, [pc, #192]	; (404df8 <SystemCoreClockUpdate+0x15c>)
  404d36:	601a      	str	r2, [r3, #0]
  404d38:	e01c      	b.n	404d74 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404d3a:	4b2e      	ldr	r3, [pc, #184]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404d3c:	4a2f      	ldr	r2, [pc, #188]	; (404dfc <SystemCoreClockUpdate+0x160>)
  404d3e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  404d40:	4b2a      	ldr	r3, [pc, #168]	; (404dec <SystemCoreClockUpdate+0x150>)
  404d42:	6a1b      	ldr	r3, [r3, #32]
  404d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404d48:	2b10      	cmp	r3, #16
  404d4a:	d004      	beq.n	404d56 <SystemCoreClockUpdate+0xba>
  404d4c:	2b20      	cmp	r3, #32
  404d4e:	d008      	beq.n	404d62 <SystemCoreClockUpdate+0xc6>
  404d50:	2b00      	cmp	r3, #0
  404d52:	d00e      	beq.n	404d72 <SystemCoreClockUpdate+0xd6>
          break;
  404d54:	e00e      	b.n	404d74 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  404d56:	4b27      	ldr	r3, [pc, #156]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404d58:	681b      	ldr	r3, [r3, #0]
  404d5a:	005b      	lsls	r3, r3, #1
  404d5c:	4a25      	ldr	r2, [pc, #148]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404d5e:	6013      	str	r3, [r2, #0]
          break;
  404d60:	e008      	b.n	404d74 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  404d62:	4b24      	ldr	r3, [pc, #144]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404d64:	681a      	ldr	r2, [r3, #0]
  404d66:	4613      	mov	r3, r2
  404d68:	005b      	lsls	r3, r3, #1
  404d6a:	4413      	add	r3, r2
  404d6c:	4a21      	ldr	r2, [pc, #132]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404d6e:	6013      	str	r3, [r2, #0]
          break;
  404d70:	e000      	b.n	404d74 <SystemCoreClockUpdate+0xd8>
          break;
  404d72:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  404d74:	4b1d      	ldr	r3, [pc, #116]	; (404dec <SystemCoreClockUpdate+0x150>)
  404d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404d78:	f003 0303 	and.w	r3, r3, #3
  404d7c:	2b02      	cmp	r3, #2
  404d7e:	d114      	bne.n	404daa <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  404d80:	4b1a      	ldr	r3, [pc, #104]	; (404dec <SystemCoreClockUpdate+0x150>)
  404d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  404d84:	0c1b      	lsrs	r3, r3, #16
  404d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
  404d8a:	3301      	adds	r3, #1
  404d8c:	4a19      	ldr	r2, [pc, #100]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404d8e:	6812      	ldr	r2, [r2, #0]
  404d90:	fb02 f303 	mul.w	r3, r2, r3
  404d94:	4a17      	ldr	r2, [pc, #92]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404d96:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  404d98:	4b14      	ldr	r3, [pc, #80]	; (404dec <SystemCoreClockUpdate+0x150>)
  404d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  404d9c:	b2db      	uxtb	r3, r3
  404d9e:	4a15      	ldr	r2, [pc, #84]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404da0:	6812      	ldr	r2, [r2, #0]
  404da2:	fbb2 f3f3 	udiv	r3, r2, r3
  404da6:	4a13      	ldr	r2, [pc, #76]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404da8:	6013      	str	r3, [r2, #0]
    break;
  404daa:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  404dac:	4b0f      	ldr	r3, [pc, #60]	; (404dec <SystemCoreClockUpdate+0x150>)
  404dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404db0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404db4:	2b70      	cmp	r3, #112	; 0x70
  404db6:	d108      	bne.n	404dca <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  404db8:	4b0e      	ldr	r3, [pc, #56]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404dba:	681b      	ldr	r3, [r3, #0]
  404dbc:	4a10      	ldr	r2, [pc, #64]	; (404e00 <SystemCoreClockUpdate+0x164>)
  404dbe:	fba2 2303 	umull	r2, r3, r2, r3
  404dc2:	085b      	lsrs	r3, r3, #1
  404dc4:	4a0b      	ldr	r2, [pc, #44]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404dc6:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  404dc8:	e00a      	b.n	404de0 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  404dca:	4b08      	ldr	r3, [pc, #32]	; (404dec <SystemCoreClockUpdate+0x150>)
  404dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404dce:	091b      	lsrs	r3, r3, #4
  404dd0:	f003 0307 	and.w	r3, r3, #7
  404dd4:	4a07      	ldr	r2, [pc, #28]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404dd6:	6812      	ldr	r2, [r2, #0]
  404dd8:	fa22 f303 	lsr.w	r3, r2, r3
  404ddc:	4a05      	ldr	r2, [pc, #20]	; (404df4 <SystemCoreClockUpdate+0x158>)
  404dde:	6013      	str	r3, [r2, #0]
}
  404de0:	bf00      	nop
  404de2:	46bd      	mov	sp, r7
  404de4:	f85d 7b04 	ldr.w	r7, [sp], #4
  404de8:	4770      	bx	lr
  404dea:	bf00      	nop
  404dec:	400e0600 	.word	0x400e0600
  404df0:	400e1810 	.word	0x400e1810
  404df4:	20400038 	.word	0x20400038
  404df8:	00b71b00 	.word	0x00b71b00
  404dfc:	003d0900 	.word	0x003d0900
  404e00:	aaaaaaab 	.word	0xaaaaaaab

00404e04 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  404e04:	b480      	push	{r7}
  404e06:	b083      	sub	sp, #12
  404e08:	af00      	add	r7, sp, #0
  404e0a:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  404e0c:	687b      	ldr	r3, [r7, #4]
  404e0e:	4a1d      	ldr	r2, [pc, #116]	; (404e84 <system_init_flash+0x80>)
  404e10:	4293      	cmp	r3, r2
  404e12:	d804      	bhi.n	404e1e <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  404e14:	4b1c      	ldr	r3, [pc, #112]	; (404e88 <system_init_flash+0x84>)
  404e16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  404e1a:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  404e1c:	e02b      	b.n	404e76 <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  404e1e:	687b      	ldr	r3, [r7, #4]
  404e20:	4a1a      	ldr	r2, [pc, #104]	; (404e8c <system_init_flash+0x88>)
  404e22:	4293      	cmp	r3, r2
  404e24:	d803      	bhi.n	404e2e <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  404e26:	4b18      	ldr	r3, [pc, #96]	; (404e88 <system_init_flash+0x84>)
  404e28:	4a19      	ldr	r2, [pc, #100]	; (404e90 <system_init_flash+0x8c>)
  404e2a:	601a      	str	r2, [r3, #0]
}
  404e2c:	e023      	b.n	404e76 <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  404e2e:	687b      	ldr	r3, [r7, #4]
  404e30:	4a18      	ldr	r2, [pc, #96]	; (404e94 <system_init_flash+0x90>)
  404e32:	4293      	cmp	r3, r2
  404e34:	d803      	bhi.n	404e3e <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  404e36:	4b14      	ldr	r3, [pc, #80]	; (404e88 <system_init_flash+0x84>)
  404e38:	4a17      	ldr	r2, [pc, #92]	; (404e98 <system_init_flash+0x94>)
  404e3a:	601a      	str	r2, [r3, #0]
}
  404e3c:	e01b      	b.n	404e76 <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  404e3e:	687b      	ldr	r3, [r7, #4]
  404e40:	4a16      	ldr	r2, [pc, #88]	; (404e9c <system_init_flash+0x98>)
  404e42:	4293      	cmp	r3, r2
  404e44:	d803      	bhi.n	404e4e <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  404e46:	4b10      	ldr	r3, [pc, #64]	; (404e88 <system_init_flash+0x84>)
  404e48:	4a15      	ldr	r2, [pc, #84]	; (404ea0 <system_init_flash+0x9c>)
  404e4a:	601a      	str	r2, [r3, #0]
}
  404e4c:	e013      	b.n	404e76 <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  404e4e:	687b      	ldr	r3, [r7, #4]
  404e50:	4a14      	ldr	r2, [pc, #80]	; (404ea4 <system_init_flash+0xa0>)
  404e52:	4293      	cmp	r3, r2
  404e54:	d804      	bhi.n	404e60 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  404e56:	4b0c      	ldr	r3, [pc, #48]	; (404e88 <system_init_flash+0x84>)
  404e58:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  404e5c:	601a      	str	r2, [r3, #0]
}
  404e5e:	e00a      	b.n	404e76 <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  404e60:	687b      	ldr	r3, [r7, #4]
  404e62:	4a11      	ldr	r2, [pc, #68]	; (404ea8 <system_init_flash+0xa4>)
  404e64:	4293      	cmp	r3, r2
  404e66:	d803      	bhi.n	404e70 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  404e68:	4b07      	ldr	r3, [pc, #28]	; (404e88 <system_init_flash+0x84>)
  404e6a:	4a10      	ldr	r2, [pc, #64]	; (404eac <system_init_flash+0xa8>)
  404e6c:	601a      	str	r2, [r3, #0]
}
  404e6e:	e002      	b.n	404e76 <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  404e70:	4b05      	ldr	r3, [pc, #20]	; (404e88 <system_init_flash+0x84>)
  404e72:	4a0f      	ldr	r2, [pc, #60]	; (404eb0 <system_init_flash+0xac>)
  404e74:	601a      	str	r2, [r3, #0]
}
  404e76:	bf00      	nop
  404e78:	370c      	adds	r7, #12
  404e7a:	46bd      	mov	sp, r7
  404e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
  404e80:	4770      	bx	lr
  404e82:	bf00      	nop
  404e84:	015ef3bf 	.word	0x015ef3bf
  404e88:	400e0c00 	.word	0x400e0c00
  404e8c:	02bde77f 	.word	0x02bde77f
  404e90:	04000100 	.word	0x04000100
  404e94:	041cdb3f 	.word	0x041cdb3f
  404e98:	04000200 	.word	0x04000200
  404e9c:	057bceff 	.word	0x057bceff
  404ea0:	04000300 	.word	0x04000300
  404ea4:	06dac2bf 	.word	0x06dac2bf
  404ea8:	0839b67f 	.word	0x0839b67f
  404eac:	04000500 	.word	0x04000500
  404eb0:	04000600 	.word	0x04000600

00404eb4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  404eb4:	b480      	push	{r7}
  404eb6:	b085      	sub	sp, #20
  404eb8:	af00      	add	r7, sp, #0
  404eba:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  404ebc:	4b10      	ldr	r3, [pc, #64]	; (404f00 <_sbrk+0x4c>)
  404ebe:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  404ec0:	4b10      	ldr	r3, [pc, #64]	; (404f04 <_sbrk+0x50>)
  404ec2:	681b      	ldr	r3, [r3, #0]
  404ec4:	2b00      	cmp	r3, #0
  404ec6:	d102      	bne.n	404ece <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  404ec8:	4b0e      	ldr	r3, [pc, #56]	; (404f04 <_sbrk+0x50>)
  404eca:	4a0f      	ldr	r2, [pc, #60]	; (404f08 <_sbrk+0x54>)
  404ecc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  404ece:	4b0d      	ldr	r3, [pc, #52]	; (404f04 <_sbrk+0x50>)
  404ed0:	681b      	ldr	r3, [r3, #0]
  404ed2:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  404ed4:	68ba      	ldr	r2, [r7, #8]
  404ed6:	687b      	ldr	r3, [r7, #4]
  404ed8:	441a      	add	r2, r3
  404eda:	68fb      	ldr	r3, [r7, #12]
  404edc:	429a      	cmp	r2, r3
  404ede:	dd02      	ble.n	404ee6 <_sbrk+0x32>
		return (caddr_t) -1;	
  404ee0:	f04f 33ff 	mov.w	r3, #4294967295
  404ee4:	e006      	b.n	404ef4 <_sbrk+0x40>
	}

	heap += incr;
  404ee6:	4b07      	ldr	r3, [pc, #28]	; (404f04 <_sbrk+0x50>)
  404ee8:	681a      	ldr	r2, [r3, #0]
  404eea:	687b      	ldr	r3, [r7, #4]
  404eec:	4413      	add	r3, r2
  404eee:	4a05      	ldr	r2, [pc, #20]	; (404f04 <_sbrk+0x50>)
  404ef0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  404ef2:	68bb      	ldr	r3, [r7, #8]
}
  404ef4:	4618      	mov	r0, r3
  404ef6:	3714      	adds	r7, #20
  404ef8:	46bd      	mov	sp, r7
  404efa:	f85d 7b04 	ldr.w	r7, [sp], #4
  404efe:	4770      	bx	lr
  404f00:	2045fffc 	.word	0x2045fffc
  404f04:	20420390 	.word	0x20420390
  404f08:	20422688 	.word	0x20422688

00404f0c <_close>:
{
	return -1;
}

extern int _close(int file)
{
  404f0c:	b480      	push	{r7}
  404f0e:	b083      	sub	sp, #12
  404f10:	af00      	add	r7, sp, #0
  404f12:	6078      	str	r0, [r7, #4]
	return -1;
  404f14:	f04f 33ff 	mov.w	r3, #4294967295
}
  404f18:	4618      	mov	r0, r3
  404f1a:	370c      	adds	r7, #12
  404f1c:	46bd      	mov	sp, r7
  404f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f22:	4770      	bx	lr

00404f24 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  404f24:	b480      	push	{r7}
  404f26:	b083      	sub	sp, #12
  404f28:	af00      	add	r7, sp, #0
  404f2a:	6078      	str	r0, [r7, #4]
  404f2c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  404f2e:	683b      	ldr	r3, [r7, #0]
  404f30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  404f34:	605a      	str	r2, [r3, #4]

	return 0;
  404f36:	2300      	movs	r3, #0
}
  404f38:	4618      	mov	r0, r3
  404f3a:	370c      	adds	r7, #12
  404f3c:	46bd      	mov	sp, r7
  404f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f42:	4770      	bx	lr

00404f44 <_isatty>:

extern int _isatty(int file)
{
  404f44:	b480      	push	{r7}
  404f46:	b083      	sub	sp, #12
  404f48:	af00      	add	r7, sp, #0
  404f4a:	6078      	str	r0, [r7, #4]
	return 1;
  404f4c:	2301      	movs	r3, #1
}
  404f4e:	4618      	mov	r0, r3
  404f50:	370c      	adds	r7, #12
  404f52:	46bd      	mov	sp, r7
  404f54:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f58:	4770      	bx	lr

00404f5a <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  404f5a:	b480      	push	{r7}
  404f5c:	b085      	sub	sp, #20
  404f5e:	af00      	add	r7, sp, #0
  404f60:	60f8      	str	r0, [r7, #12]
  404f62:	60b9      	str	r1, [r7, #8]
  404f64:	607a      	str	r2, [r7, #4]
	return 0;
  404f66:	2300      	movs	r3, #0
}
  404f68:	4618      	mov	r0, r3
  404f6a:	3714      	adds	r7, #20
  404f6c:	46bd      	mov	sp, r7
  404f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f72:	4770      	bx	lr

00404f74 <__aeabi_drsub>:
  404f74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  404f78:	e002      	b.n	404f80 <__adddf3>
  404f7a:	bf00      	nop

00404f7c <__aeabi_dsub>:
  404f7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00404f80 <__adddf3>:
  404f80:	b530      	push	{r4, r5, lr}
  404f82:	ea4f 0441 	mov.w	r4, r1, lsl #1
  404f86:	ea4f 0543 	mov.w	r5, r3, lsl #1
  404f8a:	ea94 0f05 	teq	r4, r5
  404f8e:	bf08      	it	eq
  404f90:	ea90 0f02 	teqeq	r0, r2
  404f94:	bf1f      	itttt	ne
  404f96:	ea54 0c00 	orrsne.w	ip, r4, r0
  404f9a:	ea55 0c02 	orrsne.w	ip, r5, r2
  404f9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  404fa2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  404fa6:	f000 80e2 	beq.w	40516e <__adddf3+0x1ee>
  404faa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  404fae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  404fb2:	bfb8      	it	lt
  404fb4:	426d      	neglt	r5, r5
  404fb6:	dd0c      	ble.n	404fd2 <__adddf3+0x52>
  404fb8:	442c      	add	r4, r5
  404fba:	ea80 0202 	eor.w	r2, r0, r2
  404fbe:	ea81 0303 	eor.w	r3, r1, r3
  404fc2:	ea82 0000 	eor.w	r0, r2, r0
  404fc6:	ea83 0101 	eor.w	r1, r3, r1
  404fca:	ea80 0202 	eor.w	r2, r0, r2
  404fce:	ea81 0303 	eor.w	r3, r1, r3
  404fd2:	2d36      	cmp	r5, #54	; 0x36
  404fd4:	bf88      	it	hi
  404fd6:	bd30      	pophi	{r4, r5, pc}
  404fd8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404fdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  404fe0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  404fe4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  404fe8:	d002      	beq.n	404ff0 <__adddf3+0x70>
  404fea:	4240      	negs	r0, r0
  404fec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404ff0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  404ff4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  404ff8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  404ffc:	d002      	beq.n	405004 <__adddf3+0x84>
  404ffe:	4252      	negs	r2, r2
  405000:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405004:	ea94 0f05 	teq	r4, r5
  405008:	f000 80a7 	beq.w	40515a <__adddf3+0x1da>
  40500c:	f1a4 0401 	sub.w	r4, r4, #1
  405010:	f1d5 0e20 	rsbs	lr, r5, #32
  405014:	db0d      	blt.n	405032 <__adddf3+0xb2>
  405016:	fa02 fc0e 	lsl.w	ip, r2, lr
  40501a:	fa22 f205 	lsr.w	r2, r2, r5
  40501e:	1880      	adds	r0, r0, r2
  405020:	f141 0100 	adc.w	r1, r1, #0
  405024:	fa03 f20e 	lsl.w	r2, r3, lr
  405028:	1880      	adds	r0, r0, r2
  40502a:	fa43 f305 	asr.w	r3, r3, r5
  40502e:	4159      	adcs	r1, r3
  405030:	e00e      	b.n	405050 <__adddf3+0xd0>
  405032:	f1a5 0520 	sub.w	r5, r5, #32
  405036:	f10e 0e20 	add.w	lr, lr, #32
  40503a:	2a01      	cmp	r2, #1
  40503c:	fa03 fc0e 	lsl.w	ip, r3, lr
  405040:	bf28      	it	cs
  405042:	f04c 0c02 	orrcs.w	ip, ip, #2
  405046:	fa43 f305 	asr.w	r3, r3, r5
  40504a:	18c0      	adds	r0, r0, r3
  40504c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405050:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405054:	d507      	bpl.n	405066 <__adddf3+0xe6>
  405056:	f04f 0e00 	mov.w	lr, #0
  40505a:	f1dc 0c00 	rsbs	ip, ip, #0
  40505e:	eb7e 0000 	sbcs.w	r0, lr, r0
  405062:	eb6e 0101 	sbc.w	r1, lr, r1
  405066:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40506a:	d31b      	bcc.n	4050a4 <__adddf3+0x124>
  40506c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405070:	d30c      	bcc.n	40508c <__adddf3+0x10c>
  405072:	0849      	lsrs	r1, r1, #1
  405074:	ea5f 0030 	movs.w	r0, r0, rrx
  405078:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40507c:	f104 0401 	add.w	r4, r4, #1
  405080:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405084:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405088:	f080 809a 	bcs.w	4051c0 <__adddf3+0x240>
  40508c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405090:	bf08      	it	eq
  405092:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405096:	f150 0000 	adcs.w	r0, r0, #0
  40509a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40509e:	ea41 0105 	orr.w	r1, r1, r5
  4050a2:	bd30      	pop	{r4, r5, pc}
  4050a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4050a8:	4140      	adcs	r0, r0
  4050aa:	eb41 0101 	adc.w	r1, r1, r1
  4050ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4050b2:	f1a4 0401 	sub.w	r4, r4, #1
  4050b6:	d1e9      	bne.n	40508c <__adddf3+0x10c>
  4050b8:	f091 0f00 	teq	r1, #0
  4050bc:	bf04      	itt	eq
  4050be:	4601      	moveq	r1, r0
  4050c0:	2000      	moveq	r0, #0
  4050c2:	fab1 f381 	clz	r3, r1
  4050c6:	bf08      	it	eq
  4050c8:	3320      	addeq	r3, #32
  4050ca:	f1a3 030b 	sub.w	r3, r3, #11
  4050ce:	f1b3 0220 	subs.w	r2, r3, #32
  4050d2:	da0c      	bge.n	4050ee <__adddf3+0x16e>
  4050d4:	320c      	adds	r2, #12
  4050d6:	dd08      	ble.n	4050ea <__adddf3+0x16a>
  4050d8:	f102 0c14 	add.w	ip, r2, #20
  4050dc:	f1c2 020c 	rsb	r2, r2, #12
  4050e0:	fa01 f00c 	lsl.w	r0, r1, ip
  4050e4:	fa21 f102 	lsr.w	r1, r1, r2
  4050e8:	e00c      	b.n	405104 <__adddf3+0x184>
  4050ea:	f102 0214 	add.w	r2, r2, #20
  4050ee:	bfd8      	it	le
  4050f0:	f1c2 0c20 	rsble	ip, r2, #32
  4050f4:	fa01 f102 	lsl.w	r1, r1, r2
  4050f8:	fa20 fc0c 	lsr.w	ip, r0, ip
  4050fc:	bfdc      	itt	le
  4050fe:	ea41 010c 	orrle.w	r1, r1, ip
  405102:	4090      	lslle	r0, r2
  405104:	1ae4      	subs	r4, r4, r3
  405106:	bfa2      	ittt	ge
  405108:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40510c:	4329      	orrge	r1, r5
  40510e:	bd30      	popge	{r4, r5, pc}
  405110:	ea6f 0404 	mvn.w	r4, r4
  405114:	3c1f      	subs	r4, #31
  405116:	da1c      	bge.n	405152 <__adddf3+0x1d2>
  405118:	340c      	adds	r4, #12
  40511a:	dc0e      	bgt.n	40513a <__adddf3+0x1ba>
  40511c:	f104 0414 	add.w	r4, r4, #20
  405120:	f1c4 0220 	rsb	r2, r4, #32
  405124:	fa20 f004 	lsr.w	r0, r0, r4
  405128:	fa01 f302 	lsl.w	r3, r1, r2
  40512c:	ea40 0003 	orr.w	r0, r0, r3
  405130:	fa21 f304 	lsr.w	r3, r1, r4
  405134:	ea45 0103 	orr.w	r1, r5, r3
  405138:	bd30      	pop	{r4, r5, pc}
  40513a:	f1c4 040c 	rsb	r4, r4, #12
  40513e:	f1c4 0220 	rsb	r2, r4, #32
  405142:	fa20 f002 	lsr.w	r0, r0, r2
  405146:	fa01 f304 	lsl.w	r3, r1, r4
  40514a:	ea40 0003 	orr.w	r0, r0, r3
  40514e:	4629      	mov	r1, r5
  405150:	bd30      	pop	{r4, r5, pc}
  405152:	fa21 f004 	lsr.w	r0, r1, r4
  405156:	4629      	mov	r1, r5
  405158:	bd30      	pop	{r4, r5, pc}
  40515a:	f094 0f00 	teq	r4, #0
  40515e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405162:	bf06      	itte	eq
  405164:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405168:	3401      	addeq	r4, #1
  40516a:	3d01      	subne	r5, #1
  40516c:	e74e      	b.n	40500c <__adddf3+0x8c>
  40516e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405172:	bf18      	it	ne
  405174:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405178:	d029      	beq.n	4051ce <__adddf3+0x24e>
  40517a:	ea94 0f05 	teq	r4, r5
  40517e:	bf08      	it	eq
  405180:	ea90 0f02 	teqeq	r0, r2
  405184:	d005      	beq.n	405192 <__adddf3+0x212>
  405186:	ea54 0c00 	orrs.w	ip, r4, r0
  40518a:	bf04      	itt	eq
  40518c:	4619      	moveq	r1, r3
  40518e:	4610      	moveq	r0, r2
  405190:	bd30      	pop	{r4, r5, pc}
  405192:	ea91 0f03 	teq	r1, r3
  405196:	bf1e      	ittt	ne
  405198:	2100      	movne	r1, #0
  40519a:	2000      	movne	r0, #0
  40519c:	bd30      	popne	{r4, r5, pc}
  40519e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4051a2:	d105      	bne.n	4051b0 <__adddf3+0x230>
  4051a4:	0040      	lsls	r0, r0, #1
  4051a6:	4149      	adcs	r1, r1
  4051a8:	bf28      	it	cs
  4051aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4051ae:	bd30      	pop	{r4, r5, pc}
  4051b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4051b4:	bf3c      	itt	cc
  4051b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4051ba:	bd30      	popcc	{r4, r5, pc}
  4051bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4051c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4051c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4051c8:	f04f 0000 	mov.w	r0, #0
  4051cc:	bd30      	pop	{r4, r5, pc}
  4051ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4051d2:	bf1a      	itte	ne
  4051d4:	4619      	movne	r1, r3
  4051d6:	4610      	movne	r0, r2
  4051d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4051dc:	bf1c      	itt	ne
  4051de:	460b      	movne	r3, r1
  4051e0:	4602      	movne	r2, r0
  4051e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4051e6:	bf06      	itte	eq
  4051e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4051ec:	ea91 0f03 	teqeq	r1, r3
  4051f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4051f4:	bd30      	pop	{r4, r5, pc}
  4051f6:	bf00      	nop

004051f8 <__aeabi_ui2d>:
  4051f8:	f090 0f00 	teq	r0, #0
  4051fc:	bf04      	itt	eq
  4051fe:	2100      	moveq	r1, #0
  405200:	4770      	bxeq	lr
  405202:	b530      	push	{r4, r5, lr}
  405204:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405208:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40520c:	f04f 0500 	mov.w	r5, #0
  405210:	f04f 0100 	mov.w	r1, #0
  405214:	e750      	b.n	4050b8 <__adddf3+0x138>
  405216:	bf00      	nop

00405218 <__aeabi_i2d>:
  405218:	f090 0f00 	teq	r0, #0
  40521c:	bf04      	itt	eq
  40521e:	2100      	moveq	r1, #0
  405220:	4770      	bxeq	lr
  405222:	b530      	push	{r4, r5, lr}
  405224:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405228:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40522c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405230:	bf48      	it	mi
  405232:	4240      	negmi	r0, r0
  405234:	f04f 0100 	mov.w	r1, #0
  405238:	e73e      	b.n	4050b8 <__adddf3+0x138>
  40523a:	bf00      	nop

0040523c <__aeabi_f2d>:
  40523c:	0042      	lsls	r2, r0, #1
  40523e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405242:	ea4f 0131 	mov.w	r1, r1, rrx
  405246:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40524a:	bf1f      	itttt	ne
  40524c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405250:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405254:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405258:	4770      	bxne	lr
  40525a:	f092 0f00 	teq	r2, #0
  40525e:	bf14      	ite	ne
  405260:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405264:	4770      	bxeq	lr
  405266:	b530      	push	{r4, r5, lr}
  405268:	f44f 7460 	mov.w	r4, #896	; 0x380
  40526c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405270:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405274:	e720      	b.n	4050b8 <__adddf3+0x138>
  405276:	bf00      	nop

00405278 <__aeabi_ul2d>:
  405278:	ea50 0201 	orrs.w	r2, r0, r1
  40527c:	bf08      	it	eq
  40527e:	4770      	bxeq	lr
  405280:	b530      	push	{r4, r5, lr}
  405282:	f04f 0500 	mov.w	r5, #0
  405286:	e00a      	b.n	40529e <__aeabi_l2d+0x16>

00405288 <__aeabi_l2d>:
  405288:	ea50 0201 	orrs.w	r2, r0, r1
  40528c:	bf08      	it	eq
  40528e:	4770      	bxeq	lr
  405290:	b530      	push	{r4, r5, lr}
  405292:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405296:	d502      	bpl.n	40529e <__aeabi_l2d+0x16>
  405298:	4240      	negs	r0, r0
  40529a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40529e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4052a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4052a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4052aa:	f43f aedc 	beq.w	405066 <__adddf3+0xe6>
  4052ae:	f04f 0203 	mov.w	r2, #3
  4052b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4052b6:	bf18      	it	ne
  4052b8:	3203      	addne	r2, #3
  4052ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4052be:	bf18      	it	ne
  4052c0:	3203      	addne	r2, #3
  4052c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4052c6:	f1c2 0320 	rsb	r3, r2, #32
  4052ca:	fa00 fc03 	lsl.w	ip, r0, r3
  4052ce:	fa20 f002 	lsr.w	r0, r0, r2
  4052d2:	fa01 fe03 	lsl.w	lr, r1, r3
  4052d6:	ea40 000e 	orr.w	r0, r0, lr
  4052da:	fa21 f102 	lsr.w	r1, r1, r2
  4052de:	4414      	add	r4, r2
  4052e0:	e6c1      	b.n	405066 <__adddf3+0xe6>
  4052e2:	bf00      	nop

004052e4 <__aeabi_dmul>:
  4052e4:	b570      	push	{r4, r5, r6, lr}
  4052e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4052ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4052ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4052f2:	bf1d      	ittte	ne
  4052f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4052f8:	ea94 0f0c 	teqne	r4, ip
  4052fc:	ea95 0f0c 	teqne	r5, ip
  405300:	f000 f8de 	bleq	4054c0 <__aeabi_dmul+0x1dc>
  405304:	442c      	add	r4, r5
  405306:	ea81 0603 	eor.w	r6, r1, r3
  40530a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40530e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405312:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405316:	bf18      	it	ne
  405318:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40531c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405324:	d038      	beq.n	405398 <__aeabi_dmul+0xb4>
  405326:	fba0 ce02 	umull	ip, lr, r0, r2
  40532a:	f04f 0500 	mov.w	r5, #0
  40532e:	fbe1 e502 	umlal	lr, r5, r1, r2
  405332:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405336:	fbe0 e503 	umlal	lr, r5, r0, r3
  40533a:	f04f 0600 	mov.w	r6, #0
  40533e:	fbe1 5603 	umlal	r5, r6, r1, r3
  405342:	f09c 0f00 	teq	ip, #0
  405346:	bf18      	it	ne
  405348:	f04e 0e01 	orrne.w	lr, lr, #1
  40534c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405350:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405354:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405358:	d204      	bcs.n	405364 <__aeabi_dmul+0x80>
  40535a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40535e:	416d      	adcs	r5, r5
  405360:	eb46 0606 	adc.w	r6, r6, r6
  405364:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405368:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40536c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405370:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405374:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405378:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40537c:	bf88      	it	hi
  40537e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405382:	d81e      	bhi.n	4053c2 <__aeabi_dmul+0xde>
  405384:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405388:	bf08      	it	eq
  40538a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40538e:	f150 0000 	adcs.w	r0, r0, #0
  405392:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405396:	bd70      	pop	{r4, r5, r6, pc}
  405398:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40539c:	ea46 0101 	orr.w	r1, r6, r1
  4053a0:	ea40 0002 	orr.w	r0, r0, r2
  4053a4:	ea81 0103 	eor.w	r1, r1, r3
  4053a8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4053ac:	bfc2      	ittt	gt
  4053ae:	ebd4 050c 	rsbsgt	r5, r4, ip
  4053b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4053b6:	bd70      	popgt	{r4, r5, r6, pc}
  4053b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4053bc:	f04f 0e00 	mov.w	lr, #0
  4053c0:	3c01      	subs	r4, #1
  4053c2:	f300 80ab 	bgt.w	40551c <__aeabi_dmul+0x238>
  4053c6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4053ca:	bfde      	ittt	le
  4053cc:	2000      	movle	r0, #0
  4053ce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4053d2:	bd70      	pople	{r4, r5, r6, pc}
  4053d4:	f1c4 0400 	rsb	r4, r4, #0
  4053d8:	3c20      	subs	r4, #32
  4053da:	da35      	bge.n	405448 <__aeabi_dmul+0x164>
  4053dc:	340c      	adds	r4, #12
  4053de:	dc1b      	bgt.n	405418 <__aeabi_dmul+0x134>
  4053e0:	f104 0414 	add.w	r4, r4, #20
  4053e4:	f1c4 0520 	rsb	r5, r4, #32
  4053e8:	fa00 f305 	lsl.w	r3, r0, r5
  4053ec:	fa20 f004 	lsr.w	r0, r0, r4
  4053f0:	fa01 f205 	lsl.w	r2, r1, r5
  4053f4:	ea40 0002 	orr.w	r0, r0, r2
  4053f8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4053fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405404:	fa21 f604 	lsr.w	r6, r1, r4
  405408:	eb42 0106 	adc.w	r1, r2, r6
  40540c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405410:	bf08      	it	eq
  405412:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405416:	bd70      	pop	{r4, r5, r6, pc}
  405418:	f1c4 040c 	rsb	r4, r4, #12
  40541c:	f1c4 0520 	rsb	r5, r4, #32
  405420:	fa00 f304 	lsl.w	r3, r0, r4
  405424:	fa20 f005 	lsr.w	r0, r0, r5
  405428:	fa01 f204 	lsl.w	r2, r1, r4
  40542c:	ea40 0002 	orr.w	r0, r0, r2
  405430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405434:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405438:	f141 0100 	adc.w	r1, r1, #0
  40543c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405440:	bf08      	it	eq
  405442:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405446:	bd70      	pop	{r4, r5, r6, pc}
  405448:	f1c4 0520 	rsb	r5, r4, #32
  40544c:	fa00 f205 	lsl.w	r2, r0, r5
  405450:	ea4e 0e02 	orr.w	lr, lr, r2
  405454:	fa20 f304 	lsr.w	r3, r0, r4
  405458:	fa01 f205 	lsl.w	r2, r1, r5
  40545c:	ea43 0302 	orr.w	r3, r3, r2
  405460:	fa21 f004 	lsr.w	r0, r1, r4
  405464:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405468:	fa21 f204 	lsr.w	r2, r1, r4
  40546c:	ea20 0002 	bic.w	r0, r0, r2
  405470:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405474:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405478:	bf08      	it	eq
  40547a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40547e:	bd70      	pop	{r4, r5, r6, pc}
  405480:	f094 0f00 	teq	r4, #0
  405484:	d10f      	bne.n	4054a6 <__aeabi_dmul+0x1c2>
  405486:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40548a:	0040      	lsls	r0, r0, #1
  40548c:	eb41 0101 	adc.w	r1, r1, r1
  405490:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405494:	bf08      	it	eq
  405496:	3c01      	subeq	r4, #1
  405498:	d0f7      	beq.n	40548a <__aeabi_dmul+0x1a6>
  40549a:	ea41 0106 	orr.w	r1, r1, r6
  40549e:	f095 0f00 	teq	r5, #0
  4054a2:	bf18      	it	ne
  4054a4:	4770      	bxne	lr
  4054a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4054aa:	0052      	lsls	r2, r2, #1
  4054ac:	eb43 0303 	adc.w	r3, r3, r3
  4054b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4054b4:	bf08      	it	eq
  4054b6:	3d01      	subeq	r5, #1
  4054b8:	d0f7      	beq.n	4054aa <__aeabi_dmul+0x1c6>
  4054ba:	ea43 0306 	orr.w	r3, r3, r6
  4054be:	4770      	bx	lr
  4054c0:	ea94 0f0c 	teq	r4, ip
  4054c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4054c8:	bf18      	it	ne
  4054ca:	ea95 0f0c 	teqne	r5, ip
  4054ce:	d00c      	beq.n	4054ea <__aeabi_dmul+0x206>
  4054d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4054d4:	bf18      	it	ne
  4054d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4054da:	d1d1      	bne.n	405480 <__aeabi_dmul+0x19c>
  4054dc:	ea81 0103 	eor.w	r1, r1, r3
  4054e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4054e4:	f04f 0000 	mov.w	r0, #0
  4054e8:	bd70      	pop	{r4, r5, r6, pc}
  4054ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4054ee:	bf06      	itte	eq
  4054f0:	4610      	moveq	r0, r2
  4054f2:	4619      	moveq	r1, r3
  4054f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4054f8:	d019      	beq.n	40552e <__aeabi_dmul+0x24a>
  4054fa:	ea94 0f0c 	teq	r4, ip
  4054fe:	d102      	bne.n	405506 <__aeabi_dmul+0x222>
  405500:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405504:	d113      	bne.n	40552e <__aeabi_dmul+0x24a>
  405506:	ea95 0f0c 	teq	r5, ip
  40550a:	d105      	bne.n	405518 <__aeabi_dmul+0x234>
  40550c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405510:	bf1c      	itt	ne
  405512:	4610      	movne	r0, r2
  405514:	4619      	movne	r1, r3
  405516:	d10a      	bne.n	40552e <__aeabi_dmul+0x24a>
  405518:	ea81 0103 	eor.w	r1, r1, r3
  40551c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405520:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405528:	f04f 0000 	mov.w	r0, #0
  40552c:	bd70      	pop	{r4, r5, r6, pc}
  40552e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405532:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405536:	bd70      	pop	{r4, r5, r6, pc}

00405538 <__aeabi_ddiv>:
  405538:	b570      	push	{r4, r5, r6, lr}
  40553a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40553e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405546:	bf1d      	ittte	ne
  405548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40554c:	ea94 0f0c 	teqne	r4, ip
  405550:	ea95 0f0c 	teqne	r5, ip
  405554:	f000 f8a7 	bleq	4056a6 <__aeabi_ddiv+0x16e>
  405558:	eba4 0405 	sub.w	r4, r4, r5
  40555c:	ea81 0e03 	eor.w	lr, r1, r3
  405560:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405564:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405568:	f000 8088 	beq.w	40567c <__aeabi_ddiv+0x144>
  40556c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405570:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405574:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405578:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40557c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405580:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405584:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405588:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40558c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405590:	429d      	cmp	r5, r3
  405592:	bf08      	it	eq
  405594:	4296      	cmpeq	r6, r2
  405596:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40559a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40559e:	d202      	bcs.n	4055a6 <__aeabi_ddiv+0x6e>
  4055a0:	085b      	lsrs	r3, r3, #1
  4055a2:	ea4f 0232 	mov.w	r2, r2, rrx
  4055a6:	1ab6      	subs	r6, r6, r2
  4055a8:	eb65 0503 	sbc.w	r5, r5, r3
  4055ac:	085b      	lsrs	r3, r3, #1
  4055ae:	ea4f 0232 	mov.w	r2, r2, rrx
  4055b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4055b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4055ba:	ebb6 0e02 	subs.w	lr, r6, r2
  4055be:	eb75 0e03 	sbcs.w	lr, r5, r3
  4055c2:	bf22      	ittt	cs
  4055c4:	1ab6      	subcs	r6, r6, r2
  4055c6:	4675      	movcs	r5, lr
  4055c8:	ea40 000c 	orrcs.w	r0, r0, ip
  4055cc:	085b      	lsrs	r3, r3, #1
  4055ce:	ea4f 0232 	mov.w	r2, r2, rrx
  4055d2:	ebb6 0e02 	subs.w	lr, r6, r2
  4055d6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4055da:	bf22      	ittt	cs
  4055dc:	1ab6      	subcs	r6, r6, r2
  4055de:	4675      	movcs	r5, lr
  4055e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4055e4:	085b      	lsrs	r3, r3, #1
  4055e6:	ea4f 0232 	mov.w	r2, r2, rrx
  4055ea:	ebb6 0e02 	subs.w	lr, r6, r2
  4055ee:	eb75 0e03 	sbcs.w	lr, r5, r3
  4055f2:	bf22      	ittt	cs
  4055f4:	1ab6      	subcs	r6, r6, r2
  4055f6:	4675      	movcs	r5, lr
  4055f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4055fc:	085b      	lsrs	r3, r3, #1
  4055fe:	ea4f 0232 	mov.w	r2, r2, rrx
  405602:	ebb6 0e02 	subs.w	lr, r6, r2
  405606:	eb75 0e03 	sbcs.w	lr, r5, r3
  40560a:	bf22      	ittt	cs
  40560c:	1ab6      	subcs	r6, r6, r2
  40560e:	4675      	movcs	r5, lr
  405610:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405614:	ea55 0e06 	orrs.w	lr, r5, r6
  405618:	d018      	beq.n	40564c <__aeabi_ddiv+0x114>
  40561a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40561e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405622:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405626:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40562a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40562e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405632:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405636:	d1c0      	bne.n	4055ba <__aeabi_ddiv+0x82>
  405638:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40563c:	d10b      	bne.n	405656 <__aeabi_ddiv+0x11e>
  40563e:	ea41 0100 	orr.w	r1, r1, r0
  405642:	f04f 0000 	mov.w	r0, #0
  405646:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40564a:	e7b6      	b.n	4055ba <__aeabi_ddiv+0x82>
  40564c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405650:	bf04      	itt	eq
  405652:	4301      	orreq	r1, r0
  405654:	2000      	moveq	r0, #0
  405656:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40565a:	bf88      	it	hi
  40565c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405660:	f63f aeaf 	bhi.w	4053c2 <__aeabi_dmul+0xde>
  405664:	ebb5 0c03 	subs.w	ip, r5, r3
  405668:	bf04      	itt	eq
  40566a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40566e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405672:	f150 0000 	adcs.w	r0, r0, #0
  405676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40567a:	bd70      	pop	{r4, r5, r6, pc}
  40567c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405680:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405684:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405688:	bfc2      	ittt	gt
  40568a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40568e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405692:	bd70      	popgt	{r4, r5, r6, pc}
  405694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405698:	f04f 0e00 	mov.w	lr, #0
  40569c:	3c01      	subs	r4, #1
  40569e:	e690      	b.n	4053c2 <__aeabi_dmul+0xde>
  4056a0:	ea45 0e06 	orr.w	lr, r5, r6
  4056a4:	e68d      	b.n	4053c2 <__aeabi_dmul+0xde>
  4056a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4056aa:	ea94 0f0c 	teq	r4, ip
  4056ae:	bf08      	it	eq
  4056b0:	ea95 0f0c 	teqeq	r5, ip
  4056b4:	f43f af3b 	beq.w	40552e <__aeabi_dmul+0x24a>
  4056b8:	ea94 0f0c 	teq	r4, ip
  4056bc:	d10a      	bne.n	4056d4 <__aeabi_ddiv+0x19c>
  4056be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4056c2:	f47f af34 	bne.w	40552e <__aeabi_dmul+0x24a>
  4056c6:	ea95 0f0c 	teq	r5, ip
  4056ca:	f47f af25 	bne.w	405518 <__aeabi_dmul+0x234>
  4056ce:	4610      	mov	r0, r2
  4056d0:	4619      	mov	r1, r3
  4056d2:	e72c      	b.n	40552e <__aeabi_dmul+0x24a>
  4056d4:	ea95 0f0c 	teq	r5, ip
  4056d8:	d106      	bne.n	4056e8 <__aeabi_ddiv+0x1b0>
  4056da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4056de:	f43f aefd 	beq.w	4054dc <__aeabi_dmul+0x1f8>
  4056e2:	4610      	mov	r0, r2
  4056e4:	4619      	mov	r1, r3
  4056e6:	e722      	b.n	40552e <__aeabi_dmul+0x24a>
  4056e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4056ec:	bf18      	it	ne
  4056ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4056f2:	f47f aec5 	bne.w	405480 <__aeabi_dmul+0x19c>
  4056f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4056fa:	f47f af0d 	bne.w	405518 <__aeabi_dmul+0x234>
  4056fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  405702:	f47f aeeb 	bne.w	4054dc <__aeabi_dmul+0x1f8>
  405706:	e712      	b.n	40552e <__aeabi_dmul+0x24a>

00405708 <__aeabi_d2iz>:
  405708:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40570c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405710:	d215      	bcs.n	40573e <__aeabi_d2iz+0x36>
  405712:	d511      	bpl.n	405738 <__aeabi_d2iz+0x30>
  405714:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  405718:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40571c:	d912      	bls.n	405744 <__aeabi_d2iz+0x3c>
  40571e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405722:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405726:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40572a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40572e:	fa23 f002 	lsr.w	r0, r3, r2
  405732:	bf18      	it	ne
  405734:	4240      	negne	r0, r0
  405736:	4770      	bx	lr
  405738:	f04f 0000 	mov.w	r0, #0
  40573c:	4770      	bx	lr
  40573e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405742:	d105      	bne.n	405750 <__aeabi_d2iz+0x48>
  405744:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  405748:	bf08      	it	eq
  40574a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40574e:	4770      	bx	lr
  405750:	f04f 0000 	mov.w	r0, #0
  405754:	4770      	bx	lr
  405756:	bf00      	nop

00405758 <__libc_init_array>:
  405758:	b570      	push	{r4, r5, r6, lr}
  40575a:	4e0f      	ldr	r6, [pc, #60]	; (405798 <__libc_init_array+0x40>)
  40575c:	4d0f      	ldr	r5, [pc, #60]	; (40579c <__libc_init_array+0x44>)
  40575e:	1b76      	subs	r6, r6, r5
  405760:	10b6      	asrs	r6, r6, #2
  405762:	bf18      	it	ne
  405764:	2400      	movne	r4, #0
  405766:	d005      	beq.n	405774 <__libc_init_array+0x1c>
  405768:	3401      	adds	r4, #1
  40576a:	f855 3b04 	ldr.w	r3, [r5], #4
  40576e:	4798      	blx	r3
  405770:	42a6      	cmp	r6, r4
  405772:	d1f9      	bne.n	405768 <__libc_init_array+0x10>
  405774:	4e0a      	ldr	r6, [pc, #40]	; (4057a0 <__libc_init_array+0x48>)
  405776:	4d0b      	ldr	r5, [pc, #44]	; (4057a4 <__libc_init_array+0x4c>)
  405778:	1b76      	subs	r6, r6, r5
  40577a:	f003 f967 	bl	408a4c <_init>
  40577e:	10b6      	asrs	r6, r6, #2
  405780:	bf18      	it	ne
  405782:	2400      	movne	r4, #0
  405784:	d006      	beq.n	405794 <__libc_init_array+0x3c>
  405786:	3401      	adds	r4, #1
  405788:	f855 3b04 	ldr.w	r3, [r5], #4
  40578c:	4798      	blx	r3
  40578e:	42a6      	cmp	r6, r4
  405790:	d1f9      	bne.n	405786 <__libc_init_array+0x2e>
  405792:	bd70      	pop	{r4, r5, r6, pc}
  405794:	bd70      	pop	{r4, r5, r6, pc}
  405796:	bf00      	nop
  405798:	00408a58 	.word	0x00408a58
  40579c:	00408a58 	.word	0x00408a58
  4057a0:	00408a60 	.word	0x00408a60
  4057a4:	00408a58 	.word	0x00408a58

004057a8 <iprintf>:
  4057a8:	b40f      	push	{r0, r1, r2, r3}
  4057aa:	b500      	push	{lr}
  4057ac:	4907      	ldr	r1, [pc, #28]	; (4057cc <iprintf+0x24>)
  4057ae:	b083      	sub	sp, #12
  4057b0:	ab04      	add	r3, sp, #16
  4057b2:	6808      	ldr	r0, [r1, #0]
  4057b4:	f853 2b04 	ldr.w	r2, [r3], #4
  4057b8:	6881      	ldr	r1, [r0, #8]
  4057ba:	9301      	str	r3, [sp, #4]
  4057bc:	f000 fb00 	bl	405dc0 <_vfiprintf_r>
  4057c0:	b003      	add	sp, #12
  4057c2:	f85d eb04 	ldr.w	lr, [sp], #4
  4057c6:	b004      	add	sp, #16
  4057c8:	4770      	bx	lr
  4057ca:	bf00      	nop
  4057cc:	2040003c 	.word	0x2040003c

004057d0 <memcpy>:
  4057d0:	4684      	mov	ip, r0
  4057d2:	ea41 0300 	orr.w	r3, r1, r0
  4057d6:	f013 0303 	ands.w	r3, r3, #3
  4057da:	d16d      	bne.n	4058b8 <memcpy+0xe8>
  4057dc:	3a40      	subs	r2, #64	; 0x40
  4057de:	d341      	bcc.n	405864 <memcpy+0x94>
  4057e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4057e4:	f840 3b04 	str.w	r3, [r0], #4
  4057e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4057ec:	f840 3b04 	str.w	r3, [r0], #4
  4057f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4057f4:	f840 3b04 	str.w	r3, [r0], #4
  4057f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4057fc:	f840 3b04 	str.w	r3, [r0], #4
  405800:	f851 3b04 	ldr.w	r3, [r1], #4
  405804:	f840 3b04 	str.w	r3, [r0], #4
  405808:	f851 3b04 	ldr.w	r3, [r1], #4
  40580c:	f840 3b04 	str.w	r3, [r0], #4
  405810:	f851 3b04 	ldr.w	r3, [r1], #4
  405814:	f840 3b04 	str.w	r3, [r0], #4
  405818:	f851 3b04 	ldr.w	r3, [r1], #4
  40581c:	f840 3b04 	str.w	r3, [r0], #4
  405820:	f851 3b04 	ldr.w	r3, [r1], #4
  405824:	f840 3b04 	str.w	r3, [r0], #4
  405828:	f851 3b04 	ldr.w	r3, [r1], #4
  40582c:	f840 3b04 	str.w	r3, [r0], #4
  405830:	f851 3b04 	ldr.w	r3, [r1], #4
  405834:	f840 3b04 	str.w	r3, [r0], #4
  405838:	f851 3b04 	ldr.w	r3, [r1], #4
  40583c:	f840 3b04 	str.w	r3, [r0], #4
  405840:	f851 3b04 	ldr.w	r3, [r1], #4
  405844:	f840 3b04 	str.w	r3, [r0], #4
  405848:	f851 3b04 	ldr.w	r3, [r1], #4
  40584c:	f840 3b04 	str.w	r3, [r0], #4
  405850:	f851 3b04 	ldr.w	r3, [r1], #4
  405854:	f840 3b04 	str.w	r3, [r0], #4
  405858:	f851 3b04 	ldr.w	r3, [r1], #4
  40585c:	f840 3b04 	str.w	r3, [r0], #4
  405860:	3a40      	subs	r2, #64	; 0x40
  405862:	d2bd      	bcs.n	4057e0 <memcpy+0x10>
  405864:	3230      	adds	r2, #48	; 0x30
  405866:	d311      	bcc.n	40588c <memcpy+0xbc>
  405868:	f851 3b04 	ldr.w	r3, [r1], #4
  40586c:	f840 3b04 	str.w	r3, [r0], #4
  405870:	f851 3b04 	ldr.w	r3, [r1], #4
  405874:	f840 3b04 	str.w	r3, [r0], #4
  405878:	f851 3b04 	ldr.w	r3, [r1], #4
  40587c:	f840 3b04 	str.w	r3, [r0], #4
  405880:	f851 3b04 	ldr.w	r3, [r1], #4
  405884:	f840 3b04 	str.w	r3, [r0], #4
  405888:	3a10      	subs	r2, #16
  40588a:	d2ed      	bcs.n	405868 <memcpy+0x98>
  40588c:	320c      	adds	r2, #12
  40588e:	d305      	bcc.n	40589c <memcpy+0xcc>
  405890:	f851 3b04 	ldr.w	r3, [r1], #4
  405894:	f840 3b04 	str.w	r3, [r0], #4
  405898:	3a04      	subs	r2, #4
  40589a:	d2f9      	bcs.n	405890 <memcpy+0xc0>
  40589c:	3204      	adds	r2, #4
  40589e:	d008      	beq.n	4058b2 <memcpy+0xe2>
  4058a0:	07d2      	lsls	r2, r2, #31
  4058a2:	bf1c      	itt	ne
  4058a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4058a8:	f800 3b01 	strbne.w	r3, [r0], #1
  4058ac:	d301      	bcc.n	4058b2 <memcpy+0xe2>
  4058ae:	880b      	ldrh	r3, [r1, #0]
  4058b0:	8003      	strh	r3, [r0, #0]
  4058b2:	4660      	mov	r0, ip
  4058b4:	4770      	bx	lr
  4058b6:	bf00      	nop
  4058b8:	2a08      	cmp	r2, #8
  4058ba:	d313      	bcc.n	4058e4 <memcpy+0x114>
  4058bc:	078b      	lsls	r3, r1, #30
  4058be:	d08d      	beq.n	4057dc <memcpy+0xc>
  4058c0:	f010 0303 	ands.w	r3, r0, #3
  4058c4:	d08a      	beq.n	4057dc <memcpy+0xc>
  4058c6:	f1c3 0304 	rsb	r3, r3, #4
  4058ca:	1ad2      	subs	r2, r2, r3
  4058cc:	07db      	lsls	r3, r3, #31
  4058ce:	bf1c      	itt	ne
  4058d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4058d4:	f800 3b01 	strbne.w	r3, [r0], #1
  4058d8:	d380      	bcc.n	4057dc <memcpy+0xc>
  4058da:	f831 3b02 	ldrh.w	r3, [r1], #2
  4058de:	f820 3b02 	strh.w	r3, [r0], #2
  4058e2:	e77b      	b.n	4057dc <memcpy+0xc>
  4058e4:	3a04      	subs	r2, #4
  4058e6:	d3d9      	bcc.n	40589c <memcpy+0xcc>
  4058e8:	3a01      	subs	r2, #1
  4058ea:	f811 3b01 	ldrb.w	r3, [r1], #1
  4058ee:	f800 3b01 	strb.w	r3, [r0], #1
  4058f2:	d2f9      	bcs.n	4058e8 <memcpy+0x118>
  4058f4:	780b      	ldrb	r3, [r1, #0]
  4058f6:	7003      	strb	r3, [r0, #0]
  4058f8:	784b      	ldrb	r3, [r1, #1]
  4058fa:	7043      	strb	r3, [r0, #1]
  4058fc:	788b      	ldrb	r3, [r1, #2]
  4058fe:	7083      	strb	r3, [r0, #2]
  405900:	4660      	mov	r0, ip
  405902:	4770      	bx	lr

00405904 <memset>:
  405904:	b470      	push	{r4, r5, r6}
  405906:	0786      	lsls	r6, r0, #30
  405908:	d046      	beq.n	405998 <memset+0x94>
  40590a:	1e54      	subs	r4, r2, #1
  40590c:	2a00      	cmp	r2, #0
  40590e:	d041      	beq.n	405994 <memset+0x90>
  405910:	b2ca      	uxtb	r2, r1
  405912:	4603      	mov	r3, r0
  405914:	e002      	b.n	40591c <memset+0x18>
  405916:	f114 34ff 	adds.w	r4, r4, #4294967295
  40591a:	d33b      	bcc.n	405994 <memset+0x90>
  40591c:	f803 2b01 	strb.w	r2, [r3], #1
  405920:	079d      	lsls	r5, r3, #30
  405922:	d1f8      	bne.n	405916 <memset+0x12>
  405924:	2c03      	cmp	r4, #3
  405926:	d92e      	bls.n	405986 <memset+0x82>
  405928:	b2cd      	uxtb	r5, r1
  40592a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40592e:	2c0f      	cmp	r4, #15
  405930:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  405934:	d919      	bls.n	40596a <memset+0x66>
  405936:	f103 0210 	add.w	r2, r3, #16
  40593a:	4626      	mov	r6, r4
  40593c:	3e10      	subs	r6, #16
  40593e:	2e0f      	cmp	r6, #15
  405940:	f842 5c10 	str.w	r5, [r2, #-16]
  405944:	f842 5c0c 	str.w	r5, [r2, #-12]
  405948:	f842 5c08 	str.w	r5, [r2, #-8]
  40594c:	f842 5c04 	str.w	r5, [r2, #-4]
  405950:	f102 0210 	add.w	r2, r2, #16
  405954:	d8f2      	bhi.n	40593c <memset+0x38>
  405956:	f1a4 0210 	sub.w	r2, r4, #16
  40595a:	f022 020f 	bic.w	r2, r2, #15
  40595e:	f004 040f 	and.w	r4, r4, #15
  405962:	3210      	adds	r2, #16
  405964:	2c03      	cmp	r4, #3
  405966:	4413      	add	r3, r2
  405968:	d90d      	bls.n	405986 <memset+0x82>
  40596a:	461e      	mov	r6, r3
  40596c:	4622      	mov	r2, r4
  40596e:	3a04      	subs	r2, #4
  405970:	2a03      	cmp	r2, #3
  405972:	f846 5b04 	str.w	r5, [r6], #4
  405976:	d8fa      	bhi.n	40596e <memset+0x6a>
  405978:	1f22      	subs	r2, r4, #4
  40597a:	f022 0203 	bic.w	r2, r2, #3
  40597e:	3204      	adds	r2, #4
  405980:	4413      	add	r3, r2
  405982:	f004 0403 	and.w	r4, r4, #3
  405986:	b12c      	cbz	r4, 405994 <memset+0x90>
  405988:	b2c9      	uxtb	r1, r1
  40598a:	441c      	add	r4, r3
  40598c:	f803 1b01 	strb.w	r1, [r3], #1
  405990:	429c      	cmp	r4, r3
  405992:	d1fb      	bne.n	40598c <memset+0x88>
  405994:	bc70      	pop	{r4, r5, r6}
  405996:	4770      	bx	lr
  405998:	4614      	mov	r4, r2
  40599a:	4603      	mov	r3, r0
  40599c:	e7c2      	b.n	405924 <memset+0x20>
  40599e:	bf00      	nop

004059a0 <_puts_r>:
  4059a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4059a2:	4605      	mov	r5, r0
  4059a4:	b089      	sub	sp, #36	; 0x24
  4059a6:	4608      	mov	r0, r1
  4059a8:	460c      	mov	r4, r1
  4059aa:	f000 f929 	bl	405c00 <strlen>
  4059ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4059b0:	4f21      	ldr	r7, [pc, #132]	; (405a38 <_puts_r+0x98>)
  4059b2:	9404      	str	r4, [sp, #16]
  4059b4:	2601      	movs	r6, #1
  4059b6:	1c44      	adds	r4, r0, #1
  4059b8:	a904      	add	r1, sp, #16
  4059ba:	2202      	movs	r2, #2
  4059bc:	9403      	str	r4, [sp, #12]
  4059be:	9005      	str	r0, [sp, #20]
  4059c0:	68ac      	ldr	r4, [r5, #8]
  4059c2:	9706      	str	r7, [sp, #24]
  4059c4:	9607      	str	r6, [sp, #28]
  4059c6:	9101      	str	r1, [sp, #4]
  4059c8:	9202      	str	r2, [sp, #8]
  4059ca:	b353      	cbz	r3, 405a22 <_puts_r+0x82>
  4059cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4059ce:	f013 0f01 	tst.w	r3, #1
  4059d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059d6:	b29a      	uxth	r2, r3
  4059d8:	d101      	bne.n	4059de <_puts_r+0x3e>
  4059da:	0590      	lsls	r0, r2, #22
  4059dc:	d525      	bpl.n	405a2a <_puts_r+0x8a>
  4059de:	0491      	lsls	r1, r2, #18
  4059e0:	d406      	bmi.n	4059f0 <_puts_r+0x50>
  4059e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4059e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4059e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  4059ec:	81a3      	strh	r3, [r4, #12]
  4059ee:	6662      	str	r2, [r4, #100]	; 0x64
  4059f0:	4628      	mov	r0, r5
  4059f2:	aa01      	add	r2, sp, #4
  4059f4:	4621      	mov	r1, r4
  4059f6:	f001 fbe5 	bl	4071c4 <__sfvwrite_r>
  4059fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4059fc:	2800      	cmp	r0, #0
  4059fe:	bf0c      	ite	eq
  405a00:	250a      	moveq	r5, #10
  405a02:	f04f 35ff 	movne.w	r5, #4294967295
  405a06:	07da      	lsls	r2, r3, #31
  405a08:	d402      	bmi.n	405a10 <_puts_r+0x70>
  405a0a:	89a3      	ldrh	r3, [r4, #12]
  405a0c:	059b      	lsls	r3, r3, #22
  405a0e:	d502      	bpl.n	405a16 <_puts_r+0x76>
  405a10:	4628      	mov	r0, r5
  405a12:	b009      	add	sp, #36	; 0x24
  405a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405a16:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405a18:	f001 fd8a 	bl	407530 <__retarget_lock_release_recursive>
  405a1c:	4628      	mov	r0, r5
  405a1e:	b009      	add	sp, #36	; 0x24
  405a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405a22:	4628      	mov	r0, r5
  405a24:	f001 f9c2 	bl	406dac <__sinit>
  405a28:	e7d0      	b.n	4059cc <_puts_r+0x2c>
  405a2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405a2c:	f001 fd7e 	bl	40752c <__retarget_lock_acquire_recursive>
  405a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405a34:	b29a      	uxth	r2, r3
  405a36:	e7d2      	b.n	4059de <_puts_r+0x3e>
  405a38:	004088e4 	.word	0x004088e4

00405a3c <puts>:
  405a3c:	4b02      	ldr	r3, [pc, #8]	; (405a48 <puts+0xc>)
  405a3e:	4601      	mov	r1, r0
  405a40:	6818      	ldr	r0, [r3, #0]
  405a42:	f7ff bfad 	b.w	4059a0 <_puts_r>
  405a46:	bf00      	nop
  405a48:	2040003c 	.word	0x2040003c

00405a4c <setbuf>:
  405a4c:	2900      	cmp	r1, #0
  405a4e:	bf0c      	ite	eq
  405a50:	2202      	moveq	r2, #2
  405a52:	2200      	movne	r2, #0
  405a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405a58:	f000 b800 	b.w	405a5c <setvbuf>

00405a5c <setvbuf>:
  405a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405a60:	4c61      	ldr	r4, [pc, #388]	; (405be8 <setvbuf+0x18c>)
  405a62:	6825      	ldr	r5, [r4, #0]
  405a64:	b083      	sub	sp, #12
  405a66:	4604      	mov	r4, r0
  405a68:	460f      	mov	r7, r1
  405a6a:	4690      	mov	r8, r2
  405a6c:	461e      	mov	r6, r3
  405a6e:	b115      	cbz	r5, 405a76 <setvbuf+0x1a>
  405a70:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405a72:	2b00      	cmp	r3, #0
  405a74:	d064      	beq.n	405b40 <setvbuf+0xe4>
  405a76:	f1b8 0f02 	cmp.w	r8, #2
  405a7a:	d006      	beq.n	405a8a <setvbuf+0x2e>
  405a7c:	f1b8 0f01 	cmp.w	r8, #1
  405a80:	f200 809f 	bhi.w	405bc2 <setvbuf+0x166>
  405a84:	2e00      	cmp	r6, #0
  405a86:	f2c0 809c 	blt.w	405bc2 <setvbuf+0x166>
  405a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405a8c:	07d8      	lsls	r0, r3, #31
  405a8e:	d534      	bpl.n	405afa <setvbuf+0x9e>
  405a90:	4621      	mov	r1, r4
  405a92:	4628      	mov	r0, r5
  405a94:	f001 f932 	bl	406cfc <_fflush_r>
  405a98:	6b21      	ldr	r1, [r4, #48]	; 0x30
  405a9a:	b141      	cbz	r1, 405aae <setvbuf+0x52>
  405a9c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405aa0:	4299      	cmp	r1, r3
  405aa2:	d002      	beq.n	405aaa <setvbuf+0x4e>
  405aa4:	4628      	mov	r0, r5
  405aa6:	f001 faa7 	bl	406ff8 <_free_r>
  405aaa:	2300      	movs	r3, #0
  405aac:	6323      	str	r3, [r4, #48]	; 0x30
  405aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ab2:	2200      	movs	r2, #0
  405ab4:	61a2      	str	r2, [r4, #24]
  405ab6:	6062      	str	r2, [r4, #4]
  405ab8:	061a      	lsls	r2, r3, #24
  405aba:	d43a      	bmi.n	405b32 <setvbuf+0xd6>
  405abc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  405ac0:	f023 0303 	bic.w	r3, r3, #3
  405ac4:	f1b8 0f02 	cmp.w	r8, #2
  405ac8:	81a3      	strh	r3, [r4, #12]
  405aca:	d01d      	beq.n	405b08 <setvbuf+0xac>
  405acc:	ab01      	add	r3, sp, #4
  405ace:	466a      	mov	r2, sp
  405ad0:	4621      	mov	r1, r4
  405ad2:	4628      	mov	r0, r5
  405ad4:	f001 fd2e 	bl	407534 <__swhatbuf_r>
  405ad8:	89a3      	ldrh	r3, [r4, #12]
  405ada:	4318      	orrs	r0, r3
  405adc:	81a0      	strh	r0, [r4, #12]
  405ade:	2e00      	cmp	r6, #0
  405ae0:	d132      	bne.n	405b48 <setvbuf+0xec>
  405ae2:	9e00      	ldr	r6, [sp, #0]
  405ae4:	4630      	mov	r0, r6
  405ae6:	f001 fd9d 	bl	407624 <malloc>
  405aea:	4607      	mov	r7, r0
  405aec:	2800      	cmp	r0, #0
  405aee:	d06b      	beq.n	405bc8 <setvbuf+0x16c>
  405af0:	89a3      	ldrh	r3, [r4, #12]
  405af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405af6:	81a3      	strh	r3, [r4, #12]
  405af8:	e028      	b.n	405b4c <setvbuf+0xf0>
  405afa:	89a3      	ldrh	r3, [r4, #12]
  405afc:	0599      	lsls	r1, r3, #22
  405afe:	d4c7      	bmi.n	405a90 <setvbuf+0x34>
  405b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405b02:	f001 fd13 	bl	40752c <__retarget_lock_acquire_recursive>
  405b06:	e7c3      	b.n	405a90 <setvbuf+0x34>
  405b08:	2500      	movs	r5, #0
  405b0a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405b0c:	2600      	movs	r6, #0
  405b0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405b12:	f043 0302 	orr.w	r3, r3, #2
  405b16:	2001      	movs	r0, #1
  405b18:	60a6      	str	r6, [r4, #8]
  405b1a:	07ce      	lsls	r6, r1, #31
  405b1c:	81a3      	strh	r3, [r4, #12]
  405b1e:	6022      	str	r2, [r4, #0]
  405b20:	6122      	str	r2, [r4, #16]
  405b22:	6160      	str	r0, [r4, #20]
  405b24:	d401      	bmi.n	405b2a <setvbuf+0xce>
  405b26:	0598      	lsls	r0, r3, #22
  405b28:	d53e      	bpl.n	405ba8 <setvbuf+0x14c>
  405b2a:	4628      	mov	r0, r5
  405b2c:	b003      	add	sp, #12
  405b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405b32:	6921      	ldr	r1, [r4, #16]
  405b34:	4628      	mov	r0, r5
  405b36:	f001 fa5f 	bl	406ff8 <_free_r>
  405b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b3e:	e7bd      	b.n	405abc <setvbuf+0x60>
  405b40:	4628      	mov	r0, r5
  405b42:	f001 f933 	bl	406dac <__sinit>
  405b46:	e796      	b.n	405a76 <setvbuf+0x1a>
  405b48:	2f00      	cmp	r7, #0
  405b4a:	d0cb      	beq.n	405ae4 <setvbuf+0x88>
  405b4c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  405b4e:	2b00      	cmp	r3, #0
  405b50:	d033      	beq.n	405bba <setvbuf+0x15e>
  405b52:	9b00      	ldr	r3, [sp, #0]
  405b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405b58:	6027      	str	r7, [r4, #0]
  405b5a:	429e      	cmp	r6, r3
  405b5c:	bf1c      	itt	ne
  405b5e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  405b62:	81a2      	strhne	r2, [r4, #12]
  405b64:	f1b8 0f01 	cmp.w	r8, #1
  405b68:	bf04      	itt	eq
  405b6a:	f042 0201 	orreq.w	r2, r2, #1
  405b6e:	81a2      	strheq	r2, [r4, #12]
  405b70:	b292      	uxth	r2, r2
  405b72:	f012 0308 	ands.w	r3, r2, #8
  405b76:	6127      	str	r7, [r4, #16]
  405b78:	6166      	str	r6, [r4, #20]
  405b7a:	d00e      	beq.n	405b9a <setvbuf+0x13e>
  405b7c:	07d1      	lsls	r1, r2, #31
  405b7e:	d51a      	bpl.n	405bb6 <setvbuf+0x15a>
  405b80:	6e65      	ldr	r5, [r4, #100]	; 0x64
  405b82:	4276      	negs	r6, r6
  405b84:	2300      	movs	r3, #0
  405b86:	f015 0501 	ands.w	r5, r5, #1
  405b8a:	61a6      	str	r6, [r4, #24]
  405b8c:	60a3      	str	r3, [r4, #8]
  405b8e:	d009      	beq.n	405ba4 <setvbuf+0x148>
  405b90:	2500      	movs	r5, #0
  405b92:	4628      	mov	r0, r5
  405b94:	b003      	add	sp, #12
  405b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405b9a:	60a3      	str	r3, [r4, #8]
  405b9c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  405b9e:	f015 0501 	ands.w	r5, r5, #1
  405ba2:	d1f5      	bne.n	405b90 <setvbuf+0x134>
  405ba4:	0593      	lsls	r3, r2, #22
  405ba6:	d4c0      	bmi.n	405b2a <setvbuf+0xce>
  405ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405baa:	f001 fcc1 	bl	407530 <__retarget_lock_release_recursive>
  405bae:	4628      	mov	r0, r5
  405bb0:	b003      	add	sp, #12
  405bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405bb6:	60a6      	str	r6, [r4, #8]
  405bb8:	e7f0      	b.n	405b9c <setvbuf+0x140>
  405bba:	4628      	mov	r0, r5
  405bbc:	f001 f8f6 	bl	406dac <__sinit>
  405bc0:	e7c7      	b.n	405b52 <setvbuf+0xf6>
  405bc2:	f04f 35ff 	mov.w	r5, #4294967295
  405bc6:	e7b0      	b.n	405b2a <setvbuf+0xce>
  405bc8:	f8dd 9000 	ldr.w	r9, [sp]
  405bcc:	45b1      	cmp	r9, r6
  405bce:	d004      	beq.n	405bda <setvbuf+0x17e>
  405bd0:	4648      	mov	r0, r9
  405bd2:	f001 fd27 	bl	407624 <malloc>
  405bd6:	4607      	mov	r7, r0
  405bd8:	b920      	cbnz	r0, 405be4 <setvbuf+0x188>
  405bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405bde:	f04f 35ff 	mov.w	r5, #4294967295
  405be2:	e792      	b.n	405b0a <setvbuf+0xae>
  405be4:	464e      	mov	r6, r9
  405be6:	e783      	b.n	405af0 <setvbuf+0x94>
  405be8:	2040003c 	.word	0x2040003c
	...

00405c00 <strlen>:
  405c00:	f890 f000 	pld	[r0]
  405c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405c08:	f020 0107 	bic.w	r1, r0, #7
  405c0c:	f06f 0c00 	mvn.w	ip, #0
  405c10:	f010 0407 	ands.w	r4, r0, #7
  405c14:	f891 f020 	pld	[r1, #32]
  405c18:	f040 8049 	bne.w	405cae <strlen+0xae>
  405c1c:	f04f 0400 	mov.w	r4, #0
  405c20:	f06f 0007 	mvn.w	r0, #7
  405c24:	e9d1 2300 	ldrd	r2, r3, [r1]
  405c28:	f891 f040 	pld	[r1, #64]	; 0x40
  405c2c:	f100 0008 	add.w	r0, r0, #8
  405c30:	fa82 f24c 	uadd8	r2, r2, ip
  405c34:	faa4 f28c 	sel	r2, r4, ip
  405c38:	fa83 f34c 	uadd8	r3, r3, ip
  405c3c:	faa2 f38c 	sel	r3, r2, ip
  405c40:	bb4b      	cbnz	r3, 405c96 <strlen+0x96>
  405c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405c46:	fa82 f24c 	uadd8	r2, r2, ip
  405c4a:	f100 0008 	add.w	r0, r0, #8
  405c4e:	faa4 f28c 	sel	r2, r4, ip
  405c52:	fa83 f34c 	uadd8	r3, r3, ip
  405c56:	faa2 f38c 	sel	r3, r2, ip
  405c5a:	b9e3      	cbnz	r3, 405c96 <strlen+0x96>
  405c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405c60:	fa82 f24c 	uadd8	r2, r2, ip
  405c64:	f100 0008 	add.w	r0, r0, #8
  405c68:	faa4 f28c 	sel	r2, r4, ip
  405c6c:	fa83 f34c 	uadd8	r3, r3, ip
  405c70:	faa2 f38c 	sel	r3, r2, ip
  405c74:	b97b      	cbnz	r3, 405c96 <strlen+0x96>
  405c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  405c7a:	f101 0120 	add.w	r1, r1, #32
  405c7e:	fa82 f24c 	uadd8	r2, r2, ip
  405c82:	f100 0008 	add.w	r0, r0, #8
  405c86:	faa4 f28c 	sel	r2, r4, ip
  405c8a:	fa83 f34c 	uadd8	r3, r3, ip
  405c8e:	faa2 f38c 	sel	r3, r2, ip
  405c92:	2b00      	cmp	r3, #0
  405c94:	d0c6      	beq.n	405c24 <strlen+0x24>
  405c96:	2a00      	cmp	r2, #0
  405c98:	bf04      	itt	eq
  405c9a:	3004      	addeq	r0, #4
  405c9c:	461a      	moveq	r2, r3
  405c9e:	ba12      	rev	r2, r2
  405ca0:	fab2 f282 	clz	r2, r2
  405ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  405cac:	4770      	bx	lr
  405cae:	e9d1 2300 	ldrd	r2, r3, [r1]
  405cb2:	f004 0503 	and.w	r5, r4, #3
  405cb6:	f1c4 0000 	rsb	r0, r4, #0
  405cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  405cbe:	f014 0f04 	tst.w	r4, #4
  405cc2:	f891 f040 	pld	[r1, #64]	; 0x40
  405cc6:	fa0c f505 	lsl.w	r5, ip, r5
  405cca:	ea62 0205 	orn	r2, r2, r5
  405cce:	bf1c      	itt	ne
  405cd0:	ea63 0305 	ornne	r3, r3, r5
  405cd4:	4662      	movne	r2, ip
  405cd6:	f04f 0400 	mov.w	r4, #0
  405cda:	e7a9      	b.n	405c30 <strlen+0x30>

00405cdc <strncpy>:
  405cdc:	ea40 0301 	orr.w	r3, r0, r1
  405ce0:	f013 0f03 	tst.w	r3, #3
  405ce4:	b470      	push	{r4, r5, r6}
  405ce6:	4603      	mov	r3, r0
  405ce8:	d024      	beq.n	405d34 <strncpy+0x58>
  405cea:	b1a2      	cbz	r2, 405d16 <strncpy+0x3a>
  405cec:	780c      	ldrb	r4, [r1, #0]
  405cee:	701c      	strb	r4, [r3, #0]
  405cf0:	3a01      	subs	r2, #1
  405cf2:	3301      	adds	r3, #1
  405cf4:	3101      	adds	r1, #1
  405cf6:	b13c      	cbz	r4, 405d08 <strncpy+0x2c>
  405cf8:	b16a      	cbz	r2, 405d16 <strncpy+0x3a>
  405cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
  405cfe:	f803 4b01 	strb.w	r4, [r3], #1
  405d02:	3a01      	subs	r2, #1
  405d04:	2c00      	cmp	r4, #0
  405d06:	d1f7      	bne.n	405cf8 <strncpy+0x1c>
  405d08:	b12a      	cbz	r2, 405d16 <strncpy+0x3a>
  405d0a:	441a      	add	r2, r3
  405d0c:	2100      	movs	r1, #0
  405d0e:	f803 1b01 	strb.w	r1, [r3], #1
  405d12:	429a      	cmp	r2, r3
  405d14:	d1fb      	bne.n	405d0e <strncpy+0x32>
  405d16:	bc70      	pop	{r4, r5, r6}
  405d18:	4770      	bx	lr
  405d1a:	460e      	mov	r6, r1
  405d1c:	f851 5b04 	ldr.w	r5, [r1], #4
  405d20:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
  405d24:	ea24 0405 	bic.w	r4, r4, r5
  405d28:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  405d2c:	d105      	bne.n	405d3a <strncpy+0x5e>
  405d2e:	f843 5b04 	str.w	r5, [r3], #4
  405d32:	3a04      	subs	r2, #4
  405d34:	2a03      	cmp	r2, #3
  405d36:	d8f0      	bhi.n	405d1a <strncpy+0x3e>
  405d38:	e7d7      	b.n	405cea <strncpy+0xe>
  405d3a:	4631      	mov	r1, r6
  405d3c:	e7d6      	b.n	405cec <strncpy+0x10>
  405d3e:	bf00      	nop

00405d40 <__sprint_r.part.0>:
  405d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d44:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  405d46:	049c      	lsls	r4, r3, #18
  405d48:	4693      	mov	fp, r2
  405d4a:	d52f      	bpl.n	405dac <__sprint_r.part.0+0x6c>
  405d4c:	6893      	ldr	r3, [r2, #8]
  405d4e:	6812      	ldr	r2, [r2, #0]
  405d50:	b353      	cbz	r3, 405da8 <__sprint_r.part.0+0x68>
  405d52:	460e      	mov	r6, r1
  405d54:	4607      	mov	r7, r0
  405d56:	f102 0908 	add.w	r9, r2, #8
  405d5a:	e919 0420 	ldmdb	r9, {r5, sl}
  405d5e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  405d62:	d017      	beq.n	405d94 <__sprint_r.part.0+0x54>
  405d64:	3d04      	subs	r5, #4
  405d66:	2400      	movs	r4, #0
  405d68:	e001      	b.n	405d6e <__sprint_r.part.0+0x2e>
  405d6a:	45a0      	cmp	r8, r4
  405d6c:	d010      	beq.n	405d90 <__sprint_r.part.0+0x50>
  405d6e:	4632      	mov	r2, r6
  405d70:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405d74:	4638      	mov	r0, r7
  405d76:	f001 f8bb 	bl	406ef0 <_fputwc_r>
  405d7a:	1c43      	adds	r3, r0, #1
  405d7c:	f104 0401 	add.w	r4, r4, #1
  405d80:	d1f3      	bne.n	405d6a <__sprint_r.part.0+0x2a>
  405d82:	2300      	movs	r3, #0
  405d84:	f8cb 3008 	str.w	r3, [fp, #8]
  405d88:	f8cb 3004 	str.w	r3, [fp, #4]
  405d8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405d90:	f8db 3008 	ldr.w	r3, [fp, #8]
  405d94:	f02a 0a03 	bic.w	sl, sl, #3
  405d98:	eba3 030a 	sub.w	r3, r3, sl
  405d9c:	f8cb 3008 	str.w	r3, [fp, #8]
  405da0:	f109 0908 	add.w	r9, r9, #8
  405da4:	2b00      	cmp	r3, #0
  405da6:	d1d8      	bne.n	405d5a <__sprint_r.part.0+0x1a>
  405da8:	2000      	movs	r0, #0
  405daa:	e7ea      	b.n	405d82 <__sprint_r.part.0+0x42>
  405dac:	f001 fa0a 	bl	4071c4 <__sfvwrite_r>
  405db0:	2300      	movs	r3, #0
  405db2:	f8cb 3008 	str.w	r3, [fp, #8]
  405db6:	f8cb 3004 	str.w	r3, [fp, #4]
  405dba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dbe:	bf00      	nop

00405dc0 <_vfiprintf_r>:
  405dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405dc4:	b0ad      	sub	sp, #180	; 0xb4
  405dc6:	461d      	mov	r5, r3
  405dc8:	468b      	mov	fp, r1
  405dca:	4690      	mov	r8, r2
  405dcc:	9307      	str	r3, [sp, #28]
  405dce:	9006      	str	r0, [sp, #24]
  405dd0:	b118      	cbz	r0, 405dda <_vfiprintf_r+0x1a>
  405dd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405dd4:	2b00      	cmp	r3, #0
  405dd6:	f000 80f3 	beq.w	405fc0 <_vfiprintf_r+0x200>
  405dda:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405dde:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405de2:	07df      	lsls	r7, r3, #31
  405de4:	b281      	uxth	r1, r0
  405de6:	d402      	bmi.n	405dee <_vfiprintf_r+0x2e>
  405de8:	058e      	lsls	r6, r1, #22
  405dea:	f140 80fc 	bpl.w	405fe6 <_vfiprintf_r+0x226>
  405dee:	048c      	lsls	r4, r1, #18
  405df0:	d40a      	bmi.n	405e08 <_vfiprintf_r+0x48>
  405df2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405df6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405dfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405dfe:	f8ab 100c 	strh.w	r1, [fp, #12]
  405e02:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  405e06:	b289      	uxth	r1, r1
  405e08:	0708      	lsls	r0, r1, #28
  405e0a:	f140 80b3 	bpl.w	405f74 <_vfiprintf_r+0x1b4>
  405e0e:	f8db 3010 	ldr.w	r3, [fp, #16]
  405e12:	2b00      	cmp	r3, #0
  405e14:	f000 80ae 	beq.w	405f74 <_vfiprintf_r+0x1b4>
  405e18:	f001 031a 	and.w	r3, r1, #26
  405e1c:	2b0a      	cmp	r3, #10
  405e1e:	f000 80b5 	beq.w	405f8c <_vfiprintf_r+0x1cc>
  405e22:	2300      	movs	r3, #0
  405e24:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405e28:	930b      	str	r3, [sp, #44]	; 0x2c
  405e2a:	9311      	str	r3, [sp, #68]	; 0x44
  405e2c:	9310      	str	r3, [sp, #64]	; 0x40
  405e2e:	9303      	str	r3, [sp, #12]
  405e30:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405e34:	46ca      	mov	sl, r9
  405e36:	f8cd b010 	str.w	fp, [sp, #16]
  405e3a:	f898 3000 	ldrb.w	r3, [r8]
  405e3e:	4644      	mov	r4, r8
  405e40:	b1fb      	cbz	r3, 405e82 <_vfiprintf_r+0xc2>
  405e42:	2b25      	cmp	r3, #37	; 0x25
  405e44:	d102      	bne.n	405e4c <_vfiprintf_r+0x8c>
  405e46:	e01c      	b.n	405e82 <_vfiprintf_r+0xc2>
  405e48:	2b25      	cmp	r3, #37	; 0x25
  405e4a:	d003      	beq.n	405e54 <_vfiprintf_r+0x94>
  405e4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405e50:	2b00      	cmp	r3, #0
  405e52:	d1f9      	bne.n	405e48 <_vfiprintf_r+0x88>
  405e54:	eba4 0508 	sub.w	r5, r4, r8
  405e58:	b19d      	cbz	r5, 405e82 <_vfiprintf_r+0xc2>
  405e5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405e5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e5e:	f8ca 8000 	str.w	r8, [sl]
  405e62:	3301      	adds	r3, #1
  405e64:	442a      	add	r2, r5
  405e66:	2b07      	cmp	r3, #7
  405e68:	f8ca 5004 	str.w	r5, [sl, #4]
  405e6c:	9211      	str	r2, [sp, #68]	; 0x44
  405e6e:	9310      	str	r3, [sp, #64]	; 0x40
  405e70:	dd7a      	ble.n	405f68 <_vfiprintf_r+0x1a8>
  405e72:	2a00      	cmp	r2, #0
  405e74:	f040 84b0 	bne.w	4067d8 <_vfiprintf_r+0xa18>
  405e78:	9b03      	ldr	r3, [sp, #12]
  405e7a:	9210      	str	r2, [sp, #64]	; 0x40
  405e7c:	442b      	add	r3, r5
  405e7e:	46ca      	mov	sl, r9
  405e80:	9303      	str	r3, [sp, #12]
  405e82:	7823      	ldrb	r3, [r4, #0]
  405e84:	2b00      	cmp	r3, #0
  405e86:	f000 83e0 	beq.w	40664a <_vfiprintf_r+0x88a>
  405e8a:	2000      	movs	r0, #0
  405e8c:	f04f 0300 	mov.w	r3, #0
  405e90:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405e94:	f104 0801 	add.w	r8, r4, #1
  405e98:	7862      	ldrb	r2, [r4, #1]
  405e9a:	4605      	mov	r5, r0
  405e9c:	4606      	mov	r6, r0
  405e9e:	4603      	mov	r3, r0
  405ea0:	f04f 34ff 	mov.w	r4, #4294967295
  405ea4:	f108 0801 	add.w	r8, r8, #1
  405ea8:	f1a2 0120 	sub.w	r1, r2, #32
  405eac:	2958      	cmp	r1, #88	; 0x58
  405eae:	f200 82de 	bhi.w	40646e <_vfiprintf_r+0x6ae>
  405eb2:	e8df f011 	tbh	[pc, r1, lsl #1]
  405eb6:	0221      	.short	0x0221
  405eb8:	02dc02dc 	.word	0x02dc02dc
  405ebc:	02dc0229 	.word	0x02dc0229
  405ec0:	02dc02dc 	.word	0x02dc02dc
  405ec4:	02dc02dc 	.word	0x02dc02dc
  405ec8:	028902dc 	.word	0x028902dc
  405ecc:	02dc0295 	.word	0x02dc0295
  405ed0:	02bd00a2 	.word	0x02bd00a2
  405ed4:	019f02dc 	.word	0x019f02dc
  405ed8:	01a401a4 	.word	0x01a401a4
  405edc:	01a401a4 	.word	0x01a401a4
  405ee0:	01a401a4 	.word	0x01a401a4
  405ee4:	01a401a4 	.word	0x01a401a4
  405ee8:	02dc01a4 	.word	0x02dc01a4
  405eec:	02dc02dc 	.word	0x02dc02dc
  405ef0:	02dc02dc 	.word	0x02dc02dc
  405ef4:	02dc02dc 	.word	0x02dc02dc
  405ef8:	02dc02dc 	.word	0x02dc02dc
  405efc:	01b202dc 	.word	0x01b202dc
  405f00:	02dc02dc 	.word	0x02dc02dc
  405f04:	02dc02dc 	.word	0x02dc02dc
  405f08:	02dc02dc 	.word	0x02dc02dc
  405f0c:	02dc02dc 	.word	0x02dc02dc
  405f10:	02dc02dc 	.word	0x02dc02dc
  405f14:	02dc0197 	.word	0x02dc0197
  405f18:	02dc02dc 	.word	0x02dc02dc
  405f1c:	02dc02dc 	.word	0x02dc02dc
  405f20:	02dc019b 	.word	0x02dc019b
  405f24:	025302dc 	.word	0x025302dc
  405f28:	02dc02dc 	.word	0x02dc02dc
  405f2c:	02dc02dc 	.word	0x02dc02dc
  405f30:	02dc02dc 	.word	0x02dc02dc
  405f34:	02dc02dc 	.word	0x02dc02dc
  405f38:	02dc02dc 	.word	0x02dc02dc
  405f3c:	021b025a 	.word	0x021b025a
  405f40:	02dc02dc 	.word	0x02dc02dc
  405f44:	026e02dc 	.word	0x026e02dc
  405f48:	02dc021b 	.word	0x02dc021b
  405f4c:	027302dc 	.word	0x027302dc
  405f50:	01f502dc 	.word	0x01f502dc
  405f54:	02090182 	.word	0x02090182
  405f58:	02dc02d7 	.word	0x02dc02d7
  405f5c:	02dc029a 	.word	0x02dc029a
  405f60:	02dc00a7 	.word	0x02dc00a7
  405f64:	022e02dc 	.word	0x022e02dc
  405f68:	f10a 0a08 	add.w	sl, sl, #8
  405f6c:	9b03      	ldr	r3, [sp, #12]
  405f6e:	442b      	add	r3, r5
  405f70:	9303      	str	r3, [sp, #12]
  405f72:	e786      	b.n	405e82 <_vfiprintf_r+0xc2>
  405f74:	4659      	mov	r1, fp
  405f76:	9806      	ldr	r0, [sp, #24]
  405f78:	f000 fdac 	bl	406ad4 <__swsetup_r>
  405f7c:	bb18      	cbnz	r0, 405fc6 <_vfiprintf_r+0x206>
  405f7e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  405f82:	f001 031a 	and.w	r3, r1, #26
  405f86:	2b0a      	cmp	r3, #10
  405f88:	f47f af4b 	bne.w	405e22 <_vfiprintf_r+0x62>
  405f8c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  405f90:	2b00      	cmp	r3, #0
  405f92:	f6ff af46 	blt.w	405e22 <_vfiprintf_r+0x62>
  405f96:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405f9a:	07db      	lsls	r3, r3, #31
  405f9c:	d405      	bmi.n	405faa <_vfiprintf_r+0x1ea>
  405f9e:	058f      	lsls	r7, r1, #22
  405fa0:	d403      	bmi.n	405faa <_vfiprintf_r+0x1ea>
  405fa2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405fa6:	f001 fac3 	bl	407530 <__retarget_lock_release_recursive>
  405faa:	462b      	mov	r3, r5
  405fac:	4642      	mov	r2, r8
  405fae:	4659      	mov	r1, fp
  405fb0:	9806      	ldr	r0, [sp, #24]
  405fb2:	f000 fd4d 	bl	406a50 <__sbprintf>
  405fb6:	9003      	str	r0, [sp, #12]
  405fb8:	9803      	ldr	r0, [sp, #12]
  405fba:	b02d      	add	sp, #180	; 0xb4
  405fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405fc0:	f000 fef4 	bl	406dac <__sinit>
  405fc4:	e709      	b.n	405dda <_vfiprintf_r+0x1a>
  405fc6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405fca:	07d9      	lsls	r1, r3, #31
  405fcc:	d404      	bmi.n	405fd8 <_vfiprintf_r+0x218>
  405fce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405fd2:	059a      	lsls	r2, r3, #22
  405fd4:	f140 84aa 	bpl.w	40692c <_vfiprintf_r+0xb6c>
  405fd8:	f04f 33ff 	mov.w	r3, #4294967295
  405fdc:	9303      	str	r3, [sp, #12]
  405fde:	9803      	ldr	r0, [sp, #12]
  405fe0:	b02d      	add	sp, #180	; 0xb4
  405fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405fe6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405fea:	f001 fa9f 	bl	40752c <__retarget_lock_acquire_recursive>
  405fee:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405ff2:	b281      	uxth	r1, r0
  405ff4:	e6fb      	b.n	405dee <_vfiprintf_r+0x2e>
  405ff6:	4276      	negs	r6, r6
  405ff8:	9207      	str	r2, [sp, #28]
  405ffa:	f043 0304 	orr.w	r3, r3, #4
  405ffe:	f898 2000 	ldrb.w	r2, [r8]
  406002:	e74f      	b.n	405ea4 <_vfiprintf_r+0xe4>
  406004:	9608      	str	r6, [sp, #32]
  406006:	069e      	lsls	r6, r3, #26
  406008:	f100 8450 	bmi.w	4068ac <_vfiprintf_r+0xaec>
  40600c:	9907      	ldr	r1, [sp, #28]
  40600e:	06dd      	lsls	r5, r3, #27
  406010:	460a      	mov	r2, r1
  406012:	f100 83ef 	bmi.w	4067f4 <_vfiprintf_r+0xa34>
  406016:	0658      	lsls	r0, r3, #25
  406018:	f140 83ec 	bpl.w	4067f4 <_vfiprintf_r+0xa34>
  40601c:	880e      	ldrh	r6, [r1, #0]
  40601e:	3104      	adds	r1, #4
  406020:	2700      	movs	r7, #0
  406022:	2201      	movs	r2, #1
  406024:	9107      	str	r1, [sp, #28]
  406026:	f04f 0100 	mov.w	r1, #0
  40602a:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40602e:	2500      	movs	r5, #0
  406030:	1c61      	adds	r1, r4, #1
  406032:	f000 8116 	beq.w	406262 <_vfiprintf_r+0x4a2>
  406036:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40603a:	9102      	str	r1, [sp, #8]
  40603c:	ea56 0107 	orrs.w	r1, r6, r7
  406040:	f040 8114 	bne.w	40626c <_vfiprintf_r+0x4ac>
  406044:	2c00      	cmp	r4, #0
  406046:	f040 835c 	bne.w	406702 <_vfiprintf_r+0x942>
  40604a:	2a00      	cmp	r2, #0
  40604c:	f040 83b7 	bne.w	4067be <_vfiprintf_r+0x9fe>
  406050:	f013 0301 	ands.w	r3, r3, #1
  406054:	9305      	str	r3, [sp, #20]
  406056:	f000 8457 	beq.w	406908 <_vfiprintf_r+0xb48>
  40605a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40605e:	2330      	movs	r3, #48	; 0x30
  406060:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  406064:	9b05      	ldr	r3, [sp, #20]
  406066:	42a3      	cmp	r3, r4
  406068:	bfb8      	it	lt
  40606a:	4623      	movlt	r3, r4
  40606c:	9301      	str	r3, [sp, #4]
  40606e:	b10d      	cbz	r5, 406074 <_vfiprintf_r+0x2b4>
  406070:	3301      	adds	r3, #1
  406072:	9301      	str	r3, [sp, #4]
  406074:	9b02      	ldr	r3, [sp, #8]
  406076:	f013 0302 	ands.w	r3, r3, #2
  40607a:	9309      	str	r3, [sp, #36]	; 0x24
  40607c:	d002      	beq.n	406084 <_vfiprintf_r+0x2c4>
  40607e:	9b01      	ldr	r3, [sp, #4]
  406080:	3302      	adds	r3, #2
  406082:	9301      	str	r3, [sp, #4]
  406084:	9b02      	ldr	r3, [sp, #8]
  406086:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40608a:	930a      	str	r3, [sp, #40]	; 0x28
  40608c:	f040 8217 	bne.w	4064be <_vfiprintf_r+0x6fe>
  406090:	9b08      	ldr	r3, [sp, #32]
  406092:	9a01      	ldr	r2, [sp, #4]
  406094:	1a9d      	subs	r5, r3, r2
  406096:	2d00      	cmp	r5, #0
  406098:	f340 8211 	ble.w	4064be <_vfiprintf_r+0x6fe>
  40609c:	2d10      	cmp	r5, #16
  40609e:	f340 8490 	ble.w	4069c2 <_vfiprintf_r+0xc02>
  4060a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4060a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4060a6:	4ec4      	ldr	r6, [pc, #784]	; (4063b8 <_vfiprintf_r+0x5f8>)
  4060a8:	46d6      	mov	lr, sl
  4060aa:	2710      	movs	r7, #16
  4060ac:	46a2      	mov	sl, r4
  4060ae:	4619      	mov	r1, r3
  4060b0:	9c06      	ldr	r4, [sp, #24]
  4060b2:	e007      	b.n	4060c4 <_vfiprintf_r+0x304>
  4060b4:	f101 0c02 	add.w	ip, r1, #2
  4060b8:	f10e 0e08 	add.w	lr, lr, #8
  4060bc:	4601      	mov	r1, r0
  4060be:	3d10      	subs	r5, #16
  4060c0:	2d10      	cmp	r5, #16
  4060c2:	dd11      	ble.n	4060e8 <_vfiprintf_r+0x328>
  4060c4:	1c48      	adds	r0, r1, #1
  4060c6:	3210      	adds	r2, #16
  4060c8:	2807      	cmp	r0, #7
  4060ca:	9211      	str	r2, [sp, #68]	; 0x44
  4060cc:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4060d0:	9010      	str	r0, [sp, #64]	; 0x40
  4060d2:	ddef      	ble.n	4060b4 <_vfiprintf_r+0x2f4>
  4060d4:	2a00      	cmp	r2, #0
  4060d6:	f040 81e4 	bne.w	4064a2 <_vfiprintf_r+0x6e2>
  4060da:	3d10      	subs	r5, #16
  4060dc:	2d10      	cmp	r5, #16
  4060de:	4611      	mov	r1, r2
  4060e0:	f04f 0c01 	mov.w	ip, #1
  4060e4:	46ce      	mov	lr, r9
  4060e6:	dced      	bgt.n	4060c4 <_vfiprintf_r+0x304>
  4060e8:	4654      	mov	r4, sl
  4060ea:	4661      	mov	r1, ip
  4060ec:	46f2      	mov	sl, lr
  4060ee:	442a      	add	r2, r5
  4060f0:	2907      	cmp	r1, #7
  4060f2:	9211      	str	r2, [sp, #68]	; 0x44
  4060f4:	f8ca 6000 	str.w	r6, [sl]
  4060f8:	f8ca 5004 	str.w	r5, [sl, #4]
  4060fc:	9110      	str	r1, [sp, #64]	; 0x40
  4060fe:	f300 82ec 	bgt.w	4066da <_vfiprintf_r+0x91a>
  406102:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406106:	f10a 0a08 	add.w	sl, sl, #8
  40610a:	1c48      	adds	r0, r1, #1
  40610c:	2d00      	cmp	r5, #0
  40610e:	f040 81de 	bne.w	4064ce <_vfiprintf_r+0x70e>
  406112:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406114:	2b00      	cmp	r3, #0
  406116:	f000 81f8 	beq.w	40650a <_vfiprintf_r+0x74a>
  40611a:	3202      	adds	r2, #2
  40611c:	a90e      	add	r1, sp, #56	; 0x38
  40611e:	2302      	movs	r3, #2
  406120:	2807      	cmp	r0, #7
  406122:	9211      	str	r2, [sp, #68]	; 0x44
  406124:	9010      	str	r0, [sp, #64]	; 0x40
  406126:	e88a 000a 	stmia.w	sl, {r1, r3}
  40612a:	f340 81ea 	ble.w	406502 <_vfiprintf_r+0x742>
  40612e:	2a00      	cmp	r2, #0
  406130:	f040 838c 	bne.w	40684c <_vfiprintf_r+0xa8c>
  406134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406136:	2b80      	cmp	r3, #128	; 0x80
  406138:	f04f 0001 	mov.w	r0, #1
  40613c:	4611      	mov	r1, r2
  40613e:	46ca      	mov	sl, r9
  406140:	f040 81e7 	bne.w	406512 <_vfiprintf_r+0x752>
  406144:	9b08      	ldr	r3, [sp, #32]
  406146:	9d01      	ldr	r5, [sp, #4]
  406148:	1b5e      	subs	r6, r3, r5
  40614a:	2e00      	cmp	r6, #0
  40614c:	f340 81e1 	ble.w	406512 <_vfiprintf_r+0x752>
  406150:	2e10      	cmp	r6, #16
  406152:	4d9a      	ldr	r5, [pc, #616]	; (4063bc <_vfiprintf_r+0x5fc>)
  406154:	f340 8450 	ble.w	4069f8 <_vfiprintf_r+0xc38>
  406158:	46d4      	mov	ip, sl
  40615a:	2710      	movs	r7, #16
  40615c:	46a2      	mov	sl, r4
  40615e:	9c06      	ldr	r4, [sp, #24]
  406160:	e007      	b.n	406172 <_vfiprintf_r+0x3b2>
  406162:	f101 0e02 	add.w	lr, r1, #2
  406166:	f10c 0c08 	add.w	ip, ip, #8
  40616a:	4601      	mov	r1, r0
  40616c:	3e10      	subs	r6, #16
  40616e:	2e10      	cmp	r6, #16
  406170:	dd11      	ble.n	406196 <_vfiprintf_r+0x3d6>
  406172:	1c48      	adds	r0, r1, #1
  406174:	3210      	adds	r2, #16
  406176:	2807      	cmp	r0, #7
  406178:	9211      	str	r2, [sp, #68]	; 0x44
  40617a:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40617e:	9010      	str	r0, [sp, #64]	; 0x40
  406180:	ddef      	ble.n	406162 <_vfiprintf_r+0x3a2>
  406182:	2a00      	cmp	r2, #0
  406184:	f040 829d 	bne.w	4066c2 <_vfiprintf_r+0x902>
  406188:	3e10      	subs	r6, #16
  40618a:	2e10      	cmp	r6, #16
  40618c:	f04f 0e01 	mov.w	lr, #1
  406190:	4611      	mov	r1, r2
  406192:	46cc      	mov	ip, r9
  406194:	dced      	bgt.n	406172 <_vfiprintf_r+0x3b2>
  406196:	4654      	mov	r4, sl
  406198:	46e2      	mov	sl, ip
  40619a:	4432      	add	r2, r6
  40619c:	f1be 0f07 	cmp.w	lr, #7
  4061a0:	9211      	str	r2, [sp, #68]	; 0x44
  4061a2:	e88a 0060 	stmia.w	sl, {r5, r6}
  4061a6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  4061aa:	f300 8369 	bgt.w	406880 <_vfiprintf_r+0xac0>
  4061ae:	f10a 0a08 	add.w	sl, sl, #8
  4061b2:	f10e 0001 	add.w	r0, lr, #1
  4061b6:	4671      	mov	r1, lr
  4061b8:	e1ab      	b.n	406512 <_vfiprintf_r+0x752>
  4061ba:	9608      	str	r6, [sp, #32]
  4061bc:	f013 0220 	ands.w	r2, r3, #32
  4061c0:	f040 838c 	bne.w	4068dc <_vfiprintf_r+0xb1c>
  4061c4:	f013 0110 	ands.w	r1, r3, #16
  4061c8:	f040 831a 	bne.w	406800 <_vfiprintf_r+0xa40>
  4061cc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4061d0:	f000 8316 	beq.w	406800 <_vfiprintf_r+0xa40>
  4061d4:	9807      	ldr	r0, [sp, #28]
  4061d6:	460a      	mov	r2, r1
  4061d8:	4601      	mov	r1, r0
  4061da:	3104      	adds	r1, #4
  4061dc:	8806      	ldrh	r6, [r0, #0]
  4061de:	9107      	str	r1, [sp, #28]
  4061e0:	2700      	movs	r7, #0
  4061e2:	e720      	b.n	406026 <_vfiprintf_r+0x266>
  4061e4:	9608      	str	r6, [sp, #32]
  4061e6:	f043 0310 	orr.w	r3, r3, #16
  4061ea:	e7e7      	b.n	4061bc <_vfiprintf_r+0x3fc>
  4061ec:	9608      	str	r6, [sp, #32]
  4061ee:	f043 0310 	orr.w	r3, r3, #16
  4061f2:	e708      	b.n	406006 <_vfiprintf_r+0x246>
  4061f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4061f8:	f898 2000 	ldrb.w	r2, [r8]
  4061fc:	e652      	b.n	405ea4 <_vfiprintf_r+0xe4>
  4061fe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406202:	2600      	movs	r6, #0
  406204:	f818 2b01 	ldrb.w	r2, [r8], #1
  406208:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40620c:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  406210:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406214:	2909      	cmp	r1, #9
  406216:	d9f5      	bls.n	406204 <_vfiprintf_r+0x444>
  406218:	e646      	b.n	405ea8 <_vfiprintf_r+0xe8>
  40621a:	9608      	str	r6, [sp, #32]
  40621c:	2800      	cmp	r0, #0
  40621e:	f040 8408 	bne.w	406a32 <_vfiprintf_r+0xc72>
  406222:	f043 0310 	orr.w	r3, r3, #16
  406226:	069e      	lsls	r6, r3, #26
  406228:	f100 834c 	bmi.w	4068c4 <_vfiprintf_r+0xb04>
  40622c:	06dd      	lsls	r5, r3, #27
  40622e:	f100 82f3 	bmi.w	406818 <_vfiprintf_r+0xa58>
  406232:	0658      	lsls	r0, r3, #25
  406234:	f140 82f0 	bpl.w	406818 <_vfiprintf_r+0xa58>
  406238:	9d07      	ldr	r5, [sp, #28]
  40623a:	f9b5 6000 	ldrsh.w	r6, [r5]
  40623e:	462a      	mov	r2, r5
  406240:	17f7      	asrs	r7, r6, #31
  406242:	3204      	adds	r2, #4
  406244:	4630      	mov	r0, r6
  406246:	4639      	mov	r1, r7
  406248:	9207      	str	r2, [sp, #28]
  40624a:	2800      	cmp	r0, #0
  40624c:	f171 0200 	sbcs.w	r2, r1, #0
  406250:	f2c0 835d 	blt.w	40690e <_vfiprintf_r+0xb4e>
  406254:	1c61      	adds	r1, r4, #1
  406256:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40625a:	f04f 0201 	mov.w	r2, #1
  40625e:	f47f aeea 	bne.w	406036 <_vfiprintf_r+0x276>
  406262:	ea56 0107 	orrs.w	r1, r6, r7
  406266:	f000 824d 	beq.w	406704 <_vfiprintf_r+0x944>
  40626a:	9302      	str	r3, [sp, #8]
  40626c:	2a01      	cmp	r2, #1
  40626e:	f000 828c 	beq.w	40678a <_vfiprintf_r+0x9ca>
  406272:	2a02      	cmp	r2, #2
  406274:	f040 825c 	bne.w	406730 <_vfiprintf_r+0x970>
  406278:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40627a:	46cb      	mov	fp, r9
  40627c:	0933      	lsrs	r3, r6, #4
  40627e:	f006 010f 	and.w	r1, r6, #15
  406282:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  406286:	093a      	lsrs	r2, r7, #4
  406288:	461e      	mov	r6, r3
  40628a:	4617      	mov	r7, r2
  40628c:	5c43      	ldrb	r3, [r0, r1]
  40628e:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  406292:	ea56 0307 	orrs.w	r3, r6, r7
  406296:	d1f1      	bne.n	40627c <_vfiprintf_r+0x4bc>
  406298:	eba9 030b 	sub.w	r3, r9, fp
  40629c:	9305      	str	r3, [sp, #20]
  40629e:	e6e1      	b.n	406064 <_vfiprintf_r+0x2a4>
  4062a0:	2800      	cmp	r0, #0
  4062a2:	f040 83c0 	bne.w	406a26 <_vfiprintf_r+0xc66>
  4062a6:	0699      	lsls	r1, r3, #26
  4062a8:	f100 8367 	bmi.w	40697a <_vfiprintf_r+0xbba>
  4062ac:	06da      	lsls	r2, r3, #27
  4062ae:	f100 80f1 	bmi.w	406494 <_vfiprintf_r+0x6d4>
  4062b2:	065b      	lsls	r3, r3, #25
  4062b4:	f140 80ee 	bpl.w	406494 <_vfiprintf_r+0x6d4>
  4062b8:	9a07      	ldr	r2, [sp, #28]
  4062ba:	6813      	ldr	r3, [r2, #0]
  4062bc:	3204      	adds	r2, #4
  4062be:	9207      	str	r2, [sp, #28]
  4062c0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4062c4:	801a      	strh	r2, [r3, #0]
  4062c6:	e5b8      	b.n	405e3a <_vfiprintf_r+0x7a>
  4062c8:	9807      	ldr	r0, [sp, #28]
  4062ca:	4a3d      	ldr	r2, [pc, #244]	; (4063c0 <_vfiprintf_r+0x600>)
  4062cc:	9608      	str	r6, [sp, #32]
  4062ce:	920b      	str	r2, [sp, #44]	; 0x2c
  4062d0:	6806      	ldr	r6, [r0, #0]
  4062d2:	2278      	movs	r2, #120	; 0x78
  4062d4:	2130      	movs	r1, #48	; 0x30
  4062d6:	3004      	adds	r0, #4
  4062d8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4062dc:	f043 0302 	orr.w	r3, r3, #2
  4062e0:	9007      	str	r0, [sp, #28]
  4062e2:	2700      	movs	r7, #0
  4062e4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4062e8:	2202      	movs	r2, #2
  4062ea:	e69c      	b.n	406026 <_vfiprintf_r+0x266>
  4062ec:	9608      	str	r6, [sp, #32]
  4062ee:	2800      	cmp	r0, #0
  4062f0:	d099      	beq.n	406226 <_vfiprintf_r+0x466>
  4062f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4062f6:	e796      	b.n	406226 <_vfiprintf_r+0x466>
  4062f8:	f898 2000 	ldrb.w	r2, [r8]
  4062fc:	2d00      	cmp	r5, #0
  4062fe:	f47f add1 	bne.w	405ea4 <_vfiprintf_r+0xe4>
  406302:	2001      	movs	r0, #1
  406304:	2520      	movs	r5, #32
  406306:	e5cd      	b.n	405ea4 <_vfiprintf_r+0xe4>
  406308:	f043 0301 	orr.w	r3, r3, #1
  40630c:	f898 2000 	ldrb.w	r2, [r8]
  406310:	e5c8      	b.n	405ea4 <_vfiprintf_r+0xe4>
  406312:	9608      	str	r6, [sp, #32]
  406314:	2800      	cmp	r0, #0
  406316:	f040 8393 	bne.w	406a40 <_vfiprintf_r+0xc80>
  40631a:	4929      	ldr	r1, [pc, #164]	; (4063c0 <_vfiprintf_r+0x600>)
  40631c:	910b      	str	r1, [sp, #44]	; 0x2c
  40631e:	069f      	lsls	r7, r3, #26
  406320:	f100 82e8 	bmi.w	4068f4 <_vfiprintf_r+0xb34>
  406324:	9807      	ldr	r0, [sp, #28]
  406326:	06de      	lsls	r6, r3, #27
  406328:	4601      	mov	r1, r0
  40632a:	f100 8270 	bmi.w	40680e <_vfiprintf_r+0xa4e>
  40632e:	065d      	lsls	r5, r3, #25
  406330:	f140 826d 	bpl.w	40680e <_vfiprintf_r+0xa4e>
  406334:	3104      	adds	r1, #4
  406336:	8806      	ldrh	r6, [r0, #0]
  406338:	9107      	str	r1, [sp, #28]
  40633a:	2700      	movs	r7, #0
  40633c:	07d8      	lsls	r0, r3, #31
  40633e:	f140 8222 	bpl.w	406786 <_vfiprintf_r+0x9c6>
  406342:	ea56 0107 	orrs.w	r1, r6, r7
  406346:	f000 821e 	beq.w	406786 <_vfiprintf_r+0x9c6>
  40634a:	2130      	movs	r1, #48	; 0x30
  40634c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406350:	f043 0302 	orr.w	r3, r3, #2
  406354:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406358:	2202      	movs	r2, #2
  40635a:	e664      	b.n	406026 <_vfiprintf_r+0x266>
  40635c:	9608      	str	r6, [sp, #32]
  40635e:	2800      	cmp	r0, #0
  406360:	f040 836b 	bne.w	406a3a <_vfiprintf_r+0xc7a>
  406364:	4917      	ldr	r1, [pc, #92]	; (4063c4 <_vfiprintf_r+0x604>)
  406366:	910b      	str	r1, [sp, #44]	; 0x2c
  406368:	e7d9      	b.n	40631e <_vfiprintf_r+0x55e>
  40636a:	9907      	ldr	r1, [sp, #28]
  40636c:	9608      	str	r6, [sp, #32]
  40636e:	680a      	ldr	r2, [r1, #0]
  406370:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406374:	f04f 0000 	mov.w	r0, #0
  406378:	460a      	mov	r2, r1
  40637a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40637e:	3204      	adds	r2, #4
  406380:	2001      	movs	r0, #1
  406382:	9001      	str	r0, [sp, #4]
  406384:	9207      	str	r2, [sp, #28]
  406386:	9005      	str	r0, [sp, #20]
  406388:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40638c:	9302      	str	r3, [sp, #8]
  40638e:	2400      	movs	r4, #0
  406390:	e670      	b.n	406074 <_vfiprintf_r+0x2b4>
  406392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406396:	f898 2000 	ldrb.w	r2, [r8]
  40639a:	e583      	b.n	405ea4 <_vfiprintf_r+0xe4>
  40639c:	f898 2000 	ldrb.w	r2, [r8]
  4063a0:	2a6c      	cmp	r2, #108	; 0x6c
  4063a2:	bf03      	ittte	eq
  4063a4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4063a8:	f043 0320 	orreq.w	r3, r3, #32
  4063ac:	f108 0801 	addeq.w	r8, r8, #1
  4063b0:	f043 0310 	orrne.w	r3, r3, #16
  4063b4:	e576      	b.n	405ea4 <_vfiprintf_r+0xe4>
  4063b6:	bf00      	nop
  4063b8:	00408918 	.word	0x00408918
  4063bc:	00408928 	.word	0x00408928
  4063c0:	004088fc 	.word	0x004088fc
  4063c4:	004088e8 	.word	0x004088e8
  4063c8:	9907      	ldr	r1, [sp, #28]
  4063ca:	680e      	ldr	r6, [r1, #0]
  4063cc:	460a      	mov	r2, r1
  4063ce:	2e00      	cmp	r6, #0
  4063d0:	f102 0204 	add.w	r2, r2, #4
  4063d4:	f6ff ae0f 	blt.w	405ff6 <_vfiprintf_r+0x236>
  4063d8:	9207      	str	r2, [sp, #28]
  4063da:	f898 2000 	ldrb.w	r2, [r8]
  4063de:	e561      	b.n	405ea4 <_vfiprintf_r+0xe4>
  4063e0:	f898 2000 	ldrb.w	r2, [r8]
  4063e4:	2001      	movs	r0, #1
  4063e6:	252b      	movs	r5, #43	; 0x2b
  4063e8:	e55c      	b.n	405ea4 <_vfiprintf_r+0xe4>
  4063ea:	9907      	ldr	r1, [sp, #28]
  4063ec:	9608      	str	r6, [sp, #32]
  4063ee:	f8d1 b000 	ldr.w	fp, [r1]
  4063f2:	f04f 0200 	mov.w	r2, #0
  4063f6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4063fa:	1d0e      	adds	r6, r1, #4
  4063fc:	f1bb 0f00 	cmp.w	fp, #0
  406400:	f000 82e5 	beq.w	4069ce <_vfiprintf_r+0xc0e>
  406404:	1c67      	adds	r7, r4, #1
  406406:	f000 82c4 	beq.w	406992 <_vfiprintf_r+0xbd2>
  40640a:	4622      	mov	r2, r4
  40640c:	2100      	movs	r1, #0
  40640e:	4658      	mov	r0, fp
  406410:	9301      	str	r3, [sp, #4]
  406412:	f001 fbd5 	bl	407bc0 <memchr>
  406416:	9b01      	ldr	r3, [sp, #4]
  406418:	2800      	cmp	r0, #0
  40641a:	f000 82e5 	beq.w	4069e8 <_vfiprintf_r+0xc28>
  40641e:	eba0 020b 	sub.w	r2, r0, fp
  406422:	9205      	str	r2, [sp, #20]
  406424:	9607      	str	r6, [sp, #28]
  406426:	9302      	str	r3, [sp, #8]
  406428:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40642c:	2400      	movs	r4, #0
  40642e:	e619      	b.n	406064 <_vfiprintf_r+0x2a4>
  406430:	f898 2000 	ldrb.w	r2, [r8]
  406434:	2a2a      	cmp	r2, #42	; 0x2a
  406436:	f108 0701 	add.w	r7, r8, #1
  40643a:	f000 82e9 	beq.w	406a10 <_vfiprintf_r+0xc50>
  40643e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406442:	2909      	cmp	r1, #9
  406444:	46b8      	mov	r8, r7
  406446:	f04f 0400 	mov.w	r4, #0
  40644a:	f63f ad2d 	bhi.w	405ea8 <_vfiprintf_r+0xe8>
  40644e:	f818 2b01 	ldrb.w	r2, [r8], #1
  406452:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406456:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40645a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40645e:	2909      	cmp	r1, #9
  406460:	d9f5      	bls.n	40644e <_vfiprintf_r+0x68e>
  406462:	e521      	b.n	405ea8 <_vfiprintf_r+0xe8>
  406464:	f043 0320 	orr.w	r3, r3, #32
  406468:	f898 2000 	ldrb.w	r2, [r8]
  40646c:	e51a      	b.n	405ea4 <_vfiprintf_r+0xe4>
  40646e:	9608      	str	r6, [sp, #32]
  406470:	2800      	cmp	r0, #0
  406472:	f040 82db 	bne.w	406a2c <_vfiprintf_r+0xc6c>
  406476:	2a00      	cmp	r2, #0
  406478:	f000 80e7 	beq.w	40664a <_vfiprintf_r+0x88a>
  40647c:	2101      	movs	r1, #1
  40647e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406482:	f04f 0200 	mov.w	r2, #0
  406486:	9101      	str	r1, [sp, #4]
  406488:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40648c:	9105      	str	r1, [sp, #20]
  40648e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406492:	e77b      	b.n	40638c <_vfiprintf_r+0x5cc>
  406494:	9a07      	ldr	r2, [sp, #28]
  406496:	6813      	ldr	r3, [r2, #0]
  406498:	3204      	adds	r2, #4
  40649a:	9207      	str	r2, [sp, #28]
  40649c:	9a03      	ldr	r2, [sp, #12]
  40649e:	601a      	str	r2, [r3, #0]
  4064a0:	e4cb      	b.n	405e3a <_vfiprintf_r+0x7a>
  4064a2:	aa0f      	add	r2, sp, #60	; 0x3c
  4064a4:	9904      	ldr	r1, [sp, #16]
  4064a6:	4620      	mov	r0, r4
  4064a8:	f7ff fc4a 	bl	405d40 <__sprint_r.part.0>
  4064ac:	2800      	cmp	r0, #0
  4064ae:	f040 8139 	bne.w	406724 <_vfiprintf_r+0x964>
  4064b2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4064b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4064b6:	f101 0c01 	add.w	ip, r1, #1
  4064ba:	46ce      	mov	lr, r9
  4064bc:	e5ff      	b.n	4060be <_vfiprintf_r+0x2fe>
  4064be:	9910      	ldr	r1, [sp, #64]	; 0x40
  4064c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4064c2:	1c48      	adds	r0, r1, #1
  4064c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4064c8:	2d00      	cmp	r5, #0
  4064ca:	f43f ae22 	beq.w	406112 <_vfiprintf_r+0x352>
  4064ce:	3201      	adds	r2, #1
  4064d0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4064d4:	2101      	movs	r1, #1
  4064d6:	2807      	cmp	r0, #7
  4064d8:	9211      	str	r2, [sp, #68]	; 0x44
  4064da:	9010      	str	r0, [sp, #64]	; 0x40
  4064dc:	f8ca 5000 	str.w	r5, [sl]
  4064e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4064e4:	f340 8108 	ble.w	4066f8 <_vfiprintf_r+0x938>
  4064e8:	2a00      	cmp	r2, #0
  4064ea:	f040 81bc 	bne.w	406866 <_vfiprintf_r+0xaa6>
  4064ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4064f0:	2b00      	cmp	r3, #0
  4064f2:	f43f ae1f 	beq.w	406134 <_vfiprintf_r+0x374>
  4064f6:	ab0e      	add	r3, sp, #56	; 0x38
  4064f8:	2202      	movs	r2, #2
  4064fa:	4608      	mov	r0, r1
  4064fc:	931c      	str	r3, [sp, #112]	; 0x70
  4064fe:	921d      	str	r2, [sp, #116]	; 0x74
  406500:	46ca      	mov	sl, r9
  406502:	4601      	mov	r1, r0
  406504:	f10a 0a08 	add.w	sl, sl, #8
  406508:	3001      	adds	r0, #1
  40650a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40650c:	2b80      	cmp	r3, #128	; 0x80
  40650e:	f43f ae19 	beq.w	406144 <_vfiprintf_r+0x384>
  406512:	9b05      	ldr	r3, [sp, #20]
  406514:	1ae4      	subs	r4, r4, r3
  406516:	2c00      	cmp	r4, #0
  406518:	dd2e      	ble.n	406578 <_vfiprintf_r+0x7b8>
  40651a:	2c10      	cmp	r4, #16
  40651c:	4db3      	ldr	r5, [pc, #716]	; (4067ec <_vfiprintf_r+0xa2c>)
  40651e:	dd1e      	ble.n	40655e <_vfiprintf_r+0x79e>
  406520:	46d6      	mov	lr, sl
  406522:	2610      	movs	r6, #16
  406524:	9f06      	ldr	r7, [sp, #24]
  406526:	f8dd a010 	ldr.w	sl, [sp, #16]
  40652a:	e006      	b.n	40653a <_vfiprintf_r+0x77a>
  40652c:	1c88      	adds	r0, r1, #2
  40652e:	f10e 0e08 	add.w	lr, lr, #8
  406532:	4619      	mov	r1, r3
  406534:	3c10      	subs	r4, #16
  406536:	2c10      	cmp	r4, #16
  406538:	dd10      	ble.n	40655c <_vfiprintf_r+0x79c>
  40653a:	1c4b      	adds	r3, r1, #1
  40653c:	3210      	adds	r2, #16
  40653e:	2b07      	cmp	r3, #7
  406540:	9211      	str	r2, [sp, #68]	; 0x44
  406542:	e88e 0060 	stmia.w	lr, {r5, r6}
  406546:	9310      	str	r3, [sp, #64]	; 0x40
  406548:	ddf0      	ble.n	40652c <_vfiprintf_r+0x76c>
  40654a:	2a00      	cmp	r2, #0
  40654c:	d165      	bne.n	40661a <_vfiprintf_r+0x85a>
  40654e:	3c10      	subs	r4, #16
  406550:	2c10      	cmp	r4, #16
  406552:	f04f 0001 	mov.w	r0, #1
  406556:	4611      	mov	r1, r2
  406558:	46ce      	mov	lr, r9
  40655a:	dcee      	bgt.n	40653a <_vfiprintf_r+0x77a>
  40655c:	46f2      	mov	sl, lr
  40655e:	4422      	add	r2, r4
  406560:	2807      	cmp	r0, #7
  406562:	9211      	str	r2, [sp, #68]	; 0x44
  406564:	f8ca 5000 	str.w	r5, [sl]
  406568:	f8ca 4004 	str.w	r4, [sl, #4]
  40656c:	9010      	str	r0, [sp, #64]	; 0x40
  40656e:	f300 8085 	bgt.w	40667c <_vfiprintf_r+0x8bc>
  406572:	f10a 0a08 	add.w	sl, sl, #8
  406576:	3001      	adds	r0, #1
  406578:	9905      	ldr	r1, [sp, #20]
  40657a:	f8ca b000 	str.w	fp, [sl]
  40657e:	440a      	add	r2, r1
  406580:	2807      	cmp	r0, #7
  406582:	9211      	str	r2, [sp, #68]	; 0x44
  406584:	f8ca 1004 	str.w	r1, [sl, #4]
  406588:	9010      	str	r0, [sp, #64]	; 0x40
  40658a:	f340 8082 	ble.w	406692 <_vfiprintf_r+0x8d2>
  40658e:	2a00      	cmp	r2, #0
  406590:	f040 8118 	bne.w	4067c4 <_vfiprintf_r+0xa04>
  406594:	9b02      	ldr	r3, [sp, #8]
  406596:	9210      	str	r2, [sp, #64]	; 0x40
  406598:	0758      	lsls	r0, r3, #29
  40659a:	d535      	bpl.n	406608 <_vfiprintf_r+0x848>
  40659c:	9b08      	ldr	r3, [sp, #32]
  40659e:	9901      	ldr	r1, [sp, #4]
  4065a0:	1a5c      	subs	r4, r3, r1
  4065a2:	2c00      	cmp	r4, #0
  4065a4:	f340 80e7 	ble.w	406776 <_vfiprintf_r+0x9b6>
  4065a8:	46ca      	mov	sl, r9
  4065aa:	2c10      	cmp	r4, #16
  4065ac:	f340 8218 	ble.w	4069e0 <_vfiprintf_r+0xc20>
  4065b0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4065b2:	4e8f      	ldr	r6, [pc, #572]	; (4067f0 <_vfiprintf_r+0xa30>)
  4065b4:	9f06      	ldr	r7, [sp, #24]
  4065b6:	f8dd b010 	ldr.w	fp, [sp, #16]
  4065ba:	2510      	movs	r5, #16
  4065bc:	e006      	b.n	4065cc <_vfiprintf_r+0x80c>
  4065be:	1c88      	adds	r0, r1, #2
  4065c0:	f10a 0a08 	add.w	sl, sl, #8
  4065c4:	4619      	mov	r1, r3
  4065c6:	3c10      	subs	r4, #16
  4065c8:	2c10      	cmp	r4, #16
  4065ca:	dd11      	ble.n	4065f0 <_vfiprintf_r+0x830>
  4065cc:	1c4b      	adds	r3, r1, #1
  4065ce:	3210      	adds	r2, #16
  4065d0:	2b07      	cmp	r3, #7
  4065d2:	9211      	str	r2, [sp, #68]	; 0x44
  4065d4:	f8ca 6000 	str.w	r6, [sl]
  4065d8:	f8ca 5004 	str.w	r5, [sl, #4]
  4065dc:	9310      	str	r3, [sp, #64]	; 0x40
  4065de:	ddee      	ble.n	4065be <_vfiprintf_r+0x7fe>
  4065e0:	bb42      	cbnz	r2, 406634 <_vfiprintf_r+0x874>
  4065e2:	3c10      	subs	r4, #16
  4065e4:	2c10      	cmp	r4, #16
  4065e6:	f04f 0001 	mov.w	r0, #1
  4065ea:	4611      	mov	r1, r2
  4065ec:	46ca      	mov	sl, r9
  4065ee:	dced      	bgt.n	4065cc <_vfiprintf_r+0x80c>
  4065f0:	4422      	add	r2, r4
  4065f2:	2807      	cmp	r0, #7
  4065f4:	9211      	str	r2, [sp, #68]	; 0x44
  4065f6:	f8ca 6000 	str.w	r6, [sl]
  4065fa:	f8ca 4004 	str.w	r4, [sl, #4]
  4065fe:	9010      	str	r0, [sp, #64]	; 0x40
  406600:	dd51      	ble.n	4066a6 <_vfiprintf_r+0x8e6>
  406602:	2a00      	cmp	r2, #0
  406604:	f040 819b 	bne.w	40693e <_vfiprintf_r+0xb7e>
  406608:	9b03      	ldr	r3, [sp, #12]
  40660a:	9a08      	ldr	r2, [sp, #32]
  40660c:	9901      	ldr	r1, [sp, #4]
  40660e:	428a      	cmp	r2, r1
  406610:	bfac      	ite	ge
  406612:	189b      	addge	r3, r3, r2
  406614:	185b      	addlt	r3, r3, r1
  406616:	9303      	str	r3, [sp, #12]
  406618:	e04e      	b.n	4066b8 <_vfiprintf_r+0x8f8>
  40661a:	aa0f      	add	r2, sp, #60	; 0x3c
  40661c:	4651      	mov	r1, sl
  40661e:	4638      	mov	r0, r7
  406620:	f7ff fb8e 	bl	405d40 <__sprint_r.part.0>
  406624:	2800      	cmp	r0, #0
  406626:	f040 813f 	bne.w	4068a8 <_vfiprintf_r+0xae8>
  40662a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40662c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40662e:	1c48      	adds	r0, r1, #1
  406630:	46ce      	mov	lr, r9
  406632:	e77f      	b.n	406534 <_vfiprintf_r+0x774>
  406634:	aa0f      	add	r2, sp, #60	; 0x3c
  406636:	4659      	mov	r1, fp
  406638:	4638      	mov	r0, r7
  40663a:	f7ff fb81 	bl	405d40 <__sprint_r.part.0>
  40663e:	b960      	cbnz	r0, 40665a <_vfiprintf_r+0x89a>
  406640:	9910      	ldr	r1, [sp, #64]	; 0x40
  406642:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406644:	1c48      	adds	r0, r1, #1
  406646:	46ca      	mov	sl, r9
  406648:	e7bd      	b.n	4065c6 <_vfiprintf_r+0x806>
  40664a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40664c:	f8dd b010 	ldr.w	fp, [sp, #16]
  406650:	2b00      	cmp	r3, #0
  406652:	f040 81d4 	bne.w	4069fe <_vfiprintf_r+0xc3e>
  406656:	2300      	movs	r3, #0
  406658:	9310      	str	r3, [sp, #64]	; 0x40
  40665a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40665e:	f013 0f01 	tst.w	r3, #1
  406662:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406666:	d102      	bne.n	40666e <_vfiprintf_r+0x8ae>
  406668:	059a      	lsls	r2, r3, #22
  40666a:	f140 80de 	bpl.w	40682a <_vfiprintf_r+0xa6a>
  40666e:	065b      	lsls	r3, r3, #25
  406670:	f53f acb2 	bmi.w	405fd8 <_vfiprintf_r+0x218>
  406674:	9803      	ldr	r0, [sp, #12]
  406676:	b02d      	add	sp, #180	; 0xb4
  406678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40667c:	2a00      	cmp	r2, #0
  40667e:	f040 8106 	bne.w	40688e <_vfiprintf_r+0xace>
  406682:	9a05      	ldr	r2, [sp, #20]
  406684:	921d      	str	r2, [sp, #116]	; 0x74
  406686:	2301      	movs	r3, #1
  406688:	9211      	str	r2, [sp, #68]	; 0x44
  40668a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40668e:	9310      	str	r3, [sp, #64]	; 0x40
  406690:	46ca      	mov	sl, r9
  406692:	f10a 0a08 	add.w	sl, sl, #8
  406696:	9b02      	ldr	r3, [sp, #8]
  406698:	0759      	lsls	r1, r3, #29
  40669a:	d504      	bpl.n	4066a6 <_vfiprintf_r+0x8e6>
  40669c:	9b08      	ldr	r3, [sp, #32]
  40669e:	9901      	ldr	r1, [sp, #4]
  4066a0:	1a5c      	subs	r4, r3, r1
  4066a2:	2c00      	cmp	r4, #0
  4066a4:	dc81      	bgt.n	4065aa <_vfiprintf_r+0x7ea>
  4066a6:	9b03      	ldr	r3, [sp, #12]
  4066a8:	9908      	ldr	r1, [sp, #32]
  4066aa:	9801      	ldr	r0, [sp, #4]
  4066ac:	4281      	cmp	r1, r0
  4066ae:	bfac      	ite	ge
  4066b0:	185b      	addge	r3, r3, r1
  4066b2:	181b      	addlt	r3, r3, r0
  4066b4:	9303      	str	r3, [sp, #12]
  4066b6:	bb72      	cbnz	r2, 406716 <_vfiprintf_r+0x956>
  4066b8:	2300      	movs	r3, #0
  4066ba:	9310      	str	r3, [sp, #64]	; 0x40
  4066bc:	46ca      	mov	sl, r9
  4066be:	f7ff bbbc 	b.w	405e3a <_vfiprintf_r+0x7a>
  4066c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4066c4:	9904      	ldr	r1, [sp, #16]
  4066c6:	4620      	mov	r0, r4
  4066c8:	f7ff fb3a 	bl	405d40 <__sprint_r.part.0>
  4066cc:	bb50      	cbnz	r0, 406724 <_vfiprintf_r+0x964>
  4066ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4066d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4066d2:	f101 0e01 	add.w	lr, r1, #1
  4066d6:	46cc      	mov	ip, r9
  4066d8:	e548      	b.n	40616c <_vfiprintf_r+0x3ac>
  4066da:	2a00      	cmp	r2, #0
  4066dc:	f040 8140 	bne.w	406960 <_vfiprintf_r+0xba0>
  4066e0:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4066e4:	2900      	cmp	r1, #0
  4066e6:	f000 811b 	beq.w	406920 <_vfiprintf_r+0xb60>
  4066ea:	2201      	movs	r2, #1
  4066ec:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4066f0:	4610      	mov	r0, r2
  4066f2:	921d      	str	r2, [sp, #116]	; 0x74
  4066f4:	911c      	str	r1, [sp, #112]	; 0x70
  4066f6:	46ca      	mov	sl, r9
  4066f8:	4601      	mov	r1, r0
  4066fa:	f10a 0a08 	add.w	sl, sl, #8
  4066fe:	3001      	adds	r0, #1
  406700:	e507      	b.n	406112 <_vfiprintf_r+0x352>
  406702:	9b02      	ldr	r3, [sp, #8]
  406704:	2a01      	cmp	r2, #1
  406706:	f000 8098 	beq.w	40683a <_vfiprintf_r+0xa7a>
  40670a:	2a02      	cmp	r2, #2
  40670c:	d10d      	bne.n	40672a <_vfiprintf_r+0x96a>
  40670e:	9302      	str	r3, [sp, #8]
  406710:	2600      	movs	r6, #0
  406712:	2700      	movs	r7, #0
  406714:	e5b0      	b.n	406278 <_vfiprintf_r+0x4b8>
  406716:	aa0f      	add	r2, sp, #60	; 0x3c
  406718:	9904      	ldr	r1, [sp, #16]
  40671a:	9806      	ldr	r0, [sp, #24]
  40671c:	f7ff fb10 	bl	405d40 <__sprint_r.part.0>
  406720:	2800      	cmp	r0, #0
  406722:	d0c9      	beq.n	4066b8 <_vfiprintf_r+0x8f8>
  406724:	f8dd b010 	ldr.w	fp, [sp, #16]
  406728:	e797      	b.n	40665a <_vfiprintf_r+0x89a>
  40672a:	9302      	str	r3, [sp, #8]
  40672c:	2600      	movs	r6, #0
  40672e:	2700      	movs	r7, #0
  406730:	4649      	mov	r1, r9
  406732:	e000      	b.n	406736 <_vfiprintf_r+0x976>
  406734:	4659      	mov	r1, fp
  406736:	08f2      	lsrs	r2, r6, #3
  406738:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40673c:	08f8      	lsrs	r0, r7, #3
  40673e:	f006 0307 	and.w	r3, r6, #7
  406742:	4607      	mov	r7, r0
  406744:	4616      	mov	r6, r2
  406746:	3330      	adds	r3, #48	; 0x30
  406748:	ea56 0207 	orrs.w	r2, r6, r7
  40674c:	f801 3c01 	strb.w	r3, [r1, #-1]
  406750:	f101 3bff 	add.w	fp, r1, #4294967295
  406754:	d1ee      	bne.n	406734 <_vfiprintf_r+0x974>
  406756:	9a02      	ldr	r2, [sp, #8]
  406758:	07d6      	lsls	r6, r2, #31
  40675a:	f57f ad9d 	bpl.w	406298 <_vfiprintf_r+0x4d8>
  40675e:	2b30      	cmp	r3, #48	; 0x30
  406760:	f43f ad9a 	beq.w	406298 <_vfiprintf_r+0x4d8>
  406764:	3902      	subs	r1, #2
  406766:	2330      	movs	r3, #48	; 0x30
  406768:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40676c:	eba9 0301 	sub.w	r3, r9, r1
  406770:	9305      	str	r3, [sp, #20]
  406772:	468b      	mov	fp, r1
  406774:	e476      	b.n	406064 <_vfiprintf_r+0x2a4>
  406776:	9b03      	ldr	r3, [sp, #12]
  406778:	9a08      	ldr	r2, [sp, #32]
  40677a:	428a      	cmp	r2, r1
  40677c:	bfac      	ite	ge
  40677e:	189b      	addge	r3, r3, r2
  406780:	185b      	addlt	r3, r3, r1
  406782:	9303      	str	r3, [sp, #12]
  406784:	e798      	b.n	4066b8 <_vfiprintf_r+0x8f8>
  406786:	2202      	movs	r2, #2
  406788:	e44d      	b.n	406026 <_vfiprintf_r+0x266>
  40678a:	2f00      	cmp	r7, #0
  40678c:	bf08      	it	eq
  40678e:	2e0a      	cmpeq	r6, #10
  406790:	d352      	bcc.n	406838 <_vfiprintf_r+0xa78>
  406792:	46cb      	mov	fp, r9
  406794:	4630      	mov	r0, r6
  406796:	4639      	mov	r1, r7
  406798:	220a      	movs	r2, #10
  40679a:	2300      	movs	r3, #0
  40679c:	f001 fe9a 	bl	4084d4 <__aeabi_uldivmod>
  4067a0:	3230      	adds	r2, #48	; 0x30
  4067a2:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4067a6:	4630      	mov	r0, r6
  4067a8:	4639      	mov	r1, r7
  4067aa:	2300      	movs	r3, #0
  4067ac:	220a      	movs	r2, #10
  4067ae:	f001 fe91 	bl	4084d4 <__aeabi_uldivmod>
  4067b2:	4606      	mov	r6, r0
  4067b4:	460f      	mov	r7, r1
  4067b6:	ea56 0307 	orrs.w	r3, r6, r7
  4067ba:	d1eb      	bne.n	406794 <_vfiprintf_r+0x9d4>
  4067bc:	e56c      	b.n	406298 <_vfiprintf_r+0x4d8>
  4067be:	9405      	str	r4, [sp, #20]
  4067c0:	46cb      	mov	fp, r9
  4067c2:	e44f      	b.n	406064 <_vfiprintf_r+0x2a4>
  4067c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4067c6:	9904      	ldr	r1, [sp, #16]
  4067c8:	9806      	ldr	r0, [sp, #24]
  4067ca:	f7ff fab9 	bl	405d40 <__sprint_r.part.0>
  4067ce:	2800      	cmp	r0, #0
  4067d0:	d1a8      	bne.n	406724 <_vfiprintf_r+0x964>
  4067d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4067d4:	46ca      	mov	sl, r9
  4067d6:	e75e      	b.n	406696 <_vfiprintf_r+0x8d6>
  4067d8:	aa0f      	add	r2, sp, #60	; 0x3c
  4067da:	9904      	ldr	r1, [sp, #16]
  4067dc:	9806      	ldr	r0, [sp, #24]
  4067de:	f7ff faaf 	bl	405d40 <__sprint_r.part.0>
  4067e2:	2800      	cmp	r0, #0
  4067e4:	d19e      	bne.n	406724 <_vfiprintf_r+0x964>
  4067e6:	46ca      	mov	sl, r9
  4067e8:	f7ff bbc0 	b.w	405f6c <_vfiprintf_r+0x1ac>
  4067ec:	00408928 	.word	0x00408928
  4067f0:	00408918 	.word	0x00408918
  4067f4:	3104      	adds	r1, #4
  4067f6:	6816      	ldr	r6, [r2, #0]
  4067f8:	9107      	str	r1, [sp, #28]
  4067fa:	2201      	movs	r2, #1
  4067fc:	2700      	movs	r7, #0
  4067fe:	e412      	b.n	406026 <_vfiprintf_r+0x266>
  406800:	9807      	ldr	r0, [sp, #28]
  406802:	4601      	mov	r1, r0
  406804:	3104      	adds	r1, #4
  406806:	6806      	ldr	r6, [r0, #0]
  406808:	9107      	str	r1, [sp, #28]
  40680a:	2700      	movs	r7, #0
  40680c:	e40b      	b.n	406026 <_vfiprintf_r+0x266>
  40680e:	680e      	ldr	r6, [r1, #0]
  406810:	3104      	adds	r1, #4
  406812:	9107      	str	r1, [sp, #28]
  406814:	2700      	movs	r7, #0
  406816:	e591      	b.n	40633c <_vfiprintf_r+0x57c>
  406818:	9907      	ldr	r1, [sp, #28]
  40681a:	680e      	ldr	r6, [r1, #0]
  40681c:	460a      	mov	r2, r1
  40681e:	17f7      	asrs	r7, r6, #31
  406820:	3204      	adds	r2, #4
  406822:	9207      	str	r2, [sp, #28]
  406824:	4630      	mov	r0, r6
  406826:	4639      	mov	r1, r7
  406828:	e50f      	b.n	40624a <_vfiprintf_r+0x48a>
  40682a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40682e:	f000 fe7f 	bl	407530 <__retarget_lock_release_recursive>
  406832:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406836:	e71a      	b.n	40666e <_vfiprintf_r+0x8ae>
  406838:	9b02      	ldr	r3, [sp, #8]
  40683a:	9302      	str	r3, [sp, #8]
  40683c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406840:	3630      	adds	r6, #48	; 0x30
  406842:	2301      	movs	r3, #1
  406844:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406848:	9305      	str	r3, [sp, #20]
  40684a:	e40b      	b.n	406064 <_vfiprintf_r+0x2a4>
  40684c:	aa0f      	add	r2, sp, #60	; 0x3c
  40684e:	9904      	ldr	r1, [sp, #16]
  406850:	9806      	ldr	r0, [sp, #24]
  406852:	f7ff fa75 	bl	405d40 <__sprint_r.part.0>
  406856:	2800      	cmp	r0, #0
  406858:	f47f af64 	bne.w	406724 <_vfiprintf_r+0x964>
  40685c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40685e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406860:	1c48      	adds	r0, r1, #1
  406862:	46ca      	mov	sl, r9
  406864:	e651      	b.n	40650a <_vfiprintf_r+0x74a>
  406866:	aa0f      	add	r2, sp, #60	; 0x3c
  406868:	9904      	ldr	r1, [sp, #16]
  40686a:	9806      	ldr	r0, [sp, #24]
  40686c:	f7ff fa68 	bl	405d40 <__sprint_r.part.0>
  406870:	2800      	cmp	r0, #0
  406872:	f47f af57 	bne.w	406724 <_vfiprintf_r+0x964>
  406876:	9910      	ldr	r1, [sp, #64]	; 0x40
  406878:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40687a:	1c48      	adds	r0, r1, #1
  40687c:	46ca      	mov	sl, r9
  40687e:	e448      	b.n	406112 <_vfiprintf_r+0x352>
  406880:	2a00      	cmp	r2, #0
  406882:	f040 8091 	bne.w	4069a8 <_vfiprintf_r+0xbe8>
  406886:	2001      	movs	r0, #1
  406888:	4611      	mov	r1, r2
  40688a:	46ca      	mov	sl, r9
  40688c:	e641      	b.n	406512 <_vfiprintf_r+0x752>
  40688e:	aa0f      	add	r2, sp, #60	; 0x3c
  406890:	9904      	ldr	r1, [sp, #16]
  406892:	9806      	ldr	r0, [sp, #24]
  406894:	f7ff fa54 	bl	405d40 <__sprint_r.part.0>
  406898:	2800      	cmp	r0, #0
  40689a:	f47f af43 	bne.w	406724 <_vfiprintf_r+0x964>
  40689e:	9810      	ldr	r0, [sp, #64]	; 0x40
  4068a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4068a2:	3001      	adds	r0, #1
  4068a4:	46ca      	mov	sl, r9
  4068a6:	e667      	b.n	406578 <_vfiprintf_r+0x7b8>
  4068a8:	46d3      	mov	fp, sl
  4068aa:	e6d6      	b.n	40665a <_vfiprintf_r+0x89a>
  4068ac:	9e07      	ldr	r6, [sp, #28]
  4068ae:	3607      	adds	r6, #7
  4068b0:	f026 0207 	bic.w	r2, r6, #7
  4068b4:	f102 0108 	add.w	r1, r2, #8
  4068b8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4068bc:	9107      	str	r1, [sp, #28]
  4068be:	2201      	movs	r2, #1
  4068c0:	f7ff bbb1 	b.w	406026 <_vfiprintf_r+0x266>
  4068c4:	9e07      	ldr	r6, [sp, #28]
  4068c6:	3607      	adds	r6, #7
  4068c8:	f026 0607 	bic.w	r6, r6, #7
  4068cc:	e9d6 0100 	ldrd	r0, r1, [r6]
  4068d0:	f106 0208 	add.w	r2, r6, #8
  4068d4:	9207      	str	r2, [sp, #28]
  4068d6:	4606      	mov	r6, r0
  4068d8:	460f      	mov	r7, r1
  4068da:	e4b6      	b.n	40624a <_vfiprintf_r+0x48a>
  4068dc:	9e07      	ldr	r6, [sp, #28]
  4068de:	3607      	adds	r6, #7
  4068e0:	f026 0207 	bic.w	r2, r6, #7
  4068e4:	f102 0108 	add.w	r1, r2, #8
  4068e8:	e9d2 6700 	ldrd	r6, r7, [r2]
  4068ec:	9107      	str	r1, [sp, #28]
  4068ee:	2200      	movs	r2, #0
  4068f0:	f7ff bb99 	b.w	406026 <_vfiprintf_r+0x266>
  4068f4:	9e07      	ldr	r6, [sp, #28]
  4068f6:	3607      	adds	r6, #7
  4068f8:	f026 0107 	bic.w	r1, r6, #7
  4068fc:	f101 0008 	add.w	r0, r1, #8
  406900:	9007      	str	r0, [sp, #28]
  406902:	e9d1 6700 	ldrd	r6, r7, [r1]
  406906:	e519      	b.n	40633c <_vfiprintf_r+0x57c>
  406908:	46cb      	mov	fp, r9
  40690a:	f7ff bbab 	b.w	406064 <_vfiprintf_r+0x2a4>
  40690e:	252d      	movs	r5, #45	; 0x2d
  406910:	4276      	negs	r6, r6
  406912:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  406916:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40691a:	2201      	movs	r2, #1
  40691c:	f7ff bb88 	b.w	406030 <_vfiprintf_r+0x270>
  406920:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406922:	b9b3      	cbnz	r3, 406952 <_vfiprintf_r+0xb92>
  406924:	4611      	mov	r1, r2
  406926:	2001      	movs	r0, #1
  406928:	46ca      	mov	sl, r9
  40692a:	e5f2      	b.n	406512 <_vfiprintf_r+0x752>
  40692c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406930:	f000 fdfe 	bl	407530 <__retarget_lock_release_recursive>
  406934:	f04f 33ff 	mov.w	r3, #4294967295
  406938:	9303      	str	r3, [sp, #12]
  40693a:	f7ff bb50 	b.w	405fde <_vfiprintf_r+0x21e>
  40693e:	aa0f      	add	r2, sp, #60	; 0x3c
  406940:	9904      	ldr	r1, [sp, #16]
  406942:	9806      	ldr	r0, [sp, #24]
  406944:	f7ff f9fc 	bl	405d40 <__sprint_r.part.0>
  406948:	2800      	cmp	r0, #0
  40694a:	f47f aeeb 	bne.w	406724 <_vfiprintf_r+0x964>
  40694e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406950:	e6a9      	b.n	4066a6 <_vfiprintf_r+0x8e6>
  406952:	ab0e      	add	r3, sp, #56	; 0x38
  406954:	2202      	movs	r2, #2
  406956:	931c      	str	r3, [sp, #112]	; 0x70
  406958:	921d      	str	r2, [sp, #116]	; 0x74
  40695a:	2001      	movs	r0, #1
  40695c:	46ca      	mov	sl, r9
  40695e:	e5d0      	b.n	406502 <_vfiprintf_r+0x742>
  406960:	aa0f      	add	r2, sp, #60	; 0x3c
  406962:	9904      	ldr	r1, [sp, #16]
  406964:	9806      	ldr	r0, [sp, #24]
  406966:	f7ff f9eb 	bl	405d40 <__sprint_r.part.0>
  40696a:	2800      	cmp	r0, #0
  40696c:	f47f aeda 	bne.w	406724 <_vfiprintf_r+0x964>
  406970:	9910      	ldr	r1, [sp, #64]	; 0x40
  406972:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406974:	1c48      	adds	r0, r1, #1
  406976:	46ca      	mov	sl, r9
  406978:	e5a4      	b.n	4064c4 <_vfiprintf_r+0x704>
  40697a:	9a07      	ldr	r2, [sp, #28]
  40697c:	9903      	ldr	r1, [sp, #12]
  40697e:	6813      	ldr	r3, [r2, #0]
  406980:	17cd      	asrs	r5, r1, #31
  406982:	4608      	mov	r0, r1
  406984:	3204      	adds	r2, #4
  406986:	4629      	mov	r1, r5
  406988:	9207      	str	r2, [sp, #28]
  40698a:	e9c3 0100 	strd	r0, r1, [r3]
  40698e:	f7ff ba54 	b.w	405e3a <_vfiprintf_r+0x7a>
  406992:	4658      	mov	r0, fp
  406994:	9607      	str	r6, [sp, #28]
  406996:	9302      	str	r3, [sp, #8]
  406998:	f7ff f932 	bl	405c00 <strlen>
  40699c:	2400      	movs	r4, #0
  40699e:	9005      	str	r0, [sp, #20]
  4069a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4069a4:	f7ff bb5e 	b.w	406064 <_vfiprintf_r+0x2a4>
  4069a8:	aa0f      	add	r2, sp, #60	; 0x3c
  4069aa:	9904      	ldr	r1, [sp, #16]
  4069ac:	9806      	ldr	r0, [sp, #24]
  4069ae:	f7ff f9c7 	bl	405d40 <__sprint_r.part.0>
  4069b2:	2800      	cmp	r0, #0
  4069b4:	f47f aeb6 	bne.w	406724 <_vfiprintf_r+0x964>
  4069b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4069ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4069bc:	1c48      	adds	r0, r1, #1
  4069be:	46ca      	mov	sl, r9
  4069c0:	e5a7      	b.n	406512 <_vfiprintf_r+0x752>
  4069c2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4069c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4069c6:	4e20      	ldr	r6, [pc, #128]	; (406a48 <_vfiprintf_r+0xc88>)
  4069c8:	3101      	adds	r1, #1
  4069ca:	f7ff bb90 	b.w	4060ee <_vfiprintf_r+0x32e>
  4069ce:	2c06      	cmp	r4, #6
  4069d0:	bf28      	it	cs
  4069d2:	2406      	movcs	r4, #6
  4069d4:	9405      	str	r4, [sp, #20]
  4069d6:	9607      	str	r6, [sp, #28]
  4069d8:	9401      	str	r4, [sp, #4]
  4069da:	f8df b070 	ldr.w	fp, [pc, #112]	; 406a4c <_vfiprintf_r+0xc8c>
  4069de:	e4d5      	b.n	40638c <_vfiprintf_r+0x5cc>
  4069e0:	9810      	ldr	r0, [sp, #64]	; 0x40
  4069e2:	4e19      	ldr	r6, [pc, #100]	; (406a48 <_vfiprintf_r+0xc88>)
  4069e4:	3001      	adds	r0, #1
  4069e6:	e603      	b.n	4065f0 <_vfiprintf_r+0x830>
  4069e8:	9405      	str	r4, [sp, #20]
  4069ea:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4069ee:	9607      	str	r6, [sp, #28]
  4069f0:	9302      	str	r3, [sp, #8]
  4069f2:	4604      	mov	r4, r0
  4069f4:	f7ff bb36 	b.w	406064 <_vfiprintf_r+0x2a4>
  4069f8:	4686      	mov	lr, r0
  4069fa:	f7ff bbce 	b.w	40619a <_vfiprintf_r+0x3da>
  4069fe:	9806      	ldr	r0, [sp, #24]
  406a00:	aa0f      	add	r2, sp, #60	; 0x3c
  406a02:	4659      	mov	r1, fp
  406a04:	f7ff f99c 	bl	405d40 <__sprint_r.part.0>
  406a08:	2800      	cmp	r0, #0
  406a0a:	f43f ae24 	beq.w	406656 <_vfiprintf_r+0x896>
  406a0e:	e624      	b.n	40665a <_vfiprintf_r+0x89a>
  406a10:	9907      	ldr	r1, [sp, #28]
  406a12:	f898 2001 	ldrb.w	r2, [r8, #1]
  406a16:	680c      	ldr	r4, [r1, #0]
  406a18:	3104      	adds	r1, #4
  406a1a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406a1e:	46b8      	mov	r8, r7
  406a20:	9107      	str	r1, [sp, #28]
  406a22:	f7ff ba3f 	b.w	405ea4 <_vfiprintf_r+0xe4>
  406a26:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406a2a:	e43c      	b.n	4062a6 <_vfiprintf_r+0x4e6>
  406a2c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406a30:	e521      	b.n	406476 <_vfiprintf_r+0x6b6>
  406a32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406a36:	f7ff bbf4 	b.w	406222 <_vfiprintf_r+0x462>
  406a3a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406a3e:	e491      	b.n	406364 <_vfiprintf_r+0x5a4>
  406a40:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406a44:	e469      	b.n	40631a <_vfiprintf_r+0x55a>
  406a46:	bf00      	nop
  406a48:	00408918 	.word	0x00408918
  406a4c:	00408910 	.word	0x00408910

00406a50 <__sbprintf>:
  406a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406a54:	460c      	mov	r4, r1
  406a56:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406a5a:	8989      	ldrh	r1, [r1, #12]
  406a5c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406a5e:	89e5      	ldrh	r5, [r4, #14]
  406a60:	9619      	str	r6, [sp, #100]	; 0x64
  406a62:	f021 0102 	bic.w	r1, r1, #2
  406a66:	4606      	mov	r6, r0
  406a68:	69e0      	ldr	r0, [r4, #28]
  406a6a:	f8ad 100c 	strh.w	r1, [sp, #12]
  406a6e:	4617      	mov	r7, r2
  406a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406a74:	6a62      	ldr	r2, [r4, #36]	; 0x24
  406a76:	f8ad 500e 	strh.w	r5, [sp, #14]
  406a7a:	4698      	mov	r8, r3
  406a7c:	ad1a      	add	r5, sp, #104	; 0x68
  406a7e:	2300      	movs	r3, #0
  406a80:	9007      	str	r0, [sp, #28]
  406a82:	a816      	add	r0, sp, #88	; 0x58
  406a84:	9209      	str	r2, [sp, #36]	; 0x24
  406a86:	9306      	str	r3, [sp, #24]
  406a88:	9500      	str	r5, [sp, #0]
  406a8a:	9504      	str	r5, [sp, #16]
  406a8c:	9102      	str	r1, [sp, #8]
  406a8e:	9105      	str	r1, [sp, #20]
  406a90:	f000 fd48 	bl	407524 <__retarget_lock_init_recursive>
  406a94:	4643      	mov	r3, r8
  406a96:	463a      	mov	r2, r7
  406a98:	4669      	mov	r1, sp
  406a9a:	4630      	mov	r0, r6
  406a9c:	f7ff f990 	bl	405dc0 <_vfiprintf_r>
  406aa0:	1e05      	subs	r5, r0, #0
  406aa2:	db07      	blt.n	406ab4 <__sbprintf+0x64>
  406aa4:	4630      	mov	r0, r6
  406aa6:	4669      	mov	r1, sp
  406aa8:	f000 f928 	bl	406cfc <_fflush_r>
  406aac:	2800      	cmp	r0, #0
  406aae:	bf18      	it	ne
  406ab0:	f04f 35ff 	movne.w	r5, #4294967295
  406ab4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406ab8:	065b      	lsls	r3, r3, #25
  406aba:	d503      	bpl.n	406ac4 <__sbprintf+0x74>
  406abc:	89a3      	ldrh	r3, [r4, #12]
  406abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406ac2:	81a3      	strh	r3, [r4, #12]
  406ac4:	9816      	ldr	r0, [sp, #88]	; 0x58
  406ac6:	f000 fd2f 	bl	407528 <__retarget_lock_close_recursive>
  406aca:	4628      	mov	r0, r5
  406acc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  406ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406ad4 <__swsetup_r>:
  406ad4:	b538      	push	{r3, r4, r5, lr}
  406ad6:	4b30      	ldr	r3, [pc, #192]	; (406b98 <__swsetup_r+0xc4>)
  406ad8:	681b      	ldr	r3, [r3, #0]
  406ada:	4605      	mov	r5, r0
  406adc:	460c      	mov	r4, r1
  406ade:	b113      	cbz	r3, 406ae6 <__swsetup_r+0x12>
  406ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406ae2:	2a00      	cmp	r2, #0
  406ae4:	d038      	beq.n	406b58 <__swsetup_r+0x84>
  406ae6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406aea:	b293      	uxth	r3, r2
  406aec:	0718      	lsls	r0, r3, #28
  406aee:	d50c      	bpl.n	406b0a <__swsetup_r+0x36>
  406af0:	6920      	ldr	r0, [r4, #16]
  406af2:	b1a8      	cbz	r0, 406b20 <__swsetup_r+0x4c>
  406af4:	f013 0201 	ands.w	r2, r3, #1
  406af8:	d01e      	beq.n	406b38 <__swsetup_r+0x64>
  406afa:	6963      	ldr	r3, [r4, #20]
  406afc:	2200      	movs	r2, #0
  406afe:	425b      	negs	r3, r3
  406b00:	61a3      	str	r3, [r4, #24]
  406b02:	60a2      	str	r2, [r4, #8]
  406b04:	b1f0      	cbz	r0, 406b44 <__swsetup_r+0x70>
  406b06:	2000      	movs	r0, #0
  406b08:	bd38      	pop	{r3, r4, r5, pc}
  406b0a:	06d9      	lsls	r1, r3, #27
  406b0c:	d53c      	bpl.n	406b88 <__swsetup_r+0xb4>
  406b0e:	0758      	lsls	r0, r3, #29
  406b10:	d426      	bmi.n	406b60 <__swsetup_r+0x8c>
  406b12:	6920      	ldr	r0, [r4, #16]
  406b14:	f042 0308 	orr.w	r3, r2, #8
  406b18:	81a3      	strh	r3, [r4, #12]
  406b1a:	b29b      	uxth	r3, r3
  406b1c:	2800      	cmp	r0, #0
  406b1e:	d1e9      	bne.n	406af4 <__swsetup_r+0x20>
  406b20:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406b24:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406b28:	d0e4      	beq.n	406af4 <__swsetup_r+0x20>
  406b2a:	4628      	mov	r0, r5
  406b2c:	4621      	mov	r1, r4
  406b2e:	f000 fd2f 	bl	407590 <__smakebuf_r>
  406b32:	89a3      	ldrh	r3, [r4, #12]
  406b34:	6920      	ldr	r0, [r4, #16]
  406b36:	e7dd      	b.n	406af4 <__swsetup_r+0x20>
  406b38:	0799      	lsls	r1, r3, #30
  406b3a:	bf58      	it	pl
  406b3c:	6962      	ldrpl	r2, [r4, #20]
  406b3e:	60a2      	str	r2, [r4, #8]
  406b40:	2800      	cmp	r0, #0
  406b42:	d1e0      	bne.n	406b06 <__swsetup_r+0x32>
  406b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406b48:	061a      	lsls	r2, r3, #24
  406b4a:	d5dd      	bpl.n	406b08 <__swsetup_r+0x34>
  406b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406b50:	81a3      	strh	r3, [r4, #12]
  406b52:	f04f 30ff 	mov.w	r0, #4294967295
  406b56:	bd38      	pop	{r3, r4, r5, pc}
  406b58:	4618      	mov	r0, r3
  406b5a:	f000 f927 	bl	406dac <__sinit>
  406b5e:	e7c2      	b.n	406ae6 <__swsetup_r+0x12>
  406b60:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406b62:	b151      	cbz	r1, 406b7a <__swsetup_r+0xa6>
  406b64:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406b68:	4299      	cmp	r1, r3
  406b6a:	d004      	beq.n	406b76 <__swsetup_r+0xa2>
  406b6c:	4628      	mov	r0, r5
  406b6e:	f000 fa43 	bl	406ff8 <_free_r>
  406b72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406b76:	2300      	movs	r3, #0
  406b78:	6323      	str	r3, [r4, #48]	; 0x30
  406b7a:	2300      	movs	r3, #0
  406b7c:	6920      	ldr	r0, [r4, #16]
  406b7e:	6063      	str	r3, [r4, #4]
  406b80:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  406b84:	6020      	str	r0, [r4, #0]
  406b86:	e7c5      	b.n	406b14 <__swsetup_r+0x40>
  406b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406b8c:	2309      	movs	r3, #9
  406b8e:	602b      	str	r3, [r5, #0]
  406b90:	f04f 30ff 	mov.w	r0, #4294967295
  406b94:	81a2      	strh	r2, [r4, #12]
  406b96:	bd38      	pop	{r3, r4, r5, pc}
  406b98:	2040003c 	.word	0x2040003c

00406b9c <register_fini>:
  406b9c:	4b02      	ldr	r3, [pc, #8]	; (406ba8 <register_fini+0xc>)
  406b9e:	b113      	cbz	r3, 406ba6 <register_fini+0xa>
  406ba0:	4802      	ldr	r0, [pc, #8]	; (406bac <register_fini+0x10>)
  406ba2:	f000 b805 	b.w	406bb0 <atexit>
  406ba6:	4770      	bx	lr
  406ba8:	00000000 	.word	0x00000000
  406bac:	00406e1d 	.word	0x00406e1d

00406bb0 <atexit>:
  406bb0:	2300      	movs	r3, #0
  406bb2:	4601      	mov	r1, r0
  406bb4:	461a      	mov	r2, r3
  406bb6:	4618      	mov	r0, r3
  406bb8:	f001 bb64 	b.w	408284 <__register_exitproc>

00406bbc <__sflush_r>:
  406bbc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  406bc0:	b29a      	uxth	r2, r3
  406bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406bc6:	460d      	mov	r5, r1
  406bc8:	0711      	lsls	r1, r2, #28
  406bca:	4680      	mov	r8, r0
  406bcc:	d43a      	bmi.n	406c44 <__sflush_r+0x88>
  406bce:	686a      	ldr	r2, [r5, #4]
  406bd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406bd4:	2a00      	cmp	r2, #0
  406bd6:	81ab      	strh	r3, [r5, #12]
  406bd8:	dd6f      	ble.n	406cba <__sflush_r+0xfe>
  406bda:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406bdc:	2c00      	cmp	r4, #0
  406bde:	d049      	beq.n	406c74 <__sflush_r+0xb8>
  406be0:	2200      	movs	r2, #0
  406be2:	b29b      	uxth	r3, r3
  406be4:	f8d8 6000 	ldr.w	r6, [r8]
  406be8:	f8c8 2000 	str.w	r2, [r8]
  406bec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  406bf0:	d067      	beq.n	406cc2 <__sflush_r+0x106>
  406bf2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  406bf4:	075f      	lsls	r7, r3, #29
  406bf6:	d505      	bpl.n	406c04 <__sflush_r+0x48>
  406bf8:	6869      	ldr	r1, [r5, #4]
  406bfa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  406bfc:	1a52      	subs	r2, r2, r1
  406bfe:	b10b      	cbz	r3, 406c04 <__sflush_r+0x48>
  406c00:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  406c02:	1ad2      	subs	r2, r2, r3
  406c04:	2300      	movs	r3, #0
  406c06:	69e9      	ldr	r1, [r5, #28]
  406c08:	4640      	mov	r0, r8
  406c0a:	47a0      	blx	r4
  406c0c:	1c44      	adds	r4, r0, #1
  406c0e:	d03c      	beq.n	406c8a <__sflush_r+0xce>
  406c10:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  406c14:	692a      	ldr	r2, [r5, #16]
  406c16:	602a      	str	r2, [r5, #0]
  406c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  406c1c:	2200      	movs	r2, #0
  406c1e:	81ab      	strh	r3, [r5, #12]
  406c20:	04db      	lsls	r3, r3, #19
  406c22:	606a      	str	r2, [r5, #4]
  406c24:	d447      	bmi.n	406cb6 <__sflush_r+0xfa>
  406c26:	6b29      	ldr	r1, [r5, #48]	; 0x30
  406c28:	f8c8 6000 	str.w	r6, [r8]
  406c2c:	b311      	cbz	r1, 406c74 <__sflush_r+0xb8>
  406c2e:	f105 0340 	add.w	r3, r5, #64	; 0x40
  406c32:	4299      	cmp	r1, r3
  406c34:	d002      	beq.n	406c3c <__sflush_r+0x80>
  406c36:	4640      	mov	r0, r8
  406c38:	f000 f9de 	bl	406ff8 <_free_r>
  406c3c:	2000      	movs	r0, #0
  406c3e:	6328      	str	r0, [r5, #48]	; 0x30
  406c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406c44:	692e      	ldr	r6, [r5, #16]
  406c46:	b1ae      	cbz	r6, 406c74 <__sflush_r+0xb8>
  406c48:	682c      	ldr	r4, [r5, #0]
  406c4a:	602e      	str	r6, [r5, #0]
  406c4c:	0791      	lsls	r1, r2, #30
  406c4e:	bf0c      	ite	eq
  406c50:	696b      	ldreq	r3, [r5, #20]
  406c52:	2300      	movne	r3, #0
  406c54:	1ba4      	subs	r4, r4, r6
  406c56:	60ab      	str	r3, [r5, #8]
  406c58:	e00a      	b.n	406c70 <__sflush_r+0xb4>
  406c5a:	4623      	mov	r3, r4
  406c5c:	4632      	mov	r2, r6
  406c5e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  406c60:	69e9      	ldr	r1, [r5, #28]
  406c62:	4640      	mov	r0, r8
  406c64:	47b8      	blx	r7
  406c66:	2800      	cmp	r0, #0
  406c68:	eba4 0400 	sub.w	r4, r4, r0
  406c6c:	4406      	add	r6, r0
  406c6e:	dd04      	ble.n	406c7a <__sflush_r+0xbe>
  406c70:	2c00      	cmp	r4, #0
  406c72:	dcf2      	bgt.n	406c5a <__sflush_r+0x9e>
  406c74:	2000      	movs	r0, #0
  406c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406c7a:	89ab      	ldrh	r3, [r5, #12]
  406c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406c80:	81ab      	strh	r3, [r5, #12]
  406c82:	f04f 30ff 	mov.w	r0, #4294967295
  406c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406c8a:	f8d8 4000 	ldr.w	r4, [r8]
  406c8e:	2c1d      	cmp	r4, #29
  406c90:	d8f3      	bhi.n	406c7a <__sflush_r+0xbe>
  406c92:	4b19      	ldr	r3, [pc, #100]	; (406cf8 <__sflush_r+0x13c>)
  406c94:	40e3      	lsrs	r3, r4
  406c96:	43db      	mvns	r3, r3
  406c98:	f013 0301 	ands.w	r3, r3, #1
  406c9c:	d1ed      	bne.n	406c7a <__sflush_r+0xbe>
  406c9e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  406ca2:	606b      	str	r3, [r5, #4]
  406ca4:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  406ca8:	6929      	ldr	r1, [r5, #16]
  406caa:	81ab      	strh	r3, [r5, #12]
  406cac:	04da      	lsls	r2, r3, #19
  406cae:	6029      	str	r1, [r5, #0]
  406cb0:	d5b9      	bpl.n	406c26 <__sflush_r+0x6a>
  406cb2:	2c00      	cmp	r4, #0
  406cb4:	d1b7      	bne.n	406c26 <__sflush_r+0x6a>
  406cb6:	6528      	str	r0, [r5, #80]	; 0x50
  406cb8:	e7b5      	b.n	406c26 <__sflush_r+0x6a>
  406cba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  406cbc:	2a00      	cmp	r2, #0
  406cbe:	dc8c      	bgt.n	406bda <__sflush_r+0x1e>
  406cc0:	e7d8      	b.n	406c74 <__sflush_r+0xb8>
  406cc2:	2301      	movs	r3, #1
  406cc4:	69e9      	ldr	r1, [r5, #28]
  406cc6:	4640      	mov	r0, r8
  406cc8:	47a0      	blx	r4
  406cca:	1c43      	adds	r3, r0, #1
  406ccc:	4602      	mov	r2, r0
  406cce:	d002      	beq.n	406cd6 <__sflush_r+0x11a>
  406cd0:	89ab      	ldrh	r3, [r5, #12]
  406cd2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  406cd4:	e78e      	b.n	406bf4 <__sflush_r+0x38>
  406cd6:	f8d8 3000 	ldr.w	r3, [r8]
  406cda:	2b00      	cmp	r3, #0
  406cdc:	d0f8      	beq.n	406cd0 <__sflush_r+0x114>
  406cde:	2b1d      	cmp	r3, #29
  406ce0:	d001      	beq.n	406ce6 <__sflush_r+0x12a>
  406ce2:	2b16      	cmp	r3, #22
  406ce4:	d102      	bne.n	406cec <__sflush_r+0x130>
  406ce6:	f8c8 6000 	str.w	r6, [r8]
  406cea:	e7c3      	b.n	406c74 <__sflush_r+0xb8>
  406cec:	89ab      	ldrh	r3, [r5, #12]
  406cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406cf2:	81ab      	strh	r3, [r5, #12]
  406cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406cf8:	20400001 	.word	0x20400001

00406cfc <_fflush_r>:
  406cfc:	b538      	push	{r3, r4, r5, lr}
  406cfe:	460d      	mov	r5, r1
  406d00:	4604      	mov	r4, r0
  406d02:	b108      	cbz	r0, 406d08 <_fflush_r+0xc>
  406d04:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406d06:	b1bb      	cbz	r3, 406d38 <_fflush_r+0x3c>
  406d08:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  406d0c:	b188      	cbz	r0, 406d32 <_fflush_r+0x36>
  406d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406d10:	07db      	lsls	r3, r3, #31
  406d12:	d401      	bmi.n	406d18 <_fflush_r+0x1c>
  406d14:	0581      	lsls	r1, r0, #22
  406d16:	d517      	bpl.n	406d48 <_fflush_r+0x4c>
  406d18:	4620      	mov	r0, r4
  406d1a:	4629      	mov	r1, r5
  406d1c:	f7ff ff4e 	bl	406bbc <__sflush_r>
  406d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  406d22:	07da      	lsls	r2, r3, #31
  406d24:	4604      	mov	r4, r0
  406d26:	d402      	bmi.n	406d2e <_fflush_r+0x32>
  406d28:	89ab      	ldrh	r3, [r5, #12]
  406d2a:	059b      	lsls	r3, r3, #22
  406d2c:	d507      	bpl.n	406d3e <_fflush_r+0x42>
  406d2e:	4620      	mov	r0, r4
  406d30:	bd38      	pop	{r3, r4, r5, pc}
  406d32:	4604      	mov	r4, r0
  406d34:	4620      	mov	r0, r4
  406d36:	bd38      	pop	{r3, r4, r5, pc}
  406d38:	f000 f838 	bl	406dac <__sinit>
  406d3c:	e7e4      	b.n	406d08 <_fflush_r+0xc>
  406d3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406d40:	f000 fbf6 	bl	407530 <__retarget_lock_release_recursive>
  406d44:	4620      	mov	r0, r4
  406d46:	bd38      	pop	{r3, r4, r5, pc}
  406d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
  406d4a:	f000 fbef 	bl	40752c <__retarget_lock_acquire_recursive>
  406d4e:	e7e3      	b.n	406d18 <_fflush_r+0x1c>

00406d50 <_cleanup_r>:
  406d50:	4901      	ldr	r1, [pc, #4]	; (406d58 <_cleanup_r+0x8>)
  406d52:	f000 bbaf 	b.w	4074b4 <_fwalk_reent>
  406d56:	bf00      	nop
  406d58:	0040836d 	.word	0x0040836d

00406d5c <std.isra.0>:
  406d5c:	b510      	push	{r4, lr}
  406d5e:	2300      	movs	r3, #0
  406d60:	4604      	mov	r4, r0
  406d62:	8181      	strh	r1, [r0, #12]
  406d64:	81c2      	strh	r2, [r0, #14]
  406d66:	6003      	str	r3, [r0, #0]
  406d68:	6043      	str	r3, [r0, #4]
  406d6a:	6083      	str	r3, [r0, #8]
  406d6c:	6643      	str	r3, [r0, #100]	; 0x64
  406d6e:	6103      	str	r3, [r0, #16]
  406d70:	6143      	str	r3, [r0, #20]
  406d72:	6183      	str	r3, [r0, #24]
  406d74:	4619      	mov	r1, r3
  406d76:	2208      	movs	r2, #8
  406d78:	305c      	adds	r0, #92	; 0x5c
  406d7a:	f7fe fdc3 	bl	405904 <memset>
  406d7e:	4807      	ldr	r0, [pc, #28]	; (406d9c <std.isra.0+0x40>)
  406d80:	4907      	ldr	r1, [pc, #28]	; (406da0 <std.isra.0+0x44>)
  406d82:	4a08      	ldr	r2, [pc, #32]	; (406da4 <std.isra.0+0x48>)
  406d84:	4b08      	ldr	r3, [pc, #32]	; (406da8 <std.isra.0+0x4c>)
  406d86:	6220      	str	r0, [r4, #32]
  406d88:	61e4      	str	r4, [r4, #28]
  406d8a:	6261      	str	r1, [r4, #36]	; 0x24
  406d8c:	62a2      	str	r2, [r4, #40]	; 0x28
  406d8e:	62e3      	str	r3, [r4, #44]	; 0x2c
  406d90:	f104 0058 	add.w	r0, r4, #88	; 0x58
  406d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406d98:	f000 bbc4 	b.w	407524 <__retarget_lock_init_recursive>
  406d9c:	004080b1 	.word	0x004080b1
  406da0:	004080d5 	.word	0x004080d5
  406da4:	00408111 	.word	0x00408111
  406da8:	00408131 	.word	0x00408131

00406dac <__sinit>:
  406dac:	b510      	push	{r4, lr}
  406dae:	4604      	mov	r4, r0
  406db0:	4812      	ldr	r0, [pc, #72]	; (406dfc <__sinit+0x50>)
  406db2:	f000 fbbb 	bl	40752c <__retarget_lock_acquire_recursive>
  406db6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  406db8:	b9d2      	cbnz	r2, 406df0 <__sinit+0x44>
  406dba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  406dbe:	4810      	ldr	r0, [pc, #64]	; (406e00 <__sinit+0x54>)
  406dc0:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  406dc4:	2103      	movs	r1, #3
  406dc6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  406dca:	63e0      	str	r0, [r4, #60]	; 0x3c
  406dcc:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  406dd0:	6860      	ldr	r0, [r4, #4]
  406dd2:	2104      	movs	r1, #4
  406dd4:	f7ff ffc2 	bl	406d5c <std.isra.0>
  406dd8:	2201      	movs	r2, #1
  406dda:	2109      	movs	r1, #9
  406ddc:	68a0      	ldr	r0, [r4, #8]
  406dde:	f7ff ffbd 	bl	406d5c <std.isra.0>
  406de2:	2202      	movs	r2, #2
  406de4:	2112      	movs	r1, #18
  406de6:	68e0      	ldr	r0, [r4, #12]
  406de8:	f7ff ffb8 	bl	406d5c <std.isra.0>
  406dec:	2301      	movs	r3, #1
  406dee:	63a3      	str	r3, [r4, #56]	; 0x38
  406df0:	4802      	ldr	r0, [pc, #8]	; (406dfc <__sinit+0x50>)
  406df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  406df6:	f000 bb9b 	b.w	407530 <__retarget_lock_release_recursive>
  406dfa:	bf00      	nop
  406dfc:	20420468 	.word	0x20420468
  406e00:	00406d51 	.word	0x00406d51

00406e04 <__sfp_lock_acquire>:
  406e04:	4801      	ldr	r0, [pc, #4]	; (406e0c <__sfp_lock_acquire+0x8>)
  406e06:	f000 bb91 	b.w	40752c <__retarget_lock_acquire_recursive>
  406e0a:	bf00      	nop
  406e0c:	2042047c 	.word	0x2042047c

00406e10 <__sfp_lock_release>:
  406e10:	4801      	ldr	r0, [pc, #4]	; (406e18 <__sfp_lock_release+0x8>)
  406e12:	f000 bb8d 	b.w	407530 <__retarget_lock_release_recursive>
  406e16:	bf00      	nop
  406e18:	2042047c 	.word	0x2042047c

00406e1c <__libc_fini_array>:
  406e1c:	b538      	push	{r3, r4, r5, lr}
  406e1e:	4c0a      	ldr	r4, [pc, #40]	; (406e48 <__libc_fini_array+0x2c>)
  406e20:	4d0a      	ldr	r5, [pc, #40]	; (406e4c <__libc_fini_array+0x30>)
  406e22:	1b64      	subs	r4, r4, r5
  406e24:	10a4      	asrs	r4, r4, #2
  406e26:	d00a      	beq.n	406e3e <__libc_fini_array+0x22>
  406e28:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  406e2c:	3b01      	subs	r3, #1
  406e2e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  406e32:	3c01      	subs	r4, #1
  406e34:	f855 3904 	ldr.w	r3, [r5], #-4
  406e38:	4798      	blx	r3
  406e3a:	2c00      	cmp	r4, #0
  406e3c:	d1f9      	bne.n	406e32 <__libc_fini_array+0x16>
  406e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406e42:	f001 be0d 	b.w	408a60 <_fini>
  406e46:	bf00      	nop
  406e48:	00408a70 	.word	0x00408a70
  406e4c:	00408a6c 	.word	0x00408a6c

00406e50 <__fputwc>:
  406e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406e54:	b082      	sub	sp, #8
  406e56:	4680      	mov	r8, r0
  406e58:	4689      	mov	r9, r1
  406e5a:	4614      	mov	r4, r2
  406e5c:	f000 fb54 	bl	407508 <__locale_mb_cur_max>
  406e60:	2801      	cmp	r0, #1
  406e62:	d036      	beq.n	406ed2 <__fputwc+0x82>
  406e64:	464a      	mov	r2, r9
  406e66:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  406e6a:	a901      	add	r1, sp, #4
  406e6c:	4640      	mov	r0, r8
  406e6e:	f001 f9bb 	bl	4081e8 <_wcrtomb_r>
  406e72:	1c42      	adds	r2, r0, #1
  406e74:	4606      	mov	r6, r0
  406e76:	d025      	beq.n	406ec4 <__fputwc+0x74>
  406e78:	b3a8      	cbz	r0, 406ee6 <__fputwc+0x96>
  406e7a:	f89d e004 	ldrb.w	lr, [sp, #4]
  406e7e:	2500      	movs	r5, #0
  406e80:	f10d 0a04 	add.w	sl, sp, #4
  406e84:	e009      	b.n	406e9a <__fputwc+0x4a>
  406e86:	6823      	ldr	r3, [r4, #0]
  406e88:	1c5a      	adds	r2, r3, #1
  406e8a:	6022      	str	r2, [r4, #0]
  406e8c:	f883 e000 	strb.w	lr, [r3]
  406e90:	3501      	adds	r5, #1
  406e92:	42b5      	cmp	r5, r6
  406e94:	d227      	bcs.n	406ee6 <__fputwc+0x96>
  406e96:	f815 e00a 	ldrb.w	lr, [r5, sl]
  406e9a:	68a3      	ldr	r3, [r4, #8]
  406e9c:	3b01      	subs	r3, #1
  406e9e:	2b00      	cmp	r3, #0
  406ea0:	60a3      	str	r3, [r4, #8]
  406ea2:	daf0      	bge.n	406e86 <__fputwc+0x36>
  406ea4:	69a7      	ldr	r7, [r4, #24]
  406ea6:	42bb      	cmp	r3, r7
  406ea8:	4671      	mov	r1, lr
  406eaa:	4622      	mov	r2, r4
  406eac:	4640      	mov	r0, r8
  406eae:	db02      	blt.n	406eb6 <__fputwc+0x66>
  406eb0:	f1be 0f0a 	cmp.w	lr, #10
  406eb4:	d1e7      	bne.n	406e86 <__fputwc+0x36>
  406eb6:	f001 f93f 	bl	408138 <__swbuf_r>
  406eba:	1c43      	adds	r3, r0, #1
  406ebc:	d1e8      	bne.n	406e90 <__fputwc+0x40>
  406ebe:	b002      	add	sp, #8
  406ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ec4:	89a3      	ldrh	r3, [r4, #12]
  406ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406eca:	81a3      	strh	r3, [r4, #12]
  406ecc:	b002      	add	sp, #8
  406ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ed2:	f109 33ff 	add.w	r3, r9, #4294967295
  406ed6:	2bfe      	cmp	r3, #254	; 0xfe
  406ed8:	d8c4      	bhi.n	406e64 <__fputwc+0x14>
  406eda:	fa5f fe89 	uxtb.w	lr, r9
  406ede:	4606      	mov	r6, r0
  406ee0:	f88d e004 	strb.w	lr, [sp, #4]
  406ee4:	e7cb      	b.n	406e7e <__fputwc+0x2e>
  406ee6:	4648      	mov	r0, r9
  406ee8:	b002      	add	sp, #8
  406eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406eee:	bf00      	nop

00406ef0 <_fputwc_r>:
  406ef0:	b530      	push	{r4, r5, lr}
  406ef2:	6e53      	ldr	r3, [r2, #100]	; 0x64
  406ef4:	f013 0f01 	tst.w	r3, #1
  406ef8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  406efc:	4614      	mov	r4, r2
  406efe:	b083      	sub	sp, #12
  406f00:	4605      	mov	r5, r0
  406f02:	b29a      	uxth	r2, r3
  406f04:	d101      	bne.n	406f0a <_fputwc_r+0x1a>
  406f06:	0590      	lsls	r0, r2, #22
  406f08:	d51c      	bpl.n	406f44 <_fputwc_r+0x54>
  406f0a:	0490      	lsls	r0, r2, #18
  406f0c:	d406      	bmi.n	406f1c <_fputwc_r+0x2c>
  406f0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
  406f10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  406f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406f18:	81a3      	strh	r3, [r4, #12]
  406f1a:	6662      	str	r2, [r4, #100]	; 0x64
  406f1c:	4628      	mov	r0, r5
  406f1e:	4622      	mov	r2, r4
  406f20:	f7ff ff96 	bl	406e50 <__fputwc>
  406f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406f26:	07da      	lsls	r2, r3, #31
  406f28:	4605      	mov	r5, r0
  406f2a:	d402      	bmi.n	406f32 <_fputwc_r+0x42>
  406f2c:	89a3      	ldrh	r3, [r4, #12]
  406f2e:	059b      	lsls	r3, r3, #22
  406f30:	d502      	bpl.n	406f38 <_fputwc_r+0x48>
  406f32:	4628      	mov	r0, r5
  406f34:	b003      	add	sp, #12
  406f36:	bd30      	pop	{r4, r5, pc}
  406f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406f3a:	f000 faf9 	bl	407530 <__retarget_lock_release_recursive>
  406f3e:	4628      	mov	r0, r5
  406f40:	b003      	add	sp, #12
  406f42:	bd30      	pop	{r4, r5, pc}
  406f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406f46:	9101      	str	r1, [sp, #4]
  406f48:	f000 faf0 	bl	40752c <__retarget_lock_acquire_recursive>
  406f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406f50:	9901      	ldr	r1, [sp, #4]
  406f52:	b29a      	uxth	r2, r3
  406f54:	e7d9      	b.n	406f0a <_fputwc_r+0x1a>
  406f56:	bf00      	nop

00406f58 <_malloc_trim_r>:
  406f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406f5a:	4f24      	ldr	r7, [pc, #144]	; (406fec <_malloc_trim_r+0x94>)
  406f5c:	460c      	mov	r4, r1
  406f5e:	4606      	mov	r6, r0
  406f60:	f000 fee2 	bl	407d28 <__malloc_lock>
  406f64:	68bb      	ldr	r3, [r7, #8]
  406f66:	685d      	ldr	r5, [r3, #4]
  406f68:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406f6c:	310f      	adds	r1, #15
  406f6e:	f025 0503 	bic.w	r5, r5, #3
  406f72:	4429      	add	r1, r5
  406f74:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406f78:	f021 010f 	bic.w	r1, r1, #15
  406f7c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406f80:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406f84:	db07      	blt.n	406f96 <_malloc_trim_r+0x3e>
  406f86:	2100      	movs	r1, #0
  406f88:	4630      	mov	r0, r6
  406f8a:	f001 f87f 	bl	40808c <_sbrk_r>
  406f8e:	68bb      	ldr	r3, [r7, #8]
  406f90:	442b      	add	r3, r5
  406f92:	4298      	cmp	r0, r3
  406f94:	d004      	beq.n	406fa0 <_malloc_trim_r+0x48>
  406f96:	4630      	mov	r0, r6
  406f98:	f000 fecc 	bl	407d34 <__malloc_unlock>
  406f9c:	2000      	movs	r0, #0
  406f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406fa0:	4261      	negs	r1, r4
  406fa2:	4630      	mov	r0, r6
  406fa4:	f001 f872 	bl	40808c <_sbrk_r>
  406fa8:	3001      	adds	r0, #1
  406faa:	d00d      	beq.n	406fc8 <_malloc_trim_r+0x70>
  406fac:	4b10      	ldr	r3, [pc, #64]	; (406ff0 <_malloc_trim_r+0x98>)
  406fae:	68ba      	ldr	r2, [r7, #8]
  406fb0:	6819      	ldr	r1, [r3, #0]
  406fb2:	1b2d      	subs	r5, r5, r4
  406fb4:	f045 0501 	orr.w	r5, r5, #1
  406fb8:	4630      	mov	r0, r6
  406fba:	1b09      	subs	r1, r1, r4
  406fbc:	6055      	str	r5, [r2, #4]
  406fbe:	6019      	str	r1, [r3, #0]
  406fc0:	f000 feb8 	bl	407d34 <__malloc_unlock>
  406fc4:	2001      	movs	r0, #1
  406fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406fc8:	2100      	movs	r1, #0
  406fca:	4630      	mov	r0, r6
  406fcc:	f001 f85e 	bl	40808c <_sbrk_r>
  406fd0:	68ba      	ldr	r2, [r7, #8]
  406fd2:	1a83      	subs	r3, r0, r2
  406fd4:	2b0f      	cmp	r3, #15
  406fd6:	ddde      	ble.n	406f96 <_malloc_trim_r+0x3e>
  406fd8:	4c06      	ldr	r4, [pc, #24]	; (406ff4 <_malloc_trim_r+0x9c>)
  406fda:	4905      	ldr	r1, [pc, #20]	; (406ff0 <_malloc_trim_r+0x98>)
  406fdc:	6824      	ldr	r4, [r4, #0]
  406fde:	f043 0301 	orr.w	r3, r3, #1
  406fe2:	1b00      	subs	r0, r0, r4
  406fe4:	6053      	str	r3, [r2, #4]
  406fe6:	6008      	str	r0, [r1, #0]
  406fe8:	e7d5      	b.n	406f96 <_malloc_trim_r+0x3e>
  406fea:	bf00      	nop
  406fec:	204005d8 	.word	0x204005d8
  406ff0:	20420394 	.word	0x20420394
  406ff4:	204009e0 	.word	0x204009e0

00406ff8 <_free_r>:
  406ff8:	2900      	cmp	r1, #0
  406ffa:	d044      	beq.n	407086 <_free_r+0x8e>
  406ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407000:	460d      	mov	r5, r1
  407002:	4680      	mov	r8, r0
  407004:	f000 fe90 	bl	407d28 <__malloc_lock>
  407008:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40700c:	4969      	ldr	r1, [pc, #420]	; (4071b4 <_free_r+0x1bc>)
  40700e:	f027 0301 	bic.w	r3, r7, #1
  407012:	f1a5 0408 	sub.w	r4, r5, #8
  407016:	18e2      	adds	r2, r4, r3
  407018:	688e      	ldr	r6, [r1, #8]
  40701a:	6850      	ldr	r0, [r2, #4]
  40701c:	42b2      	cmp	r2, r6
  40701e:	f020 0003 	bic.w	r0, r0, #3
  407022:	d05e      	beq.n	4070e2 <_free_r+0xea>
  407024:	07fe      	lsls	r6, r7, #31
  407026:	6050      	str	r0, [r2, #4]
  407028:	d40b      	bmi.n	407042 <_free_r+0x4a>
  40702a:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40702e:	1be4      	subs	r4, r4, r7
  407030:	f101 0e08 	add.w	lr, r1, #8
  407034:	68a5      	ldr	r5, [r4, #8]
  407036:	4575      	cmp	r5, lr
  407038:	443b      	add	r3, r7
  40703a:	d06d      	beq.n	407118 <_free_r+0x120>
  40703c:	68e7      	ldr	r7, [r4, #12]
  40703e:	60ef      	str	r7, [r5, #12]
  407040:	60bd      	str	r5, [r7, #8]
  407042:	1815      	adds	r5, r2, r0
  407044:	686d      	ldr	r5, [r5, #4]
  407046:	07ed      	lsls	r5, r5, #31
  407048:	d53e      	bpl.n	4070c8 <_free_r+0xd0>
  40704a:	f043 0201 	orr.w	r2, r3, #1
  40704e:	6062      	str	r2, [r4, #4]
  407050:	50e3      	str	r3, [r4, r3]
  407052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407056:	d217      	bcs.n	407088 <_free_r+0x90>
  407058:	08db      	lsrs	r3, r3, #3
  40705a:	1c58      	adds	r0, r3, #1
  40705c:	109a      	asrs	r2, r3, #2
  40705e:	684d      	ldr	r5, [r1, #4]
  407060:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407064:	60a7      	str	r7, [r4, #8]
  407066:	2301      	movs	r3, #1
  407068:	4093      	lsls	r3, r2
  40706a:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40706e:	432b      	orrs	r3, r5
  407070:	3a08      	subs	r2, #8
  407072:	60e2      	str	r2, [r4, #12]
  407074:	604b      	str	r3, [r1, #4]
  407076:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40707a:	60fc      	str	r4, [r7, #12]
  40707c:	4640      	mov	r0, r8
  40707e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407082:	f000 be57 	b.w	407d34 <__malloc_unlock>
  407086:	4770      	bx	lr
  407088:	0a5a      	lsrs	r2, r3, #9
  40708a:	2a04      	cmp	r2, #4
  40708c:	d852      	bhi.n	407134 <_free_r+0x13c>
  40708e:	099a      	lsrs	r2, r3, #6
  407090:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407094:	00ff      	lsls	r7, r7, #3
  407096:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40709a:	19c8      	adds	r0, r1, r7
  40709c:	59ca      	ldr	r2, [r1, r7]
  40709e:	3808      	subs	r0, #8
  4070a0:	4290      	cmp	r0, r2
  4070a2:	d04f      	beq.n	407144 <_free_r+0x14c>
  4070a4:	6851      	ldr	r1, [r2, #4]
  4070a6:	f021 0103 	bic.w	r1, r1, #3
  4070aa:	428b      	cmp	r3, r1
  4070ac:	d232      	bcs.n	407114 <_free_r+0x11c>
  4070ae:	6892      	ldr	r2, [r2, #8]
  4070b0:	4290      	cmp	r0, r2
  4070b2:	d1f7      	bne.n	4070a4 <_free_r+0xac>
  4070b4:	68c3      	ldr	r3, [r0, #12]
  4070b6:	60a0      	str	r0, [r4, #8]
  4070b8:	60e3      	str	r3, [r4, #12]
  4070ba:	609c      	str	r4, [r3, #8]
  4070bc:	60c4      	str	r4, [r0, #12]
  4070be:	4640      	mov	r0, r8
  4070c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4070c4:	f000 be36 	b.w	407d34 <__malloc_unlock>
  4070c8:	6895      	ldr	r5, [r2, #8]
  4070ca:	4f3b      	ldr	r7, [pc, #236]	; (4071b8 <_free_r+0x1c0>)
  4070cc:	42bd      	cmp	r5, r7
  4070ce:	4403      	add	r3, r0
  4070d0:	d040      	beq.n	407154 <_free_r+0x15c>
  4070d2:	68d0      	ldr	r0, [r2, #12]
  4070d4:	60e8      	str	r0, [r5, #12]
  4070d6:	f043 0201 	orr.w	r2, r3, #1
  4070da:	6085      	str	r5, [r0, #8]
  4070dc:	6062      	str	r2, [r4, #4]
  4070de:	50e3      	str	r3, [r4, r3]
  4070e0:	e7b7      	b.n	407052 <_free_r+0x5a>
  4070e2:	07ff      	lsls	r7, r7, #31
  4070e4:	4403      	add	r3, r0
  4070e6:	d407      	bmi.n	4070f8 <_free_r+0x100>
  4070e8:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4070ec:	1aa4      	subs	r4, r4, r2
  4070ee:	4413      	add	r3, r2
  4070f0:	68a0      	ldr	r0, [r4, #8]
  4070f2:	68e2      	ldr	r2, [r4, #12]
  4070f4:	60c2      	str	r2, [r0, #12]
  4070f6:	6090      	str	r0, [r2, #8]
  4070f8:	4a30      	ldr	r2, [pc, #192]	; (4071bc <_free_r+0x1c4>)
  4070fa:	6812      	ldr	r2, [r2, #0]
  4070fc:	f043 0001 	orr.w	r0, r3, #1
  407100:	4293      	cmp	r3, r2
  407102:	6060      	str	r0, [r4, #4]
  407104:	608c      	str	r4, [r1, #8]
  407106:	d3b9      	bcc.n	40707c <_free_r+0x84>
  407108:	4b2d      	ldr	r3, [pc, #180]	; (4071c0 <_free_r+0x1c8>)
  40710a:	4640      	mov	r0, r8
  40710c:	6819      	ldr	r1, [r3, #0]
  40710e:	f7ff ff23 	bl	406f58 <_malloc_trim_r>
  407112:	e7b3      	b.n	40707c <_free_r+0x84>
  407114:	4610      	mov	r0, r2
  407116:	e7cd      	b.n	4070b4 <_free_r+0xbc>
  407118:	1811      	adds	r1, r2, r0
  40711a:	6849      	ldr	r1, [r1, #4]
  40711c:	07c9      	lsls	r1, r1, #31
  40711e:	d444      	bmi.n	4071aa <_free_r+0x1b2>
  407120:	6891      	ldr	r1, [r2, #8]
  407122:	68d2      	ldr	r2, [r2, #12]
  407124:	60ca      	str	r2, [r1, #12]
  407126:	4403      	add	r3, r0
  407128:	f043 0001 	orr.w	r0, r3, #1
  40712c:	6091      	str	r1, [r2, #8]
  40712e:	6060      	str	r0, [r4, #4]
  407130:	50e3      	str	r3, [r4, r3]
  407132:	e7a3      	b.n	40707c <_free_r+0x84>
  407134:	2a14      	cmp	r2, #20
  407136:	d816      	bhi.n	407166 <_free_r+0x16e>
  407138:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40713c:	00ff      	lsls	r7, r7, #3
  40713e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407142:	e7aa      	b.n	40709a <_free_r+0xa2>
  407144:	10aa      	asrs	r2, r5, #2
  407146:	2301      	movs	r3, #1
  407148:	684d      	ldr	r5, [r1, #4]
  40714a:	4093      	lsls	r3, r2
  40714c:	432b      	orrs	r3, r5
  40714e:	604b      	str	r3, [r1, #4]
  407150:	4603      	mov	r3, r0
  407152:	e7b0      	b.n	4070b6 <_free_r+0xbe>
  407154:	f043 0201 	orr.w	r2, r3, #1
  407158:	614c      	str	r4, [r1, #20]
  40715a:	610c      	str	r4, [r1, #16]
  40715c:	60e5      	str	r5, [r4, #12]
  40715e:	60a5      	str	r5, [r4, #8]
  407160:	6062      	str	r2, [r4, #4]
  407162:	50e3      	str	r3, [r4, r3]
  407164:	e78a      	b.n	40707c <_free_r+0x84>
  407166:	2a54      	cmp	r2, #84	; 0x54
  407168:	d806      	bhi.n	407178 <_free_r+0x180>
  40716a:	0b1a      	lsrs	r2, r3, #12
  40716c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407170:	00ff      	lsls	r7, r7, #3
  407172:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407176:	e790      	b.n	40709a <_free_r+0xa2>
  407178:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40717c:	d806      	bhi.n	40718c <_free_r+0x194>
  40717e:	0bda      	lsrs	r2, r3, #15
  407180:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407184:	00ff      	lsls	r7, r7, #3
  407186:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40718a:	e786      	b.n	40709a <_free_r+0xa2>
  40718c:	f240 5054 	movw	r0, #1364	; 0x554
  407190:	4282      	cmp	r2, r0
  407192:	d806      	bhi.n	4071a2 <_free_r+0x1aa>
  407194:	0c9a      	lsrs	r2, r3, #18
  407196:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40719a:	00ff      	lsls	r7, r7, #3
  40719c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4071a0:	e77b      	b.n	40709a <_free_r+0xa2>
  4071a2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  4071a6:	257e      	movs	r5, #126	; 0x7e
  4071a8:	e777      	b.n	40709a <_free_r+0xa2>
  4071aa:	f043 0101 	orr.w	r1, r3, #1
  4071ae:	6061      	str	r1, [r4, #4]
  4071b0:	6013      	str	r3, [r2, #0]
  4071b2:	e763      	b.n	40707c <_free_r+0x84>
  4071b4:	204005d8 	.word	0x204005d8
  4071b8:	204005e0 	.word	0x204005e0
  4071bc:	204009e4 	.word	0x204009e4
  4071c0:	204203c4 	.word	0x204203c4

004071c4 <__sfvwrite_r>:
  4071c4:	6893      	ldr	r3, [r2, #8]
  4071c6:	2b00      	cmp	r3, #0
  4071c8:	d073      	beq.n	4072b2 <__sfvwrite_r+0xee>
  4071ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4071ce:	898b      	ldrh	r3, [r1, #12]
  4071d0:	b083      	sub	sp, #12
  4071d2:	460c      	mov	r4, r1
  4071d4:	0719      	lsls	r1, r3, #28
  4071d6:	9000      	str	r0, [sp, #0]
  4071d8:	4616      	mov	r6, r2
  4071da:	d526      	bpl.n	40722a <__sfvwrite_r+0x66>
  4071dc:	6922      	ldr	r2, [r4, #16]
  4071de:	b322      	cbz	r2, 40722a <__sfvwrite_r+0x66>
  4071e0:	f013 0002 	ands.w	r0, r3, #2
  4071e4:	6835      	ldr	r5, [r6, #0]
  4071e6:	d02c      	beq.n	407242 <__sfvwrite_r+0x7e>
  4071e8:	f04f 0900 	mov.w	r9, #0
  4071ec:	4fb0      	ldr	r7, [pc, #704]	; (4074b0 <__sfvwrite_r+0x2ec>)
  4071ee:	46c8      	mov	r8, r9
  4071f0:	46b2      	mov	sl, r6
  4071f2:	45b8      	cmp	r8, r7
  4071f4:	4643      	mov	r3, r8
  4071f6:	464a      	mov	r2, r9
  4071f8:	bf28      	it	cs
  4071fa:	463b      	movcs	r3, r7
  4071fc:	9800      	ldr	r0, [sp, #0]
  4071fe:	f1b8 0f00 	cmp.w	r8, #0
  407202:	d050      	beq.n	4072a6 <__sfvwrite_r+0xe2>
  407204:	69e1      	ldr	r1, [r4, #28]
  407206:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407208:	47b0      	blx	r6
  40720a:	2800      	cmp	r0, #0
  40720c:	dd58      	ble.n	4072c0 <__sfvwrite_r+0xfc>
  40720e:	f8da 3008 	ldr.w	r3, [sl, #8]
  407212:	1a1b      	subs	r3, r3, r0
  407214:	4481      	add	r9, r0
  407216:	eba8 0800 	sub.w	r8, r8, r0
  40721a:	f8ca 3008 	str.w	r3, [sl, #8]
  40721e:	2b00      	cmp	r3, #0
  407220:	d1e7      	bne.n	4071f2 <__sfvwrite_r+0x2e>
  407222:	2000      	movs	r0, #0
  407224:	b003      	add	sp, #12
  407226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40722a:	4621      	mov	r1, r4
  40722c:	9800      	ldr	r0, [sp, #0]
  40722e:	f7ff fc51 	bl	406ad4 <__swsetup_r>
  407232:	2800      	cmp	r0, #0
  407234:	f040 8133 	bne.w	40749e <__sfvwrite_r+0x2da>
  407238:	89a3      	ldrh	r3, [r4, #12]
  40723a:	6835      	ldr	r5, [r6, #0]
  40723c:	f013 0002 	ands.w	r0, r3, #2
  407240:	d1d2      	bne.n	4071e8 <__sfvwrite_r+0x24>
  407242:	f013 0901 	ands.w	r9, r3, #1
  407246:	d145      	bne.n	4072d4 <__sfvwrite_r+0x110>
  407248:	464f      	mov	r7, r9
  40724a:	9601      	str	r6, [sp, #4]
  40724c:	b337      	cbz	r7, 40729c <__sfvwrite_r+0xd8>
  40724e:	059a      	lsls	r2, r3, #22
  407250:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407254:	f140 8083 	bpl.w	40735e <__sfvwrite_r+0x19a>
  407258:	4547      	cmp	r7, r8
  40725a:	46c3      	mov	fp, r8
  40725c:	f0c0 80ab 	bcc.w	4073b6 <__sfvwrite_r+0x1f2>
  407260:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407264:	f040 80ac 	bne.w	4073c0 <__sfvwrite_r+0x1fc>
  407268:	6820      	ldr	r0, [r4, #0]
  40726a:	46ba      	mov	sl, r7
  40726c:	465a      	mov	r2, fp
  40726e:	4649      	mov	r1, r9
  407270:	f000 fcf6 	bl	407c60 <memmove>
  407274:	68a2      	ldr	r2, [r4, #8]
  407276:	6823      	ldr	r3, [r4, #0]
  407278:	eba2 0208 	sub.w	r2, r2, r8
  40727c:	445b      	add	r3, fp
  40727e:	60a2      	str	r2, [r4, #8]
  407280:	6023      	str	r3, [r4, #0]
  407282:	9a01      	ldr	r2, [sp, #4]
  407284:	6893      	ldr	r3, [r2, #8]
  407286:	eba3 030a 	sub.w	r3, r3, sl
  40728a:	44d1      	add	r9, sl
  40728c:	eba7 070a 	sub.w	r7, r7, sl
  407290:	6093      	str	r3, [r2, #8]
  407292:	2b00      	cmp	r3, #0
  407294:	d0c5      	beq.n	407222 <__sfvwrite_r+0x5e>
  407296:	89a3      	ldrh	r3, [r4, #12]
  407298:	2f00      	cmp	r7, #0
  40729a:	d1d8      	bne.n	40724e <__sfvwrite_r+0x8a>
  40729c:	f8d5 9000 	ldr.w	r9, [r5]
  4072a0:	686f      	ldr	r7, [r5, #4]
  4072a2:	3508      	adds	r5, #8
  4072a4:	e7d2      	b.n	40724c <__sfvwrite_r+0x88>
  4072a6:	f8d5 9000 	ldr.w	r9, [r5]
  4072aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4072ae:	3508      	adds	r5, #8
  4072b0:	e79f      	b.n	4071f2 <__sfvwrite_r+0x2e>
  4072b2:	2000      	movs	r0, #0
  4072b4:	4770      	bx	lr
  4072b6:	4621      	mov	r1, r4
  4072b8:	9800      	ldr	r0, [sp, #0]
  4072ba:	f7ff fd1f 	bl	406cfc <_fflush_r>
  4072be:	b370      	cbz	r0, 40731e <__sfvwrite_r+0x15a>
  4072c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4072c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4072c8:	f04f 30ff 	mov.w	r0, #4294967295
  4072cc:	81a3      	strh	r3, [r4, #12]
  4072ce:	b003      	add	sp, #12
  4072d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4072d4:	4681      	mov	r9, r0
  4072d6:	4633      	mov	r3, r6
  4072d8:	464e      	mov	r6, r9
  4072da:	46a8      	mov	r8, r5
  4072dc:	469a      	mov	sl, r3
  4072de:	464d      	mov	r5, r9
  4072e0:	b34e      	cbz	r6, 407336 <__sfvwrite_r+0x172>
  4072e2:	b380      	cbz	r0, 407346 <__sfvwrite_r+0x182>
  4072e4:	6820      	ldr	r0, [r4, #0]
  4072e6:	6923      	ldr	r3, [r4, #16]
  4072e8:	6962      	ldr	r2, [r4, #20]
  4072ea:	45b1      	cmp	r9, r6
  4072ec:	46cb      	mov	fp, r9
  4072ee:	bf28      	it	cs
  4072f0:	46b3      	movcs	fp, r6
  4072f2:	4298      	cmp	r0, r3
  4072f4:	465f      	mov	r7, fp
  4072f6:	d904      	bls.n	407302 <__sfvwrite_r+0x13e>
  4072f8:	68a3      	ldr	r3, [r4, #8]
  4072fa:	4413      	add	r3, r2
  4072fc:	459b      	cmp	fp, r3
  4072fe:	f300 80a6 	bgt.w	40744e <__sfvwrite_r+0x28a>
  407302:	4593      	cmp	fp, r2
  407304:	db4b      	blt.n	40739e <__sfvwrite_r+0x1da>
  407306:	4613      	mov	r3, r2
  407308:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40730a:	69e1      	ldr	r1, [r4, #28]
  40730c:	9800      	ldr	r0, [sp, #0]
  40730e:	462a      	mov	r2, r5
  407310:	47b8      	blx	r7
  407312:	1e07      	subs	r7, r0, #0
  407314:	ddd4      	ble.n	4072c0 <__sfvwrite_r+0xfc>
  407316:	ebb9 0907 	subs.w	r9, r9, r7
  40731a:	d0cc      	beq.n	4072b6 <__sfvwrite_r+0xf2>
  40731c:	2001      	movs	r0, #1
  40731e:	f8da 3008 	ldr.w	r3, [sl, #8]
  407322:	1bdb      	subs	r3, r3, r7
  407324:	443d      	add	r5, r7
  407326:	1bf6      	subs	r6, r6, r7
  407328:	f8ca 3008 	str.w	r3, [sl, #8]
  40732c:	2b00      	cmp	r3, #0
  40732e:	f43f af78 	beq.w	407222 <__sfvwrite_r+0x5e>
  407332:	2e00      	cmp	r6, #0
  407334:	d1d5      	bne.n	4072e2 <__sfvwrite_r+0x11e>
  407336:	f108 0308 	add.w	r3, r8, #8
  40733a:	e913 0060 	ldmdb	r3, {r5, r6}
  40733e:	4698      	mov	r8, r3
  407340:	3308      	adds	r3, #8
  407342:	2e00      	cmp	r6, #0
  407344:	d0f9      	beq.n	40733a <__sfvwrite_r+0x176>
  407346:	4632      	mov	r2, r6
  407348:	210a      	movs	r1, #10
  40734a:	4628      	mov	r0, r5
  40734c:	f000 fc38 	bl	407bc0 <memchr>
  407350:	2800      	cmp	r0, #0
  407352:	f000 80a1 	beq.w	407498 <__sfvwrite_r+0x2d4>
  407356:	3001      	adds	r0, #1
  407358:	eba0 0905 	sub.w	r9, r0, r5
  40735c:	e7c2      	b.n	4072e4 <__sfvwrite_r+0x120>
  40735e:	6820      	ldr	r0, [r4, #0]
  407360:	6923      	ldr	r3, [r4, #16]
  407362:	4298      	cmp	r0, r3
  407364:	d802      	bhi.n	40736c <__sfvwrite_r+0x1a8>
  407366:	6963      	ldr	r3, [r4, #20]
  407368:	429f      	cmp	r7, r3
  40736a:	d25d      	bcs.n	407428 <__sfvwrite_r+0x264>
  40736c:	45b8      	cmp	r8, r7
  40736e:	bf28      	it	cs
  407370:	46b8      	movcs	r8, r7
  407372:	4642      	mov	r2, r8
  407374:	4649      	mov	r1, r9
  407376:	f000 fc73 	bl	407c60 <memmove>
  40737a:	68a3      	ldr	r3, [r4, #8]
  40737c:	6822      	ldr	r2, [r4, #0]
  40737e:	eba3 0308 	sub.w	r3, r3, r8
  407382:	4442      	add	r2, r8
  407384:	60a3      	str	r3, [r4, #8]
  407386:	6022      	str	r2, [r4, #0]
  407388:	b10b      	cbz	r3, 40738e <__sfvwrite_r+0x1ca>
  40738a:	46c2      	mov	sl, r8
  40738c:	e779      	b.n	407282 <__sfvwrite_r+0xbe>
  40738e:	4621      	mov	r1, r4
  407390:	9800      	ldr	r0, [sp, #0]
  407392:	f7ff fcb3 	bl	406cfc <_fflush_r>
  407396:	2800      	cmp	r0, #0
  407398:	d192      	bne.n	4072c0 <__sfvwrite_r+0xfc>
  40739a:	46c2      	mov	sl, r8
  40739c:	e771      	b.n	407282 <__sfvwrite_r+0xbe>
  40739e:	465a      	mov	r2, fp
  4073a0:	4629      	mov	r1, r5
  4073a2:	f000 fc5d 	bl	407c60 <memmove>
  4073a6:	68a2      	ldr	r2, [r4, #8]
  4073a8:	6823      	ldr	r3, [r4, #0]
  4073aa:	eba2 020b 	sub.w	r2, r2, fp
  4073ae:	445b      	add	r3, fp
  4073b0:	60a2      	str	r2, [r4, #8]
  4073b2:	6023      	str	r3, [r4, #0]
  4073b4:	e7af      	b.n	407316 <__sfvwrite_r+0x152>
  4073b6:	6820      	ldr	r0, [r4, #0]
  4073b8:	46b8      	mov	r8, r7
  4073ba:	46ba      	mov	sl, r7
  4073bc:	46bb      	mov	fp, r7
  4073be:	e755      	b.n	40726c <__sfvwrite_r+0xa8>
  4073c0:	6962      	ldr	r2, [r4, #20]
  4073c2:	6820      	ldr	r0, [r4, #0]
  4073c4:	6921      	ldr	r1, [r4, #16]
  4073c6:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4073ca:	eba0 0a01 	sub.w	sl, r0, r1
  4073ce:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4073d2:	f10a 0001 	add.w	r0, sl, #1
  4073d6:	ea4f 0868 	mov.w	r8, r8, asr #1
  4073da:	4438      	add	r0, r7
  4073dc:	4540      	cmp	r0, r8
  4073de:	4642      	mov	r2, r8
  4073e0:	bf84      	itt	hi
  4073e2:	4680      	movhi	r8, r0
  4073e4:	4642      	movhi	r2, r8
  4073e6:	055b      	lsls	r3, r3, #21
  4073e8:	d544      	bpl.n	407474 <__sfvwrite_r+0x2b0>
  4073ea:	4611      	mov	r1, r2
  4073ec:	9800      	ldr	r0, [sp, #0]
  4073ee:	f000 f921 	bl	407634 <_malloc_r>
  4073f2:	4683      	mov	fp, r0
  4073f4:	2800      	cmp	r0, #0
  4073f6:	d055      	beq.n	4074a4 <__sfvwrite_r+0x2e0>
  4073f8:	4652      	mov	r2, sl
  4073fa:	6921      	ldr	r1, [r4, #16]
  4073fc:	f7fe f9e8 	bl	4057d0 <memcpy>
  407400:	89a3      	ldrh	r3, [r4, #12]
  407402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40740a:	81a3      	strh	r3, [r4, #12]
  40740c:	eb0b 000a 	add.w	r0, fp, sl
  407410:	eba8 030a 	sub.w	r3, r8, sl
  407414:	f8c4 b010 	str.w	fp, [r4, #16]
  407418:	f8c4 8014 	str.w	r8, [r4, #20]
  40741c:	6020      	str	r0, [r4, #0]
  40741e:	60a3      	str	r3, [r4, #8]
  407420:	46b8      	mov	r8, r7
  407422:	46ba      	mov	sl, r7
  407424:	46bb      	mov	fp, r7
  407426:	e721      	b.n	40726c <__sfvwrite_r+0xa8>
  407428:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40742c:	42b9      	cmp	r1, r7
  40742e:	bf28      	it	cs
  407430:	4639      	movcs	r1, r7
  407432:	464a      	mov	r2, r9
  407434:	fb91 f1f3 	sdiv	r1, r1, r3
  407438:	9800      	ldr	r0, [sp, #0]
  40743a:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40743c:	fb03 f301 	mul.w	r3, r3, r1
  407440:	69e1      	ldr	r1, [r4, #28]
  407442:	47b0      	blx	r6
  407444:	f1b0 0a00 	subs.w	sl, r0, #0
  407448:	f73f af1b 	bgt.w	407282 <__sfvwrite_r+0xbe>
  40744c:	e738      	b.n	4072c0 <__sfvwrite_r+0xfc>
  40744e:	461a      	mov	r2, r3
  407450:	4629      	mov	r1, r5
  407452:	9301      	str	r3, [sp, #4]
  407454:	f000 fc04 	bl	407c60 <memmove>
  407458:	6822      	ldr	r2, [r4, #0]
  40745a:	9b01      	ldr	r3, [sp, #4]
  40745c:	9800      	ldr	r0, [sp, #0]
  40745e:	441a      	add	r2, r3
  407460:	6022      	str	r2, [r4, #0]
  407462:	4621      	mov	r1, r4
  407464:	f7ff fc4a 	bl	406cfc <_fflush_r>
  407468:	9b01      	ldr	r3, [sp, #4]
  40746a:	2800      	cmp	r0, #0
  40746c:	f47f af28 	bne.w	4072c0 <__sfvwrite_r+0xfc>
  407470:	461f      	mov	r7, r3
  407472:	e750      	b.n	407316 <__sfvwrite_r+0x152>
  407474:	9800      	ldr	r0, [sp, #0]
  407476:	f000 fc63 	bl	407d40 <_realloc_r>
  40747a:	4683      	mov	fp, r0
  40747c:	2800      	cmp	r0, #0
  40747e:	d1c5      	bne.n	40740c <__sfvwrite_r+0x248>
  407480:	9d00      	ldr	r5, [sp, #0]
  407482:	6921      	ldr	r1, [r4, #16]
  407484:	4628      	mov	r0, r5
  407486:	f7ff fdb7 	bl	406ff8 <_free_r>
  40748a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40748e:	220c      	movs	r2, #12
  407490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407494:	602a      	str	r2, [r5, #0]
  407496:	e715      	b.n	4072c4 <__sfvwrite_r+0x100>
  407498:	f106 0901 	add.w	r9, r6, #1
  40749c:	e722      	b.n	4072e4 <__sfvwrite_r+0x120>
  40749e:	f04f 30ff 	mov.w	r0, #4294967295
  4074a2:	e6bf      	b.n	407224 <__sfvwrite_r+0x60>
  4074a4:	9a00      	ldr	r2, [sp, #0]
  4074a6:	230c      	movs	r3, #12
  4074a8:	6013      	str	r3, [r2, #0]
  4074aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4074ae:	e709      	b.n	4072c4 <__sfvwrite_r+0x100>
  4074b0:	7ffffc00 	.word	0x7ffffc00

004074b4 <_fwalk_reent>:
  4074b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4074b8:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4074bc:	d01f      	beq.n	4074fe <_fwalk_reent+0x4a>
  4074be:	4688      	mov	r8, r1
  4074c0:	4606      	mov	r6, r0
  4074c2:	f04f 0900 	mov.w	r9, #0
  4074c6:	687d      	ldr	r5, [r7, #4]
  4074c8:	68bc      	ldr	r4, [r7, #8]
  4074ca:	3d01      	subs	r5, #1
  4074cc:	d411      	bmi.n	4074f2 <_fwalk_reent+0x3e>
  4074ce:	89a3      	ldrh	r3, [r4, #12]
  4074d0:	2b01      	cmp	r3, #1
  4074d2:	f105 35ff 	add.w	r5, r5, #4294967295
  4074d6:	d908      	bls.n	4074ea <_fwalk_reent+0x36>
  4074d8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4074dc:	3301      	adds	r3, #1
  4074de:	4621      	mov	r1, r4
  4074e0:	4630      	mov	r0, r6
  4074e2:	d002      	beq.n	4074ea <_fwalk_reent+0x36>
  4074e4:	47c0      	blx	r8
  4074e6:	ea49 0900 	orr.w	r9, r9, r0
  4074ea:	1c6b      	adds	r3, r5, #1
  4074ec:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4074f0:	d1ed      	bne.n	4074ce <_fwalk_reent+0x1a>
  4074f2:	683f      	ldr	r7, [r7, #0]
  4074f4:	2f00      	cmp	r7, #0
  4074f6:	d1e6      	bne.n	4074c6 <_fwalk_reent+0x12>
  4074f8:	4648      	mov	r0, r9
  4074fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4074fe:	46b9      	mov	r9, r7
  407500:	4648      	mov	r0, r9
  407502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407506:	bf00      	nop

00407508 <__locale_mb_cur_max>:
  407508:	4b04      	ldr	r3, [pc, #16]	; (40751c <__locale_mb_cur_max+0x14>)
  40750a:	4a05      	ldr	r2, [pc, #20]	; (407520 <__locale_mb_cur_max+0x18>)
  40750c:	681b      	ldr	r3, [r3, #0]
  40750e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  407510:	2b00      	cmp	r3, #0
  407512:	bf08      	it	eq
  407514:	4613      	moveq	r3, r2
  407516:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40751a:	4770      	bx	lr
  40751c:	2040003c 	.word	0x2040003c
  407520:	2040046c 	.word	0x2040046c

00407524 <__retarget_lock_init_recursive>:
  407524:	4770      	bx	lr
  407526:	bf00      	nop

00407528 <__retarget_lock_close_recursive>:
  407528:	4770      	bx	lr
  40752a:	bf00      	nop

0040752c <__retarget_lock_acquire_recursive>:
  40752c:	4770      	bx	lr
  40752e:	bf00      	nop

00407530 <__retarget_lock_release_recursive>:
  407530:	4770      	bx	lr
  407532:	bf00      	nop

00407534 <__swhatbuf_r>:
  407534:	b570      	push	{r4, r5, r6, lr}
  407536:	460c      	mov	r4, r1
  407538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40753c:	2900      	cmp	r1, #0
  40753e:	b090      	sub	sp, #64	; 0x40
  407540:	4615      	mov	r5, r2
  407542:	461e      	mov	r6, r3
  407544:	db14      	blt.n	407570 <__swhatbuf_r+0x3c>
  407546:	aa01      	add	r2, sp, #4
  407548:	f000 ff72 	bl	408430 <_fstat_r>
  40754c:	2800      	cmp	r0, #0
  40754e:	db0f      	blt.n	407570 <__swhatbuf_r+0x3c>
  407550:	9a02      	ldr	r2, [sp, #8]
  407552:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  407556:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40755a:	fab2 f282 	clz	r2, r2
  40755e:	0952      	lsrs	r2, r2, #5
  407560:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407564:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407568:	6032      	str	r2, [r6, #0]
  40756a:	602b      	str	r3, [r5, #0]
  40756c:	b010      	add	sp, #64	; 0x40
  40756e:	bd70      	pop	{r4, r5, r6, pc}
  407570:	89a2      	ldrh	r2, [r4, #12]
  407572:	2300      	movs	r3, #0
  407574:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407578:	6033      	str	r3, [r6, #0]
  40757a:	d004      	beq.n	407586 <__swhatbuf_r+0x52>
  40757c:	2240      	movs	r2, #64	; 0x40
  40757e:	4618      	mov	r0, r3
  407580:	602a      	str	r2, [r5, #0]
  407582:	b010      	add	sp, #64	; 0x40
  407584:	bd70      	pop	{r4, r5, r6, pc}
  407586:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40758a:	602b      	str	r3, [r5, #0]
  40758c:	b010      	add	sp, #64	; 0x40
  40758e:	bd70      	pop	{r4, r5, r6, pc}

00407590 <__smakebuf_r>:
  407590:	898a      	ldrh	r2, [r1, #12]
  407592:	0792      	lsls	r2, r2, #30
  407594:	460b      	mov	r3, r1
  407596:	d506      	bpl.n	4075a6 <__smakebuf_r+0x16>
  407598:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40759c:	2101      	movs	r1, #1
  40759e:	601a      	str	r2, [r3, #0]
  4075a0:	611a      	str	r2, [r3, #16]
  4075a2:	6159      	str	r1, [r3, #20]
  4075a4:	4770      	bx	lr
  4075a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4075a8:	b083      	sub	sp, #12
  4075aa:	ab01      	add	r3, sp, #4
  4075ac:	466a      	mov	r2, sp
  4075ae:	460c      	mov	r4, r1
  4075b0:	4606      	mov	r6, r0
  4075b2:	f7ff ffbf 	bl	407534 <__swhatbuf_r>
  4075b6:	9900      	ldr	r1, [sp, #0]
  4075b8:	4605      	mov	r5, r0
  4075ba:	4630      	mov	r0, r6
  4075bc:	f000 f83a 	bl	407634 <_malloc_r>
  4075c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4075c4:	b1d8      	cbz	r0, 4075fe <__smakebuf_r+0x6e>
  4075c6:	9a01      	ldr	r2, [sp, #4]
  4075c8:	4f15      	ldr	r7, [pc, #84]	; (407620 <__smakebuf_r+0x90>)
  4075ca:	9900      	ldr	r1, [sp, #0]
  4075cc:	63f7      	str	r7, [r6, #60]	; 0x3c
  4075ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4075d2:	81a3      	strh	r3, [r4, #12]
  4075d4:	6020      	str	r0, [r4, #0]
  4075d6:	6120      	str	r0, [r4, #16]
  4075d8:	6161      	str	r1, [r4, #20]
  4075da:	b91a      	cbnz	r2, 4075e4 <__smakebuf_r+0x54>
  4075dc:	432b      	orrs	r3, r5
  4075de:	81a3      	strh	r3, [r4, #12]
  4075e0:	b003      	add	sp, #12
  4075e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4075e4:	4630      	mov	r0, r6
  4075e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4075ea:	f000 ff35 	bl	408458 <_isatty_r>
  4075ee:	b1a0      	cbz	r0, 40761a <__smakebuf_r+0x8a>
  4075f0:	89a3      	ldrh	r3, [r4, #12]
  4075f2:	f023 0303 	bic.w	r3, r3, #3
  4075f6:	f043 0301 	orr.w	r3, r3, #1
  4075fa:	b21b      	sxth	r3, r3
  4075fc:	e7ee      	b.n	4075dc <__smakebuf_r+0x4c>
  4075fe:	059a      	lsls	r2, r3, #22
  407600:	d4ee      	bmi.n	4075e0 <__smakebuf_r+0x50>
  407602:	f023 0303 	bic.w	r3, r3, #3
  407606:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40760a:	f043 0302 	orr.w	r3, r3, #2
  40760e:	2101      	movs	r1, #1
  407610:	81a3      	strh	r3, [r4, #12]
  407612:	6022      	str	r2, [r4, #0]
  407614:	6122      	str	r2, [r4, #16]
  407616:	6161      	str	r1, [r4, #20]
  407618:	e7e2      	b.n	4075e0 <__smakebuf_r+0x50>
  40761a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40761e:	e7dd      	b.n	4075dc <__smakebuf_r+0x4c>
  407620:	00406d51 	.word	0x00406d51

00407624 <malloc>:
  407624:	4b02      	ldr	r3, [pc, #8]	; (407630 <malloc+0xc>)
  407626:	4601      	mov	r1, r0
  407628:	6818      	ldr	r0, [r3, #0]
  40762a:	f000 b803 	b.w	407634 <_malloc_r>
  40762e:	bf00      	nop
  407630:	2040003c 	.word	0x2040003c

00407634 <_malloc_r>:
  407634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407638:	f101 060b 	add.w	r6, r1, #11
  40763c:	2e16      	cmp	r6, #22
  40763e:	b083      	sub	sp, #12
  407640:	4605      	mov	r5, r0
  407642:	f240 809e 	bls.w	407782 <_malloc_r+0x14e>
  407646:	f036 0607 	bics.w	r6, r6, #7
  40764a:	f100 80bd 	bmi.w	4077c8 <_malloc_r+0x194>
  40764e:	42b1      	cmp	r1, r6
  407650:	f200 80ba 	bhi.w	4077c8 <_malloc_r+0x194>
  407654:	f000 fb68 	bl	407d28 <__malloc_lock>
  407658:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40765c:	f0c0 8293 	bcc.w	407b86 <_malloc_r+0x552>
  407660:	0a73      	lsrs	r3, r6, #9
  407662:	f000 80b8 	beq.w	4077d6 <_malloc_r+0x1a2>
  407666:	2b04      	cmp	r3, #4
  407668:	f200 8179 	bhi.w	40795e <_malloc_r+0x32a>
  40766c:	09b3      	lsrs	r3, r6, #6
  40766e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  407672:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  407676:	00c3      	lsls	r3, r0, #3
  407678:	4fbf      	ldr	r7, [pc, #764]	; (407978 <_malloc_r+0x344>)
  40767a:	443b      	add	r3, r7
  40767c:	f1a3 0108 	sub.w	r1, r3, #8
  407680:	685c      	ldr	r4, [r3, #4]
  407682:	42a1      	cmp	r1, r4
  407684:	d106      	bne.n	407694 <_malloc_r+0x60>
  407686:	e00c      	b.n	4076a2 <_malloc_r+0x6e>
  407688:	2a00      	cmp	r2, #0
  40768a:	f280 80aa 	bge.w	4077e2 <_malloc_r+0x1ae>
  40768e:	68e4      	ldr	r4, [r4, #12]
  407690:	42a1      	cmp	r1, r4
  407692:	d006      	beq.n	4076a2 <_malloc_r+0x6e>
  407694:	6863      	ldr	r3, [r4, #4]
  407696:	f023 0303 	bic.w	r3, r3, #3
  40769a:	1b9a      	subs	r2, r3, r6
  40769c:	2a0f      	cmp	r2, #15
  40769e:	ddf3      	ble.n	407688 <_malloc_r+0x54>
  4076a0:	4670      	mov	r0, lr
  4076a2:	693c      	ldr	r4, [r7, #16]
  4076a4:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40798c <_malloc_r+0x358>
  4076a8:	4574      	cmp	r4, lr
  4076aa:	f000 81ab 	beq.w	407a04 <_malloc_r+0x3d0>
  4076ae:	6863      	ldr	r3, [r4, #4]
  4076b0:	f023 0303 	bic.w	r3, r3, #3
  4076b4:	1b9a      	subs	r2, r3, r6
  4076b6:	2a0f      	cmp	r2, #15
  4076b8:	f300 8190 	bgt.w	4079dc <_malloc_r+0x3a8>
  4076bc:	2a00      	cmp	r2, #0
  4076be:	f8c7 e014 	str.w	lr, [r7, #20]
  4076c2:	f8c7 e010 	str.w	lr, [r7, #16]
  4076c6:	f280 809d 	bge.w	407804 <_malloc_r+0x1d0>
  4076ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4076ce:	f080 8161 	bcs.w	407994 <_malloc_r+0x360>
  4076d2:	08db      	lsrs	r3, r3, #3
  4076d4:	f103 0c01 	add.w	ip, r3, #1
  4076d8:	1099      	asrs	r1, r3, #2
  4076da:	687a      	ldr	r2, [r7, #4]
  4076dc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4076e0:	f8c4 8008 	str.w	r8, [r4, #8]
  4076e4:	2301      	movs	r3, #1
  4076e6:	408b      	lsls	r3, r1
  4076e8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4076ec:	4313      	orrs	r3, r2
  4076ee:	3908      	subs	r1, #8
  4076f0:	60e1      	str	r1, [r4, #12]
  4076f2:	607b      	str	r3, [r7, #4]
  4076f4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4076f8:	f8c8 400c 	str.w	r4, [r8, #12]
  4076fc:	1082      	asrs	r2, r0, #2
  4076fe:	2401      	movs	r4, #1
  407700:	4094      	lsls	r4, r2
  407702:	429c      	cmp	r4, r3
  407704:	f200 808b 	bhi.w	40781e <_malloc_r+0x1ea>
  407708:	421c      	tst	r4, r3
  40770a:	d106      	bne.n	40771a <_malloc_r+0xe6>
  40770c:	f020 0003 	bic.w	r0, r0, #3
  407710:	0064      	lsls	r4, r4, #1
  407712:	421c      	tst	r4, r3
  407714:	f100 0004 	add.w	r0, r0, #4
  407718:	d0fa      	beq.n	407710 <_malloc_r+0xdc>
  40771a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40771e:	46cc      	mov	ip, r9
  407720:	4680      	mov	r8, r0
  407722:	f8dc 300c 	ldr.w	r3, [ip, #12]
  407726:	459c      	cmp	ip, r3
  407728:	d107      	bne.n	40773a <_malloc_r+0x106>
  40772a:	e16d      	b.n	407a08 <_malloc_r+0x3d4>
  40772c:	2a00      	cmp	r2, #0
  40772e:	f280 817b 	bge.w	407a28 <_malloc_r+0x3f4>
  407732:	68db      	ldr	r3, [r3, #12]
  407734:	459c      	cmp	ip, r3
  407736:	f000 8167 	beq.w	407a08 <_malloc_r+0x3d4>
  40773a:	6859      	ldr	r1, [r3, #4]
  40773c:	f021 0103 	bic.w	r1, r1, #3
  407740:	1b8a      	subs	r2, r1, r6
  407742:	2a0f      	cmp	r2, #15
  407744:	ddf2      	ble.n	40772c <_malloc_r+0xf8>
  407746:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40774a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40774e:	9300      	str	r3, [sp, #0]
  407750:	199c      	adds	r4, r3, r6
  407752:	4628      	mov	r0, r5
  407754:	f046 0601 	orr.w	r6, r6, #1
  407758:	f042 0501 	orr.w	r5, r2, #1
  40775c:	605e      	str	r6, [r3, #4]
  40775e:	f8c8 c00c 	str.w	ip, [r8, #12]
  407762:	f8cc 8008 	str.w	r8, [ip, #8]
  407766:	617c      	str	r4, [r7, #20]
  407768:	613c      	str	r4, [r7, #16]
  40776a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40776e:	f8c4 e008 	str.w	lr, [r4, #8]
  407772:	6065      	str	r5, [r4, #4]
  407774:	505a      	str	r2, [r3, r1]
  407776:	f000 fadd 	bl	407d34 <__malloc_unlock>
  40777a:	9b00      	ldr	r3, [sp, #0]
  40777c:	f103 0408 	add.w	r4, r3, #8
  407780:	e01e      	b.n	4077c0 <_malloc_r+0x18c>
  407782:	2910      	cmp	r1, #16
  407784:	d820      	bhi.n	4077c8 <_malloc_r+0x194>
  407786:	f000 facf 	bl	407d28 <__malloc_lock>
  40778a:	2610      	movs	r6, #16
  40778c:	2318      	movs	r3, #24
  40778e:	2002      	movs	r0, #2
  407790:	4f79      	ldr	r7, [pc, #484]	; (407978 <_malloc_r+0x344>)
  407792:	443b      	add	r3, r7
  407794:	f1a3 0208 	sub.w	r2, r3, #8
  407798:	685c      	ldr	r4, [r3, #4]
  40779a:	4294      	cmp	r4, r2
  40779c:	f000 813d 	beq.w	407a1a <_malloc_r+0x3e6>
  4077a0:	6863      	ldr	r3, [r4, #4]
  4077a2:	68e1      	ldr	r1, [r4, #12]
  4077a4:	68a6      	ldr	r6, [r4, #8]
  4077a6:	f023 0303 	bic.w	r3, r3, #3
  4077aa:	4423      	add	r3, r4
  4077ac:	4628      	mov	r0, r5
  4077ae:	685a      	ldr	r2, [r3, #4]
  4077b0:	60f1      	str	r1, [r6, #12]
  4077b2:	f042 0201 	orr.w	r2, r2, #1
  4077b6:	608e      	str	r6, [r1, #8]
  4077b8:	605a      	str	r2, [r3, #4]
  4077ba:	f000 fabb 	bl	407d34 <__malloc_unlock>
  4077be:	3408      	adds	r4, #8
  4077c0:	4620      	mov	r0, r4
  4077c2:	b003      	add	sp, #12
  4077c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4077c8:	2400      	movs	r4, #0
  4077ca:	230c      	movs	r3, #12
  4077cc:	4620      	mov	r0, r4
  4077ce:	602b      	str	r3, [r5, #0]
  4077d0:	b003      	add	sp, #12
  4077d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4077d6:	2040      	movs	r0, #64	; 0x40
  4077d8:	f44f 7300 	mov.w	r3, #512	; 0x200
  4077dc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4077e0:	e74a      	b.n	407678 <_malloc_r+0x44>
  4077e2:	4423      	add	r3, r4
  4077e4:	68e1      	ldr	r1, [r4, #12]
  4077e6:	685a      	ldr	r2, [r3, #4]
  4077e8:	68a6      	ldr	r6, [r4, #8]
  4077ea:	f042 0201 	orr.w	r2, r2, #1
  4077ee:	60f1      	str	r1, [r6, #12]
  4077f0:	4628      	mov	r0, r5
  4077f2:	608e      	str	r6, [r1, #8]
  4077f4:	605a      	str	r2, [r3, #4]
  4077f6:	f000 fa9d 	bl	407d34 <__malloc_unlock>
  4077fa:	3408      	adds	r4, #8
  4077fc:	4620      	mov	r0, r4
  4077fe:	b003      	add	sp, #12
  407800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407804:	4423      	add	r3, r4
  407806:	4628      	mov	r0, r5
  407808:	685a      	ldr	r2, [r3, #4]
  40780a:	f042 0201 	orr.w	r2, r2, #1
  40780e:	605a      	str	r2, [r3, #4]
  407810:	f000 fa90 	bl	407d34 <__malloc_unlock>
  407814:	3408      	adds	r4, #8
  407816:	4620      	mov	r0, r4
  407818:	b003      	add	sp, #12
  40781a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40781e:	68bc      	ldr	r4, [r7, #8]
  407820:	6863      	ldr	r3, [r4, #4]
  407822:	f023 0803 	bic.w	r8, r3, #3
  407826:	45b0      	cmp	r8, r6
  407828:	d304      	bcc.n	407834 <_malloc_r+0x200>
  40782a:	eba8 0306 	sub.w	r3, r8, r6
  40782e:	2b0f      	cmp	r3, #15
  407830:	f300 8085 	bgt.w	40793e <_malloc_r+0x30a>
  407834:	f8df 9158 	ldr.w	r9, [pc, #344]	; 407990 <_malloc_r+0x35c>
  407838:	4b50      	ldr	r3, [pc, #320]	; (40797c <_malloc_r+0x348>)
  40783a:	f8d9 2000 	ldr.w	r2, [r9]
  40783e:	681b      	ldr	r3, [r3, #0]
  407840:	3201      	adds	r2, #1
  407842:	4433      	add	r3, r6
  407844:	eb04 0a08 	add.w	sl, r4, r8
  407848:	f000 8155 	beq.w	407af6 <_malloc_r+0x4c2>
  40784c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  407850:	330f      	adds	r3, #15
  407852:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  407856:	f02b 0b0f 	bic.w	fp, fp, #15
  40785a:	4659      	mov	r1, fp
  40785c:	4628      	mov	r0, r5
  40785e:	f000 fc15 	bl	40808c <_sbrk_r>
  407862:	1c41      	adds	r1, r0, #1
  407864:	4602      	mov	r2, r0
  407866:	f000 80fc 	beq.w	407a62 <_malloc_r+0x42e>
  40786a:	4582      	cmp	sl, r0
  40786c:	f200 80f7 	bhi.w	407a5e <_malloc_r+0x42a>
  407870:	4b43      	ldr	r3, [pc, #268]	; (407980 <_malloc_r+0x34c>)
  407872:	6819      	ldr	r1, [r3, #0]
  407874:	4459      	add	r1, fp
  407876:	6019      	str	r1, [r3, #0]
  407878:	f000 814d 	beq.w	407b16 <_malloc_r+0x4e2>
  40787c:	f8d9 0000 	ldr.w	r0, [r9]
  407880:	3001      	adds	r0, #1
  407882:	bf1b      	ittet	ne
  407884:	eba2 0a0a 	subne.w	sl, r2, sl
  407888:	4451      	addne	r1, sl
  40788a:	f8c9 2000 	streq.w	r2, [r9]
  40788e:	6019      	strne	r1, [r3, #0]
  407890:	f012 0107 	ands.w	r1, r2, #7
  407894:	f000 8115 	beq.w	407ac2 <_malloc_r+0x48e>
  407898:	f1c1 0008 	rsb	r0, r1, #8
  40789c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4078a0:	4402      	add	r2, r0
  4078a2:	3108      	adds	r1, #8
  4078a4:	eb02 090b 	add.w	r9, r2, fp
  4078a8:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4078ac:	eba1 0909 	sub.w	r9, r1, r9
  4078b0:	4649      	mov	r1, r9
  4078b2:	4628      	mov	r0, r5
  4078b4:	9301      	str	r3, [sp, #4]
  4078b6:	9200      	str	r2, [sp, #0]
  4078b8:	f000 fbe8 	bl	40808c <_sbrk_r>
  4078bc:	1c43      	adds	r3, r0, #1
  4078be:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4078c2:	f000 8143 	beq.w	407b4c <_malloc_r+0x518>
  4078c6:	1a80      	subs	r0, r0, r2
  4078c8:	4448      	add	r0, r9
  4078ca:	f040 0001 	orr.w	r0, r0, #1
  4078ce:	6819      	ldr	r1, [r3, #0]
  4078d0:	60ba      	str	r2, [r7, #8]
  4078d2:	4449      	add	r1, r9
  4078d4:	42bc      	cmp	r4, r7
  4078d6:	6050      	str	r0, [r2, #4]
  4078d8:	6019      	str	r1, [r3, #0]
  4078da:	d017      	beq.n	40790c <_malloc_r+0x2d8>
  4078dc:	f1b8 0f0f 	cmp.w	r8, #15
  4078e0:	f240 80fb 	bls.w	407ada <_malloc_r+0x4a6>
  4078e4:	6860      	ldr	r0, [r4, #4]
  4078e6:	f1a8 020c 	sub.w	r2, r8, #12
  4078ea:	f022 0207 	bic.w	r2, r2, #7
  4078ee:	eb04 0e02 	add.w	lr, r4, r2
  4078f2:	f000 0001 	and.w	r0, r0, #1
  4078f6:	f04f 0c05 	mov.w	ip, #5
  4078fa:	4310      	orrs	r0, r2
  4078fc:	2a0f      	cmp	r2, #15
  4078fe:	6060      	str	r0, [r4, #4]
  407900:	f8ce c004 	str.w	ip, [lr, #4]
  407904:	f8ce c008 	str.w	ip, [lr, #8]
  407908:	f200 8117 	bhi.w	407b3a <_malloc_r+0x506>
  40790c:	4b1d      	ldr	r3, [pc, #116]	; (407984 <_malloc_r+0x350>)
  40790e:	68bc      	ldr	r4, [r7, #8]
  407910:	681a      	ldr	r2, [r3, #0]
  407912:	4291      	cmp	r1, r2
  407914:	bf88      	it	hi
  407916:	6019      	strhi	r1, [r3, #0]
  407918:	4b1b      	ldr	r3, [pc, #108]	; (407988 <_malloc_r+0x354>)
  40791a:	681a      	ldr	r2, [r3, #0]
  40791c:	4291      	cmp	r1, r2
  40791e:	6862      	ldr	r2, [r4, #4]
  407920:	bf88      	it	hi
  407922:	6019      	strhi	r1, [r3, #0]
  407924:	f022 0203 	bic.w	r2, r2, #3
  407928:	4296      	cmp	r6, r2
  40792a:	eba2 0306 	sub.w	r3, r2, r6
  40792e:	d801      	bhi.n	407934 <_malloc_r+0x300>
  407930:	2b0f      	cmp	r3, #15
  407932:	dc04      	bgt.n	40793e <_malloc_r+0x30a>
  407934:	4628      	mov	r0, r5
  407936:	f000 f9fd 	bl	407d34 <__malloc_unlock>
  40793a:	2400      	movs	r4, #0
  40793c:	e740      	b.n	4077c0 <_malloc_r+0x18c>
  40793e:	19a2      	adds	r2, r4, r6
  407940:	f043 0301 	orr.w	r3, r3, #1
  407944:	f046 0601 	orr.w	r6, r6, #1
  407948:	6066      	str	r6, [r4, #4]
  40794a:	4628      	mov	r0, r5
  40794c:	60ba      	str	r2, [r7, #8]
  40794e:	6053      	str	r3, [r2, #4]
  407950:	f000 f9f0 	bl	407d34 <__malloc_unlock>
  407954:	3408      	adds	r4, #8
  407956:	4620      	mov	r0, r4
  407958:	b003      	add	sp, #12
  40795a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40795e:	2b14      	cmp	r3, #20
  407960:	d971      	bls.n	407a46 <_malloc_r+0x412>
  407962:	2b54      	cmp	r3, #84	; 0x54
  407964:	f200 80a3 	bhi.w	407aae <_malloc_r+0x47a>
  407968:	0b33      	lsrs	r3, r6, #12
  40796a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40796e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  407972:	00c3      	lsls	r3, r0, #3
  407974:	e680      	b.n	407678 <_malloc_r+0x44>
  407976:	bf00      	nop
  407978:	204005d8 	.word	0x204005d8
  40797c:	204203c4 	.word	0x204203c4
  407980:	20420394 	.word	0x20420394
  407984:	204203bc 	.word	0x204203bc
  407988:	204203c0 	.word	0x204203c0
  40798c:	204005e0 	.word	0x204005e0
  407990:	204009e0 	.word	0x204009e0
  407994:	0a5a      	lsrs	r2, r3, #9
  407996:	2a04      	cmp	r2, #4
  407998:	d95b      	bls.n	407a52 <_malloc_r+0x41e>
  40799a:	2a14      	cmp	r2, #20
  40799c:	f200 80ae 	bhi.w	407afc <_malloc_r+0x4c8>
  4079a0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4079a4:	00c9      	lsls	r1, r1, #3
  4079a6:	325b      	adds	r2, #91	; 0x5b
  4079a8:	eb07 0c01 	add.w	ip, r7, r1
  4079ac:	5879      	ldr	r1, [r7, r1]
  4079ae:	f1ac 0c08 	sub.w	ip, ip, #8
  4079b2:	458c      	cmp	ip, r1
  4079b4:	f000 8088 	beq.w	407ac8 <_malloc_r+0x494>
  4079b8:	684a      	ldr	r2, [r1, #4]
  4079ba:	f022 0203 	bic.w	r2, r2, #3
  4079be:	4293      	cmp	r3, r2
  4079c0:	d273      	bcs.n	407aaa <_malloc_r+0x476>
  4079c2:	6889      	ldr	r1, [r1, #8]
  4079c4:	458c      	cmp	ip, r1
  4079c6:	d1f7      	bne.n	4079b8 <_malloc_r+0x384>
  4079c8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4079cc:	687b      	ldr	r3, [r7, #4]
  4079ce:	60e2      	str	r2, [r4, #12]
  4079d0:	f8c4 c008 	str.w	ip, [r4, #8]
  4079d4:	6094      	str	r4, [r2, #8]
  4079d6:	f8cc 400c 	str.w	r4, [ip, #12]
  4079da:	e68f      	b.n	4076fc <_malloc_r+0xc8>
  4079dc:	19a1      	adds	r1, r4, r6
  4079de:	f046 0c01 	orr.w	ip, r6, #1
  4079e2:	f042 0601 	orr.w	r6, r2, #1
  4079e6:	f8c4 c004 	str.w	ip, [r4, #4]
  4079ea:	4628      	mov	r0, r5
  4079ec:	6179      	str	r1, [r7, #20]
  4079ee:	6139      	str	r1, [r7, #16]
  4079f0:	f8c1 e00c 	str.w	lr, [r1, #12]
  4079f4:	f8c1 e008 	str.w	lr, [r1, #8]
  4079f8:	604e      	str	r6, [r1, #4]
  4079fa:	50e2      	str	r2, [r4, r3]
  4079fc:	f000 f99a 	bl	407d34 <__malloc_unlock>
  407a00:	3408      	adds	r4, #8
  407a02:	e6dd      	b.n	4077c0 <_malloc_r+0x18c>
  407a04:	687b      	ldr	r3, [r7, #4]
  407a06:	e679      	b.n	4076fc <_malloc_r+0xc8>
  407a08:	f108 0801 	add.w	r8, r8, #1
  407a0c:	f018 0f03 	tst.w	r8, #3
  407a10:	f10c 0c08 	add.w	ip, ip, #8
  407a14:	f47f ae85 	bne.w	407722 <_malloc_r+0xee>
  407a18:	e02d      	b.n	407a76 <_malloc_r+0x442>
  407a1a:	68dc      	ldr	r4, [r3, #12]
  407a1c:	42a3      	cmp	r3, r4
  407a1e:	bf08      	it	eq
  407a20:	3002      	addeq	r0, #2
  407a22:	f43f ae3e 	beq.w	4076a2 <_malloc_r+0x6e>
  407a26:	e6bb      	b.n	4077a0 <_malloc_r+0x16c>
  407a28:	4419      	add	r1, r3
  407a2a:	461c      	mov	r4, r3
  407a2c:	684a      	ldr	r2, [r1, #4]
  407a2e:	68db      	ldr	r3, [r3, #12]
  407a30:	f854 6f08 	ldr.w	r6, [r4, #8]!
  407a34:	f042 0201 	orr.w	r2, r2, #1
  407a38:	604a      	str	r2, [r1, #4]
  407a3a:	4628      	mov	r0, r5
  407a3c:	60f3      	str	r3, [r6, #12]
  407a3e:	609e      	str	r6, [r3, #8]
  407a40:	f000 f978 	bl	407d34 <__malloc_unlock>
  407a44:	e6bc      	b.n	4077c0 <_malloc_r+0x18c>
  407a46:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  407a4a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  407a4e:	00c3      	lsls	r3, r0, #3
  407a50:	e612      	b.n	407678 <_malloc_r+0x44>
  407a52:	099a      	lsrs	r2, r3, #6
  407a54:	f102 0139 	add.w	r1, r2, #57	; 0x39
  407a58:	00c9      	lsls	r1, r1, #3
  407a5a:	3238      	adds	r2, #56	; 0x38
  407a5c:	e7a4      	b.n	4079a8 <_malloc_r+0x374>
  407a5e:	42bc      	cmp	r4, r7
  407a60:	d054      	beq.n	407b0c <_malloc_r+0x4d8>
  407a62:	68bc      	ldr	r4, [r7, #8]
  407a64:	6862      	ldr	r2, [r4, #4]
  407a66:	f022 0203 	bic.w	r2, r2, #3
  407a6a:	e75d      	b.n	407928 <_malloc_r+0x2f4>
  407a6c:	f859 3908 	ldr.w	r3, [r9], #-8
  407a70:	4599      	cmp	r9, r3
  407a72:	f040 8086 	bne.w	407b82 <_malloc_r+0x54e>
  407a76:	f010 0f03 	tst.w	r0, #3
  407a7a:	f100 30ff 	add.w	r0, r0, #4294967295
  407a7e:	d1f5      	bne.n	407a6c <_malloc_r+0x438>
  407a80:	687b      	ldr	r3, [r7, #4]
  407a82:	ea23 0304 	bic.w	r3, r3, r4
  407a86:	607b      	str	r3, [r7, #4]
  407a88:	0064      	lsls	r4, r4, #1
  407a8a:	429c      	cmp	r4, r3
  407a8c:	f63f aec7 	bhi.w	40781e <_malloc_r+0x1ea>
  407a90:	2c00      	cmp	r4, #0
  407a92:	f43f aec4 	beq.w	40781e <_malloc_r+0x1ea>
  407a96:	421c      	tst	r4, r3
  407a98:	4640      	mov	r0, r8
  407a9a:	f47f ae3e 	bne.w	40771a <_malloc_r+0xe6>
  407a9e:	0064      	lsls	r4, r4, #1
  407aa0:	421c      	tst	r4, r3
  407aa2:	f100 0004 	add.w	r0, r0, #4
  407aa6:	d0fa      	beq.n	407a9e <_malloc_r+0x46a>
  407aa8:	e637      	b.n	40771a <_malloc_r+0xe6>
  407aaa:	468c      	mov	ip, r1
  407aac:	e78c      	b.n	4079c8 <_malloc_r+0x394>
  407aae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  407ab2:	d815      	bhi.n	407ae0 <_malloc_r+0x4ac>
  407ab4:	0bf3      	lsrs	r3, r6, #15
  407ab6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  407aba:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  407abe:	00c3      	lsls	r3, r0, #3
  407ac0:	e5da      	b.n	407678 <_malloc_r+0x44>
  407ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  407ac6:	e6ed      	b.n	4078a4 <_malloc_r+0x270>
  407ac8:	687b      	ldr	r3, [r7, #4]
  407aca:	1092      	asrs	r2, r2, #2
  407acc:	2101      	movs	r1, #1
  407ace:	fa01 f202 	lsl.w	r2, r1, r2
  407ad2:	4313      	orrs	r3, r2
  407ad4:	607b      	str	r3, [r7, #4]
  407ad6:	4662      	mov	r2, ip
  407ad8:	e779      	b.n	4079ce <_malloc_r+0x39a>
  407ada:	2301      	movs	r3, #1
  407adc:	6053      	str	r3, [r2, #4]
  407ade:	e729      	b.n	407934 <_malloc_r+0x300>
  407ae0:	f240 5254 	movw	r2, #1364	; 0x554
  407ae4:	4293      	cmp	r3, r2
  407ae6:	d822      	bhi.n	407b2e <_malloc_r+0x4fa>
  407ae8:	0cb3      	lsrs	r3, r6, #18
  407aea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  407aee:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  407af2:	00c3      	lsls	r3, r0, #3
  407af4:	e5c0      	b.n	407678 <_malloc_r+0x44>
  407af6:	f103 0b10 	add.w	fp, r3, #16
  407afa:	e6ae      	b.n	40785a <_malloc_r+0x226>
  407afc:	2a54      	cmp	r2, #84	; 0x54
  407afe:	d829      	bhi.n	407b54 <_malloc_r+0x520>
  407b00:	0b1a      	lsrs	r2, r3, #12
  407b02:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  407b06:	00c9      	lsls	r1, r1, #3
  407b08:	326e      	adds	r2, #110	; 0x6e
  407b0a:	e74d      	b.n	4079a8 <_malloc_r+0x374>
  407b0c:	4b20      	ldr	r3, [pc, #128]	; (407b90 <_malloc_r+0x55c>)
  407b0e:	6819      	ldr	r1, [r3, #0]
  407b10:	4459      	add	r1, fp
  407b12:	6019      	str	r1, [r3, #0]
  407b14:	e6b2      	b.n	40787c <_malloc_r+0x248>
  407b16:	f3ca 000b 	ubfx	r0, sl, #0, #12
  407b1a:	2800      	cmp	r0, #0
  407b1c:	f47f aeae 	bne.w	40787c <_malloc_r+0x248>
  407b20:	eb08 030b 	add.w	r3, r8, fp
  407b24:	68ba      	ldr	r2, [r7, #8]
  407b26:	f043 0301 	orr.w	r3, r3, #1
  407b2a:	6053      	str	r3, [r2, #4]
  407b2c:	e6ee      	b.n	40790c <_malloc_r+0x2d8>
  407b2e:	207f      	movs	r0, #127	; 0x7f
  407b30:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  407b34:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  407b38:	e59e      	b.n	407678 <_malloc_r+0x44>
  407b3a:	f104 0108 	add.w	r1, r4, #8
  407b3e:	4628      	mov	r0, r5
  407b40:	9300      	str	r3, [sp, #0]
  407b42:	f7ff fa59 	bl	406ff8 <_free_r>
  407b46:	9b00      	ldr	r3, [sp, #0]
  407b48:	6819      	ldr	r1, [r3, #0]
  407b4a:	e6df      	b.n	40790c <_malloc_r+0x2d8>
  407b4c:	2001      	movs	r0, #1
  407b4e:	f04f 0900 	mov.w	r9, #0
  407b52:	e6bc      	b.n	4078ce <_malloc_r+0x29a>
  407b54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407b58:	d805      	bhi.n	407b66 <_malloc_r+0x532>
  407b5a:	0bda      	lsrs	r2, r3, #15
  407b5c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  407b60:	00c9      	lsls	r1, r1, #3
  407b62:	3277      	adds	r2, #119	; 0x77
  407b64:	e720      	b.n	4079a8 <_malloc_r+0x374>
  407b66:	f240 5154 	movw	r1, #1364	; 0x554
  407b6a:	428a      	cmp	r2, r1
  407b6c:	d805      	bhi.n	407b7a <_malloc_r+0x546>
  407b6e:	0c9a      	lsrs	r2, r3, #18
  407b70:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  407b74:	00c9      	lsls	r1, r1, #3
  407b76:	327c      	adds	r2, #124	; 0x7c
  407b78:	e716      	b.n	4079a8 <_malloc_r+0x374>
  407b7a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  407b7e:	227e      	movs	r2, #126	; 0x7e
  407b80:	e712      	b.n	4079a8 <_malloc_r+0x374>
  407b82:	687b      	ldr	r3, [r7, #4]
  407b84:	e780      	b.n	407a88 <_malloc_r+0x454>
  407b86:	08f0      	lsrs	r0, r6, #3
  407b88:	f106 0308 	add.w	r3, r6, #8
  407b8c:	e600      	b.n	407790 <_malloc_r+0x15c>
  407b8e:	bf00      	nop
  407b90:	20420394 	.word	0x20420394

00407b94 <__ascii_mbtowc>:
  407b94:	b082      	sub	sp, #8
  407b96:	b149      	cbz	r1, 407bac <__ascii_mbtowc+0x18>
  407b98:	b15a      	cbz	r2, 407bb2 <__ascii_mbtowc+0x1e>
  407b9a:	b16b      	cbz	r3, 407bb8 <__ascii_mbtowc+0x24>
  407b9c:	7813      	ldrb	r3, [r2, #0]
  407b9e:	600b      	str	r3, [r1, #0]
  407ba0:	7812      	ldrb	r2, [r2, #0]
  407ba2:	1c10      	adds	r0, r2, #0
  407ba4:	bf18      	it	ne
  407ba6:	2001      	movne	r0, #1
  407ba8:	b002      	add	sp, #8
  407baa:	4770      	bx	lr
  407bac:	a901      	add	r1, sp, #4
  407bae:	2a00      	cmp	r2, #0
  407bb0:	d1f3      	bne.n	407b9a <__ascii_mbtowc+0x6>
  407bb2:	4610      	mov	r0, r2
  407bb4:	b002      	add	sp, #8
  407bb6:	4770      	bx	lr
  407bb8:	f06f 0001 	mvn.w	r0, #1
  407bbc:	e7f4      	b.n	407ba8 <__ascii_mbtowc+0x14>
  407bbe:	bf00      	nop

00407bc0 <memchr>:
  407bc0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407bc4:	2a10      	cmp	r2, #16
  407bc6:	db2b      	blt.n	407c20 <memchr+0x60>
  407bc8:	f010 0f07 	tst.w	r0, #7
  407bcc:	d008      	beq.n	407be0 <memchr+0x20>
  407bce:	f810 3b01 	ldrb.w	r3, [r0], #1
  407bd2:	3a01      	subs	r2, #1
  407bd4:	428b      	cmp	r3, r1
  407bd6:	d02d      	beq.n	407c34 <memchr+0x74>
  407bd8:	f010 0f07 	tst.w	r0, #7
  407bdc:	b342      	cbz	r2, 407c30 <memchr+0x70>
  407bde:	d1f6      	bne.n	407bce <memchr+0xe>
  407be0:	b4f0      	push	{r4, r5, r6, r7}
  407be2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407be6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  407bea:	f022 0407 	bic.w	r4, r2, #7
  407bee:	f07f 0700 	mvns.w	r7, #0
  407bf2:	2300      	movs	r3, #0
  407bf4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407bf8:	3c08      	subs	r4, #8
  407bfa:	ea85 0501 	eor.w	r5, r5, r1
  407bfe:	ea86 0601 	eor.w	r6, r6, r1
  407c02:	fa85 f547 	uadd8	r5, r5, r7
  407c06:	faa3 f587 	sel	r5, r3, r7
  407c0a:	fa86 f647 	uadd8	r6, r6, r7
  407c0e:	faa5 f687 	sel	r6, r5, r7
  407c12:	b98e      	cbnz	r6, 407c38 <memchr+0x78>
  407c14:	d1ee      	bne.n	407bf4 <memchr+0x34>
  407c16:	bcf0      	pop	{r4, r5, r6, r7}
  407c18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407c1c:	f002 0207 	and.w	r2, r2, #7
  407c20:	b132      	cbz	r2, 407c30 <memchr+0x70>
  407c22:	f810 3b01 	ldrb.w	r3, [r0], #1
  407c26:	3a01      	subs	r2, #1
  407c28:	ea83 0301 	eor.w	r3, r3, r1
  407c2c:	b113      	cbz	r3, 407c34 <memchr+0x74>
  407c2e:	d1f8      	bne.n	407c22 <memchr+0x62>
  407c30:	2000      	movs	r0, #0
  407c32:	4770      	bx	lr
  407c34:	3801      	subs	r0, #1
  407c36:	4770      	bx	lr
  407c38:	2d00      	cmp	r5, #0
  407c3a:	bf06      	itte	eq
  407c3c:	4635      	moveq	r5, r6
  407c3e:	3803      	subeq	r0, #3
  407c40:	3807      	subne	r0, #7
  407c42:	f015 0f01 	tst.w	r5, #1
  407c46:	d107      	bne.n	407c58 <memchr+0x98>
  407c48:	3001      	adds	r0, #1
  407c4a:	f415 7f80 	tst.w	r5, #256	; 0x100
  407c4e:	bf02      	ittt	eq
  407c50:	3001      	addeq	r0, #1
  407c52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407c56:	3001      	addeq	r0, #1
  407c58:	bcf0      	pop	{r4, r5, r6, r7}
  407c5a:	3801      	subs	r0, #1
  407c5c:	4770      	bx	lr
  407c5e:	bf00      	nop

00407c60 <memmove>:
  407c60:	4288      	cmp	r0, r1
  407c62:	b5f0      	push	{r4, r5, r6, r7, lr}
  407c64:	d90d      	bls.n	407c82 <memmove+0x22>
  407c66:	188b      	adds	r3, r1, r2
  407c68:	4298      	cmp	r0, r3
  407c6a:	d20a      	bcs.n	407c82 <memmove+0x22>
  407c6c:	1884      	adds	r4, r0, r2
  407c6e:	2a00      	cmp	r2, #0
  407c70:	d051      	beq.n	407d16 <memmove+0xb6>
  407c72:	4622      	mov	r2, r4
  407c74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407c78:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407c7c:	4299      	cmp	r1, r3
  407c7e:	d1f9      	bne.n	407c74 <memmove+0x14>
  407c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407c82:	2a0f      	cmp	r2, #15
  407c84:	d948      	bls.n	407d18 <memmove+0xb8>
  407c86:	ea41 0300 	orr.w	r3, r1, r0
  407c8a:	079b      	lsls	r3, r3, #30
  407c8c:	d146      	bne.n	407d1c <memmove+0xbc>
  407c8e:	f100 0410 	add.w	r4, r0, #16
  407c92:	f101 0310 	add.w	r3, r1, #16
  407c96:	4615      	mov	r5, r2
  407c98:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407c9c:	f844 6c10 	str.w	r6, [r4, #-16]
  407ca0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407ca4:	f844 6c0c 	str.w	r6, [r4, #-12]
  407ca8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407cac:	f844 6c08 	str.w	r6, [r4, #-8]
  407cb0:	3d10      	subs	r5, #16
  407cb2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407cb6:	f844 6c04 	str.w	r6, [r4, #-4]
  407cba:	2d0f      	cmp	r5, #15
  407cbc:	f103 0310 	add.w	r3, r3, #16
  407cc0:	f104 0410 	add.w	r4, r4, #16
  407cc4:	d8e8      	bhi.n	407c98 <memmove+0x38>
  407cc6:	f1a2 0310 	sub.w	r3, r2, #16
  407cca:	f023 030f 	bic.w	r3, r3, #15
  407cce:	f002 0e0f 	and.w	lr, r2, #15
  407cd2:	3310      	adds	r3, #16
  407cd4:	f1be 0f03 	cmp.w	lr, #3
  407cd8:	4419      	add	r1, r3
  407cda:	4403      	add	r3, r0
  407cdc:	d921      	bls.n	407d22 <memmove+0xc2>
  407cde:	1f1e      	subs	r6, r3, #4
  407ce0:	460d      	mov	r5, r1
  407ce2:	4674      	mov	r4, lr
  407ce4:	3c04      	subs	r4, #4
  407ce6:	f855 7b04 	ldr.w	r7, [r5], #4
  407cea:	f846 7f04 	str.w	r7, [r6, #4]!
  407cee:	2c03      	cmp	r4, #3
  407cf0:	d8f8      	bhi.n	407ce4 <memmove+0x84>
  407cf2:	f1ae 0404 	sub.w	r4, lr, #4
  407cf6:	f024 0403 	bic.w	r4, r4, #3
  407cfa:	3404      	adds	r4, #4
  407cfc:	4421      	add	r1, r4
  407cfe:	4423      	add	r3, r4
  407d00:	f002 0203 	and.w	r2, r2, #3
  407d04:	b162      	cbz	r2, 407d20 <memmove+0xc0>
  407d06:	3b01      	subs	r3, #1
  407d08:	440a      	add	r2, r1
  407d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
  407d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
  407d12:	428a      	cmp	r2, r1
  407d14:	d1f9      	bne.n	407d0a <memmove+0xaa>
  407d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407d18:	4603      	mov	r3, r0
  407d1a:	e7f3      	b.n	407d04 <memmove+0xa4>
  407d1c:	4603      	mov	r3, r0
  407d1e:	e7f2      	b.n	407d06 <memmove+0xa6>
  407d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407d22:	4672      	mov	r2, lr
  407d24:	e7ee      	b.n	407d04 <memmove+0xa4>
  407d26:	bf00      	nop

00407d28 <__malloc_lock>:
  407d28:	4801      	ldr	r0, [pc, #4]	; (407d30 <__malloc_lock+0x8>)
  407d2a:	f7ff bbff 	b.w	40752c <__retarget_lock_acquire_recursive>
  407d2e:	bf00      	nop
  407d30:	2042046c 	.word	0x2042046c

00407d34 <__malloc_unlock>:
  407d34:	4801      	ldr	r0, [pc, #4]	; (407d3c <__malloc_unlock+0x8>)
  407d36:	f7ff bbfb 	b.w	407530 <__retarget_lock_release_recursive>
  407d3a:	bf00      	nop
  407d3c:	2042046c 	.word	0x2042046c

00407d40 <_realloc_r>:
  407d40:	2900      	cmp	r1, #0
  407d42:	f000 8095 	beq.w	407e70 <_realloc_r+0x130>
  407d46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407d4a:	460d      	mov	r5, r1
  407d4c:	4616      	mov	r6, r2
  407d4e:	b083      	sub	sp, #12
  407d50:	4680      	mov	r8, r0
  407d52:	f106 070b 	add.w	r7, r6, #11
  407d56:	f7ff ffe7 	bl	407d28 <__malloc_lock>
  407d5a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  407d5e:	2f16      	cmp	r7, #22
  407d60:	f02e 0403 	bic.w	r4, lr, #3
  407d64:	f1a5 0908 	sub.w	r9, r5, #8
  407d68:	d83c      	bhi.n	407de4 <_realloc_r+0xa4>
  407d6a:	2210      	movs	r2, #16
  407d6c:	4617      	mov	r7, r2
  407d6e:	42be      	cmp	r6, r7
  407d70:	d83d      	bhi.n	407dee <_realloc_r+0xae>
  407d72:	4294      	cmp	r4, r2
  407d74:	da43      	bge.n	407dfe <_realloc_r+0xbe>
  407d76:	4bc4      	ldr	r3, [pc, #784]	; (408088 <_realloc_r+0x348>)
  407d78:	6899      	ldr	r1, [r3, #8]
  407d7a:	eb09 0004 	add.w	r0, r9, r4
  407d7e:	4288      	cmp	r0, r1
  407d80:	f000 80b4 	beq.w	407eec <_realloc_r+0x1ac>
  407d84:	6843      	ldr	r3, [r0, #4]
  407d86:	f023 0101 	bic.w	r1, r3, #1
  407d8a:	4401      	add	r1, r0
  407d8c:	6849      	ldr	r1, [r1, #4]
  407d8e:	07c9      	lsls	r1, r1, #31
  407d90:	d54c      	bpl.n	407e2c <_realloc_r+0xec>
  407d92:	f01e 0f01 	tst.w	lr, #1
  407d96:	f000 809b 	beq.w	407ed0 <_realloc_r+0x190>
  407d9a:	4631      	mov	r1, r6
  407d9c:	4640      	mov	r0, r8
  407d9e:	f7ff fc49 	bl	407634 <_malloc_r>
  407da2:	4606      	mov	r6, r0
  407da4:	2800      	cmp	r0, #0
  407da6:	d03a      	beq.n	407e1e <_realloc_r+0xde>
  407da8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407dac:	f023 0301 	bic.w	r3, r3, #1
  407db0:	444b      	add	r3, r9
  407db2:	f1a0 0208 	sub.w	r2, r0, #8
  407db6:	429a      	cmp	r2, r3
  407db8:	f000 8121 	beq.w	407ffe <_realloc_r+0x2be>
  407dbc:	1f22      	subs	r2, r4, #4
  407dbe:	2a24      	cmp	r2, #36	; 0x24
  407dc0:	f200 8107 	bhi.w	407fd2 <_realloc_r+0x292>
  407dc4:	2a13      	cmp	r2, #19
  407dc6:	f200 80db 	bhi.w	407f80 <_realloc_r+0x240>
  407dca:	4603      	mov	r3, r0
  407dcc:	462a      	mov	r2, r5
  407dce:	6811      	ldr	r1, [r2, #0]
  407dd0:	6019      	str	r1, [r3, #0]
  407dd2:	6851      	ldr	r1, [r2, #4]
  407dd4:	6059      	str	r1, [r3, #4]
  407dd6:	6892      	ldr	r2, [r2, #8]
  407dd8:	609a      	str	r2, [r3, #8]
  407dda:	4629      	mov	r1, r5
  407ddc:	4640      	mov	r0, r8
  407dde:	f7ff f90b 	bl	406ff8 <_free_r>
  407de2:	e01c      	b.n	407e1e <_realloc_r+0xde>
  407de4:	f027 0707 	bic.w	r7, r7, #7
  407de8:	2f00      	cmp	r7, #0
  407dea:	463a      	mov	r2, r7
  407dec:	dabf      	bge.n	407d6e <_realloc_r+0x2e>
  407dee:	2600      	movs	r6, #0
  407df0:	230c      	movs	r3, #12
  407df2:	4630      	mov	r0, r6
  407df4:	f8c8 3000 	str.w	r3, [r8]
  407df8:	b003      	add	sp, #12
  407dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407dfe:	462e      	mov	r6, r5
  407e00:	1be3      	subs	r3, r4, r7
  407e02:	2b0f      	cmp	r3, #15
  407e04:	d81e      	bhi.n	407e44 <_realloc_r+0x104>
  407e06:	f8d9 3004 	ldr.w	r3, [r9, #4]
  407e0a:	f003 0301 	and.w	r3, r3, #1
  407e0e:	4323      	orrs	r3, r4
  407e10:	444c      	add	r4, r9
  407e12:	f8c9 3004 	str.w	r3, [r9, #4]
  407e16:	6863      	ldr	r3, [r4, #4]
  407e18:	f043 0301 	orr.w	r3, r3, #1
  407e1c:	6063      	str	r3, [r4, #4]
  407e1e:	4640      	mov	r0, r8
  407e20:	f7ff ff88 	bl	407d34 <__malloc_unlock>
  407e24:	4630      	mov	r0, r6
  407e26:	b003      	add	sp, #12
  407e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e2c:	f023 0303 	bic.w	r3, r3, #3
  407e30:	18e1      	adds	r1, r4, r3
  407e32:	4291      	cmp	r1, r2
  407e34:	db1f      	blt.n	407e76 <_realloc_r+0x136>
  407e36:	68c3      	ldr	r3, [r0, #12]
  407e38:	6882      	ldr	r2, [r0, #8]
  407e3a:	462e      	mov	r6, r5
  407e3c:	60d3      	str	r3, [r2, #12]
  407e3e:	460c      	mov	r4, r1
  407e40:	609a      	str	r2, [r3, #8]
  407e42:	e7dd      	b.n	407e00 <_realloc_r+0xc0>
  407e44:	f8d9 2004 	ldr.w	r2, [r9, #4]
  407e48:	eb09 0107 	add.w	r1, r9, r7
  407e4c:	f002 0201 	and.w	r2, r2, #1
  407e50:	444c      	add	r4, r9
  407e52:	f043 0301 	orr.w	r3, r3, #1
  407e56:	4317      	orrs	r7, r2
  407e58:	f8c9 7004 	str.w	r7, [r9, #4]
  407e5c:	604b      	str	r3, [r1, #4]
  407e5e:	6863      	ldr	r3, [r4, #4]
  407e60:	f043 0301 	orr.w	r3, r3, #1
  407e64:	3108      	adds	r1, #8
  407e66:	6063      	str	r3, [r4, #4]
  407e68:	4640      	mov	r0, r8
  407e6a:	f7ff f8c5 	bl	406ff8 <_free_r>
  407e6e:	e7d6      	b.n	407e1e <_realloc_r+0xde>
  407e70:	4611      	mov	r1, r2
  407e72:	f7ff bbdf 	b.w	407634 <_malloc_r>
  407e76:	f01e 0f01 	tst.w	lr, #1
  407e7a:	d18e      	bne.n	407d9a <_realloc_r+0x5a>
  407e7c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407e80:	eba9 0a01 	sub.w	sl, r9, r1
  407e84:	f8da 1004 	ldr.w	r1, [sl, #4]
  407e88:	f021 0103 	bic.w	r1, r1, #3
  407e8c:	440b      	add	r3, r1
  407e8e:	4423      	add	r3, r4
  407e90:	4293      	cmp	r3, r2
  407e92:	db25      	blt.n	407ee0 <_realloc_r+0x1a0>
  407e94:	68c2      	ldr	r2, [r0, #12]
  407e96:	6881      	ldr	r1, [r0, #8]
  407e98:	4656      	mov	r6, sl
  407e9a:	60ca      	str	r2, [r1, #12]
  407e9c:	6091      	str	r1, [r2, #8]
  407e9e:	f8da 100c 	ldr.w	r1, [sl, #12]
  407ea2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407ea6:	1f22      	subs	r2, r4, #4
  407ea8:	2a24      	cmp	r2, #36	; 0x24
  407eaa:	60c1      	str	r1, [r0, #12]
  407eac:	6088      	str	r0, [r1, #8]
  407eae:	f200 8094 	bhi.w	407fda <_realloc_r+0x29a>
  407eb2:	2a13      	cmp	r2, #19
  407eb4:	d96f      	bls.n	407f96 <_realloc_r+0x256>
  407eb6:	6829      	ldr	r1, [r5, #0]
  407eb8:	f8ca 1008 	str.w	r1, [sl, #8]
  407ebc:	6869      	ldr	r1, [r5, #4]
  407ebe:	f8ca 100c 	str.w	r1, [sl, #12]
  407ec2:	2a1b      	cmp	r2, #27
  407ec4:	f200 80a2 	bhi.w	40800c <_realloc_r+0x2cc>
  407ec8:	3508      	adds	r5, #8
  407eca:	f10a 0210 	add.w	r2, sl, #16
  407ece:	e063      	b.n	407f98 <_realloc_r+0x258>
  407ed0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407ed4:	eba9 0a03 	sub.w	sl, r9, r3
  407ed8:	f8da 1004 	ldr.w	r1, [sl, #4]
  407edc:	f021 0103 	bic.w	r1, r1, #3
  407ee0:	1863      	adds	r3, r4, r1
  407ee2:	4293      	cmp	r3, r2
  407ee4:	f6ff af59 	blt.w	407d9a <_realloc_r+0x5a>
  407ee8:	4656      	mov	r6, sl
  407eea:	e7d8      	b.n	407e9e <_realloc_r+0x15e>
  407eec:	6841      	ldr	r1, [r0, #4]
  407eee:	f021 0b03 	bic.w	fp, r1, #3
  407ef2:	44a3      	add	fp, r4
  407ef4:	f107 0010 	add.w	r0, r7, #16
  407ef8:	4583      	cmp	fp, r0
  407efa:	da56      	bge.n	407faa <_realloc_r+0x26a>
  407efc:	f01e 0f01 	tst.w	lr, #1
  407f00:	f47f af4b 	bne.w	407d9a <_realloc_r+0x5a>
  407f04:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407f08:	eba9 0a01 	sub.w	sl, r9, r1
  407f0c:	f8da 1004 	ldr.w	r1, [sl, #4]
  407f10:	f021 0103 	bic.w	r1, r1, #3
  407f14:	448b      	add	fp, r1
  407f16:	4558      	cmp	r0, fp
  407f18:	dce2      	bgt.n	407ee0 <_realloc_r+0x1a0>
  407f1a:	4656      	mov	r6, sl
  407f1c:	f8da 100c 	ldr.w	r1, [sl, #12]
  407f20:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407f24:	1f22      	subs	r2, r4, #4
  407f26:	2a24      	cmp	r2, #36	; 0x24
  407f28:	60c1      	str	r1, [r0, #12]
  407f2a:	6088      	str	r0, [r1, #8]
  407f2c:	f200 808f 	bhi.w	40804e <_realloc_r+0x30e>
  407f30:	2a13      	cmp	r2, #19
  407f32:	f240 808a 	bls.w	40804a <_realloc_r+0x30a>
  407f36:	6829      	ldr	r1, [r5, #0]
  407f38:	f8ca 1008 	str.w	r1, [sl, #8]
  407f3c:	6869      	ldr	r1, [r5, #4]
  407f3e:	f8ca 100c 	str.w	r1, [sl, #12]
  407f42:	2a1b      	cmp	r2, #27
  407f44:	f200 808a 	bhi.w	40805c <_realloc_r+0x31c>
  407f48:	3508      	adds	r5, #8
  407f4a:	f10a 0210 	add.w	r2, sl, #16
  407f4e:	6829      	ldr	r1, [r5, #0]
  407f50:	6011      	str	r1, [r2, #0]
  407f52:	6869      	ldr	r1, [r5, #4]
  407f54:	6051      	str	r1, [r2, #4]
  407f56:	68a9      	ldr	r1, [r5, #8]
  407f58:	6091      	str	r1, [r2, #8]
  407f5a:	eb0a 0107 	add.w	r1, sl, r7
  407f5e:	ebab 0207 	sub.w	r2, fp, r7
  407f62:	f042 0201 	orr.w	r2, r2, #1
  407f66:	6099      	str	r1, [r3, #8]
  407f68:	604a      	str	r2, [r1, #4]
  407f6a:	f8da 3004 	ldr.w	r3, [sl, #4]
  407f6e:	f003 0301 	and.w	r3, r3, #1
  407f72:	431f      	orrs	r7, r3
  407f74:	4640      	mov	r0, r8
  407f76:	f8ca 7004 	str.w	r7, [sl, #4]
  407f7a:	f7ff fedb 	bl	407d34 <__malloc_unlock>
  407f7e:	e751      	b.n	407e24 <_realloc_r+0xe4>
  407f80:	682b      	ldr	r3, [r5, #0]
  407f82:	6003      	str	r3, [r0, #0]
  407f84:	686b      	ldr	r3, [r5, #4]
  407f86:	6043      	str	r3, [r0, #4]
  407f88:	2a1b      	cmp	r2, #27
  407f8a:	d82d      	bhi.n	407fe8 <_realloc_r+0x2a8>
  407f8c:	f100 0308 	add.w	r3, r0, #8
  407f90:	f105 0208 	add.w	r2, r5, #8
  407f94:	e71b      	b.n	407dce <_realloc_r+0x8e>
  407f96:	4632      	mov	r2, r6
  407f98:	6829      	ldr	r1, [r5, #0]
  407f9a:	6011      	str	r1, [r2, #0]
  407f9c:	6869      	ldr	r1, [r5, #4]
  407f9e:	6051      	str	r1, [r2, #4]
  407fa0:	68a9      	ldr	r1, [r5, #8]
  407fa2:	6091      	str	r1, [r2, #8]
  407fa4:	461c      	mov	r4, r3
  407fa6:	46d1      	mov	r9, sl
  407fa8:	e72a      	b.n	407e00 <_realloc_r+0xc0>
  407faa:	eb09 0107 	add.w	r1, r9, r7
  407fae:	ebab 0b07 	sub.w	fp, fp, r7
  407fb2:	f04b 0201 	orr.w	r2, fp, #1
  407fb6:	6099      	str	r1, [r3, #8]
  407fb8:	604a      	str	r2, [r1, #4]
  407fba:	f855 3c04 	ldr.w	r3, [r5, #-4]
  407fbe:	f003 0301 	and.w	r3, r3, #1
  407fc2:	431f      	orrs	r7, r3
  407fc4:	4640      	mov	r0, r8
  407fc6:	f845 7c04 	str.w	r7, [r5, #-4]
  407fca:	f7ff feb3 	bl	407d34 <__malloc_unlock>
  407fce:	462e      	mov	r6, r5
  407fd0:	e728      	b.n	407e24 <_realloc_r+0xe4>
  407fd2:	4629      	mov	r1, r5
  407fd4:	f7ff fe44 	bl	407c60 <memmove>
  407fd8:	e6ff      	b.n	407dda <_realloc_r+0x9a>
  407fda:	4629      	mov	r1, r5
  407fdc:	4630      	mov	r0, r6
  407fde:	461c      	mov	r4, r3
  407fe0:	46d1      	mov	r9, sl
  407fe2:	f7ff fe3d 	bl	407c60 <memmove>
  407fe6:	e70b      	b.n	407e00 <_realloc_r+0xc0>
  407fe8:	68ab      	ldr	r3, [r5, #8]
  407fea:	6083      	str	r3, [r0, #8]
  407fec:	68eb      	ldr	r3, [r5, #12]
  407fee:	60c3      	str	r3, [r0, #12]
  407ff0:	2a24      	cmp	r2, #36	; 0x24
  407ff2:	d017      	beq.n	408024 <_realloc_r+0x2e4>
  407ff4:	f100 0310 	add.w	r3, r0, #16
  407ff8:	f105 0210 	add.w	r2, r5, #16
  407ffc:	e6e7      	b.n	407dce <_realloc_r+0x8e>
  407ffe:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408002:	f023 0303 	bic.w	r3, r3, #3
  408006:	441c      	add	r4, r3
  408008:	462e      	mov	r6, r5
  40800a:	e6f9      	b.n	407e00 <_realloc_r+0xc0>
  40800c:	68a9      	ldr	r1, [r5, #8]
  40800e:	f8ca 1010 	str.w	r1, [sl, #16]
  408012:	68e9      	ldr	r1, [r5, #12]
  408014:	f8ca 1014 	str.w	r1, [sl, #20]
  408018:	2a24      	cmp	r2, #36	; 0x24
  40801a:	d00c      	beq.n	408036 <_realloc_r+0x2f6>
  40801c:	3510      	adds	r5, #16
  40801e:	f10a 0218 	add.w	r2, sl, #24
  408022:	e7b9      	b.n	407f98 <_realloc_r+0x258>
  408024:	692b      	ldr	r3, [r5, #16]
  408026:	6103      	str	r3, [r0, #16]
  408028:	696b      	ldr	r3, [r5, #20]
  40802a:	6143      	str	r3, [r0, #20]
  40802c:	f105 0218 	add.w	r2, r5, #24
  408030:	f100 0318 	add.w	r3, r0, #24
  408034:	e6cb      	b.n	407dce <_realloc_r+0x8e>
  408036:	692a      	ldr	r2, [r5, #16]
  408038:	f8ca 2018 	str.w	r2, [sl, #24]
  40803c:	696a      	ldr	r2, [r5, #20]
  40803e:	f8ca 201c 	str.w	r2, [sl, #28]
  408042:	3518      	adds	r5, #24
  408044:	f10a 0220 	add.w	r2, sl, #32
  408048:	e7a6      	b.n	407f98 <_realloc_r+0x258>
  40804a:	4632      	mov	r2, r6
  40804c:	e77f      	b.n	407f4e <_realloc_r+0x20e>
  40804e:	4629      	mov	r1, r5
  408050:	4630      	mov	r0, r6
  408052:	9301      	str	r3, [sp, #4]
  408054:	f7ff fe04 	bl	407c60 <memmove>
  408058:	9b01      	ldr	r3, [sp, #4]
  40805a:	e77e      	b.n	407f5a <_realloc_r+0x21a>
  40805c:	68a9      	ldr	r1, [r5, #8]
  40805e:	f8ca 1010 	str.w	r1, [sl, #16]
  408062:	68e9      	ldr	r1, [r5, #12]
  408064:	f8ca 1014 	str.w	r1, [sl, #20]
  408068:	2a24      	cmp	r2, #36	; 0x24
  40806a:	d003      	beq.n	408074 <_realloc_r+0x334>
  40806c:	3510      	adds	r5, #16
  40806e:	f10a 0218 	add.w	r2, sl, #24
  408072:	e76c      	b.n	407f4e <_realloc_r+0x20e>
  408074:	692a      	ldr	r2, [r5, #16]
  408076:	f8ca 2018 	str.w	r2, [sl, #24]
  40807a:	696a      	ldr	r2, [r5, #20]
  40807c:	f8ca 201c 	str.w	r2, [sl, #28]
  408080:	3518      	adds	r5, #24
  408082:	f10a 0220 	add.w	r2, sl, #32
  408086:	e762      	b.n	407f4e <_realloc_r+0x20e>
  408088:	204005d8 	.word	0x204005d8

0040808c <_sbrk_r>:
  40808c:	b538      	push	{r3, r4, r5, lr}
  40808e:	4c07      	ldr	r4, [pc, #28]	; (4080ac <_sbrk_r+0x20>)
  408090:	2300      	movs	r3, #0
  408092:	4605      	mov	r5, r0
  408094:	4608      	mov	r0, r1
  408096:	6023      	str	r3, [r4, #0]
  408098:	f7fc ff0c 	bl	404eb4 <_sbrk>
  40809c:	1c43      	adds	r3, r0, #1
  40809e:	d000      	beq.n	4080a2 <_sbrk_r+0x16>
  4080a0:	bd38      	pop	{r3, r4, r5, pc}
  4080a2:	6823      	ldr	r3, [r4, #0]
  4080a4:	2b00      	cmp	r3, #0
  4080a6:	d0fb      	beq.n	4080a0 <_sbrk_r+0x14>
  4080a8:	602b      	str	r3, [r5, #0]
  4080aa:	bd38      	pop	{r3, r4, r5, pc}
  4080ac:	20420480 	.word	0x20420480

004080b0 <__sread>:
  4080b0:	b510      	push	{r4, lr}
  4080b2:	460c      	mov	r4, r1
  4080b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4080b8:	f000 f9f6 	bl	4084a8 <_read_r>
  4080bc:	2800      	cmp	r0, #0
  4080be:	db03      	blt.n	4080c8 <__sread+0x18>
  4080c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4080c2:	4403      	add	r3, r0
  4080c4:	6523      	str	r3, [r4, #80]	; 0x50
  4080c6:	bd10      	pop	{r4, pc}
  4080c8:	89a3      	ldrh	r3, [r4, #12]
  4080ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4080ce:	81a3      	strh	r3, [r4, #12]
  4080d0:	bd10      	pop	{r4, pc}
  4080d2:	bf00      	nop

004080d4 <__swrite>:
  4080d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4080d8:	4616      	mov	r6, r2
  4080da:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4080de:	461f      	mov	r7, r3
  4080e0:	05d3      	lsls	r3, r2, #23
  4080e2:	460c      	mov	r4, r1
  4080e4:	4605      	mov	r5, r0
  4080e6:	d507      	bpl.n	4080f8 <__swrite+0x24>
  4080e8:	2200      	movs	r2, #0
  4080ea:	2302      	movs	r3, #2
  4080ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4080f0:	f000 f9c4 	bl	40847c <_lseek_r>
  4080f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4080f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4080fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408100:	81a2      	strh	r2, [r4, #12]
  408102:	463b      	mov	r3, r7
  408104:	4632      	mov	r2, r6
  408106:	4628      	mov	r0, r5
  408108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40810c:	f000 b8a4 	b.w	408258 <_write_r>

00408110 <__sseek>:
  408110:	b510      	push	{r4, lr}
  408112:	460c      	mov	r4, r1
  408114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408118:	f000 f9b0 	bl	40847c <_lseek_r>
  40811c:	89a3      	ldrh	r3, [r4, #12]
  40811e:	1c42      	adds	r2, r0, #1
  408120:	bf0e      	itee	eq
  408122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40812a:	6520      	strne	r0, [r4, #80]	; 0x50
  40812c:	81a3      	strh	r3, [r4, #12]
  40812e:	bd10      	pop	{r4, pc}

00408130 <__sclose>:
  408130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408134:	f000 b908 	b.w	408348 <_close_r>

00408138 <__swbuf_r>:
  408138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40813a:	460d      	mov	r5, r1
  40813c:	4614      	mov	r4, r2
  40813e:	4606      	mov	r6, r0
  408140:	b110      	cbz	r0, 408148 <__swbuf_r+0x10>
  408142:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408144:	2b00      	cmp	r3, #0
  408146:	d04b      	beq.n	4081e0 <__swbuf_r+0xa8>
  408148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40814c:	69a3      	ldr	r3, [r4, #24]
  40814e:	60a3      	str	r3, [r4, #8]
  408150:	b291      	uxth	r1, r2
  408152:	0708      	lsls	r0, r1, #28
  408154:	d539      	bpl.n	4081ca <__swbuf_r+0x92>
  408156:	6923      	ldr	r3, [r4, #16]
  408158:	2b00      	cmp	r3, #0
  40815a:	d036      	beq.n	4081ca <__swbuf_r+0x92>
  40815c:	b2ed      	uxtb	r5, r5
  40815e:	0489      	lsls	r1, r1, #18
  408160:	462f      	mov	r7, r5
  408162:	d515      	bpl.n	408190 <__swbuf_r+0x58>
  408164:	6822      	ldr	r2, [r4, #0]
  408166:	6961      	ldr	r1, [r4, #20]
  408168:	1ad3      	subs	r3, r2, r3
  40816a:	428b      	cmp	r3, r1
  40816c:	da1c      	bge.n	4081a8 <__swbuf_r+0x70>
  40816e:	3301      	adds	r3, #1
  408170:	68a1      	ldr	r1, [r4, #8]
  408172:	1c50      	adds	r0, r2, #1
  408174:	3901      	subs	r1, #1
  408176:	60a1      	str	r1, [r4, #8]
  408178:	6020      	str	r0, [r4, #0]
  40817a:	7015      	strb	r5, [r2, #0]
  40817c:	6962      	ldr	r2, [r4, #20]
  40817e:	429a      	cmp	r2, r3
  408180:	d01a      	beq.n	4081b8 <__swbuf_r+0x80>
  408182:	89a3      	ldrh	r3, [r4, #12]
  408184:	07db      	lsls	r3, r3, #31
  408186:	d501      	bpl.n	40818c <__swbuf_r+0x54>
  408188:	2d0a      	cmp	r5, #10
  40818a:	d015      	beq.n	4081b8 <__swbuf_r+0x80>
  40818c:	4638      	mov	r0, r7
  40818e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408190:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408192:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408196:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40819a:	81a2      	strh	r2, [r4, #12]
  40819c:	6822      	ldr	r2, [r4, #0]
  40819e:	6661      	str	r1, [r4, #100]	; 0x64
  4081a0:	6961      	ldr	r1, [r4, #20]
  4081a2:	1ad3      	subs	r3, r2, r3
  4081a4:	428b      	cmp	r3, r1
  4081a6:	dbe2      	blt.n	40816e <__swbuf_r+0x36>
  4081a8:	4621      	mov	r1, r4
  4081aa:	4630      	mov	r0, r6
  4081ac:	f7fe fda6 	bl	406cfc <_fflush_r>
  4081b0:	b940      	cbnz	r0, 4081c4 <__swbuf_r+0x8c>
  4081b2:	6822      	ldr	r2, [r4, #0]
  4081b4:	2301      	movs	r3, #1
  4081b6:	e7db      	b.n	408170 <__swbuf_r+0x38>
  4081b8:	4621      	mov	r1, r4
  4081ba:	4630      	mov	r0, r6
  4081bc:	f7fe fd9e 	bl	406cfc <_fflush_r>
  4081c0:	2800      	cmp	r0, #0
  4081c2:	d0e3      	beq.n	40818c <__swbuf_r+0x54>
  4081c4:	f04f 37ff 	mov.w	r7, #4294967295
  4081c8:	e7e0      	b.n	40818c <__swbuf_r+0x54>
  4081ca:	4621      	mov	r1, r4
  4081cc:	4630      	mov	r0, r6
  4081ce:	f7fe fc81 	bl	406ad4 <__swsetup_r>
  4081d2:	2800      	cmp	r0, #0
  4081d4:	d1f6      	bne.n	4081c4 <__swbuf_r+0x8c>
  4081d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4081da:	6923      	ldr	r3, [r4, #16]
  4081dc:	b291      	uxth	r1, r2
  4081de:	e7bd      	b.n	40815c <__swbuf_r+0x24>
  4081e0:	f7fe fde4 	bl	406dac <__sinit>
  4081e4:	e7b0      	b.n	408148 <__swbuf_r+0x10>
  4081e6:	bf00      	nop

004081e8 <_wcrtomb_r>:
  4081e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4081ea:	4606      	mov	r6, r0
  4081ec:	b085      	sub	sp, #20
  4081ee:	461f      	mov	r7, r3
  4081f0:	b189      	cbz	r1, 408216 <_wcrtomb_r+0x2e>
  4081f2:	4c10      	ldr	r4, [pc, #64]	; (408234 <_wcrtomb_r+0x4c>)
  4081f4:	4d10      	ldr	r5, [pc, #64]	; (408238 <_wcrtomb_r+0x50>)
  4081f6:	6824      	ldr	r4, [r4, #0]
  4081f8:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4081fa:	2c00      	cmp	r4, #0
  4081fc:	bf08      	it	eq
  4081fe:	462c      	moveq	r4, r5
  408200:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408204:	47a0      	blx	r4
  408206:	1c43      	adds	r3, r0, #1
  408208:	d103      	bne.n	408212 <_wcrtomb_r+0x2a>
  40820a:	2200      	movs	r2, #0
  40820c:	238a      	movs	r3, #138	; 0x8a
  40820e:	603a      	str	r2, [r7, #0]
  408210:	6033      	str	r3, [r6, #0]
  408212:	b005      	add	sp, #20
  408214:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408216:	460c      	mov	r4, r1
  408218:	4906      	ldr	r1, [pc, #24]	; (408234 <_wcrtomb_r+0x4c>)
  40821a:	4a07      	ldr	r2, [pc, #28]	; (408238 <_wcrtomb_r+0x50>)
  40821c:	6809      	ldr	r1, [r1, #0]
  40821e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408220:	2900      	cmp	r1, #0
  408222:	bf08      	it	eq
  408224:	4611      	moveq	r1, r2
  408226:	4622      	mov	r2, r4
  408228:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40822c:	a901      	add	r1, sp, #4
  40822e:	47a0      	blx	r4
  408230:	e7e9      	b.n	408206 <_wcrtomb_r+0x1e>
  408232:	bf00      	nop
  408234:	2040003c 	.word	0x2040003c
  408238:	2040046c 	.word	0x2040046c

0040823c <__ascii_wctomb>:
  40823c:	b121      	cbz	r1, 408248 <__ascii_wctomb+0xc>
  40823e:	2aff      	cmp	r2, #255	; 0xff
  408240:	d804      	bhi.n	40824c <__ascii_wctomb+0x10>
  408242:	700a      	strb	r2, [r1, #0]
  408244:	2001      	movs	r0, #1
  408246:	4770      	bx	lr
  408248:	4608      	mov	r0, r1
  40824a:	4770      	bx	lr
  40824c:	238a      	movs	r3, #138	; 0x8a
  40824e:	6003      	str	r3, [r0, #0]
  408250:	f04f 30ff 	mov.w	r0, #4294967295
  408254:	4770      	bx	lr
  408256:	bf00      	nop

00408258 <_write_r>:
  408258:	b570      	push	{r4, r5, r6, lr}
  40825a:	460d      	mov	r5, r1
  40825c:	4c08      	ldr	r4, [pc, #32]	; (408280 <_write_r+0x28>)
  40825e:	4611      	mov	r1, r2
  408260:	4606      	mov	r6, r0
  408262:	461a      	mov	r2, r3
  408264:	4628      	mov	r0, r5
  408266:	2300      	movs	r3, #0
  408268:	6023      	str	r3, [r4, #0]
  40826a:	f7fb f9a1 	bl	4035b0 <_write>
  40826e:	1c43      	adds	r3, r0, #1
  408270:	d000      	beq.n	408274 <_write_r+0x1c>
  408272:	bd70      	pop	{r4, r5, r6, pc}
  408274:	6823      	ldr	r3, [r4, #0]
  408276:	2b00      	cmp	r3, #0
  408278:	d0fb      	beq.n	408272 <_write_r+0x1a>
  40827a:	6033      	str	r3, [r6, #0]
  40827c:	bd70      	pop	{r4, r5, r6, pc}
  40827e:	bf00      	nop
  408280:	20420480 	.word	0x20420480

00408284 <__register_exitproc>:
  408284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408288:	4d2c      	ldr	r5, [pc, #176]	; (40833c <__register_exitproc+0xb8>)
  40828a:	4606      	mov	r6, r0
  40828c:	6828      	ldr	r0, [r5, #0]
  40828e:	4698      	mov	r8, r3
  408290:	460f      	mov	r7, r1
  408292:	4691      	mov	r9, r2
  408294:	f7ff f94a 	bl	40752c <__retarget_lock_acquire_recursive>
  408298:	4b29      	ldr	r3, [pc, #164]	; (408340 <__register_exitproc+0xbc>)
  40829a:	681c      	ldr	r4, [r3, #0]
  40829c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4082a0:	2b00      	cmp	r3, #0
  4082a2:	d03e      	beq.n	408322 <__register_exitproc+0x9e>
  4082a4:	685a      	ldr	r2, [r3, #4]
  4082a6:	2a1f      	cmp	r2, #31
  4082a8:	dc1c      	bgt.n	4082e4 <__register_exitproc+0x60>
  4082aa:	f102 0e01 	add.w	lr, r2, #1
  4082ae:	b176      	cbz	r6, 4082ce <__register_exitproc+0x4a>
  4082b0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4082b4:	2401      	movs	r4, #1
  4082b6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4082ba:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4082be:	4094      	lsls	r4, r2
  4082c0:	4320      	orrs	r0, r4
  4082c2:	2e02      	cmp	r6, #2
  4082c4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4082c8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4082cc:	d023      	beq.n	408316 <__register_exitproc+0x92>
  4082ce:	3202      	adds	r2, #2
  4082d0:	f8c3 e004 	str.w	lr, [r3, #4]
  4082d4:	6828      	ldr	r0, [r5, #0]
  4082d6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4082da:	f7ff f929 	bl	407530 <__retarget_lock_release_recursive>
  4082de:	2000      	movs	r0, #0
  4082e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4082e4:	4b17      	ldr	r3, [pc, #92]	; (408344 <__register_exitproc+0xc0>)
  4082e6:	b30b      	cbz	r3, 40832c <__register_exitproc+0xa8>
  4082e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4082ec:	f7ff f99a 	bl	407624 <malloc>
  4082f0:	4603      	mov	r3, r0
  4082f2:	b1d8      	cbz	r0, 40832c <__register_exitproc+0xa8>
  4082f4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4082f8:	6002      	str	r2, [r0, #0]
  4082fa:	2100      	movs	r1, #0
  4082fc:	6041      	str	r1, [r0, #4]
  4082fe:	460a      	mov	r2, r1
  408300:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408304:	f04f 0e01 	mov.w	lr, #1
  408308:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40830c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408310:	2e00      	cmp	r6, #0
  408312:	d0dc      	beq.n	4082ce <__register_exitproc+0x4a>
  408314:	e7cc      	b.n	4082b0 <__register_exitproc+0x2c>
  408316:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40831a:	430c      	orrs	r4, r1
  40831c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408320:	e7d5      	b.n	4082ce <__register_exitproc+0x4a>
  408322:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408326:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40832a:	e7bb      	b.n	4082a4 <__register_exitproc+0x20>
  40832c:	6828      	ldr	r0, [r5, #0]
  40832e:	f7ff f8ff 	bl	407530 <__retarget_lock_release_recursive>
  408332:	f04f 30ff 	mov.w	r0, #4294967295
  408336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40833a:	bf00      	nop
  40833c:	20400468 	.word	0x20400468
  408340:	004088e0 	.word	0x004088e0
  408344:	00407625 	.word	0x00407625

00408348 <_close_r>:
  408348:	b538      	push	{r3, r4, r5, lr}
  40834a:	4c07      	ldr	r4, [pc, #28]	; (408368 <_close_r+0x20>)
  40834c:	2300      	movs	r3, #0
  40834e:	4605      	mov	r5, r0
  408350:	4608      	mov	r0, r1
  408352:	6023      	str	r3, [r4, #0]
  408354:	f7fc fdda 	bl	404f0c <_close>
  408358:	1c43      	adds	r3, r0, #1
  40835a:	d000      	beq.n	40835e <_close_r+0x16>
  40835c:	bd38      	pop	{r3, r4, r5, pc}
  40835e:	6823      	ldr	r3, [r4, #0]
  408360:	2b00      	cmp	r3, #0
  408362:	d0fb      	beq.n	40835c <_close_r+0x14>
  408364:	602b      	str	r3, [r5, #0]
  408366:	bd38      	pop	{r3, r4, r5, pc}
  408368:	20420480 	.word	0x20420480

0040836c <_fclose_r>:
  40836c:	b570      	push	{r4, r5, r6, lr}
  40836e:	b159      	cbz	r1, 408388 <_fclose_r+0x1c>
  408370:	4605      	mov	r5, r0
  408372:	460c      	mov	r4, r1
  408374:	b110      	cbz	r0, 40837c <_fclose_r+0x10>
  408376:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408378:	2b00      	cmp	r3, #0
  40837a:	d03c      	beq.n	4083f6 <_fclose_r+0x8a>
  40837c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40837e:	07d8      	lsls	r0, r3, #31
  408380:	d505      	bpl.n	40838e <_fclose_r+0x22>
  408382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408386:	b92b      	cbnz	r3, 408394 <_fclose_r+0x28>
  408388:	2600      	movs	r6, #0
  40838a:	4630      	mov	r0, r6
  40838c:	bd70      	pop	{r4, r5, r6, pc}
  40838e:	89a3      	ldrh	r3, [r4, #12]
  408390:	0599      	lsls	r1, r3, #22
  408392:	d53c      	bpl.n	40840e <_fclose_r+0xa2>
  408394:	4621      	mov	r1, r4
  408396:	4628      	mov	r0, r5
  408398:	f7fe fc10 	bl	406bbc <__sflush_r>
  40839c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40839e:	4606      	mov	r6, r0
  4083a0:	b133      	cbz	r3, 4083b0 <_fclose_r+0x44>
  4083a2:	69e1      	ldr	r1, [r4, #28]
  4083a4:	4628      	mov	r0, r5
  4083a6:	4798      	blx	r3
  4083a8:	2800      	cmp	r0, #0
  4083aa:	bfb8      	it	lt
  4083ac:	f04f 36ff 	movlt.w	r6, #4294967295
  4083b0:	89a3      	ldrh	r3, [r4, #12]
  4083b2:	061a      	lsls	r2, r3, #24
  4083b4:	d422      	bmi.n	4083fc <_fclose_r+0x90>
  4083b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4083b8:	b141      	cbz	r1, 4083cc <_fclose_r+0x60>
  4083ba:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4083be:	4299      	cmp	r1, r3
  4083c0:	d002      	beq.n	4083c8 <_fclose_r+0x5c>
  4083c2:	4628      	mov	r0, r5
  4083c4:	f7fe fe18 	bl	406ff8 <_free_r>
  4083c8:	2300      	movs	r3, #0
  4083ca:	6323      	str	r3, [r4, #48]	; 0x30
  4083cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4083ce:	b121      	cbz	r1, 4083da <_fclose_r+0x6e>
  4083d0:	4628      	mov	r0, r5
  4083d2:	f7fe fe11 	bl	406ff8 <_free_r>
  4083d6:	2300      	movs	r3, #0
  4083d8:	6463      	str	r3, [r4, #68]	; 0x44
  4083da:	f7fe fd13 	bl	406e04 <__sfp_lock_acquire>
  4083de:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4083e0:	2200      	movs	r2, #0
  4083e2:	07db      	lsls	r3, r3, #31
  4083e4:	81a2      	strh	r2, [r4, #12]
  4083e6:	d50e      	bpl.n	408406 <_fclose_r+0x9a>
  4083e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4083ea:	f7ff f89d 	bl	407528 <__retarget_lock_close_recursive>
  4083ee:	f7fe fd0f 	bl	406e10 <__sfp_lock_release>
  4083f2:	4630      	mov	r0, r6
  4083f4:	bd70      	pop	{r4, r5, r6, pc}
  4083f6:	f7fe fcd9 	bl	406dac <__sinit>
  4083fa:	e7bf      	b.n	40837c <_fclose_r+0x10>
  4083fc:	6921      	ldr	r1, [r4, #16]
  4083fe:	4628      	mov	r0, r5
  408400:	f7fe fdfa 	bl	406ff8 <_free_r>
  408404:	e7d7      	b.n	4083b6 <_fclose_r+0x4a>
  408406:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408408:	f7ff f892 	bl	407530 <__retarget_lock_release_recursive>
  40840c:	e7ec      	b.n	4083e8 <_fclose_r+0x7c>
  40840e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408410:	f7ff f88c 	bl	40752c <__retarget_lock_acquire_recursive>
  408414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408418:	2b00      	cmp	r3, #0
  40841a:	d1bb      	bne.n	408394 <_fclose_r+0x28>
  40841c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40841e:	f016 0601 	ands.w	r6, r6, #1
  408422:	d1b1      	bne.n	408388 <_fclose_r+0x1c>
  408424:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408426:	f7ff f883 	bl	407530 <__retarget_lock_release_recursive>
  40842a:	4630      	mov	r0, r6
  40842c:	bd70      	pop	{r4, r5, r6, pc}
  40842e:	bf00      	nop

00408430 <_fstat_r>:
  408430:	b538      	push	{r3, r4, r5, lr}
  408432:	460b      	mov	r3, r1
  408434:	4c07      	ldr	r4, [pc, #28]	; (408454 <_fstat_r+0x24>)
  408436:	4605      	mov	r5, r0
  408438:	4611      	mov	r1, r2
  40843a:	4618      	mov	r0, r3
  40843c:	2300      	movs	r3, #0
  40843e:	6023      	str	r3, [r4, #0]
  408440:	f7fc fd70 	bl	404f24 <_fstat>
  408444:	1c43      	adds	r3, r0, #1
  408446:	d000      	beq.n	40844a <_fstat_r+0x1a>
  408448:	bd38      	pop	{r3, r4, r5, pc}
  40844a:	6823      	ldr	r3, [r4, #0]
  40844c:	2b00      	cmp	r3, #0
  40844e:	d0fb      	beq.n	408448 <_fstat_r+0x18>
  408450:	602b      	str	r3, [r5, #0]
  408452:	bd38      	pop	{r3, r4, r5, pc}
  408454:	20420480 	.word	0x20420480

00408458 <_isatty_r>:
  408458:	b538      	push	{r3, r4, r5, lr}
  40845a:	4c07      	ldr	r4, [pc, #28]	; (408478 <_isatty_r+0x20>)
  40845c:	2300      	movs	r3, #0
  40845e:	4605      	mov	r5, r0
  408460:	4608      	mov	r0, r1
  408462:	6023      	str	r3, [r4, #0]
  408464:	f7fc fd6e 	bl	404f44 <_isatty>
  408468:	1c43      	adds	r3, r0, #1
  40846a:	d000      	beq.n	40846e <_isatty_r+0x16>
  40846c:	bd38      	pop	{r3, r4, r5, pc}
  40846e:	6823      	ldr	r3, [r4, #0]
  408470:	2b00      	cmp	r3, #0
  408472:	d0fb      	beq.n	40846c <_isatty_r+0x14>
  408474:	602b      	str	r3, [r5, #0]
  408476:	bd38      	pop	{r3, r4, r5, pc}
  408478:	20420480 	.word	0x20420480

0040847c <_lseek_r>:
  40847c:	b570      	push	{r4, r5, r6, lr}
  40847e:	460d      	mov	r5, r1
  408480:	4c08      	ldr	r4, [pc, #32]	; (4084a4 <_lseek_r+0x28>)
  408482:	4611      	mov	r1, r2
  408484:	4606      	mov	r6, r0
  408486:	461a      	mov	r2, r3
  408488:	4628      	mov	r0, r5
  40848a:	2300      	movs	r3, #0
  40848c:	6023      	str	r3, [r4, #0]
  40848e:	f7fc fd64 	bl	404f5a <_lseek>
  408492:	1c43      	adds	r3, r0, #1
  408494:	d000      	beq.n	408498 <_lseek_r+0x1c>
  408496:	bd70      	pop	{r4, r5, r6, pc}
  408498:	6823      	ldr	r3, [r4, #0]
  40849a:	2b00      	cmp	r3, #0
  40849c:	d0fb      	beq.n	408496 <_lseek_r+0x1a>
  40849e:	6033      	str	r3, [r6, #0]
  4084a0:	bd70      	pop	{r4, r5, r6, pc}
  4084a2:	bf00      	nop
  4084a4:	20420480 	.word	0x20420480

004084a8 <_read_r>:
  4084a8:	b570      	push	{r4, r5, r6, lr}
  4084aa:	460d      	mov	r5, r1
  4084ac:	4c08      	ldr	r4, [pc, #32]	; (4084d0 <_read_r+0x28>)
  4084ae:	4611      	mov	r1, r2
  4084b0:	4606      	mov	r6, r0
  4084b2:	461a      	mov	r2, r3
  4084b4:	4628      	mov	r0, r5
  4084b6:	2300      	movs	r3, #0
  4084b8:	6023      	str	r3, [r4, #0]
  4084ba:	f7fb f84f 	bl	40355c <_read>
  4084be:	1c43      	adds	r3, r0, #1
  4084c0:	d000      	beq.n	4084c4 <_read_r+0x1c>
  4084c2:	bd70      	pop	{r4, r5, r6, pc}
  4084c4:	6823      	ldr	r3, [r4, #0]
  4084c6:	2b00      	cmp	r3, #0
  4084c8:	d0fb      	beq.n	4084c2 <_read_r+0x1a>
  4084ca:	6033      	str	r3, [r6, #0]
  4084cc:	bd70      	pop	{r4, r5, r6, pc}
  4084ce:	bf00      	nop
  4084d0:	20420480 	.word	0x20420480

004084d4 <__aeabi_uldivmod>:
  4084d4:	b953      	cbnz	r3, 4084ec <__aeabi_uldivmod+0x18>
  4084d6:	b94a      	cbnz	r2, 4084ec <__aeabi_uldivmod+0x18>
  4084d8:	2900      	cmp	r1, #0
  4084da:	bf08      	it	eq
  4084dc:	2800      	cmpeq	r0, #0
  4084de:	bf1c      	itt	ne
  4084e0:	f04f 31ff 	movne.w	r1, #4294967295
  4084e4:	f04f 30ff 	movne.w	r0, #4294967295
  4084e8:	f000 b97a 	b.w	4087e0 <__aeabi_idiv0>
  4084ec:	f1ad 0c08 	sub.w	ip, sp, #8
  4084f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4084f4:	f000 f806 	bl	408504 <__udivmoddi4>
  4084f8:	f8dd e004 	ldr.w	lr, [sp, #4]
  4084fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408500:	b004      	add	sp, #16
  408502:	4770      	bx	lr

00408504 <__udivmoddi4>:
  408504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408508:	468c      	mov	ip, r1
  40850a:	460d      	mov	r5, r1
  40850c:	4604      	mov	r4, r0
  40850e:	9e08      	ldr	r6, [sp, #32]
  408510:	2b00      	cmp	r3, #0
  408512:	d151      	bne.n	4085b8 <__udivmoddi4+0xb4>
  408514:	428a      	cmp	r2, r1
  408516:	4617      	mov	r7, r2
  408518:	d96d      	bls.n	4085f6 <__udivmoddi4+0xf2>
  40851a:	fab2 fe82 	clz	lr, r2
  40851e:	f1be 0f00 	cmp.w	lr, #0
  408522:	d00b      	beq.n	40853c <__udivmoddi4+0x38>
  408524:	f1ce 0c20 	rsb	ip, lr, #32
  408528:	fa01 f50e 	lsl.w	r5, r1, lr
  40852c:	fa20 fc0c 	lsr.w	ip, r0, ip
  408530:	fa02 f70e 	lsl.w	r7, r2, lr
  408534:	ea4c 0c05 	orr.w	ip, ip, r5
  408538:	fa00 f40e 	lsl.w	r4, r0, lr
  40853c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408540:	0c25      	lsrs	r5, r4, #16
  408542:	fbbc f8fa 	udiv	r8, ip, sl
  408546:	fa1f f987 	uxth.w	r9, r7
  40854a:	fb0a cc18 	mls	ip, sl, r8, ip
  40854e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408552:	fb08 f309 	mul.w	r3, r8, r9
  408556:	42ab      	cmp	r3, r5
  408558:	d90a      	bls.n	408570 <__udivmoddi4+0x6c>
  40855a:	19ed      	adds	r5, r5, r7
  40855c:	f108 32ff 	add.w	r2, r8, #4294967295
  408560:	f080 8123 	bcs.w	4087aa <__udivmoddi4+0x2a6>
  408564:	42ab      	cmp	r3, r5
  408566:	f240 8120 	bls.w	4087aa <__udivmoddi4+0x2a6>
  40856a:	f1a8 0802 	sub.w	r8, r8, #2
  40856e:	443d      	add	r5, r7
  408570:	1aed      	subs	r5, r5, r3
  408572:	b2a4      	uxth	r4, r4
  408574:	fbb5 f0fa 	udiv	r0, r5, sl
  408578:	fb0a 5510 	mls	r5, sl, r0, r5
  40857c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408580:	fb00 f909 	mul.w	r9, r0, r9
  408584:	45a1      	cmp	r9, r4
  408586:	d909      	bls.n	40859c <__udivmoddi4+0x98>
  408588:	19e4      	adds	r4, r4, r7
  40858a:	f100 33ff 	add.w	r3, r0, #4294967295
  40858e:	f080 810a 	bcs.w	4087a6 <__udivmoddi4+0x2a2>
  408592:	45a1      	cmp	r9, r4
  408594:	f240 8107 	bls.w	4087a6 <__udivmoddi4+0x2a2>
  408598:	3802      	subs	r0, #2
  40859a:	443c      	add	r4, r7
  40859c:	eba4 0409 	sub.w	r4, r4, r9
  4085a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4085a4:	2100      	movs	r1, #0
  4085a6:	2e00      	cmp	r6, #0
  4085a8:	d061      	beq.n	40866e <__udivmoddi4+0x16a>
  4085aa:	fa24 f40e 	lsr.w	r4, r4, lr
  4085ae:	2300      	movs	r3, #0
  4085b0:	6034      	str	r4, [r6, #0]
  4085b2:	6073      	str	r3, [r6, #4]
  4085b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085b8:	428b      	cmp	r3, r1
  4085ba:	d907      	bls.n	4085cc <__udivmoddi4+0xc8>
  4085bc:	2e00      	cmp	r6, #0
  4085be:	d054      	beq.n	40866a <__udivmoddi4+0x166>
  4085c0:	2100      	movs	r1, #0
  4085c2:	e886 0021 	stmia.w	r6, {r0, r5}
  4085c6:	4608      	mov	r0, r1
  4085c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085cc:	fab3 f183 	clz	r1, r3
  4085d0:	2900      	cmp	r1, #0
  4085d2:	f040 808e 	bne.w	4086f2 <__udivmoddi4+0x1ee>
  4085d6:	42ab      	cmp	r3, r5
  4085d8:	d302      	bcc.n	4085e0 <__udivmoddi4+0xdc>
  4085da:	4282      	cmp	r2, r0
  4085dc:	f200 80fa 	bhi.w	4087d4 <__udivmoddi4+0x2d0>
  4085e0:	1a84      	subs	r4, r0, r2
  4085e2:	eb65 0503 	sbc.w	r5, r5, r3
  4085e6:	2001      	movs	r0, #1
  4085e8:	46ac      	mov	ip, r5
  4085ea:	2e00      	cmp	r6, #0
  4085ec:	d03f      	beq.n	40866e <__udivmoddi4+0x16a>
  4085ee:	e886 1010 	stmia.w	r6, {r4, ip}
  4085f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085f6:	b912      	cbnz	r2, 4085fe <__udivmoddi4+0xfa>
  4085f8:	2701      	movs	r7, #1
  4085fa:	fbb7 f7f2 	udiv	r7, r7, r2
  4085fe:	fab7 fe87 	clz	lr, r7
  408602:	f1be 0f00 	cmp.w	lr, #0
  408606:	d134      	bne.n	408672 <__udivmoddi4+0x16e>
  408608:	1beb      	subs	r3, r5, r7
  40860a:	0c3a      	lsrs	r2, r7, #16
  40860c:	fa1f fc87 	uxth.w	ip, r7
  408610:	2101      	movs	r1, #1
  408612:	fbb3 f8f2 	udiv	r8, r3, r2
  408616:	0c25      	lsrs	r5, r4, #16
  408618:	fb02 3318 	mls	r3, r2, r8, r3
  40861c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408620:	fb0c f308 	mul.w	r3, ip, r8
  408624:	42ab      	cmp	r3, r5
  408626:	d907      	bls.n	408638 <__udivmoddi4+0x134>
  408628:	19ed      	adds	r5, r5, r7
  40862a:	f108 30ff 	add.w	r0, r8, #4294967295
  40862e:	d202      	bcs.n	408636 <__udivmoddi4+0x132>
  408630:	42ab      	cmp	r3, r5
  408632:	f200 80d1 	bhi.w	4087d8 <__udivmoddi4+0x2d4>
  408636:	4680      	mov	r8, r0
  408638:	1aed      	subs	r5, r5, r3
  40863a:	b2a3      	uxth	r3, r4
  40863c:	fbb5 f0f2 	udiv	r0, r5, r2
  408640:	fb02 5510 	mls	r5, r2, r0, r5
  408644:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408648:	fb0c fc00 	mul.w	ip, ip, r0
  40864c:	45a4      	cmp	ip, r4
  40864e:	d907      	bls.n	408660 <__udivmoddi4+0x15c>
  408650:	19e4      	adds	r4, r4, r7
  408652:	f100 33ff 	add.w	r3, r0, #4294967295
  408656:	d202      	bcs.n	40865e <__udivmoddi4+0x15a>
  408658:	45a4      	cmp	ip, r4
  40865a:	f200 80b8 	bhi.w	4087ce <__udivmoddi4+0x2ca>
  40865e:	4618      	mov	r0, r3
  408660:	eba4 040c 	sub.w	r4, r4, ip
  408664:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408668:	e79d      	b.n	4085a6 <__udivmoddi4+0xa2>
  40866a:	4631      	mov	r1, r6
  40866c:	4630      	mov	r0, r6
  40866e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408672:	f1ce 0420 	rsb	r4, lr, #32
  408676:	fa05 f30e 	lsl.w	r3, r5, lr
  40867a:	fa07 f70e 	lsl.w	r7, r7, lr
  40867e:	fa20 f804 	lsr.w	r8, r0, r4
  408682:	0c3a      	lsrs	r2, r7, #16
  408684:	fa25 f404 	lsr.w	r4, r5, r4
  408688:	ea48 0803 	orr.w	r8, r8, r3
  40868c:	fbb4 f1f2 	udiv	r1, r4, r2
  408690:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408694:	fb02 4411 	mls	r4, r2, r1, r4
  408698:	fa1f fc87 	uxth.w	ip, r7
  40869c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4086a0:	fb01 f30c 	mul.w	r3, r1, ip
  4086a4:	42ab      	cmp	r3, r5
  4086a6:	fa00 f40e 	lsl.w	r4, r0, lr
  4086aa:	d909      	bls.n	4086c0 <__udivmoddi4+0x1bc>
  4086ac:	19ed      	adds	r5, r5, r7
  4086ae:	f101 30ff 	add.w	r0, r1, #4294967295
  4086b2:	f080 808a 	bcs.w	4087ca <__udivmoddi4+0x2c6>
  4086b6:	42ab      	cmp	r3, r5
  4086b8:	f240 8087 	bls.w	4087ca <__udivmoddi4+0x2c6>
  4086bc:	3902      	subs	r1, #2
  4086be:	443d      	add	r5, r7
  4086c0:	1aeb      	subs	r3, r5, r3
  4086c2:	fa1f f588 	uxth.w	r5, r8
  4086c6:	fbb3 f0f2 	udiv	r0, r3, r2
  4086ca:	fb02 3310 	mls	r3, r2, r0, r3
  4086ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4086d2:	fb00 f30c 	mul.w	r3, r0, ip
  4086d6:	42ab      	cmp	r3, r5
  4086d8:	d907      	bls.n	4086ea <__udivmoddi4+0x1e6>
  4086da:	19ed      	adds	r5, r5, r7
  4086dc:	f100 38ff 	add.w	r8, r0, #4294967295
  4086e0:	d26f      	bcs.n	4087c2 <__udivmoddi4+0x2be>
  4086e2:	42ab      	cmp	r3, r5
  4086e4:	d96d      	bls.n	4087c2 <__udivmoddi4+0x2be>
  4086e6:	3802      	subs	r0, #2
  4086e8:	443d      	add	r5, r7
  4086ea:	1aeb      	subs	r3, r5, r3
  4086ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  4086f0:	e78f      	b.n	408612 <__udivmoddi4+0x10e>
  4086f2:	f1c1 0720 	rsb	r7, r1, #32
  4086f6:	fa22 f807 	lsr.w	r8, r2, r7
  4086fa:	408b      	lsls	r3, r1
  4086fc:	fa05 f401 	lsl.w	r4, r5, r1
  408700:	ea48 0303 	orr.w	r3, r8, r3
  408704:	fa20 fe07 	lsr.w	lr, r0, r7
  408708:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40870c:	40fd      	lsrs	r5, r7
  40870e:	ea4e 0e04 	orr.w	lr, lr, r4
  408712:	fbb5 f9fc 	udiv	r9, r5, ip
  408716:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40871a:	fb0c 5519 	mls	r5, ip, r9, r5
  40871e:	fa1f f883 	uxth.w	r8, r3
  408722:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408726:	fb09 f408 	mul.w	r4, r9, r8
  40872a:	42ac      	cmp	r4, r5
  40872c:	fa02 f201 	lsl.w	r2, r2, r1
  408730:	fa00 fa01 	lsl.w	sl, r0, r1
  408734:	d908      	bls.n	408748 <__udivmoddi4+0x244>
  408736:	18ed      	adds	r5, r5, r3
  408738:	f109 30ff 	add.w	r0, r9, #4294967295
  40873c:	d243      	bcs.n	4087c6 <__udivmoddi4+0x2c2>
  40873e:	42ac      	cmp	r4, r5
  408740:	d941      	bls.n	4087c6 <__udivmoddi4+0x2c2>
  408742:	f1a9 0902 	sub.w	r9, r9, #2
  408746:	441d      	add	r5, r3
  408748:	1b2d      	subs	r5, r5, r4
  40874a:	fa1f fe8e 	uxth.w	lr, lr
  40874e:	fbb5 f0fc 	udiv	r0, r5, ip
  408752:	fb0c 5510 	mls	r5, ip, r0, r5
  408756:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40875a:	fb00 f808 	mul.w	r8, r0, r8
  40875e:	45a0      	cmp	r8, r4
  408760:	d907      	bls.n	408772 <__udivmoddi4+0x26e>
  408762:	18e4      	adds	r4, r4, r3
  408764:	f100 35ff 	add.w	r5, r0, #4294967295
  408768:	d229      	bcs.n	4087be <__udivmoddi4+0x2ba>
  40876a:	45a0      	cmp	r8, r4
  40876c:	d927      	bls.n	4087be <__udivmoddi4+0x2ba>
  40876e:	3802      	subs	r0, #2
  408770:	441c      	add	r4, r3
  408772:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408776:	eba4 0408 	sub.w	r4, r4, r8
  40877a:	fba0 8902 	umull	r8, r9, r0, r2
  40877e:	454c      	cmp	r4, r9
  408780:	46c6      	mov	lr, r8
  408782:	464d      	mov	r5, r9
  408784:	d315      	bcc.n	4087b2 <__udivmoddi4+0x2ae>
  408786:	d012      	beq.n	4087ae <__udivmoddi4+0x2aa>
  408788:	b156      	cbz	r6, 4087a0 <__udivmoddi4+0x29c>
  40878a:	ebba 030e 	subs.w	r3, sl, lr
  40878e:	eb64 0405 	sbc.w	r4, r4, r5
  408792:	fa04 f707 	lsl.w	r7, r4, r7
  408796:	40cb      	lsrs	r3, r1
  408798:	431f      	orrs	r7, r3
  40879a:	40cc      	lsrs	r4, r1
  40879c:	6037      	str	r7, [r6, #0]
  40879e:	6074      	str	r4, [r6, #4]
  4087a0:	2100      	movs	r1, #0
  4087a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4087a6:	4618      	mov	r0, r3
  4087a8:	e6f8      	b.n	40859c <__udivmoddi4+0x98>
  4087aa:	4690      	mov	r8, r2
  4087ac:	e6e0      	b.n	408570 <__udivmoddi4+0x6c>
  4087ae:	45c2      	cmp	sl, r8
  4087b0:	d2ea      	bcs.n	408788 <__udivmoddi4+0x284>
  4087b2:	ebb8 0e02 	subs.w	lr, r8, r2
  4087b6:	eb69 0503 	sbc.w	r5, r9, r3
  4087ba:	3801      	subs	r0, #1
  4087bc:	e7e4      	b.n	408788 <__udivmoddi4+0x284>
  4087be:	4628      	mov	r0, r5
  4087c0:	e7d7      	b.n	408772 <__udivmoddi4+0x26e>
  4087c2:	4640      	mov	r0, r8
  4087c4:	e791      	b.n	4086ea <__udivmoddi4+0x1e6>
  4087c6:	4681      	mov	r9, r0
  4087c8:	e7be      	b.n	408748 <__udivmoddi4+0x244>
  4087ca:	4601      	mov	r1, r0
  4087cc:	e778      	b.n	4086c0 <__udivmoddi4+0x1bc>
  4087ce:	3802      	subs	r0, #2
  4087d0:	443c      	add	r4, r7
  4087d2:	e745      	b.n	408660 <__udivmoddi4+0x15c>
  4087d4:	4608      	mov	r0, r1
  4087d6:	e708      	b.n	4085ea <__udivmoddi4+0xe6>
  4087d8:	f1a8 0802 	sub.w	r8, r8, #2
  4087dc:	443d      	add	r5, r7
  4087de:	e72b      	b.n	408638 <__udivmoddi4+0x134>

004087e0 <__aeabi_idiv0>:
  4087e0:	4770      	bx	lr
  4087e2:	bf00      	nop
  4087e4:	454c4449 	.word	0x454c4449
  4087e8:	00000000 	.word	0x00000000
  4087ec:	00000a0d 	.word	0x00000a0d
  4087f0:	09097325 	.word	0x09097325
  4087f4:	25096325 	.word	0x25096325
  4087f8:	75250975 	.word	0x75250975
  4087fc:	0d752509 	.word	0x0d752509
  408800:	0000000a 	.word	0x0000000a
  408804:	20726d54 	.word	0x20726d54
  408808:	00637653 	.word	0x00637653
  40880c:	63617473 	.word	0x63617473
  408810:	766f206b 	.word	0x766f206b
  408814:	6c667265 	.word	0x6c667265
  408818:	2520776f 	.word	0x2520776f
  40881c:	73252078 	.word	0x73252078
  408820:	00000a0d 	.word	0x00000a0d
  408824:	6e676953 	.word	0x6e676953
  408828:	203a6c61 	.word	0x203a6c61
  40882c:	000a6425 	.word	0x000a6425
  408830:	72657641 	.word	0x72657641
  408834:	3a656761 	.word	0x3a656761
  408838:	0a642520 	.word	0x0a642520
  40883c:	00000000 	.word	0x00000000
  408840:	0001c200 	.word	0x0001c200
  408844:	000000c0 	.word	0x000000c0
  408848:	00000800 	.word	0x00000800
  40884c:	00000000 	.word	0x00000000
  408850:	41202d2d 	.word	0x41202d2d
  408854:	20434546 	.word	0x20434546
  408858:	44204f54 	.word	0x44204f54
  40885c:	41204341 	.word	0x41204341
  408860:	4f494455 	.word	0x4f494455
  408864:	4f525020 	.word	0x4f525020
  408868:	53534543 	.word	0x53534543
  40886c:	20474e49 	.word	0x20474e49
  408870:	0a0d2d2d 	.word	0x0a0d2d2d
  408874:	53202d2d 	.word	0x53202d2d
  408878:	37454d41 	.word	0x37454d41
  40887c:	50582d30 	.word	0x50582d30
  408880:	2d20444c 	.word	0x2d20444c
  408884:	2d0a0d2d 	.word	0x2d0a0d2d
  408888:	6f43202d 	.word	0x6f43202d
  40888c:	6c69706d 	.word	0x6c69706d
  408890:	203a6465 	.word	0x203a6465
  408894:	206e754a 	.word	0x206e754a
  408898:	32203320 	.word	0x32203320
  40889c:	20393130 	.word	0x20393130
  4088a0:	303a3231 	.word	0x303a3231
  4088a4:	37333a35 	.word	0x37333a35
  4088a8:	0d2d2d20 	.word	0x0d2d2d20
  4088ac:	00000000 	.word	0x00000000
  4088b0:	69647541 	.word	0x69647541
  4088b4:	7361546f 	.word	0x7361546f
  4088b8:	0000006b 	.word	0x0000006b
  4088bc:	6c696146 	.word	0x6c696146
  4088c0:	74206465 	.word	0x74206465
  4088c4:	7263206f 	.word	0x7263206f
  4088c8:	65746165 	.word	0x65746165
  4088cc:	73657420 	.word	0x73657420
  4088d0:	656c2074 	.word	0x656c2074
  4088d4:	61742064 	.word	0x61742064
  4088d8:	0a0d6b73 	.word	0x0a0d6b73
  4088dc:	00000000 	.word	0x00000000

004088e0 <_global_impure_ptr>:
  4088e0:	20400040 0000000a 33323130 37363534     @.@ ....01234567
  4088f0:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  408900:	37363534 62613938 66656463 00000000     456789abcdef....
  408910:	6c756e28 0000296c                       (null)..

00408918 <blanks.7217>:
  408918:	20202020 20202020 20202020 20202020                     

00408928 <zeroes.7218>:
  408928:	30303030 30303030 30303030 30303030     0000000000000000
  408938:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00408948 <_ctype_>:
  408948:	20202000 20202020 28282020 20282828     .         ((((( 
  408958:	20202020 20202020 20202020 20202020                     
  408968:	10108820 10101010 10101010 10101010      ...............
  408978:	04040410 04040404 10040404 10101010     ................
  408988:	41411010 41414141 01010101 01010101     ..AAAAAA........
  408998:	01010101 01010101 01010101 10101010     ................
  4089a8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4089b8:	02020202 02020202 02020202 10101010     ................
  4089c8:	00000020 00000000 00000000 00000000      ...............
	...

00408a4c <_init>:
  408a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408a4e:	bf00      	nop
  408a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408a52:	bc08      	pop	{r3}
  408a54:	469e      	mov	lr, r3
  408a56:	4770      	bx	lr

00408a58 <__init_array_start>:
  408a58:	00406b9d 	.word	0x00406b9d

00408a5c <__frame_dummy_init_array_entry>:
  408a5c:	00400165                                e.@.

00408a60 <_fini>:
  408a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408a62:	bf00      	nop
  408a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408a66:	bc08      	pop	{r3}
  408a68:	469e      	mov	lr, r3
  408a6a:	4770      	bx	lr

00408a6c <__fini_array_start>:
  408a6c:	00400141 	.word	0x00400141
